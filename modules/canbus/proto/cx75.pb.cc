// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/cx75.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/canbus/proto/cx75.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace canbus {
class Abs_whlspd_0x211_211DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Abs_whlspd_0x211_211> {
} _Abs_whlspd_0x211_211_default_instance_;
class Gw_ems_sts_0x151_151DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gw_ems_sts_0x151_151> {
} _Gw_ems_sts_0x151_151_default_instance_;
class Esp_raw_0x212_212DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esp_raw_0x212_212> {
} _Esp_raw_0x212_212_default_instance_;
class Gw_bcm_door_0x310_310DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gw_bcm_door_0x310_310> {
} _Gw_bcm_door_0x310_310_default_instance_;
class Pam_0x270_270DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Pam_0x270_270> {
} _Pam_0x270_270_default_instance_;
class Pam_0x271_271DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Pam_0x271_271> {
} _Pam_0x271_271_default_instance_;
class Pam_0x272_272DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Pam_0x272_272> {
} _Pam_0x272_272_default_instance_;
class Mrr_0x238_238DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mrr_0x238_238> {
} _Mrr_0x238_238_default_instance_;
class Mrr_0x239_239DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mrr_0x239_239> {
} _Mrr_0x239_239_default_instance_;
class Esp_direction_0x235_235DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esp_direction_0x235_235> {
} _Esp_direction_0x235_235_default_instance_;
class Esp_advanced_0x234_234DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esp_advanced_0x234_234> {
} _Esp_advanced_0x234_234_default_instance_;
class Eps_advanced_0x176_176DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Eps_advanced_0x176_176> {
} _Eps_advanced_0x176_176_default_instance_;
class Esp_whlpulse_0x236_236DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esp_whlpulse_0x236_236> {
} _Esp_whlpulse_0x236_236_default_instance_;
class Ipm_rightline_0x490_490DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ipm_rightline_0x490_490> {
} _Ipm_rightline_0x490_490_default_instance_;
class Sas_sensor_0x175_175DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Sas_sensor_0x175_175> {
} _Sas_sensor_0x175_175_default_instance_;
class Gw_body_0x321_321DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gw_body_0x321_321> {
} _Gw_body_0x321_321_default_instance_;
class Ipm_leftline_0x278_278DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ipm_leftline_0x278_278> {
} _Ipm_leftline_0x278_278_default_instance_;
class Gw_ems_engstatus_0x142_142DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gw_ems_engstatus_0x142_142> {
} _Gw_ems_engstatus_0x142_142_default_instance_;
class Gw_tbox_location_0x580_580DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gw_tbox_location_0x580_580> {
} _Gw_tbox_location_0x580_580_default_instance_;
class Srs_0x350_350DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Srs_0x350_350> {
} _Srs_0x350_350_default_instance_;
class Ipm_0x245_245DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ipm_0x245_245> {
} _Ipm_0x245_245_default_instance_;
class Gw_ems_tqwhl_0x111_111DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gw_ems_tqwhl_0x111_111> {
} _Gw_ems_tqwhl_0x111_111_default_instance_;
class Gw_tcu_gearinfo_0x123_123DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gw_tcu_gearinfo_0x123_123> {
} _Gw_tcu_gearinfo_0x123_123_default_instance_;
class Esp_pressure_0x241_241DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esp_pressure_0x241_241> {
} _Esp_pressure_0x241_241_default_instance_;
class Esp_status_0x243_243DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esp_status_0x243_243> {
} _Esp_status_0x243_243_default_instance_;
class Esp_axay_0x242_242DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esp_axay_0x242_242> {
} _Esp_axay_0x242_242_default_instance_;
class Gw_swm_mrr_0x31b_31bDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gw_swm_mrr_0x31b_31b> {
} _Gw_swm_mrr_0x31b_31b_default_instance_;
class Gw_swm_body_0x31a_31aDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gw_swm_body_0x31a_31a> {
} _Gw_swm_body_0x31a_31a_default_instance_;
class Gw_ems_tq_0x101_101DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gw_ems_tq_0x101_101> {
} _Gw_ems_tq_0x101_101_default_instance_;
class Esp_vlc_0x223_223DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esp_vlc_0x223_223> {
} _Esp_vlc_0x223_223_default_instance_;
class Gw_ems_whltq_0x107_107DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gw_ems_whltq_0x107_107> {
} _Gw_ems_whltq_0x107_107_default_instance_;
class Abs_sts_0x221_221DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Abs_sts_0x221_221> {
} _Abs_sts_0x221_221_default_instance_;
class Mrr_frobj_0x480_480DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mrr_frobj_0x480_480> {
} _Mrr_frobj_0x480_480_default_instance_;
class Mrr_0x246_246DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mrr_0x246_246> {
} _Mrr_0x246_246_default_instance_;
class Gw_mp5_nav_0x533_533DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gw_mp5_nav_0x533_533> {
} _Gw_mp5_nav_0x533_533_default_instance_;
class Gw_mp5_0x530_530DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gw_mp5_0x530_530> {
} _Gw_mp5_0x530_530_default_instance_;
class Mrr_frobj_0x279_279DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Mrr_frobj_0x279_279> {
} _Mrr_frobj_0x279_279_default_instance_;
class Gw_ic_0x510_510DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gw_ic_0x510_510> {
} _Gw_ic_0x510_510_default_instance_;
class Esp_tq_0x217_217DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esp_tq_0x217_217> {
} _Esp_tq_0x217_217_default_instance_;
class Esp_rpmf_0x213_213DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Esp_rpmf_0x213_213> {
} _Esp_rpmf_0x213_213_default_instance_;
class Gw_ic_time_0x581_581DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gw_ic_time_0x581_581> {
} _Gw_ic_time_0x581_581_default_instance_;
class Afs_0x5a0_5a0DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Afs_0x5a0_5a0> {
} _Afs_0x5a0_5a0_default_instance_;
class Sod_nm_0x440_440DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Sod_nm_0x440_440> {
} _Sod_nm_0x440_440_default_instance_;
class Gw_nm_0x460_460DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gw_nm_0x460_460> {
} _Gw_nm_0x460_460_default_instance_;
class Eps_0x260_260DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Eps_0x260_260> {
} _Eps_0x260_260_default_instance_;
class Sod_0x275_275DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Sod_0x275_275> {
} _Sod_0x275_275_default_instance_;
class Gw_tpms_tire_0x361_361DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Gw_tpms_tire_0x361_361> {
} _Gw_tpms_tire_0x361_361_default_instance_;
class Ins_datainfo_506DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ins_datainfo_506> {
} _Ins_datainfo_506_default_instance_;
class Ins_std_507DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ins_std_507> {
} _Ins_std_507_default_instance_;
class Ins_latitudelongitude_504DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ins_latitudelongitude_504> {
} _Ins_latitudelongitude_504_default_instance_;
class Ins_speed_505DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ins_speed_505> {
} _Ins_speed_505_default_instance_;
class Ins_headingpitchroll_502DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ins_headingpitchroll_502> {
} _Ins_headingpitchroll_502_default_instance_;
class Ins_heightandtime_503DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ins_heightandtime_503> {
} _Ins_heightandtime_503_default_instance_;
class Ins_gyro_501DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ins_gyro_501> {
} _Ins_gyro_501_default_instance_;
class Ins_acc_500DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ins_acc_500> {
} _Ins_acc_500_default_instance_;
class Cx75DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Cx75> {
} _Cx75_default_instance_;

namespace protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[56];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[406];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_whlspd_0x211_211, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_whlspd_0x211_211, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_whlspd_0x211_211, abs_whlspdfrntri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_whlspd_0x211_211, abs_whlspdrele_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_whlspd_0x211_211, abs_whlspdreri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_whlspd_0x211_211, rollingcounter_0x211_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_whlspd_0x211_211, abs_whlspdreristatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_whlspd_0x211_211, abs_whlspdrelestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_whlspd_0x211_211, abs_whlspdfrntristatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_whlspd_0x211_211, abs_whlspdfrntlestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_whlspd_0x211_211, checksum_0x211_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_whlspd_0x211_211, abs_whlspdfrntle_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_sts_0x151_151, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_sts_0x151_151, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_sts_0x151_151, ems_engbarometricpressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_sts_0x151_151, ems_vacuumpressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_sts_0x151_151, ems_targcruisespeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_sts_0x151_151, ems_atsdrivingmodestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_sts_0x151_151, ems_enginestopstartstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_sts_0x151_151, dcm_ems_rollingcounter_0x151_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_sts_0x151_151, ems_cruisecontrolstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_sts_0x151_151, ems_drivingmodechange_fault_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_sts_0x151_151, dcm_ems_checksum_0x151_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_sts_0x151_151, ems_engofftime_),
  1,
  0,
  3,
  2,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_raw_0x212_212, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_raw_0x212_212, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_raw_0x212_212, esp_vxwwheelrawfr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_raw_0x212_212, esp_vxwwheelrawrl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_raw_0x212_212, esp_vxwwheelrawrr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_raw_0x212_212, rolling_counter_0x212_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_raw_0x212_212, esp_vxwwheelrrvalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_raw_0x212_212, esp_vxwwheelrlvalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_raw_0x212_212, esp_vxwwheelfrvalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_raw_0x212_212, esp_vxwwheelflvalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_raw_0x212_212, checksum_0x212_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_raw_0x212_212, esp_vxwwheelrawfl_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_doorstsrearri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_doorlockstsrearle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_doorlockstsfrntri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_doorlockstsfrntle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_antitheftsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_loadsensitivity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_lockunlockfeedback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_doorlockststrunk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_doorststrunk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_trunkdoorpreunlocksts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_doorstsrearle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_frontwipersts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_enginehoodsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_plg_driversw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_windowscmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_rearwipersts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_doorstsfrntri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_rolling_counter_0x310_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_turnindicatorsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_checksum_0x310_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_doorstsfrntle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_bcm_door_0x310_310, bcm_doorlockstsrearri_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x270_270, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x270_270, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x270_270, pam_esp_target_gear_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x270_270, pam_brakefunctionmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x270_270, stopstartinhibit_apa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x270_270, pam_apaf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x270_270, pam_cmdepssts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x270_270, pam_sts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x270_270, pam_brakemodests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x270_270, pam_failurebrakemode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x270_270, pam_esp_speed_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x270_270, pam_esp_stop_distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x270_270, rolling_counter_0x270_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x270_270, checksum_0x270_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x270_270, pam_trgtepsstrgwhlang_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x271_271, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x271_271, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x271_271, pam_infodisplayreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x271_271, pam_objectstsflm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x271_271, pam_objectstsflc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x271_271, pam_objectstsfrc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x271_271, pam_objectstsfrm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x271_271, pam_objectstsrlm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x271_271, pam_objectstsrlc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x271_271, pam_objectstsrrc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x271_271, pam_objectstsrrm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x271_271, pam_chimecmdsoundstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x271_271, pam_rearsystemworksts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x271_271, pam_frontsystemworksts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x271_271, pam_parkingbarsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x271_271, pam_chimecmdsoundcadence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x271_271, pam_parkingbarpercent_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x272_272, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x272_272, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x272_272, apa_parkslot_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x272_272, sdg_objectsts_frs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x272_272, sdg_objectstsrls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x272_272, apa_selectedside_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x272_272, sdg_objectstsrrs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x272_272, sdg_objectstsfrs_rrs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x272_272, apa_quit_indication_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x272_272, apa_recover_int_indication_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x272_272, sdg_objectstsfls_rls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x272_272, apa_indication_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pam_0x272_272, sdg_objectstsfls_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x238_238, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x238_238, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x238_238, acc_tgtaxlowercomftband_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x238_238, acc_tgtaxupperlim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x238_238, acc_tgtaxlowerlim_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x238_238, acc_tgtax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x238_238, rolling_counter_0x238_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x238_238, checksum_0x238_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x238_238, acc_tgtaxuppercomftband_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, acc_uppercomftbandreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, acc_brakepreferred_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, eba_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, aeb_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, acc_standstillreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, acc_driveoff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, awb_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, abp_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, awb_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, aba_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, aeb_tgtax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, acc_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, rolling_counter_0x239_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, checksum_0x239_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, shutdownmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x239_239, aba_level_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_direction_0x235_235, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_direction_0x235_235, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_direction_0x235_235, esp_whlmilgrearre_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_direction_0x235_235, esp_frwheeldrivedirstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_direction_0x235_235, esp_flwheeldrivedirstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_direction_0x235_235, esp_rrwheeldrivedirstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_direction_0x235_235, esp_rlwheeldrivedirstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_direction_0x235_235, esp_rrwheeldrivedirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_direction_0x235_235, esp_rlwheeldrivedirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_direction_0x235_235, esp_frwheeldrivedirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_direction_0x235_235, esp_flwheeldrivedirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_direction_0x235_235, rolling_counter_0x235_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_direction_0x235_235, esp_whlmilgrearlestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_direction_0x235_235, esp_whlmilgrearristatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_direction_0x235_235, esp_vehiclestandstill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_direction_0x235_235, checksum_0x235_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_direction_0x235_235, esp_whlmilgrearle_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_vdcactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_ebdactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_ecdtempoff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_nobrakeforce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_brkfrictqtotatwhlvaild_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_aebdecavailable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_aebdecactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_prefillavailable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_prefillactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_abaavailable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_abaactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_cddavailable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_dtcactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_awbavailable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_awbactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_brkfrictqtotatwhl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_vlcerror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_cdderror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, rolling_counter_0x234_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, checksum_0x234_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_cddactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_advanced_0x234_234, esp_cdd_apactive_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_advanced_0x176_176, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_advanced_0x176_176, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_advanced_0x176_176, eps_lkaresponsetorque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_advanced_0x176_176, eps_tosionbartorquevalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_advanced_0x176_176, eps_lkaresponsetorquevalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_advanced_0x176_176, eps_ldwcontrolstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_advanced_0x176_176, eps_pam_steeringsts_reserved_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_advanced_0x176_176, eps_lkacontrolstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_advanced_0x176_176, eps_epspaminh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_advanced_0x176_176, rolling_counter_0x176_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_advanced_0x176_176, eps_epspamsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_advanced_0x176_176, checksum_0x176_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_advanced_0x176_176, eps_torsionbartorque_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_whlpulse_0x236_236, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_whlpulse_0x236_236, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_whlpulse_0x236_236, esp_wheelpulse_fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_whlpulse_0x236_236, esp_wheelpulse_rl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_whlpulse_0x236_236, esp_wheelpulse_rr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_whlpulse_0x236_236, rollingcounter_esp_0x236_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_whlpulse_0x236_236, esp_wheelpulse_rr_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_whlpulse_0x236_236, esp_wheelpulse_rl_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_whlpulse_0x236_236, esp_wheelpulse_fr_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_whlpulse_0x236_236, esp_wheelpulse_fl_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_whlpulse_0x236_236, checksum_esp_0x236_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_whlpulse_0x236_236, esp_wheelpulse_fl_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_rightline_0x490_490, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_rightline_0x490_490, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_rightline_0x490_490, ipm_rightline_dy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_rightline_0x490_490, ipm_rightline_dx_lookhead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_rightline_0x490_490, ipm_rightline_hor_curve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_rightline_0x490_490, ipm_rightline_yawangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_rightline_0x490_490, ipm_rightline_dx_start_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sas_sensor_0x175_175, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sas_sensor_0x175_175, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sas_sensor_0x175_175, sas_raw_steerwheelangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sas_sensor_0x175_175, sas_steerwheelrotspd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sas_sensor_0x175_175, sas_trimmingsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sas_sensor_0x175_175, sas_steerwheelrotspdstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sas_sensor_0x175_175, rolling_counter_0x175_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sas_sensor_0x175_175, sas_sasstscal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sas_sensor_0x175_175, sas_raw_sasstssnsr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sas_sensor_0x175_175, sas_sasstssnsr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sas_sensor_0x175_175, checksum_0x175_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sas_sensor_0x175_175, sas_steerwheelangle_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  9,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_body_0x321_321, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_body_0x321_321, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_body_0x321_321, bcm_outsidetempdig_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_body_0x321_321, bcm_outsidetemp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_body_0x321_321, bcm_driving_mode_req_bcm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_body_0x321_321, bcm_powermode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_body_0x321_321, bcm_frntfoglmpsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_body_0x321_321, bcm_lowbeamsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_body_0x321_321, bcm_highbeamsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_body_0x321_321, bcm_ss_enablests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_body_0x321_321, bcm_reardef_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_body_0x321_321, bcm_brakefluidsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_body_0x321_321, bcm_autolampsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_body_0x321_321, bcm_poslmpsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_body_0x321_321, bcm_bgllumlvlsetting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_body_0x321_321, bcm_reverse_gear_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_leftline_0x278_278, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_leftline_0x278_278, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_leftline_0x278_278, ipm_leftline_dy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_leftline_0x278_278, ipm_leftline_dx_lookhead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_leftline_0x278_278, ipm_leftline_hor_curve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_leftline_0x278_278, ipm_leftline_yawangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_leftline_0x278_278, ipm_ledtline_dx_start_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_engstatus_0x142_142, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_engstatus_0x142_142, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_engstatus_0x142_142, ems_ignitiontiming_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_engstatus_0x142_142, ems_setlengidlespeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_engstatus_0x142_142, ems_engoperationstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_engstatus_0x142_142, ems_aircompressorstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_engstatus_0x142_142, ems_throttleplatepositionerror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_engstatus_0x142_142, ems_startstopmessage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_engstatus_0x142_142, dcm_ems_rollingcounter_0x142_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_engstatus_0x142_142, ems_ignswtsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_engstatus_0x142_142, dcm_ems_checksum_0x142_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_engstatus_0x142_142, ems_engthrottleposition_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tbox_location_0x580_580, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tbox_location_0x580_580, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tbox_location_0x580_580, tbox_longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tbox_location_0x580_580, tbox_latidude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tbox_location_0x580_580, tbox_gps_ub_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tbox_location_0x580_580, tbox_locationsts_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Srs_0x350_350, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Srs_0x350_350, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Srs_0x350_350, srs_sbr_secondrowright_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Srs_0x350_350, srs_sbr_secondrowmid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Srs_0x350_350, srs_sbr_secondrowleft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Srs_0x350_350, srs_sbr_pamsenger_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Srs_0x350_350, rolling_counter_0x350_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Srs_0x350_350, srs_sbr_driver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Srs_0x350_350, checksum_0x350_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Srs_0x350_350, srs_crashoutputsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Srs_0x350_350, srs_airbagfailsts_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_laneassit_torquereqstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_laneassit_torquevalidity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_laneassit_sensitivity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_laneassit_warningaudio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_laneassit_leftvisualization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_laneassit_rightvisualization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_slaspdlimitunits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_slastate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_laneassit_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_slaspdlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_hma_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_tjaica_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, rolling_counter_0x245_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_ldwwarningtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_laneassit_handsonreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_hma_highbeamreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, checksum_0x245_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_laneassit_torquereq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_laneassittype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ipm_0x245_245, ipm_laneassit_warningvibration_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  17,
  16,
  18,
  19,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tqwhl_0x111_111, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tqwhl_0x111_111, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tqwhl_0x111_111, ems_indicatedrealengtorqwhl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tqwhl_0x111_111, ems_indicatedaccmesgerror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tqwhl_0x111_111, ems_indicateddriveroverride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tqwhl_0x111_111, ems_indicateddriverreqtorq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tqwhl_0x111_111, dcm_ems_rollingcounter_0x111_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tqwhl_0x111_111, dcm_ems_checksum_0x111_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tqwhl_0x111_111, ems_indicateddriverreqtorqwhl_),
  0,
  1,
  3,
  2,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_displaygear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_gearselectorreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_transpmotoparkreqinvalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_gearshiftinprogress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_shiftleverpos_sbwm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_targetgearreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_driverintervention_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_trsmfaultflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_stgearmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_driving_mode_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_epblockreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_highresistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_drivingmodechange_fault_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_shiftlevertopreqinvalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_status_alivecounter0x123_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_transpmotorparkreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_shiftlevertopreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_status_checksum0x123_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tcu_gearinfo_0x123_123, tcu_currentgearposition_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_pressure_0x241_241, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_pressure_0x241_241, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_pressure_0x241_241, esp_trfcasetqlmtdbyesp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_pressure_0x241_241, esp_trfcasemodreqdbyesp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_pressure_0x241_241, esp_presoffsetmastercylindervali_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_pressure_0x241_241, esp_presoffsetmastercylinder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_pressure_0x241_241, rolling_counter_0x241_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_pressure_0x241_241, esp_master_cylinder_pressure_sta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_pressure_0x241_241, checksum_0x241_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_pressure_0x241_241, esp_master_cylinder_pressure_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_hhcavailable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_hhcactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_hdcactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_ldmblc_blrequestcontroller_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_cdpavailable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_cdpactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_epbwarningmessage3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_epbwarningmessage2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_epbwarningmessage1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_avhwarningmessage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_avhactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_avhstandby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_avhavabliable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_vdcflgflt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_tcsflgflt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_tcsctrlactv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_espctrlactv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_driving_mode_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_espinfolamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_espenablests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_gearshiftprevn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_epbstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, rollingcounter_0x243_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, rollerbenchmodests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, checksum_0x243_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_epberrorstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_ccswitchoff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_status_0x243_243, esp_hdcavailable_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_axay_0x242_242, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_axay_0x242_242, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_axay_0x242_242, esp_alat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_axay_0x242_242, esp_yawrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_axay_0x242_242, rolling_counter_0x242_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_axay_0x242_242, esp_yawratestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_axay_0x242_242, esp_alatstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_axay_0x242_242, esp_algtstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_axay_0x242_242, checksum_0x242_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_axay_0x242_242, esp_algt_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, swm_acctaugapsetplus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, swm_accvsetminus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, swm_shiftpadrequp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, swm_acclimphomests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, swm_laneassistswitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, swm_acctaugapsetminus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, swm_accvsetplus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, swm_shiftpadflt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, swm_accdeactivate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, swm_accresume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, swm_accset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, rolling_counter_0x31b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, swm_accenableswitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, checksum_0x31b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, swm_accresume_qt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, swm_tjaswitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_mrr_0x31b_31b, swm_shiftpadreqdown_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_highbeam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_frontwipingmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_wipinginterval_sensitvity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_rearfoglight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_frontfoglight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_washerlimphomests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_rearwipingmode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_turnindicationact_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_vol_plus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_vol_minus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_wechat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_lamplimphomests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_headlamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_next_song_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_previous_song_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_phone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_mute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_menu_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_menu_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_menu_down_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_menu_up_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_fwashersts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, rolling_counter_0x31a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_menu_return_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_menu_confirm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, checksum_0x31a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_rwashersts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_swm_body_0x31a_31a, swm_flashlightsts_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tq_0x101_101, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tq_0x101_101, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tq_0x101_101, ems_indicatedrealengtorq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tq_0x101_101, ems_engspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tq_0x101_101, ems_engspeederror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tq_0x101_101, ems_rngmodtorqcrsleadmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tq_0x101_101, dcm_ems_rollingcounter_0x101_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tq_0x101_101, dcm_ems_checksum_0x101_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_tq_0x101_101, ems_rngmodtorqcrsleadmax_),
  0,
  1,
  3,
  2,
  4,
  6,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_vlc_0x223_223, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_vlc_0x223_223, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_vlc_0x223_223, esp_vlc_internaltargetacce_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_vlc_0x223_223, esp_apa_gearboxenable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_vlc_0x223_223, esp_target_gear_request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_vlc_0x223_223, esp_vlc_apactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_vlc_0x223_223, esp_pam_lc_failurests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_vlc_0x223_223, esp_pam_lc_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_vlc_0x223_223, rolling_counter_0x223_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_vlc_0x223_223, esp_vlc_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_vlc_0x223_223, esp_vlc_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_vlc_0x223_223, esp_vlcapa_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_vlc_0x223_223, esp_vlcengtorqreqact_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_vlc_0x223_223, checksum_0x223_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_vlc_0x223_223, esp_vlcengtorqreq_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_whltq_0x107_107, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_whltq_0x107_107, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_whltq_0x107_107, minindicatedtorqwhl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_whltq_0x107_107, ems_accrawpedalratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_whltq_0x107_107, ems_accpedalratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_whltq_0x107_107, dcm_ems_rollingcounter_0x107_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_whltq_0x107_107, ems_kickdown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_whltq_0x107_107, ems_accpedalratioerror_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_whltq_0x107_107, ems_brkpedalstasus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_whltq_0x107_107, dcm_ems_checksum_0x107_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ems_whltq_0x107_107, maxindicatedtorqwhl_),
  1,
  0,
  3,
  2,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_sts_0x221_221, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_sts_0x221_221, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_sts_0x221_221, abs_whlmilgfrntri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_sts_0x221_221, abs_vehspdlgt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_sts_0x221_221, abs_vehspddirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_sts_0x221_221, abs_ebdflgflt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_sts_0x221_221, abs_absflgflt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_sts_0x221_221, abs_absctrlactv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_sts_0x221_221, rollingcounter_0x221_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_sts_0x221_221, abs_whlmilgfrntlestatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_sts_0x221_221, abs_whlmilgfrntristatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_sts_0x221_221, abs_vehspdlgtstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_sts_0x221_221, checksum_0x221_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Abs_sts_0x221_221, abs_whlmilgfrntle_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x480_480, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x480_480, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x480_480, mrr_l_object_dy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x480_480, mrr_l_obj_0x_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x480_480, mrr_r_object_dx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x480_480, mrr_r_object_dy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x480_480, mrr_r_obj_0x_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x480_480, mrr_lefttargrtdetection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x480_480, mrr_righttargrtdetection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x480_480, mrr_l_object_dx_),
  0,
  2,
  1,
  4,
  3,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, taugapset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, dxtarobj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, acchmi_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, accfailinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, takeoverreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, mrr_fcw_sensitive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, aeb_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, acc_startstop_infor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, fcw_prewarning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, fcw_latentwarning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, fcw_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, obj_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, rolling_counter_0x246_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, textinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, checksum_0x246_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, vsetdis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_0x246_246, objvalid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  16,
  15,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_nav_0x533_533, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_nav_0x533_533, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_nav_0x533_533, nav_speedlimitunits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_nav_0x533_533, nav_currroadtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_nav_0x533_533, nav_speedlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_nav_0x533_533, mp5_apaactive_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_nav_0x533_533, mp5_apa_confirmbutton_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_nav_0x533_533, mp5_apa_function_select_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_nav_0x533_533, nav_sts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_nav_0x533_533, nav_countrycode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_nav_0x533_533, nav_speedlimitstatus_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_fcw_sensitive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_icmenushift_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_aeb_on_off_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_fcw_on_off_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_bsdswitchsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_afs_swtichsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_laneassittypereq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_icmenuactive_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_alarmstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_alarmornot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_paakreset_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_cta_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_bsdlca_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_tsrmenureq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_ldwwarning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_ldwsensitvity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_avm_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_avm_rotationchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_ihcmenureq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_doa_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_apa_available_sts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_tpmsautolocationsetting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_avm_rotationdirection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_avm_button_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_mp5_0x530_530, mp5_view_choice_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x279_279, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x279_279, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x279_279, mrr_f_object_dy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x279_279, mrr_f_obj_0x_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x279_279, mrr_ff_object_dx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x279_279, mrr_ff_object_dy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x279_279, mrr_ff_obj_0x_class_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x279_279, mrr_fftargrtdetection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x279_279, mrr_peddetection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mrr_frobj_0x279_279, mrr_f_object_dx_),
  0,
  2,
  1,
  4,
  3,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_0x510_510, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_0x510_510, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_0x510_510, ic_airbagtelltalebehavior_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_0x510_510, ic_vehbrkpump_err_ic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_0x510_510, ic_disfail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_0x510_510, ic_qdashaccfail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_0x510_510, ic_vehspd_hmi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_0x510_510, ic_rolling_counter_0x510_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_0x510_510, ic_checksum_0x510_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_0x510_510, ic_odometermastervalue_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_tq_0x217_217, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_tq_0x217_217, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_tq_0x217_217, esp_tqdecreqdbyespslow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_tq_0x217_217, esp_tqinccreqdbyesp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_tq_0x217_217, rolling_counter_0x217_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_tq_0x217_217, esp_trqinc_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_tq_0x217_217, esp_trqred_req_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_tq_0x217_217, checksum_0x217_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_tq_0x217_217, esp_tqdecreqdbyespfast_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_rpmf_0x213_213, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_rpmf_0x213_213, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_rpmf_0x213_213, esp_wheelrpmfr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_rpmf_0x213_213, esp_wheelrpmfrvalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_rpmf_0x213_213, rolling_counter_0x213_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_rpmf_0x213_213, checksum_0x213_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_rpmf_0x213_213, esp_wheelrpmfl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Esp_rpmf_0x213_213, esp_wheelrpmflvalid_),
  0,
  1,
  2,
  4,
  3,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_time_0x581_581, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_time_0x581_581, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_time_0x581_581, ic_month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_time_0x581_581, ic_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_time_0x581_581, ic_hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_time_0x581_581, ic_minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_time_0x581_581, ic_second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_ic_time_0x581_581, ic_year_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Afs_0x5a0_5a0, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Afs_0x5a0_5a0, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Afs_0x5a0_5a0, afs_work_sts_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_nm_0x440_440, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_nm_0x440_440, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_nm_0x440_440, sodnmlimphome_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_nm_0x440_440, sodnmsleepind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_nm_0x440_440, sodnmsleepack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_nm_0x440_440, sodnmdestaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_nm_0x440_440, sodnmalive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_nm_0x440_440, sodnmring_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_nm_0x460_460, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_nm_0x460_460, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_nm_0x460_460, gwnmlimphome_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_nm_0x460_460, gwnmsleepind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_nm_0x460_460, gwnmsleepack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_nm_0x460_460, gwnmdestaddr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_nm_0x460_460, gwnmalive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_nm_0x460_460, gwnmring_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_sassoftlimitrightflg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_n_loadinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_st_emergencypowerlimit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_st_emergencymotor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_st_emergencyecu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_st_emergencycaninterface_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_st_emergencysensor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_st_emergencyovertemp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_st_emergencyovervoltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_st_emergencyundervoltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_f_ecutempvalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_sassoftlimitleftflg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_n_ecutemp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_n_performanceredu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_st_dtcflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, rolling_counter_0x260_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_sasindexsts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_s_warninglampyellow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, checksum_0x260_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_s_safelampred_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Eps_0x260_260, eps_f_loadinfo_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  12,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, sod_lca_warningreqright_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, sod_blis_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, sod_blis_display_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, sod_lca_warningreqleft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, sod_doa_warningreqleftrear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, sod_doa_warningreqleftfront_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, sod_cta_warningreqleft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, sod_doa_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, sod_cta_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, sod_sodlca_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, doa_offtelltale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, sod_doa_warningreqrightrear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, cta_offtelltale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, sodlca_offtelltale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, sod_doa_warningreqrightfront_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, rolling_counter_0x275_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, checksum_0x275_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, sod_cta_warningreqright_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sod_0x275_275, sod_autoalignmentflag_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tpms_tire_0x361_361, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tpms_tire_0x361_361, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tpms_tire_0x361_361, tpms_rf_pressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tpms_tire_0x361_361, tpms_rr_pressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tpms_tire_0x361_361, tpms_lr_pressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tpms_tire_0x361_361, tpms_tire_temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tpms_tire_0x361_361, tpms_lf_pressure_warning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tpms_tire_0x361_361, tpms_rf_pressure_warning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tpms_tire_0x361_361, tpms_system_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tpms_tire_0x361_361, tpms_rr_pressure_warning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tpms_tire_0x361_361, tpms_lr_pressure_warning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tpms_tire_0x361_361, tpms_temperature_warning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tpms_tire_0x361_361, tpms_resrved_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tpms_tire_0x361_361, tire_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tpms_tire_0x361_361, tpms_lamp_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tpms_tire_0x361_361, tpms_al_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gw_tpms_tire_0x361_361, tpms_lf_pressure_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  14,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_datainfo_506, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_datainfo_506, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_datainfo_506, ins_gpsflag_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_datainfo_506, ins_numsv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_datainfo_506, ins_gpsflag_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_datainfo_506, ins_gps_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_datainfo_506, ins_car_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_datainfo_506, ins_status_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_std_507, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_std_507, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_std_507, ins_std_lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_std_507, ins_std_lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_std_507, ins_std_locatheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_std_507, inins_std_heading_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_latitudelongitude_504, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_latitudelongitude_504, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_latitudelongitude_504, ins__latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_latitudelongitude_504, ins_longitude_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_speed_505, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_speed_505, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_speed_505, ins_northspd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_speed_505, ins_eastspd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_speed_505, ins_togroundspd_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_headingpitchroll_502, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_headingpitchroll_502, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_headingpitchroll_502, ins_pitchangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_headingpitchroll_502, ins_rollangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_headingpitchroll_502, ins_headingangle_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_heightandtime_503, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_heightandtime_503, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_heightandtime_503, ins_locatheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_heightandtime_503, ins_time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_gyro_501, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_gyro_501, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_gyro_501, gyro_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_gyro_501, gyro_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_gyro_501, gyro_z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_acc_500, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_acc_500, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_acc_500, acc_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_acc_500, acc_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins_acc_500, acc_z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, gw_ems_sts_0x151_151_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, esp_raw_0x212_212_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, gw_bcm_door_0x310_310_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, pam_0x270_270_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, pam_0x271_271_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, pam_0x272_272_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, mrr_0x238_238_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, mrr_0x239_239_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, esp_direction_0x235_235_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, esp_advanced_0x234_234_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, eps_advanced_0x176_176_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, esp_whlpulse_0x236_236_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, ipm_rightline_0x490_490_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, sas_sensor_0x175_175_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, gw_body_0x321_321_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, ipm_leftline_0x278_278_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, gw_ems_engstatus_0x142_142_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, gw_tbox_location_0x580_580_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, srs_0x350_350_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, ipm_0x245_245_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, gw_ems_tqwhl_0x111_111_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, gw_tcu_gearinfo_0x123_123_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, esp_pressure_0x241_241_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, esp_status_0x243_243_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, esp_axay_0x242_242_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, gw_swm_mrr_0x31b_31b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, gw_swm_body_0x31a_31a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, gw_ems_tq_0x101_101_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, esp_vlc_0x223_223_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, gw_ems_whltq_0x107_107_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, abs_sts_0x221_221_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, mrr_frobj_0x480_480_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, mrr_0x246_246_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, gw_mp5_nav_0x533_533_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, gw_mp5_0x530_530_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, mrr_frobj_0x279_279_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, gw_ic_0x510_510_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, abs_whlspd_0x211_211_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, esp_tq_0x217_217_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, esp_rpmf_0x213_213_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, gw_ic_time_0x581_581_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, afs_0x5a0_5a0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, sod_nm_0x440_440_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, gw_nm_0x460_460_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, eps_0x260_260_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, sod_0x275_275_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, gw_tpms_tire_0x361_361_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, ins_datainfo_506_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, ins_std_507_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, ins_latitudelongitude_504_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, ins_speed_505_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, ins_headingpitchroll_502_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, ins_heightandtime_503_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, ins_gyro_501_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cx75, ins_acc_500_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 15, sizeof(Abs_whlspd_0x211_211)},
  { 25, 40, sizeof(Gw_ems_sts_0x151_151)},
  { 50, 65, sizeof(Esp_raw_0x212_212)},
  { 75, 102, sizeof(Gw_bcm_door_0x310_310)},
  { 124, 142, sizeof(Pam_0x270_270)},
  { 155, 175, sizeof(Pam_0x271_271)},
  { 190, 206, sizeof(Pam_0x272_272)},
  { 217, 229, sizeof(Mrr_0x238_238)},
  { 236, 257, sizeof(Mrr_0x239_239)},
  { 273, 293, sizeof(Esp_direction_0x235_235)},
  { 308, 335, sizeof(Esp_advanced_0x234_234)},
  { 357, 373, sizeof(Eps_advanced_0x176_176)},
  { 384, 399, sizeof(Esp_whlpulse_0x236_236)},
  { 409, 419, sizeof(Ipm_rightline_0x490_490)},
  { 424, 439, sizeof(Sas_sensor_0x175_175)},
  { 449, 468, sizeof(Gw_body_0x321_321)},
  { 482, 492, sizeof(Ipm_leftline_0x278_278)},
  { 497, 512, sizeof(Gw_ems_engstatus_0x142_142)},
  { 522, 531, sizeof(Gw_tbox_location_0x580_580)},
  { 535, 549, sizeof(Srs_0x350_350)},
  { 558, 583, sizeof(Ipm_0x245_245)},
  { 603, 615, sizeof(Gw_ems_tqwhl_0x111_111)},
  { 622, 647, sizeof(Gw_tcu_gearinfo_0x123_123)},
  { 667, 680, sizeof(Esp_pressure_0x241_241)},
  { 688, 721, sizeof(Esp_status_0x243_243)},
  { 749, 762, sizeof(Esp_axay_0x242_242)},
  { 770, 792, sizeof(Gw_swm_mrr_0x31b_31b)},
  { 809, 842, sizeof(Gw_swm_body_0x31a_31a)},
  { 870, 882, sizeof(Gw_ems_tq_0x101_101)},
  { 889, 907, sizeof(Esp_vlc_0x223_223)},
  { 920, 934, sizeof(Gw_ems_whltq_0x107_107)},
  { 943, 960, sizeof(Abs_sts_0x221_221)},
  { 972, 985, sizeof(Mrr_frobj_0x480_480)},
  { 993, 1015, sizeof(Mrr_0x246_246)},
  { 1032, 1046, sizeof(Gw_mp5_nav_0x533_533)},
  { 1055, 1085, sizeof(Gw_mp5_0x530_530)},
  { 1110, 1123, sizeof(Mrr_frobj_0x279_279)},
  { 1131, 1144, sizeof(Gw_ic_0x510_510)},
  { 1152, 1164, sizeof(Esp_tq_0x217_217)},
  { 1171, 1182, sizeof(Esp_rpmf_0x213_213)},
  { 1188, 1199, sizeof(Gw_ic_time_0x581_581)},
  { 1205, 1211, sizeof(Afs_0x5a0_5a0)},
  { 1212, 1223, sizeof(Sod_nm_0x440_440)},
  { 1229, 1240, sizeof(Gw_nm_0x460_460)},
  { 1246, 1272, sizeof(Eps_0x260_260)},
  { 1293, 1317, sizeof(Sod_0x275_275)},
  { 1336, 1356, sizeof(Gw_tpms_tire_0x361_361)},
  { 1371, 1382, sizeof(Ins_datainfo_506)},
  { 1388, 1397, sizeof(Ins_std_507)},
  { 1401, 1408, sizeof(Ins_latitudelongitude_504)},
  { 1410, 1418, sizeof(Ins_speed_505)},
  { 1421, 1429, sizeof(Ins_headingpitchroll_502)},
  { 1432, 1439, sizeof(Ins_heightandtime_503)},
  { 1441, 1449, sizeof(Ins_gyro_501)},
  { 1452, 1460, sizeof(Ins_acc_500)},
  { 1463, 1523, sizeof(Cx75)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Abs_whlspd_0x211_211_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gw_ems_sts_0x151_151_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esp_raw_0x212_212_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gw_bcm_door_0x310_310_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Pam_0x270_270_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Pam_0x271_271_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Pam_0x272_272_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mrr_0x238_238_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mrr_0x239_239_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esp_direction_0x235_235_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esp_advanced_0x234_234_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Eps_advanced_0x176_176_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esp_whlpulse_0x236_236_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ipm_rightline_0x490_490_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sas_sensor_0x175_175_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gw_body_0x321_321_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ipm_leftline_0x278_278_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gw_ems_engstatus_0x142_142_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gw_tbox_location_0x580_580_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Srs_0x350_350_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ipm_0x245_245_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gw_ems_tqwhl_0x111_111_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gw_tcu_gearinfo_0x123_123_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esp_pressure_0x241_241_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esp_status_0x243_243_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esp_axay_0x242_242_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gw_swm_mrr_0x31b_31b_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gw_swm_body_0x31a_31a_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gw_ems_tq_0x101_101_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esp_vlc_0x223_223_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gw_ems_whltq_0x107_107_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Abs_sts_0x221_221_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mrr_frobj_0x480_480_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mrr_0x246_246_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gw_mp5_nav_0x533_533_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gw_mp5_0x530_530_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Mrr_frobj_0x279_279_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gw_ic_0x510_510_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esp_tq_0x217_217_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Esp_rpmf_0x213_213_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gw_ic_time_0x581_581_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Afs_0x5a0_5a0_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sod_nm_0x440_440_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gw_nm_0x460_460_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Eps_0x260_260_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sod_0x275_275_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Gw_tpms_tire_0x361_361_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ins_datainfo_506_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ins_std_507_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ins_latitudelongitude_504_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ins_speed_505_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ins_headingpitchroll_502_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ins_heightandtime_503_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ins_gyro_501_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ins_acc_500_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Cx75_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/canbus/proto/cx75.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 56);
}

}  // namespace

void TableStruct::Shutdown() {
  _Abs_whlspd_0x211_211_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Gw_ems_sts_0x151_151_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Esp_raw_0x212_212_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Gw_bcm_door_0x310_310_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Pam_0x270_270_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Pam_0x271_271_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Pam_0x272_272_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Mrr_0x238_238_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Mrr_0x239_239_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Esp_direction_0x235_235_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _Esp_advanced_0x234_234_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _Eps_advanced_0x176_176_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _Esp_whlpulse_0x236_236_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _Ipm_rightline_0x490_490_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _Sas_sensor_0x175_175_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _Gw_body_0x321_321_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _Ipm_leftline_0x278_278_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _Gw_ems_engstatus_0x142_142_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _Gw_tbox_location_0x580_580_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _Srs_0x350_350_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _Ipm_0x245_245_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _Gw_ems_tqwhl_0x111_111_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _Gw_tcu_gearinfo_0x123_123_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _Esp_pressure_0x241_241_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _Esp_status_0x243_243_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _Esp_axay_0x242_242_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _Gw_swm_mrr_0x31b_31b_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _Gw_swm_body_0x31a_31a_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _Gw_ems_tq_0x101_101_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _Esp_vlc_0x223_223_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _Gw_ems_whltq_0x107_107_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _Abs_sts_0x221_221_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _Mrr_frobj_0x480_480_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _Mrr_0x246_246_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _Gw_mp5_nav_0x533_533_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _Gw_mp5_0x530_530_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _Mrr_frobj_0x279_279_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _Gw_ic_0x510_510_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _Esp_tq_0x217_217_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _Esp_rpmf_0x213_213_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _Gw_ic_time_0x581_581_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _Afs_0x5a0_5a0_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _Sod_nm_0x440_440_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _Gw_nm_0x460_460_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _Eps_0x260_260_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _Sod_0x275_275_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _Gw_tpms_tire_0x361_361_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _Ins_datainfo_506_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _Ins_std_507_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _Ins_latitudelongitude_504_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _Ins_speed_505_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _Ins_headingpitchroll_502_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _Ins_heightandtime_503_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _Ins_gyro_501_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _Ins_acc_500_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _Cx75_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Abs_whlspd_0x211_211_default_instance_.DefaultConstruct();
  _Gw_ems_sts_0x151_151_default_instance_.DefaultConstruct();
  _Esp_raw_0x212_212_default_instance_.DefaultConstruct();
  _Gw_bcm_door_0x310_310_default_instance_.DefaultConstruct();
  _Pam_0x270_270_default_instance_.DefaultConstruct();
  _Pam_0x271_271_default_instance_.DefaultConstruct();
  _Pam_0x272_272_default_instance_.DefaultConstruct();
  _Mrr_0x238_238_default_instance_.DefaultConstruct();
  _Mrr_0x239_239_default_instance_.DefaultConstruct();
  _Esp_direction_0x235_235_default_instance_.DefaultConstruct();
  _Esp_advanced_0x234_234_default_instance_.DefaultConstruct();
  _Eps_advanced_0x176_176_default_instance_.DefaultConstruct();
  _Esp_whlpulse_0x236_236_default_instance_.DefaultConstruct();
  _Ipm_rightline_0x490_490_default_instance_.DefaultConstruct();
  _Sas_sensor_0x175_175_default_instance_.DefaultConstruct();
  _Gw_body_0x321_321_default_instance_.DefaultConstruct();
  _Ipm_leftline_0x278_278_default_instance_.DefaultConstruct();
  _Gw_ems_engstatus_0x142_142_default_instance_.DefaultConstruct();
  _Gw_tbox_location_0x580_580_default_instance_.DefaultConstruct();
  _Srs_0x350_350_default_instance_.DefaultConstruct();
  _Ipm_0x245_245_default_instance_.DefaultConstruct();
  _Gw_ems_tqwhl_0x111_111_default_instance_.DefaultConstruct();
  _Gw_tcu_gearinfo_0x123_123_default_instance_.DefaultConstruct();
  _Esp_pressure_0x241_241_default_instance_.DefaultConstruct();
  _Esp_status_0x243_243_default_instance_.DefaultConstruct();
  _Esp_axay_0x242_242_default_instance_.DefaultConstruct();
  _Gw_swm_mrr_0x31b_31b_default_instance_.DefaultConstruct();
  _Gw_swm_body_0x31a_31a_default_instance_.DefaultConstruct();
  _Gw_ems_tq_0x101_101_default_instance_.DefaultConstruct();
  _Esp_vlc_0x223_223_default_instance_.DefaultConstruct();
  _Gw_ems_whltq_0x107_107_default_instance_.DefaultConstruct();
  _Abs_sts_0x221_221_default_instance_.DefaultConstruct();
  _Mrr_frobj_0x480_480_default_instance_.DefaultConstruct();
  _Mrr_0x246_246_default_instance_.DefaultConstruct();
  _Gw_mp5_nav_0x533_533_default_instance_.DefaultConstruct();
  _Gw_mp5_0x530_530_default_instance_.DefaultConstruct();
  _Mrr_frobj_0x279_279_default_instance_.DefaultConstruct();
  _Gw_ic_0x510_510_default_instance_.DefaultConstruct();
  _Esp_tq_0x217_217_default_instance_.DefaultConstruct();
  _Esp_rpmf_0x213_213_default_instance_.DefaultConstruct();
  _Gw_ic_time_0x581_581_default_instance_.DefaultConstruct();
  _Afs_0x5a0_5a0_default_instance_.DefaultConstruct();
  _Sod_nm_0x440_440_default_instance_.DefaultConstruct();
  _Gw_nm_0x460_460_default_instance_.DefaultConstruct();
  _Eps_0x260_260_default_instance_.DefaultConstruct();
  _Sod_0x275_275_default_instance_.DefaultConstruct();
  _Gw_tpms_tire_0x361_361_default_instance_.DefaultConstruct();
  _Ins_datainfo_506_default_instance_.DefaultConstruct();
  _Ins_std_507_default_instance_.DefaultConstruct();
  _Ins_latitudelongitude_504_default_instance_.DefaultConstruct();
  _Ins_speed_505_default_instance_.DefaultConstruct();
  _Ins_headingpitchroll_502_default_instance_.DefaultConstruct();
  _Ins_heightandtime_503_default_instance_.DefaultConstruct();
  _Ins_gyro_501_default_instance_.DefaultConstruct();
  _Ins_acc_500_default_instance_.DefaultConstruct();
  _Cx75_default_instance_.DefaultConstruct();
  _Cx75_default_instance_.get_mutable()->gw_ems_sts_0x151_151_ = const_cast< ::jmc_auto::canbus::Gw_ems_sts_0x151_151*>(
      ::jmc_auto::canbus::Gw_ems_sts_0x151_151::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->esp_raw_0x212_212_ = const_cast< ::jmc_auto::canbus::Esp_raw_0x212_212*>(
      ::jmc_auto::canbus::Esp_raw_0x212_212::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->gw_bcm_door_0x310_310_ = const_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310*>(
      ::jmc_auto::canbus::Gw_bcm_door_0x310_310::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->pam_0x270_270_ = const_cast< ::jmc_auto::canbus::Pam_0x270_270*>(
      ::jmc_auto::canbus::Pam_0x270_270::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->pam_0x271_271_ = const_cast< ::jmc_auto::canbus::Pam_0x271_271*>(
      ::jmc_auto::canbus::Pam_0x271_271::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->pam_0x272_272_ = const_cast< ::jmc_auto::canbus::Pam_0x272_272*>(
      ::jmc_auto::canbus::Pam_0x272_272::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->mrr_0x238_238_ = const_cast< ::jmc_auto::canbus::Mrr_0x238_238*>(
      ::jmc_auto::canbus::Mrr_0x238_238::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->mrr_0x239_239_ = const_cast< ::jmc_auto::canbus::Mrr_0x239_239*>(
      ::jmc_auto::canbus::Mrr_0x239_239::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->esp_direction_0x235_235_ = const_cast< ::jmc_auto::canbus::Esp_direction_0x235_235*>(
      ::jmc_auto::canbus::Esp_direction_0x235_235::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->esp_advanced_0x234_234_ = const_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234*>(
      ::jmc_auto::canbus::Esp_advanced_0x234_234::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->eps_advanced_0x176_176_ = const_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176*>(
      ::jmc_auto::canbus::Eps_advanced_0x176_176::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->esp_whlpulse_0x236_236_ = const_cast< ::jmc_auto::canbus::Esp_whlpulse_0x236_236*>(
      ::jmc_auto::canbus::Esp_whlpulse_0x236_236::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->ipm_rightline_0x490_490_ = const_cast< ::jmc_auto::canbus::Ipm_rightline_0x490_490*>(
      ::jmc_auto::canbus::Ipm_rightline_0x490_490::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->sas_sensor_0x175_175_ = const_cast< ::jmc_auto::canbus::Sas_sensor_0x175_175*>(
      ::jmc_auto::canbus::Sas_sensor_0x175_175::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->gw_body_0x321_321_ = const_cast< ::jmc_auto::canbus::Gw_body_0x321_321*>(
      ::jmc_auto::canbus::Gw_body_0x321_321::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->ipm_leftline_0x278_278_ = const_cast< ::jmc_auto::canbus::Ipm_leftline_0x278_278*>(
      ::jmc_auto::canbus::Ipm_leftline_0x278_278::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->gw_ems_engstatus_0x142_142_ = const_cast< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142*>(
      ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->gw_tbox_location_0x580_580_ = const_cast< ::jmc_auto::canbus::Gw_tbox_location_0x580_580*>(
      ::jmc_auto::canbus::Gw_tbox_location_0x580_580::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->srs_0x350_350_ = const_cast< ::jmc_auto::canbus::Srs_0x350_350*>(
      ::jmc_auto::canbus::Srs_0x350_350::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->ipm_0x245_245_ = const_cast< ::jmc_auto::canbus::Ipm_0x245_245*>(
      ::jmc_auto::canbus::Ipm_0x245_245::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->gw_ems_tqwhl_0x111_111_ = const_cast< ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111*>(
      ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->gw_tcu_gearinfo_0x123_123_ = const_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123*>(
      ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->esp_pressure_0x241_241_ = const_cast< ::jmc_auto::canbus::Esp_pressure_0x241_241*>(
      ::jmc_auto::canbus::Esp_pressure_0x241_241::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->esp_status_0x243_243_ = const_cast< ::jmc_auto::canbus::Esp_status_0x243_243*>(
      ::jmc_auto::canbus::Esp_status_0x243_243::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->esp_axay_0x242_242_ = const_cast< ::jmc_auto::canbus::Esp_axay_0x242_242*>(
      ::jmc_auto::canbus::Esp_axay_0x242_242::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->gw_swm_mrr_0x31b_31b_ = const_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b*>(
      ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->gw_swm_body_0x31a_31a_ = const_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a*>(
      ::jmc_auto::canbus::Gw_swm_body_0x31a_31a::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->gw_ems_tq_0x101_101_ = const_cast< ::jmc_auto::canbus::Gw_ems_tq_0x101_101*>(
      ::jmc_auto::canbus::Gw_ems_tq_0x101_101::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->esp_vlc_0x223_223_ = const_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223*>(
      ::jmc_auto::canbus::Esp_vlc_0x223_223::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->gw_ems_whltq_0x107_107_ = const_cast< ::jmc_auto::canbus::Gw_ems_whltq_0x107_107*>(
      ::jmc_auto::canbus::Gw_ems_whltq_0x107_107::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->abs_sts_0x221_221_ = const_cast< ::jmc_auto::canbus::Abs_sts_0x221_221*>(
      ::jmc_auto::canbus::Abs_sts_0x221_221::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->mrr_frobj_0x480_480_ = const_cast< ::jmc_auto::canbus::Mrr_frobj_0x480_480*>(
      ::jmc_auto::canbus::Mrr_frobj_0x480_480::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->mrr_0x246_246_ = const_cast< ::jmc_auto::canbus::Mrr_0x246_246*>(
      ::jmc_auto::canbus::Mrr_0x246_246::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->gw_mp5_nav_0x533_533_ = const_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533*>(
      ::jmc_auto::canbus::Gw_mp5_nav_0x533_533::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->gw_mp5_0x530_530_ = const_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530*>(
      ::jmc_auto::canbus::Gw_mp5_0x530_530::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->mrr_frobj_0x279_279_ = const_cast< ::jmc_auto::canbus::Mrr_frobj_0x279_279*>(
      ::jmc_auto::canbus::Mrr_frobj_0x279_279::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->gw_ic_0x510_510_ = const_cast< ::jmc_auto::canbus::Gw_ic_0x510_510*>(
      ::jmc_auto::canbus::Gw_ic_0x510_510::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->abs_whlspd_0x211_211_ = const_cast< ::jmc_auto::canbus::Abs_whlspd_0x211_211*>(
      ::jmc_auto::canbus::Abs_whlspd_0x211_211::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->esp_tq_0x217_217_ = const_cast< ::jmc_auto::canbus::Esp_tq_0x217_217*>(
      ::jmc_auto::canbus::Esp_tq_0x217_217::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->esp_rpmf_0x213_213_ = const_cast< ::jmc_auto::canbus::Esp_rpmf_0x213_213*>(
      ::jmc_auto::canbus::Esp_rpmf_0x213_213::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->gw_ic_time_0x581_581_ = const_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581*>(
      ::jmc_auto::canbus::Gw_ic_time_0x581_581::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->afs_0x5a0_5a0_ = const_cast< ::jmc_auto::canbus::Afs_0x5a0_5a0*>(
      ::jmc_auto::canbus::Afs_0x5a0_5a0::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->sod_nm_0x440_440_ = const_cast< ::jmc_auto::canbus::Sod_nm_0x440_440*>(
      ::jmc_auto::canbus::Sod_nm_0x440_440::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->gw_nm_0x460_460_ = const_cast< ::jmc_auto::canbus::Gw_nm_0x460_460*>(
      ::jmc_auto::canbus::Gw_nm_0x460_460::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->eps_0x260_260_ = const_cast< ::jmc_auto::canbus::Eps_0x260_260*>(
      ::jmc_auto::canbus::Eps_0x260_260::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->sod_0x275_275_ = const_cast< ::jmc_auto::canbus::Sod_0x275_275*>(
      ::jmc_auto::canbus::Sod_0x275_275::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->gw_tpms_tire_0x361_361_ = const_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361*>(
      ::jmc_auto::canbus::Gw_tpms_tire_0x361_361::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->ins_datainfo_506_ = const_cast< ::jmc_auto::canbus::Ins_datainfo_506*>(
      ::jmc_auto::canbus::Ins_datainfo_506::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->ins_std_507_ = const_cast< ::jmc_auto::canbus::Ins_std_507*>(
      ::jmc_auto::canbus::Ins_std_507::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->ins_latitudelongitude_504_ = const_cast< ::jmc_auto::canbus::Ins_latitudelongitude_504*>(
      ::jmc_auto::canbus::Ins_latitudelongitude_504::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->ins_speed_505_ = const_cast< ::jmc_auto::canbus::Ins_speed_505*>(
      ::jmc_auto::canbus::Ins_speed_505::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->ins_headingpitchroll_502_ = const_cast< ::jmc_auto::canbus::Ins_headingpitchroll_502*>(
      ::jmc_auto::canbus::Ins_headingpitchroll_502::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->ins_heightandtime_503_ = const_cast< ::jmc_auto::canbus::Ins_heightandtime_503*>(
      ::jmc_auto::canbus::Ins_heightandtime_503::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->ins_gyro_501_ = const_cast< ::jmc_auto::canbus::Ins_gyro_501*>(
      ::jmc_auto::canbus::Ins_gyro_501::internal_default_instance());
  _Cx75_default_instance_.get_mutable()->ins_acc_500_ = const_cast< ::jmc_auto::canbus::Ins_acc_500*>(
      ::jmc_auto::canbus::Ins_acc_500::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
    '\n', '\037', 'm', 'o', 'd', 'u', 'l', 'e', 's', '/', 'c', 'a', 'n', 'b', 'u', 's', '/', 'p', 'r', 'o', 't', 'o', '/', 'c', 'x', 
    '7', '5', '.', 'p', 'r', 'o', 't', 'o', '\022', '\017', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '\"', '\264', '\007', '\n', '\024', 'A', 'b', 's', '_', 'w', 'h', 'l', 's', 'p', 'd', '_', '0', 'x', '2', '1', '1', '_', '2', '1', '1', 
    '\022', '\030', '\n', '\020', 'a', 'b', 's', '_', 'w', 'h', 'l', 's', 'p', 'd', 'f', 'r', 'n', 't', 'r', 'i', '\030', '\001', ' ', '\001', '(', 
    '\001', '\022', '\026', '\n', '\016', 'a', 'b', 's', '_', 'w', 'h', 'l', 's', 'p', 'd', 'r', 'e', 'l', 'e', '\030', '\002', ' ', '\001', '(', '\001', 
    '\022', '\026', '\n', '\016', 'a', 'b', 's', '_', 'w', 'h', 'l', 's', 'p', 'd', 'r', 'e', 'r', 'i', '\030', '\003', ' ', '\001', '(', '\001', '\022', 
    '\034', '\n', '\024', 'r', 'o', 'l', 'l', 'i', 'n', 'g', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', '2', '1', '1', '\030', '\004', 
    ' ', '\001', '(', '\005', '\022', '\\', '\n', '\024', 'a', 'b', 's', '_', 'w', 'h', 'l', 's', 'p', 'd', 'r', 'e', 'r', 'i', 's', 't', 'a', 
    't', 'u', 's', '\030', '\005', ' ', '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'A', 'b', 's', '_', 'w', 'h', 'l', 's', 'p', 'd', '_', '0', 'x', '2', '1', '1', '_', '2', '1', '1', '.', 'A', 
    'b', 's', '_', 'w', 'h', 'l', 's', 'p', 'd', 'r', 'e', 'r', 'i', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\\', 
    '\n', '\024', 'a', 'b', 's', '_', 'w', 'h', 'l', 's', 'p', 'd', 'r', 'e', 'l', 'e', 's', 't', 'a', 't', 'u', 's', '\030', '\006', ' ', 
    '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'A', 'b', 's', 
    '_', 'w', 'h', 'l', 's', 'p', 'd', '_', '0', 'x', '2', '1', '1', '_', '2', '1', '1', '.', 'A', 'b', 's', '_', 'w', 'h', 'l', 
    's', 'p', 'd', 'r', 'e', 'l', 'e', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '`', '\n', '\026', 'a', 'b', 's', '_', 
    'w', 'h', 'l', 's', 'p', 'd', 'f', 'r', 'n', 't', 'r', 'i', 's', 't', 'a', 't', 'u', 's', '\030', '\007', ' ', '\001', '(', '\016', '2', 
    '@', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'A', 'b', 's', '_', 'w', 'h', 'l', 
    's', 'p', 'd', '_', '0', 'x', '2', '1', '1', '_', '2', '1', '1', '.', 'A', 'b', 's', '_', 'w', 'h', 'l', 's', 'p', 'd', 'f', 
    'r', 'n', 't', 'r', 'i', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '`', '\n', '\026', 'a', 'b', 's', '_', 'w', 'h', 
    'l', 's', 'p', 'd', 'f', 'r', 'n', 't', 'l', 'e', 's', 't', 'a', 't', 'u', 's', '\030', '\010', ' ', '\001', '(', '\016', '2', '@', '.', 
    'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'A', 'b', 's', '_', 'w', 'h', 'l', 's', 'p', 
    'd', '_', '0', 'x', '2', '1', '1', '_', '2', '1', '1', '.', 'A', 'b', 's', '_', 'w', 'h', 'l', 's', 'p', 'd', 'f', 'r', 'n', 
    't', 'l', 'e', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', 
    '_', '0', 'x', '2', '1', '1', '\030', '\t', ' ', '\001', '(', '\005', '\022', '\030', '\n', '\020', 'a', 'b', 's', '_', 'w', 'h', 'l', 's', 'p', 
    'd', 'f', 'r', 'n', 't', 'l', 'e', '\030', '\n', ' ', '\001', '(', '\001', '\"', '\\', '\n', '\030', 'A', 'b', 's', '_', 'w', 'h', 'l', 's', 
    'p', 'd', 'r', 'e', 'r', 'i', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'A', 'B', 'S', '_', 'W', 
    'H', 'L', 'S', 'P', 'D', 'R', 'E', 'R', 'I', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', ' ', 
    '\n', '\034', 'A', 'B', 'S', '_', 'W', 'H', 'L', 'S', 'P', 'D', 'R', 'E', 'R', 'I', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'I', 'N', 
    'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', '\\', '\n', '\030', 'A', 'b', 's', '_', 'w', 'h', 'l', 's', 'p', 'd', 'r', 'e', 'l', 'e', 
    's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'A', 'B', 'S', '_', 'W', 'H', 'L', 'S', 'P', 'D', 'R', 
    'E', 'L', 'E', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', ' ', '\n', '\034', 'A', 'B', 'S', '_', 
    'W', 'H', 'L', 'S', 'P', 'D', 'R', 'E', 'L', 'E', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', 
    '\001', '\"', 'b', '\n', '\032', 'A', 'b', 's', '_', 'w', 'h', 'l', 's', 'p', 'd', 'f', 'r', 'n', 't', 'r', 'i', 's', 't', 'a', 't', 
    'u', 's', 'T', 'y', 'p', 'e', '\022', ' ', '\n', '\034', 'A', 'B', 'S', '_', 'W', 'H', 'L', 'S', 'P', 'D', 'F', 'R', 'N', 'T', 'R', 
    'I', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '\"', '\n', '\036', 'A', 'B', 'S', '_', 'W', 'H', 
    'L', 'S', 'P', 'D', 'F', 'R', 'N', 'T', 'R', 'I', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', 
    '\001', '\"', 'b', '\n', '\032', 'A', 'b', 's', '_', 'w', 'h', 'l', 's', 'p', 'd', 'f', 'r', 'n', 't', 'l', 'e', 's', 't', 'a', 't', 
    'u', 's', 'T', 'y', 'p', 'e', '\022', ' ', '\n', '\034', 'A', 'B', 'S', '_', 'W', 'H', 'L', 'S', 'P', 'D', 'F', 'R', 'N', 'T', 'L', 
    'E', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '\"', '\n', '\036', 'A', 'B', 'S', '_', 'W', 'H', 
    'L', 'S', 'P', 'D', 'F', 'R', 'N', 'T', 'L', 'E', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', 
    '\001', '\"', '\373', '\013', '\n', '\024', 'G', 'w', '_', 'e', 'm', 's', '_', 's', 't', 's', '_', '0', 'x', '1', '5', '1', '_', '1', '5', 
    '1', '\022', '!', '\n', '\031', 'e', 'm', 's', '_', 'e', 'n', 'g', 'b', 'a', 'r', 'o', 'm', 'e', 't', 'r', 'i', 'c', 'p', 'r', 'e', 
    's', 's', 'u', 'r', 'e', '\030', '\001', ' ', '\001', '(', '\005', '\022', '\032', '\n', '\022', 'e', 'm', 's', '_', 'v', 'a', 'c', 'u', 'u', 'm', 
    'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '\030', '\002', ' ', '\001', '(', '\001', '\022', '\033', '\n', '\023', 'e', 'm', 's', '_', 't', 'a', 'r', 
    'g', 'c', 'r', 'u', 'i', 's', 'e', 's', 'p', 'e', 'e', 'd', '\030', '\003', ' ', '\001', '(', '\001', '\022', 'd', '\n', '\030', 'e', 'm', 's', 
    '_', 'a', 't', 's', 'd', 'r', 'i', 'v', 'i', 'n', 'g', 'm', 'o', 'd', 'e', 's', 't', 'a', 't', 'u', 's', '\030', '\004', ' ', '\001', 
    '(', '\016', '2', 'B', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'e', 
    'm', 's', '_', 's', 't', 's', '_', '0', 'x', '1', '5', '1', '_', '1', '5', '1', '.', 'E', 'm', 's', '_', 'a', 't', 's', 'd', 
    'r', 'i', 'v', 'i', 'n', 'g', 'm', 'o', 'd', 'e', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', 'f', '\n', '\031', 'e', 
    'm', 's', '_', 'e', 'n', 'g', 'i', 'n', 'e', 's', 't', 'o', 'p', 's', 't', 'a', 'r', 't', 's', 't', 'a', 't', 'u', 's', '\030', 
    '\005', ' ', '\001', '(', '\016', '2', 'C', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 
    'w', '_', 'e', 'm', 's', '_', 's', 't', 's', '_', '0', 'x', '1', '5', '1', '_', '1', '5', '1', '.', 'E', 'm', 's', '_', 'e', 
    'n', 'g', 'i', 'n', 'e', 's', 't', 'o', 'p', 's', 't', 'a', 'r', 't', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', 
    '$', '\n', '\034', 'd', 'c', 'm', '_', 'e', 'm', 's', '_', 'r', 'o', 'l', 'l', 'i', 'n', 'g', 'c', 'o', 'u', 'n', 't', 'e', 'r', 
    '_', '0', 'x', '1', '5', '1', '\030', '\006', ' ', '\001', '(', '\005', '\022', 'b', '\n', '\027', 'e', 'm', 's', '_', 'c', 'r', 'u', 'i', 's', 
    'e', 'c', 'o', 'n', 't', 'r', 'o', 'l', 's', 't', 'a', 't', 'u', 's', '\030', '\007', ' ', '\001', '(', '\016', '2', 'A', '.', 'j', 'm', 
    'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'e', 'm', 's', '_', 's', 't', 's', '_', 
    '0', 'x', '1', '5', '1', '_', '1', '5', '1', '.', 'E', 'm', 's', '_', 'c', 'r', 'u', 'i', 's', 'e', 'c', 'o', 'n', 't', 'r', 
    'o', 'l', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', 't', '\n', ' ', 'e', 'm', 's', '_', 'd', 'r', 'i', 'v', 'i', 
    'n', 'g', 'm', 'o', 'd', 'e', 'c', 'h', 'a', 'n', 'g', 'e', '_', 'f', 'a', 'u', 'l', 't', '_', 'f', 'l', 'a', 'g', '\030', '\010', 
    ' ', '\001', '(', '\016', '2', 'J', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', 
    '_', 'e', 'm', 's', '_', 's', 't', 's', '_', '0', 'x', '1', '5', '1', '_', '1', '5', '1', '.', 'E', 'm', 's', '_', 'd', 'r', 
    'i', 'v', 'i', 'n', 'g', 'm', 'o', 'd', 'e', 'c', 'h', 'a', 'n', 'g', 'e', '_', 'f', 'a', 'u', 'l', 't', '_', 'f', 'l', 'a', 
    'g', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\026', 'd', 'c', 'm', '_', 'e', 'm', 's', '_', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', 
    '_', '0', 'x', '1', '5', '1', '\030', '\t', ' ', '\001', '(', '\005', '\022', '\026', '\n', '\016', 'e', 'm', 's', '_', 'e', 'n', 'g', 'o', 'f', 
    'f', 't', 'i', 'm', 'e', '\030', '\n', ' ', '\001', '(', '\005', '\"', '\261', '\001', '\n', '\034', 'E', 'm', 's', '_', 'a', 't', 's', 'd', 'r', 
    'i', 'v', 'i', 'n', 'g', 'm', 'o', 'd', 'e', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '%', '\n', '!', 'E', 'M', 
    'S', '_', 'A', 'T', 'S', 'D', 'R', 'I', 'V', 'I', 'N', 'G', 'M', 'O', 'D', 'E', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'S', 'T', 
    'A', 'N', 'D', 'A', 'R', 'D', '\020', '\000', '\022', '\"', '\n', '\036', 'E', 'M', 'S', '_', 'A', 'T', 'S', 'D', 'R', 'I', 'V', 'I', 'N', 
    'G', 'M', 'O', 'D', 'E', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'S', 'P', 'O', 'R', 'T', '\020', '\001', '\022', ' ', '\n', '\034', 'E', 'M', 
    'S', '_', 'A', 'T', 'S', 'D', 'R', 'I', 'V', 'I', 'N', 'G', 'M', 'O', 'D', 'E', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'E', 'C', 
    'O', '\020', '\002', '\022', '$', '\n', ' ', 'E', 'M', 'S', '_', 'A', 'T', 'S', 'D', 'R', 'I', 'V', 'I', 'N', 'G', 'M', 'O', 'D', 'E', 
    'S', 'T', 'A', 'T', 'U', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\003', '\"', '\220', '\003', '\n', '\035', 'E', 'm', 's', '_', 
    'e', 'n', 'g', 'i', 'n', 'e', 's', 't', 'o', 'p', 's', 't', 'a', 'r', 't', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', 
    '\022', '0', '\n', ',', 'E', 'M', 'S', '_', 'E', 'N', 'G', 'I', 'N', 'E', 'S', 'T', 'O', 'P', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 
    'A', 'T', 'U', 'S', '_', 'N', 'O', 'N', '_', 'S', 'T', 'A', 'R', 'T', '_', 'S', 'T', 'O', 'P', 'M', 'O', 'D', 'E', '\020', '\000', 
    '\022', '+', '\n', '\'', 'E', 'M', 'S', '_', 'E', 'N', 'G', 'I', 'N', 'E', 'S', 'T', 'O', 'P', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 
    'A', 'T', 'U', 'S', '_', 'E', 'N', 'G', 'I', 'N', 'E', 'S', 'T', 'A', 'N', 'D', 'B', 'Y', '\020', '\001', '\022', '+', '\n', '\'', 'E', 
    'M', 'S', '_', 'E', 'N', 'G', 'I', 'N', 'E', 'S', 'T', 'O', 'P', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 
    'E', 'N', 'G', 'I', 'N', 'E', 'S', 'T', 'O', 'P', 'P', 'E', 'D', '\020', '\002', '\022', ',', '\n', '(', 'E', 'M', 'S', '_', 'E', 'N', 
    'G', 'I', 'N', 'E', 'S', 'T', 'O', 'P', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'S', 'T', 'A', 'R', 'T', 
    'E', 'R', 'R', 'E', 'S', 'T', 'A', 'R', 'T', '\020', '\003', '\022', '+', '\n', '\'', 'E', 'M', 'S', '_', 'E', 'N', 'G', 'I', 'N', 'E', 
    'S', 'T', 'O', 'P', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'E', 'N', 'G', 'I', 'N', 'E', 'R', 'E', 'S', 
    'T', 'A', 'R', 'T', '\020', '\004', '\022', '-', '\n', ')', 'E', 'M', 'S', '_', 'E', 'N', 'G', 'I', 'N', 'E', 'S', 'T', 'O', 'P', 'S', 
    'T', 'A', 'R', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'E', 'N', 'G', 'I', 'N', 'E', 'O', 'P', 'E', 'R', 'A', 'T', 'I', 'O', 
    'N', '\020', '\005', '\022', '1', '\n', '-', 'E', 'M', 'S', '_', 'E', 'N', 'G', 'I', 'N', 'E', 'S', 'T', 'O', 'P', 'S', 'T', 'A', 'R', 
    'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'E', 'N', 'G', 'I', 'N', 'E', 'A', 'U', 'T', 'O', '_', 'S', 'T', 'O', 'P', 'P', 'I', 
    'N', 'G', '\020', '\006', '\022', '&', '\n', '\"', 'E', 'M', 'S', '_', 'E', 'N', 'G', 'I', 'N', 'E', 'S', 'T', 'O', 'P', 'S', 'T', 'A', 
    'R', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\007', '\"', '\270', '\001', '\n', '\033', 'E', 
    'm', 's', '_', 'c', 'r', 'u', 'i', 's', 'e', 'c', 'o', 'n', 't', 'r', 'o', 'l', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 
    'e', '\022', '-', '\n', ')', 'E', 'M', 'S', '_', 'C', 'R', 'U', 'I', 'S', 'E', 'C', 'O', 'N', 'T', 'R', 'O', 'L', 'S', 'T', 'A', 
    'T', 'U', 'S', '_', 'C', 'R', 'U', 'I', 'S', 'E', 'C', 'O', 'N', 'T', 'R', 'O', 'L', 'O', 'O', 'F', 'F', '\020', '\000', '\022', '\"', 
    '\n', '\036', 'E', 'M', 'S', '_', 'C', 'R', 'U', 'I', 'S', 'E', 'C', 'O', 'N', 'T', 'R', 'O', 'L', 'S', 'T', 'A', 'T', 'U', 'S', 
    '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\022', '#', '\n', '\037', 'E', 'M', 'S', '_', 'C', 'R', 'U', 'I', 'S', 'E', 'C', 'O', 
    'N', 'T', 'R', 'O', 'L', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'S', 'T', 'A', 'N', 'D', 'B', 'Y', '\020', '\002', '\022', '!', '\n', '\035', 
    'E', 'M', 'S', '_', 'C', 'R', 'U', 'I', 'S', 'E', 'C', 'O', 'N', 'T', 'R', 'O', 'L', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'E', 
    'R', 'R', 'O', 'R', '\020', '\003', '\"', '\177', '\n', '$', 'E', 'm', 's', '_', 'd', 'r', 'i', 'v', 'i', 'n', 'g', 'm', 'o', 'd', 'e', 
    'c', 'h', 'a', 'n', 'g', 'e', '_', 'f', 'a', 'u', 'l', 't', '_', 'f', 'l', 'a', 'g', 'T', 'y', 'p', 'e', '\022', '+', '\n', '\'', 
    'E', 'M', 'S', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', 'M', 'O', 'D', 'E', 'C', 'H', 'A', 'N', 'G', 'E', '_', 'F', 'A', 'U', 
    'L', 'T', '_', 'F', 'L', 'A', 'G', '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\000', '\022', '*', '\n', '&', 'E', 'M', 'S', '_', 'D', 
    'R', 'I', 'V', 'I', 'N', 'G', 'M', 'O', 'D', 'E', 'C', 'H', 'A', 'N', 'G', 'E', '_', 'F', 'A', 'U', 'L', 'T', '_', 'F', 'L', 
    'A', 'G', '_', 'F', 'A', 'U', 'L', 'T', '\020', '\001', '\"', '\206', '\007', '\n', '\021', 'E', 's', 'p', '_', 'r', 'a', 'w', '_', '0', 'x', 
    '2', '1', '2', '_', '2', '1', '2', '\022', '\031', '\n', '\021', 'e', 's', 'p', '_', 'v', 'x', 'w', 'w', 'h', 'e', 'e', 'l', 'r', 'a', 
    'w', 'f', 'r', '\030', '\001', ' ', '\001', '(', '\001', '\022', '\031', '\n', '\021', 'e', 's', 'p', '_', 'v', 'x', 'w', 'w', 'h', 'e', 'e', 'l', 
    'r', 'a', 'w', 'r', 'l', '\030', '\002', ' ', '\001', '(', '\001', '\022', '\031', '\n', '\021', 'e', 's', 'p', '_', 'v', 'x', 'w', 'w', 'h', 'e', 
    'e', 'l', 'r', 'a', 'w', 'r', 'r', '\030', '\003', ' ', '\001', '(', '\001', '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 
    'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', '2', '1', '2', '\030', '\004', ' ', '\001', '(', '\005', '\022', 'W', '\n', '\023', 'e', 's', 
    'p', '_', 'v', 'x', 'w', 'w', 'h', 'e', 'e', 'l', 'r', 'r', 'v', 'a', 'l', 'i', 'd', '\030', '\005', ' ', '\001', '(', '\016', '2', ':', 
    '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'r', 'a', 'w', '_', 
    '0', 'x', '2', '1', '2', '_', '2', '1', '2', '.', 'E', 's', 'p', '_', 'v', 'x', 'w', 'w', 'h', 'e', 'e', 'l', 'r', 'r', 'v', 
    'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', 'W', '\n', '\023', 'e', 's', 'p', '_', 'v', 'x', 'w', 'w', 'h', 'e', 'e', 'l', 'r', 
    'l', 'v', 'a', 'l', 'i', 'd', '\030', '\006', ' ', '\001', '(', '\016', '2', ':', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'r', 'a', 'w', '_', '0', 'x', '2', '1', '2', '_', '2', '1', '2', '.', 'E', 
    's', 'p', '_', 'v', 'x', 'w', 'w', 'h', 'e', 'e', 'l', 'r', 'l', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', 'W', '\n', 
    '\023', 'e', 's', 'p', '_', 'v', 'x', 'w', 'w', 'h', 'e', 'e', 'l', 'f', 'r', 'v', 'a', 'l', 'i', 'd', '\030', '\007', ' ', '\001', '(', 
    '\016', '2', ':', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'r', 
    'a', 'w', '_', '0', 'x', '2', '1', '2', '_', '2', '1', '2', '.', 'E', 's', 'p', '_', 'v', 'x', 'w', 'w', 'h', 'e', 'e', 'l', 
    'f', 'r', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', 'W', '\n', '\023', 'e', 's', 'p', '_', 'v', 'x', 'w', 'w', 'h', 'e', 
    'e', 'l', 'f', 'l', 'v', 'a', 'l', 'i', 'd', '\030', '\010', ' ', '\001', '(', '\016', '2', ':', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'r', 'a', 'w', '_', '0', 'x', '2', '1', '2', '_', '2', '1', 
    '2', '.', 'E', 's', 'p', '_', 'v', 'x', 'w', 'w', 'h', 'e', 'e', 'l', 'f', 'l', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', 
    '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '2', '1', '2', '\030', '\t', ' ', '\001', '(', '\005', '\022', 
    '\031', '\n', '\021', 'e', 's', 'p', '_', 'v', 'x', 'w', 'w', 'h', 'e', 'e', 'l', 'r', 'a', 'w', 'f', 'l', '\030', '\n', ' ', '\001', '(', 
    '\001', '\"', 'Y', '\n', '\027', 'E', 's', 'p', '_', 'v', 'x', 'w', 'w', 'h', 'e', 'e', 'l', 'r', 'r', 'v', 'a', 'l', 'i', 'd', 'T', 
    'y', 'p', 'e', '\022', '\035', '\n', '\031', 'E', 'S', 'P', '_', 'V', 'X', 'W', 'W', 'H', 'E', 'E', 'L', 'R', 'R', 'V', 'A', 'L', 'I', 
    'D', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '\037', '\n', '\033', 'E', 'S', 'P', '_', 'V', 'X', 'W', 'W', 'H', 'E', 'E', 'L', 
    'R', 'R', 'V', 'A', 'L', 'I', 'D', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', 'Y', '\n', '\027', 'E', 's', 'p', '_', 
    'v', 'x', 'w', 'w', 'h', 'e', 'e', 'l', 'r', 'l', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'E', 'S', 
    'P', '_', 'V', 'X', 'W', 'W', 'H', 'E', 'E', 'L', 'R', 'L', 'V', 'A', 'L', 'I', 'D', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', 
    '\022', '\037', '\n', '\033', 'E', 'S', 'P', '_', 'V', 'X', 'W', 'W', 'H', 'E', 'E', 'L', 'R', 'L', 'V', 'A', 'L', 'I', 'D', '_', 'I', 
    'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', 'Y', '\n', '\027', 'E', 's', 'p', '_', 'v', 'x', 'w', 'w', 'h', 'e', 'e', 'l', 'f', 
    'r', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'E', 'S', 'P', '_', 'V', 'X', 'W', 'W', 'H', 'E', 'E', 
    'L', 'F', 'R', 'V', 'A', 'L', 'I', 'D', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '\037', '\n', '\033', 'E', 'S', 'P', '_', 'V', 
    'X', 'W', 'W', 'H', 'E', 'E', 'L', 'F', 'R', 'V', 'A', 'L', 'I', 'D', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', 
    'Y', '\n', '\027', 'E', 's', 'p', '_', 'v', 'x', 'w', 'w', 'h', 'e', 'e', 'l', 'f', 'l', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 
    'e', '\022', '\035', '\n', '\031', 'E', 'S', 'P', '_', 'V', 'X', 'W', 'W', 'H', 'E', 'E', 'L', 'F', 'L', 'V', 'A', 'L', 'I', 'D', '_', 
    'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '\037', '\n', '\033', 'E', 'S', 'P', '_', 'V', 'X', 'W', 'W', 'H', 'E', 'E', 'L', 'F', 'L', 
    'V', 'A', 'L', 'I', 'D', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', '\256', '.', '\n', '\025', 'G', 'w', '_', 'b', 'c', 
    'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', '3', '1', '0', '_', '3', '1', '0', '\022', 'W', '\n', '\021', 'b', 'c', 'm', '_', 'd', 
    'o', 'o', 'r', 's', 't', 's', 'r', 'e', 'a', 'r', 'r', 'i', '\030', '\001', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 
    'x', '3', '1', '0', '_', '3', '1', '0', '.', 'B', 'c', 'm', '_', 'd', 'o', 'o', 'r', 's', 't', 's', 'r', 'e', 'a', 'r', 'r', 
    'i', 'T', 'y', 'p', 'e', '\022', '_', '\n', '\025', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', 'l', 'o', 'c', 'k', 's', 't', 's', 'r', 
    'e', 'a', 'r', 'l', 'e', '\030', '\002', ' ', '\001', '(', '\016', '2', '@', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', '3', '1', '0', '_', '3', '1', 
    '0', '.', 'B', 'c', 'm', '_', 'd', 'o', 'o', 'r', 'l', 'o', 'c', 'k', 's', 't', 's', 'r', 'e', 'a', 'r', 'l', 'e', 'T', 'y', 
    'p', 'e', '\022', '_', '\n', '\025', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', 'l', 'o', 'c', 'k', 's', 't', 's', 'f', 'r', 'n', 't', 
    'r', 'i', '\030', '\003', ' ', '\001', '(', '\016', '2', '@', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 
    's', '.', 'G', 'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', '3', '1', '0', '_', '3', '1', '0', '.', 'B', 
    'c', 'm', '_', 'd', 'o', 'o', 'r', 'l', 'o', 'c', 'k', 's', 't', 's', 'f', 'r', 'n', 't', 'r', 'i', 'T', 'y', 'p', 'e', '\022', 
    '_', '\n', '\025', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', 'l', 'o', 'c', 'k', 's', 't', 's', 'f', 'r', 'n', 't', 'l', 'e', '\030', 
    '\004', ' ', '\001', '(', '\016', '2', '@', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 
    'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', '3', '1', '0', '_', '3', '1', '0', '.', 'B', 'c', 'm', '_', 
    'd', 'o', 'o', 'r', 'l', 'o', 'c', 'k', 's', 't', 's', 'f', 'r', 'n', 't', 'l', 'e', 'T', 'y', 'p', 'e', '\022', 'U', '\n', '\020', 
    'b', 'c', 'm', '_', 'a', 'n', 't', 'i', 't', 'h', 'e', 'f', 't', 's', 't', 's', '\030', '\005', ' ', '\001', '(', '\016', '2', ';', '.', 
    'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 
    'o', 'r', '_', '0', 'x', '3', '1', '0', '_', '3', '1', '0', '.', 'B', 'c', 'm', '_', 'a', 'n', 't', 'i', 't', 'h', 'e', 'f', 
    't', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '[', '\n', '\023', 'b', 'c', 'm', '_', 'l', 'o', 'a', 'd', 's', 'e', 'n', 's', 'i', 
    't', 'i', 'v', 'i', 't', 'y', '\030', '\006', ' ', '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', '3', '1', '0', '_', '3', 
    '1', '0', '.', 'B', 'c', 'm', '_', 'l', 'o', 'a', 'd', 's', 'e', 'n', 's', 'i', 't', 'i', 'v', 'i', 't', 'y', 'T', 'y', 'p', 
    'e', '\022', 'a', '\n', '\026', 'b', 'c', 'm', '_', 'l', 'o', 'c', 'k', 'u', 'n', 'l', 'o', 'c', 'k', 'f', 'e', 'e', 'd', 'b', 'a', 
    'c', 'k', '\030', '\007', ' ', '\001', '(', '\016', '2', 'A', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 
    's', '.', 'G', 'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', '3', '1', '0', '_', '3', '1', '0', '.', 'B', 
    'c', 'm', '_', 'l', 'o', 'c', 'k', 'u', 'n', 'l', 'o', 'c', 'k', 'f', 'e', 'e', 'd', 'b', 'a', 'c', 'k', 'T', 'y', 'p', 'e', 
    '\022', ']', '\n', '\024', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', 'l', 'o', 'c', 'k', 's', 't', 's', 't', 'r', 'u', 'n', 'k', '\030', 
    '\010', ' ', '\001', '(', '\016', '2', '?', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 
    'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', '3', '1', '0', '_', '3', '1', '0', '.', 'B', 'c', 'm', '_', 
    'd', 'o', 'o', 'r', 'l', 'o', 'c', 'k', 's', 't', 's', 't', 'r', 'u', 'n', 'k', 'T', 'y', 'p', 'e', '\022', 'U', '\n', '\020', 'b', 
    'c', 'm', '_', 'd', 'o', 'o', 'r', 's', 't', 's', 't', 'r', 'u', 'n', 'k', '\030', '\t', ' ', '\001', '(', '\016', '2', ';', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 
    'r', '_', '0', 'x', '3', '1', '0', '_', '3', '1', '0', '.', 'B', 'c', 'm', '_', 'd', 'o', 'o', 'r', 's', 't', 's', 't', 'r', 
    'u', 'n', 'k', 'T', 'y', 'p', 'e', '\022', 'g', '\n', '\031', 'b', 'c', 'm', '_', 't', 'r', 'u', 'n', 'k', 'd', 'o', 'o', 'r', 'p', 
    'r', 'e', 'u', 'n', 'l', 'o', 'c', 'k', 's', 't', 's', '\030', '\n', ' ', '\001', '(', '\016', '2', 'D', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', 
    '3', '1', '0', '_', '3', '1', '0', '.', 'B', 'c', 'm', '_', 't', 'r', 'u', 'n', 'k', 'd', 'o', 'o', 'r', 'p', 'r', 'e', 'u', 
    'n', 'l', 'o', 'c', 'k', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'W', '\n', '\021', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', 's', 
    't', 's', 'r', 'e', 'a', 'r', 'l', 'e', '\030', '\013', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', '3', '1', '0', 
    '_', '3', '1', '0', '.', 'B', 'c', 'm', '_', 'd', 'o', 'o', 'r', 's', 't', 's', 'r', 'e', 'a', 'r', 'l', 'e', 'T', 'y', 'p', 
    'e', '\022', 'W', '\n', '\021', 'b', 'c', 'm', '_', 'f', 'r', 'o', 'n', 't', 'w', 'i', 'p', 'e', 'r', 's', 't', 's', '\030', '\014', ' ', 
    '\001', '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 
    'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', '3', '1', '0', '_', '3', '1', '0', '.', 'B', 'c', 'm', '_', 'f', 'r', 
    'o', 'n', 't', 'w', 'i', 'p', 'e', 'r', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'W', '\n', '\021', 'b', 'c', 'm', '_', 'e', 'n', 
    'g', 'i', 'n', 'e', 'h', 'o', 'o', 'd', 's', 't', 's', '\030', '\r', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', 
    '3', '1', '0', '_', '3', '1', '0', '.', 'B', 'c', 'm', '_', 'e', 'n', 'g', 'i', 'n', 'e', 'h', 'o', 'o', 'd', 's', 't', 's', 
    'T', 'y', 'p', 'e', '\022', 'U', '\n', '\020', 'b', 'c', 'm', '_', 'p', 'l', 'g', '_', 'd', 'r', 'i', 'v', 'e', 'r', 's', 'w', '\030', 
    '\016', ' ', '\001', '(', '\016', '2', ';', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 
    'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', '3', '1', '0', '_', '3', '1', '0', '.', 'B', 'c', 'm', '_', 
    'p', 'l', 'g', '_', 'd', 'r', 'i', 'v', 'e', 'r', 's', 'w', 'T', 'y', 'p', 'e', '\022', 'Q', '\n', '\016', 'b', 'c', 'm', '_', 'w', 
    'i', 'n', 'd', 'o', 'w', 's', 'c', 'm', 'd', '\030', '\017', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', '3', '1', 
    '0', '_', '3', '1', '0', '.', 'B', 'c', 'm', '_', 'w', 'i', 'n', 'd', 'o', 'w', 's', 'c', 'm', 'd', 'T', 'y', 'p', 'e', '\022', 
    'U', '\n', '\020', 'b', 'c', 'm', '_', 'r', 'e', 'a', 'r', 'w', 'i', 'p', 'e', 'r', 's', 't', 's', '\030', '\020', ' ', '\001', '(', '\016', 
    '2', ';', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'c', 'm', 
    '_', 'd', 'o', 'o', 'r', '_', '0', 'x', '3', '1', '0', '_', '3', '1', '0', '.', 'B', 'c', 'm', '_', 'r', 'e', 'a', 'r', 'w', 
    'i', 'p', 'e', 'r', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'W', '\n', '\021', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', 's', 't', 
    's', 'f', 'r', 'n', 't', 'r', 'i', '\030', '\021', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', '3', '1', '0', '_', 
    '3', '1', '0', '.', 'B', 'c', 'm', '_', 'd', 'o', 'o', 'r', 's', 't', 's', 'f', 'r', 'n', 't', 'r', 'i', 'T', 'y', 'p', 'e', 
    '\022', '!', '\n', '\031', 'b', 'c', 'm', '_', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 
    'x', '3', '1', '0', '\030', '\022', ' ', '\001', '(', '\005', '\022', ']', '\n', '\024', 'b', 'c', 'm', '_', 't', 'u', 'r', 'n', 'i', 'n', 'd', 
    'i', 'c', 'a', 't', 'o', 'r', 's', 't', 's', '\030', '\023', ' ', '\001', '(', '\016', '2', '?', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', '3', '1', 
    '0', '_', '3', '1', '0', '.', 'B', 'c', 'm', '_', 't', 'u', 'r', 'n', 'i', 'n', 'd', 'i', 'c', 'a', 't', 'o', 'r', 's', 't', 
    's', 'T', 'y', 'p', 'e', '\022', '\032', '\n', '\022', 'b', 'c', 'm', '_', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '3', 
    '1', '0', '\030', '\024', ' ', '\001', '(', '\005', '\022', 'W', '\n', '\021', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', 's', 't', 's', 'f', 'r', 
    'n', 't', 'l', 'e', '\030', '\025', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', '3', '1', '0', '_', '3', '1', '0', 
    '.', 'B', 'c', 'm', '_', 'd', 'o', 'o', 'r', 's', 't', 's', 'f', 'r', 'n', 't', 'l', 'e', 'T', 'y', 'p', 'e', '\022', '_', '\n', 
    '\025', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', 'l', 'o', 'c', 'k', 's', 't', 's', 'r', 'e', 'a', 'r', 'r', 'i', '\030', '\026', ' ', 
    '\001', '(', '\016', '2', '@', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 
    'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', '3', '1', '0', '_', '3', '1', '0', '.', 'B', 'c', 'm', '_', 'd', 'o', 
    'o', 'r', 'l', 'o', 'c', 'k', 's', 't', 's', 'r', 'e', 'a', 'r', 'r', 'i', 'T', 'y', 'p', 'e', '\"', '\215', '\001', '\n', '\025', 'B', 
    'c', 'm', '_', 'd', 'o', 'o', 'r', 's', 't', 's', 'r', 'e', 'a', 'r', 'r', 'i', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'B', 
    'C', 'M', '_', 'D', 'O', 'O', 'R', 'S', 'T', 'S', 'R', 'E', 'A', 'R', 'R', 'I', '_', 'N', 'O', '_', 'U', 'S', 'E', 'D', '\020', 
    '\000', '\022', '\034', '\n', '\030', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'S', 'T', 'S', 'R', 'E', 'A', 'R', 'R', 'I', '_', 'C', 'L', 
    'O', 'S', 'E', 'D', '\020', '\001', '\022', '\032', '\n', '\026', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'S', 'T', 'S', 'R', 'E', 'A', 'R', 
    'R', 'I', '_', 'O', 'P', 'E', 'N', '\020', '\002', '\022', '\033', '\n', '\027', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'S', 'T', 'S', 'R', 
    'E', 'A', 'R', 'R', 'I', '_', 'F', 'A', 'U', 'L', 'T', '\020', '\003', '\"', '\245', '\001', '\n', '\031', 'B', 'c', 'm', '_', 'd', 'o', 'o', 
    'r', 'l', 'o', 'c', 'k', 's', 't', 's', 'r', 'e', 'a', 'r', 'l', 'e', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'B', 'C', 'M', 
    '_', 'D', 'O', 'O', 'R', 'L', 'O', 'C', 'K', 'S', 'T', 'S', 'R', 'E', 'A', 'R', 'L', 'E', '_', 'N', 'O', '_', 'U', 'S', 'E', 
    'D', '\020', '\000', '\022', ' ', '\n', '\034', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'L', 'O', 'C', 'K', 'S', 'T', 'S', 'R', 'E', 'A', 
    'R', 'L', 'E', '_', 'L', 'O', 'C', 'K', 'E', 'D', '\020', '\001', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'L', 
    'O', 'C', 'K', 'S', 'T', 'S', 'R', 'E', 'A', 'R', 'L', 'E', '_', 'U', 'N', 'L', 'O', 'C', 'K', 'E', 'D', '\020', '\002', '\022', '\037', 
    '\n', '\033', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'L', 'O', 'C', 'K', 'S', 'T', 'S', 'R', 'E', 'A', 'R', 'L', 'E', '_', 'F', 
    'A', 'U', 'L', 'T', '\020', '\003', '\"', '\245', '\001', '\n', '\031', 'B', 'c', 'm', '_', 'd', 'o', 'o', 'r', 'l', 'o', 'c', 'k', 's', 't', 
    's', 'f', 'r', 'n', 't', 'r', 'i', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'L', 'O', 
    'C', 'K', 'S', 'T', 'S', 'F', 'R', 'N', 'T', 'R', 'I', '_', 'N', 'O', '_', 'U', 'S', 'E', 'D', '\020', '\000', '\022', ' ', '\n', '\034', 
    'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'L', 'O', 'C', 'K', 'S', 'T', 'S', 'F', 'R', 'N', 'T', 'R', 'I', '_', 'L', 'O', 'C', 
    'K', 'E', 'D', '\020', '\001', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'L', 'O', 'C', 'K', 'S', 'T', 'S', 'F', 
    'R', 'N', 'T', 'R', 'I', '_', 'U', 'N', 'L', 'O', 'C', 'K', 'E', 'D', '\020', '\002', '\022', '\037', '\n', '\033', 'B', 'C', 'M', '_', 'D', 
    'O', 'O', 'R', 'L', 'O', 'C', 'K', 'S', 'T', 'S', 'F', 'R', 'N', 'T', 'R', 'I', '_', 'F', 'A', 'U', 'L', 'T', '\020', '\003', '\"', 
    '\245', '\001', '\n', '\031', 'B', 'c', 'm', '_', 'd', 'o', 'o', 'r', 'l', 'o', 'c', 'k', 's', 't', 's', 'f', 'r', 'n', 't', 'l', 'e', 
    'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'L', 'O', 'C', 'K', 'S', 'T', 'S', 'F', 'R', 
    'N', 'T', 'L', 'E', '_', 'N', 'O', '_', 'U', 'S', 'E', 'D', '\020', '\000', '\022', ' ', '\n', '\034', 'B', 'C', 'M', '_', 'D', 'O', 'O', 
    'R', 'L', 'O', 'C', 'K', 'S', 'T', 'S', 'F', 'R', 'N', 'T', 'L', 'E', '_', 'L', 'O', 'C', 'K', 'E', 'D', '\020', '\001', '\022', '\"', 
    '\n', '\036', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'L', 'O', 'C', 'K', 'S', 'T', 'S', 'F', 'R', 'N', 'T', 'L', 'E', '_', 'U', 
    'N', 'L', 'O', 'C', 'K', 'E', 'D', '\020', '\002', '\022', '\037', '\n', '\033', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'L', 'O', 'C', 'K', 
    'S', 'T', 'S', 'F', 'R', 'N', 'T', 'L', 'E', '_', 'F', 'A', 'U', 'L', 'T', '\020', '\003', '\"', '\254', '\001', '\n', '\024', 'B', 'c', 'm', 
    '_', 'a', 'n', 't', 'i', 't', 'h', 'e', 'f', 't', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'B', 'C', 'M', '_', 
    'A', 'N', 'T', 'I', 'T', 'H', 'E', 'F', 'T', 'S', 'T', 'S', '_', 'F', 'O', 'R', 'T', 'I', 'F', 'Y', '\020', '\000', '\022', '+', '\n', 
    '\'', 'B', 'C', 'M', '_', 'A', 'N', 'T', 'I', 'T', 'H', 'E', 'F', 'T', 'S', 'T', 'S', '_', 'L', 'I', 'F', 'T', '_', 'T', 'H', 
    'E', '_', 'F', 'O', 'R', 'T', 'I', 'F', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '\020', '\001', '\022', '\034', '\n', '\030', 'B', 'C', 'M', '_', 
    'A', 'N', 'T', 'I', 'T', 'H', 'E', 'F', 'T', 'S', 'T', 'S', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\002', '\022', '+', '\n', 
    '\'', 'B', 'C', 'M', '_', 'A', 'N', 'T', 'I', 'T', 'H', 'E', 'F', 'T', 'S', 'T', 'S', '_', 'A', 'B', 'N', 'O', 'R', 'M', 'A', 
    'L', '_', 'F', 'O', 'R', 'T', 'I', 'F', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '\020', '\003', '\"', '[', '\n', '\027', 'B', 'c', 'm', '_', 
    'l', 'o', 'a', 'd', 's', 'e', 'n', 's', 'i', 't', 'i', 'v', 'i', 't', 'y', 'T', 'y', 'p', 'e', '\022', ' ', '\n', '\034', 'B', 'C', 
    'M', '_', 'L', 'O', 'A', 'D', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'I', 'N', 'A', 'C', 'I', 'T', 'V', 
    'E', '\020', '\000', '\022', '\036', '\n', '\032', 'B', 'C', 'M', '_', 'L', 'O', 'A', 'D', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 'V', 'I', 'T', 
    'Y', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', '\212', '\t', '\n', '\032', 'B', 'c', 'm', '_', 'l', 'o', 'c', 'k', 'u', 'n', 
    'l', 'o', 'c', 'k', 'f', 'e', 'e', 'd', 'b', 'a', 'c', 'k', 'T', 'y', 'p', 'e', '\022', '0', '\n', ',', 'B', 'C', 'M', '_', 'L', 
    'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 'N', 'O', '_', 'L', 'O', 'C', 'K', 
    '_', 'U', 'N', 'L', 'O', 'C', 'K', '_', 'A', 'C', 'T', 'I', 'O', 'N', '\020', '\000', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'L', 
    'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 'P', 'E', '_', 'L', 'O', 'C', 'K', 
    '\020', '\001', '\022', '#', '\n', '\037', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 
    'A', 'C', 'K', '_', 'R', 'K', 'E', '_', 'L', 'O', 'C', 'K', '\020', '\002', '\022', '-', '\n', ')', 'B', 'C', 'M', '_', 'L', 'O', 'C', 
    'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 'L', 'E', 'A', 'V', 'E', '_', 'V', 'E', 'H', 
    'I', 'C', 'L', 'E', '_', 'L', 'O', 'C', 'K', '\020', '\003', '\022', '&', '\n', '\"', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 
    'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 'M', 'A', 'S', 'T', 'E', 'R', '_', 'L', 'O', 'C', 'K', '\020', 
    '\004', '\022', '&', '\n', '\"', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 
    'C', 'K', '_', 'F', 'I', 'N', 'G', 'E', 'R', '_', 'L', 'O', 'C', 'K', '\020', '\005', '\022', '+', '\n', '\'', 'B', 'C', 'M', '_', 'L', 
    'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 'R', 'K', 'E', '_', '3', '0', 'S', 
    '_', 'A', 'U', 'T', 'O', 'L', 'O', 'C', 'K', '\020', '\006', '\022', '*', '\n', '&', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 
    'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 'P', 'E', '_', '3', '0', 'S', '_', 'A', 'U', 'T', 'O', 'L', 
    'O', 'C', 'K', '\020', '\007', '\022', '7', '\n', '3', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 
    'E', 'D', 'B', 'A', 'C', 'K', '_', 'N', 'E', 'A', 'R', '_', 'T', 'O', '_', 'V', 'E', 'H', 'I', 'C', 'L', 'E', '_', '3', '0', 
    'S', '_', 'A', 'U', 'T', 'O', 'L', 'O', 'C', 'K', '\020', '\010', '\022', '$', '\n', ' ', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 
    'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 'T', 'B', 'O', 'X', '_', 'L', 'O', 'C', 'K', '\020', '\t', 
    '\022', '$', '\n', ' ', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 
    'K', '_', 'S', 'P', 'E', 'E', 'D', 'L', 'O', 'C', 'K', '\020', '\n', '\022', '*', '\n', '&', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 
    'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 'D', 'I', 'A', 'G', 'N', 'O', 'S', 'T', 'I', 'C', 
    '_', 'L', 'O', 'C', 'K', '\020', '\013', '\022', ',', '\n', '(', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 
    'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 'T', 'B', 'O', 'X', '_', '3', '0', 'S', '_', 'A', 'U', 'T', 'O', 'L', 'O', 'C', 
    'K', '\020', '\014', '\022', ')', '\n', '%', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 
    'B', 'A', 'C', 'K', '_', 'A', 'N', 'Y', '_', 'O', 'T', 'H', 'E', 'R', '_', 'L', 'O', 'C', 'K', '\020', '\017', '\022', '$', '\n', ' ', 
    'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 'P', 'E', 
    '_', 'U', 'N', 'L', 'O', 'C', 'K', '\020', '\021', '\022', '%', '\n', '!', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 'L', 'O', 
    'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 'R', 'K', 'E', '_', 'U', 'N', 'L', 'O', 'C', 'K', '\020', '\022', '\022', '1', 
    '\n', '-', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 
    'N', 'E', 'A', 'R', '_', 'T', 'O', '_', 'V', 'E', 'H', 'I', 'C', 'L', 'E', '_', 'U', 'N', 'L', 'O', 'C', 'K', '\020', '\023', '\022', 
    '(', '\n', '$', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', 
    '_', 'M', 'A', 'S', 'T', 'E', 'R', '_', 'U', 'N', 'L', 'O', 'C', 'K', '\020', '\024', '\022', '(', '\n', '$', 'B', 'C', 'M', '_', 'L', 
    'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 'F', 'I', 'N', 'G', 'E', 'R', '_', 
    'U', 'N', 'L', 'O', 'C', 'K', '\020', '\025', '\022', '&', '\n', '\"', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 
    'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 'C', 'R', 'A', 'S', 'H', 'U', 'N', 'L', 'O', 'C', 'K', '\020', '\026', '\022', '+', 
    '\n', '\'', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 
    'K', 'E', 'Y', 'R', 'E', 'M', 'O', 'V', 'A', 'L', 'U', 'N', 'L', 'O', 'C', 'K', '\020', '\027', '\022', '\'', '\n', '#', 'B', 'C', 'M', 
    '_', 'L', 'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 'E', 'N', 'G', 'O', 'F', 
    'F', 'U', 'N', 'L', 'O', 'C', 'K', '\020', '\030', '\022', '&', '\n', '\"', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 'L', 'O', 
    'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 'T', 'B', 'O', 'X', '_', 'U', 'N', 'L', 'C', 'O', 'K', '\020', '\031', '\022', 
    ',', '\n', '(', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', 
    '_', 'D', 'I', 'A', 'G', 'N', 'O', 'S', 'T', 'I', 'C', '_', 'U', 'N', 'L', 'O', 'C', 'K', '\020', '\032', '\022', ':', '\n', '6', 'B', 
    'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 'E', 'D', 'B', 'A', 'C', 'K', '_', 'K', 'E', 'Y', 
    '_', 'F', 'O', 'R', 'G', 'O', 'T', 'T', 'E', 'N', '_', 'T', 'O', '_', 'U', 'N', 'L', 'O', 'C', 'K', '_', 'T', 'H', 'E', '_', 
    'C', 'A', 'R', '\020', '\033', '\022', '+', '\n', '\'', 'B', 'C', 'M', '_', 'L', 'O', 'C', 'K', 'U', 'N', 'L', 'O', 'C', 'K', 'F', 'E', 
    'E', 'D', 'B', 'A', 'C', 'K', '_', 'A', 'N', 'Y', '_', 'O', 'T', 'H', 'E', 'R', '_', 'U', 'N', 'L', 'O', 'C', 'K', '\020', '\037', 
    '\"', '\240', '\001', '\n', '\030', 'B', 'c', 'm', '_', 'd', 'o', 'o', 'r', 'l', 'o', 'c', 'k', 's', 't', 's', 't', 'r', 'u', 'n', 'k', 
    'T', 'y', 'p', 'e', '\022', ' ', '\n', '\034', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'L', 'O', 'C', 'K', 'S', 'T', 'S', 'T', 'R', 
    'U', 'N', 'K', '_', 'N', 'O', '_', 'U', 'S', 'E', 'D', '\020', '\000', '\022', '\037', '\n', '\033', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 
    'L', 'O', 'C', 'K', 'S', 'T', 'S', 'T', 'R', 'U', 'N', 'K', '_', 'L', 'O', 'C', 'K', 'E', 'D', '\020', '\001', '\022', '!', '\n', '\035', 
    'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'L', 'O', 'C', 'K', 'S', 'T', 'S', 'T', 'R', 'U', 'N', 'K', '_', 'U', 'N', 'L', 'O', 
    'C', 'K', 'E', 'D', '\020', '\002', '\022', '\036', '\n', '\032', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'L', 'O', 'C', 'K', 'S', 'T', 'S', 
    'T', 'R', 'U', 'N', 'K', '_', 'F', 'A', 'U', 'L', 'T', '\020', '\003', '\"', '\210', '\001', '\n', '\024', 'B', 'c', 'm', '_', 'd', 'o', 'o', 
    'r', 's', 't', 's', 't', 'r', 'u', 'n', 'k', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 
    'S', 'T', 'S', 'T', 'R', 'U', 'N', 'K', '_', 'N', 'O', '_', 'U', 'S', 'E', 'D', '\020', '\000', '\022', '\033', '\n', '\027', 'B', 'C', 'M', 
    '_', 'D', 'O', 'O', 'R', 'S', 'T', 'S', 'T', 'R', 'U', 'N', 'K', '_', 'C', 'L', 'O', 'S', 'E', 'D', '\020', '\001', '\022', '\031', '\n', 
    '\025', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'S', 'T', 'S', 'T', 'R', 'U', 'N', 'K', '_', 'O', 'P', 'E', 'N', '\020', '\002', '\022', 
    '\032', '\n', '\026', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'S', 'T', 'S', 'T', 'R', 'U', 'N', 'K', '_', 'F', 'A', 'U', 'L', 'T', 
    '\020', '\003', '\"', '{', '\n', '\035', 'B', 'c', 'm', '_', 't', 'r', 'u', 'n', 'k', 'd', 'o', 'o', 'r', 'p', 'r', 'e', 'u', 'n', 'l', 
    'o', 'c', 'k', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '/', '\n', '+', 'B', 'C', 'M', '_', 'T', 'R', 'U', 'N', 'K', 'D', 'O', 
    'O', 'R', 'P', 'R', 'E', 'U', 'N', 'L', 'O', 'C', 'K', 'S', 'T', 'S', '_', 'N', 'O', '_', 'U', 'S', 'E', 'D', '_', 'N', 'O', 
    '_', 'A', 'C', 'T', 'I', 'O', 'N', '\020', '\000', '\022', ')', '\n', '%', 'B', 'C', 'M', '_', 'T', 'R', 'U', 'N', 'K', 'D', 'O', 'O', 
    'R', 'P', 'R', 'E', 'U', 'N', 'L', 'O', 'C', 'K', 'S', 'T', 'S', '_', 'P', 'R', 'E', 'U', 'N', 'L', 'O', 'C', 'K', 'E', 'D', 
    '\020', '\001', '\"', '\215', '\001', '\n', '\025', 'B', 'c', 'm', '_', 'd', 'o', 'o', 'r', 's', 't', 's', 'r', 'e', 'a', 'r', 'l', 'e', 'T', 
    'y', 'p', 'e', '\022', '\035', '\n', '\031', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'S', 'T', 'S', 'R', 'E', 'A', 'R', 'L', 'E', '_', 
    'N', 'O', '_', 'U', 'S', 'E', 'D', '\020', '\000', '\022', '\034', '\n', '\030', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'S', 'T', 'S', 'R', 
    'E', 'A', 'R', 'L', 'E', '_', 'C', 'L', 'O', 'S', 'E', 'D', '\020', '\001', '\022', '\032', '\n', '\026', 'B', 'C', 'M', '_', 'D', 'O', 'O', 
    'R', 'S', 'T', 'S', 'R', 'E', 'A', 'R', 'L', 'E', '_', 'O', 'P', 'E', 'N', '\020', '\002', '\022', '\033', '\n', '\027', 'B', 'C', 'M', '_', 
    'D', 'O', 'O', 'R', 'S', 'T', 'S', 'R', 'E', 'A', 'R', 'L', 'E', '_', 'F', 'A', 'U', 'L', 'T', '\020', '\003', '\"', '\210', '\001', '\n', 
    '\025', 'B', 'c', 'm', '_', 'f', 'r', 'o', 'n', 't', 'w', 'i', 'p', 'e', 'r', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\035', '\n', 
    '\031', 'B', 'C', 'M', '_', 'F', 'R', 'O', 'N', 'T', 'W', 'I', 'P', 'E', 'R', 'S', 'T', 'S', '_', 'N', 'O', '_', 'U', 'S', 'E', 
    'D', '\020', '\000', '\022', '\031', '\n', '\025', 'B', 'C', 'M', '_', 'F', 'R', 'O', 'N', 'T', 'W', 'I', 'P', 'E', 'R', 'S', 'T', 'S', '_', 
    'O', 'F', 'F', '\020', '\001', '\022', '\031', '\n', '\025', 'B', 'C', 'M', '_', 'F', 'R', 'O', 'N', 'T', 'W', 'I', 'P', 'E', 'R', 'S', 'T', 
    'S', '_', 'L', 'O', 'W', '\020', '\002', '\022', '\032', '\n', '\026', 'B', 'C', 'M', '_', 'F', 'R', 'O', 'N', 'T', 'W', 'I', 'P', 'E', 'R', 
    'S', 'T', 'S', '_', 'H', 'I', 'G', 'H', '\020', '\003', '\"', '\215', '\001', '\n', '\025', 'B', 'c', 'm', '_', 'e', 'n', 'g', 'i', 'n', 'e', 
    'h', 'o', 'o', 'd', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'B', 'C', 'M', '_', 'E', 'N', 'G', 'I', 'N', 'E', 
    'H', 'O', 'O', 'D', 'S', 'T', 'S', '_', 'N', 'O', '_', 'U', 'S', 'E', 'D', '\020', '\000', '\022', '\034', '\n', '\030', 'B', 'C', 'M', '_', 
    'E', 'N', 'G', 'I', 'N', 'E', 'H', 'O', 'O', 'D', 'S', 'T', 'S', '_', 'C', 'L', 'O', 'S', 'E', 'D', '\020', '\001', '\022', '\032', '\n', 
    '\026', 'B', 'C', 'M', '_', 'E', 'N', 'G', 'I', 'N', 'E', 'H', 'O', 'O', 'D', 'S', 'T', 'S', '_', 'O', 'P', 'E', 'N', '\020', '\002', 
    '\022', '\033', '\n', '\027', 'B', 'C', 'M', '_', 'E', 'N', 'G', 'I', 'N', 'E', 'H', 'O', 'O', 'D', 'S', 'T', 'S', '_', 'F', 'A', 'U', 
    'L', 'T', '\020', '\003', '\"', '\213', '\001', '\n', '\024', 'B', 'c', 'm', '_', 'p', 'l', 'g', '_', 'd', 'r', 'i', 'v', 'e', 'r', 's', 'w', 
    'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'B', 'C', 'M', '_', 'P', 'L', 'G', '_', 'D', 'R', 'I', 'V', 'E', 'R', 'S', 'W', '_', 
    'R', 'E', 'L', 'E', 'A', 'S', 'E', '\020', '\000', '\022', '\032', '\n', '\026', 'B', 'C', 'M', '_', 'P', 'L', 'G', '_', 'D', 'R', 'I', 'V', 
    'E', 'R', 'S', 'W', '_', 'P', 'R', 'E', 'S', 'S', '\020', '\001', '\022', '\032', '\n', '\026', 'B', 'C', 'M', '_', 'P', 'L', 'G', '_', 'D', 
    'R', 'I', 'V', 'E', 'R', 'S', 'W', '_', 'S', 'T', 'U', 'C', 'K', '\020', '\002', '\022', '\035', '\n', '\031', 'B', 'C', 'M', '_', 'P', 'L', 
    'G', '_', 'D', 'R', 'I', 'V', 'E', 'R', 'S', 'W', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\262', '\001', '\n', 
    '\022', 'B', 'c', 'm', '_', 'w', 'i', 'n', 'd', 'o', 'w', 's', 'c', 'm', 'd', 'T', 'y', 'p', 'e', '\022', '\032', '\n', '\026', 'B', 'C', 
    'M', '_', 'W', 'I', 'N', 'D', 'O', 'W', 'S', 'C', 'M', 'D', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '\035', '\n', 
    '\031', 'B', 'C', 'M', '_', 'W', 'I', 'N', 'D', 'O', 'W', 'S', 'C', 'M', 'D', '_', 'W', 'I', 'N', 'D', 'O', 'W', 'S', '_', 'U', 
    'P', '\020', '\001', '\022', '\037', '\n', '\033', 'B', 'C', 'M', '_', 'W', 'I', 'N', 'D', 'O', 'W', 'S', 'C', 'M', 'D', '_', 'W', 'I', 'N', 
    'D', 'O', 'W', 'S', '_', 'D', 'O', 'W', 'N', '\020', '\002', '\022', '\037', '\n', '\033', 'B', 'C', 'M', '_', 'W', 'I', 'N', 'D', 'O', 'W', 
    'S', 'C', 'M', 'D', '_', 'W', 'I', 'N', 'D', 'O', 'W', 'S', '_', 'V', 'E', 'N', 'T', '\020', '\003', '\022', '\037', '\n', '\033', 'B', 'C', 
    'M', '_', 'W', 'I', 'N', 'D', 'O', 'W', 'S', 'C', 'M', 'D', '_', 'W', 'I', 'N', 'D', 'O', 'W', 'S', '_', 'S', 'T', 'O', 'P', 
    '\020', '\004', '\"', '\206', '\001', '\n', '\024', 'B', 'c', 'm', '_', 'r', 'e', 'a', 'r', 'w', 'i', 'p', 'e', 'r', 's', 't', 's', 'T', 'y', 
    'p', 'e', '\022', '\034', '\n', '\030', 'B', 'C', 'M', '_', 'R', 'E', 'A', 'R', 'W', 'I', 'P', 'E', 'R', 'S', 'T', 'S', '_', 'N', 'O', 
    '_', 'U', 'S', 'E', 'D', '\020', '\000', '\022', '\030', '\n', '\024', 'B', 'C', 'M', '_', 'R', 'E', 'A', 'R', 'W', 'I', 'P', 'E', 'R', 'S', 
    'T', 'S', '_', 'O', 'F', 'F', '\020', '\001', '\022', '\027', '\n', '\023', 'B', 'C', 'M', '_', 'R', 'E', 'A', 'R', 'W', 'I', 'P', 'E', 'R', 
    'S', 'T', 'S', '_', 'O', 'N', '\020', '\002', '\022', '\035', '\n', '\031', 'B', 'C', 'M', '_', 'R', 'E', 'A', 'R', 'W', 'I', 'P', 'E', 'R', 
    'S', 'T', 'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\215', '\001', '\n', '\025', 'B', 'c', 'm', '_', 'd', 'o', 
    'o', 'r', 's', 't', 's', 'f', 'r', 'n', 't', 'r', 'i', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'B', 'C', 'M', '_', 'D', 'O', 
    'O', 'R', 'S', 'T', 'S', 'F', 'R', 'N', 'T', 'R', 'I', '_', 'N', 'O', '_', 'U', 'S', 'E', 'D', '\020', '\000', '\022', '\034', '\n', '\030', 
    'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'S', 'T', 'S', 'F', 'R', 'N', 'T', 'R', 'I', '_', 'C', 'L', 'O', 'S', 'E', 'D', '\020', 
    '\001', '\022', '\032', '\n', '\026', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'S', 'T', 'S', 'F', 'R', 'N', 'T', 'R', 'I', '_', 'O', 'P', 
    'E', 'N', '\020', '\002', '\022', '\033', '\n', '\027', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'S', 'T', 'S', 'F', 'R', 'N', 'T', 'R', 'I', 
    '_', 'F', 'A', 'U', 'L', 'T', '\020', '\003', '\"', '\232', '\001', '\n', '\030', 'B', 'c', 'm', '_', 't', 'u', 'r', 'n', 'i', 'n', 'd', 'i', 
    'c', 'a', 't', 'o', 'r', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'B', 'C', 'M', '_', 'T', 'U', 'R', 'N', 'I', 
    'N', 'D', 'I', 'C', 'A', 'T', 'O', 'R', 'S', 'T', 'S', '_', 'O', 'F', 'F', '\020', '\000', '\022', '\035', '\n', '\031', 'B', 'C', 'M', '_', 
    'T', 'U', 'R', 'N', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'O', 'R', 'S', 'T', 'S', '_', 'L', 'E', 'O', 'N', '\020', '\001', '\022', '\035', 
    '\n', '\031', 'B', 'C', 'M', '_', 'T', 'U', 'R', 'N', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'O', 'R', 'S', 'T', 'S', '_', 'R', 'I', 
    'O', 'N', '\020', '\002', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'T', 'U', 'R', 'N', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'O', 'R', 
    'S', 'T', 'S', '_', 'L', 'E', 'A', 'N', 'D', 'R', 'I', 'O', 'N', '\020', '\003', '\"', '\215', '\001', '\n', '\025', 'B', 'c', 'm', '_', 'd', 
    'o', 'o', 'r', 's', 't', 's', 'f', 'r', 'n', 't', 'l', 'e', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'B', 'C', 'M', '_', 'D', 
    'O', 'O', 'R', 'S', 'T', 'S', 'F', 'R', 'N', 'T', 'L', 'E', '_', 'N', 'O', '_', 'U', 'S', 'E', 'D', '\020', '\000', '\022', '\034', '\n', 
    '\030', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'S', 'T', 'S', 'F', 'R', 'N', 'T', 'L', 'E', '_', 'C', 'L', 'O', 'S', 'E', 'D', 
    '\020', '\001', '\022', '\032', '\n', '\026', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'S', 'T', 'S', 'F', 'R', 'N', 'T', 'L', 'E', '_', 'O', 
    'P', 'E', 'N', '\020', '\002', '\022', '\033', '\n', '\027', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'S', 'T', 'S', 'F', 'R', 'N', 'T', 'L', 
    'E', '_', 'F', 'A', 'U', 'L', 'T', '\020', '\003', '\"', '\245', '\001', '\n', '\031', 'B', 'c', 'm', '_', 'd', 'o', 'o', 'r', 'l', 'o', 'c', 
    'k', 's', 't', 's', 'r', 'e', 'a', 'r', 'r', 'i', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'B', 'C', 'M', '_', 'D', 'O', 'O', 
    'R', 'L', 'O', 'C', 'K', 'S', 'T', 'S', 'R', 'E', 'A', 'R', 'R', 'I', '_', 'N', 'O', '_', 'U', 'S', 'E', 'D', '\020', '\000', '\022', 
    ' ', '\n', '\034', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'L', 'O', 'C', 'K', 'S', 'T', 'S', 'R', 'E', 'A', 'R', 'R', 'I', '_', 
    'L', 'O', 'C', 'K', 'E', 'D', '\020', '\001', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'D', 'O', 'O', 'R', 'L', 'O', 'C', 'K', 'S', 
    'T', 'S', 'R', 'E', 'A', 'R', 'R', 'I', '_', 'U', 'N', 'L', 'O', 'C', 'K', 'E', 'D', '\020', '\002', '\022', '\037', '\n', '\033', 'B', 'C', 
    'M', '_', 'D', 'O', 'O', 'R', 'L', 'O', 'C', 'K', 'S', 'T', 'S', 'R', 'E', 'A', 'R', 'R', 'I', '_', 'F', 'A', 'U', 'L', 'T', 
    '\020', '\003', '\"', '\205', '\020', '\n', '\r', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '0', '_', '2', '7', '0', '\022', 'c', '\n', '\033', 'p', 
    'a', 'm', '_', 'e', 's', 'p', '_', 't', 'a', 'r', 'g', 'e', 't', '_', 'g', 'e', 'a', 'r', '_', 'r', 'e', 'q', 'u', 'e', 's', 
    't', '\030', '\001', ' ', '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '0', '_', '2', '7', '0', '.', 'P', 'a', 'm', '_', 'e', 's', 'p', '_', 't', 'a', 
    'r', 'g', 'e', 't', '_', 'g', 'e', 'a', 'r', '_', 'r', 'e', 'q', 'u', 'e', 's', 't', 'T', 'y', 'p', 'e', '\022', 'W', '\n', '\025', 
    'p', 'a', 'm', '_', 'b', 'r', 'a', 'k', 'e', 'f', 'u', 'n', 'c', 't', 'i', 'o', 'n', 'm', 'o', 'd', 'e', '\030', '\002', ' ', '\001', 
    '(', '\016', '2', '8', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', 
    '0', 'x', '2', '7', '0', '_', '2', '7', '0', '.', 'P', 'a', 'm', '_', 'b', 'r', 'a', 'k', 'e', 'f', 'u', 'n', 'c', 't', 'i', 
    'o', 'n', 'm', 'o', 'd', 'e', 'T', 'y', 'p', 'e', '\022', 'U', '\n', '\024', 's', 't', 'o', 'p', 's', 't', 'a', 'r', 't', 'i', 'n', 
    'h', 'i', 'b', 'i', 't', '_', 'a', 'p', 'a', '\030', '\003', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '0', '_', '2', '7', '0', '.', 'S', 't', 
    'o', 'p', 's', 't', 'a', 'r', 't', 'i', 'n', 'h', 'i', 'b', 'i', 't', '_', 'a', 'p', 'a', 'T', 'y', 'p', 'e', '\022', '=', '\n', 
    '\010', 'p', 'a', 'm', '_', 'a', 'p', 'a', 'f', '\030', '\004', ' ', '\001', '(', '\016', '2', '+', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '0', '_', '2', '7', '0', '.', 'P', 'a', 
    'm', '_', 'a', 'p', 'a', 'f', 'T', 'y', 'p', 'e', '\022', 'G', '\n', '\r', 'p', 'a', 'm', '_', 'c', 'm', 'd', 'e', 'p', 's', 's', 
    't', 's', '\030', '\005', ' ', '\001', '(', '\016', '2', '0', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 
    's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '0', '_', '2', '7', '0', '.', 'P', 'a', 'm', '_', 'c', 'm', 'd', 'e', 'p', 
    's', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', ';', '\n', '\007', 'p', 'a', 'm', '_', 's', 't', 's', '\030', '\006', ' ', '\001', '(', '\016', 
    '2', '*', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', 
    '2', '7', '0', '_', '2', '7', '0', '.', 'P', 'a', 'm', '_', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'M', '\n', '\020', 'p', 'a', 
    'm', '_', 'b', 'r', 'a', 'k', 'e', 'm', 'o', 'd', 'e', 's', 't', 's', '\030', '\007', ' ', '\001', '(', '\016', '2', '3', '.', 'j', 'm', 
    'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '0', '_', '2', 
    '7', '0', '.', 'P', 'a', 'm', '_', 'b', 'r', 'a', 'k', 'e', 'm', 'o', 'd', 'e', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'U', 
    '\n', '\024', 'p', 'a', 'm', '_', 'f', 'a', 'i', 'l', 'u', 'r', 'e', 'b', 'r', 'a', 'k', 'e', 'm', 'o', 'd', 'e', '\030', '\010', ' ', 
    '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', 
    '_', '0', 'x', '2', '7', '0', '_', '2', '7', '0', '.', 'P', 'a', 'm', '_', 'f', 'a', 'i', 'l', 'u', 'r', 'e', 'b', 'r', 'a', 
    'k', 'e', 'm', 'o', 'd', 'e', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\024', 'p', 'a', 'm', '_', 'e', 's', 'p', '_', 's', 'p', 'e', 
    'e', 'd', '_', 't', 'a', 'r', 'g', 'e', 't', '\030', '\t', ' ', '\001', '(', '\002', '\022', '\035', '\n', '\025', 'p', 'a', 'm', '_', 'e', 's', 
    'p', '_', 's', 't', 'o', 'p', '_', 'd', 'i', 's', 't', 'a', 'n', 'c', 'e', '\030', '\n', ' ', '\001', '(', '\005', '\022', '\035', '\n', '\025', 
    'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', '2', '7', '0', '\030', '\013', ' ', '\001', 
    '(', '\005', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '2', '7', '0', '\030', '\014', ' ', '\001', '(', 
    '\005', '\022', '\035', '\n', '\025', 'p', 'a', 'm', '_', 't', 'r', 'g', 't', 'e', 'p', 's', 's', 't', 'r', 'g', 'w', 'h', 'l', 'a', 'n', 
    'g', '\030', '\r', ' ', '\001', '(', '\001', '\"', '\354', '\001', '\n', '\037', 'P', 'a', 'm', '_', 'e', 's', 'p', '_', 't', 'a', 'r', 'g', 'e', 
    't', '_', 'g', 'e', 'a', 'r', '_', 'r', 'e', 'q', 'u', 'e', 's', 't', 'T', 'y', 'p', 'e', '\022', '*', '\n', '&', 'P', 'A', 'M', 
    '_', 'E', 'S', 'P', '_', 'T', 'A', 'R', 'G', 'E', 'T', '_', 'G', 'E', 'A', 'R', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '_', 
    'N', 'O', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\000', '\022', '$', '\n', ' ', 'P', 'A', 'M', '_', 'E', 'S', 'P', '_', 'T', 
    'A', 'R', 'G', 'E', 'T', '_', 'G', 'E', 'A', 'R', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '_', 'P', 'A', 'R', 'K', '\020', '\001', 
    '\022', '\'', '\n', '#', 'P', 'A', 'M', '_', 'E', 'S', 'P', '_', 'T', 'A', 'R', 'G', 'E', 'T', '_', 'G', 'E', 'A', 'R', '_', 'R', 
    'E', 'Q', 'U', 'E', 'S', 'T', '_', 'R', 'E', 'V', 'E', 'R', 'S', 'E', '\020', '\002', '\022', '\'', '\n', '#', 'P', 'A', 'M', '_', 'E', 
    'S', 'P', '_', 'T', 'A', 'R', 'G', 'E', 'T', '_', 'G', 'E', 'A', 'R', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '_', 'N', 'E', 
    'U', 'T', 'R', 'A', 'L', '\020', '\003', '\022', '%', '\n', '!', 'P', 'A', 'M', '_', 'E', 'S', 'P', '_', 'T', 'A', 'R', 'G', 'E', 'T', 
    '_', 'G', 'E', 'A', 'R', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '_', 'D', 'R', 'I', 'V', 'E', '\020', '\004', '\"', 'i', '\n', '\031', 
    'P', 'a', 'm', '_', 'b', 'r', 'a', 'k', 'e', 'f', 'u', 'n', 'c', 't', 'i', 'o', 'n', 'm', 'o', 'd', 'e', 'T', 'y', 'p', 'e', 
    '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'B', 'R', 'A', 'K', 'E', 'F', 'U', 'N', 'C', 'T', 'I', 'O', 'N', 'M', 'O', 'D', 'E', 
    '_', 'N', 'O', '_', 'A', 'C', 'T', 'I', 'O', 'N', '\020', '\000', '\022', '\'', '\n', '#', 'P', 'A', 'M', '_', 'B', 'R', 'A', 'K', 'E', 
    'F', 'U', 'N', 'C', 'T', 'I', 'O', 'N', 'M', 'O', 'D', 'E', '_', 'A', 'U', 'T', 'O', 'M', 'A', 'T', 'I', 'C', 'P', 'A', 'R', 
    'K', '\020', '\001', '\"', 'Y', '\n', '\030', 'S', 't', 'o', 'p', 's', 't', 'a', 'r', 't', 'i', 'n', 'h', 'i', 'b', 'i', 't', '_', 'a', 
    'p', 'a', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'S', 'T', 'O', 'P', 'S', 'T', 'A', 'R', 'T', 'I', 'N', 'H', 'I', 'B', 'I', 
    'T', '_', 'A', 'P', 'A', '_', 'F', 'A', 'L', 'S', 'E', '\020', '\000', '\022', '\035', '\n', '\031', 'S', 'T', 'O', 'P', 'S', 'T', 'A', 'R', 
    'T', 'I', 'N', 'H', 'I', 'B', 'I', 'T', '_', 'A', 'P', 'A', '_', 'T', 'R', 'U', 'E', '\020', '\001', '\"', '=', '\n', '\014', 'P', 'a', 
    'm', '_', 'a', 'p', 'a', 'f', 'T', 'y', 'p', 'e', '\022', '\023', '\n', '\017', 'P', 'A', 'M', '_', 'A', 'P', 'A', 'F', '_', 'N', 'O', 
    'R', 'M', 'A', 'L', '\020', '\000', '\022', '\030', '\n', '\024', 'P', 'A', 'M', '_', 'A', 'P', 'A', 'F', '_', 'A', 'P', 'A', '_', 'F', 'A', 
    'I', 'L', 'U', 'R', 'E', '\020', '\001', '\"', 'w', '\n', '\021', 'P', 'a', 'm', '_', 'c', 'm', 'd', 'e', 'p', 's', 's', 't', 's', 'T', 
    'y', 'p', 'e', '\022', '\034', '\n', '\030', 'P', 'A', 'M', '_', 'C', 'M', 'D', 'E', 'P', 'S', 'S', 'T', 'S', '_', 'N', 'O', '_', 'R', 
    'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\000', '\022', '%', '\n', '!', 'P', 'A', 'M', '_', 'C', 'M', 'D', 'E', 'P', 'S', 'S', 'T', 'S', 
    '_', 'C', 'O', 'N', 'T', 'R', 'O', 'L', '_', 'E', 'P', 'S', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\001', '\022', '\035', '\n', 
    '\031', 'P', 'A', 'M', '_', 'C', 'M', 'D', 'E', 'P', 'S', 'S', 'T', 'S', '_', 'E', 'P', 'S', '_', 'C', 'O', 'N', 'T', 'R', 'O', 
    'L', '\020', '\002', '\"', '\346', '\001', '\n', '\013', 'P', 'a', 'm', '_', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\017', '\n', '\013', 'P', 'A', 
    'M', '_', 'S', 'T', 'S', '_', 'O', 'F', 'F', '\020', '\000', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'S', 'T', 'S', '_', 'S', 'T', 
    'A', 'N', 'D', 'B', 'Y', '_', 'S', 'T', 'A', 'N', 'D', 'B', 'Y', '_', 'E', 'N', 'A', 'B', 'L', 'E', '\020', '\001', '\022', '\034', '\n', 
    '\030', 'P', 'A', 'M', '_', 'S', 'T', 'S', '_', 'S', 'E', 'A', 'R', 'C', 'H', 'I', 'N', 'G', '_', 'E', 'N', 'A', 'B', 'L', 'E', 
    '\020', '\002', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'S', 'T', 'S', '_', 'G', 'U', 'I', 'D', 'A', 'N', 'C', 'E', '_', 'A', 'C', 
    'T', 'I', 'V', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\003', '\022', '\025', '\n', '\021', 'P', 'A', 'M', '_', 'S', 'T', 'S', '_', 
    'C', 'O', 'M', 'P', 'L', 'E', 'T', 'E', 'D', '\020', '\004', '\022', '\033', '\n', '\027', 'P', 'A', 'M', '_', 'S', 'T', 'S', '_', 'F', 'A', 
    'I', 'L', 'U', 'R', 'E', '_', 'D', 'I', 'S', 'A', 'B', 'L', 'E', '\020', '\005', '\022', '\026', '\n', '\022', 'P', 'A', 'M', '_', 'S', 'T', 
    'S', '_', 'T', 'E', 'R', 'M', 'I', 'N', 'A', 'T', 'E', 'D', '\020', '\006', '\022', '\024', '\n', '\020', 'P', 'A', 'M', '_', 'S', 'T', 'S', 
    '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\007', '\"', '\315', '\001', '\n', '\024', 'P', 'a', 'm', '_', 'b', 'r', 'a', 'k', 'e', 
    'm', 'o', 'd', 'e', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\031', '\n', '\025', 'P', 'A', 'M', '_', 'B', 'R', 'A', 'K', 'E', 'M', 
    'O', 'D', 'E', 'S', 'T', 'S', '_', 'I', 'N', 'I', 'T', '\020', '\000', '\022', '\034', '\n', '\030', 'P', 'A', 'M', '_', 'B', 'R', 'A', 'K', 
    'E', 'M', 'O', 'D', 'E', 'S', 'T', 'S', '_', 'S', 'T', 'A', 'N', 'D', 'B', 'Y', '\020', '\001', '\022', '\033', '\n', '\027', 'P', 'A', 'M', 
    '_', 'B', 'R', 'A', 'K', 'E', 'M', 'O', 'D', 'E', 'S', 'T', 'S', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\002', '\022', '%', '\n', 
    '!', 'P', 'A', 'M', '_', 'B', 'R', 'A', 'K', 'E', 'M', 'O', 'D', 'E', 'S', 'T', 'S', '_', 'M', 'A', 'N', 'E', 'U', 'V', 'E', 
    'R', 'F', 'I', 'N', 'I', 'S', 'H', 'E', 'D', '\020', '\003', '\022', '\034', '\n', '\030', 'P', 'A', 'M', '_', 'B', 'R', 'A', 'K', 'E', 'M', 
    'O', 'D', 'E', 'S', 'T', 'S', '_', 'S', 'U', 'S', 'P', 'E', 'N', 'D', '\020', '\004', '\022', '\032', '\n', '\026', 'P', 'A', 'M', '_', 'B', 
    'R', 'A', 'K', 'E', 'M', 'O', 'D', 'E', 'S', 'T', 'S', '_', 'A', 'B', 'O', 'R', 'T', '\020', '\005', '\"', '\272', '\001', '\n', '\030', 'P', 
    'a', 'm', '_', 'f', 'a', 'i', 'l', 'u', 'r', 'e', 'b', 'r', 'a', 'k', 'e', 'm', 'o', 'd', 'e', 'T', 'y', 'p', 'e', '\022', '(', 
    '\n', '$', 'P', 'A', 'M', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', 'B', 'R', 'A', 'K', 'E', 'M', 'O', 'D', 'E', '_', 'I', 'D', 
    'L', 'E', '_', 'N', 'O', '_', 'B', 'R', 'A', 'K', 'I', 'N', 'G', '\020', '\000', '\022', '-', '\n', ')', 'P', 'A', 'M', '_', 'F', 'A', 
    'I', 'L', 'U', 'R', 'E', 'B', 'R', 'A', 'K', 'E', 'M', 'O', 'D', 'E', '_', 'C', 'O', 'M', 'F', 'O', 'R', 'T', 'A', 'B', 'L', 
    'E', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\001', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'F', 'A', 'I', 'L', 'U', 
    'R', 'E', 'B', 'R', 'A', 'K', 'E', 'M', 'O', 'D', 'E', '_', 'E', 'M', 'E', 'R', 'G', 'E', 'N', 'C', 'Y', '\020', '\002', '\022', '!', 
    '\n', '\035', 'P', 'A', 'M', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', 'B', 'R', 'A', 'K', 'E', 'M', 'O', 'D', 'E', '_', 'R', 'E', 
    'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\330', 'H', '\n', '\r', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '1', '_', '2', '7', 
    '1', '\022', 'Q', '\n', '\022', 'p', 'a', 'm', '_', 'i', 'n', 'f', 'o', 'd', 'i', 's', 'p', 'l', 'a', 'y', 'r', 'e', 'q', '\030', '\001', 
    ' ', '\001', '(', '\016', '2', '5', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 
    'm', '_', '0', 'x', '2', '7', '1', '_', '2', '7', '1', '.', 'P', 'a', 'm', '_', 'i', 'n', 'f', 'o', 'd', 'i', 's', 'p', 'l', 
    'a', 'y', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', 'M', '\n', '\020', 'p', 'a', 'm', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 
    's', 'f', 'l', 'm', '\030', '\002', ' ', '\001', '(', '\016', '2', '3', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '1', '_', '2', '7', '1', '.', 'P', 'a', 'm', '_', 'o', 'b', 'j', 
    'e', 'c', 't', 's', 't', 's', 'f', 'l', 'm', 'T', 'y', 'p', 'e', '\022', 'M', '\n', '\020', 'p', 'a', 'm', '_', 'o', 'b', 'j', 'e', 
    'c', 't', 's', 't', 's', 'f', 'l', 'c', '\030', '\003', ' ', '\001', '(', '\016', '2', '3', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '1', '_', '2', '7', '1', '.', 'P', 'a', 'm', 
    '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'f', 'l', 'c', 'T', 'y', 'p', 'e', '\022', 'M', '\n', '\020', 'p', 'a', 'm', '_', 
    'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'f', 'r', 'c', '\030', '\004', ' ', '\001', '(', '\016', '2', '3', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '1', '_', '2', '7', '1', 
    '.', 'P', 'a', 'm', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'f', 'r', 'c', 'T', 'y', 'p', 'e', '\022', 'M', '\n', '\020', 
    'p', 'a', 'm', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'f', 'r', 'm', '\030', '\005', ' ', '\001', '(', '\016', '2', '3', '.', 
    'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '1', 
    '_', '2', '7', '1', '.', 'P', 'a', 'm', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'f', 'r', 'm', 'T', 'y', 'p', 'e', 
    '\022', 'M', '\n', '\020', 'p', 'a', 'm', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'r', 'l', 'm', '\030', '\006', ' ', '\001', '(', 
    '\016', '2', '3', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 
    'x', '2', '7', '1', '_', '2', '7', '1', '.', 'P', 'a', 'm', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'r', 'l', 'm', 
    'T', 'y', 'p', 'e', '\022', 'M', '\n', '\020', 'p', 'a', 'm', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'r', 'l', 'c', '\030', 
    '\007', ' ', '\001', '(', '\016', '2', '3', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 
    'a', 'm', '_', '0', 'x', '2', '7', '1', '_', '2', '7', '1', '.', 'P', 'a', 'm', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 
    's', 'r', 'l', 'c', 'T', 'y', 'p', 'e', '\022', 'M', '\n', '\020', 'p', 'a', 'm', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 
    'r', 'r', 'c', '\030', '\010', ' ', '\001', '(', '\016', '2', '3', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '1', '_', '2', '7', '1', '.', 'P', 'a', 'm', '_', 'o', 'b', 'j', 'e', 
    'c', 't', 's', 't', 's', 'r', 'r', 'c', 'T', 'y', 'p', 'e', '\022', 'M', '\n', '\020', 'p', 'a', 'm', '_', 'o', 'b', 'j', 'e', 'c', 
    't', 's', 't', 's', 'r', 'r', 'm', '\030', '\t', ' ', '\001', '(', '\016', '2', '3', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '1', '_', '2', '7', '1', '.', 'P', 'a', 'm', '_', 
    'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'r', 'r', 'm', 'T', 'y', 'p', 'e', '\022', '[', '\n', '\027', 'p', 'a', 'm', '_', 'c', 
    'h', 'i', 'm', 'e', 'c', 'm', 'd', 's', 'o', 'u', 'n', 'd', 's', 't', 'a', 't', 'u', 's', '\030', '\n', ' ', '\001', '(', '\016', '2', 
    ':', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', 
    '7', '1', '_', '2', '7', '1', '.', 'P', 'a', 'm', '_', 'c', 'h', 'i', 'm', 'e', 'c', 'm', 'd', 's', 'o', 'u', 'n', 'd', 's', 
    't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', 'W', '\n', '\025', 'p', 'a', 'm', '_', 'r', 'e', 'a', 'r', 's', 'y', 's', 't', 
    'e', 'm', 'w', 'o', 'r', 'k', 's', 't', 's', '\030', '\013', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '1', '_', '2', '7', '1', '.', 'P', 'a', 
    'm', '_', 'r', 'e', 'a', 'r', 's', 'y', 's', 't', 'e', 'm', 'w', 'o', 'r', 'k', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'Y', 
    '\n', '\026', 'p', 'a', 'm', '_', 'f', 'r', 'o', 'n', 't', 's', 'y', 's', 't', 'e', 'm', 'w', 'o', 'r', 'k', 's', 't', 's', '\030', 
    '\014', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 
    'a', 'm', '_', '0', 'x', '2', '7', '1', '_', '2', '7', '1', '.', 'P', 'a', 'm', '_', 'f', 'r', 'o', 'n', 't', 's', 'y', 's', 
    't', 'e', 'm', 'w', 'o', 'r', 'k', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'O', '\n', '\021', 'p', 'a', 'm', '_', 'p', 'a', 'r', 
    'k', 'i', 'n', 'g', 'b', 'a', 'r', 's', 't', 's', '\030', '\r', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '1', '_', '2', '7', '1', '.', 'P', 
    'a', 'm', '_', 'p', 'a', 'r', 'k', 'i', 'n', 'g', 'b', 'a', 'r', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', ']', '\n', '\030', 'p', 
    'a', 'm', '_', 'c', 'h', 'i', 'm', 'e', 'c', 'm', 'd', 's', 'o', 'u', 'n', 'd', 'c', 'a', 'd', 'e', 'n', 'c', 'e', '\030', '\016', 
    ' ', '\001', '(', '\016', '2', ';', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 
    'm', '_', '0', 'x', '2', '7', '1', '_', '2', '7', '1', '.', 'P', 'a', 'm', '_', 'c', 'h', 'i', 'm', 'e', 'c', 'm', 'd', 's', 
    'o', 'u', 'n', 'd', 'c', 'a', 'd', 'e', 'n', 'c', 'e', 'T', 'y', 'p', 'e', '\022', 'W', '\n', '\025', 'p', 'a', 'm', '_', 'p', 'a', 
    'r', 'k', 'i', 'n', 'g', 'b', 'a', 'r', 'p', 'e', 'r', 'c', 'e', 'n', 't', '\030', '\017', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '1', '_', 
    '2', '7', '1', '.', 'P', 'a', 'm', '_', 'p', 'a', 'r', 'k', 'i', 'n', 'g', 'b', 'a', 'r', 'p', 'e', 'r', 'c', 'e', 'n', 't', 
    'T', 'y', 'p', 'e', '\"', '\372', '\010', '\n', '\026', 'P', 'a', 'm', '_', 'i', 'n', 'f', 'o', 'd', 'i', 's', 'p', 'l', 'a', 'y', 'r', 
    'e', 'q', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 
    'R', 'E', 'Q', '_', 'N', 'O', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\000', '\022', '(', '\n', '$', 'P', 'A', 'M', '_', 'I', 
    'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', '_', 'F', 'O', 'R', 'W', 'A', 'R', 'D', 
    '_', 'A', 'G', 'A', 'I', 'N', '\020', '\001', '\022', '%', '\n', '!', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 
    'A', 'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', '_', 'T', 'U', 'R', 'N', '_', 'L', 'E', 'V', 'E', 'R', '\020', '\002', '\022', '!', '\n', 
    '\035', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', '_', 'G', 
    'E', 'A', 'R', '_', 'P', '\020', '\003', '\022', ')', '\n', '%', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 
    'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', '_', 'C', 'O', 'N', 'F', 'I', 'R', 'M', '_', 'S', 'W', 'I', 'T', 'C', 'H', '\020', '\004', 
    '\022', '+', '\n', '\'', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'R', 'E', 
    'Q', '_', 'S', 'E', 'A', 'R', 'C', 'H', 'I', 'N', 'G', 'P', 'R', 'O', 'C', 'E', 'S', 'S', '\020', '\005', '\022', '#', '\n', '\037', 'P', 
    'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', '_', 'D', 'R', 'I', 
    'V', 'E', '_', 'F', 'W', '\020', '\006', '\022', '\037', '\n', '\033', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 
    'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', '_', 'S', 'T', 'O', 'P', '\020', '\007', '\022', '*', '\n', '&', 'P', 'A', 'M', '_', 'I', 'N', 
    'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', '_', 'F', 'U', 'N', 'C', 'T', 'I', 'O', 'N', 
    '_', 'S', 'E', 'L', 'E', 'C', 'T', '\020', '\010', '\022', '\'', '\n', '#', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 
    'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', '_', 'F', 'U', 'N', 'C', 'T', 'I', 'O', 'N', '_', 'O', 'F', 'F', '\020', '\t', 
    '\022', '&', '\n', '\"', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'R', 'E', 
    'Q', '_', 'P', 'R', 'O', 'C', 'E', 'S', 'S', '_', 'B', 'A', 'R', '\020', '\n', '\022', '(', '\n', '$', 'P', 'A', 'M', '_', 'I', 'N', 
    'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'P', 'P', 'S', 'C', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', 
    '_', 'O', 'N', 'L', 'Y', '\020', '\013', '\022', '(', '\n', '$', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 
    'Y', 'R', 'E', 'Q', '_', 'C', 'P', 'S', 'C', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '_', 'O', 'N', 'L', 'Y', '\020', '\014', '\022', 
    '(', '\n', '$', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'P', 'P', 'S', 
    'C', '_', 'C', 'P', 'S', 'C', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\r', '\022', '!', '\n', '\035', 'P', 'A', 'M', '_', 'I', 
    'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', '_', 'G', 'E', 'A', 'R', '_', 'R', '\020', 
    '\016', '\022', '!', '\n', '\035', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'R', 
    'E', 'Q', '_', 'G', 'E', 'A', 'R', '_', 'D', '\020', '\017', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 
    'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', '_', 'D', 'R', 'I', 'V', 'E', '_', 'B', 'W', '\020', '\020', '\022', '$', 
    '\n', ' ', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', '_', 
    'S', 'L', 'O', 'W', '_', 'D', 'O', 'W', 'N', '\020', '\021', '\022', ':', '\n', '6', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 
    'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', '_', 'B', 'R', 'A', 'K', 
    'E', '_', 'A', 'N', 'D', 'S', 'T', 'E', 'E', 'R', 'I', 'N', 'G', '_', 'W', 'H', 'E', 'E', 'L', '\020', '\022', '\022', '%', '\n', '!', 
    'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', '_', 'C', 'L', 
    'O', 'S', 'E', '_', 'D', 'O', 'O', 'R', '\020', '\023', '\022', '+', '\n', '\'', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 
    'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', '_', 'B', 'U', 'C', 'K', 'L', 'E', '_', 'S', 'E', 'A', 'T', '_', 'B', 
    'E', 'L', 'T', '\020', '\024', '\022', '2', '\n', '.', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'R', 
    'E', 'Q', '_', 'R', 'E', 'Q', '_', 'R', 'E', 'P', 'R', 'E', 'S', 'S', '_', 'D', 'E', 'A', 'D', '_', 'M', 'A', 'N', '_', 'S', 
    'W', 'I', 'T', 'C', 'H', '\020', '\025', '\022', ',', '\n', '(', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 
    'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', '_', 'P', 'R', 'E', 'S', 'S', '_', 'B', 'R', 'A', 'K', 'E', '_', 'P', 'E', 'D', 'A', 
    'L', '\020', '\026', '\022', '+', '\n', '\'', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', 
    '_', 'R', 'E', 'Q', '_', 'G', 'E', 'A', 'R', '_', 'R', '_', 'A', 'N', 'D', '_', 'B', 'R', 'A', 'K', 'E', '\020', '\027', '\022', ',', 
    '\n', '(', 'P', 'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', '_', 
    'F', 'U', 'N', 'C', 'T', 'I', 'O', 'N', '_', 'C', 'O', 'M', 'P', 'L', 'E', 'T', 'E', '\020', '\030', '\022', '1', '\n', '-', 'P', 'A', 
    'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', '_', 'F', 'U', 'N', 'C', 
    'T', 'I', 'O', 'N', '_', 'N', 'O', 'T', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', '\031', '\022', '\037', '\n', '\033', 'P', 
    'A', 'M', '_', 'I', 'N', 'F', 'O', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'R', 'E', 'Q', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 
    'D', '\020', '\032', '\"', '\355', '\001', '\n', '\024', 'P', 'a', 'm', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'f', 'l', 'm', 'T', 
    'y', 'p', 'e', '\022', '\036', '\n', '\032', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'L', 'M', '_', 'N', 
    'O', '_', 'O', 'B', 'J', 'E', 'C', 'T', '\020', '\000', '\022', '%', '\n', '!', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 
    'T', 'S', 'F', 'L', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '_', '1', '\020', '\001', '\022', 
    '\"', '\n', '\036', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'L', 'M', '_', 'O', 'B', 'J', 'E', 'C', 
    'T', '_', 'Z', 'O', 'N', 'E', '_', '2', '\020', '\002', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 
    'T', 'S', 'F', 'L', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', '_', '3', '\020', '\003', '\022', '\"', '\n', '\036', 
    'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'L', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 
    'O', 'N', 'E', '_', '4', '\020', '\004', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 
    'L', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', '_', '5', '\020', '\005', '\"', '\245', '\001', '\n', '\024', 'P', 'a', 
    'm', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'f', 'l', 'c', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'P', 'A', 'M', 
    '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'L', 'C', '_', 'N', 'O', '_', 'O', 'B', 'J', 'E', 'C', 'T', '\020', '\000', 
    '\022', '%', '\n', '!', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'L', 'C', '_', 'O', 'B', 'J', 'E', 
    'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '_', '1', '\020', '\001', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'O', 'B', 'J', 
    'E', 'C', 'T', 'S', 'T', 'S', 'F', 'L', 'C', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', '_', '2', '\020', '\002', 
    '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'L', 'C', '_', 'O', 'B', 'J', 'E', 
    'C', 'T', '_', 'Z', 'O', 'N', 'E', '_', '3', '\020', '\003', '\"', '\245', '\001', '\n', '\024', 'P', 'a', 'm', '_', 'o', 'b', 'j', 'e', 'c', 
    't', 's', 't', 's', 'f', 'r', 'c', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 
    'S', 'T', 'S', 'F', 'R', 'C', '_', 'N', 'O', '_', 'O', 'B', 'J', 'E', 'C', 'T', '\020', '\000', '\022', '%', '\n', '!', 'P', 'A', 'M', 
    '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'R', 'C', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 
    'O', 'N', 'E', '_', '1', '\020', '\001', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 
    'R', 'C', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', '_', '2', '\020', '\002', '\022', '\"', '\n', '\036', 'P', 'A', 'M', 
    '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'R', 'C', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', 
    '_', '3', '\020', '\003', '\"', '\355', '\001', '\n', '\024', 'P', 'a', 'm', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'f', 'r', 'm', 
    'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'R', 'M', '_', 
    'N', 'O', '_', 'O', 'B', 'J', 'E', 'C', 'T', '\020', '\000', '\022', '%', '\n', '!', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 
    'S', 'T', 'S', 'F', 'R', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '_', '1', '\020', '\001', 
    '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'R', 'M', '_', 'O', 'B', 'J', 'E', 
    'C', 'T', '_', 'Z', 'O', 'N', 'E', '_', '2', '\020', '\002', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 
    'S', 'T', 'S', 'F', 'R', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', '_', '3', '\020', '\003', '\022', '\"', '\n', 
    '\036', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'R', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 
    'Z', 'O', 'N', 'E', '_', '4', '\020', '\004', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 
    'F', 'R', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', '_', '5', '\020', '\005', '\"', '\315', '\002', '\n', '\024', 'P', 
    'a', 'm', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'r', 'l', 'm', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'P', 'A', 
    'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'L', 'M', '_', 'N', 'O', '_', 'O', 'B', 'J', 'E', 'C', 'T', '\020', 
    '\000', '\022', '$', '\n', ' ', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'L', 'M', '_', 'O', 'B', 'J', 
    'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '1', '\020', '\001', '\022', '!', '\n', '\035', 'P', 'A', 'M', '_', 'O', 'B', 'J', 
    'E', 'C', 'T', 'S', 'T', 'S', 'R', 'L', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', '2', '\020', '\002', '\022', 
    '!', '\n', '\035', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'L', 'M', '_', 'O', 'B', 'J', 'E', 'C', 
    'T', '_', 'Z', 'O', 'N', 'E', '3', '\020', '\003', '\022', '!', '\n', '\035', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 
    'S', 'R', 'L', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', '4', '\020', '\004', '\022', '!', '\n', '\035', 'P', 'A', 
    'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'L', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 
    'E', '5', '\020', '\005', '\022', '!', '\n', '\035', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'L', 'M', '_', 
    'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', '6', '\020', '\006', '\022', '!', '\n', '\035', 'P', 'A', 'M', '_', 'O', 'B', 'J', 
    'E', 'C', 'T', 'S', 'T', 'S', 'R', 'L', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', '7', '\020', '\007', '\022', 
    '\035', '\n', '\031', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'L', 'M', '_', 'R', 'E', 'S', 'E', 'R', 
    'V', 'E', 'D', '\020', '\010', '\"', '\245', '\001', '\n', '\024', 'P', 'a', 'm', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'r', 'l', 
    'c', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'L', 'C', 
    '_', 'N', 'O', '_', 'O', 'B', 'J', 'E', 'C', 'T', '\020', '\000', '\022', '%', '\n', '!', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 
    'T', 'S', 'T', 'S', 'R', 'L', 'C', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '_', '1', '\020', 
    '\001', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'L', 'C', '_', 'O', 'B', 'J', 
    'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', '_', '2', '\020', '\002', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 
    'T', 'S', 'T', 'S', 'R', 'L', 'C', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', '_', '3', '\020', '\003', '\"', '\245', 
    '\001', '\n', '\024', 'P', 'a', 'm', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'r', 'r', 'c', 'T', 'y', 'p', 'e', '\022', '\036', 
    '\n', '\032', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'R', 'C', '_', 'N', 'O', '_', 'O', 'B', 'J', 
    'E', 'C', 'T', '\020', '\000', '\022', '%', '\n', '!', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'R', 'C', 
    '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '_', '1', '\020', '\001', '\022', '\"', '\n', '\036', 'P', 'A', 
    'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'R', 'C', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 
    'E', '_', '2', '\020', '\002', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'R', 'C', 
    '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', '_', '3', '\020', '\003', '\"', '\265', '\002', '\n', '\024', 'P', 'a', 'm', '_', 
    'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'r', 'r', 'm', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'P', 'A', 'M', '_', 'O', 
    'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'R', 'M', '_', 'N', 'O', '_', 'O', 'B', 'J', 'E', 'C', 'T', '\020', '\000', '\022', '%', 
    '\n', '!', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'R', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 
    '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '_', '1', '\020', '\001', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 
    'T', 'S', 'T', 'S', 'R', 'R', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', '_', '2', '\020', '\002', '\022', '\"', 
    '\n', '\036', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'R', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 
    '_', 'Z', 'O', 'N', 'E', '_', '3', '\020', '\003', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 
    'S', 'R', 'R', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', '_', '4', '\020', '\004', '\022', '\"', '\n', '\036', 'P', 
    'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'R', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 
    'N', 'E', '_', '5', '\020', '\005', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'R', 
    'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', '_', '6', '\020', '\006', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 
    'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'R', 'M', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'Z', 'O', 'N', 'E', '_', 
    '7', '\020', '\007', '\"', '\304', '\001', '\n', '\033', 'P', 'a', 'm', '_', 'c', 'h', 'i', 'm', 'e', 'c', 'm', 'd', 's', 'o', 'u', 'n', 'd', 
    's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '%', '\n', '!', 'P', 'A', 'M', '_', 'C', 'H', 'I', 'M', 'E', 'C', 'M', 
    'D', 'S', 'O', 'U', 'N', 'D', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'N', 'O', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\000', '\022', 
    '.', '\n', '*', 'P', 'A', 'M', '_', 'C', 'H', 'I', 'M', 'E', 'C', 'M', 'D', 'S', 'O', 'U', 'N', 'D', 'S', 'T', 'A', 'T', 'U', 
    'S', '_', 'F', 'R', 'O', 'N', 'T', 'S', 'Y', 'S', 'T', 'E', 'M', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\001', '\022', '-', '\n', 
    ')', 'P', 'A', 'M', '_', 'C', 'H', 'I', 'M', 'E', 'C', 'M', 'D', 'S', 'O', 'U', 'N', 'D', 'S', 'T', 'A', 'T', 'U', 'S', '_', 
    'R', 'E', 'A', 'R', 'S', 'Y', 'S', 'T', 'E', 'M', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\002', '\022', '\037', '\n', '\033', 'P', 'A', 
    'M', '_', 'C', 'H', 'I', 'M', 'E', 'C', 'M', 'D', 'S', 'O', 'U', 'N', 'D', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'A', 'P', 'A', 
    '\020', '\003', '\"', '\244', '\001', '\n', '\031', 'P', 'a', 'm', '_', 'r', 'e', 'a', 'r', 's', 'y', 's', 't', 'e', 'm', 'w', 'o', 'r', 'k', 
    's', 't', 's', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'P', 'A', 'M', '_', 'R', 'E', 'A', 'R', 'S', 'Y', 'S', 'T', 'E', 'M', 
    'W', 'O', 'R', 'K', 'S', 'T', 'S', '_', 'D', 'I', 'S', 'A', 'B', 'L', 'E', '\020', '\000', '\022', ' ', '\n', '\034', 'P', 'A', 'M', '_', 
    'R', 'E', 'A', 'R', 'S', 'Y', 'S', 'T', 'E', 'M', 'W', 'O', 'R', 'K', 'S', 'T', 'S', '_', 'E', 'N', 'A', 'B', 'L', 'E', '\020', 
    '\001', '\022', ' ', '\n', '\034', 'P', 'A', 'M', '_', 'R', 'E', 'A', 'R', 'S', 'Y', 'S', 'T', 'E', 'M', 'W', 'O', 'R', 'K', 'S', 'T', 
    'S', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\002', '\022', ' ', '\n', '\034', 'P', 'A', 'M', '_', 'R', 'E', 'A', 'R', 'S', 'Y', 'S', 
    'T', 'E', 'M', 'W', 'O', 'R', 'K', 'S', 'T', 'S', '_', 'F', 'A', 'I', 'L', 'E', 'D', '\020', '\003', '\"', '\251', '\001', '\n', '\032', 'P', 
    'a', 'm', '_', 'f', 'r', 'o', 'n', 't', 's', 'y', 's', 't', 'e', 'm', 'w', 'o', 'r', 'k', 's', 't', 's', 'T', 'y', 'p', 'e', 
    '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'F', 'R', 'O', 'N', 'T', 'S', 'Y', 'S', 'T', 'E', 'M', 'W', 'O', 'R', 'K', 'S', 'T', 
    'S', '_', 'D', 'I', 'S', 'A', 'B', 'L', 'E', '\020', '\000', '\022', '!', '\n', '\035', 'P', 'A', 'M', '_', 'F', 'R', 'O', 'N', 'T', 'S', 
    'Y', 'S', 'T', 'E', 'M', 'W', 'O', 'R', 'K', 'S', 'T', 'S', '_', 'E', 'N', 'A', 'B', 'L', 'E', '\020', '\001', '\022', '!', '\n', '\035', 
    'P', 'A', 'M', '_', 'F', 'R', 'O', 'N', 'T', 'S', 'Y', 'S', 'T', 'E', 'M', 'W', 'O', 'R', 'K', 'S', 'T', 'S', '_', 'A', 'C', 
    'T', 'I', 'V', 'E', '\020', '\002', '\022', '!', '\n', '\035', 'P', 'A', 'M', '_', 'F', 'R', 'O', 'N', 'T', 'S', 'Y', 'S', 'T', 'E', 'M', 
    'W', 'O', 'R', 'K', 'S', 'T', 'S', '_', 'F', 'A', 'I', 'L', 'E', 'D', '\020', '\003', '\"', '\244', '\001', '\n', '\025', 'P', 'a', 'm', '_', 
    'p', 'a', 'r', 'k', 'i', 'n', 'g', 'b', 'a', 'r', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'P', 'A', 'M', '_', 
    'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'S', 'T', 'S', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', '_', 'O', 'F', 'F', 
    '\020', '\000', '\022', '3', '\n', '/', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'S', 'T', 'S', '_', 'D', 
    'I', 'S', 'P', 'L', 'A', 'Y', '_', 'O', 'N', '_', 'F', 'R', 'O', 'M', '_', 'T', 'O', 'P', '_', 'T', 'O', '_', 'B', 'O', 'T', 
    'T', 'O', 'M', '\020', '\001', '\022', '3', '\n', '/', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'S', 'T', 
    'S', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', '_', 'O', 'N', '_', 'F', 'R', 'O', 'M', '_', 'B', 'O', 'T', 'T', 'O', 'M', '_', 
    'T', 'O', '_', 'T', 'O', 'P', '\020', '\002', '\"', '\303', '\004', '\n', '\034', 'P', 'a', 'm', '_', 'c', 'h', 'i', 'm', 'e', 'c', 'm', 'd', 
    's', 'o', 'u', 'n', 'd', 'c', 'a', 'd', 'e', 'n', 'c', 'e', 'T', 'y', 'p', 'e', '\022', '.', '\n', '*', 'P', 'A', 'M', '_', 'C', 
    'H', 'I', 'M', 'E', 'C', 'M', 'D', 'S', 'O', 'U', 'N', 'D', 'C', 'A', 'D', 'E', 'N', 'C', 'E', '_', 'T', 'O', 'N', 'E', '_', 
    '0', '_', 'N', 'O', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\000', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'C', 'H', 'I', 
    'M', 'E', 'C', 'M', 'D', 'S', 'O', 'U', 'N', 'D', 'C', 'A', 'D', 'E', 'N', 'C', 'E', '_', 'T', 'O', 'N', 'E', '_', '1', '\020', 
    '\001', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'C', 'H', 'I', 'M', 'E', 'C', 'M', 'D', 'S', 'O', 'U', 'N', 'D', 'C', 'A', 'D', 
    'E', 'N', 'C', 'E', '_', 'T', 'O', 'N', 'E', '_', '2', '\020', '\002', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'C', 'H', 'I', 'M', 
    'E', 'C', 'M', 'D', 'S', 'O', 'U', 'N', 'D', 'C', 'A', 'D', 'E', 'N', 'C', 'E', '_', 'T', 'O', 'N', 'E', '_', '3', '\020', '\003', 
    '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'C', 'H', 'I', 'M', 'E', 'C', 'M', 'D', 'S', 'O', 'U', 'N', 'D', 'C', 'A', 'D', 'E', 
    'N', 'C', 'E', '_', 'T', 'O', 'N', 'E', '_', '4', '\020', '\004', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'C', 'H', 'I', 'M', 'E', 
    'C', 'M', 'D', 'S', 'O', 'U', 'N', 'D', 'C', 'A', 'D', 'E', 'N', 'C', 'E', '_', 'T', 'O', 'N', 'E', '_', '5', '\020', '\005', '\022', 
    '#', '\n', '\037', 'P', 'A', 'M', '_', 'C', 'H', 'I', 'M', 'E', 'C', 'M', 'D', 'S', 'O', 'U', 'N', 'D', 'C', 'A', 'D', 'E', 'N', 
    'C', 'E', '_', 'T', 'O', 'N', 'E', '_', '6', '\020', '\006', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'C', 'H', 'I', 'M', 'E', 'C', 
    'M', 'D', 'S', 'O', 'U', 'N', 'D', 'C', 'A', 'D', 'E', 'N', 'C', 'E', '_', 'T', 'O', 'N', 'E', '_', '7', '\020', '\007', '\022', '$', 
    '\n', ' ', 'P', 'A', 'M', '_', 'C', 'H', 'I', 'M', 'E', 'C', 'M', 'D', 'S', 'O', 'U', 'N', 'D', 'C', 'A', 'D', 'E', 'N', 'C', 
    'E', '_', 'R', 'P', 'A', '_', 'N', 'O', 'K', '\020', '\010', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'C', 'H', 'I', 'M', 'E', 'C', 
    'M', 'D', 'S', 'O', 'U', 'N', 'D', 'C', 'A', 'D', 'E', 'N', 'C', 'E', '_', 'R', 'P', 'A', '_', 'O', 'K', '\020', '\t', '\022', '4', 
    '\n', '0', 'P', 'A', 'M', '_', 'C', 'H', 'I', 'M', 'E', 'C', 'M', 'D', 'S', 'O', 'U', 'N', 'D', 'C', 'A', 'D', 'E', 'N', 'C', 
    'E', '_', 'T', 'O', 'N', 'E', '_', '1', '0', '_', 'P', 'A', 'M', '_', 'F', 'A', 'I', 'L', 'E', 'D', '_', 'T', 'O', 'N', 'E', 
    '\020', '\n', '\022', '5', '\n', '1', 'P', 'A', 'M', '_', 'C', 'H', 'I', 'M', 'E', 'C', 'M', 'D', 'S', 'O', 'U', 'N', 'D', 'C', 'A', 
    'D', 'E', 'N', 'C', 'E', '_', 'T', 'O', 'N', 'E', '_', '1', '1', '_', 'P', 'A', 'M', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 
    '_', 'T', 'O', 'N', 'E', '\020', '\013', '\022', '8', '\n', '4', 'P', 'A', 'M', '_', 'C', 'H', 'I', 'M', 'E', 'C', 'M', 'D', 'S', 'O', 
    'U', 'N', 'D', 'C', 'A', 'D', 'E', 'N', 'C', 'E', '_', 'T', 'O', 'N', 'E', '_', '1', '2', '_', 'P', 'A', 'M', '_', 'S', 'U', 
    'C', 'C', 'E', 'S', 'S', 'F', 'U', 'L', '_', 'T', 'O', 'N', 'E', '\020', '\014', '\"', '\325', '\035', '\n', '\031', 'P', 'a', 'm', '_', 'p', 
    'a', 'r', 'k', 'i', 'n', 'g', 'b', 'a', 'r', 'p', 'e', 'r', 'c', 'e', 'n', 't', 'T', 'y', 'p', 'e', '\022', '\"', '\n', '\036', 'P', 
    'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '0', 'P', 'E', 'R', 
    'C', 'E', 'N', 'T', '\020', '\000', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 
    'E', 'R', 'C', 'E', 'N', 'T', '_', '1', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\001', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 
    'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '2', 'P', 'E', 'R', 'C', 'E', 'N', 
    'T', '\020', '\002', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 
    'E', 'N', 'T', '_', '3', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\003', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'P', 'A', 'R', 
    'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '4', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\004', 
    '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', 
    '_', '5', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\005', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 
    'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '6', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\006', '\022', '\"', '\n', 
    '\036', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '7', 'P', 
    'E', 'R', 'C', 'E', 'N', 'T', '\020', '\007', '\022', '\"', '\n', '\036', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 
    'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '8', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\010', '\022', '\"', '\n', '\036', 'P', 'A', 
    'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '9', 'P', 'E', 'R', 'C', 
    'E', 'N', 'T', '\020', '\t', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 
    'R', 'C', 'E', 'N', 'T', '_', '1', '0', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\n', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 
    'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '1', '1', 'P', 'E', 'R', 'C', 'E', 
    'N', 'T', '\020', '\013', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 
    'C', 'E', 'N', 'T', '_', '1', '2', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\014', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 
    'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '1', '3', 'P', 'E', 'R', 'C', 'E', 'N', 
    'T', '\020', '\r', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 
    'E', 'N', 'T', '_', '1', '4', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\016', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 
    'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '1', '5', 'P', 'E', 'R', 'C', 'E', 'N', 'T', 
    '\020', '\017', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 
    'N', 'T', '_', '1', '6', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\020', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 
    'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '1', '7', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 
    '\021', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 
    'T', '_', '1', '8', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\022', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 
    'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '1', '9', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\023', 
    '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', 
    '_', '2', '0', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\024', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 
    'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '2', '1', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\025', '\022', 
    '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', 
    '2', '2', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\026', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 
    'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '2', '3', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\027', '\022', '#', 
    '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '2', 
    '4', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\030', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 
    'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '2', '5', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\031', '\022', '#', '\n', 
    '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '2', '6', 
    'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\032', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 
    'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '2', '7', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\033', '\022', '#', '\n', '\037', 
    'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '2', '8', 'P', 
    'E', 'R', 'C', 'E', 'N', 'T', '\020', '\034', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 
    'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '2', '9', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\035', '\022', '#', '\n', '\037', 'P', 
    'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '3', '0', 'P', 'E', 
    'R', 'C', 'E', 'N', 'T', '\020', '\036', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 
    'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '3', '1', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\037', '\022', '#', '\n', '\037', 'P', 'A', 
    'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '3', '2', 'P', 'E', 'R', 
    'C', 'E', 'N', 'T', '\020', ' ', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 
    'E', 'R', 'C', 'E', 'N', 'T', '_', '3', '3', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '!', '\022', '#', '\n', '\037', 'P', 'A', 'M', 
    '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '3', '4', 'P', 'E', 'R', 'C', 
    'E', 'N', 'T', '\020', '\"', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 
    'R', 'C', 'E', 'N', 'T', '_', '3', '5', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '#', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 
    'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '3', '6', 'P', 'E', 'R', 'C', 'E', 
    'N', 'T', '\020', '$', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 
    'C', 'E', 'N', 'T', '_', '3', '7', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '%', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 
    'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '3', '8', 'P', 'E', 'R', 'C', 'E', 'N', 
    'T', '\020', '&', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 
    'E', 'N', 'T', '_', '3', '9', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\'', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 
    'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '4', '0', 'P', 'E', 'R', 'C', 'E', 'N', 'T', 
    '\020', '(', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 
    'N', 'T', '_', '4', '1', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', ')', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 
    'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '4', '2', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 
    '*', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 
    'T', '_', '4', '3', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '+', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 
    'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '4', '4', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', ',', 
    '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', 
    '_', '4', '5', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '-', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 
    'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '4', '6', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '.', '\022', 
    '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', 
    '4', '7', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '/', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 
    'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '4', '8', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '0', '\022', '#', 
    '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '4', 
    '9', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '1', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 
    'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '5', '0', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '2', '\022', '#', '\n', 
    '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '5', '1', 
    'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '3', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 
    'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '5', '2', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '4', '\022', '#', '\n', '\037', 
    'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '5', '3', 'P', 
    'E', 'R', 'C', 'E', 'N', 'T', '\020', '5', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 
    'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '5', '4', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '6', '\022', '#', '\n', '\037', 'P', 
    'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '5', '5', 'P', 'E', 
    'R', 'C', 'E', 'N', 'T', '\020', '7', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 
    'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '5', '6', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '8', '\022', '#', '\n', '\037', 'P', 'A', 
    'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '5', '7', 'P', 'E', 'R', 
    'C', 'E', 'N', 'T', '\020', '9', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 
    'E', 'R', 'C', 'E', 'N', 'T', '_', '5', '8', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', ':', '\022', '#', '\n', '\037', 'P', 'A', 'M', 
    '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '5', '9', 'P', 'E', 'R', 'C', 
    'E', 'N', 'T', '\020', ';', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 
    'R', 'C', 'E', 'N', 'T', '_', '6', '0', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '<', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 
    'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '6', '1', 'P', 'E', 'R', 'C', 'E', 
    'N', 'T', '\020', '=', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 
    'C', 'E', 'N', 'T', '_', '6', '2', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '>', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 
    'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '6', '3', 'P', 'E', 'R', 'C', 'E', 'N', 
    'T', '\020', '?', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 
    'E', 'N', 'T', '_', '6', '4', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '@', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 
    'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '6', '5', 'P', 'E', 'R', 'C', 'E', 'N', 'T', 
    '\020', 'A', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 
    'N', 'T', '_', '6', '6', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'B', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 
    'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '6', '7', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 
    'C', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 
    'T', '_', '6', '8', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'D', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 
    'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '6', '9', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'E', 
    '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', 
    '_', '7', '0', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'F', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 
    'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '7', '1', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'G', '\022', 
    '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', 
    '7', '2', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'H', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 
    'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '7', '3', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'I', '\022', '#', 
    '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '7', 
    '4', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'J', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 
    'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '7', '5', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'K', '\022', '#', '\n', 
    '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '7', '6', 
    'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'L', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 
    'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '7', '7', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'M', '\022', '#', '\n', '\037', 
    'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '7', '8', 'P', 
    'E', 'R', 'C', 'E', 'N', 'T', '\020', 'N', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 
    'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '7', '9', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'O', '\022', '#', '\n', '\037', 'P', 
    'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '8', '0', 'P', 'E', 
    'R', 'C', 'E', 'N', 'T', '\020', 'P', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 
    'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '8', '1', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'Q', '\022', '#', '\n', '\037', 'P', 'A', 
    'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '8', '2', 'P', 'E', 'R', 
    'C', 'E', 'N', 'T', '\020', 'R', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 
    'E', 'R', 'C', 'E', 'N', 'T', '_', '8', '3', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'S', '\022', '#', '\n', '\037', 'P', 'A', 'M', 
    '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '8', '4', 'P', 'E', 'R', 'C', 
    'E', 'N', 'T', '\020', 'T', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 
    'R', 'C', 'E', 'N', 'T', '_', '8', '5', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'U', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 
    'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '8', '6', 'P', 'E', 'R', 'C', 'E', 
    'N', 'T', '\020', 'V', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 
    'C', 'E', 'N', 'T', '_', '8', '7', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'W', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 
    'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '8', '8', 'P', 'E', 'R', 'C', 'E', 'N', 
    'T', '\020', 'X', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 
    'E', 'N', 'T', '_', '8', '9', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'Y', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 
    'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '9', '0', 'P', 'E', 'R', 'C', 'E', 'N', 'T', 
    '\020', 'Z', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 
    'N', 'T', '_', '9', '1', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '[', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 
    'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '9', '2', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 
    '\\', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 
    'T', '_', '9', '3', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', ']', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 
    'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '9', '4', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '^', 
    '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', 
    '_', '9', '5', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '_', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 
    'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '9', '6', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '`', '\022', 
    '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', 
    '9', '7', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'a', '\022', '#', '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 
    'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '9', '8', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'b', '\022', '#', 
    '\n', '\037', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '9', 
    '9', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'c', '\022', '$', '\n', ' ', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 
    'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', '1', '0', '0', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'd', '\022', '(', 
    '\n', '$', 'P', 'A', 'M', '_', 'P', 'A', 'R', 'K', 'I', 'N', 'G', 'B', 'A', 'R', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '_', 'N', 
    'O', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', '_', 'A', 'P', 'A', '\020', 'e', '\"', '\202', '\037', '\n', '\r', 'P', 'a', 'm', '_', '0', 
    'x', '2', '7', '2', '_', '2', '7', '2', '\022', 'Q', '\n', '\022', 'a', 'p', 'a', '_', 'p', 'a', 'r', 'k', 's', 'l', 'o', 't', '_', 
    's', 't', 'a', 't', 'e', '\030', '\001', ' ', '\001', '(', '\016', '2', '5', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '2', '_', '2', '7', '2', '.', 'A', 'p', 'a', '_', 'p', 'a', 
    'r', 'k', 's', 'l', 'o', 't', '_', 's', 't', 'a', 't', 'e', 'T', 'y', 'p', 'e', '\022', 'O', '\n', '\021', 's', 'd', 'g', '_', 'o', 
    'b', 'j', 'e', 'c', 't', 's', 't', 's', '_', 'f', 'r', 's', '\030', '\002', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '2', '_', '2', '7', '2', 
    '.', 'S', 'd', 'g', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', '_', 'f', 'r', 's', 'T', 'y', 'p', 'e', '\022', 'M', '\n', 
    '\020', 's', 'd', 'g', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'r', 'l', 's', '\030', '\003', ' ', '\001', '(', '\016', '2', '3', 
    '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', 
    '2', '_', '2', '7', '2', '.', 'S', 'd', 'g', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'r', 'l', 's', 'T', 'y', 'p', 
    'e', '\022', 'M', '\n', '\020', 'a', 'p', 'a', '_', 's', 'e', 'l', 'e', 'c', 't', 'e', 'd', 's', 'i', 'd', 'e', '\030', '\004', ' ', '\001', 
    '(', '\016', '2', '3', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', 
    '0', 'x', '2', '7', '2', '_', '2', '7', '2', '.', 'A', 'p', 'a', '_', 's', 'e', 'l', 'e', 'c', 't', 'e', 'd', 's', 'i', 'd', 
    'e', 'T', 'y', 'p', 'e', '\022', 'M', '\n', '\020', 's', 'd', 'g', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'r', 'r', 's', 
    '\030', '\005', ' ', '\001', '(', '\016', '2', '3', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 
    'P', 'a', 'm', '_', '0', 'x', '2', '7', '2', '_', '2', '7', '2', '.', 'S', 'd', 'g', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 
    't', 's', 'r', 'r', 's', 'T', 'y', 'p', 'e', '\022', 'U', '\n', '\024', 's', 'd', 'g', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 
    's', 'f', 'r', 's', '_', 'r', 'r', 's', '\030', '\006', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '2', '_', '2', '7', '2', '.', 'S', 'd', 'g', 
    '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'f', 'r', 's', '_', 'r', 'r', 's', 'T', 'y', 'p', 'e', '\022', 'S', '\n', '\023', 
    'a', 'p', 'a', '_', 'q', 'u', 'i', 't', '_', 'i', 'n', 'd', 'i', 'c', 'a', 't', 'i', 'o', 'n', '\030', '\007', ' ', '\001', '(', '\016', 
    '2', '6', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', 
    '2', '7', '2', '_', '2', '7', '2', '.', 'A', 'p', 'a', '_', 'q', 'u', 'i', 't', '_', 'i', 'n', 'd', 'i', 'c', 'a', 't', 'i', 
    'o', 'n', 'T', 'y', 'p', 'e', '\022', 'a', '\n', '\032', 'a', 'p', 'a', '_', 'r', 'e', 'c', 'o', 'v', 'e', 'r', '_', 'i', 'n', 't', 
    '_', 'i', 'n', 'd', 'i', 'c', 'a', 't', 'i', 'o', 'n', '\030', '\010', ' ', '\001', '(', '\016', '2', '=', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '2', '_', '2', '7', '2', '.', 
    'A', 'p', 'a', '_', 'r', 'e', 'c', 'o', 'v', 'e', 'r', '_', 'i', 'n', 't', '_', 'i', 'n', 'd', 'i', 'c', 'a', 't', 'i', 'o', 
    'n', 'T', 'y', 'p', 'e', '\022', 'U', '\n', '\024', 's', 'd', 'g', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'f', 'l', 's', 
    '_', 'r', 'l', 's', '\030', '\t', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '2', '_', '2', '7', '2', '.', 'S', 'd', 'g', '_', 'o', 'b', 'j', 
    'e', 'c', 't', 's', 't', 's', 'f', 'l', 's', '_', 'r', 'l', 's', 'T', 'y', 'p', 'e', '\022', 'I', '\n', '\016', 'a', 'p', 'a', '_', 
    'i', 'n', 'd', 'i', 'c', 'a', 't', 'i', 'o', 'n', '\030', '\n', ' ', '\001', '(', '\016', '2', '1', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '2', '_', '2', '7', '2', '.', 'A', 
    'p', 'a', '_', 'i', 'n', 'd', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', 'M', '\n', '\020', 's', 'd', 'g', '_', 
    'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'f', 'l', 's', '\030', '\013', ' ', '\001', '(', '\016', '2', '3', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '2', '_', '2', '7', '2', 
    '.', 'S', 'd', 'g', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'f', 'l', 's', 'T', 'y', 'p', 'e', '\"', '\235', '\001', '\n', 
    '\026', 'A', 'p', 'a', '_', 'p', 'a', 'r', 'k', 's', 'l', 'o', 't', '_', 's', 't', 'a', 't', 'e', 'T', 'y', 'p', 'e', '\022', '\036', 
    '\n', '\032', 'A', 'P', 'A', '_', 'P', 'A', 'R', 'K', 'S', 'L', 'O', 'T', '_', 'S', 'T', 'A', 'T', 'E', '_', 'N', 'O', '_', 'S', 
    'L', 'O', 'T', '\020', '\000', '\022', ' ', '\n', '\034', 'A', 'P', 'A', '_', 'P', 'A', 'R', 'K', 'S', 'L', 'O', 'T', '_', 'S', 'T', 'A', 
    'T', 'E', '_', 'S', 'L', 'O', 'T', '_', 'L', 'E', 'F', 'T', '\020', '\001', '\022', '!', '\n', '\035', 'A', 'P', 'A', '_', 'P', 'A', 'R', 
    'K', 'S', 'L', 'O', 'T', '_', 'S', 'T', 'A', 'T', 'E', '_', 'S', 'L', 'O', 'T', '_', 'R', 'I', 'G', 'H', 'T', '\020', '\002', '\022', 
    '\036', '\n', '\032', 'A', 'P', 'A', '_', 'P', 'A', 'R', 'K', 'S', 'L', 'O', 'T', '_', 'S', 'T', 'A', 'T', 'E', '_', 'I', 'N', 'V', 
    'A', 'L', 'I', 'D', '\020', '\003', '\"', '\260', '\001', '\n', '\025', 'S', 'd', 'g', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', '_', 
    'f', 'r', 's', 'T', 'y', 'p', 'e', '\022', '\037', '\n', '\033', 'S', 'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', '_', 
    'F', 'R', 'S', '_', 'N', 'O', '_', 'O', 'B', 'J', 'E', 'C', 'T', '\020', '\000', '\022', '&', '\n', '\"', 'S', 'D', 'G', '_', 'O', 'B', 
    'J', 'E', 'C', 'T', 'S', 'T', 'S', '_', 'F', 'R', 'S', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 
    'E', '_', '1', '\020', '\001', '\022', '&', '\n', '\"', 'S', 'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', '_', 'F', 'R', 
    'S', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '_', '2', '\020', '\002', '\022', '&', '\n', '\"', 'S', 
    'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', '_', 'F', 'R', 'S', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 
    'N', '_', 'Z', 'O', 'N', 'E', '_', '3', '\020', '\003', '\"', '\253', '\001', '\n', '\024', 'S', 'd', 'g', '_', 'o', 'b', 'j', 'e', 'c', 't', 
    's', 't', 's', 'r', 'l', 's', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'S', 'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 
    'T', 'S', 'R', 'L', 'S', '_', 'N', 'O', '_', 'O', 'B', 'J', 'E', 'C', 'T', '\020', '\000', '\022', '%', '\n', '!', 'S', 'D', 'G', '_', 
    'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'L', 'S', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 
    'N', 'E', '_', '1', '\020', '\001', '\022', '%', '\n', '!', 'S', 'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'L', 
    'S', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '_', '2', '\020', '\002', '\022', '%', '\n', '!', 'S', 
    'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'L', 'S', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', 
    '_', 'Z', 'O', 'N', 'E', '_', '3', '\020', '\003', '\"', '\207', '\001', '\n', '\024', 'A', 'p', 'a', '_', 's', 'e', 'l', 'e', 'c', 't', 'e', 
    'd', 's', 'i', 'd', 'e', 'T', 'y', 'p', 'e', '\022', '\031', '\n', '\025', 'A', 'P', 'A', '_', 'S', 'E', 'L', 'E', 'C', 'T', 'E', 'D', 
    'S', 'I', 'D', 'E', '_', 'N', 'O', 'N', 'E', '\020', '\000', '\022', '\031', '\n', '\025', 'A', 'P', 'A', '_', 'S', 'E', 'L', 'E', 'C', 'T', 
    'E', 'D', 'S', 'I', 'D', 'E', '_', 'L', 'E', 'F', 'T', '\020', '\001', '\022', '\032', '\n', '\026', 'A', 'P', 'A', '_', 'S', 'E', 'L', 'E', 
    'C', 'T', 'E', 'D', 'S', 'I', 'D', 'E', '_', 'R', 'I', 'G', 'H', 'T', '\020', '\002', '\022', '\035', '\n', '\031', 'A', 'P', 'A', '_', 'S', 
    'E', 'L', 'E', 'C', 'T', 'E', 'D', 'S', 'I', 'D', 'E', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\253', '\001', 
    '\n', '\024', 'S', 'd', 'g', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'r', 'r', 's', 'T', 'y', 'p', 'e', '\022', '\036', '\n', 
    '\032', 'S', 'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'R', 'S', '_', 'N', 'O', '_', 'O', 'B', 'J', 'E', 
    'C', 'T', '\020', '\000', '\022', '%', '\n', '!', 'S', 'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'R', 'S', '_', 
    'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '_', '1', '\020', '\001', '\022', '%', '\n', '!', 'S', 'D', 'G', 
    '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 'R', 'S', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 
    'O', 'N', 'E', '_', '2', '\020', '\002', '\022', '%', '\n', '!', 'S', 'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'R', 
    'R', 'S', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '_', '3', '\020', '\003', '\"', '\277', '\001', '\n', 
    '\030', 'S', 'd', 'g', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'f', 'r', 's', '_', 'r', 'r', 's', 'T', 'y', 'p', 'e', 
    '\022', '\"', '\n', '\036', 'S', 'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'R', 'S', '_', 'R', 'R', 'S', '_', 
    'N', 'O', '_', 'O', 'B', 'J', 'E', 'C', 'T', '\020', '\000', '\022', ')', '\n', '%', 'S', 'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 
    'S', 'T', 'S', 'F', 'R', 'S', '_', 'R', 'R', 'S', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', 
    '_', '1', '\020', '\001', '\022', ')', '\n', '%', 'S', 'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'R', 'S', '_', 
    'R', 'R', 'S', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '_', '2', '\020', '\002', '\022', ')', '\n', 
    '%', 'S', 'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'R', 'S', '_', 'R', 'R', 'S', '_', 'O', 'B', 'J', 
    'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '_', '3', '\020', '\003', '\"', '\276', '\010', '\n', '\027', 'A', 'p', 'a', '_', 'q', 
    'u', 'i', 't', '_', 'i', 'n', 'd', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', '\"', '\n', '\036', 'A', 'P', 'A', 
    '_', 'Q', 'U', 'I', 'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'N', 'O', '_', 'R', 'E', 'Q', 'U', 'E', 
    'S', 'T', '\020', '\000', '\022', '5', '\n', '1', 'A', 'P', 'A', '_', 'Q', 'U', 'I', 'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 
    'O', 'N', '_', 'R', 'E', 'Q', '_', 'Q', 'U', 'I', 'T', '_', 'E', 'X', 'T', 'E', 'R', 'N', 'A', 'L', '_', 'E', 'C', 'U', '_', 
    'F', 'A', 'I', 'L', 'U', 'R', 'E', '\020', '\001', '\022', ',', '\n', '(', 'A', 'P', 'A', '_', 'Q', 'U', 'I', 'T', '_', 'I', 'N', 'D', 
    'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 'Q', 'U', 'I', 'T', '_', 'A', 'P', 'A', '_', 'F', 'A', 'I', 'L', 
    'U', 'R', 'E', '\020', '\002', '\022', '+', '\n', '\'', 'A', 'P', 'A', '_', 'Q', 'U', 'I', 'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 
    'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 'Q', 'U', 'I', 'T', '_', 'S', 'P', 'E', 'E', 'D', '_', 'H', 'I', 'G', 'H', '\020', '\003', 
    '\022', '0', '\n', ',', 'A', 'P', 'A', '_', 'Q', 'U', 'I', 'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 
    'E', 'Q', '_', 'Q', 'U', 'I', 'T', '_', 'T', 'I', 'M', 'I', 'N', 'G', '_', 'O', 'V', 'E', 'R', 'F', 'L', 'O', 'W', '\020', '\004', 
    '\022', '4', '\n', '0', 'A', 'P', 'A', '_', 'Q', 'U', 'I', 'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 
    'E', 'Q', '_', 'Q', 'U', 'I', 'T', '_', 'M', 'O', 'V', 'E', '_', 'T', 'I', 'M', 'E', 'S', '_', 'O', 'V', 'E', 'R', 'F', 'L', 
    'O', 'W', '\020', '\005', '\022', ':', '\n', '6', 'A', 'P', 'A', '_', 'Q', 'U', 'I', 'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 
    'O', 'N', '_', 'R', 'E', 'Q', '_', 'Q', 'U', 'I', 'T', '_', 'R', 'E', 'C', 'O', 'V', 'E', 'R', '_', 'I', 'N', 'T', '_', 'T', 
    'I', 'M', 'S', '_', 'O', 'V', 'E', 'R', 'F', 'L', 'O', 'W', '\020', '\006', '\022', '*', '\n', '&', 'A', 'P', 'A', '_', 'Q', 'U', 'I', 
    'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 'Q', 'U', 'I', 'T', '_', 'G', 'A', 'S', 
    '_', 'P', 'E', 'D', 'A', 'L', '\020', '\007', '\022', '2', '\n', '.', 'A', 'P', 'A', '_', 'Q', 'U', 'I', 'T', '_', 'I', 'N', 'D', 'I', 
    'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 'Q', 'U', 'I', 'T', '_', 'G', 'E', 'A', 'R', '_', 'I', 'N', 'T', 'E', 
    'R', 'V', 'E', 'N', 'T', 'I', 'O', 'N', '\020', '\010', '\022', '4', '\n', '0', 'A', 'P', 'A', '_', 'Q', 'U', 'I', 'T', '_', 'I', 'N', 
    'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 'Q', 'U', 'I', 'T', '_', 'E', 'X', 'T', 'E', 'R', 'N', 'A', 
    'L', '_', 'E', 'C', 'U', '_', 'A', 'C', 'T', 'V', 'I', 'E', '\020', '\t', '\022', '$', '\n', ' ', 'A', 'P', 'A', '_', 'Q', 'U', 'I', 
    'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 'Q', 'U', 'I', 'T', '_', 'A', 'C', 'C', 
    '\020', '\n', '\022', '+', '\n', '\'', 'A', 'P', 'A', '_', 'Q', 'U', 'I', 'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', 
    '_', 'R', 'E', 'Q', '_', 'Q', 'U', 'I', 'T', '_', 'T', 'R', 'A', 'J', 'E', 'C', 'T', 'O', 'R', 'Y', '\020', '\013', '\022', ',', '\n', 
    '(', 'A', 'P', 'A', '_', 'Q', 'U', 'I', 'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 
    'Q', 'U', 'I', 'T', '_', 'S', 'P', 'A', 'C', 'E', '_', 'L', 'I', 'M', 'I', 'T', '\020', '\014', '\022', '3', '\n', '/', 'A', 'P', 'A', 
    '_', 'Q', 'U', 'I', 'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 'Q', 'U', 'I', 'T', 
    '_', 'N', 'O', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'F', 'R', 'O', 'N', 'T', '\020', '\r', '\022', '3', '\n', '/', 
    'A', 'P', 'A', '_', 'Q', 'U', 'I', 'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 'Q', 
    'U', 'I', 'T', '_', 'S', 'E', 'A', 'T', '_', 'B', 'E', 'L', 'T', '_', 'U', 'N', 'B', 'U', 'C', 'K', 'L', 'E', '\020', '\016', '\022', 
    ',', '\n', '(', 'A', 'P', 'A', '_', 'Q', 'U', 'I', 'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 
    'Q', '_', 'Q', 'U', 'I', 'T', '_', 'D', 'R', 'I', 'V', 'E', 'R', '_', 'D', 'O', 'O', 'R', '\020', '\017', '\022', '*', '\n', '&', 'A', 
    'P', 'A', '_', 'Q', 'U', 'I', 'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 'Q', 'U', 
    'I', 'T', '_', 'E', 'P', 'B', '_', 'A', 'P', 'P', 'L', 'Y', '\020', '\020', '\022', '.', '\n', '*', 'A', 'P', 'A', '_', 'Q', 'U', 'I', 
    'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 'Q', 'U', 'I', 'T', '_', 'V', 'E', 'H', 
    'I', 'C', 'L', 'E', '_', 'B', 'L', 'O', 'C', 'K', '\020', '\021', '\022', '/', '\n', '+', 'A', 'P', 'A', '_', 'Q', 'U', 'I', 'T', '_', 
    'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 'Q', 'U', 'I', 'T', '_', 'G', 'E', 'A', 'R', '_', 
    'I', 'N', 'T', 'E', 'R', 'R', 'U', 'P', 'T', '\020', '\022', '\022', '8', '\n', '4', 'A', 'P', 'A', '_', 'Q', 'U', 'I', 'T', '_', 'I', 
    'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 'Q', 'U', 'I', 'T', '_', 'S', 'T', 'E', 'E', 'R', 'I', 
    'N', 'G', '_', 'W', 'H', 'E', 'E', 'L', '_', 'H', 'A', 'N', 'D', 'S', '_', 'O', 'N', '\020', '\023', '\022', '1', '\n', '-', 'A', 'P', 
    'A', '_', 'Q', 'U', 'I', 'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 'Q', 'U', 'I', 
    'T', '_', 'A', 'B', 'O', 'V', 'E', '_', 'S', 'L', 'O', 'P', 'E', '_', 'L', 'I', 'M', 'T', '\020', '\024', '\022', ' ', '\n', '\034', 'A', 
    'P', 'A', '_', 'Q', 'U', 'I', 'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'S', 'E', 'R', 'V', 
    'E', 'D', '\020', '\025', '\"', '\202', '\003', '\n', '\036', 'A', 'p', 'a', '_', 'r', 'e', 'c', 'o', 'v', 'e', 'r', '_', 'i', 'n', 't', '_', 
    'i', 'n', 'd', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', ')', '\n', '%', 'A', 'P', 'A', '_', 'R', 'E', 'C', 
    'O', 'V', 'E', 'R', '_', 'I', 'N', 'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'N', 'O', '_', 'R', 'E', 
    'Q', 'U', 'E', 'S', 'T', '\020', '\000', '\022', 'B', '\n', '>', 'A', 'P', 'A', '_', 'R', 'E', 'C', 'O', 'V', 'E', 'R', '_', 'I', 'N', 
    'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 'R', 'E', 'C', 'O', 'V', 'E', 'R', '_', 
    'D', 'E', 'A', 'D', '_', 'M', 'A', 'N', '_', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', '\020', '\001', 
    '\022', 'G', '\n', 'C', 'A', 'P', 'A', '_', 'R', 'E', 'C', 'O', 'V', 'E', 'R', '_', 'I', 'N', 'T', '_', 'I', 'N', 'D', 'I', 'C', 
    'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 'R', 'E', 'C', 'O', 'V', 'E', 'R', '_', 'F', 'O', 'U', 'N', 'D', '_', 'O', 
    'B', 'S', 'T', 'A', 'C', 'L', 'E', '_', 'I', 'N', '_', 'T', 'R', 'A', 'J', 'E', 'C', 'T', 'O', 'R', 'Y', '\020', '\002', '\022', '?', 
    '\n', ';', 'A', 'P', 'A', '_', 'R', 'E', 'C', 'O', 'V', 'E', 'R', '_', 'I', 'N', 'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 
    'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 'R', 'E', 'C', 'O', 'V', 'E', 'R', '_', 'N', 'O', 'N', '_', 'D', 'R', 'I', 'V', 'E', 
    'R', '_', 'D', 'O', 'O', 'R', '_', 'O', 'P', 'E', 'N', '\020', '\003', '\022', '>', '\n', ':', 'A', 'P', 'A', '_', 'R', 'E', 'C', 'O', 
    'V', 'E', 'R', '_', 'I', 'N', 'T', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'Q', '_', 'R', 'E', 
    'C', 'O', 'V', 'E', 'R', '_', 'B', 'R', 'A', 'K', 'E', '_', 'P', 'E', 'D', 'A', 'L', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', 
    '\020', '\004', '\022', '\'', '\n', '#', 'A', 'P', 'A', '_', 'R', 'E', 'C', 'O', 'V', 'E', 'R', '_', 'I', 'N', 'T', '_', 'I', 'N', 'D', 
    'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\005', '\"', '\277', '\001', '\n', '\030', 'S', 'd', 
    'g', '_', 'o', 'b', 'j', 'e', 'c', 't', 's', 't', 's', 'f', 'l', 's', '_', 'r', 'l', 's', 'T', 'y', 'p', 'e', '\022', '\"', '\n', 
    '\036', 'S', 'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'L', 'S', '_', 'R', 'L', 'S', '_', 'N', 'O', '_', 
    'O', 'B', 'J', 'E', 'C', 'T', '\020', '\000', '\022', ')', '\n', '%', 'S', 'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 
    'F', 'L', 'S', '_', 'R', 'L', 'S', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '_', '1', '\020', 
    '\001', '\022', ')', '\n', '%', 'S', 'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'L', 'S', '_', 'R', 'L', 'S', 
    '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '_', '2', '\020', '\002', '\022', ')', '\n', '%', 'S', 'D', 
    'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'L', 'S', '_', 'R', 'L', 'S', '_', 'O', 'B', 'J', 'E', 'C', 'T', 
    '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '_', '3', '\020', '\003', '\"', '\256', '\001', '\n', '\022', 'A', 'p', 'a', '_', 'i', 'n', 'd', 'i', 
    'c', 'a', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'A', 'P', 'A', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 
    'I', 'O', 'N', '_', 'N', 'O', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\036', '\n', '\032', 'A', 'P', 'A', '_', 'I', 'N', 
    'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'P', 'P', 'S', 'C', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\022', '\036', '\n', 
    '\032', 'A', 'P', 'A', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'C', 'P', 'S', 'C', '_', 'A', 'C', 'T', 'I', 
    'V', 'E', '\020', '\002', '\022', '\035', '\n', '\031', 'A', 'P', 'A', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', '_', 'P', 'O', 
    'C', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\003', '\022', '\033', '\n', '\027', 'A', 'P', 'A', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 
    'I', 'O', 'N', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\004', '\"', '\253', '\001', '\n', '\024', 'S', 'd', 'g', '_', 'o', 'b', 
    'j', 'e', 'c', 't', 's', 't', 's', 'f', 'l', 's', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'S', 'D', 'G', '_', 'O', 'B', 'J', 
    'E', 'C', 'T', 'S', 'T', 'S', 'F', 'L', 'S', '_', 'N', 'O', '_', 'O', 'B', 'J', 'E', 'C', 'T', '\020', '\000', '\022', '%', '\n', '!', 
    'S', 'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'L', 'S', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 
    'N', '_', 'Z', 'O', 'N', 'E', '_', '1', '\020', '\001', '\022', '%', '\n', '!', 'S', 'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 
    'T', 'S', 'F', 'L', 'S', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '_', '2', '\020', '\002', '\022', 
    '%', '\n', '!', 'S', 'D', 'G', '_', 'O', 'B', 'J', 'E', 'C', 'T', 'S', 'T', 'S', 'F', 'L', 'S', '_', 'O', 'B', 'J', 'E', 'C', 
    'T', '_', 'I', 'N', '_', 'Z', 'O', 'N', 'E', '_', '3', '\020', '\003', '\"', '\321', '\001', '\n', '\r', 'M', 'r', 'r', '_', '0', 'x', '2', 
    '3', '8', '_', '2', '3', '8', '\022', '\037', '\n', '\027', 'a', 'c', 'c', '_', 't', 'g', 't', 'a', 'x', 'l', 'o', 'w', 'e', 'r', 'c', 
    'o', 'm', 'f', 't', 'b', 'a', 'n', 'd', '\030', '\001', ' ', '\001', '(', '\001', '\022', '\031', '\n', '\021', 'a', 'c', 'c', '_', 't', 'g', 't', 
    'a', 'x', 'u', 'p', 'p', 'e', 'r', 'l', 'i', 'm', '\030', '\002', ' ', '\001', '(', '\001', '\022', '\031', '\n', '\021', 'a', 'c', 'c', '_', 't', 
    'g', 't', 'a', 'x', 'l', 'o', 'w', 'e', 'r', 'l', 'i', 'm', '\030', '\003', ' ', '\001', '(', '\001', '\022', '\021', '\n', '\t', 'a', 'c', 'c', 
    '_', 't', 'g', 't', 'a', 'x', '\030', '\004', ' ', '\001', '(', '\001', '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 
    'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', '2', '3', '8', '\030', '\005', ' ', '\001', '(', '\005', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 
    'c', 'k', 's', 'u', 'm', '_', '0', 'x', '2', '3', '8', '\030', '\006', ' ', '\001', '(', '\005', '\022', '\037', '\n', '\027', 'a', 'c', 'c', '_', 
    't', 'g', 't', 'a', 'x', 'u', 'p', 'p', 'e', 'r', 'c', 'o', 'm', 'f', 't', 'b', 'a', 'n', 'd', '\030', '\007', ' ', '\001', '(', '\001', 
    '\"', '\277', '\021', '\n', '\r', 'M', 'r', 'r', '_', '0', 'x', '2', '3', '9', '_', '2', '3', '9', '\022', 'W', '\n', '\025', 'a', 'c', 'c', 
    '_', 'u', 'p', 'p', 'e', 'r', 'c', 'o', 'm', 'f', 't', 'b', 'a', 'n', 'd', 'r', 'e', 'q', '\030', '\001', ' ', '\001', '(', '\016', '2', 
    '8', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', 
    '3', '9', '_', '2', '3', '9', '.', 'A', 'c', 'c', '_', 'u', 'p', 'p', 'e', 'r', 'c', 'o', 'm', 'f', 't', 'b', 'a', 'n', 'd', 
    'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', 'Q', '\n', '\022', 'a', 'c', 'c', '_', 'b', 'r', 'a', 'k', 'e', 'p', 'r', 'e', 'f', 'e', 
    'r', 'r', 'e', 'd', '\030', '\002', ' ', '\001', '(', '\016', '2', '5', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '3', '9', '_', '2', '3', '9', '.', 'A', 'c', 'c', '_', 'b', 'r', 'a', 
    'k', 'e', 'p', 'r', 'e', 'f', 'e', 'r', 'r', 'e', 'd', 'T', 'y', 'p', 'e', '\022', ';', '\n', '\007', 'e', 'b', 'a', '_', 'r', 'e', 
    'q', '\030', '\003', ' ', '\001', '(', '\016', '2', '*', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'M', 'r', 'r', '_', '0', 'x', '2', '3', '9', '_', '2', '3', '9', '.', 'E', 'b', 'a', '_', 'r', 'e', 'q', 'T', 'y', 'p', 
    'e', '\022', ';', '\n', '\007', 'a', 'e', 'b', '_', 'r', 'e', 'q', '\030', '\004', ' ', '\001', '(', '\016', '2', '*', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '3', '9', '_', '2', '3', '9', 
    '.', 'A', 'e', 'b', '_', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', 'O', '\n', '\021', 'a', 'c', 'c', '_', 's', 't', 'a', 'n', 'd', 
    's', 't', 'i', 'l', 'l', 'r', 'e', 'q', '\030', '\005', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '3', '9', '_', '2', '3', '9', '.', 'A', 'c', 'c', 
    '_', 's', 't', 'a', 'n', 'd', 's', 't', 'i', 'l', 'l', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', 'E', '\n', '\014', 'a', 'c', 'c', 
    '_', 'd', 'r', 'i', 'v', 'e', 'o', 'f', 'f', '\030', '\006', ' ', '\001', '(', '\016', '2', '/', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '3', '9', '_', '2', '3', '9', '.', 'A', 'c', 
    'c', '_', 'd', 'r', 'i', 'v', 'e', 'o', 'f', 'f', 'T', 'y', 'p', 'e', '\022', '?', '\n', '\t', 'a', 'w', 'b', '_', 'l', 'e', 'v', 
    'e', 'l', '\030', '\007', ' ', '\001', '(', '\016', '2', ',', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 
    's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '3', '9', '_', '2', '3', '9', '.', 'A', 'w', 'b', '_', 'l', 'e', 'v', 'e', 'l', 
    'T', 'y', 'p', 'e', '\022', ';', '\n', '\007', 'a', 'b', 'p', '_', 'r', 'e', 'q', '\030', '\010', ' ', '\001', '(', '\016', '2', '*', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '3', '9', '_', 
    '2', '3', '9', '.', 'A', 'b', 'p', '_', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', ';', '\n', '\007', 'a', 'w', 'b', '_', 'r', 'e', 
    'q', '\030', '\t', ' ', '\001', '(', '\016', '2', '*', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'M', 'r', 'r', '_', '0', 'x', '2', '3', '9', '_', '2', '3', '9', '.', 'A', 'w', 'b', '_', 'r', 'e', 'q', 'T', 'y', 'p', 
    'e', '\022', ';', '\n', '\007', 'a', 'b', 'a', '_', 'r', 'e', 'q', '\030', '\n', ' ', '\001', '(', '\016', '2', '*', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '3', '9', '_', '2', '3', '9', 
    '.', 'A', 'b', 'a', '_', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '\021', '\n', '\t', 'a', 'e', 'b', '_', 't', 'g', 't', 'a', 'x', 
    '\030', '\013', ' ', '\001', '(', '\001', '\022', '?', '\n', '\t', 'a', 'c', 'c', '_', 's', 't', 'a', 't', 'e', '\030', '\014', ' ', '\001', '(', '\016', 
    '2', ',', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', 
    '2', '3', '9', '_', '2', '3', '9', '.', 'A', 'c', 'c', '_', 's', 't', 'a', 't', 'e', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\025', 
    'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', '2', '3', '9', '\030', '\r', ' ', '\001', 
    '(', '\005', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '2', '3', '9', '\030', '\016', ' ', '\001', '(', 
    '\005', '\022', 'E', '\n', '\014', 's', 'h', 'u', 't', 'd', 'o', 'w', 'n', 'm', 'o', 'd', 'e', '\030', '\017', ' ', '\001', '(', '\016', '2', '/', 
    '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '3', 
    '9', '_', '2', '3', '9', '.', 'S', 'h', 'u', 't', 'd', 'o', 'w', 'n', 'm', 'o', 'd', 'e', 'T', 'y', 'p', 'e', '\022', '?', '\n', 
    '\t', 'a', 'b', 'a', '_', 'l', 'e', 'v', 'e', 'l', '\030', '\020', ' ', '\001', '(', '\016', '2', ',', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '3', '9', '_', '2', '3', '9', '.', 'A', 
    'b', 'a', '_', 'l', 'e', 'v', 'e', 'l', 'T', 'y', 'p', 'e', '\"', 'b', '\n', '\031', 'A', 'c', 'c', '_', 'u', 'p', 'p', 'e', 'r', 
    'c', 'o', 'm', 'f', 't', 'b', 'a', 'n', 'd', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '#', '\n', '\037', 'A', 'C', 'C', '_', 'U', 
    'P', 'P', 'E', 'R', 'C', 'O', 'M', 'F', 'T', 'B', 'A', 'N', 'D', 'R', 'E', 'Q', '_', 'N', 'O', '_', 'D', 'E', 'M', 'A', 'N', 
    'D', '\020', '\000', '\022', ' ', '\n', '\034', 'A', 'C', 'C', '_', 'U', 'P', 'P', 'E', 'R', 'C', 'O', 'M', 'F', 'T', 'B', 'A', 'N', 'D', 
    'R', 'E', 'Q', '_', 'D', 'E', 'M', 'A', 'N', 'D', '\020', '\001', '\"', 'Y', '\n', '\026', 'A', 'c', 'c', '_', 'b', 'r', 'a', 'k', 'e', 
    'p', 'r', 'e', 'f', 'e', 'r', 'r', 'e', 'd', 'T', 'y', 'p', 'e', '\022', ' ', '\n', '\034', 'A', 'C', 'C', '_', 'B', 'R', 'A', 'K', 
    'E', 'P', 'R', 'E', 'F', 'E', 'R', 'R', 'E', 'D', '_', 'N', 'O', '_', 'D', 'E', 'M', 'A', 'N', 'D', '\020', '\000', '\022', '\035', '\n', 
    '\031', 'A', 'C', 'C', '_', 'B', 'R', 'A', 'K', 'E', 'P', 'R', 'E', 'F', 'E', 'R', 'R', 'E', 'D', '_', 'D', 'E', 'M', 'A', 'N', 
    'D', '\020', '\001', '\"', '8', '\n', '\013', 'E', 'b', 'a', '_', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '\025', '\n', '\021', 'E', 'B', 'A', 
    '_', 'R', 'E', 'Q', '_', 'N', 'O', '_', 'D', 'E', 'M', 'A', 'N', 'D', '\020', '\000', '\022', '\022', '\n', '\016', 'E', 'B', 'A', '_', 'R', 
    'E', 'Q', '_', 'D', 'E', 'M', 'A', 'N', 'D', '\020', '\001', '\"', '8', '\n', '\013', 'A', 'e', 'b', '_', 'r', 'e', 'q', 'T', 'y', 'p', 
    'e', '\022', '\025', '\n', '\021', 'A', 'E', 'B', '_', 'R', 'E', 'Q', '_', 'N', 'O', '_', 'D', 'E', 'M', 'A', 'N', 'D', '\020', '\000', '\022', 
    '\022', '\n', '\016', 'A', 'E', 'B', '_', 'R', 'E', 'Q', '_', 'D', 'E', 'M', 'A', 'N', 'D', '\020', '\001', '\"', 'V', '\n', '\025', 'A', 'c', 
    'c', '_', 's', 't', 'a', 'n', 'd', 's', 't', 'i', 'l', 'l', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '\037', '\n', '\033', 'A', 'C', 
    'C', '_', 'S', 'T', 'A', 'N', 'D', 'S', 'T', 'I', 'L', 'L', 'R', 'E', 'Q', '_', 'N', 'O', '_', 'D', 'E', 'M', 'A', 'N', 'D', 
    '\020', '\000', '\022', '\034', '\n', '\030', 'A', 'C', 'C', '_', 'S', 'T', 'A', 'N', 'D', 'S', 'T', 'I', 'L', 'L', 'R', 'E', 'Q', '_', 'D', 
    'E', 'M', 'A', 'N', 'D', '\020', '\001', '\"', 'G', '\n', '\020', 'A', 'c', 'c', '_', 'd', 'r', 'i', 'v', 'e', 'o', 'f', 'f', 'T', 'y', 
    'p', 'e', '\022', '\032', '\n', '\026', 'A', 'C', 'C', '_', 'D', 'R', 'I', 'V', 'E', 'O', 'F', 'F', '_', 'N', 'O', '_', 'D', 'E', 'M', 
    'A', 'N', 'D', '\020', '\000', '\022', '\027', '\n', '\023', 'A', 'C', 'C', '_', 'D', 'R', 'I', 'V', 'E', 'O', 'F', 'F', '_', 'D', 'E', 'M', 
    'A', 'N', 'D', '\020', '\001', '\"', '\203', '\001', '\n', '\r', 'A', 'w', 'b', '_', 'l', 'e', 'v', 'e', 'l', 'T', 'y', 'p', 'e', '\022', '\026', 
    '\n', '\022', 'A', 'W', 'B', '_', 'L', 'E', 'V', 'E', 'L', '_', 'N', 'O', '_', 'L', 'E', 'V', 'E', 'L', '\020', '\000', '\022', '\025', '\n', 
    '\021', 'A', 'W', 'B', '_', 'L', 'E', 'V', 'E', 'L', '_', 'L', 'E', 'V', 'E', 'L', '_', '1', '\020', '\001', '\022', '\025', '\n', '\021', 'A', 
    'W', 'B', '_', 'L', 'E', 'V', 'E', 'L', '_', 'L', 'E', 'V', 'E', 'L', '_', '2', '\020', '\002', '\022', '\025', '\n', '\021', 'A', 'W', 'B', 
    '_', 'L', 'E', 'V', 'E', 'L', '_', 'L', 'E', 'V', 'E', 'L', '_', '3', '\020', '\003', '\022', '\025', '\n', '\021', 'A', 'W', 'B', '_', 'L', 
    'E', 'V', 'E', 'L', '_', 'L', 'E', 'V', 'E', 'L', '_', '4', '\020', '\004', '\"', '8', '\n', '\013', 'A', 'b', 'p', '_', 'r', 'e', 'q', 
    'T', 'y', 'p', 'e', '\022', '\025', '\n', '\021', 'A', 'B', 'P', '_', 'R', 'E', 'Q', '_', 'N', 'O', '_', 'D', 'E', 'M', 'A', 'N', 'D', 
    '\020', '\000', '\022', '\022', '\n', '\016', 'A', 'B', 'P', '_', 'R', 'E', 'Q', '_', 'D', 'E', 'M', 'A', 'N', 'D', '\020', '\001', '\"', '8', '\n', 
    '\013', 'A', 'w', 'b', '_', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '\025', '\n', '\021', 'A', 'W', 'B', '_', 'R', 'E', 'Q', '_', 'N', 
    'O', '_', 'D', 'E', 'M', 'A', 'N', 'D', '\020', '\000', '\022', '\022', '\n', '\016', 'A', 'W', 'B', '_', 'R', 'E', 'Q', '_', 'D', 'E', 'M', 
    'A', 'N', 'D', '\020', '\001', '\"', '8', '\n', '\013', 'A', 'b', 'a', '_', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '\025', '\n', '\021', 'A', 
    'B', 'A', '_', 'R', 'E', 'Q', '_', 'N', 'O', '_', 'D', 'E', 'M', 'A', 'N', 'D', '\020', '\000', '\022', '\022', '\n', '\016', 'A', 'B', 'A', 
    '_', 'R', 'E', 'Q', '_', 'D', 'E', 'M', 'A', 'N', 'D', '\020', '\001', '\"', '\360', '\001', '\n', '\r', 'A', 'c', 'c', '_', 's', 't', 'a', 
    't', 'e', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\022', 'A', 'C', 'C', '_', 'S', 'T', 'A', 'T', 'E', '_', 'O', 'F', 'F', '_', 'M', 
    'O', 'D', 'E', '\020', '\000', '\022', '\032', '\n', '\026', 'A', 'C', 'C', '_', 'S', 'T', 'A', 'T', 'E', '_', 'P', 'A', 'S', 'S', 'I', 'V', 
    'E', '_', 'M', 'O', 'D', 'E', '\020', '\001', '\022', '\033', '\n', '\027', 'A', 'C', 'C', '_', 'S', 'T', 'A', 'T', 'E', '_', 'S', 'T', 'A', 
    'N', 'D', '_', 'B', 'Y', '_', 'M', 'O', 'D', 'E', '\020', '\002', '\022', '!', '\n', '\035', 'A', 'C', 'C', '_', 'S', 'T', 'A', 'T', 'E', 
    '_', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'C', 'O', 'N', 'T', 'R', 'O', 'L', '_', 'M', 'O', 'D', 'E', '\020', '\003', '\022', '\035', '\n', 
    '\031', 'A', 'C', 'C', '_', 'S', 'T', 'A', 'T', 'E', '_', 'B', 'R', 'A', 'K', 'E', '_', 'O', 'N', 'L', 'Y', '_', 'M', 'O', 'D', 
    'E', '\020', '\004', '\022', '\026', '\n', '\022', 'A', 'C', 'C', '_', 'S', 'T', 'A', 'T', 'E', '_', 'O', 'V', 'E', 'R', 'R', 'I', 'D', 'E', 
    '\020', '\005', '\022', '\030', '\n', '\024', 'A', 'C', 'C', '_', 'S', 'T', 'A', 'T', 'E', '_', 'S', 'T', 'A', 'N', 'D', 'S', 'T', 'I', 'L', 
    'L', '\020', '\006', '\022', '\032', '\n', '\026', 'A', 'C', 'C', '_', 'S', 'T', 'A', 'T', 'E', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', '_', 
    'M', 'O', 'D', 'E', '\020', '\007', '\"', '}', '\n', '\020', 'S', 'h', 'u', 't', 'd', 'o', 'w', 'n', 'm', 'o', 'd', 'e', 'T', 'y', 'p', 
    'e', '\022', '\031', '\n', '\025', 'S', 'H', 'U', 'T', 'D', 'O', 'W', 'N', 'M', 'O', 'D', 'E', '_', 'S', 'O', 'F', 'T', '_', 'O', 'F', 
    'F', '\020', '\000', '\022', '\031', '\n', '\025', 'S', 'H', 'U', 'T', 'D', 'O', 'W', 'N', 'M', 'O', 'D', 'E', '_', 'F', 'A', 'S', 'T', '_', 
    'O', 'F', 'F', '\020', '\001', '\022', '\031', '\n', '\025', 'S', 'H', 'U', 'T', 'D', 'O', 'W', 'N', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'S', 
    'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\030', '\n', '\024', 'S', 'H', 'U', 'T', 'D', 'O', 'W', 'N', 'M', 'O', 'D', 'E', '_', 'I', 
    'N', 'I', 'T', 'I', 'A', 'L', '\020', '\003', '\"', 'k', '\n', '\r', 'A', 'b', 'a', '_', 'l', 'e', 'v', 'e', 'l', 'T', 'y', 'p', 'e', 
    '\022', '\025', '\n', '\021', 'A', 'B', 'A', '_', 'L', 'E', 'V', 'E', 'L', '_', 'L', 'E', 'V', 'E', 'L', '_', '0', '\020', '\000', '\022', '\025', 
    '\n', '\021', 'A', 'B', 'A', '_', 'L', 'E', 'V', 'E', 'L', '_', 'L', 'E', 'V', 'E', 'L', '_', '1', '\020', '\001', '\022', '\025', '\n', '\021', 
    'A', 'B', 'A', '_', 'L', 'E', 'V', 'E', 'L', '_', 'L', 'E', 'V', 'E', 'L', '_', '2', '\020', '\002', '\022', '\025', '\n', '\021', 'A', 'B', 
    'A', '_', 'L', 'E', 'V', 'E', 'L', '_', 'L', 'E', 'V', 'E', 'L', '_', '3', '\020', '\003', '\"', '\262', '\026', '\n', '\027', 'E', 's', 'p', 
    '_', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '_', '0', 'x', '2', '3', '5', '_', '2', '3', '5', '\022', '\031', '\n', '\021', 'e', 
    's', 'p', '_', 'w', 'h', 'l', 'm', 'i', 'l', 'g', 'r', 'e', 'a', 'r', 'r', 'e', '\030', '\001', ' ', '\001', '(', '\005', '\022', 'i', '\n', 
    '\031', 'e', 's', 'p', '_', 'f', 'r', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 's', 't', 'a', 't', 'u', 
    's', '\030', '\002', ' ', '\001', '(', '\016', '2', 'F', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'E', 's', 'p', '_', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '_', '0', 'x', '2', '3', '5', '_', '2', '3', '5', '.', 
    'E', 's', 'p', '_', 'f', 'r', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 's', 't', 'a', 't', 'u', 's', 
    'T', 'y', 'p', 'e', '\022', 'i', '\n', '\031', 'e', 's', 'p', '_', 'f', 'l', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 
    'i', 'r', 's', 't', 'a', 't', 'u', 's', '\030', '\003', ' ', '\001', '(', '\016', '2', 'F', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '_', '0', 'x', '2', 
    '3', '5', '_', '2', '3', '5', '.', 'E', 's', 'p', '_', 'f', 'l', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 
    'r', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', 'i', '\n', '\031', 'e', 's', 'p', '_', 'r', 'r', 'w', 'h', 'e', 'e', 
    'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 's', 't', 'a', 't', 'u', 's', '\030', '\004', ' ', '\001', '(', '\016', '2', 'F', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'd', 'i', 'r', 'e', 'c', 't', 
    'i', 'o', 'n', '_', '0', 'x', '2', '3', '5', '_', '2', '3', '5', '.', 'E', 's', 'p', '_', 'r', 'r', 'w', 'h', 'e', 'e', 'l', 
    'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', 'i', '\n', '\031', 'e', 's', 'p', 
    '_', 'r', 'l', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 's', 't', 'a', 't', 'u', 's', '\030', '\005', ' ', 
    '\001', '(', '\016', '2', 'F', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', 
    '_', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '_', '0', 'x', '2', '3', '5', '_', '2', '3', '5', '.', 'E', 's', 'p', '_', 
    'r', 'l', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', 
    '\022', 'i', '\n', '\031', 'e', 's', 'p', '_', 'r', 'r', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 'e', 'c', 
    't', 'i', 'o', 'n', '\030', '\006', ' ', '\001', '(', '\016', '2', 'F', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'E', 's', 'p', '_', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '_', '0', 'x', '2', '3', '5', '_', '2', 
    '3', '5', '.', 'E', 's', 'p', '_', 'r', 'r', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 'e', 'c', 't', 
    'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', 'i', '\n', '\031', 'e', 's', 'p', '_', 'r', 'l', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 
    'v', 'e', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '\030', '\007', ' ', '\001', '(', '\016', '2', 'F', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '_', 
    '0', 'x', '2', '3', '5', '_', '2', '3', '5', '.', 'E', 's', 'p', '_', 'r', 'l', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 
    'e', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', 'i', '\n', '\031', 'e', 's', 'p', '_', 'f', 'r', 'w', 
    'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '\030', '\010', ' ', '\001', '(', '\016', '2', 
    'F', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'd', 'i', 'r', 
    'e', 'c', 't', 'i', 'o', 'n', '_', '0', 'x', '2', '3', '5', '_', '2', '3', '5', '.', 'E', 's', 'p', '_', 'f', 'r', 'w', 'h', 
    'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', 'i', '\n', '\031', 
    'e', 's', 'p', '_', 'f', 'l', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 
    '\030', '\t', ' ', '\001', '(', '\016', '2', 'F', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 
    'E', 's', 'p', '_', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '_', '0', 'x', '2', '3', '5', '_', '2', '3', '5', '.', 'E', 
    's', 'p', '_', 'f', 'l', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'T', 
    'y', 'p', 'e', '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', 
    '2', '3', '5', '\030', '\n', ' ', '\001', '(', '\005', '\022', 'e', '\n', '\027', 'e', 's', 'p', '_', 'w', 'h', 'l', 'm', 'i', 'l', 'g', 'r', 
    'e', 'a', 'r', 'l', 'e', 's', 't', 'a', 't', 'u', 's', '\030', '\013', ' ', '\001', '(', '\016', '2', 'D', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '_', 
    '0', 'x', '2', '3', '5', '_', '2', '3', '5', '.', 'E', 's', 'p', '_', 'w', 'h', 'l', 'm', 'i', 'l', 'g', 'r', 'e', 'a', 'r', 
    'l', 'e', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', 'e', '\n', '\027', 'e', 's', 'p', '_', 'w', 'h', 'l', 'm', 'i', 
    'l', 'g', 'r', 'e', 'a', 'r', 'r', 'i', 's', 't', 'a', 't', 'u', 's', '\030', '\014', ' ', '\001', '(', '\016', '2', 'D', '.', 'j', 'm', 
    'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'd', 'i', 'r', 'e', 'c', 't', 'i', 
    'o', 'n', '_', '0', 'x', '2', '3', '5', '_', '2', '3', '5', '.', 'E', 's', 'p', '_', 'w', 'h', 'l', 'm', 'i', 'l', 'g', 'r', 
    'e', 'a', 'r', 'r', 'i', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', 'a', '\n', '\025', 'e', 's', 'p', '_', 'v', 'e', 
    'h', 'i', 'c', 'l', 'e', 's', 't', 'a', 'n', 'd', 's', 't', 'i', 'l', 'l', '\030', '\r', ' ', '\001', '(', '\016', '2', 'B', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'd', 'i', 'r', 'e', 'c', 't', 
    'i', 'o', 'n', '_', '0', 'x', '2', '3', '5', '_', '2', '3', '5', '.', 'E', 's', 'p', '_', 'v', 'e', 'h', 'i', 'c', 'l', 'e', 
    's', 't', 'a', 'n', 'd', 's', 't', 'i', 'l', 'l', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 
    'm', '_', '0', 'x', '2', '3', '5', '\030', '\016', ' ', '\001', '(', '\005', '\022', '\031', '\n', '\021', 'e', 's', 'p', '_', 'w', 'h', 'l', 'm', 
    'i', 'l', 'g', 'r', 'e', 'a', 'r', 'l', 'e', '\030', '\017', ' ', '\001', '(', '\005', '\"', 'k', '\n', '\035', 'E', 's', 'p', '_', 'f', 'r', 
    'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '#', 
    '\n', '\037', 'E', 'S', 'P', '_', 'F', 'R', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 'S', 'T', 'A', 'T', 
    'U', 'S', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '%', '\n', '!', 'E', 'S', 'P', '_', 'F', 'R', 'W', 'H', 'E', 'E', 'L', 
    'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', 
    'k', '\n', '\035', 'E', 's', 'p', '_', 'f', 'l', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 's', 't', 'a', 
    't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '#', '\n', '\037', 'E', 'S', 'P', '_', 'F', 'L', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 
    'V', 'E', 'D', 'I', 'R', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '%', '\n', '!', 'E', 'S', 
    'P', '_', 'F', 'L', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'I', 
    'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', 'k', '\n', '\035', 'E', 's', 'p', '_', 'r', 'r', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 
    'i', 'v', 'e', 'd', 'i', 'r', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '#', '\n', '\037', 'E', 'S', 'P', '_', 'R', 
    'R', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'V', 'A', 'L', 'I', 
    'D', '\020', '\000', '\022', '%', '\n', '!', 'E', 'S', 'P', '_', 'R', 'R', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 'E', 'D', 'I', 
    'R', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', 'k', '\n', '\035', 'E', 's', 'p', '_', 
    'r', 'l', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', 
    '\022', '#', '\n', '\037', 'E', 'S', 'P', '_', 'R', 'L', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 'S', 'T', 
    'A', 'T', 'U', 'S', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '%', '\n', '!', 'E', 'S', 'P', '_', 'R', 'L', 'W', 'H', 'E', 
    'E', 'L', 'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', 
    '\001', '\"', '\301', '\001', '\n', '\035', 'E', 's', 'p', '_', 'r', 'r', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 
    'e', 'c', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', '\'', '\n', '#', 'E', 'S', 'P', '_', 'R', 'R', 'W', 'H', 'E', 'E', 'L', 
    'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'U', 'N', 'D', 'E', 'F', 'I', 'N', 'E', 'D', '\020', 
    '\000', '\022', '(', '\n', '$', 'E', 'S', 'P', '_', 'R', 'R', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 'E', 
    'C', 'T', 'I', 'O', 'N', '_', 'S', 'T', 'A', 'N', 'D', 'S', 'T', 'I', 'L', 'L', '\020', '\001', '\022', '%', '\n', '!', 'E', 'S', 'P', 
    '_', 'R', 'R', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'F', 'O', 
    'R', 'W', 'A', 'R', 'D', '\020', '\002', '\022', '&', '\n', '\"', 'E', 'S', 'P', '_', 'R', 'R', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 
    'V', 'E', 'D', 'I', 'R', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'B', 'A', 'C', 'K', 'W', 'A', 'R', 'D', '\020', '\003', '\"', '\301', '\001', 
    '\n', '\035', 'E', 's', 'p', '_', 'r', 'l', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 'e', 'c', 't', 'i', 
    'o', 'n', 'T', 'y', 'p', 'e', '\022', '\'', '\n', '#', 'E', 'S', 'P', '_', 'R', 'L', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 
    'E', 'D', 'I', 'R', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'U', 'N', 'D', 'E', 'F', 'I', 'N', 'E', 'D', '\020', '\000', '\022', '(', '\n', 
    '$', 'E', 'S', 'P', '_', 'R', 'L', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 'E', 'C', 'T', 'I', 'O', 
    'N', '_', 'S', 'T', 'A', 'N', 'D', 'S', 'T', 'I', 'L', 'L', '\020', '\001', '\022', '%', '\n', '!', 'E', 'S', 'P', '_', 'R', 'L', 'W', 
    'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'F', 'O', 'R', 'W', 'A', 'R', 
    'D', '\020', '\002', '\022', '&', '\n', '\"', 'E', 'S', 'P', '_', 'R', 'L', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 'E', 'D', 'I', 
    'R', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'B', 'A', 'C', 'K', 'W', 'A', 'R', 'D', '\020', '\003', '\"', '\301', '\001', '\n', '\035', 'E', 's', 
    'p', '_', 'f', 'r', 'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'T', 'y', 
    'p', 'e', '\022', '\'', '\n', '#', 'E', 'S', 'P', '_', 'F', 'R', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 
    'E', 'C', 'T', 'I', 'O', 'N', '_', 'U', 'N', 'D', 'E', 'F', 'I', 'N', 'E', 'D', '\020', '\000', '\022', '(', '\n', '$', 'E', 'S', 'P', 
    '_', 'F', 'R', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'S', 'T', 
    'A', 'N', 'D', 'S', 'T', 'I', 'L', 'L', '\020', '\001', '\022', '%', '\n', '!', 'E', 'S', 'P', '_', 'F', 'R', 'W', 'H', 'E', 'E', 'L', 
    'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'F', 'O', 'R', 'W', 'A', 'R', 'D', '\020', '\002', '\022', 
    '&', '\n', '\"', 'E', 'S', 'P', '_', 'F', 'R', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 'E', 'C', 'T', 
    'I', 'O', 'N', '_', 'B', 'A', 'C', 'K', 'W', 'A', 'R', 'D', '\020', '\003', '\"', '\301', '\001', '\n', '\035', 'E', 's', 'p', '_', 'f', 'l', 
    'w', 'h', 'e', 'e', 'l', 'd', 'r', 'i', 'v', 'e', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', '\'', 
    '\n', '#', 'E', 'S', 'P', '_', 'F', 'L', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 'E', 'C', 'T', 'I', 
    'O', 'N', '_', 'U', 'N', 'D', 'E', 'F', 'I', 'N', 'E', 'D', '\020', '\000', '\022', '(', '\n', '$', 'E', 'S', 'P', '_', 'F', 'L', 'W', 
    'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'S', 'T', 'A', 'N', 'D', 'S', 
    'T', 'I', 'L', 'L', '\020', '\001', '\022', '%', '\n', '!', 'E', 'S', 'P', '_', 'F', 'L', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 
    'E', 'D', 'I', 'R', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'F', 'O', 'R', 'W', 'A', 'R', 'D', '\020', '\002', '\022', '&', '\n', '\"', 'E', 
    'S', 'P', '_', 'F', 'L', 'W', 'H', 'E', 'E', 'L', 'D', 'R', 'I', 'V', 'E', 'D', 'I', 'R', 'E', 'C', 'T', 'I', 'O', 'N', '_', 
    'B', 'A', 'C', 'K', 'W', 'A', 'R', 'D', '\020', '\003', '\"', 'e', '\n', '\033', 'E', 's', 'p', '_', 'w', 'h', 'l', 'm', 'i', 'l', 'g', 
    'r', 'e', 'a', 'r', 'l', 'e', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'E', 'S', 'P', '_', 'W', 
    'H', 'L', 'M', 'I', 'L', 'G', 'R', 'E', 'A', 'R', 'L', 'E', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'V', 'A', 'L', 'I', 'D', '\020', 
    '\000', '\022', '#', '\n', '\037', 'E', 'S', 'P', '_', 'W', 'H', 'L', 'M', 'I', 'L', 'G', 'R', 'E', 'A', 'R', 'L', 'E', 'S', 'T', 'A', 
    'T', 'U', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', 'e', '\n', '\033', 'E', 's', 'p', '_', 'w', 'h', 'l', 'm', 
    'i', 'l', 'g', 'r', 'e', 'a', 'r', 'r', 'i', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'E', 'S', 
    'P', '_', 'W', 'H', 'L', 'M', 'I', 'L', 'G', 'R', 'E', 'A', 'R', 'R', 'I', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'V', 'A', 'L', 
    'I', 'D', '\020', '\000', '\022', '#', '\n', '\037', 'E', 'S', 'P', '_', 'W', 'H', 'L', 'M', 'I', 'L', 'G', 'R', 'E', 'A', 'R', 'R', 'I', 
    'S', 'T', 'A', 'T', 'U', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', '\216', '\001', '\n', '\031', 'E', 's', 'p', '_', 
    'v', 'e', 'h', 'i', 'c', 'l', 'e', 's', 't', 'a', 'n', 'd', 's', 't', 'i', 'l', 'l', 'T', 'y', 'p', 'e', '\022', '(', '\n', '$', 
    'E', 'S', 'P', '_', 'V', 'E', 'H', 'I', 'C', 'L', 'E', 'S', 'T', 'A', 'N', 'D', 'S', 'T', 'I', 'L', 'L', '_', 'N', 'O', 'T', 
    '_', 'S', 'T', 'A', 'N', 'D', 'S', 'T', 'I', 'L', 'L', '\020', '\000', '\022', '$', '\n', ' ', 'E', 'S', 'P', '_', 'V', 'E', 'H', 'I', 
    'C', 'L', 'E', 'S', 'T', 'A', 'N', 'D', 'S', 'T', 'I', 'L', 'L', '_', 'S', 'T', 'A', 'N', 'D', 'S', 'T', 'I', 'L', 'L', '\020', 
    '\001', '\022', '!', '\n', '\035', 'E', 'S', 'P', '_', 'V', 'E', 'H', 'I', 'C', 'L', 'E', 'S', 'T', 'A', 'N', 'D', 'S', 'T', 'I', 'L', 
    'L', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\002', '\"', '\366', '\032', '\n', '\026', 'E', 's', 'p', '_', 'a', 'd', 'v', 'a', 'n', 
    'c', 'e', 'd', '_', '0', 'x', '2', '3', '4', '_', '2', '3', '4', '\022', 'P', '\n', '\r', 'e', 's', 'p', '_', 'v', 'd', 'c', 'a', 
    'c', 't', 'i', 'v', 'e', '\030', '\001', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '2', '3', '4', '_', '2', 
    '3', '4', '.', 'E', 's', 'p', '_', 'v', 'd', 'c', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', 'P', '\n', '\r', 'e', 
    's', 'p', '_', 'e', 'b', 'd', 'a', 'c', 't', 'i', 'v', 'e', '\030', '\002', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', 
    '0', 'x', '2', '3', '4', '_', '2', '3', '4', '.', 'E', 's', 'p', '_', 'e', 'b', 'd', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 
    'p', 'e', '\022', 'R', '\n', '\016', 'e', 's', 'p', '_', 'e', 'c', 'd', 't', 'e', 'm', 'p', 'o', 'f', 'f', '\030', '\003', ' ', '\001', '(', 
    '\016', '2', ':', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 
    'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '2', '3', '4', '_', '2', '3', '4', '.', 'E', 's', 'p', '_', 'e', 'c', 'd', 
    't', 'e', 'm', 'p', 'o', 'f', 'f', 'T', 'y', 'p', 'e', '\022', 'V', '\n', '\020', 'e', 's', 'p', '_', 'n', 'o', 'b', 'r', 'a', 'k', 
    'e', 'f', 'o', 'r', 'c', 'e', '\030', '\004', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '2', '3', '4', '_', 
    '2', '3', '4', '.', 'E', 's', 'p', '_', 'n', 'o', 'b', 'r', 'a', 'k', 'e', 'f', 'o', 'r', 'c', 'e', 'T', 'y', 'p', 'e', '\022', 
    'j', '\n', '\032', 'e', 's', 'p', '_', 'b', 'r', 'k', 'f', 'r', 'i', 'c', 't', 'q', 't', 'o', 't', 'a', 't', 'w', 'h', 'l', 'v', 
    'a', 'i', 'l', 'd', '\030', '\005', ' ', '\001', '(', '\016', '2', 'F', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '2', '3', '4', '_', '2', '3', 
    '4', '.', 'E', 's', 'p', '_', 'b', 'r', 'k', 'f', 'r', 'i', 'c', 't', 'q', 't', 'o', 't', 'a', 't', 'w', 'h', 'l', 'v', 'a', 
    'i', 'l', 'd', 'T', 'y', 'p', 'e', '\022', '\\', '\n', '\023', 'e', 's', 'p', '_', 'a', 'e', 'b', 'd', 'e', 'c', 'a', 'v', 'a', 'i', 
    'l', 'a', 'b', 'l', 'e', '\030', '\006', ' ', '\001', '(', '\016', '2', '?', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '2', '3', '4', '_', '2', 
    '3', '4', '.', 'E', 's', 'p', '_', 'a', 'e', 'b', 'd', 'e', 'c', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 
    'e', '\022', 'V', '\n', '\020', 'e', 's', 'p', '_', 'a', 'e', 'b', 'd', 'e', 'c', 'a', 'c', 't', 'i', 'v', 'e', '\030', '\007', ' ', '\001', 
    '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 
    'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '2', '3', '4', '_', '2', '3', '4', '.', 'E', 's', 'p', '_', 'a', 'e', 
    'b', 'd', 'e', 'c', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '^', '\n', '\024', 'e', 's', 'p', '_', 'p', 'r', 'e', 
    'f', 'i', 'l', 'l', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', '\030', '\010', ' ', '\001', '(', '\016', '2', '@', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', 
    '_', '0', 'x', '2', '3', '4', '_', '2', '3', '4', '.', 'E', 's', 'p', '_', 'p', 'r', 'e', 'f', 'i', 'l', 'l', 'a', 'v', 'a', 
    'i', 'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', 'X', '\n', '\021', 'e', 's', 'p', '_', 'p', 'r', 'e', 'f', 'i', 'l', 'l', 
    'a', 'c', 't', 'i', 'v', 'e', '\030', '\t', ' ', '\001', '(', '\016', '2', '=', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '2', '3', '4', '_', 
    '2', '3', '4', '.', 'E', 's', 'p', '_', 'p', 'r', 'e', 'f', 'i', 'l', 'l', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', 
    '\022', 'V', '\n', '\020', 'e', 's', 'p', '_', 'a', 'b', 'a', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', '\030', '\n', ' ', '\001', '(', 
    '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 
    'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '2', '3', '4', '_', '2', '3', '4', '.', 'E', 's', 'p', '_', 'a', 'b', 'a', 
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', 'P', '\n', '\r', 'e', 's', 'p', '_', 'a', 'b', 'a', 'a', 
    'c', 't', 'i', 'v', 'e', '\030', '\013', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '2', '3', '4', '_', '2', 
    '3', '4', '.', 'E', 's', 'p', '_', 'a', 'b', 'a', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', 'V', '\n', '\020', 'e', 
    's', 'p', '_', 'c', 'd', 'd', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', '\030', '\014', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 'd', 'v', 'a', 'n', 'c', 
    'e', 'd', '_', '0', 'x', '2', '3', '4', '_', '2', '3', '4', '.', 'E', 's', 'p', '_', 'c', 'd', 'd', 'a', 'v', 'a', 'i', 'l', 
    'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', 'P', '\n', '\r', 'e', 's', 'p', '_', 'd', 't', 'c', 'a', 'c', 't', 'i', 'v', 'e', 
    '\030', '\r', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 
    'E', 's', 'p', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '2', '3', '4', '_', '2', '3', '4', '.', 'E', 's', 
    'p', '_', 'd', 't', 'c', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', 'V', '\n', '\020', 'e', 's', 'p', '_', 'a', 'w', 
    'b', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', '\030', '\016', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', 
    '2', '3', '4', '_', '2', '3', '4', '.', 'E', 's', 'p', '_', 'a', 'w', 'b', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 
    'y', 'p', 'e', '\022', 'P', '\n', '\r', 'e', 's', 'p', '_', 'a', 'w', 'b', 'a', 'c', 't', 'i', 'v', 'e', '\030', '\017', ' ', '\001', '(', 
    '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 
    'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '2', '3', '4', '_', '2', '3', '4', '.', 'E', 's', 'p', '_', 'a', 'w', 'b', 
    'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\025', 'e', 's', 'p', '_', 'b', 'r', 'k', 'f', 'r', 'i', 'c', 
    't', 'q', 't', 'o', 't', 'a', 't', 'w', 'h', 'l', '\030', '\020', ' ', '\001', '(', '\005', '\022', 'N', '\n', '\014', 'e', 's', 'p', '_', 'v', 
    'l', 'c', 'e', 'r', 'r', 'o', 'r', '\030', '\021', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '2', '3', '4', 
    '_', '2', '3', '4', '.', 'E', 's', 'p', '_', 'v', 'l', 'c', 'e', 'r', 'r', 'o', 'r', 'T', 'y', 'p', 'e', '\022', 'N', '\n', '\014', 
    'e', 's', 'p', '_', 'c', 'd', 'd', 'e', 'r', 'r', 'o', 'r', '\030', '\022', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', 
    '0', 'x', '2', '3', '4', '_', '2', '3', '4', '.', 'E', 's', 'p', '_', 'c', 'd', 'd', 'e', 'r', 'r', 'o', 'r', 'T', 'y', 'p', 
    'e', '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', '2', '3', 
    '4', '\030', '\023', ' ', '\001', '(', '\005', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '2', '3', '4', 
    '\030', '\024', ' ', '\001', '(', '\005', '\022', 'P', '\n', '\r', 'e', 's', 'p', '_', 'c', 'd', 'd', 'a', 'c', 't', 'i', 'v', 'e', '\030', '\025', 
    ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 
    'p', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '2', '3', '4', '_', '2', '3', '4', '.', 'E', 's', 'p', '_', 
    'c', 'd', 'd', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', 'V', '\n', '\020', 'e', 's', 'p', '_', 'c', 'd', 'd', '_', 
    'a', 'p', 'a', 'c', 't', 'i', 'v', 'e', '\030', '\026', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '2', '3', 
    '4', '_', '2', '3', '4', '.', 'E', 's', 'p', '_', 'c', 'd', 'd', '_', 'a', 'p', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 
    'e', '\"', 'K', '\n', '\021', 'E', 's', 'p', '_', 'v', 'd', 'c', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '\034', '\n', 
    '\030', 'E', 'S', 'P', '_', 'V', 'D', 'C', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'E', 
    '\020', '\000', '\022', '\030', '\n', '\024', 'E', 'S', 'P', '_', 'V', 'D', 'C', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'A', 'C', 'T', 'I', 'V', 
    'E', '\020', '\001', '\"', 'K', '\n', '\021', 'E', 's', 'p', '_', 'e', 'b', 'd', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', 
    '\034', '\n', '\030', 'E', 'S', 'P', '_', 'E', 'B', 'D', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 'I', 
    'V', 'E', '\020', '\000', '\022', '\030', '\n', '\024', 'E', 'S', 'P', '_', 'E', 'B', 'D', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'A', 'C', 'T', 
    'I', 'V', 'E', '\020', '\001', '\"', 'S', '\n', '\022', 'E', 's', 'p', '_', 'e', 'c', 'd', 't', 'e', 'm', 'p', 'o', 'f', 'f', 'T', 'y', 
    'p', 'e', '\022', '\033', '\n', '\027', 'E', 'S', 'P', '_', 'E', 'C', 'D', 'T', 'E', 'M', 'P', 'O', 'F', 'F', '_', 'N', 'O', 'T', '_', 
    'H', 'I', 'G', 'H', '\020', '\000', '\022', ' ', '\n', '\034', 'E', 'S', 'P', '_', 'E', 'C', 'D', 'T', 'E', 'M', 'P', 'O', 'F', 'F', '_', 
    'T', 'E', 'M', 'P', '_', 'T', 'O', 'O', '_', 'H', 'I', 'G', 'H', '\020', '\001', '\"', '_', '\n', '\024', 'E', 's', 'p', '_', 'n', 'o', 
    'b', 'r', 'a', 'k', 'e', 'f', 'o', 'r', 'c', 'e', 'T', 'y', 'p', 'e', '\022', '$', '\n', ' ', 'E', 'S', 'P', '_', 'N', 'O', 'B', 
    'R', 'A', 'K', 'E', 'F', 'O', 'R', 'C', 'E', '_', 'E', 'X', 'I', 'S', 'T', '_', 'B', 'R', 'K', '_', 'F', 'O', 'R', 'C', 'E', 
    '\020', '\000', '\022', '!', '\n', '\035', 'E', 'S', 'P', '_', 'N', 'O', 'B', 'R', 'A', 'K', 'E', 'F', 'O', 'R', 'C', 'E', '_', 'N', 'O', 
    '_', 'B', 'R', 'K', '_', 'F', 'O', 'R', 'C', 'E', '\020', '\001', '\"', 'n', '\n', '\036', 'E', 's', 'p', '_', 'b', 'r', 'k', 'f', 'r', 
    'i', 'c', 't', 'q', 't', 'o', 't', 'a', 't', 'w', 'h', 'l', 'v', 'a', 'i', 'l', 'd', 'T', 'y', 'p', 'e', '\022', '$', '\n', ' ', 
    'E', 'S', 'P', '_', 'B', 'R', 'K', 'F', 'R', 'I', 'C', 'T', 'Q', 'T', 'O', 'T', 'A', 'T', 'W', 'H', 'L', 'V', 'A', 'I', 'L', 
    'D', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '&', '\n', '\"', 'E', 'S', 'P', '_', 'B', 'R', 'K', 'F', 'R', 'I', 'C', 'T', 
    'Q', 'T', 'O', 'T', 'A', 'T', 'W', 'H', 'L', 'V', 'A', 'I', 'L', 'D', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', 
    'c', '\n', '\027', 'E', 's', 'p', '_', 'a', 'e', 'b', 'd', 'e', 'c', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 
    'e', '\022', '%', '\n', '!', 'E', 'S', 'P', '_', 'A', 'E', 'B', 'D', 'E', 'C', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 
    'N', 'O', 'T', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', '\000', '\022', '!', '\n', '\035', 'E', 'S', 'P', '_', 'A', 'E', 
    'B', 'D', 'E', 'C', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', '\001', 
    '\"', 'Z', '\n', '\024', 'E', 's', 'p', '_', 'a', 'e', 'b', 'd', 'e', 'c', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', 
    '\"', '\n', '\036', 'E', 'S', 'P', '_', 'A', 'E', 'B', 'D', 'E', 'C', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'N', 'O', 'T', '_', 'A', 
    'C', 'T', 'I', 'V', 'A', 'T', 'E', 'D', '\020', '\000', '\022', '\036', '\n', '\032', 'E', 'S', 'P', '_', 'A', 'E', 'B', 'D', 'E', 'C', 'A', 
    'C', 'T', 'I', 'V', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'E', 'D', '\020', '\001', '\"', 'f', '\n', '\030', 'E', 's', 'p', '_', 
    'p', 'r', 'e', 'f', 'i', 'l', 'l', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', '&', '\n', '\"', 'E', 
    'S', 'P', '_', 'P', 'R', 'E', 'F', 'I', 'L', 'L', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'N', 'O', 'T', '_', 'A', 
    'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', '\000', '\022', '\"', '\n', '\036', 'E', 'S', 'P', '_', 'P', 'R', 'E', 'F', 'I', 'L', 'L', 
    'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', '\001', '\"', ']', '\n', '\025', 
    'E', 's', 'p', '_', 'p', 'r', 'e', 'f', 'i', 'l', 'l', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '#', '\n', '\037', 
    'E', 'S', 'P', '_', 'P', 'R', 'E', 'F', 'I', 'L', 'L', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 
    'I', 'V', 'A', 'T', 'E', 'D', '\020', '\000', '\022', '\037', '\n', '\033', 'E', 'S', 'P', '_', 'P', 'R', 'E', 'F', 'I', 'L', 'L', 'A', 'C', 
    'T', 'I', 'V', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'E', 'D', '\020', '\001', '\"', 'Z', '\n', '\024', 'E', 's', 'p', '_', 'a', 
    'b', 'a', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', '\"', '\n', '\036', 'E', 'S', 'P', '_', 'A', 'B', 
    'A', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'N', 'O', 'T', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', 
    '\000', '\022', '\036', '\n', '\032', 'E', 'S', 'P', '_', 'A', 'B', 'A', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'A', 'V', 'A', 
    'I', 'L', 'A', 'B', 'L', 'E', '\020', '\001', '\"', 'Q', '\n', '\021', 'E', 's', 'p', '_', 'a', 'b', 'a', 'a', 'c', 't', 'i', 'v', 'e', 
    'T', 'y', 'p', 'e', '\022', '\037', '\n', '\033', 'E', 'S', 'P', '_', 'A', 'B', 'A', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'N', 'O', 'T', 
    '_', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'E', 'D', '\020', '\000', '\022', '\033', '\n', '\027', 'E', 'S', 'P', '_', 'A', 'B', 'A', 'A', 'C', 
    'T', 'I', 'V', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'E', 'D', '\020', '\001', '\"', 'Z', '\n', '\024', 'E', 's', 'p', '_', 'c', 
    'd', 'd', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', '\"', '\n', '\036', 'E', 'S', 'P', '_', 'C', 'D', 
    'D', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'N', 'O', 'T', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', 
    '\000', '\022', '\036', '\n', '\032', 'E', 'S', 'P', '_', 'C', 'D', 'D', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'A', 'V', 'A', 
    'I', 'L', 'A', 'B', 'L', 'E', '\020', '\001', '\"', 'Q', '\n', '\021', 'E', 's', 'p', '_', 'd', 't', 'c', 'a', 'c', 't', 'i', 'v', 'e', 
    'T', 'y', 'p', 'e', '\022', '\037', '\n', '\033', 'E', 'S', 'P', '_', 'D', 'T', 'C', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'N', 'O', 'T', 
    '_', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'E', 'D', '\020', '\000', '\022', '\033', '\n', '\027', 'E', 'S', 'P', '_', 'D', 'T', 'C', 'A', 'C', 
    'T', 'I', 'V', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'E', 'D', '\020', '\001', '\"', 'Z', '\n', '\024', 'E', 's', 'p', '_', 'a', 
    'w', 'b', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', '\"', '\n', '\036', 'E', 'S', 'P', '_', 'A', 'W', 
    'B', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'N', 'O', 'T', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', 
    '\000', '\022', '\036', '\n', '\032', 'E', 'S', 'P', '_', 'A', 'W', 'B', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'A', 'V', 'A', 
    'I', 'L', 'A', 'B', 'L', 'E', '\020', '\001', '\"', 'Q', '\n', '\021', 'E', 's', 'p', '_', 'a', 'w', 'b', 'a', 'c', 't', 'i', 'v', 'e', 
    'T', 'y', 'p', 'e', '\022', '\037', '\n', '\033', 'E', 'S', 'P', '_', 'A', 'W', 'B', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'N', 'O', 'T', 
    '_', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'E', 'D', '\020', '\000', '\022', '\033', '\n', '\027', 'E', 'S', 'P', '_', 'A', 'W', 'B', 'A', 'C', 
    'T', 'I', 'V', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'E', 'D', '\020', '\001', '\"', 'F', '\n', '\020', 'E', 's', 'p', '_', 'v', 
    'l', 'c', 'e', 'r', 'r', 'o', 'r', 'T', 'y', 'p', 'e', '\022', '\032', '\n', '\026', 'E', 'S', 'P', '_', 'V', 'L', 'C', 'E', 'R', 'R', 
    'O', 'R', '_', 'N', 'O', 'T', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\000', '\022', '\026', '\n', '\022', 'E', 'S', 'P', '_', 'V', 'L', 'C', 
    'E', 'R', 'R', 'O', 'R', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\001', '\"', 'F', '\n', '\020', 'E', 's', 'p', '_', 'c', 'd', 'd', 'e', 
    'r', 'r', 'o', 'r', 'T', 'y', 'p', 'e', '\022', '\032', '\n', '\026', 'E', 'S', 'P', '_', 'C', 'D', 'D', 'E', 'R', 'R', 'O', 'R', '_', 
    'N', 'O', 'T', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\000', '\022', '\026', '\n', '\022', 'E', 'S', 'P', '_', 'C', 'D', 'D', 'E', 'R', 'R', 
    'O', 'R', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\001', '\"', 'Q', '\n', '\021', 'E', 's', 'p', '_', 'c', 'd', 'd', 'a', 'c', 't', 'i', 
    'v', 'e', 'T', 'y', 'p', 'e', '\022', '\037', '\n', '\033', 'E', 'S', 'P', '_', 'C', 'D', 'D', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'N', 
    'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'E', 'D', '\020', '\000', '\022', '\033', '\n', '\027', 'E', 'S', 'P', '_', 'C', 'D', 'D', 
    'A', 'C', 'T', 'I', 'V', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'E', 'D', '\020', '\001', '\"', 'Z', '\n', '\024', 'E', 's', 'p', 
    '_', 'c', 'd', 'd', '_', 'a', 'p', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '\"', '\n', '\036', 'E', 'S', 'P', '_', 
    'C', 'D', 'D', '_', 'A', 'P', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'E', 
    'D', '\020', '\000', '\022', '\036', '\n', '\032', 'E', 'S', 'P', '_', 'C', 'D', 'D', '_', 'A', 'P', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'A', 
    'C', 'T', 'I', 'V', 'A', 'T', 'E', 'D', '\020', '\001', '\"', '\370', '\017', '\n', '\026', 'E', 'p', 's', '_', 'a', 'd', 'v', 'a', 'n', 'c', 
    'e', 'd', '_', '0', 'x', '1', '7', '6', '_', '1', '7', '6', '\022', '\035', '\n', '\025', 'e', 'p', 's', '_', 'l', 'k', 'a', 'r', 'e', 
    's', 'p', 'o', 'n', 's', 'e', 't', 'o', 'r', 'q', 'u', 'e', '\030', '\001', ' ', '\001', '(', '\001', '\022', 'f', '\n', '\030', 'e', 'p', 's', 
    '_', 't', 'o', 's', 'i', 'o', 'n', 'b', 'a', 'r', 't', 'o', 'r', 'q', 'u', 'e', 'v', 'a', 'l', 'i', 'd', '\030', '\002', ' ', '\001', 
    '(', '\016', '2', 'D', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 'p', 's', '_', 
    'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '1', '7', '6', '_', '1', '7', '6', '.', 'E', 'p', 's', '_', 't', 'o', 
    's', 'i', 'o', 'n', 'b', 'a', 'r', 't', 'o', 'r', 'q', 'u', 'e', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', 'j', '\n', 
    '\032', 'e', 'p', 's', '_', 'l', 'k', 'a', 'r', 'e', 's', 'p', 'o', 'n', 's', 'e', 't', 'o', 'r', 'q', 'u', 'e', 'v', 'a', 'l', 
    'i', 'd', '\030', '\003', ' ', '\001', '(', '\016', '2', 'F', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 
    's', '.', 'E', 'p', 's', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '1', '7', '6', '_', '1', '7', '6', '.', 
    'E', 'p', 's', '_', 'l', 'k', 'a', 'r', 'e', 's', 'p', 'o', 'n', 's', 'e', 't', 'o', 'r', 'q', 'u', 'e', 'v', 'a', 'l', 'i', 
    'd', 'T', 'y', 'p', 'e', '\022', '^', '\n', '\024', 'e', 'p', 's', '_', 'l', 'd', 'w', 'c', 'o', 'n', 't', 'r', 'o', 'l', 's', 't', 
    'a', 't', 'u', 's', '\030', '\004', ' ', '\001', '(', '\016', '2', '@', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'E', 'p', 's', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '1', '7', '6', '_', '1', '7', 
    '6', '.', 'E', 'p', 's', '_', 'l', 'd', 'w', 'c', 'o', 'n', 't', 'r', 'o', 'l', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 
    'e', '\022', 'n', '\n', '\034', 'e', 'p', 's', '_', 'p', 'a', 'm', '_', 's', 't', 'e', 'e', 'r', 'i', 'n', 'g', 's', 't', 's', '_', 
    'r', 'e', 's', 'e', 'r', 'v', 'e', 'd', '\030', '\005', ' ', '\001', '(', '\016', '2', 'H', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 'p', 's', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '1', '7', 
    '6', '_', '1', '7', '6', '.', 'E', 'p', 's', '_', 'p', 'a', 'm', '_', 's', 't', 'e', 'e', 'r', 'i', 'n', 'g', 's', 't', 's', 
    '_', 'r', 'e', 's', 'e', 'r', 'v', 'e', 'd', 'T', 'y', 'p', 'e', '\022', '^', '\n', '\024', 'e', 'p', 's', '_', 'l', 'k', 'a', 'c', 
    'o', 'n', 't', 'r', 'o', 'l', 's', 't', 'a', 't', 'u', 's', '\030', '\006', ' ', '\001', '(', '\016', '2', '@', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 'p', 's', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', 
    '0', 'x', '1', '7', '6', '_', '1', '7', '6', '.', 'E', 'p', 's', '_', 'l', 'k', 'a', 'c', 'o', 'n', 't', 'r', 'o', 'l', 's', 
    't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\025', '\n', '\r', 'e', 'p', 's', '_', 'e', 'p', 's', 'p', 'a', 'm', 'i', 'n', 
    'h', '\030', '\007', ' ', '\001', '(', '\005', '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 'e', 
    'r', '_', '0', 'x', '1', '7', '6', '\030', '\010', ' ', '\001', '(', '\005', '\022', 'P', '\n', '\r', 'e', 'p', 's', '_', 'e', 'p', 's', 'p', 
    'a', 'm', 's', 't', 's', '\030', '\t', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'E', 'p', 's', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '1', '7', '6', '_', '1', 
    '7', '6', '.', 'E', 'p', 's', '_', 'e', 'p', 's', 'p', 'a', 'm', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\016', 'c', 
    'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '1', '7', '6', '\030', '\n', ' ', '\001', '(', '\005', '\022', '\034', '\n', '\024', 'e', 'p', 
    's', '_', 't', 'o', 'r', 's', 'i', 'o', 'n', 'b', 'a', 'r', 't', 'o', 'r', 'q', 'u', 'e', '\030', '\013', ' ', '\001', '(', '\001', '\"', 
    'h', '\n', '\034', 'E', 'p', 's', '_', 't', 'o', 's', 'i', 'o', 'n', 'b', 'a', 'r', 't', 'o', 'r', 'q', 'u', 'e', 'v', 'a', 'l', 
    'i', 'd', 'T', 'y', 'p', 'e', '\022', '\"', '\n', '\036', 'E', 'P', 'S', '_', 'T', 'O', 'S', 'I', 'O', 'N', 'B', 'A', 'R', 'T', 'O', 
    'R', 'Q', 'U', 'E', 'V', 'A', 'L', 'I', 'D', '_', 'V', 'A', 'I', 'L', 'D', '\020', '\000', '\022', '$', '\n', ' ', 'E', 'P', 'S', '_', 
    'T', 'O', 'S', 'I', 'O', 'N', 'B', 'A', 'R', 'T', 'O', 'R', 'Q', 'U', 'E', 'V', 'A', 'L', 'I', 'D', '_', 'I', 'N', 'V', 'A', 
    'L', 'I', 'D', '\020', '\001', '\"', 'n', '\n', '\036', 'E', 'p', 's', '_', 'l', 'k', 'a', 'r', 'e', 's', 'p', 'o', 'n', 's', 'e', 't', 
    'o', 'r', 'q', 'u', 'e', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', '$', '\n', ' ', 'E', 'P', 'S', '_', 'L', 'K', 'A', 
    'R', 'E', 'S', 'P', 'O', 'N', 'S', 'E', 'T', 'O', 'R', 'Q', 'U', 'E', 'V', 'A', 'L', 'I', 'D', '_', 'V', 'A', 'I', 'L', 'D', 
    '\020', '\000', '\022', '&', '\n', '\"', 'E', 'P', 'S', '_', 'L', 'K', 'A', 'R', 'E', 'S', 'P', 'O', 'N', 'S', 'E', 'T', 'O', 'R', 'Q', 
    'U', 'E', 'V', 'A', 'L', 'I', 'D', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', '\247', '\001', '\n', '\030', 'E', 'p', 's', 
    '_', 'l', 'd', 'w', 'c', 'o', 'n', 't', 'r', 'o', 'l', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '$', '\n', ' ', 
    'E', 'P', 'S', '_', 'L', 'D', 'W', 'C', 'O', 'N', 'T', 'R', 'O', 'L', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'D', 'E', 'A', 'C', 
    'T', 'I', 'V', 'A', 'T', 'E', 'D', '\020', '\000', '\022', '!', '\n', '\035', 'E', 'P', 'S', '_', 'L', 'D', 'W', 'C', 'O', 'N', 'T', 'R', 
    'O', 'L', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'I', 'N', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\022', '\037', '\n', '\033', 'E', 'P', 
    'S', '_', 'L', 'D', 'W', 'C', 'O', 'N', 'T', 'R', 'O', 'L', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'A', 'C', 'T', 'I', 'V', 'E', 
    '\020', '\002', '\022', '!', '\n', '\035', 'E', 'P', 'S', '_', 'L', 'D', 'W', 'C', 'O', 'N', 'T', 'R', 'O', 'L', 'S', 'T', 'A', 'T', 'U', 
    'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\235', '\001', '\n', ' ', 'E', 'p', 's', '_', 'p', 'a', 'm', '_', 
    's', 't', 'e', 'e', 'r', 'i', 'n', 'g', 's', 't', 's', '_', 'r', 'e', 's', 'e', 'r', 'v', 'e', 'd', 'T', 'y', 'p', 'e', '\022', 
    '8', '\n', '4', 'E', 'P', 'S', '_', 'P', 'A', 'M', '_', 'S', 'T', 'E', 'E', 'R', 'I', 'N', 'G', 'S', 'T', 'S', '_', 'R', 'E', 
    'S', 'E', 'R', 'V', 'E', 'D', '_', 'S', 'T', 'E', 'E', 'R', 'I', 'N', 'G', '_', 'P', 'O', 'S', 'I', 'T', 'I', 'O', 'N', '_', 
    'I', 'S', '_', 'O', 'K', '\020', '\000', '\022', '?', '\n', ';', 'E', 'P', 'S', '_', 'P', 'A', 'M', '_', 'S', 'T', 'E', 'E', 'R', 'I', 
    'N', 'G', 'S', 'T', 'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '_', 'S', 'T', 'E', 'E', 'R', 'I', 'N', 'G', '_', 'P', 
    'O', 'S', 'I', 'T', 'I', 'O', 'N', '_', 'I', 'S', '_', 'A', 'D', 'J', 'U', 'S', 'T', 'I', 'N', 'G', '\020', '\001', '\"', '\353', '\001', 
    '\n', '\030', 'E', 'p', 's', '_', 'l', 'k', 'a', 'c', 'o', 'n', 't', 'r', 'o', 'l', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 
    'e', '\022', '#', '\n', '\037', 'E', 'P', 'S', '_', 'L', 'K', 'A', 'C', 'O', 'N', 'T', 'R', 'O', 'L', 'S', 'T', 'A', 'T', 'U', 'S', 
    '_', 'N', 'O', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\000', '\022', '(', '\n', '$', 'E', 'P', 'S', '_', 'L', 'K', 'A', 'C', 
    'O', 'N', 'T', 'R', 'O', 'L', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '_', 'H', 'O', 'N', 'O', 
    'R', 'E', 'D', '\020', '\001', '\022', '@', '\n', '<', 'E', 'P', 'S', '_', 'L', 'K', 'A', 'C', 'O', 'N', 'T', 'R', 'O', 'L', 'S', 'T', 
    'A', 'T', 'U', 'S', '_', 'C', 'O', 'N', 'T', 'R', 'O', 'L', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '_', 'N', 'O', 'T', '_', 
    'A', 'L', 'L', 'O', 'W', 'E', 'D', '_', 'T', 'E', 'M', 'P', 'O', 'R', 'A', 'R', 'I', 'L', 'Y', '\020', '\002', '\022', '>', '\n', ':', 
    'E', 'P', 'S', '_', 'L', 'K', 'A', 'C', 'O', 'N', 'T', 'R', 'O', 'L', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'C', 'O', 'N', 'T', 
    'R', 'O', 'L', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '_', 'N', 'O', 'T', '_', 'A', 'L', 'L', 'O', 'W', 'E', 'D', '_', 'P', 
    'E', 'R', 'M', 'A', 'N', 'E', 'N', 'T', '\020', '\003', '\"', '\353', '\001', '\n', '\021', 'E', 'p', 's', '_', 'e', 'p', 's', 'p', 'a', 'm', 
    'i', 'n', 'h', 'T', 'y', 'p', 'e', '\022', '\"', '\n', '\036', 'E', 'P', 'S', '_', 'E', 'P', 'S', 'P', 'A', 'M', 'I', 'N', 'H', '_', 
    'N', 'O', 'R', 'M', 'A', 'L', '_', 'O', 'P', 'E', 'R', 'A', 'T', 'I', 'O', 'N', '\020', '\000', '\022', '\034', '\n', '\030', 'E', 'P', 'S', 
    '_', 'E', 'P', 'S', 'P', 'A', 'M', 'I', 'N', 'H', '_', 'O', 'V', 'E', 'R', '_', 'S', 'P', 'E', 'E', 'D', '\020', '\001', '\022', '%', 
    '\n', '!', 'E', 'P', 'S', '_', 'E', 'P', 'S', 'P', 'A', 'M', 'I', 'N', 'H', '_', 'D', 'R', 'I', 'V', 'E', 'R', '_', 'I', 'N', 
    'T', 'E', 'R', 'F', 'E', 'R', 'E', 'N', 'C', 'E', '\020', '\002', '\022', '$', '\n', ' ', 'E', 'P', 'S', '_', 'E', 'P', 'S', 'P', 'A', 
    'M', 'I', 'N', 'H', '_', 'A', 'B', 'N', 'O', 'R', 'M', 'A', 'L', '_', 'C', 'A', 'N', '_', 'I', 'N', 'P', 'U', 'T', '\020', '\004', 
    '\022', '(', '\n', '$', 'E', 'P', 'S', '_', 'E', 'P', 'S', 'P', 'A', 'M', 'I', 'N', 'H', '_', 'E', 'X', 'C', 'E', 'S', 'S', '_', 
    'A', 'N', 'G', 'L', 'E', '_', 'D', 'E', 'V', 'I', 'A', 'T', 'I', 'O', 'N', '\020', '\010', '\022', '\035', '\n', '\031', 'E', 'P', 'S', '_', 
    'E', 'P', 'S', 'P', 'A', 'M', 'I', 'N', 'H', '_', 'E', 'P', 'S', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', '\020', '\020', '\"', '\374', 
    '\001', '\n', '\021', 'E', 'p', 's', '_', 'e', 'p', 's', 'p', 'a', 'm', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\031', '\n', '\025', 'E', 
    'P', 'S', '_', 'E', 'P', 'S', 'P', 'A', 'M', 'S', 'T', 'S', '_', 'I', 'N', 'H', 'I', 'B', 'I', 'T', '\020', '\000', '\022', '\033', '\n', 
    '\027', 'E', 'P', 'S', '_', 'E', 'P', 'S', 'P', 'A', 'M', 'S', 'T', 'S', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', 
    '\001', '\022', '\030', '\n', '\024', 'E', 'P', 'S', '_', 'E', 'P', 'S', 'P', 'A', 'M', 'S', 'T', 'S', '_', 'A', 'C', 'T', 'I', 'V', 'E', 
    '\020', '\002', '\022', '\027', '\n', '\023', 'E', 'P', 'S', '_', 'E', 'P', 'S', 'P', 'A', 'M', 'S', 'T', 'S', '_', 'A', 'B', 'O', 'R', 'T', 
    '\020', '\003', '\022', '#', '\n', '\037', 'E', 'P', 'S', '_', 'E', 'P', 'S', 'P', 'A', 'M', 'S', 'T', 'S', '_', 'R', 'E', 'P', 'L', 'Y', 
    '_', 'F', 'O', 'R', '_', 'C', 'O', 'N', 'T', 'R', 'O', 'L', '\020', '\004', '\022', '\035', '\n', '\031', 'E', 'P', 'S', '_', 'E', 'P', 'S', 
    'P', 'A', 'M', 'S', 'T', 'S', '_', 'N', 'R', 'C', 'D', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\005', '\022', '\035', '\n', '\031', 'E', 
    'P', 'S', '_', 'E', 'P', 'S', 'P', 'A', 'M', 'S', 'T', 'S', '_', 'A', 'D', 'A', 'S', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', 
    '\006', '\022', '\031', '\n', '\025', 'E', 'P', 'S', '_', 'E', 'P', 'S', 'P', 'A', 'M', 'S', 'T', 'S', '_', 'F', 'A', 'I', 'L', 'U', 'R', 
    'E', '\020', '\007', '\"', '\366', '\007', '\n', '\026', 'E', 's', 'p', '_', 'w', 'h', 'l', 'p', 'u', 'l', 's', 'e', '_', '0', 'x', '2', '3', 
    '6', '_', '2', '3', '6', '\022', '\031', '\n', '\021', 'e', 's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'p', 'u', 'l', 's', 'e', '_', 'f', 
    'r', '\030', '\001', ' ', '\001', '(', '\005', '\022', '\031', '\n', '\021', 'e', 's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'p', 'u', 'l', 's', 'e', 
    '_', 'r', 'l', '\030', '\002', ' ', '\001', '(', '\005', '\022', '\031', '\n', '\021', 'e', 's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'p', 'u', 'l', 
    's', 'e', '_', 'r', 'r', '\030', '\003', ' ', '\001', '(', '\005', '\022', ' ', '\n', '\030', 'r', 'o', 'l', 'l', 'i', 'n', 'g', 'c', 'o', 'u', 
    'n', 't', 'e', 'r', '_', 'e', 's', 'p', '_', '0', 'x', '2', '3', '6', '\030', '\004', ' ', '\001', '(', '\005', '\022', 'd', '\n', '\027', 'e', 
    's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'p', 'u', 'l', 's', 'e', '_', 'r', 'r', '_', 'v', 'a', 'l', 'i', 'd', '\030', '\005', ' ', 
    '\001', '(', '\016', '2', 'C', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', 
    '_', 'w', 'h', 'l', 'p', 'u', 'l', 's', 'e', '_', '0', 'x', '2', '3', '6', '_', '2', '3', '6', '.', 'E', 's', 'p', '_', 'w', 
    'h', 'e', 'e', 'l', 'p', 'u', 'l', 's', 'e', '_', 'r', 'r', '_', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', 'd', '\n', 
    '\027', 'e', 's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'p', 'u', 'l', 's', 'e', '_', 'r', 'l', '_', 'v', 'a', 'l', 'i', 'd', '\030', 
    '\006', ' ', '\001', '(', '\016', '2', 'C', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 
    's', 'p', '_', 'w', 'h', 'l', 'p', 'u', 'l', 's', 'e', '_', '0', 'x', '2', '3', '6', '_', '2', '3', '6', '.', 'E', 's', 'p', 
    '_', 'w', 'h', 'e', 'e', 'l', 'p', 'u', 'l', 's', 'e', '_', 'r', 'l', '_', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', 
    'd', '\n', '\027', 'e', 's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'p', 'u', 'l', 's', 'e', '_', 'f', 'r', '_', 'v', 'a', 'l', 'i', 
    'd', '\030', '\007', ' ', '\001', '(', '\016', '2', 'C', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'E', 's', 'p', '_', 'w', 'h', 'l', 'p', 'u', 'l', 's', 'e', '_', '0', 'x', '2', '3', '6', '_', '2', '3', '6', '.', 'E', 
    's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'p', 'u', 'l', 's', 'e', '_', 'f', 'r', '_', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 
    'e', '\022', 'd', '\n', '\027', 'e', 's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'p', 'u', 'l', 's', 'e', '_', 'f', 'l', '_', 'v', 'a', 
    'l', 'i', 'd', '\030', '\010', ' ', '\001', '(', '\016', '2', 'C', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'E', 's', 'p', '_', 'w', 'h', 'l', 'p', 'u', 'l', 's', 'e', '_', '0', 'x', '2', '3', '6', '_', '2', '3', '6', 
    '.', 'E', 's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'p', 'u', 'l', 's', 'e', '_', 'f', 'l', '_', 'v', 'a', 'l', 'i', 'd', 'T', 
    'y', 'p', 'e', '\022', '\032', '\n', '\022', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', 'e', 's', 'p', '_', '0', 'x', '2', '3', '6', 
    '\030', '\t', ' ', '\001', '(', '\005', '\022', '\031', '\n', '\021', 'e', 's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'p', 'u', 'l', 's', 'e', '_', 
    'f', 'l', '\030', '\n', ' ', '\001', '(', '\005', '\"', 'e', '\n', '\033', 'E', 's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'p', 'u', 'l', 's', 
    'e', '_', 'r', 'r', '_', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'E', 'S', 'P', '_', 'W', 'H', 'E', 
    'E', 'L', 'P', 'U', 'L', 'S', 'E', '_', 'R', 'R', '_', 'V', 'A', 'L', 'I', 'D', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', 
    '#', '\n', '\037', 'E', 'S', 'P', '_', 'W', 'H', 'E', 'E', 'L', 'P', 'U', 'L', 'S', 'E', '_', 'R', 'R', '_', 'V', 'A', 'L', 'I', 
    'D', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', 'e', '\n', '\033', 'E', 's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'p', 
    'u', 'l', 's', 'e', '_', 'r', 'l', '_', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'E', 'S', 'P', '_', 
    'W', 'H', 'E', 'E', 'L', 'P', 'U', 'L', 'S', 'E', '_', 'R', 'L', '_', 'V', 'A', 'L', 'I', 'D', '_', 'V', 'A', 'L', 'I', 'D', 
    '\020', '\000', '\022', '#', '\n', '\037', 'E', 'S', 'P', '_', 'W', 'H', 'E', 'E', 'L', 'P', 'U', 'L', 'S', 'E', '_', 'R', 'L', '_', 'V', 
    'A', 'L', 'I', 'D', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', 'e', '\n', '\033', 'E', 's', 'p', '_', 'w', 'h', 'e', 
    'e', 'l', 'p', 'u', 'l', 's', 'e', '_', 'f', 'r', '_', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'E', 
    'S', 'P', '_', 'W', 'H', 'E', 'E', 'L', 'P', 'U', 'L', 'S', 'E', '_', 'F', 'R', '_', 'V', 'A', 'L', 'I', 'D', '_', 'V', 'A', 
    'L', 'I', 'D', '\020', '\000', '\022', '#', '\n', '\037', 'E', 'S', 'P', '_', 'W', 'H', 'E', 'E', 'L', 'P', 'U', 'L', 'S', 'E', '_', 'F', 
    'R', '_', 'V', 'A', 'L', 'I', 'D', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', 'e', '\n', '\033', 'E', 's', 'p', '_', 
    'w', 'h', 'e', 'e', 'l', 'p', 'u', 'l', 's', 'e', '_', 'f', 'l', '_', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', '!', 
    '\n', '\035', 'E', 'S', 'P', '_', 'W', 'H', 'E', 'E', 'L', 'P', 'U', 'L', 'S', 'E', '_', 'F', 'L', '_', 'V', 'A', 'L', 'I', 'D', 
    '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '#', '\n', '\037', 'E', 'S', 'P', '_', 'W', 'H', 'E', 'E', 'L', 'P', 'U', 'L', 'S', 
    'E', '_', 'F', 'L', '_', 'V', 'A', 'L', 'I', 'D', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', '\267', '\001', '\n', '\027', 
    'I', 'p', 'm', '_', 'r', 'i', 'g', 'h', 't', 'l', 'i', 'n', 'e', '_', '0', 'x', '4', '9', '0', '_', '4', '9', '0', '\022', '\030', 
    '\n', '\020', 'i', 'p', 'm', '_', 'r', 'i', 'g', 'h', 't', 'l', 'i', 'n', 'e', '_', 'd', 'y', '\030', '\001', ' ', '\001', '(', '\001', '\022', 
    '!', '\n', '\031', 'i', 'p', 'm', '_', 'r', 'i', 'g', 'h', 't', 'l', 'i', 'n', 'e', '_', 'd', 'x', '_', 'l', 'o', 'o', 'k', 'h', 
    'e', 'a', 'd', '\030', '\002', ' ', '\001', '(', '\001', '\022', '\037', '\n', '\027', 'i', 'p', 'm', '_', 'r', 'i', 'g', 'h', 't', 'l', 'i', 'n', 
    'e', '_', 'h', 'o', 'r', '_', 'c', 'u', 'r', 'v', 'e', '\030', '\003', ' ', '\001', '(', '\001', '\022', '\036', '\n', '\026', 'i', 'p', 'm', '_', 
    'r', 'i', 'g', 'h', 't', 'l', 'i', 'n', 'e', '_', 'y', 'a', 'w', 'a', 'n', 'g', 'l', 'e', '\030', '\004', ' ', '\001', '(', '\001', '\022', 
    '\036', '\n', '\026', 'i', 'p', 'm', '_', 'r', 'i', 'g', 'h', 't', 'l', 'i', 'n', 'e', '_', 'd', 'x', '_', 's', 't', 'a', 'r', 't', 
    '\030', '\005', ' ', '\001', '(', '\001', '\"', '\343', '\010', '\n', '\024', 'S', 'a', 's', '_', 's', 'e', 'n', 's', 'o', 'r', '_', '0', 'x', '1', 
    '7', '5', '_', '1', '7', '5', '\022', '\037', '\n', '\027', 's', 'a', 's', '_', 'r', 'a', 'w', '_', 's', 't', 'e', 'e', 'r', 'w', 'h', 
    'e', 'e', 'l', 'a', 'n', 'g', 'l', 'e', '\030', '\001', ' ', '\001', '(', '\001', '\022', '\034', '\n', '\024', 's', 'a', 's', '_', 's', 't', 'e', 
    'e', 'r', 'w', 'h', 'e', 'e', 'l', 'r', 'o', 't', 's', 'p', 'd', '\030', '\002', ' ', '\001', '(', '\001', '\022', 'R', '\n', '\017', 's', 'a', 
    's', '_', 't', 'r', 'i', 'm', 'm', 'i', 'n', 'g', 's', 't', 's', '\030', '\003', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'a', 's', '_', 's', 'e', 'n', 's', 'o', 'r', '_', '0', 
    'x', '1', '7', '5', '_', '1', '7', '5', '.', 'S', 'a', 's', '_', 't', 'r', 'i', 'm', 'm', 'i', 'n', 'g', 's', 't', 's', 'T', 
    'y', 'p', 'e', '\022', 'h', '\n', '\032', 's', 'a', 's', '_', 's', 't', 'e', 'e', 'r', 'w', 'h', 'e', 'e', 'l', 'r', 'o', 't', 's', 
    'p', 'd', 's', 't', 'a', 't', 'u', 's', '\030', '\004', ' ', '\001', '(', '\016', '2', 'D', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'a', 's', '_', 's', 'e', 'n', 's', 'o', 'r', '_', '0', 'x', '1', '7', '5', '_', 
    '1', '7', '5', '.', 'S', 'a', 's', '_', 's', 't', 'e', 'e', 'r', 'w', 'h', 'e', 'e', 'l', 'r', 'o', 't', 's', 'p', 'd', 's', 
    't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 
    't', 'e', 'r', '_', '0', 'x', '1', '7', '5', '\030', '\005', ' ', '\001', '(', '\005', '\022', 'N', '\n', '\r', 's', 'a', 's', '_', 's', 'a', 
    's', 's', 't', 's', 'c', 'a', 'l', '\030', '\006', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'a', 's', '_', 's', 'e', 'n', 's', 'o', 'r', '_', '0', 'x', '1', '7', '5', '_', '1', 
    '7', '5', '.', 'S', 'a', 's', '_', 's', 'a', 's', 's', 't', 's', 'c', 'a', 'l', 'T', 'y', 'p', 'e', '\022', 'X', '\n', '\022', 's', 
    'a', 's', '_', 'r', 'a', 'w', '_', 's', 'a', 's', 's', 't', 's', 's', 'n', 's', 'r', '\030', '\007', ' ', '\001', '(', '\016', '2', '<', 
    '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'a', 's', '_', 's', 'e', 'n', 's', 
    'o', 'r', '_', '0', 'x', '1', '7', '5', '_', '1', '7', '5', '.', 'S', 'a', 's', '_', 'r', 'a', 'w', '_', 's', 'a', 's', 's', 
    't', 's', 's', 'n', 's', 'r', 'T', 'y', 'p', 'e', '\022', 'P', '\n', '\016', 's', 'a', 's', '_', 's', 'a', 's', 's', 't', 's', 's', 
    'n', 's', 'r', '\030', '\010', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'S', 'a', 's', '_', 's', 'e', 'n', 's', 'o', 'r', '_', '0', 'x', '1', '7', '5', '_', '1', '7', '5', '.', 'S', 
    'a', 's', '_', 's', 'a', 's', 's', 't', 's', 's', 'n', 's', 'r', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 
    'k', 's', 'u', 'm', '_', '0', 'x', '1', '7', '5', '\030', '\t', ' ', '\001', '(', '\005', '\022', '\033', '\n', '\023', 's', 'a', 's', '_', 's', 
    't', 'e', 'e', 'r', 'w', 'h', 'e', 'e', 'l', 'a', 'n', 'g', 'l', 'e', '\030', '\n', ' ', '\001', '(', '\001', '\"', 'S', '\n', '\023', 'S', 
    'a', 's', '_', 't', 'r', 'i', 'm', 'm', 'i', 'n', 'g', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\037', '\n', '\033', 'S', 'A', 'S', 
    '_', 'T', 'R', 'I', 'M', 'M', 'I', 'N', 'G', 'S', 'T', 'S', '_', 'N', 'O', 'T', '_', 'T', 'R', 'I', 'M', 'M', 'E', 'D', '\020', 
    '\000', '\022', '\033', '\n', '\027', 'S', 'A', 'S', '_', 'T', 'R', 'I', 'M', 'M', 'I', 'N', 'G', 'S', 'T', 'S', '_', 'T', 'R', 'I', 'M', 
    'M', 'E', 'D', '\020', '\001', '\"', 'n', '\n', '\036', 'S', 'a', 's', '_', 's', 't', 'e', 'e', 'r', 'w', 'h', 'e', 'e', 'l', 'r', 'o', 
    't', 's', 'p', 'd', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '$', '\n', ' ', 'S', 'A', 'S', '_', 'S', 'T', 'E', 
    'E', 'R', 'W', 'H', 'E', 'E', 'L', 'R', 'O', 'T', 'S', 'P', 'D', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'V', 'A', 'L', 'I', 'D', 
    '\020', '\000', '\022', '&', '\n', '\"', 'S', 'A', 'S', '_', 'S', 'T', 'E', 'E', 'R', 'W', 'H', 'E', 'E', 'L', 'R', 'O', 'T', 'S', 'P', 
    'D', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', 'a', '\n', '\021', 'S', 'a', 's', '_', 
    's', 'a', 's', 's', 't', 's', 'c', 'a', 'l', 'T', 'y', 'p', 'e', '\022', '\'', '\n', '#', 'S', 'A', 'S', '_', 'S', 'A', 'S', 'S', 
    'T', 'S', 'C', 'A', 'L', '_', 'S', 'E', 'N', 'S', 'O', 'R', '_', 'N', 'O', 'T', '_', 'C', 'A', 'L', 'I', 'B', 'R', 'A', 'T', 
    'E', 'D', '\020', '\000', '\022', '#', '\n', '\037', 'S', 'A', 'S', '_', 'S', 'A', 'S', 'S', 'T', 'S', 'C', 'A', 'L', '_', 'S', 'E', 'N', 
    'S', 'O', 'R', '_', 'C', 'A', 'L', 'I', 'B', 'R', 'A', 'T', 'E', 'D', '\020', '\001', '\"', 'p', '\n', '\026', 'S', 'a', 's', '_', 'r', 
    'a', 'w', '_', 's', 'a', 's', 's', 't', 's', 's', 'n', 's', 'r', 'T', 'y', 'p', 'e', '\022', '+', '\n', '\'', 'S', 'A', 'S', '_', 
    'R', 'A', 'W', '_', 'S', 'A', 'S', 'S', 'T', 'S', 'S', 'N', 'S', 'R', '_', 'S', 'E', 'N', 'S', 'O', 'R', '_', 'V', 'A', 'L', 
    'U', 'E', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', ')', '\n', '%', 'S', 'A', 'S', '_', 'R', 'A', 'W', '_', 'S', 
    'A', 'S', 'S', 'T', 'S', 'S', 'N', 'S', 'R', '_', 'S', 'E', 'N', 'S', 'O', 'R', '_', 'V', 'A', 'L', 'U', 'E', '_', 'V', 'A', 
    'L', 'I', 'D', '\020', '\001', '\"', 'd', '\n', '\022', 'S', 'a', 's', '_', 's', 'a', 's', 's', 't', 's', 's', 'n', 's', 'r', 'T', 'y', 
    'p', 'e', '\022', '\'', '\n', '#', 'S', 'A', 'S', '_', 'S', 'A', 'S', 'S', 'T', 'S', 'S', 'N', 'S', 'R', '_', 'S', 'E', 'N', 'S', 
    'O', 'R', '_', 'V', 'A', 'L', 'U', 'E', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '%', '\n', '!', 'S', 'A', 'S', 
    '_', 'S', 'A', 'S', 'S', 'T', 'S', 'S', 'N', 'S', 'R', '_', 'S', 'E', 'N', 'S', 'O', 'R', '_', 'V', 'A', 'L', 'U', 'E', '_', 
    'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', '\362', '5', '\n', '\021', 'G', 'w', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '2', '1', 
    '_', '3', '2', '1', '\022', 'U', '\n', '\022', 'b', 'c', 'm', '_', 'o', 'u', 't', 's', 'i', 'd', 'e', 't', 'e', 'm', 'p', 'd', 'i', 
    'g', '\030', '\001', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'G', 'w', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '2', '1', '_', '3', '2', '1', '.', 'B', 'c', 'm', '_', 'o', 'u', 
    't', 's', 'i', 'd', 'e', 't', 'e', 'm', 'p', 'd', 'i', 'g', 'T', 'y', 'p', 'e', '\022', '\027', '\n', '\017', 'b', 'c', 'm', '_', 'o', 
    'u', 't', 's', 'i', 'd', 'e', 't', 'e', 'm', 'p', '\030', '\002', ' ', '\001', '(', '\001', '\022', 'a', '\n', '\030', 'b', 'c', 'm', '_', 'd', 
    'r', 'i', 'v', 'i', 'n', 'g', '_', 'm', 'o', 'd', 'e', '_', 'r', 'e', 'q', '_', 'b', 'c', 'm', '\030', '\003', ' ', '\001', '(', '\016', 
    '2', '?', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'o', 'd', 
    'y', '_', '0', 'x', '3', '2', '1', '_', '3', '2', '1', '.', 'B', 'c', 'm', '_', 'd', 'r', 'i', 'v', 'i', 'n', 'g', '_', 'm', 
    'o', 'd', 'e', '_', 'r', 'e', 'q', '_', 'b', 'c', 'm', 'T', 'y', 'p', 'e', '\022', 'K', '\n', '\r', 'b', 'c', 'm', '_', 'p', 'o', 
    'w', 'e', 'r', 'm', 'o', 'd', 'e', '\030', '\004', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '2', '1', '_', '3', '2', '1', '.', 
    'B', 'c', 'm', '_', 'p', 'o', 'w', 'e', 'r', 'm', 'o', 'd', 'e', 'T', 'y', 'p', 'e', '\022', 'S', '\n', '\021', 'b', 'c', 'm', '_', 
    'f', 'r', 'n', 't', 'f', 'o', 'g', 'l', 'm', 'p', 's', 't', 's', '\030', '\005', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '2', 
    '1', '_', '3', '2', '1', '.', 'B', 'c', 'm', '_', 'f', 'r', 'n', 't', 'f', 'o', 'g', 'l', 'm', 'p', 's', 't', 's', 'T', 'y', 
    'p', 'e', '\022', 'M', '\n', '\016', 'b', 'c', 'm', '_', 'l', 'o', 'w', 'b', 'e', 'a', 'm', 's', 't', 's', '\030', '\006', ' ', '\001', '(', 
    '\016', '2', '5', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'o', 
    'd', 'y', '_', '0', 'x', '3', '2', '1', '_', '3', '2', '1', '.', 'B', 'c', 'm', '_', 'l', 'o', 'w', 'b', 'e', 'a', 'm', 's', 
    't', 's', 'T', 'y', 'p', 'e', '\022', 'O', '\n', '\017', 'b', 'c', 'm', '_', 'h', 'i', 'g', 'h', 'b', 'e', 'a', 'm', 's', 't', 's', 
    '\030', '\007', ' ', '\001', '(', '\016', '2', '6', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 
    'G', 'w', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '2', '1', '_', '3', '2', '1', '.', 'B', 'c', 'm', '_', 'h', 'i', 'g', 
    'h', 'b', 'e', 'a', 'm', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'Q', '\n', '\020', 'b', 'c', 'm', '_', 's', 's', '_', 'e', 'n', 
    'a', 'b', 'l', 'e', 's', 't', 's', '\030', '\010', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '2', '1', '_', '3', '2', '1', '.', 
    'B', 'c', 'm', '_', 's', 's', '_', 'e', 'n', 'a', 'b', 'l', 'e', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'U', '\n', '\022', 'b', 
    'c', 'm', '_', 'r', 'e', 'a', 'r', 'd', 'e', 'f', '_', 's', 't', 'a', 't', 'u', 's', '\030', '\t', ' ', '\001', '(', '\016', '2', '9', 
    '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'o', 'd', 'y', '_', 
    '0', 'x', '3', '2', '1', '_', '3', '2', '1', '.', 'B', 'c', 'm', '_', 'r', 'e', 'a', 'r', 'd', 'e', 'f', '_', 's', 't', 'a', 
    't', 'u', 's', 'T', 'y', 'p', 'e', '\022', 'S', '\n', '\021', 'b', 'c', 'm', '_', 'b', 'r', 'a', 'k', 'e', 'f', 'l', 'u', 'i', 'd', 
    's', 't', 's', '\030', '\n', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'G', 'w', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '2', '1', '_', '3', '2', '1', '.', 'B', 'c', 'm', '_', 
    'b', 'r', 'a', 'k', 'e', 'f', 'l', 'u', 'i', 'd', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'O', '\n', '\017', 'b', 'c', 'm', '_', 
    'a', 'u', 't', 'o', 'l', 'a', 'm', 'p', 's', 't', 's', '\030', '\013', ' ', '\001', '(', '\016', '2', '6', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '2', '1', '_', 
    '3', '2', '1', '.', 'B', 'c', 'm', '_', 'a', 'u', 't', 'o', 'l', 'a', 'm', 'p', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'K', 
    '\n', '\r', 'b', 'c', 'm', '_', 'p', 'o', 's', 'l', 'm', 'p', 's', 't', 's', '\030', '\014', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', 
    '3', '2', '1', '_', '3', '2', '1', '.', 'B', 'c', 'm', '_', 'p', 'o', 's', 'l', 'm', 'p', 's', 't', 's', 'T', 'y', 'p', 'e', 
    '\022', 'Y', '\n', '\024', 'b', 'c', 'm', '_', 'b', 'g', 'l', 'l', 'u', 'm', 'l', 'v', 'l', 's', 'e', 't', 't', 'i', 'n', 'g', '\030', 
    '\r', ' ', '\001', '(', '\016', '2', ';', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 
    'w', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '2', '1', '_', '3', '2', '1', '.', 'B', 'c', 'm', '_', 'b', 'g', 'l', 'l', 
    'u', 'm', 'l', 'v', 'l', 's', 'e', 't', 't', 'i', 'n', 'g', 'T', 'y', 'p', 'e', '\022', 'Q', '\n', '\020', 'b', 'c', 'm', '_', 'r', 
    'e', 'v', 'e', 'r', 's', 'e', '_', 'g', 'e', 'a', 'r', '\030', '\016', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '2', '1', '_', 
    '3', '2', '1', '.', 'B', 'c', 'm', '_', 'r', 'e', 'v', 'e', 'r', 's', 'e', '_', 'g', 'e', 'a', 'r', 'T', 'y', 'p', 'e', '\"', 
    '\201', '\001', '\n', '\026', 'B', 'c', 'm', '_', 'o', 'u', 't', 's', 'i', 'd', 'e', 't', 'e', 'm', 'p', 'd', 'i', 'g', 'T', 'y', 'p', 
    'e', '\022', '\036', '\n', '\032', 'B', 'C', 'M', '_', 'O', 'U', 'T', 'S', 'I', 'D', 'E', 'T', 'E', 'M', 'P', 'D', 'I', 'G', '_', 'N', 
    'O', 'F', 'A', 'U', 'L', 'T', '\020', '\000', '\022', '#', '\n', '\037', 'B', 'C', 'M', '_', 'O', 'U', 'T', 'S', 'I', 'D', 'E', 'T', 'E', 
    'M', 'P', 'D', 'I', 'G', '_', 'S', 'H', 'O', 'R', 'T', 'C', 'I', 'R', 'C', 'U', 'I', 'T', '\020', '\001', '\022', '\"', '\n', '\036', 'B', 
    'C', 'M', '_', 'O', 'U', 'T', 'S', 'I', 'D', 'E', 'T', 'E', 'M', 'P', 'D', 'I', 'G', '_', 'O', 'P', 'E', 'N', 'C', 'I', 'R', 
    'C', 'U', 'I', 'T', '\020', '\002', '\"', '\207', '\004', '\n', '\034', 'B', 'c', 'm', '_', 'd', 'r', 'i', 'v', 'i', 'n', 'g', '_', 'm', 'o', 
    'd', 'e', '_', 'r', 'e', 'q', '_', 'b', 'c', 'm', 'T', 'y', 'p', 'e', '\022', '#', '\n', '\037', 'B', 'C', 'M', '_', 'D', 'R', 'I', 
    'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'B', 'C', 'M', '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', 
    '\000', '\022', '!', '\n', '\035', 'B', 'C', 'M', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', 
    '_', 'B', 'C', 'M', '_', 'S', 'N', 'O', 'W', '\020', '\001', '\022', '#', '\n', '\037', 'B', 'C', 'M', '_', 'D', 'R', 'I', 'V', 'I', 'N', 
    'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'B', 'C', 'M', '_', 'N', 'O', 'U', 'S', 'E', 'D', '\020', '\002', '\022', '\"', 
    '\n', '\036', 'B', 'C', 'M', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'B', 'C', 
    'M', '_', 'S', 'P', 'O', 'R', 'T', '\020', '\003', '\022', ' ', '\n', '\034', 'B', 'C', 'M', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 
    'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'B', 'C', 'M', '_', 'E', 'C', 'O', '\020', '\004', '\022', '\037', '\n', '\033', 'B', 'C', 'M', 
    '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'B', 'C', 'M', '_', '4', 'L', '\020', 
    '\005', '\022', '!', '\n', '\035', 'B', 'C', 'M', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', 
    '_', 'B', 'C', 'M', '_', 'R', 'O', 'C', 'K', '\020', '\006', '\022', '#', '\n', '\037', 'B', 'C', 'M', '_', 'D', 'R', 'I', 'V', 'I', 'N', 
    'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'B', 'C', 'M', '_', 'W', 'E', 'T', 'M', 'U', 'D', '\020', '\007', '\022', '!', 
    '\n', '\035', 'B', 'C', 'M', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'B', 'C', 
    'M', '_', 'S', 'A', 'N', 'D', '\020', '\010', '\022', '*', '\n', '&', 'B', 'C', 'M', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 
    'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'B', 'C', 'M', '_', 'G', 'H', 'A', 'T', '_', 'F', 'O', 'R', 'N', '3', '3', '0', 'L', 
    '\020', '\t', '\022', ',', '\n', '(', 'B', 'C', 'M', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 
    'Q', '_', 'B', 'C', 'M', '_', 'M', 'A', 'N', 'U', 'A', 'L', '_', 'F', 'O', 'R', 'N', '3', '3', '0', 'L', '\020', '\r', '\022', '(', 
    '\n', '$', 'B', 'C', 'M', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'B', 'C', 
    'M', '_', 'A', 'T', 'S', 'F', 'A', 'U', 'L', 'T', 'B', 'C', 'M', '\020', '\016', '\022', '$', '\n', ' ', 'B', 'C', 'M', '_', 'D', 'R', 
    'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'B', 'C', 'M', '_', 'I', 'N', 'V', 'A', 'L', 'I', 
    'D', '\020', '\017', '\"', '\215', '\001', '\n', '\021', 'B', 'c', 'm', '_', 'p', 'o', 'w', 'e', 'r', 'm', 'o', 'd', 'e', 'T', 'y', 'p', 'e', 
    '\022', '\033', '\n', '\027', 'B', 'C', 'M', '_', 'P', 'O', 'W', 'E', 'R', 'M', 'O', 'D', 'E', '_', 'U', 'N', 'D', 'E', 'F', 'I', 'N', 
    'E', 'D', '\020', '\000', '\022', '\025', '\n', '\021', 'B', 'C', 'M', '_', 'P', 'O', 'W', 'E', 'R', 'M', 'O', 'D', 'E', '_', 'O', 'F', 'F', 
    '\020', '\001', '\022', '\025', '\n', '\021', 'B', 'C', 'M', '_', 'P', 'O', 'W', 'E', 'R', 'M', 'O', 'D', 'E', '_', 'A', 'C', 'C', '\020', '\002', 
    '\022', '\024', '\n', '\020', 'B', 'C', 'M', '_', 'P', 'O', 'W', 'E', 'R', 'M', 'O', 'D', 'E', '_', 'O', 'N', '\020', '\003', '\022', '\027', '\n', 
    '\023', 'B', 'C', 'M', '_', 'P', 'O', 'W', 'E', 'R', 'M', 'O', 'D', 'E', '_', 'S', 'T', 'A', 'R', 'T', '\020', '\004', '\"', '\213', '\001', 
    '\n', '\025', 'B', 'c', 'm', '_', 'f', 'r', 'n', 't', 'f', 'o', 'g', 'l', 'm', 'p', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\035', 
    '\n', '\031', 'B', 'C', 'M', '_', 'F', 'R', 'N', 'T', 'F', 'O', 'G', 'L', 'M', 'P', 'S', 'T', 'S', '_', 'I', 'N', 'V', 'A', 'L', 
    'I', 'D', '\020', '\000', '\022', '\031', '\n', '\025', 'B', 'C', 'M', '_', 'F', 'R', 'N', 'T', 'F', 'O', 'G', 'L', 'M', 'P', 'S', 'T', 'S', 
    '_', 'O', 'F', 'F', '\020', '\001', '\022', '\030', '\n', '\024', 'B', 'C', 'M', '_', 'F', 'R', 'N', 'T', 'F', 'O', 'G', 'L', 'M', 'P', 'S', 
    'T', 'S', '_', 'O', 'N', '\020', '\002', '\022', '\036', '\n', '\032', 'B', 'C', 'M', '_', 'F', 'R', 'N', 'T', 'F', 'O', 'G', 'L', 'M', 'P', 
    'S', 'T', 'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '|', '\n', '\022', 'B', 'c', 'm', '_', 'l', 'o', 'w', 
    'b', 'e', 'a', 'm', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\032', '\n', '\026', 'B', 'C', 'M', '_', 'L', 'O', 'W', 'B', 'E', 'A', 
    'M', 'S', 'T', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '\026', '\n', '\022', 'B', 'C', 'M', '_', 'L', 'O', 'W', 
    'B', 'E', 'A', 'M', 'S', 'T', 'S', '_', 'O', 'F', 'F', '\020', '\001', '\022', '\025', '\n', '\021', 'B', 'C', 'M', '_', 'L', 'O', 'W', 'B', 
    'E', 'A', 'M', 'S', 'T', 'S', '_', 'O', 'N', '\020', '\002', '\022', '\033', '\n', '\027', 'B', 'C', 'M', '_', 'L', 'O', 'W', 'B', 'E', 'A', 
    'M', 'S', 'T', 'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\201', '\001', '\n', '\023', 'B', 'c', 'm', '_', 'h', 
    'i', 'g', 'h', 'b', 'e', 'a', 'm', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\033', '\n', '\027', 'B', 'C', 'M', '_', 'H', 'I', 'G', 
    'H', 'B', 'E', 'A', 'M', 'S', 'T', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '\027', '\n', '\023', 'B', 'C', 'M', 
    '_', 'H', 'I', 'G', 'H', 'B', 'E', 'A', 'M', 'S', 'T', 'S', '_', 'O', 'F', 'F', '\020', '\001', '\022', '\026', '\n', '\022', 'B', 'C', 'M', 
    '_', 'H', 'I', 'G', 'H', 'B', 'E', 'A', 'M', 'S', 'T', 'S', '_', 'O', 'N', '\020', '\002', '\022', '\034', '\n', '\030', 'B', 'C', 'M', '_', 
    'H', 'I', 'G', 'H', 'B', 'E', 'A', 'M', 'S', 'T', 'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\242', '\001', 
    '\n', '\024', 'B', 'c', 'm', '_', 's', 's', '_', 'e', 'n', 'a', 'b', 'l', 'e', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\034', '\n', 
    '\030', 'B', 'C', 'M', '_', 'S', 'S', '_', 'E', 'N', 'A', 'B', 'L', 'E', 'S', 'T', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', 
    '\020', '\000', '\022', '%', '\n', '!', 'B', 'C', 'M', '_', 'S', 'S', '_', 'E', 'N', 'A', 'B', 'L', 'E', 'S', 'T', 'S', '_', 'S', 'T', 
    'A', 'R', 'T', 'S', 'T', 'O', 'P', 'I', 'S', 'A', 'L', 'L', 'O', 'W', '\020', '\001', '\022', '&', '\n', '\"', 'B', 'C', 'M', '_', 'S', 
    'S', '_', 'E', 'N', 'A', 'B', 'L', 'E', 'S', 'T', 'S', '_', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 'O', 'P', 'I', 'S', 'F', 'O', 
    'R', 'B', 'I', 'D', '\020', '\002', '\022', '\035', '\n', '\031', 'B', 'C', 'M', '_', 'S', 'S', '_', 'E', 'N', 'A', 'B', 'L', 'E', 'S', 'T', 
    'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\247', '\001', '\n', '\026', 'B', 'c', 'm', '_', 'r', 'e', 'a', 'r', 
    'd', 'e', 'f', '_', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'B', 'C', 'M', '_', 'R', 'E', 'A', 
    'R', 'D', 'E', 'F', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '&', '\n', '\"', 
    'B', 'C', 'M', '_', 'R', 'E', 'A', 'R', 'D', 'E', 'F', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'R', 'E', 'A', 'R', 'D', 'E', 
    'F', 'I', 'N', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\022', '$', '\n', ' ', 'B', 'C', 'M', '_', 'R', 'E', 'A', 'R', 'D', 'E', 
    'F', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'R', 'E', 'A', 'R', 'D', 'E', 'F', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\002', '\022', 
    '\037', '\n', '\033', 'B', 'C', 'M', '_', 'R', 'E', 'A', 'R', 'D', 'E', 'F', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'R', 'E', 'S', 
    'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\217', '\001', '\n', '\025', 'B', 'c', 'm', '_', 'b', 'r', 'a', 'k', 'e', 'f', 'l', 'u', 'i', 
    'd', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'B', 'C', 'M', '_', 'B', 'R', 'A', 'K', 'E', 'F', 'L', 'U', 'I', 
    'D', 'S', 'T', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '\034', '\n', '\030', 'B', 'C', 'M', '_', 'B', 'R', 'A', 
    'K', 'E', 'F', 'L', 'U', 'I', 'D', 'S', 'T', 'S', '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\001', '\022', '\031', '\n', '\025', 'B', 'C', 
    'M', '_', 'B', 'R', 'A', 'K', 'E', 'F', 'L', 'U', 'I', 'D', 'S', 'T', 'S', '_', 'L', 'O', 'W', '\020', '\002', '\022', '\036', '\n', '\032', 
    'B', 'C', 'M', '_', 'B', 'R', 'A', 'K', 'E', 'F', 'L', 'U', 'I', 'D', 'S', 'T', 'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 
    'D', '\020', '\003', '\"', '\212', '\001', '\n', '\023', 'B', 'c', 'm', '_', 'a', 'u', 't', 'o', 'l', 'a', 'm', 'p', 's', 't', 's', 'T', 'y', 
    'p', 'e', '\022', '\033', '\n', '\027', 'B', 'C', 'M', '_', 'A', 'U', 'T', 'O', 'L', 'A', 'M', 'P', 'S', 'T', 'S', '_', 'I', 'N', 'V', 
    'A', 'L', 'I', 'D', '\020', '\000', '\022', '\034', '\n', '\030', 'B', 'C', 'M', '_', 'A', 'U', 'T', 'O', 'L', 'A', 'M', 'P', 'S', 'T', 'S', 
    '_', 'I', 'N', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\022', '\032', '\n', '\026', 'B', 'C', 'M', '_', 'A', 'U', 'T', 'O', 'L', 'A', 
    'M', 'P', 'S', 'T', 'S', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\002', '\022', '\034', '\n', '\030', 'B', 'C', 'M', '_', 'A', 'U', 'T', 
    'O', 'L', 'A', 'M', 'P', 'S', 'T', 'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', 'v', '\n', '\021', 'B', 'c', 
    'm', '_', 'p', 'o', 's', 'l', 'm', 'p', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\030', '\n', '\024', 'B', 'C', 'M', '_', 'P', 'O', 
    'S', 'L', 'M', 'P', 'S', 'T', 'S', '_', 'N', 'O', 'U', 'E', 'S', 'D', '\020', '\000', '\022', '\025', '\n', '\021', 'B', 'C', 'M', '_', 'P', 
    'O', 'S', 'L', 'M', 'P', 'S', 'T', 'S', '_', 'O', 'F', 'F', '\020', '\001', '\022', '\024', '\n', '\020', 'B', 'C', 'M', '_', 'P', 'O', 'S', 
    'L', 'M', 'P', 'S', 'T', 'S', '_', 'O', 'N', '\020', '\002', '\022', '\032', '\n', '\026', 'B', 'C', 'M', '_', 'P', 'O', 'S', 'L', 'M', 'P', 
    'S', 'T', 'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\305', '\034', '\n', '\030', 'B', 'c', 'm', '_', 'b', 'g', 
    'l', 'l', 'u', 'm', 'l', 'v', 'l', 's', 'e', 't', 't', 'i', 'n', 'g', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'B', 'C', 'M', 
    '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '0', 'P', 'E', 'R', 'C', 'E', 'N', 
    'T', '\020', '\000', '\022', '!', '\n', '\035', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 
    'N', 'G', '_', '1', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\001', '\022', '!', '\n', '\035', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 
    'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '2', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\002', '\022', '!', 
    '\n', '\035', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '3', 'P', 
    'E', 'R', 'C', 'E', 'N', 'T', '\020', '\003', '\022', '!', '\n', '\035', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 
    'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '4', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\004', '\022', '!', '\n', '\035', 'B', 'C', 'M', 
    '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '5', 'P', 'E', 'R', 'C', 'E', 'N', 
    'T', '\020', '\005', '\022', '!', '\n', '\035', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 
    'N', 'G', '_', '6', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\006', '\022', '!', '\n', '\035', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 
    'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '7', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\007', '\022', '!', 
    '\n', '\035', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '8', 'P', 
    'E', 'R', 'C', 'E', 'N', 'T', '\020', '\010', '\022', '!', '\n', '\035', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 
    'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '9', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\t', '\022', '\"', '\n', '\036', 'B', 'C', 'M', 
    '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '1', '0', 'P', 'E', 'R', 'C', 'E', 
    'N', 'T', '\020', '\n', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 
    'I', 'N', 'G', '_', '1', '1', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\013', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 
    'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '1', '2', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 
    '\014', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', 
    '_', '1', '3', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\r', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 
    'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '1', '4', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\016', '\022', '\"', 
    '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '1', '5', 
    'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\017', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 
    'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '1', '6', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\020', '\022', '\"', '\n', '\036', 'B', 
    'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '1', '7', 'P', 'E', 'R', 
    'C', 'E', 'N', 'T', '\020', '\021', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 
    'T', 'T', 'I', 'N', 'G', '_', '1', '8', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\022', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 
    'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '1', '9', 'P', 'E', 'R', 'C', 'E', 'N', 
    'T', '\020', '\023', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 
    'N', 'G', '_', '2', '0', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\024', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 
    'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '2', '1', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\025', 
    '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', 
    '2', '2', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\026', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 
    'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '2', '3', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\027', '\022', '\"', '\n', 
    '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '2', '4', 'P', 
    'E', 'R', 'C', 'E', 'N', 'T', '\020', '\030', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 
    'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '2', '5', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\031', '\022', '\"', '\n', '\036', 'B', 'C', 
    'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '2', '6', 'P', 'E', 'R', 'C', 
    'E', 'N', 'T', '\020', '\032', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 
    'T', 'I', 'N', 'G', '_', '2', '7', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\033', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 
    'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '2', '8', 'P', 'E', 'R', 'C', 'E', 'N', 'T', 
    '\020', '\034', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 
    'G', '_', '2', '9', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\035', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 
    'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '3', '0', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\036', '\022', 
    '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '3', 
    '1', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\037', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 
    'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '3', '2', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', ' ', '\022', '\"', '\n', '\036', 
    'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '3', '3', 'P', 'E', 
    'R', 'C', 'E', 'N', 'T', '\020', '!', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 
    'E', 'T', 'T', 'I', 'N', 'G', '_', '3', '4', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\"', '\022', '\"', '\n', '\036', 'B', 'C', 'M', 
    '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '3', '5', 'P', 'E', 'R', 'C', 'E', 
    'N', 'T', '\020', '#', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 
    'I', 'N', 'G', '_', '3', '6', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '$', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 
    'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '3', '7', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 
    '%', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', 
    '_', '3', '8', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '&', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 
    'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '3', '9', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '\'', '\022', '\"', 
    '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '4', '0', 
    'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '(', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 
    'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '4', '1', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', ')', '\022', '\"', '\n', '\036', 'B', 
    'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '4', '2', 'P', 'E', 'R', 
    'C', 'E', 'N', 'T', '\020', '*', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 
    'T', 'T', 'I', 'N', 'G', '_', '4', '3', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '+', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 
    'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '4', '4', 'P', 'E', 'R', 'C', 'E', 'N', 
    'T', '\020', ',', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 
    'N', 'G', '_', '4', '5', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '-', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 
    'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '4', '6', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '.', 
    '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', 
    '4', '7', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '/', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 
    'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '4', '8', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '0', '\022', '\"', '\n', 
    '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '4', '9', 'P', 
    'E', 'R', 'C', 'E', 'N', 'T', '\020', '1', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 
    'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '5', '0', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '2', '\022', '\"', '\n', '\036', 'B', 'C', 
    'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '5', '1', 'P', 'E', 'R', 'C', 
    'E', 'N', 'T', '\020', '3', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 
    'T', 'I', 'N', 'G', '_', '5', '2', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '4', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 
    'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '5', '3', 'P', 'E', 'R', 'C', 'E', 'N', 'T', 
    '\020', '5', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 
    'G', '_', '5', '4', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '6', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 
    'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '5', '5', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '7', '\022', 
    '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '5', 
    '6', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '8', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 
    'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '5', '7', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '9', '\022', '\"', '\n', '\036', 
    'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '5', '8', 'P', 'E', 
    'R', 'C', 'E', 'N', 'T', '\020', ':', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 
    'E', 'T', 'T', 'I', 'N', 'G', '_', '5', '9', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', ';', '\022', '\"', '\n', '\036', 'B', 'C', 'M', 
    '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '6', '0', 'P', 'E', 'R', 'C', 'E', 
    'N', 'T', '\020', '<', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 
    'I', 'N', 'G', '_', '6', '1', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '=', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 
    'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '6', '2', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 
    '>', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', 
    '_', '6', '3', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '?', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 
    'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '6', '4', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '@', '\022', '\"', 
    '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '6', '5', 
    'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'A', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 
    'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '6', '6', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'B', '\022', '\"', '\n', '\036', 'B', 
    'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '6', '7', 'P', 'E', 'R', 
    'C', 'E', 'N', 'T', '\020', 'C', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 
    'T', 'T', 'I', 'N', 'G', '_', '6', '8', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'D', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 
    'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '6', '9', 'P', 'E', 'R', 'C', 'E', 'N', 
    'T', '\020', 'E', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 
    'N', 'G', '_', '7', '0', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'F', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 
    'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '7', '1', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'G', 
    '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', 
    '7', '2', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'H', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 
    'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '7', '3', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'I', '\022', '\"', '\n', 
    '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '7', '4', 'P', 
    'E', 'R', 'C', 'E', 'N', 'T', '\020', 'J', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 
    'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '7', '5', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'K', '\022', '\"', '\n', '\036', 'B', 'C', 
    'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '7', '6', 'P', 'E', 'R', 'C', 
    'E', 'N', 'T', '\020', 'L', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 
    'T', 'I', 'N', 'G', '_', '7', '7', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'M', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 
    'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '7', '8', 'P', 'E', 'R', 'C', 'E', 'N', 'T', 
    '\020', 'N', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 
    'G', '_', '7', '9', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'O', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 
    'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '8', '0', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'P', '\022', 
    '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '8', 
    '1', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'Q', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 
    'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '8', '2', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'R', '\022', '\"', '\n', '\036', 
    'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '8', '3', 'P', 'E', 
    'R', 'C', 'E', 'N', 'T', '\020', 'S', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 
    'E', 'T', 'T', 'I', 'N', 'G', '_', '8', '4', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'T', '\022', '\"', '\n', '\036', 'B', 'C', 'M', 
    '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '8', '5', 'P', 'E', 'R', 'C', 'E', 
    'N', 'T', '\020', 'U', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 
    'I', 'N', 'G', '_', '8', '6', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'V', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 
    'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '8', '7', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 
    'W', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', 
    '_', '8', '8', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'X', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 
    'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '8', '9', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'Y', '\022', '\"', 
    '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '9', '0', 
    'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'Z', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 
    'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '9', '1', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '[', '\022', '\"', '\n', '\036', 'B', 
    'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '9', '2', 'P', 'E', 'R', 
    'C', 'E', 'N', 'T', '\020', '\\', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 
    'T', 'T', 'I', 'N', 'G', '_', '9', '3', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', ']', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 
    'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '9', '4', 'P', 'E', 'R', 'C', 'E', 'N', 
    'T', '\020', '^', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 
    'N', 'G', '_', '9', '5', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '_', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 
    'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '9', '6', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', '`', 
    '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', 
    '9', '7', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'a', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 
    'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '9', '8', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'b', '\022', '\"', '\n', 
    '\036', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '9', '9', 'P', 
    'E', 'R', 'C', 'E', 'N', 'T', '\020', 'c', '\022', '#', '\n', '\037', 'B', 'C', 'M', '_', 'B', 'G', 'L', 'L', 'U', 'M', 'L', 'V', 'L', 
    'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', '1', '0', '0', 'P', 'E', 'R', 'C', 'E', 'N', 'T', '\020', 'd', '\"', '\240', '\001', '\n', '\024', 
    'B', 'c', 'm', '_', 'r', 'e', 'v', 'e', 'r', 's', 'e', '_', 'g', 'e', 'a', 'r', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'B', 
    'C', 'M', '_', 'R', 'E', 'V', 'E', 'R', 'S', 'E', '_', 'G', 'E', 'A', 'R', '_', 'U', 'N', 'D', 'E', 'F', 'I', 'N', 'E', 'D', 
    '\020', '\000', '\022', '%', '\n', '!', 'B', 'C', 'M', '_', 'R', 'E', 'V', 'E', 'R', 'S', 'E', '_', 'G', 'E', 'A', 'R', '_', 'N', 'O', 
    'T', 'I', 'N', 'R', 'E', 'V', 'E', 'R', 'S', 'E', 'G', 'E', 'A', 'R', '\020', '\001', '\022', '\"', '\n', '\036', 'B', 'C', 'M', '_', 'R', 
    'E', 'V', 'E', 'R', 'S', 'E', '_', 'G', 'E', 'A', 'R', '_', 'I', 'N', 'R', 'E', 'V', 'E', 'R', 'S', 'E', 'G', 'E', 'A', 'R', 
    '\020', '\002', '\022', '\035', '\n', '\031', 'B', 'C', 'M', '_', 'R', 'E', 'V', 'E', 'R', 'S', 'E', '_', 'G', 'E', 'A', 'R', '_', 'R', 'E', 
    'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\261', '\001', '\n', '\026', 'I', 'p', 'm', '_', 'l', 'e', 'f', 't', 'l', 'i', 'n', 'e', 
    '_', '0', 'x', '2', '7', '8', '_', '2', '7', '8', '\022', '\027', '\n', '\017', 'i', 'p', 'm', '_', 'l', 'e', 'f', 't', 'l', 'i', 'n', 
    'e', '_', 'd', 'y', '\030', '\001', ' ', '\001', '(', '\001', '\022', ' ', '\n', '\030', 'i', 'p', 'm', '_', 'l', 'e', 'f', 't', 'l', 'i', 'n', 
    'e', '_', 'd', 'x', '_', 'l', 'o', 'o', 'k', 'h', 'e', 'a', 'd', '\030', '\002', ' ', '\001', '(', '\001', '\022', '\036', '\n', '\026', 'i', 'p', 
    'm', '_', 'l', 'e', 'f', 't', 'l', 'i', 'n', 'e', '_', 'h', 'o', 'r', '_', 'c', 'u', 'r', 'v', 'e', '\030', '\003', ' ', '\001', '(', 
    '\001', '\022', '\035', '\n', '\025', 'i', 'p', 'm', '_', 'l', 'e', 'f', 't', 'l', 'i', 'n', 'e', '_', 'y', 'a', 'w', 'a', 'n', 'g', 'l', 
    'e', '\030', '\004', ' ', '\001', '(', '\001', '\022', '\035', '\n', '\025', 'i', 'p', 'm', '_', 'l', 'e', 'd', 't', 'l', 'i', 'n', 'e', '_', 'd', 
    'x', '_', 's', 't', 'a', 'r', 't', '\030', '\005', ' ', '\001', '(', '\001', '\"', '\362', '\016', '\n', '\032', 'G', 'w', '_', 'e', 'm', 's', '_', 
    'e', 'n', 'g', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '1', '4', '2', '_', '1', '4', '2', '\022', '\032', '\n', '\022', 'e', 'm', 
    's', '_', 'i', 'g', 'n', 'i', 't', 'i', 'o', 'n', 't', 'i', 'm', 'i', 'n', 'g', '\030', '\001', ' ', '\001', '(', '\005', '\022', '\034', '\n', 
    '\024', 'e', 'm', 's', '_', 's', 'e', 't', 'l', 'e', 'n', 'g', 'i', 'd', 'l', 'e', 's', 'p', 'e', 'e', 'd', '\030', '\002', ' ', '\001', 
    '(', '\001', '\022', 'f', '\n', '\026', 'e', 'm', 's', '_', 'e', 'n', 'g', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 't', 'a', 
    't', 'u', 's', '\030', '\003', ' ', '\001', '(', '\016', '2', 'F', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'G', 'w', '_', 'e', 'm', 's', '_', 'e', 'n', 'g', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '1', '4', '2', 
    '_', '1', '4', '2', '.', 'E', 'm', 's', '_', 'e', 'n', 'g', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 't', 'a', 't', 
    'u', 's', 'T', 'y', 'p', 'e', '\022', 'h', '\n', '\027', 'e', 'm', 's', '_', 'a', 'i', 'r', 'c', 'o', 'm', 'p', 'r', 'e', 's', 's', 
    'o', 'r', 's', 't', 'a', 't', 'u', 's', '\030', '\004', ' ', '\001', '(', '\016', '2', 'G', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'e', 'm', 's', '_', 'e', 'n', 'g', 's', 't', 'a', 't', 'u', 's', '_', 
    '0', 'x', '1', '4', '2', '_', '1', '4', '2', '.', 'E', 'm', 's', '_', 'a', 'i', 'r', 'c', 'o', 'm', 'p', 'r', 'e', 's', 's', 
    'o', 'r', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', 'v', '\n', '\036', 'e', 'm', 's', '_', 't', 'h', 'r', 'o', 't', 
    't', 'l', 'e', 'p', 'l', 'a', 't', 'e', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'e', 'r', 'r', 'o', 'r', '\030', '\005', ' ', '\001', 
    '(', '\016', '2', 'N', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'e', 
    'm', 's', '_', 'e', 'n', 'g', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '1', '4', '2', '_', '1', '4', '2', '.', 'E', 'm', 
    's', '_', 't', 'h', 'r', 'o', 't', 't', 'l', 'e', 'p', 'l', 'a', 't', 'e', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'e', 'r', 
    'r', 'o', 'r', 'T', 'y', 'p', 'e', '\022', 'b', '\n', '\024', 'e', 'm', 's', '_', 's', 't', 'a', 'r', 't', 's', 't', 'o', 'p', 'm', 
    'e', 's', 's', 'a', 'g', 'e', '\030', '\006', ' ', '\001', '(', '\016', '2', 'D', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'e', 'm', 's', '_', 'e', 'n', 'g', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', 
    '1', '4', '2', '_', '1', '4', '2', '.', 'E', 'm', 's', '_', 's', 't', 'a', 'r', 't', 's', 't', 'o', 'p', 'm', 'e', 's', 's', 
    'a', 'g', 'e', 'T', 'y', 'p', 'e', '\022', '$', '\n', '\034', 'd', 'c', 'm', '_', 'e', 'm', 's', '_', 'r', 'o', 'l', 'l', 'i', 'n', 
    'g', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', '1', '4', '2', '\030', '\007', ' ', '\001', '(', '\005', '\022', 'T', '\n', '\r', 'e', 
    'm', 's', '_', 'i', 'g', 'n', 's', 'w', 't', 's', 't', 's', '\030', '\010', ' ', '\001', '(', '\016', '2', '=', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'e', 'm', 's', '_', 'e', 'n', 'g', 's', 't', 'a', 
    't', 'u', 's', '_', '0', 'x', '1', '4', '2', '_', '1', '4', '2', '.', 'E', 'm', 's', '_', 'i', 'g', 'n', 's', 'w', 't', 's', 
    't', 's', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\026', 'd', 'c', 'm', '_', 'e', 'm', 's', '_', 'c', 'h', 'e', 'c', 'k', 's', 'u', 
    'm', '_', '0', 'x', '1', '4', '2', '\030', '\t', ' ', '\001', '(', '\005', '\022', '\037', '\n', '\027', 'e', 'm', 's', '_', 'e', 'n', 'g', 't', 
    'h', 'r', 'o', 't', 't', 'l', 'e', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', '\030', '\n', ' ', '\001', '(', '\001', '\"', '\371', '\001', '\n', 
    '\032', 'E', 'm', 's', '_', 'e', 'n', 'g', 'o', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 
    'p', 'e', '\022', '\"', '\n', '\036', 'E', 'M', 'S', '_', 'E', 'N', 'G', 'O', 'P', 'E', 'R', 'A', 'T', 'I', 'O', 'N', 'S', 'T', 'A', 
    'T', 'U', 'S', '_', 'S', 'T', 'O', 'P', 'P', 'E', 'D', '\020', '\000', '\022', '\"', '\n', '\036', 'E', 'M', 'S', '_', 'E', 'N', 'G', 'O', 
    'P', 'E', 'R', 'A', 'T', 'I', 'O', 'N', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'R', 'U', 'N', 'N', 'I', 'N', 'G', '\020', '\001', '\022', 
    '\037', '\n', '\033', 'E', 'M', 'S', '_', 'E', 'N', 'G', 'O', 'P', 'E', 'R', 'A', 'T', 'I', 'O', 'N', 'S', 'T', 'A', 'T', 'U', 'S', 
    '_', 'I', 'D', 'L', 'E', '\020', '\002', '\022', '(', '\n', '$', 'E', 'M', 'S', '_', 'E', 'N', 'G', 'O', 'P', 'E', 'R', 'A', 'T', 'I', 
    'O', 'N', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'D', 'F', 'C', 'O', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\022', 
    '#', '\n', '\037', 'E', 'M', 'S', '_', 'E', 'N', 'G', 'O', 'P', 'E', 'R', 'A', 'T', 'I', 'O', 'N', 'S', 'T', 'A', 'T', 'U', 'S', 
    '_', 'C', 'R', 'A', 'N', 'K', 'I', 'N', 'G', '\020', '\004', '\022', '#', '\n', '\037', 'E', 'M', 'S', '_', 'E', 'N', 'G', 'O', 'P', 'E', 
    'R', 'A', 'T', 'I', 'O', 'N', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'S', 'T', 'A', 'L', 'L', 'I', 'N', 'G', '\020', '\005', '\"', '^', 
    '\n', '\033', 'E', 'm', 's', '_', 'a', 'i', 'r', 'c', 'o', 'm', 'p', 'r', 'e', 's', 's', 'o', 'r', 's', 't', 'a', 't', 'u', 's', 
    'T', 'y', 'p', 'e', '\022', '\037', '\n', '\033', 'E', 'M', 'S', '_', 'A', 'I', 'R', 'C', 'O', 'M', 'P', 'R', 'E', 'S', 'S', 'O', 'R', 
    'S', 'T', 'A', 'T', 'U', 'S', '_', 'O', 'F', 'F', '\020', '\000', '\022', '\036', '\n', '\032', 'E', 'M', 'S', '_', 'A', 'I', 'R', 'C', 'O', 
    'M', 'P', 'R', 'E', 'S', 'S', 'O', 'R', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'O', 'N', '\020', '\001', '\"', 'z', '\n', '\"', 'E', 'm', 
    's', '_', 't', 'h', 'r', 'o', 't', 't', 'l', 'e', 'p', 'l', 'a', 't', 'e', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'e', 'r', 
    'r', 'o', 'r', 'T', 'y', 'p', 'e', '\022', '*', '\n', '&', 'E', 'M', 'S', '_', 'T', 'H', 'R', 'O', 'T', 'T', 'L', 'E', 'P', 'L', 
    'A', 'T', 'E', 'P', 'O', 'S', 'I', 'T', 'I', 'O', 'N', 'E', 'R', 'R', 'O', 'R', '_', 'N', 'O', 'E', 'R', 'R', 'O', 'R', '\020', 
    '\000', '\022', '(', '\n', '$', 'E', 'M', 'S', '_', 'T', 'H', 'R', 'O', 'T', 'T', 'L', 'E', 'P', 'L', 'A', 'T', 'E', 'P', 'O', 'S', 
    'I', 'T', 'I', 'O', 'N', 'E', 'R', 'R', 'O', 'R', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\001', '\"', '\204', '\005', '\n', '\030', 'E', 'm', 
    's', '_', 's', 't', 'a', 'r', 't', 's', 't', 'o', 'p', 'm', 'e', 's', 's', 'a', 'g', 'e', 'T', 'y', 'p', 'e', '\022', ')', '\n', 
    '%', 'E', 'M', 'S', '_', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 'O', 'P', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '_', 'N', 'O', 'W', 
    'A', 'R', 'N', 'I', 'N', 'G', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '\020', '\000', '\022', '\'', '\n', '#', 'E', 'M', 'S', '_', 'S', 'T', 
    'A', 'R', 'T', 'S', 'T', 'O', 'P', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '_', 'C', 'L', 'I', 'M', 'A', 'T', 'E', 'R', 'E', 'Q', 
    'U', 'E', 'S', 'T', '\020', '\001', '\022', '!', '\n', '\035', 'E', 'M', 'S', '_', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 'O', 'P', 'M', 'E', 
    'S', 'S', 'A', 'G', 'E', '_', 'B', 'R', 'A', 'K', 'E', 'L', 'O', 'W', '\020', '\002', '\022', '&', '\n', '\"', 'E', 'M', 'S', '_', 'S', 
    'T', 'A', 'R', 'T', 'S', 'T', 'O', 'P', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '_', 'S', 'T', 'A', 'R', 'T', '_', 'S', 'T', 'O', 
    'P', 'O', 'F', 'F', '\020', '\003', '\022', '#', '\n', '\037', 'E', 'M', 'S', '_', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 'O', 'P', 'M', 'E', 
    'S', 'S', 'A', 'G', 'E', '_', 'B', 'A', 'T', 'T', 'E', 'R', 'Y', 'L', 'O', 'W', '\020', '\004', '\022', '\037', '\n', '\033', 'E', 'M', 'S', 
    '_', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 'O', 'P', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '_', 'E', 'C', 'T', 'L', 'O', 'W', '\020', 
    '\005', '\022', '#', '\n', '\037', 'E', 'M', 'S', '_', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 'O', 'P', 'M', 'E', 'S', 'S', 'A', 'G', 'E', 
    '_', 'A', 'P', 'A', 'I', 'N', 'H', 'I', 'B', 'I', 'T', '\020', '\006', '\022', '#', '\n', '\037', 'E', 'M', 'S', '_', 'S', 'T', 'A', 'R', 
    'T', 'S', 'T', 'O', 'P', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '_', 'A', 'C', 'C', 'I', 'N', 'H', 'I', 'B', 'I', 'T', '\020', '\007', 
    '\022', '#', '\n', '\037', 'E', 'M', 'S', '_', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 'O', 'P', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '_', 
    'T', 'C', 'U', 'I', 'N', 'H', 'I', 'B', 'I', 'T', '\020', '\010', '\022', '%', '\n', '!', 'E', 'M', 'S', '_', 'S', 'T', 'A', 'R', 'T', 
    'S', 'T', 'O', 'P', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '_', 'S', 'T', 'A', 'R', 'T', 'P', 'R', 'O', 'T', 'E', 'C', 'T', '\020', 
    '\t', '\022', '!', '\n', '\035', 'E', 'M', 'S', '_', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 'O', 'P', 'M', 'E', 'S', 'S', 'A', 'G', 'E', 
    '_', 'H', 'O', 'O', 'D', 'O', 'P', 'E', 'N', '\020', '\n', '\022', '&', '\n', '\"', 'E', 'M', 'S', '_', 'S', 'T', 'A', 'R', 'T', 'S', 
    'T', 'O', 'P', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '_', 'D', 'R', 'V', 'I', 'E', 'D', 'O', 'O', 'R', 'O', 'P', 'N', 'E', '\020', 
    '\013', '\022', '*', '\n', '&', 'E', 'M', 'S', '_', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 'O', 'P', 'M', 'E', 'S', 'S', 'A', 'G', 'E', 
    '_', 'S', 'T', 'E', 'E', 'R', 'I', 'N', 'G', 'A', 'N', 'G', 'E', 'L', 'H', 'I', 'G', 'H', '\020', '\014', '\022', ')', '\n', '%', 'E', 
    'M', 'S', '_', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 'O', 'P', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '_', 'S', 'T', 'A', 'R', 'T', 
    'S', 'T', 'O', 'P', 'F', 'A', 'I', 'L', 'U', 'R', 'E', '\020', '\r', '\022', '(', '\n', '$', 'E', 'M', 'S', '_', 'S', 'T', 'A', 'R', 
    'T', 'S', 'T', 'O', 'P', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '_', 'M', 'A', 'N', 'U', 'A', 'L', 'L', 'Y', 'R', 'E', 'S', 'T', 
    'A', 'R', 'T', '\020', '\016', '\022', '!', '\n', '\035', 'E', 'M', 'S', '_', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 'O', 'P', 'M', 'E', 'S', 
    'S', 'A', 'G', 'E', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\017', '\"', 'P', '\n', '\021', 'E', 'm', 's', '_', 'i', 'g', 
    'n', 's', 'w', 't', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'E', 'M', 'S', '_', 'I', 'G', 'N', 'S', 'W', 'T', 
    'S', 'T', 'S', '_', 'I', 'G', 'N', 'I', 'T', 'I', 'O', 'N', 'O', 'F', 'F', '\020', '\000', '\022', '\034', '\n', '\030', 'E', 'M', 'S', '_', 
    'I', 'G', 'N', 'S', 'W', 'T', 'S', 'T', 'S', '_', 'I', 'G', 'N', 'I', 'T', 'I', 'O', 'N', 'O', 'N', '\020', '\001', '\"', '\317', '\004', 
    '\n', '\032', 'G', 'w', '_', 't', 'b', 'o', 'x', '_', 'l', 'o', 'c', 'a', 't', 'i', 'o', 'n', '_', '0', 'x', '5', '8', '0', '_', 
    '5', '8', '0', '\022', '\026', '\n', '\016', 't', 'b', 'o', 'x', '_', 'l', 'o', 'n', 'g', 'i', 't', 'u', 'd', 'e', '\030', '\001', ' ', '\001', 
    '(', '\001', '\022', '\025', '\n', '\r', 't', 'b', 'o', 'x', '_', 'l', 'a', 't', 'i', 'd', 'u', 'd', 'e', '\030', '\002', ' ', '\001', '(', '\001', 
    '\022', 'P', '\n', '\013', 't', 'b', 'o', 'x', '_', 'g', 'p', 's', '_', 'u', 'b', '\030', '\003', ' ', '\001', '(', '\016', '2', ';', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'b', 'o', 'x', '_', 'l', 'o', 
    'c', 'a', 't', 'i', 'o', 'n', '_', '0', 'x', '5', '8', '0', '_', '5', '8', '0', '.', 'T', 'b', 'o', 'x', '_', 'g', 'p', 's', 
    '_', 'u', 'b', 'T', 'y', 'p', 'e', '\022', 'Z', '\n', '\020', 't', 'b', 'o', 'x', '_', 'l', 'o', 'c', 'a', 't', 'i', 'o', 'n', 's', 
    't', 's', '\030', '\004', ' ', '\001', '(', '\016', '2', '@', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 
    's', '.', 'G', 'w', '_', 't', 'b', 'o', 'x', '_', 'l', 'o', 'c', 'a', 't', 'i', 'o', 'n', '_', '0', 'x', '5', '8', '0', '_', 
    '5', '8', '0', '.', 'T', 'b', 'o', 'x', '_', 'l', 'o', 'c', 'a', 't', 'i', 'o', 'n', 's', 't', 's', 'T', 'y', 'p', 'e', '\"', 
    'M', '\n', '\017', 'T', 'b', 'o', 'x', '_', 'g', 'p', 's', '_', 'u', 'b', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'T', 'B', 'O', 
    'X', '_', 'G', 'P', 'S', '_', 'U', 'B', '_', 'N', 'O', 'T', '_', 'U', 'P', 'D', 'A', 'T', 'E', '_', 'G', 'P', 'S', '\020', '\000', 
    '\022', '\032', '\n', '\026', 'T', 'B', 'O', 'X', '_', 'G', 'P', 'S', '_', 'U', 'B', '_', 'U', 'P', 'D', 'A', 'T', 'E', '_', 'G', 'P', 
    'S', '\020', '\001', '\"', '\204', '\002', '\n', '\024', 'T', 'b', 'o', 'x', '_', 'l', 'o', 'c', 'a', 't', 'i', 'o', 'n', 's', 't', 's', 'T', 
    'y', 'p', 'e', '\022', '2', '\n', '.', 'T', 'B', 'O', 'X', '_', 'L', 'O', 'C', 'A', 'T', 'I', 'O', 'N', 'S', 'T', 'S', '_', 'N', 
    'O', 'R', 'T', 'H', '_', 'L', 'A', 'T', 'I', 'T', 'U', 'D', 'E', '_', 'E', 'A', 'S', 'T', '_', 'L', 'O', 'N', 'G', 'I', 'T', 
    'U', 'D', 'E', '\020', '\000', '\022', '2', '\n', '.', 'T', 'B', 'O', 'X', '_', 'L', 'O', 'C', 'A', 'T', 'I', 'O', 'N', 'S', 'T', 'S', 
    '_', 'N', 'O', 'R', 'T', 'H', '_', 'L', 'A', 'T', 'I', 'T', 'U', 'D', 'E', '_', 'W', 'E', 'S', 'T', '_', 'L', 'O', 'N', 'G', 
    'I', 'T', 'U', 'D', 'E', '\020', '\001', '\022', '2', '\n', '.', 'T', 'B', 'O', 'X', '_', 'L', 'O', 'C', 'A', 'T', 'I', 'O', 'N', 'S', 
    'T', 'S', '_', 'S', 'O', 'U', 'T', 'H', '_', 'L', 'A', 'T', 'I', 'T', 'U', 'D', 'E', '_', 'E', 'A', 'S', 'T', '_', 'L', 'O', 
    'N', 'G', 'I', 'T', 'U', 'D', 'E', '\020', '\002', '\022', '2', '\n', '.', 'T', 'B', 'O', 'X', '_', 'L', 'O', 'C', 'A', 'T', 'I', 'O', 
    'N', 'S', 'T', 'S', '_', 'S', 'O', 'U', 'T', 'H', '_', 'L', 'A', 'T', 'I', 'T', 'U', 'D', 'E', '_', 'W', 'E', 'S', 'T', '_', 
    'L', 'O', 'N', 'G', 'I', 'T', 'U', 'D', 'E', '\020', '\003', '\022', '\034', '\n', '\030', 'T', 'B', 'O', 'X', '_', 'L', 'O', 'C', 'A', 'T', 
    'I', 'O', 'N', 'S', 'T', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\007', '\"', '\223', '\016', '\n', '\r', 'S', 'r', 's', '_', 
    '0', 'x', '3', '5', '0', '_', '3', '5', '0', '\022', 'Y', '\n', '\026', 's', 'r', 's', '_', 's', 'b', 'r', '_', 's', 'e', 'c', 'o', 
    'n', 'd', 'r', 'o', 'w', 'r', 'i', 'g', 'h', 't', '\030', '\001', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'r', 's', '_', '0', 'x', '3', '5', '0', '_', '3', '5', '0', '.', 'S', 
    'r', 's', '_', 's', 'b', 'r', '_', 's', 'e', 'c', 'o', 'n', 'd', 'r', 'o', 'w', 'r', 'i', 'g', 'h', 't', 'T', 'y', 'p', 'e', 
    '\022', 'U', '\n', '\024', 's', 'r', 's', '_', 's', 'b', 'r', '_', 's', 'e', 'c', 'o', 'n', 'd', 'r', 'o', 'w', 'm', 'i', 'd', '\030', 
    '\002', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 
    'r', 's', '_', '0', 'x', '3', '5', '0', '_', '3', '5', '0', '.', 'S', 'r', 's', '_', 's', 'b', 'r', '_', 's', 'e', 'c', 'o', 
    'n', 'd', 'r', 'o', 'w', 'm', 'i', 'd', 'T', 'y', 'p', 'e', '\022', 'W', '\n', '\025', 's', 'r', 's', '_', 's', 'b', 'r', '_', 's', 
    'e', 'c', 'o', 'n', 'd', 'r', 'o', 'w', 'l', 'e', 'f', 't', '\030', '\003', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'r', 's', '_', '0', 'x', '3', '5', '0', '_', '3', '5', '0', 
    '.', 'S', 'r', 's', '_', 's', 'b', 'r', '_', 's', 'e', 'c', 'o', 'n', 'd', 'r', 'o', 'w', 'l', 'e', 'f', 't', 'T', 'y', 'p', 
    'e', '\022', 'O', '\n', '\021', 's', 'r', 's', '_', 's', 'b', 'r', '_', 'p', 'a', 'm', 's', 'e', 'n', 'g', 'e', 'r', '\030', '\004', ' ', 
    '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'r', 's', 
    '_', '0', 'x', '3', '5', '0', '_', '3', '5', '0', '.', 'S', 'r', 's', '_', 's', 'b', 'r', '_', 'p', 'a', 'm', 's', 'e', 'n', 
    'g', 'e', 'r', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 'e', 
    'r', '_', '0', 'x', '3', '5', '0', '\030', '\005', ' ', '\001', '(', '\005', '\022', 'I', '\n', '\016', 's', 'r', 's', '_', 's', 'b', 'r', '_', 
    'd', 'r', 'i', 'v', 'e', 'r', '\030', '\006', ' ', '\001', '(', '\016', '2', '1', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'S', 'r', 's', '_', '0', 'x', '3', '5', '0', '_', '3', '5', '0', '.', 'S', 'r', 's', '_', 's', 
    'b', 'r', '_', 'd', 'r', 'i', 'v', 'e', 'r', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', 
    '_', '0', 'x', '3', '5', '0', '\030', '\007', ' ', '\001', '(', '\005', '\022', 'Q', '\n', '\022', 's', 'r', 's', '_', 'c', 'r', 'a', 's', 'h', 
    'o', 'u', 't', 'p', 'u', 't', 's', 't', 's', '\030', '\010', ' ', '\001', '(', '\016', '2', '5', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'r', 's', '_', '0', 'x', '3', '5', '0', '_', '3', '5', '0', '.', 'S', 'r', 
    's', '_', 'c', 'r', 'a', 's', 'h', 'o', 'u', 't', 'p', 'u', 't', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'O', '\n', '\021', 's', 
    'r', 's', '_', 'a', 'i', 'r', 'b', 'a', 'g', 'f', 'a', 'i', 'l', 's', 't', 's', '\030', '\t', ' ', '\001', '(', '\016', '2', '4', '.', 
    'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'r', 's', '_', '0', 'x', '3', '5', '0', 
    '_', '3', '5', '0', '.', 'S', 'r', 's', '_', 'a', 'i', 'r', 'b', 'a', 'g', 'f', 'a', 'i', 'l', 's', 't', 's', 'T', 'y', 'p', 
    'e', '\"', '\303', '\001', '\n', '\032', 'S', 'r', 's', '_', 's', 'b', 'r', '_', 's', 'e', 'c', 'o', 'n', 'd', 'r', 'o', 'w', 'r', 'i', 
    'g', 'h', 't', 'T', 'y', 'p', 'e', '\022', '#', '\n', '\037', 'S', 'R', 'S', '_', 'S', 'B', 'R', '_', 'S', 'E', 'C', 'O', 'N', 'D', 
    'R', 'O', 'W', 'R', 'I', 'G', 'H', 'T', '_', 'L', 'A', 'M', 'P', '_', 'O', 'F', 'F', '\020', '\000', '\022', '1', '\n', '-', 'S', 'R', 
    'S', '_', 'S', 'B', 'R', '_', 'S', 'E', 'C', 'O', 'N', 'D', 'R', 'O', 'W', 'R', 'I', 'G', 'H', 'T', '_', 'L', 'A', 'M', 'P', 
    '_', 'F', 'L', 'A', 'S', 'H', 'I', 'N', 'G', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\001', '\022', '\"', '\n', '\036', 'S', 
    'R', 'S', '_', 'S', 'B', 'R', '_', 'S', 'E', 'C', 'O', 'N', 'D', 'R', 'O', 'W', 'R', 'I', 'G', 'H', 'T', '_', 'L', 'A', 'M', 
    'P', '_', 'O', 'N', '\020', '\002', '\022', ')', '\n', '%', 'S', 'R', 'S', '_', 'S', 'B', 'R', '_', 'S', 'E', 'C', 'O', 'N', 'D', 'R', 
    'O', 'W', 'R', 'I', 'G', 'H', 'T', '_', 'F', 'A', 'U', 'L', 'T', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', 
    '\271', '\001', '\n', '\030', 'S', 'r', 's', '_', 's', 'b', 'r', '_', 's', 'e', 'c', 'o', 'n', 'd', 'r', 'o', 'w', 'm', 'i', 'd', 'T', 
    'y', 'p', 'e', '\022', '!', '\n', '\035', 'S', 'R', 'S', '_', 'S', 'B', 'R', '_', 'S', 'E', 'C', 'O', 'N', 'D', 'R', 'O', 'W', 'M', 
    'I', 'D', '_', 'L', 'A', 'M', 'P', '_', 'O', 'F', 'F', '\020', '\000', '\022', '/', '\n', '+', 'S', 'R', 'S', '_', 'S', 'B', 'R', '_', 
    'S', 'E', 'C', 'O', 'N', 'D', 'R', 'O', 'W', 'M', 'I', 'D', '_', 'L', 'A', 'M', 'P', '_', 'F', 'L', 'A', 'S', 'H', 'I', 'N', 
    'G', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\001', '\022', ' ', '\n', '\034', 'S', 'R', 'S', '_', 'S', 'B', 'R', '_', 'S', 
    'E', 'C', 'O', 'N', 'D', 'R', 'O', 'W', 'M', 'I', 'D', '_', 'L', 'A', 'M', 'P', '_', 'O', 'N', '\020', '\002', '\022', '\'', '\n', '#', 
    'S', 'R', 'S', '_', 'S', 'B', 'R', '_', 'S', 'E', 'C', 'O', 'N', 'D', 'R', 'O', 'W', 'M', 'I', 'D', '_', 'F', 'A', 'U', 'L', 
    'T', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\276', '\001', '\n', '\031', 'S', 'r', 's', '_', 's', 'b', 'r', '_', 
    's', 'e', 'c', 'o', 'n', 'd', 'r', 'o', 'w', 'l', 'e', 'f', 't', 'T', 'y', 'p', 'e', '\022', '\"', '\n', '\036', 'S', 'R', 'S', '_', 
    'S', 'B', 'R', '_', 'S', 'E', 'C', 'O', 'N', 'D', 'R', 'O', 'W', 'L', 'E', 'F', 'T', '_', 'L', 'A', 'M', 'P', '_', 'O', 'F', 
    'F', '\020', '\000', '\022', '0', '\n', ',', 'S', 'R', 'S', '_', 'S', 'B', 'R', '_', 'S', 'E', 'C', 'O', 'N', 'D', 'R', 'O', 'W', 'L', 
    'E', 'F', 'T', '_', 'L', 'A', 'M', 'P', '_', 'F', 'L', 'A', 'S', 'H', 'I', 'N', 'G', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 
    'D', '\020', '\001', '\022', '!', '\n', '\035', 'S', 'R', 'S', '_', 'S', 'B', 'R', '_', 'S', 'E', 'C', 'O', 'N', 'D', 'R', 'O', 'W', 'L', 
    'E', 'F', 'T', '_', 'L', 'A', 'M', 'P', '_', 'O', 'N', '\020', '\002', '\022', '(', '\n', '$', 'S', 'R', 'S', '_', 'S', 'B', 'R', '_', 
    'S', 'E', 'C', 'O', 'N', 'D', 'R', 'O', 'W', 'L', 'E', 'F', 'T', '_', 'F', 'A', 'U', 'L', 'T', '_', 'R', 'E', 'S', 'E', 'R', 
    'V', 'E', 'D', '\020', '\003', '\"', '\252', '\001', '\n', '\025', 'S', 'r', 's', '_', 's', 'b', 'r', '_', 'p', 'a', 'm', 's', 'e', 'n', 'g', 
    'e', 'r', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'S', 'R', 'S', '_', 'S', 'B', 'R', '_', 'P', 'A', 'M', 'S', 'E', 'N', 'G', 
    'E', 'R', '_', 'L', 'A', 'M', 'P', '_', 'O', 'F', 'F', '\020', '\000', '\022', ',', '\n', '(', 'S', 'R', 'S', '_', 'S', 'B', 'R', '_', 
    'P', 'A', 'M', 'S', 'E', 'N', 'G', 'E', 'R', '_', 'L', 'A', 'M', 'P', '_', 'F', 'L', 'A', 'S', 'H', 'I', 'N', 'G', '_', 'R', 
    'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\001', '\022', '\035', '\n', '\031', 'S', 'R', 'S', '_', 'S', 'B', 'R', '_', 'P', 'A', 'M', 'S', 
    'E', 'N', 'G', 'E', 'R', '_', 'L', 'A', 'M', 'P', '_', 'O', 'N', '\020', '\002', '\022', '$', '\n', ' ', 'S', 'R', 'S', '_', 'S', 'B', 
    'R', '_', 'P', 'A', 'M', 'S', 'E', 'N', 'G', 'E', 'R', '_', 'F', 'A', 'U', 'L', 'T', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 
    'D', '\020', '\003', '\"', '\233', '\001', '\n', '\022', 'S', 'r', 's', '_', 's', 'b', 'r', '_', 'd', 'r', 'i', 'v', 'e', 'r', 'T', 'y', 'p', 
    'e', '\022', '\033', '\n', '\027', 'S', 'R', 'S', '_', 'S', 'B', 'R', '_', 'D', 'R', 'I', 'V', 'E', 'R', '_', 'L', 'A', 'M', 'P', '_', 
    'O', 'F', 'F', '\020', '\000', '\022', ')', '\n', '%', 'S', 'R', 'S', '_', 'S', 'B', 'R', '_', 'D', 'R', 'I', 'V', 'E', 'R', '_', 'L', 
    'A', 'M', 'P', '_', 'F', 'L', 'A', 'S', 'H', 'I', 'N', 'G', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\001', '\022', '\032', 
    '\n', '\026', 'S', 'R', 'S', '_', 'S', 'B', 'R', '_', 'D', 'R', 'I', 'V', 'E', 'R', '_', 'L', 'A', 'M', 'P', '_', 'O', 'N', '\020', 
    '\002', '\022', '!', '\n', '\035', 'S', 'R', 'S', '_', 'S', 'B', 'R', '_', 'D', 'R', 'I', 'V', 'E', 'R', '_', 'F', 'A', 'U', 'L', 'T', 
    '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', 'W', '\n', '\026', 'S', 'r', 's', '_', 'c', 'r', 'a', 's', 'h', 'o', 
    'u', 't', 'p', 'u', 't', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\037', '\n', '\033', 'S', 'R', 'S', '_', 'C', 'R', 'A', 'S', 'H', 
    'O', 'U', 'T', 'P', 'U', 'T', 'S', 'T', 'S', '_', 'N', 'O', '_', 'C', 'R', 'A', 'S', 'H', '\020', '\000', '\022', '\034', '\n', '\030', 'S', 
    'R', 'S', '_', 'C', 'R', 'A', 'S', 'H', 'O', 'U', 'T', 'P', 'U', 'T', 'S', 'T', 'S', '_', 'C', 'R', 'A', 'S', 'H', '\020', '\001', 
    '\"', '\230', '\001', '\n', '\025', 'S', 'r', 's', '_', 'a', 'i', 'r', 'b', 'a', 'g', 'f', 'a', 'i', 'l', 's', 't', 's', 'T', 'y', 'p', 
    'e', '\022', '\036', '\n', '\032', 'S', 'R', 'S', '_', 'A', 'I', 'R', 'B', 'A', 'G', 'F', 'A', 'I', 'L', 'S', 'T', 'S', '_', 'L', 'A', 
    'M', 'P', '_', 'O', 'F', 'F', '\020', '\000', '\022', ' ', '\n', '\034', 'S', 'R', 'S', '_', 'A', 'I', 'R', 'B', 'A', 'G', 'F', 'A', 'I', 
    'L', 'S', 'T', 'S', '_', 'L', 'A', 'M', 'P', '_', 'F', 'L', 'A', 'S', 'H', '\020', '\001', '\022', '\035', '\n', '\031', 'S', 'R', 'S', '_', 
    'A', 'I', 'R', 'B', 'A', 'G', 'F', 'A', 'I', 'L', 'S', 'T', 'S', '_', 'L', 'A', 'M', 'P', '_', 'O', 'N', '\020', '\002', '\022', '\036', 
    '\n', '\032', 'S', 'R', 'S', '_', 'A', 'I', 'R', 'B', 'A', 'G', 'F', 'A', 'I', 'L', 'S', 'T', 'S', '_', 'R', 'E', 'S', 'E', 'R', 
    'V', 'E', 'D', '\020', '\003', '\"', '\203', ')', '\n', '\r', 'I', 'p', 'm', '_', '0', 'x', '2', '4', '5', '_', '2', '4', '5', '\022', 'g', 
    '\n', '\035', 'i', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 't', 'o', 'r', 'q', 'u', 'e', 'r', 'e', 'q', 
    's', 't', 'a', 't', 'u', 's', '\030', '\001', ' ', '\001', '(', '\016', '2', '@', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'I', 'p', 'm', '_', '0', 'x', '2', '4', '5', '_', '2', '4', '5', '.', 'I', 'p', 'm', '_', 'l', 
    'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 't', 'o', 'r', 'q', 'u', 'e', 'r', 'e', 'q', 's', 't', 'a', 't', 'u', 's', 'T', 
    'y', 'p', 'e', '\022', 'e', '\n', '\034', 'i', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 't', 'o', 'r', 'q', 
    'u', 'e', 'v', 'a', 'l', 'i', 'd', 'i', 't', 'y', '\030', '\002', ' ', '\001', '(', '\016', '2', '?', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'p', 'm', '_', '0', 'x', '2', '4', '5', '_', '2', '4', '5', '.', 'I', 
    'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 't', 'o', 'r', 'q', 'u', 'e', 'v', 'a', 'l', 'i', 'd', 'i', 
    't', 'y', 'T', 'y', 'p', 'e', '\022', '_', '\n', '\031', 'i', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 's', 
    'e', 'n', 's', 'i', 't', 'i', 'v', 'i', 't', 'y', '\030', '\003', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'p', 'm', '_', '0', 'x', '2', '4', '5', '_', '2', '4', '5', '.', 'I', 
    'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 's', 'e', 'n', 's', 'i', 't', 'i', 'v', 'i', 't', 'y', 'T', 
    'y', 'p', 'e', '\022', 'a', '\n', '\032', 'i', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 'w', 'a', 'r', 'n', 
    'i', 'n', 'g', 'a', 'u', 'd', 'i', 'o', '\030', '\004', ' ', '\001', '(', '\016', '2', '=', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'p', 'm', '_', '0', 'x', '2', '4', '5', '_', '2', '4', '5', '.', 'I', 'p', 'm', 
    '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'a', 'u', 'd', 'i', 'o', 'T', 'y', 
    'p', 'e', '\022', 'k', '\n', '\037', 'i', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 'l', 'e', 'f', 't', 'v', 
    'i', 's', 'u', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n', '\030', '\005', ' ', '\001', '(', '\016', '2', 'B', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'p', 'm', '_', '0', 'x', '2', '4', '5', '_', '2', '4', '5', 
    '.', 'I', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 'l', 'e', 'f', 't', 'v', 'i', 's', 'u', 'a', 'l', 
    'i', 'z', 'a', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', 'm', '\n', ' ', 'i', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 
    's', 'i', 't', '_', 'r', 'i', 'g', 'h', 't', 'v', 'i', 's', 'u', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n', '\030', '\006', ' ', 
    '\001', '(', '\016', '2', 'C', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'p', 'm', 
    '_', '0', 'x', '2', '4', '5', '_', '2', '4', '5', '.', 'I', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 
    'r', 'i', 'g', 'h', 't', 'v', 'i', 's', 'u', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', 'U', '\n', 
    '\024', 'i', 'p', 'm', '_', 's', 'l', 'a', 's', 'p', 'd', 'l', 'i', 'm', 'i', 't', 'u', 'n', 'i', 't', 's', '\030', '\007', ' ', '\001', 
    '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'p', 'm', '_', 
    '0', 'x', '2', '4', '5', '_', '2', '4', '5', '.', 'I', 'p', 'm', '_', 's', 'l', 'a', 's', 'p', 'd', 'l', 'i', 'm', 'i', 't', 
    'u', 'n', 'i', 't', 's', 'T', 'y', 'p', 'e', '\022', 'E', '\n', '\014', 'i', 'p', 'm', '_', 's', 'l', 'a', 's', 't', 'a', 't', 'e', 
    '\030', '\010', ' ', '\001', '(', '\016', '2', '/', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 
    'I', 'p', 'm', '_', '0', 'x', '2', '4', '5', '_', '2', '4', '5', '.', 'I', 'p', 'm', '_', 's', 'l', 'a', 's', 't', 'a', 't', 
    'e', 'T', 'y', 'p', 'e', '\022', 'U', '\n', '\024', 'i', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 's', 't', 
    'a', 't', 'u', 's', '\030', '\t', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'I', 'p', 'm', '_', '0', 'x', '2', '4', '5', '_', '2', '4', '5', '.', 'I', 'p', 'm', '_', 'l', 'a', 'n', 
    'e', 'a', 's', 's', 'i', 't', '_', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', 'K', '\n', '\017', 'i', 'p', 'm', '_', 
    's', 'l', 'a', 's', 'p', 'd', 'l', 'i', 'm', 'i', 't', '\030', '\n', ' ', '\001', '(', '\016', '2', '2', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'p', 'm', '_', '0', 'x', '2', '4', '5', '_', '2', '4', '5', '.', 
    'I', 'p', 'm', '_', 's', 'l', 'a', 's', 'p', 'd', 'l', 'i', 'm', 'i', 't', 'T', 'y', 'p', 'e', '\022', 'I', '\n', '\016', 'i', 'p', 
    'm', '_', 'h', 'm', 'a', '_', 's', 't', 'a', 't', 'u', 's', '\030', '\013', ' ', '\001', '(', '\016', '2', '1', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'p', 'm', '_', '0', 'x', '2', '4', '5', '_', '2', '4', '5', 
    '.', 'I', 'p', 'm', '_', 'h', 'm', 'a', '_', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', 'O', '\n', '\021', 'i', 'p', 
    'm', '_', 't', 'j', 'a', 'i', 'c', 'a', '_', 's', 't', 'a', 't', 'u', 's', '\030', '\014', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'p', 'm', '_', '0', 'x', '2', '4', '5', '_', 
    '2', '4', '5', '.', 'I', 'p', 'm', '_', 't', 'j', 'a', 'i', 'c', 'a', '_', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', 
    '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', '2', '4', '5', 
    '\030', '\r', ' ', '\001', '(', '\005', '\022', 'Q', '\n', '\022', 'i', 'p', 'm', '_', 'l', 'd', 'w', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 't', 
    'y', 'p', 'e', '\030', '\016', ' ', '\001', '(', '\016', '2', '5', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'I', 'p', 'm', '_', '0', 'x', '2', '4', '5', '_', '2', '4', '5', '.', 'I', 'p', 'm', '_', 'l', 'd', 'w', 'w', 
    'a', 'r', 'n', 'i', 'n', 'g', 't', 'y', 'p', 'e', 'T', 'y', 'p', 'e', '\022', ']', '\n', '\030', 'i', 'p', 'm', '_', 'l', 'a', 'n', 
    'e', 'a', 's', 's', 'i', 't', '_', 'h', 'a', 'n', 'd', 's', 'o', 'n', 'r', 'e', 'q', '\030', '\017', ' ', '\001', '(', '\016', '2', ';', 
    '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'p', 'm', '_', '0', 'x', '2', '4', 
    '5', '_', '2', '4', '5', '.', 'I', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 'h', 'a', 'n', 'd', 's', 
    'o', 'n', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', 'S', '\n', '\023', 'i', 'p', 'm', '_', 'h', 'm', 'a', '_', 'h', 'i', 'g', 'h', 
    'b', 'e', 'a', 'm', 'r', 'e', 'q', '\030', '\020', ' ', '\001', '(', '\016', '2', '6', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'p', 'm', '_', '0', 'x', '2', '4', '5', '_', '2', '4', '5', '.', 'I', 'p', 'm', '_', 
    'h', 'm', 'a', '_', 'h', 'i', 'g', 'h', 'b', 'e', 'a', 'm', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\016', 'c', 'h', 
    'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '2', '4', '5', '\030', '\021', ' ', '\001', '(', '\005', '\022', '\037', '\n', '\027', 'i', 'p', 'm', 
    '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 't', 'o', 'r', 'q', 'u', 'e', 'r', 'e', 'q', '\030', '\022', ' ', '\001', '(', 
    '\001', '\022', 'O', '\n', '\021', 'i', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', 't', 'y', 'p', 'e', '\030', '\023', ' ', 
    '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'p', 'm', 
    '_', '0', 'x', '2', '4', '5', '_', '2', '4', '5', '.', 'I', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', 't', 
    'y', 'p', 'e', 'T', 'y', 'p', 'e', '\022', 'i', '\n', '\036', 'i', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 
    'w', 'a', 'r', 'n', 'i', 'n', 'g', 'v', 'i', 'b', 'r', 'a', 't', 'i', 'o', 'n', '\030', '\024', ' ', '\001', '(', '\016', '2', 'A', '.', 
    'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'p', 'm', '_', '0', 'x', '2', '4', '5', 
    '_', '2', '4', '5', '.', 'I', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 'w', 'a', 'r', 'n', 'i', 'n', 
    'g', 'v', 'i', 'b', 'r', 'a', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\"', '\257', '\001', '\n', '!', 'I', 'p', 'm', '_', 'l', 'a', 
    'n', 'e', 'a', 's', 's', 'i', 't', '_', 't', 'o', 'r', 'q', 'u', 'e', 'r', 'e', 'q', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 
    'p', 'e', '\022', ',', '\n', '(', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'T', 'O', 'R', 'Q', 'U', 
    'E', 'R', 'E', 'Q', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'N', 'O', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\000', '\022', '0', 
    '\n', ',', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'T', 'O', 'R', 'Q', 'U', 'E', 'R', 'E', 'Q', 
    'S', 'T', 'A', 'T', 'U', 'S', '_', 'T', 'O', 'R', 'Q', 'U', 'E', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\001', '\022', '*', 
    '\n', '&', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'T', 'O', 'R', 'Q', 'U', 'E', 'R', 'E', 'Q', 
    'S', 'T', 'A', 'T', 'U', 'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\"', 't', '\n', ' ', 'I', 'p', 'm', '_', 
    'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 't', 'o', 'r', 'q', 'u', 'e', 'v', 'a', 'l', 'i', 'd', 'i', 't', 'y', 'T', 
    'y', 'p', 'e', '\022', '&', '\n', '\"', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'T', 'O', 'R', 'Q', 
    'U', 'E', 'V', 'A', 'L', 'I', 'D', 'I', 'T', 'Y', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '(', '\n', '$', 'I', 'P', 'M', 
    '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'T', 'O', 'R', 'Q', 'U', 'E', 'V', 'A', 'L', 'I', 'D', 'I', 'T', 'Y', 
    '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', '|', '\n', '\035', 'I', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 
    'i', 't', '_', 's', 'e', 'n', 's', 'i', 't', 'i', 'v', 'i', 't', 'y', 'T', 'y', 'p', 'e', '\022', '-', '\n', ')', 'I', 'P', 'M', 
    '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'H', 'I', 
    'G', 'H', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 'V', 'I', 'T', 'Y', '\020', '\000', '\022', ',', '\n', '(', 'I', 'P', 'M', '_', 'L', 'A', 
    'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 'V', 'I', 'T', 'Y', '_', 'L', 'O', 'W', 'S', 'E', 
    'N', 'S', 'I', 'T', 'I', 'V', 'I', 'T', 'Y', '\020', '\001', '\"', 'p', '\n', '\036', 'I', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 
    's', 'i', 't', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'a', 'u', 'd', 'i', 'o', 'T', 'y', 'p', 'e', '\022', '\'', '\n', '#', 'I', 
    'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'A', 'U', 'D', 'I', 'O', 
    '_', 'I', 'N', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '%', '\n', '!', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 
    'S', 'I', 'T', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'A', 'U', 'D', 'I', 'O', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', 
    '\"', '\347', '\001', '\n', '#', 'I', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 'l', 'e', 'f', 't', 'v', 'i', 
    's', 'u', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', '.', '\n', '*', 'I', 'P', 'M', '_', 'L', 'A', 
    'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'L', 'E', 'F', 'T', 'V', 'I', 'S', 'U', 'A', 'L', 'I', 'Z', 'A', 'T', 'I', 'O', 'N', 
    '_', 'N', 'O', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', '\020', '\000', '\022', '1', '\n', '-', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 
    'A', 'S', 'S', 'I', 'T', '_', 'L', 'E', 'F', 'T', 'V', 'I', 'S', 'U', 'A', 'L', 'I', 'Z', 'A', 'T', 'I', 'O', 'N', '_', 'L', 
    'I', 'N', 'E', '_', 'T', 'R', 'A', 'C', 'K', 'I', 'N', 'G', '\020', '\001', '\022', '0', '\n', ',', 'I', 'P', 'M', '_', 'L', 'A', 'N', 
    'E', 'A', 'S', 'S', 'I', 'T', '_', 'L', 'E', 'F', 'T', 'V', 'I', 'S', 'U', 'A', 'L', 'I', 'Z', 'A', 'T', 'I', 'O', 'N', '_', 
    'I', 'N', 'T', 'E', 'R', 'V', 'E', 'N', 'T', 'I', 'O', 'N', '\020', '\002', '\022', '+', '\n', '\'', 'I', 'P', 'M', '_', 'L', 'A', 'N', 
    'E', 'A', 'S', 'S', 'I', 'T', '_', 'L', 'E', 'F', 'T', 'V', 'I', 'S', 'U', 'A', 'L', 'I', 'Z', 'A', 'T', 'I', 'O', 'N', '_', 
    'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\003', '\"', '\354', '\001', '\n', '$', 'I', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 
    'i', 't', '_', 'r', 'i', 'g', 'h', 't', 'v', 'i', 's', 'u', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', 
    '\022', '/', '\n', '+', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'R', 'I', 'G', 'H', 'T', 'V', 'I', 
    'S', 'U', 'A', 'L', 'I', 'Z', 'A', 'T', 'I', 'O', 'N', '_', 'N', 'O', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', '\020', '\000', '\022', 
    '2', '\n', '.', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'R', 'I', 'G', 'H', 'T', 'V', 'I', 'S', 
    'U', 'A', 'L', 'I', 'Z', 'A', 'T', 'I', 'O', 'N', '_', 'L', 'I', 'N', 'E', '_', 'T', 'R', 'A', 'C', 'K', 'I', 'N', 'G', '\020', 
    '\001', '\022', '1', '\n', '-', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'R', 'I', 'G', 'H', 'T', 'V', 
    'I', 'S', 'U', 'A', 'L', 'I', 'Z', 'A', 'T', 'I', 'O', 'N', '_', 'I', 'N', 'T', 'E', 'R', 'V', 'E', 'N', 'T', 'I', 'O', 'N', 
    '\020', '\002', '\022', ',', '\n', '(', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'R', 'I', 'G', 'H', 'T', 
    'V', 'I', 'S', 'U', 'A', 'L', 'I', 'Z', 'A', 'T', 'I', 'O', 'N', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\003', '\"', '\233', 
    '\001', '\n', '\030', 'I', 'p', 'm', '_', 's', 'l', 'a', 's', 'p', 'd', 'l', 'i', 'm', 'i', 't', 'u', 'n', 'i', 't', 's', 'T', 'y', 
    'p', 'e', '\022', ' ', '\n', '\034', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', 'U', 'N', 'I', 'T', 
    'S', '_', 'U', 'N', 'K', 'N', 'O', 'W', 'N', '\020', '\000', '\022', '\034', '\n', '\030', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 
    'L', 'I', 'M', 'I', 'T', 'U', 'N', 'I', 'T', 'S', '_', 'K', 'M', 'H', '\020', '\001', '\022', '\034', '\n', '\030', 'I', 'P', 'M', '_', 'S', 
    'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', 'U', 'N', 'I', 'T', 'S', '_', 'M', 'P', 'H', '\020', '\002', '\022', '!', '\n', '\035', 
    'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', 'U', 'N', 'I', 'T', 'S', '_', 'R', 'E', 'S', 'E', 
    'R', 'V', 'E', 'D', '\020', '\003', '\"', '\244', '\001', '\n', '\020', 'I', 'p', 'm', '_', 's', 'l', 'a', 's', 't', 'a', 't', 'e', 'T', 'y', 
    'p', 'e', '\022', '\024', '\n', '\020', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'T', 'A', 'T', 'E', '_', 'O', 'F', 'F', '\020', '\000', '\022', 
    '\034', '\n', '\030', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'T', 'A', 'T', 'E', '_', 'F', 'U', 'S', 'I', 'O', 'N', '_', 'M', 'O', 
    'D', 'E', '\020', '\001', '\022', '\034', '\n', '\030', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'T', 'A', 'T', 'E', '_', 'V', 'I', 'S', 'I', 
    'O', 'N', '_', 'M', 'O', 'D', 'E', '\020', '\002', '\022', '%', '\n', '!', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'T', 'A', 'T', 'E', 
    '_', 'N', 'A', 'V', 'I', 'G', 'A', 'T', 'I', 'O', 'N', '_', 'O', 'N', 'L', 'Y', '_', 'M', 'O', 'D', 'E', '\020', '\003', '\022', '\027', 
    '\n', '\023', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'T', 'A', 'T', 'E', '_', 'D', 'E', 'F', 'E', 'C', 'T', '\020', '\004', '\"', '\324', 
    '\002', '\n', '\030', 'I', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 
    'p', 'e', '\022', '\034', '\n', '\030', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'S', 'T', 'A', 'T', 'U', 
    'S', '_', 'O', 'F', 'F', '\020', '\000', '\022', ' ', '\n', '\034', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 
    'S', 'T', 'A', 'T', 'U', 'S', '_', 'S', 'T', 'A', 'N', 'D', 'B', 'Y', '\020', '\001', '\022', '/', '\n', '+', 'I', 'P', 'M', '_', 'L', 
    'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'L', 'D', 'W', '_', 'A', 'C', 'T', 'I', 'V', 
    'E', '_', 'L', 'K', 'A', '_', 'S', 'T', 'A', 'N', 'D', 'B', 'Y', '\020', '\002', '\022', '/', '\n', '+', 'I', 'P', 'M', '_', 'L', 'A', 
    'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'L', 'D', 'W', '_', 'S', 'T', 'A', 'N', 'D', 'B', 
    'Y', '_', 'L', 'K', 'A', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\003', '\022', '\037', '\n', '\033', 'I', 'P', 'M', '_', 'L', 'A', 'N', 
    'E', 'A', 'S', 'S', 'I', 'T', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\004', '\022', '\036', '\n', 
    '\032', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'F', 'A', 'U', 
    'L', 'T', '\020', '\005', '\022', '\'', '\n', '#', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'S', 'T', 'A', 
    'T', 'U', 'S', '_', 'C', 'A', 'M', 'E', 'R', 'A', '_', 'B', 'L', 'O', 'C', 'K', 'E', 'D', '\020', '\006', '\022', ',', '\n', '(', 'I', 
    'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'C', 'A', 'M', 'E', 'R', 
    'A', '_', 'U', 'N', 'C', 'A', 'L', 'I', 'B', 'R', 'A', 'T', 'E', 'D', '\020', '\007', '\"', '\266', '\006', '\n', '\023', 'I', 'p', 'm', '_', 
    's', 'l', 'a', 's', 'p', 'd', 'l', 'i', 'm', 'i', 't', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'I', 'P', 'M', '_', 'S', 'L', 
    'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'N', 'O', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', '\020', '\000', '\022', '!', '\n', 
    '\035', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', 'C', 'A', 'N', 'C', 
    'E', 'L', 'L', 'E', 'D', '\020', '\001', '\022', '\031', '\n', '\025', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 
    'T', '_', 'S', 'P', 'L', '_', '5', '\020', '\002', '\022', '\032', '\n', '\026', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 
    'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '1', '0', '\020', '\003', '\022', '\032', '\n', '\026', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 
    'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '1', '5', '\020', '\004', '\022', '\032', '\n', '\026', 'I', 'P', 'M', '_', 'S', 'L', 
    'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '2', '0', '\020', '\005', '\022', '\032', '\n', '\026', 'I', 'P', 'M', 
    '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '2', '5', '\020', '\006', '\022', '\032', '\n', '\026', 
    'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '3', '0', '\020', '\007', '\022', 
    '\032', '\n', '\026', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '3', '5', 
    '\020', '\010', '\022', '\032', '\n', '\026', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', 
    '_', '4', '0', '\020', '\t', '\022', '\032', '\n', '\026', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 
    'S', 'P', 'L', '_', '4', '5', '\020', '\n', '\022', '\032', '\n', '\026', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 
    'I', 'T', '_', 'S', 'P', 'L', '_', '5', '0', '\020', '\013', '\022', '\032', '\n', '\026', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 
    'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '5', '5', '\020', '\014', '\022', '\032', '\n', '\026', 'I', 'P', 'M', '_', 'S', 'L', 'A', 
    'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '6', '0', '\020', '\r', '\022', '\032', '\n', '\026', 'I', 'P', 'M', '_', 
    'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '6', '5', '\020', '\016', '\022', '\032', '\n', '\026', 'I', 
    'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '7', '0', '\020', '\017', '\022', '\032', 
    '\n', '\026', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '7', '5', '\020', 
    '\020', '\022', '\032', '\n', '\026', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', 
    '8', '0', '\020', '\021', '\022', '\032', '\n', '\026', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 
    'P', 'L', '_', '8', '5', '\020', '\022', '\022', '\032', '\n', '\026', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 
    'T', '_', 'S', 'P', 'L', '_', '9', '0', '\020', '\023', '\022', '\032', '\n', '\026', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 
    'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '9', '5', '\020', '\024', '\022', '\033', '\n', '\027', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 
    'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '1', '0', '0', '\020', '\025', '\022', '\033', '\n', '\027', 'I', 'P', 'M', '_', 
    'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '1', '0', '5', '\020', '\026', '\022', '\033', '\n', '\027', 
    'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '1', '1', '0', '\020', '\027', 
    '\022', '\033', '\n', '\027', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '1', 
    '1', '5', '\020', '\030', '\022', '\033', '\n', '\027', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 
    'P', 'L', '_', '1', '2', '0', '\020', '\031', '\022', '\033', '\n', '\027', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 'D', 'L', 'I', 'M', 
    'I', 'T', '_', 'S', 'P', 'L', '_', '1', '2', '5', '\020', '\032', '\022', '\033', '\n', '\027', 'I', 'P', 'M', '_', 'S', 'L', 'A', 'S', 'P', 
    'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '1', '3', '0', '\020', '\033', '\"', '\331', '\001', '\n', '\022', 'I', 'p', 'm', '_', 
    'h', 'm', 'a', '_', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\022', 'I', 'P', 'M', '_', 'H', 'M', 'A', 
    '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'O', 'F', 'F', '\020', '\000', '\022', '\032', '\n', '\026', 'I', 'P', 'M', '_', 'H', 'M', 'A', '_', 
    'S', 'T', 'A', 'T', 'U', 'S', '_', 'P', 'A', 'S', 'S', 'I', 'V', 'E', '\020', '\001', '\022', '\032', '\n', '\026', 'I', 'P', 'M', '_', 'H', 
    'M', 'A', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'S', 'T', 'A', 'N', 'D', 'B', 'Y', '\020', '\002', '\022', '\031', '\n', '\025', 'I', 'P', 
    'M', '_', 'H', 'M', 'A', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\003', '\022', '\030', '\n', '\024', 
    'I', 'P', 'M', '_', 'H', 'M', 'A', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'F', 'A', 'U', 'L', 'T', '\020', '\004', '\022', '!', '\n', 
    '\035', 'I', 'P', 'M', '_', 'H', 'M', 'A', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'C', 'A', 'M', 'E', 'R', 'A', '_', 'B', 'L', 
    'O', 'C', 'K', 'E', 'D', '\020', '\005', '\022', '\033', '\n', '\027', 'I', 'P', 'M', '_', 'H', 'M', 'A', '_', 'S', 'T', 'A', 'T', 'U', 'S', 
    '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\006', '\"', 'U', '\n', '\025', 'I', 'p', 'm', '_', 't', 'j', 'a', 'i', 'c', 'a', 
    '_', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'I', 'P', 'M', '_', 'T', 'J', 'A', 'I', 'C', 'A', 
    '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'I', 'N', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\034', '\n', '\030', 'I', 'P', 'M', 
    '_', 'T', 'J', 'A', 'I', 'C', 'A', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', '\307', 
    '\001', '\n', '\026', 'I', 'p', 'm', '_', 'l', 'd', 'w', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 't', 'y', 'p', 'e', 'T', 'y', 'p', 'e', 
    '\022', ';', '\n', '7', 'I', 'P', 'M', '_', 'L', 'D', 'W', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'T', 'Y', 'P', 'E', '_', 'A', 'U', 
    'D', 'I', 'B', 'L', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'A', 'N', 'D', '_', 'W', 'H', 'E', 'E', 'L', 'S', 'T', 
    'E', 'E', 'R', '_', 'S', 'H', 'A', 'K', 'E', '\020', '\000', '\022', '&', '\n', '\"', 'I', 'P', 'M', '_', 'L', 'D', 'W', 'W', 'A', 'R', 
    'N', 'I', 'N', 'G', 'T', 'Y', 'P', 'E', '_', 'A', 'U', 'D', 'I', 'B', 'L', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', 
    '\001', '\022', '\'', '\n', '#', 'I', 'P', 'M', '_', 'L', 'D', 'W', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'T', 'Y', 'P', 'E', '_', 'W', 
    'H', 'E', 'E', 'L', 'S', 'T', 'E', 'E', 'R', '_', 'S', 'H', 'A', 'K', 'E', '\020', '\002', '\022', '\037', '\n', '\033', 'I', 'P', 'M', '_', 
    'L', 'D', 'W', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'T', 'Y', 'P', 'E', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', 
    '\"', 'j', '\n', '\034', 'I', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', '_', 'h', 'a', 'n', 'd', 's', 'o', 'n', 
    'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '%', '\n', '!', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 
    'H', 'A', 'N', 'D', 'S', 'O', 'N', 'R', 'E', 'Q', '_', 'I', 'N', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '#', '\n', '\037', 
    'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'H', 'A', 'N', 'D', 'S', 'O', 'N', 'R', 'E', 'Q', '_', 
    'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', 'h', '\n', '\027', 'I', 'p', 'm', '_', 'h', 'm', 'a', '_', 'h', 'i', 'g', 'h', 'b', 
    'e', 'a', 'm', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '\"', '\n', '\036', 'I', 'P', 'M', '_', 'H', 'M', 'A', '_', 'H', 'I', 'G', 
    'H', 'B', 'E', 'A', 'M', 'R', 'E', 'Q', '_', 'N', 'O', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\000', '\022', ')', '\n', '%', 
    'I', 'P', 'M', '_', 'H', 'M', 'A', '_', 'H', 'I', 'G', 'H', 'B', 'E', 'A', 'M', 'R', 'E', 'Q', '_', 'H', 'I', 'G', 'H', '_', 
    'B', 'E', 'A', 'M', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\001', '\"', '\361', '\001', '\n', '\025', 'I', 'p', 'm', '_', 'l', 'a', 
    'n', 'e', 'a', 's', 's', 'i', 't', 't', 'y', 'p', 'e', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'I', 'P', 'M', '_', 'L', 'A', 
    'N', 'E', 'A', 'S', 'S', 'I', 'T', 'T', 'Y', 'P', 'E', '_', 'U', 'N', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', '\000', 
    '\022', '\031', '\n', '\025', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', 'T', 'Y', 'P', 'E', '_', 'L', 'D', 'W', 
    '\020', '\001', '\022', '\031', '\n', '\025', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', 'T', 'Y', 'P', 'E', '_', 'L', 
    'K', 'A', '\020', '\002', '\022', '\035', '\n', '\031', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', 'T', 'Y', 'P', 'E', 
    '_', 'L', 'D', 'W', '_', 'L', 'K', 'A', '\020', '\003', '\022', '\035', '\n', '\031', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 
    'I', 'T', 'T', 'Y', 'P', 'E', '_', 'T', 'J', 'A', '_', 'I', 'C', 'A', '\020', '\004', '\022', '!', '\n', '\035', 'I', 'P', 'M', '_', 'L', 
    'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', 'T', 'Y', 'P', 'E', '_', 'T', 'J', 'A', '_', 'I', 'C', 'A', '_', 'L', 'D', 'W', '\020', 
    '\005', '\022', '\036', '\n', '\032', 'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', 'T', 'Y', 'P', 'E', '_', 'R', 'E', 
    'S', 'E', 'R', 'V', 'E', 'D', '\020', '\006', '\"', '|', '\n', '\"', 'I', 'p', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', 
    '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'v', 'i', 'b', 'r', 'a', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', '+', '\n', '\'', 
    'I', 'P', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'V', 'I', 'B', 'R', 
    'A', 'T', 'I', 'O', 'N', '_', 'I', 'N', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', ')', '\n', '%', 'I', 'P', 'M', '_', 'L', 
    'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'V', 'I', 'B', 'R', 'A', 'T', 'I', 'O', 'N', 
    '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', '\373', '\005', '\n', '\026', 'G', 'w', '_', 'e', 'm', 's', '_', 't', 'q', 'w', 'h', 
    'l', '_', '0', 'x', '1', '1', '1', '_', '1', '1', '1', '\022', '#', '\n', '\033', 'e', 'm', 's', '_', 'i', 'n', 'd', 'i', 'c', 'a', 
    't', 'e', 'd', 'r', 'e', 'a', 'l', 'e', 'n', 'g', 't', 'o', 'r', 'q', 'w', 'h', 'l', '\030', '\001', ' ', '\001', '(', '\005', '\022', 'h', 
    '\n', '\031', 'e', 'm', 's', '_', 'i', 'n', 'd', 'i', 'c', 'a', 't', 'e', 'd', 'a', 'c', 'c', 'm', 'e', 's', 'g', 'e', 'r', 'r', 
    'o', 'r', '\030', '\002', ' ', '\001', '(', '\016', '2', 'E', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 
    's', '.', 'G', 'w', '_', 'e', 'm', 's', '_', 't', 'q', 'w', 'h', 'l', '_', '0', 'x', '1', '1', '1', '_', '1', '1', '1', '.', 
    'E', 'm', 's', '_', 'i', 'n', 'd', 'i', 'c', 'a', 't', 'e', 'd', 'a', 'c', 'c', 'm', 'e', 's', 'g', 'e', 'r', 'r', 'o', 'r', 
    'T', 'y', 'p', 'e', '\022', 'l', '\n', '\033', 'e', 'm', 's', '_', 'i', 'n', 'd', 'i', 'c', 'a', 't', 'e', 'd', 'd', 'r', 'i', 'v', 
    'e', 'r', 'o', 'v', 'e', 'r', 'r', 'i', 'd', 'e', '\030', '\003', ' ', '\001', '(', '\016', '2', 'G', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'e', 'm', 's', '_', 't', 'q', 'w', 'h', 'l', '_', '0', 'x', 
    '1', '1', '1', '_', '1', '1', '1', '.', 'E', 'm', 's', '_', 'i', 'n', 'd', 'i', 'c', 'a', 't', 'e', 'd', 'd', 'r', 'i', 'v', 
    'e', 'r', 'o', 'v', 'e', 'r', 'r', 'i', 'd', 'e', 'T', 'y', 'p', 'e', '\022', '\"', '\n', '\032', 'e', 'm', 's', '_', 'i', 'n', 'd', 
    'i', 'c', 'a', 't', 'e', 'd', 'd', 'r', 'i', 'v', 'e', 'r', 'r', 'e', 'q', 't', 'o', 'r', 'q', '\030', '\004', ' ', '\001', '(', '\001', 
    '\022', '$', '\n', '\034', 'd', 'c', 'm', '_', 'e', 'm', 's', '_', 'r', 'o', 'l', 'l', 'i', 'n', 'g', 'c', 'o', 'u', 'n', 't', 'e', 
    'r', '_', '0', 'x', '1', '1', '1', '\030', '\005', ' ', '\001', '(', '\005', '\022', '\036', '\n', '\026', 'd', 'c', 'm', '_', 'e', 'm', 's', '_', 
    'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '1', '1', '1', '\030', '\006', ' ', '\001', '(', '\005', '\022', '%', '\n', '\035', 'e', 
    'm', 's', '_', 'i', 'n', 'd', 'i', 'c', 'a', 't', 'e', 'd', 'd', 'r', 'i', 'v', 'e', 'r', 'r', 'e', 'q', 't', 'o', 'r', 'q', 
    'w', 'h', 'l', '\030', '\007', ' ', '\001', '(', '\005', '\"', '\323', '\001', '\n', '\035', 'E', 'm', 's', '_', 'i', 'n', 'd', 'i', 'c', 'a', 't', 
    'e', 'd', 'a', 'c', 'c', 'm', 'e', 's', 'g', 'e', 'r', 'r', 'o', 'r', 'T', 'y', 'p', 'e', '\022', '&', '\n', '\"', 'E', 'M', 'S', 
    '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'E', 'D', 'A', 'C', 'C', 'M', 'E', 'S', 'G', 'E', 'R', 'R', 'O', 'R', '_', 'N', 'O', 
    'E', 'E', 'R', 'R', 'O', 'R', '\020', '\000', '\022', '.', '\n', '*', 'E', 'M', 'S', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'E', 'D', 
    'A', 'C', 'C', 'M', 'E', 'S', 'G', 'E', 'R', 'R', 'O', 'R', '_', 'R', 'E', 'V', 'E', 'R', 'S', 'I', 'B', 'L', 'E', '_', 'E', 
    'R', 'R', 'O', 'R', '\020', '\001', '\022', '0', '\n', ',', 'E', 'M', 'S', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'E', 'D', 'A', 'C', 
    'C', 'M', 'E', 'S', 'G', 'E', 'R', 'R', 'O', 'R', '_', 'I', 'R', 'R', 'E', 'V', 'E', 'R', 'S', 'I', 'B', 'L', 'E', '_', 'E', 
    'R', 'R', 'O', 'R', '\020', '\002', '\022', '(', '\n', '$', 'E', 'M', 'S', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'E', 'D', 'A', 'C', 
    'C', 'M', 'E', 'S', 'G', 'E', 'R', 'R', 'O', 'R', '_', 'N', 'O', 'T', 'D', 'E', 'F', 'I', 'N', 'E', 'D', '\020', '\003', '\"', '}', 
    '\n', '\037', 'E', 'm', 's', '_', 'i', 'n', 'd', 'i', 'c', 'a', 't', 'e', 'd', 'd', 'r', 'i', 'v', 'e', 'r', 'o', 'v', 'e', 'r', 
    'r', 'i', 'd', 'e', 'T', 'y', 'p', 'e', '\022', '*', '\n', '&', 'E', 'M', 'S', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'E', 'D', 
    'D', 'R', 'I', 'V', 'E', 'R', 'O', 'V', 'E', 'R', 'R', 'I', 'D', 'E', '_', 'N', 'O', 'O', 'V', 'E', 'R', 'R', 'I', 'D', 'E', 
    '\020', '\000', '\022', '.', '\n', '*', 'E', 'M', 'S', '_', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'E', 'D', 'D', 'R', 'I', 'V', 'E', 'R', 
    'O', 'V', 'E', 'R', 'R', 'I', 'D', 'E', '_', 'D', 'R', 'I', 'V', 'E', 'R', 'O', 'V', 'E', 'R', 'R', 'I', 'D', 'E', '\020', '\001', 
    '\"', '\302', '.', '\n', '\031', 'G', 'w', '_', 't', 'c', 'u', '_', 'g', 'e', 'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 'x', '1', '2', 
    '3', '_', '1', '2', '3', '\022', 'W', '\n', '\017', 't', 'c', 'u', '_', 'd', 'i', 's', 'p', 'l', 'a', 'y', 'g', 'e', 'a', 'r', '\030', 
    '\001', ' ', '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 
    'w', '_', 't', 'c', 'u', '_', 'g', 'e', 'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 'x', '1', '2', '3', '_', '1', '2', '3', '.', 
    'T', 'c', 'u', '_', 'd', 'i', 's', 'p', 'l', 'a', 'y', 'g', 'e', 'a', 'r', 'T', 'y', 'p', 'e', '\022', '_', '\n', '\023', 't', 'c', 
    'u', '_', 'g', 'e', 'a', 'r', 's', 'e', 'l', 'e', 'c', 't', 'o', 'r', 'r', 'e', 'q', '\030', '\002', ' ', '\001', '(', '\016', '2', 'B', 
    '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'c', 'u', '_', 'g', 
    'e', 'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 'x', '1', '2', '3', '_', '1', '2', '3', '.', 'T', 'c', 'u', '_', 'g', 'e', 'a', 
    'r', 's', 'e', 'l', 'e', 'c', 't', 'o', 'r', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', 'q', '\n', '\034', 't', 'c', 'u', '_', 't', 
    'r', 'a', 'n', 's', 'p', 'm', 'o', 't', 'o', 'p', 'a', 'r', 'k', 'r', 'e', 'q', 'i', 'n', 'v', 'a', 'l', 'i', 'd', '\030', '\003', 
    ' ', '\001', '(', '\016', '2', 'K', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', 
    '_', 't', 'c', 'u', '_', 'g', 'e', 'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 'x', '1', '2', '3', '_', '1', '2', '3', '.', 'T', 
    'c', 'u', '_', 't', 'r', 'a', 'n', 's', 'p', 'm', 'o', 't', 'o', 'p', 'a', 'r', 'k', 'r', 'e', 'q', 'i', 'n', 'v', 'a', 'l', 
    'i', 'd', 'T', 'y', 'p', 'e', '\022', 'g', '\n', '\027', 't', 'c', 'u', '_', 'g', 'e', 'a', 'r', 's', 'h', 'i', 'f', 't', 'i', 'n', 
    'p', 'r', 'o', 'g', 'r', 'e', 's', 's', '\030', '\004', ' ', '\001', '(', '\016', '2', 'F', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'c', 'u', '_', 'g', 'e', 'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 
    'x', '1', '2', '3', '_', '1', '2', '3', '.', 'T', 'c', 'u', '_', 'g', 'e', 'a', 'r', 's', 'h', 'i', 'f', 't', 'i', 'n', 'p', 
    'r', 'o', 'g', 'r', 'e', 's', 's', 'T', 'y', 'p', 'e', '\022', 'e', '\n', '\026', 't', 'c', 'u', '_', 's', 'h', 'i', 'f', 't', 'l', 
    'e', 'v', 'e', 'r', 'p', 'o', 's', '_', 's', 'b', 'w', 'm', '\030', '\005', ' ', '\001', '(', '\016', '2', 'E', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'c', 'u', '_', 'g', 'e', 'a', 'r', 'i', 'n', 
    'f', 'o', '_', '0', 'x', '1', '2', '3', '_', '1', '2', '3', '.', 'T', 'c', 'u', '_', 's', 'h', 'i', 'f', 't', 'l', 'e', 'v', 
    'e', 'r', 'p', 'o', 's', '_', 's', 'b', 'w', 'm', 'T', 'y', 'p', 'e', '\022', '[', '\n', '\021', 't', 'c', 'u', '_', 't', 'a', 'r', 
    'g', 'e', 't', 'g', 'e', 'a', 'r', 'r', 'e', 'q', '\030', '\006', ' ', '\001', '(', '\016', '2', '@', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'c', 'u', '_', 'g', 'e', 'a', 'r', 'i', 'n', 'f', 'o', 
    '_', '0', 'x', '1', '2', '3', '_', '1', '2', '3', '.', 'T', 'c', 'u', '_', 't', 'a', 'r', 'g', 'e', 't', 'g', 'e', 'a', 'r', 
    'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', 'S', '\n', '\r', 't', 'c', 'u', '_', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', '\030', 
    '\007', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 
    'w', '_', 't', 'c', 'u', '_', 'g', 'e', 'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 'x', '1', '2', '3', '_', '1', '2', '3', '.', 
    'T', 'c', 'u', '_', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', 'e', '\n', '\026', 't', 'c', 'u', '_', 
    'd', 'r', 'i', 'v', 'e', 'r', 'i', 'n', 't', 'e', 'r', 'v', 'e', 'n', 't', 'i', 'o', 'n', '\030', '\010', ' ', '\001', '(', '\016', '2', 
    'E', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'c', 'u', '_', 
    'g', 'e', 'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 'x', '1', '2', '3', '_', '1', '2', '3', '.', 'T', 'c', 'u', '_', 'd', 'r', 
    'i', 'v', 'e', 'r', 'i', 'n', 't', 'e', 'r', 'v', 'e', 'n', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', '[', '\n', '\021', 't', 
    'c', 'u', '_', 't', 'r', 's', 'm', 'f', 'a', 'u', 'l', 't', 'f', 'l', 'a', 'g', '\030', '\t', ' ', '\001', '(', '\016', '2', '@', '.', 
    'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'c', 'u', '_', 'g', 'e', 
    'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 'x', '1', '2', '3', '_', '1', '2', '3', '.', 'T', 'c', 'u', '_', 't', 'r', 's', 'm', 
    'f', 'a', 'u', 'l', 't', 'f', 'l', 'a', 'g', 'T', 'y', 'p', 'e', '\022', 'U', '\n', '\016', 't', 'c', 'u', '_', 's', 't', 'g', 'e', 
    'a', 'r', 'm', 'o', 'd', 'e', '\030', '\n', ' ', '\001', '(', '\016', '2', '=', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'c', 'u', '_', 'g', 'e', 'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 'x', '1', 
    '2', '3', '_', '1', '2', '3', '.', 'T', 'c', 'u', '_', 's', 't', 'g', 'e', 'a', 'r', 'm', 'o', 'd', 'e', 'T', 'y', 'p', 'e', 
    '\022', 'a', '\n', '\024', 't', 'c', 'u', '_', 'd', 'r', 'i', 'v', 'i', 'n', 'g', '_', 'm', 'o', 'd', 'e', '_', 'r', 'e', 'q', '\030', 
    '\013', ' ', '\001', '(', '\016', '2', 'C', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 
    'w', '_', 't', 'c', 'u', '_', 'g', 'e', 'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 'x', '1', '2', '3', '_', '1', '2', '3', '.', 
    'T', 'c', 'u', '_', 'd', 'r', 'i', 'v', 'i', 'n', 'g', '_', 'm', 'o', 'd', 'e', '_', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', 
    'U', '\n', '\016', 't', 'c', 'u', '_', 'e', 'p', 'b', 'l', 'o', 'c', 'k', 'r', 'e', 'q', '\030', '\014', ' ', '\001', '(', '\016', '2', '=', 
    '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'c', 'u', '_', 'g', 
    'e', 'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 'x', '1', '2', '3', '_', '1', '2', '3', '.', 'T', 'c', 'u', '_', 'e', 'p', 'b', 
    'l', 'o', 'c', 'k', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', ']', '\n', '\022', 't', 'c', 'u', '_', 'h', 'i', 'g', 'h', 'r', 'e', 
    's', 'i', 's', 't', 'a', 'n', 'c', 'e', '\030', '\r', ' ', '\001', '(', '\016', '2', 'A', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'c', 'u', '_', 'g', 'e', 'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 
    'x', '1', '2', '3', '_', '1', '2', '3', '.', 'T', 'c', 'u', '_', 'h', 'i', 'g', 'h', 'r', 'e', 's', 'i', 's', 't', 'a', 'n', 
    'c', 'e', 'T', 'y', 'p', 'e', '\022', 'y', '\n', ' ', 't', 'c', 'u', '_', 'd', 'r', 'i', 'v', 'i', 'n', 'g', 'm', 'o', 'd', 'e', 
    'c', 'h', 'a', 'n', 'g', 'e', '_', 'f', 'a', 'u', 'l', 't', '_', 'f', 'l', 'a', 'g', '\030', '\016', ' ', '\001', '(', '\016', '2', 'O', 
    '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'c', 'u', '_', 'g', 
    'e', 'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 'x', '1', '2', '3', '_', '1', '2', '3', '.', 'T', 'c', 'u', '_', 'd', 'r', 'i', 
    'v', 'i', 'n', 'g', 'm', 'o', 'd', 'e', 'c', 'h', 'a', 'n', 'g', 'e', '_', 'f', 'a', 'u', 'l', 't', '_', 'f', 'l', 'a', 'g', 
    'T', 'y', 'p', 'e', '\022', 'o', '\n', '\033', 't', 'c', 'u', '_', 's', 'h', 'i', 'f', 't', 'l', 'e', 'v', 'e', 'r', 't', 'o', 'p', 
    'r', 'e', 'q', 'i', 'n', 'v', 'a', 'l', 'i', 'd', '\030', '\017', ' ', '\001', '(', '\016', '2', 'J', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'c', 'u', '_', 'g', 'e', 'a', 'r', 'i', 'n', 'f', 'o', 
    '_', '0', 'x', '1', '2', '3', '_', '1', '2', '3', '.', 'T', 'c', 'u', '_', 's', 'h', 'i', 'f', 't', 'l', 'e', 'v', 'e', 'r', 
    't', 'o', 'p', 'r', 'e', 'q', 'i', 'n', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', '$', '\n', '\034', 't', 'c', 'u', '_', 
    's', 't', 'a', 't', 'u', 's', '_', 'a', 'l', 'i', 'v', 'e', 'c', 'o', 'u', 'n', 't', 'e', 'r', '0', 'x', '1', '2', '3', '\030', 
    '\020', ' ', '\001', '(', '\005', '\022', 'e', '\n', '\026', 't', 'c', 'u', '_', 't', 'r', 'a', 'n', 's', 'p', 'm', 'o', 't', 'o', 'r', 'p', 
    'a', 'r', 'k', 'r', 'e', 'q', '\030', '\021', ' ', '\001', '(', '\016', '2', 'E', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'c', 'u', '_', 'g', 'e', 'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 'x', '1', 
    '2', '3', '_', '1', '2', '3', '.', 'T', 'c', 'u', '_', 't', 'r', 'a', 'n', 's', 'p', 'm', 'o', 't', 'o', 'r', 'p', 'a', 'r', 
    'k', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', 'a', '\n', '\024', 't', 'c', 'u', '_', 's', 'h', 'i', 'f', 't', 'l', 'e', 'v', 'e', 
    'r', 't', 'o', 'p', 'r', 'e', 'q', '\030', '\022', ' ', '\001', '(', '\016', '2', 'C', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'c', 'u', '_', 'g', 'e', 'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 'x', 
    '1', '2', '3', '_', '1', '2', '3', '.', 'T', 'c', 'u', '_', 's', 'h', 'i', 'f', 't', 'l', 'e', 'v', 'e', 'r', 't', 'o', 'p', 
    'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', ' ', '\n', '\030', 't', 'c', 'u', '_', 's', 't', 'a', 't', 'u', 's', '_', 'c', 'h', 'e', 
    'c', 'k', 's', 'u', 'm', '0', 'x', '1', '2', '3', '\030', '\023', ' ', '\001', '(', '\005', '\022', 'g', '\n', '\027', 't', 'c', 'u', '_', 'c', 
    'u', 'r', 'r', 'e', 'n', 't', 'g', 'e', 'a', 'r', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', '\030', '\024', ' ', '\001', '(', '\016', '2', 
    'F', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'c', 'u', '_', 
    'g', 'e', 'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 'x', '1', '2', '3', '_', '1', '2', '3', '.', 'T', 'c', 'u', '_', 'c', 'u', 
    'r', 'r', 'e', 'n', 't', 'g', 'e', 'a', 'r', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\"', '\344', '\003', '\n', 
    '\023', 'T', 'c', 'u', '_', 'd', 'i', 's', 'p', 'l', 'a', 'y', 'g', 'e', 'a', 'r', 'T', 'y', 'p', 'e', '\022', '\"', '\n', '\036', 'T', 
    'C', 'U', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'G', 'E', 'A', 'R', '_', 'C', 'U', 'R', 'R', 'E', 'N', 'T', '_', 'G', 'E', 
    'A', 'R', '_', 'N', '\020', '\000', '\022', '\032', '\n', '\026', 'T', 'C', 'U', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'G', 'E', 'A', 'R', 
    '_', 'G', 'E', 'A', 'R', '_', '1', '\020', '\001', '\022', '\032', '\n', '\026', 'T', 'C', 'U', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'G', 
    'E', 'A', 'R', '_', 'G', 'E', 'A', 'R', '_', '2', '\020', '\002', '\022', '\032', '\n', '\026', 'T', 'C', 'U', '_', 'D', 'I', 'S', 'P', 'L', 
    'A', 'Y', 'G', 'E', 'A', 'R', '_', 'G', 'E', 'A', 'R', '_', '3', '\020', '\003', '\022', '\032', '\n', '\026', 'T', 'C', 'U', '_', 'D', 'I', 
    'S', 'P', 'L', 'A', 'Y', 'G', 'E', 'A', 'R', '_', 'G', 'E', 'A', 'R', '_', '4', '\020', '\004', '\022', '\032', '\n', '\026', 'T', 'C', 'U', 
    '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'G', 'E', 'A', 'R', '_', 'G', 'E', 'A', 'R', '_', '5', '\020', '\005', '\022', '\032', '\n', '\026', 
    'T', 'C', 'U', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'G', 'E', 'A', 'R', '_', 'G', 'E', 'A', 'R', '_', '6', '\020', '\006', '\022', 
    '\032', '\n', '\026', 'T', 'C', 'U', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'G', 'E', 'A', 'R', '_', 'G', 'E', 'A', 'R', '_', '7', 
    '\020', '\007', '\022', '\032', '\n', '\026', 'T', 'C', 'U', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'G', 'E', 'A', 'R', '_', 'G', 'E', 'A', 
    'R', '_', '8', '\020', '\010', '\022', '\"', '\n', '\036', 'T', 'C', 'U', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'G', 'E', 'A', 'R', '_', 
    'C', 'U', 'R', 'R', 'E', 'N', 'T', '_', 'G', 'E', 'A', 'R', '_', 'D', '\020', '\t', '\022', '\"', '\n', '\036', 'T', 'C', 'U', '_', 'D', 
    'I', 'S', 'P', 'L', 'A', 'Y', 'G', 'E', 'A', 'R', '_', 'C', 'U', 'R', 'R', 'E', 'N', 'T', '_', 'G', 'E', 'A', 'R', '_', 'L', 
    '\020', '\n', '\022', '\"', '\n', '\036', 'T', 'C', 'U', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'G', 'E', 'A', 'R', '_', 'C', 'U', 'R', 
    'R', 'E', 'N', 'T', '_', 'G', 'E', 'A', 'R', '_', 'R', '\020', '\013', '\022', '\034', '\n', '\030', 'T', 'C', 'U', '_', 'D', 'I', 'S', 'P', 
    'L', 'A', 'Y', 'G', 'E', 'A', 'R', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\014', '\022', '\"', '\n', '\036', 'T', 'C', 'U', 
    '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'G', 'E', 'A', 'R', '_', 'C', 'U', 'R', 'R', 'E', 'N', 'T', '_', 'G', 'E', 'A', 'R', 
    '_', 'P', '\020', '\r', '\022', '\033', '\n', '\027', 'T', 'C', 'U', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', 'G', 'E', 'A', 'R', '_', 'I', 
    'N', 'V', 'A', 'L', 'I', 'D', '\020', '\017', '\"', '\255', '\002', '\n', '\027', 'T', 'c', 'u', '_', 'g', 'e', 'a', 'r', 's', 'e', 'l', 'e', 
    'c', 't', 'o', 'r', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '\031', '\n', '\025', 'T', 'C', 'U', '_', 'G', 'E', 'A', 'R', 'S', 'E', 
    'L', 'E', 'C', 'T', 'O', 'R', 'R', 'E', 'Q', '_', 'P', '\020', '\000', '\022', '\"', '\n', '\036', 'T', 'C', 'U', '_', 'G', 'E', 'A', 'R', 
    'S', 'E', 'L', 'E', 'C', 'T', 'O', 'R', 'R', 'E', 'Q', '_', 'L', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\001', '\022', 
    '\"', '\n', '\036', 'T', 'C', 'U', '_', 'G', 'E', 'A', 'R', 'S', 'E', 'L', 'E', 'C', 'T', 'O', 'R', 'R', 'E', 'Q', '_', '2', '_', 
    'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\"', '\n', '\036', 'T', 'C', 'U', '_', 'G', 'E', 'A', 'R', 'S', 'E', 'L', 
    'E', 'C', 'T', 'O', 'R', 'R', 'E', 'Q', '_', '3', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\022', '\031', '\n', '\025', 
    'T', 'C', 'U', '_', 'G', 'E', 'A', 'R', 'S', 'E', 'L', 'E', 'C', 'T', 'O', 'R', 'R', 'E', 'Q', '_', 'D', '\020', '\005', '\022', '\031', 
    '\n', '\025', 'T', 'C', 'U', '_', 'G', 'E', 'A', 'R', 'S', 'E', 'L', 'E', 'C', 'T', 'O', 'R', 'R', 'E', 'Q', '_', 'N', '\020', '\006', 
    '\022', '\031', '\n', '\025', 'T', 'C', 'U', '_', 'G', 'E', 'A', 'R', 'S', 'E', 'L', 'E', 'C', 'T', 'O', 'R', 'R', 'E', 'Q', '_', 'R', 
    '\020', '\007', '\022', '\031', '\n', '\025', 'T', 'C', 'U', '_', 'G', 'E', 'A', 'R', 'S', 'E', 'L', 'E', 'C', 'T', 'O', 'R', 'R', 'E', 'Q', 
    '_', 'M', '\020', '\010', '\022', '\037', '\n', '\033', 'T', 'C', 'U', '_', 'G', 'E', 'A', 'R', 'S', 'E', 'L', 'E', 'C', 'T', 'O', 'R', 'R', 
    'E', 'Q', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\017', '\"', 't', '\n', ' ', 'T', 'c', 'u', '_', 't', 'r', 'a', 'n', 's', 
    'p', 'm', 'o', 't', 'o', 'p', 'a', 'r', 'k', 'r', 'e', 'q', 'i', 'n', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', '&', 
    '\n', '\"', 'T', 'C', 'U', '_', 'T', 'R', 'A', 'N', 'S', 'P', 'M', 'O', 'T', 'O', 'P', 'A', 'R', 'K', 'R', 'E', 'Q', 'I', 'N', 
    'V', 'A', 'L', 'I', 'D', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '(', '\n', '$', 'T', 'C', 'U', '_', 'T', 'R', 'A', 'N', 
    'S', 'P', 'M', 'O', 'T', 'O', 'P', 'A', 'R', 'K', 'R', 'E', 'Q', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '_', 'I', 'N', 'V', 'A', 
    'L', 'I', 'D', '\020', '\001', '\"', '\201', '\001', '\n', '\033', 'T', 'c', 'u', '_', 'g', 'e', 'a', 'r', 's', 'h', 'i', 'f', 't', 'i', 'n', 
    'p', 'r', 'o', 'g', 'r', 'e', 's', 's', 'T', 'y', 'p', 'e', '\022', '1', '\n', '-', 'T', 'C', 'U', '_', 'G', 'E', 'A', 'R', 'S', 
    'H', 'I', 'F', 'T', 'I', 'N', 'P', 'R', 'O', 'G', 'R', 'E', 'S', 'S', '_', 'N', 'O', 'G', 'E', 'A', 'R', 'S', 'H', 'I', 'F', 
    'T', 'I', 'N', 'P', 'R', 'O', 'G', 'R', 'E', 'S', 'S', '\020', '\000', '\022', '/', '\n', '+', 'T', 'C', 'U', '_', 'G', 'E', 'A', 'R', 
    'S', 'H', 'I', 'F', 'T', 'I', 'N', 'P', 'R', 'O', 'G', 'R', 'E', 'S', 'S', '_', 'G', 'E', 'A', 'R', 'S', 'H', 'I', 'F', 'T', 
    'I', 'N', 'P', 'R', 'O', 'G', 'R', 'E', 'S', 'S', '\020', '\001', '\"', '\235', '\002', '\n', '\032', 'T', 'c', 'u', '_', 's', 'h', 'i', 'f', 
    't', 'l', 'e', 'v', 'e', 'r', 'p', 'o', 's', '_', 's', 'b', 'w', 'm', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'T', 'C', 'U', 
    '_', 'S', 'H', 'I', 'F', 'T', 'L', 'E', 'V', 'E', 'R', 'P', 'O', 'S', '_', 'S', 'B', 'W', 'M', '_', 'P', '\020', '\000', '\022', '\034', 
    '\n', '\030', 'T', 'C', 'U', '_', 'S', 'H', 'I', 'F', 'T', 'L', 'E', 'V', 'E', 'R', 'P', 'O', 'S', '_', 'S', 'B', 'W', 'M', '_', 
    'D', '\020', '\001', '\022', '\034', '\n', '\030', 'T', 'C', 'U', '_', 'S', 'H', 'I', 'F', 'T', 'L', 'E', 'V', 'E', 'R', 'P', 'O', 'S', '_', 
    'S', 'B', 'W', 'M', '_', 'N', '\020', '\002', '\022', '\034', '\n', '\030', 'T', 'C', 'U', '_', 'S', 'H', 'I', 'F', 'T', 'L', 'E', 'V', 'E', 
    'R', 'P', 'O', 'S', '_', 'S', 'B', 'W', 'M', '_', 'R', '\020', '\003', '\022', '\034', '\n', '\030', 'T', 'C', 'U', '_', 'S', 'H', 'I', 'F', 
    'T', 'L', 'E', 'V', 'E', 'R', 'P', 'O', 'S', '_', 'S', 'B', 'W', 'M', '_', 'M', '\020', '\004', '\022', ' ', '\n', '\034', 'T', 'C', 'U', 
    '_', 'S', 'H', 'I', 'F', 'T', 'L', 'E', 'V', 'E', 'R', 'P', 'O', 'S', '_', 'S', 'B', 'W', 'M', '_', 'B', 'L', 'A', 'N', 'K', 
    '\020', '\005', '\022', '#', '\n', '\037', 'T', 'C', 'U', '_', 'S', 'H', 'I', 'F', 'T', 'L', 'E', 'V', 'E', 'R', 'P', 'O', 'S', '_', 'S', 
    'B', 'W', 'M', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\006', '\022', '\"', '\n', '\036', 'T', 'C', 'U', '_', 'S', 'H', 'I', 
    'F', 'T', 'L', 'E', 'V', 'E', 'R', 'P', 'O', 'S', '_', 'S', 'B', 'W', 'M', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\007', 
    '\"', '\375', '\002', '\n', '\025', 'T', 'c', 'u', '_', 't', 'a', 'r', 'g', 'e', 't', 'g', 'e', 'a', 'r', 'r', 'e', 'q', 'T', 'y', 'p', 
    'e', '\022', '*', '\n', '&', 'T', 'C', 'U', '_', 'T', 'A', 'R', 'G', 'E', 'T', 'G', 'E', 'A', 'R', 'R', 'E', 'Q', '_', 'D', 'R', 
    'I', 'V', 'E', 'T', 'R', 'A', 'I', 'N', 'O', 'P', 'E', 'N', '_', 'G', 'E', 'A', 'R', 'N', '\020', '\000', '\022', '\035', '\n', '\031', 'T', 
    'C', 'U', '_', 'T', 'A', 'R', 'G', 'E', 'T', 'G', 'E', 'A', 'R', 'R', 'E', 'Q', '_', '1', 'S', 'T', 'G', 'E', 'A', 'R', '\020', 
    '\001', '\022', '\035', '\n', '\031', 'T', 'C', 'U', '_', 'T', 'A', 'R', 'G', 'E', 'T', 'G', 'E', 'A', 'R', 'R', 'E', 'Q', '_', '2', 'N', 
    'D', 'G', 'E', 'A', 'R', '\020', '\002', '\022', '\035', '\n', '\031', 'T', 'C', 'U', '_', 'T', 'A', 'R', 'G', 'E', 'T', 'G', 'E', 'A', 'R', 
    'R', 'E', 'Q', '_', '3', 'R', 'D', 'G', 'E', 'A', 'R', '\020', '\003', '\022', '\035', '\n', '\031', 'T', 'C', 'U', '_', 'T', 'A', 'R', 'G', 
    'E', 'T', 'G', 'E', 'A', 'R', 'R', 'E', 'Q', '_', '4', 'T', 'H', 'G', 'E', 'A', 'R', '\020', '\004', '\022', '\035', '\n', '\031', 'T', 'C', 
    'U', '_', 'T', 'A', 'R', 'G', 'E', 'T', 'G', 'E', 'A', 'R', 'R', 'E', 'Q', '_', '5', 'T', 'H', 'G', 'E', 'A', 'R', '\020', '\005', 
    '\022', '\035', '\n', '\031', 'T', 'C', 'U', '_', 'T', 'A', 'R', 'G', 'E', 'T', 'G', 'E', 'A', 'R', 'R', 'E', 'Q', '_', '6', 'T', 'H', 
    'G', 'E', 'A', 'R', '\020', '\006', '\022', '\035', '\n', '\031', 'T', 'C', 'U', '_', 'T', 'A', 'R', 'G', 'E', 'T', 'G', 'E', 'A', 'R', 'R', 
    'E', 'Q', '_', '7', 'T', 'H', 'G', 'E', 'A', 'R', '\020', '\007', '\022', '\035', '\n', '\031', 'T', 'C', 'U', '_', 'T', 'A', 'R', 'G', 'E', 
    'T', 'G', 'E', 'A', 'R', 'R', 'E', 'Q', '_', '8', 'T', 'H', 'G', 'E', 'A', 'R', '\020', '\010', '\022', '!', '\n', '\035', 'T', 'C', 'U', 
    '_', 'T', 'A', 'R', 'G', 'E', 'T', 'G', 'E', 'A', 'R', 'R', 'E', 'Q', '_', 'R', 'E', 'V', 'E', 'R', 'S', 'E', 'G', 'E', 'A', 
    'R', '\020', '\016', '\022', '\035', '\n', '\031', 'T', 'C', 'U', '_', 'T', 'A', 'R', 'G', 'E', 'T', 'G', 'E', 'A', 'R', 'R', 'E', 'Q', '_', 
    'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\017', '\"', 'P', '\n', '\021', 'T', 'c', 'u', '_', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 
    'e', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'T', 'C', 'U', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'N', 'O', 
    'T', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', '\000', '\022', '\033', '\n', '\027', 'T', 'C', 'U', '_', 'A', 'V', 'A', 'I', 'L', 
    'A', 'B', 'L', 'E', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', '\001', '\"', 'v', '\n', '\032', 'T', 'c', 'u', '_', 'd', 
    'r', 'i', 'v', 'e', 'r', 'i', 'n', 't', 'e', 'r', 'v', 'e', 'n', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', ')', '\n', '%', 
    'T', 'C', 'U', '_', 'D', 'R', 'I', 'V', 'E', 'R', 'I', 'N', 'T', 'E', 'R', 'V', 'E', 'N', 'T', 'I', 'O', 'N', '_', 'N', 'O', 
    'I', 'N', 'T', 'E', 'R', 'V', 'E', 'N', 'T', 'I', 'O', 'N', '\020', '\000', '\022', '-', '\n', ')', 'T', 'C', 'U', '_', 'D', 'R', 'I', 
    'V', 'E', 'R', 'I', 'N', 'T', 'E', 'R', 'V', 'E', 'N', 'T', 'I', 'O', 'N', '_', 'D', 'R', 'I', 'V', 'E', 'R', 'I', 'N', 'T', 
    'E', 'R', 'V', 'E', 'N', 'T', 'I', 'O', 'N', '\020', '\001', '\"', '\257', '\001', '\n', '\025', 'T', 'c', 'u', '_', 't', 'r', 's', 'm', 'f', 
    'a', 'u', 'l', 't', 'f', 'l', 'a', 'g', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'T', 'C', 'U', '_', 'T', 'R', 'S', 'M', 'F', 
    'A', 'U', 'L', 'T', 'F', 'L', 'A', 'G', '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\000', '\022', ')', '\n', '%', 'T', 'C', 'U', '_', 
    'T', 'R', 'S', 'M', 'F', 'A', 'U', 'L', 'T', 'F', 'L', 'A', 'G', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', '_', 'N', 'O', 'L', 
    'I', 'M', 'P', '_', 'H', 'O', 'M', 'E', '\020', '\001', '\022', '-', '\n', ')', 'T', 'C', 'U', '_', 'T', 'R', 'S', 'M', 'F', 'A', 'U', 
    'L', 'T', 'F', 'L', 'A', 'G', '_', 'F', 'A', 'I', 'L', '_', 'L', 'I', 'M', 'P', '_', 'H', 'O', 'M', 'E', 'A', 'C', 'T', 'I', 
    'V', 'A', 'T', 'E', 'D', '\020', '\002', '\022', '\036', '\n', '\032', 'T', 'C', 'U', '_', 'T', 'R', 'S', 'M', 'F', 'A', 'U', 'L', 'T', 'F', 
    'L', 'A', 'G', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\333', '\002', '\n', '\022', 'T', 'c', 'u', '_', 's', 't', 
    'g', 'e', 'a', 'r', 'm', 'o', 'd', 'e', 'T', 'y', 'p', 'e', '\022', '\033', '\n', '\027', 'T', 'C', 'U', '_', 'S', 'T', 'G', 'E', 'A', 
    'R', 'M', 'O', 'D', 'E', '_', 'S', 'T', 'A', 'N', 'D', 'A', 'R', 'D', '\020', '\000', '\022', '\027', '\n', '\023', 'T', 'C', 'U', '_', 'S', 
    'T', 'G', 'E', 'A', 'R', 'M', 'O', 'D', 'E', '_', 'S', 'N', 'O', 'W', '\020', '\001', '\022', '\"', '\n', '\036', 'T', 'C', 'U', '_', 'S', 
    'T', 'G', 'E', 'A', 'R', 'M', 'O', 'D', 'E', '_', 'M', 'A', 'N', 'U', 'A', 'L', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', 
    '\020', '\002', '\022', '\030', '\n', '\024', 'T', 'C', 'U', '_', 'S', 'T', 'G', 'E', 'A', 'R', 'M', 'O', 'D', 'E', '_', 'S', 'P', 'O', 'R', 
    'T', '\020', '\003', '\022', '\026', '\n', '\022', 'T', 'C', 'U', '_', 'S', 'T', 'G', 'E', 'A', 'R', 'M', 'O', 'D', 'E', '_', 'E', 'C', 'O', 
    '\020', '\004', '\022', '\025', '\n', '\021', 'T', 'C', 'U', '_', 'S', 'T', 'G', 'E', 'A', 'R', 'M', 'O', 'D', 'E', '_', '4', 'L', '\020', '\005', 
    '\022', '\031', '\n', '\025', 'T', 'C', 'U', '_', 'S', 'T', 'G', 'E', 'A', 'R', 'M', 'O', 'D', 'E', '_', 'W', 'E', 'T', 'M', 'U', 'D', 
    '\020', '\007', '\022', '\027', '\n', '\023', 'T', 'C', 'U', '_', 'S', 'T', 'G', 'E', 'A', 'R', 'M', 'O', 'D', 'E', '_', 'S', 'A', 'N', 'D', 
    '\020', '\010', '\022', '\027', '\n', '\023', 'T', 'C', 'U', '_', 'S', 'T', 'G', 'E', 'A', 'R', 'M', 'O', 'D', 'E', '_', 'G', 'H', 'A', 'T', 
    '\020', '\t', '\022', '\031', '\n', '\025', 'T', 'C', 'U', '_', 'S', 'T', 'G', 'E', 'A', 'R', 'M', 'O', 'D', 'E', '_', 'M', 'A', 'N', 'U', 
    'A', 'L', '\020', '\r', '\022', '\036', '\n', '\032', 'T', 'C', 'U', '_', 'S', 'T', 'G', 'E', 'A', 'R', 'M', 'O', 'D', 'E', '_', 'A', 'T', 
    'S', 'F', 'A', 'U', 'L', 'T', 'T', 'C', 'U', '\020', '\016', '\022', '\032', '\n', '\026', 'T', 'C', 'U', '_', 'S', 'T', 'G', 'E', 'A', 'R', 
    'M', 'O', 'D', 'E', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\017', '\"', '\375', '\002', '\n', '\030', 'T', 'c', 'u', '_', 'd', 'r', 
    'i', 'v', 'i', 'n', 'g', '_', 'm', 'o', 'd', 'e', '_', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '\037', '\n', '\033', 'T', 'C', 'U', 
    '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', 
    '\000', '\022', '\035', '\n', '\031', 'T', 'C', 'U', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', 
    '_', 'S', 'N', 'O', 'W', '\020', '\001', '\022', '\037', '\n', '\033', 'T', 'C', 'U', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 
    'D', 'E', '_', 'R', 'E', 'Q', '_', 'N', 'O', 'U', 'S', 'E', 'D', '\020', '\002', '\022', '\036', '\n', '\032', 'T', 'C', 'U', '_', 'D', 'R', 
    'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'S', 'P', 'O', 'R', 'T', '\020', '\003', '\022', '\034', '\n', 
    '\030', 'T', 'C', 'U', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'E', 'C', 'O', 
    '\020', '\004', '\022', '\033', '\n', '\027', 'T', 'C', 'U', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 
    'Q', '_', '4', 'L', '\020', '\005', '\022', '\035', '\n', '\031', 'T', 'C', 'U', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 
    'E', '_', 'R', 'E', 'Q', '_', 'R', 'O', 'C', 'K', '\020', '\006', '\022', '\037', '\n', '\033', 'T', 'C', 'U', '_', 'D', 'R', 'I', 'V', 'I', 
    'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'W', 'E', 'T', 'M', 'U', 'D', '\020', '\007', '\022', '\035', '\n', '\031', 'T', 
    'C', 'U', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'S', 'A', 'N', 'D', '\020', 
    '\010', '\022', '$', '\n', ' ', 'T', 'C', 'U', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', 
    '_', 'S', 'W', 'I', 'T', 'C', 'H', 'F', 'A', 'U', 'L', 'T', '\020', '\016', '\022', ' ', '\n', '\034', 'T', 'C', 'U', '_', 'D', 'R', 'I', 
    'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\017', '\"', 'a', 
    '\n', '\022', 'T', 'c', 'u', '_', 'e', 'p', 'b', 'l', 'o', 'c', 'k', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'T', 
    'C', 'U', '_', 'E', 'P', 'B', 'L', 'O', 'C', 'K', 'R', 'E', 'Q', '_', 'N', 'O', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', 
    '\000', '\022', ',', '\n', '(', 'T', 'C', 'U', '_', 'E', 'P', 'B', 'L', 'O', 'C', 'K', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', 'U', 'E', 
    'S', 'T', '_', 'P', 'A', 'R', 'K', '_', 'B', 'R', 'A', 'K', 'E', '_', 'E', 'N', 'G', 'A', 'G', 'E', '\020', '\001', '\"', 'i', '\n', 
    '\026', 'T', 'c', 'u', '_', 'h', 'i', 'g', 'h', 'r', 'e', 's', 'i', 's', 't', 'a', 'n', 'c', 'e', 'T', 'y', 'p', 'e', '\022', '(', 
    '\n', '$', 'T', 'C', 'U', '_', 'H', 'I', 'G', 'H', 'R', 'E', 'S', 'I', 'S', 'T', 'A', 'N', 'C', 'E', '_', 'N', 'O', '_', 'H', 
    'I', 'G', 'H', 'R', 'E', 'S', 'I', 'S', 'T', 'A', 'N', 'C', 'E', '\020', '\000', '\022', '%', '\n', '!', 'T', 'C', 'U', '_', 'H', 'I', 
    'G', 'H', 'R', 'E', 'S', 'I', 'S', 'T', 'A', 'N', 'C', 'E', '_', 'H', 'I', 'G', 'H', 'R', 'E', 'S', 'I', 'S', 'T', 'A', 'N', 
    'C', 'E', '\020', '\001', '\"', '\200', '\001', '\n', '$', 'T', 'c', 'u', '_', 'd', 'r', 'i', 'v', 'i', 'n', 'g', 'm', 'o', 'd', 'e', 'c', 
    'h', 'a', 'n', 'g', 'e', '_', 'f', 'a', 'u', 'l', 't', '_', 'f', 'l', 'a', 'g', 'T', 'y', 'p', 'e', '\022', ',', '\n', '(', 'T', 
    'C', 'U', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', 'M', 'O', 'D', 'E', 'C', 'H', 'A', 'N', 'G', 'E', '_', 'F', 'A', 'U', 'L', 
    'T', '_', 'F', 'L', 'A', 'G', '_', 'N', 'O', 'F', 'A', 'U', 'L', 'T', '\020', '\000', '\022', '*', '\n', '&', 'T', 'C', 'U', '_', 'D', 
    'R', 'I', 'V', 'I', 'N', 'G', 'M', 'O', 'D', 'E', 'C', 'H', 'A', 'N', 'G', 'E', '_', 'F', 'A', 'U', 'L', 'T', '_', 'F', 'L', 
    'A', 'G', '_', 'F', 'A', 'U', 'L', 'T', '\020', '\001', '\"', 'q', '\n', '\037', 'T', 'c', 'u', '_', 's', 'h', 'i', 'f', 't', 'l', 'e', 
    'v', 'e', 'r', 't', 'o', 'p', 'r', 'e', 'q', 'i', 'n', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', '%', '\n', '!', 'T', 
    'C', 'U', '_', 'S', 'H', 'I', 'F', 'T', 'L', 'E', 'V', 'E', 'R', 'T', 'O', 'P', 'R', 'E', 'Q', 'I', 'N', 'V', 'A', 'L', 'I', 
    'D', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '\'', '\n', '#', 'T', 'C', 'U', '_', 'S', 'H', 'I', 'F', 'T', 'L', 'E', 'V', 
    'E', 'R', 'T', 'O', 'P', 'R', 'E', 'Q', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', 
    '\"', '\271', '\001', '\n', '\032', 'T', 'c', 'u', '_', 't', 'r', 'a', 'n', 's', 'p', 'm', 'o', 't', 'o', 'r', 'p', 'a', 'r', 'k', 'r', 
    'e', 'q', 'T', 'y', 'p', 'e', '\022', '$', '\n', ' ', 'T', 'C', 'U', '_', 'T', 'R', 'A', 'N', 'S', 'P', 'M', 'O', 'T', 'O', 'R', 
    'P', 'A', 'R', 'K', 'R', 'E', 'Q', '_', 'N', 'O', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\000', '\022', '(', '\n', '$', 'T', 'C', 
    'U', '_', 'T', 'R', 'A', 'N', 'S', 'P', 'M', 'O', 'T', 'O', 'R', 'P', 'A', 'R', 'K', 'R', 'E', 'Q', '_', 'U', 'N', 'P', 'A', 
    'R', 'K', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\001', '\022', '&', '\n', '\"', 'T', 'C', 'U', '_', 'T', 'R', 'A', 'N', 'S', 'P', 
    'M', 'O', 'T', 'O', 'R', 'P', 'A', 'R', 'K', 'R', 'E', 'Q', '_', 'P', 'A', 'R', 'K', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', 
    '\002', '\022', '#', '\n', '\037', 'T', 'C', 'U', '_', 'T', 'R', 'A', 'N', 'S', 'P', 'M', 'O', 'T', 'O', 'R', 'P', 'A', 'R', 'K', 'R', 
    'E', 'Q', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\207', '\001', '\n', '\030', 'T', 'c', 'u', '_', 's', 'h', 'i', 
    'f', 't', 'l', 'e', 'v', 'e', 'r', 't', 'o', 'p', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '\"', '\n', '\036', 'T', 'C', 'U', '_', 
    'S', 'H', 'I', 'F', 'T', 'L', 'E', 'V', 'E', 'R', 'T', 'O', 'P', 'R', 'E', 'Q', '_', 'N', 'O', 'R', 'E', 'Q', 'U', 'E', 'S', 
    'T', '\020', '\000', '\022', '$', '\n', ' ', 'T', 'C', 'U', '_', 'S', 'H', 'I', 'F', 'T', 'L', 'E', 'V', 'E', 'R', 'T', 'O', 'P', 'R', 
    'E', 'Q', '_', 'P', 'A', 'R', 'K', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\001', '\022', '!', '\n', '\035', 'T', 'C', 'U', '_', 'S', 
    'H', 'I', 'F', 'T', 'L', 'E', 'V', 'E', 'R', 'T', 'O', 'P', 'R', 'E', 'Q', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', 
    '\002', '\"', '\305', '\003', '\n', '\033', 'T', 'c', 'u', '_', 'c', 'u', 'r', 'r', 'e', 'n', 't', 'g', 'e', 'a', 'r', 'p', 'o', 's', 'i', 
    't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', '0', '\n', ',', 'T', 'C', 'U', '_', 'C', 'U', 'R', 'R', 'E', 'N', 'T', 'G', 'E', 
    'A', 'R', 'P', 'O', 'S', 'I', 'T', 'I', 'O', 'N', '_', 'D', 'R', 'I', 'V', 'E', 'T', 'R', 'A', 'I', 'N', 'O', 'P', 'E', 'N', 
    '_', 'G', 'E', 'A', 'R', 'N', '\020', '\000', '\022', '#', '\n', '\037', 'T', 'C', 'U', '_', 'C', 'U', 'R', 'R', 'E', 'N', 'T', 'G', 'E', 
    'A', 'R', 'P', 'O', 'S', 'I', 'T', 'I', 'O', 'N', '_', '1', 'S', 'T', 'G', 'E', 'A', 'R', '\020', '\001', '\022', '#', '\n', '\037', 'T', 
    'C', 'U', '_', 'C', 'U', 'R', 'R', 'E', 'N', 'T', 'G', 'E', 'A', 'R', 'P', 'O', 'S', 'I', 'T', 'I', 'O', 'N', '_', '2', 'N', 
    'D', 'G', 'E', 'A', 'R', '\020', '\002', '\022', '#', '\n', '\037', 'T', 'C', 'U', '_', 'C', 'U', 'R', 'R', 'E', 'N', 'T', 'G', 'E', 'A', 
    'R', 'P', 'O', 'S', 'I', 'T', 'I', 'O', 'N', '_', '3', 'R', 'D', 'G', 'E', 'A', 'R', '\020', '\003', '\022', '#', '\n', '\037', 'T', 'C', 
    'U', '_', 'C', 'U', 'R', 'R', 'E', 'N', 'T', 'G', 'E', 'A', 'R', 'P', 'O', 'S', 'I', 'T', 'I', 'O', 'N', '_', '4', 'T', 'H', 
    'G', 'E', 'A', 'R', '\020', '\004', '\022', '#', '\n', '\037', 'T', 'C', 'U', '_', 'C', 'U', 'R', 'R', 'E', 'N', 'T', 'G', 'E', 'A', 'R', 
    'P', 'O', 'S', 'I', 'T', 'I', 'O', 'N', '_', '5', 'T', 'H', 'G', 'E', 'A', 'R', '\020', '\005', '\022', '#', '\n', '\037', 'T', 'C', 'U', 
    '_', 'C', 'U', 'R', 'R', 'E', 'N', 'T', 'G', 'E', 'A', 'R', 'P', 'O', 'S', 'I', 'T', 'I', 'O', 'N', '_', '6', 'T', 'H', 'G', 
    'E', 'A', 'R', '\020', '\006', '\022', '#', '\n', '\037', 'T', 'C', 'U', '_', 'C', 'U', 'R', 'R', 'E', 'N', 'T', 'G', 'E', 'A', 'R', 'P', 
    'O', 'S', 'I', 'T', 'I', 'O', 'N', '_', '7', 'T', 'H', 'G', 'E', 'A', 'R', '\020', '\007', '\022', '#', '\n', '\037', 'T', 'C', 'U', '_', 
    'C', 'U', 'R', 'R', 'E', 'N', 'T', 'G', 'E', 'A', 'R', 'P', 'O', 'S', 'I', 'T', 'I', 'O', 'N', '_', '8', 'T', 'H', 'G', 'E', 
    'A', 'R', '\020', '\010', '\022', '\'', '\n', '#', 'T', 'C', 'U', '_', 'C', 'U', 'R', 'R', 'E', 'N', 'T', 'G', 'E', 'A', 'R', 'P', 'O', 
    'S', 'I', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'V', 'E', 'R', 'S', 'E', 'G', 'E', 'A', 'R', '\020', '\016', '\022', '#', '\n', '\037', 'T', 
    'C', 'U', '_', 'C', 'U', 'R', 'R', 'E', 'N', 'T', 'G', 'E', 'A', 'R', 'P', 'O', 'S', 'I', 'T', 'I', 'O', 'N', '_', 'I', 'N', 
    'V', 'A', 'L', 'I', 'D', '\020', '\017', '\"', '\353', '\007', '\n', '\026', 'E', 's', 'p', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '_', 
    '0', 'x', '2', '4', '1', '_', '2', '4', '1', '\022', '\036', '\n', '\026', 'e', 's', 'p', '_', 't', 'r', 'f', 'c', 'a', 's', 'e', 't', 
    'q', 'l', 'm', 't', 'd', 'b', 'y', 'e', 's', 'p', '\030', '\001', ' ', '\001', '(', '\005', '\022', 'd', '\n', '\027', 'e', 's', 'p', '_', 't', 
    'r', 'f', 'c', 'a', 's', 'e', 'm', 'o', 'd', 'r', 'e', 'q', 'd', 'b', 'y', 'e', 's', 'p', '\030', '\002', ' ', '\001', '(', '\016', '2', 
    'C', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'p', 'r', 'e', 
    's', 's', 'u', 'r', 'e', '_', '0', 'x', '2', '4', '1', '_', '2', '4', '1', '.', 'E', 's', 'p', '_', 't', 'r', 'f', 'c', 'a', 
    's', 'e', 'm', 'o', 'd', 'r', 'e', 'q', 'd', 'b', 'y', 'e', 's', 'p', 'T', 'y', 'p', 'e', '\022', 'v', '\n', ' ', 'e', 's', 'p', 
    '_', 'p', 'r', 'e', 's', 'o', 'f', 'f', 's', 'e', 't', 'm', 'a', 's', 't', 'e', 'r', 'c', 'y', 'l', 'i', 'n', 'd', 'e', 'r', 
    'v', 'a', 'l', 'i', '\030', '\003', ' ', '\001', '(', '\016', '2', 'L', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'E', 's', 'p', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '_', '0', 'x', '2', '4', '1', '_', '2', '4', 
    '1', '.', 'E', 's', 'p', '_', 'p', 'r', 'e', 's', 'o', 'f', 'f', 's', 'e', 't', 'm', 'a', 's', 't', 'e', 'r', 'c', 'y', 'l', 
    'i', 'n', 'd', 'e', 'r', 'v', 'a', 'l', 'i', 'T', 'y', 'p', 'e', '\022', '$', '\n', '\034', 'e', 's', 'p', '_', 'p', 'r', 'e', 's', 
    'o', 'f', 'f', 's', 'e', 't', 'm', 'a', 's', 't', 'e', 'r', 'c', 'y', 'l', 'i', 'n', 'd', 'e', 'r', '\030', '\004', ' ', '\001', '(', 
    '\005', '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', '2', '4', 
    '1', '\030', '\005', ' ', '\001', '(', '\005', '\022', 'v', '\n', ' ', 'e', 's', 'p', '_', 'm', 'a', 's', 't', 'e', 'r', '_', 'c', 'y', 'l', 
    'i', 'n', 'd', 'e', 'r', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '_', 's', 't', 'a', '\030', '\006', ' ', '\001', '(', '\016', '2', 
    'L', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'p', 'r', 'e', 
    's', 's', 'u', 'r', 'e', '_', '0', 'x', '2', '4', '1', '_', '2', '4', '1', '.', 'E', 's', 'p', '_', 'm', 'a', 's', 't', 'e', 
    'r', '_', 'c', 'y', 'l', 'i', 'n', 'd', 'e', 'r', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '_', 's', 't', 'a', 'T', 'y', 
    'p', 'e', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '2', '4', '1', '\030', '\007', ' ', '\001', '(', 
    '\005', '\022', '$', '\n', '\034', 'e', 's', 'p', '_', 'm', 'a', 's', 't', 'e', 'r', '_', 'c', 'y', 'l', 'i', 'n', 'd', 'e', 'r', '_', 
    'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '\030', '\010', ' ', '\001', '(', '\001', '\"', '\321', '\001', '\n', '\033', 'E', 's', 'p', '_', 't', 'r', 
    'f', 'c', 'a', 's', 'e', 'm', 'o', 'd', 'r', 'e', 'q', 'd', 'b', 'y', 'e', 's', 'p', 'T', 'y', 'p', 'e', '\022', '&', '\n', '\"', 
    'E', 'S', 'P', '_', 'T', 'R', 'F', 'C', 'A', 'S', 'E', 'M', 'O', 'D', 'R', 'E', 'Q', 'D', 'B', 'Y', 'E', 'S', 'P', '_', 'N', 
    'O', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\000', '\022', '-', '\n', ')', 'E', 'S', 'P', '_', 'T', 'R', 'F', 'C', 'A', 'S', 
    'E', 'M', 'O', 'D', 'R', 'E', 'Q', 'D', 'B', 'Y', 'E', 'S', 'P', '_', 'F', 'A', 'S', 'T', '_', 'O', 'P', 'E', 'N', '_', 'R', 
    'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\001', '\022', '6', '\n', '2', 'E', 'S', 'P', '_', 'T', 'R', 'F', 'C', 'A', 'S', 'E', 'M', 'O', 
    'D', 'R', 'E', 'Q', 'D', 'B', 'Y', 'E', 'S', 'P', '_', 'T', 'O', 'R', 'Q', 'U', 'E', '_', 'U', 'P', 'P', 'E', 'R', '_', 'L', 
    'I', 'M', 'I', 'T', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\002', '\022', '#', '\n', '\037', 'E', 'S', 'P', '_', 'T', 'R', 'F', 
    'C', 'A', 'S', 'E', 'M', 'O', 'D', 'R', 'E', 'Q', 'D', 'B', 'Y', 'E', 'S', 'P', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', '\020', 
    '\003', '\"', '\200', '\001', '\n', '$', 'E', 's', 'p', '_', 'p', 'r', 'e', 's', 'o', 'f', 'f', 's', 'e', 't', 'm', 'a', 's', 't', 'e', 
    'r', 'c', 'y', 'l', 'i', 'n', 'd', 'e', 'r', 'v', 'a', 'l', 'i', 'T', 'y', 'p', 'e', '\022', '*', '\n', '&', 'E', 'S', 'P', '_', 
    'P', 'R', 'E', 'S', 'O', 'F', 'F', 'S', 'E', 'T', 'M', 'A', 'S', 'T', 'E', 'R', 'C', 'Y', 'L', 'I', 'N', 'D', 'E', 'R', 'V', 
    'A', 'L', 'I', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', ',', '\n', '(', 'E', 'S', 'P', '_', 'P', 'R', 'E', 'S', 'O', 'F', 
    'F', 'S', 'E', 'T', 'M', 'A', 'S', 'T', 'E', 'R', 'C', 'Y', 'L', 'I', 'N', 'D', 'E', 'R', 'V', 'A', 'L', 'I', '_', 'I', 'N', 
    'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', '\200', '\001', '\n', '$', 'E', 's', 'p', '_', 'm', 'a', 's', 't', 'e', 'r', '_', 'c', 'y', 
    'l', 'i', 'n', 'd', 'e', 'r', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '_', 's', 't', 'a', 'T', 'y', 'p', 'e', '\022', '*', 
    '\n', '&', 'E', 'S', 'P', '_', 'M', 'A', 'S', 'T', 'E', 'R', '_', 'C', 'Y', 'L', 'I', 'N', 'D', 'E', 'R', '_', 'P', 'R', 'E', 
    'S', 'S', 'U', 'R', 'E', '_', 'S', 'T', 'A', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', ',', '\n', '(', 'E', 'S', 'P', '_', 
    'M', 'A', 'S', 'T', 'E', 'R', '_', 'C', 'Y', 'L', 'I', 'N', 'D', 'E', 'R', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 
    'S', 'T', 'A', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', '\345', '+', '\n', '\024', 'E', 's', 'p', '_', 's', 't', 'a', 
    't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '\022', 'T', '\n', '\020', 'e', 's', 'p', '_', 'h', 'h', 'c', 'a', 
    'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', '\030', '\001', ' ', '\001', '(', '\016', '2', ':', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', 
    '2', '4', '3', '.', 'E', 's', 'p', '_', 'h', 'h', 'c', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', 
    'N', '\n', '\r', 'e', 's', 'p', '_', 'h', 'h', 'c', 'a', 'c', 't', 'i', 'v', 'e', '\030', '\002', ' ', '\001', '(', '\016', '2', '7', '.', 
    'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 't', 'u', 
    's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '.', 'E', 's', 'p', '_', 'h', 'h', 'c', 'a', 'c', 't', 'i', 'v', 'e', 
    'T', 'y', 'p', 'e', '\022', 'N', '\n', '\r', 'e', 's', 'p', '_', 'h', 'd', 'c', 'a', 'c', 't', 'i', 'v', 'e', '\030', '\003', ' ', '\001', 
    '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 
    's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '.', 'E', 's', 'p', '_', 'h', 'd', 'c', 'a', 
    'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', 'p', '\n', '\036', 'e', 's', 'p', '_', 'l', 'd', 'm', 'b', 'l', 'c', '_', 'b', 
    'l', 'r', 'e', 'q', 'u', 'e', 's', 't', 'c', 'o', 'n', 't', 'r', 'o', 'l', 'l', 'e', 'r', '\030', '\004', ' ', '\001', '(', '\016', '2', 
    'H', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 
    't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '.', 'E', 's', 'p', '_', 'l', 'd', 'm', 'b', 'l', 'c', '_', 
    'b', 'l', 'r', 'e', 'q', 'u', 'e', 's', 't', 'c', 'o', 'n', 't', 'r', 'o', 'l', 'l', 'e', 'r', 'T', 'y', 'p', 'e', '\022', 'T', 
    '\n', '\020', 'e', 's', 'p', '_', 'c', 'd', 'p', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', '\030', '\005', ' ', '\001', '(', '\016', '2', 
    ':', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 
    't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '.', 'E', 's', 'p', '_', 'c', 'd', 'p', 'a', 'v', 'a', 'i', 
    'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', 'N', '\n', '\r', 'e', 's', 'p', '_', 'c', 'd', 'p', 'a', 'c', 't', 'i', 'v', 
    'e', '\030', '\006', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'E', 's', 'p', '_', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '.', 'E', 's', 'p', 
    '_', 'c', 'd', 'p', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '`', '\n', '\026', 'e', 's', 'p', '_', 'e', 'p', 'b', 
    'w', 'a', 'r', 'n', 'i', 'n', 'g', 'm', 'e', 's', 's', 'a', 'g', 'e', '3', '\030', '\007', ' ', '\001', '(', '\016', '2', '@', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 't', 'u', 's', 
    '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '.', 'E', 's', 'p', '_', 'e', 'p', 'b', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 
    'm', 'e', 's', 's', 'a', 'g', 'e', '3', 'T', 'y', 'p', 'e', '\022', '`', '\n', '\026', 'e', 's', 'p', '_', 'e', 'p', 'b', 'w', 'a', 
    'r', 'n', 'i', 'n', 'g', 'm', 'e', 's', 's', 'a', 'g', 'e', '2', '\030', '\010', ' ', '\001', '(', '\016', '2', '@', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 't', 'u', 's', '_', '0', 
    'x', '2', '4', '3', '_', '2', '4', '3', '.', 'E', 's', 'p', '_', 'e', 'p', 'b', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'm', 'e', 
    's', 's', 'a', 'g', 'e', '2', 'T', 'y', 'p', 'e', '\022', '`', '\n', '\026', 'e', 's', 'p', '_', 'e', 'p', 'b', 'w', 'a', 'r', 'n', 
    'i', 'n', 'g', 'm', 'e', 's', 's', 'a', 'g', 'e', '1', '\030', '\t', ' ', '\001', '(', '\016', '2', '@', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '2', 
    '4', '3', '_', '2', '4', '3', '.', 'E', 's', 'p', '_', 'e', 'p', 'b', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'm', 'e', 's', 's', 
    'a', 'g', 'e', '1', 'T', 'y', 'p', 'e', '\022', '^', '\n', '\025', 'e', 's', 'p', '_', 'a', 'v', 'h', 'w', 'a', 'r', 'n', 'i', 'n', 
    'g', 'm', 'e', 's', 's', 'a', 'g', 'e', '\030', '\n', ' ', '\001', '(', '\016', '2', '?', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', 
    '2', '4', '3', '.', 'E', 's', 'p', '_', 'a', 'v', 'h', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'm', 'e', 's', 's', 'a', 'g', 'e', 
    'T', 'y', 'p', 'e', '\022', 'N', '\n', '\r', 'e', 's', 'p', '_', 'a', 'v', 'h', 'a', 'c', 't', 'i', 'v', 'e', '\030', '\013', ' ', '\001', 
    '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 
    's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '.', 'E', 's', 'p', '_', 'a', 'v', 'h', 'a', 
    'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', 'P', '\n', '\016', 'e', 's', 'p', '_', 'a', 'v', 'h', 's', 't', 'a', 'n', 'd', 
    'b', 'y', '\030', '\014', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 
    's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '.', 'E', 's', 
    'p', '_', 'a', 'v', 'h', 's', 't', 'a', 'n', 'd', 'b', 'y', 'T', 'y', 'p', 'e', '\022', 'V', '\n', '\021', 'e', 's', 'p', '_', 'a', 
    'v', 'h', 'a', 'v', 'a', 'b', 'l', 'i', 'a', 'b', 'l', 'e', '\030', '\r', ' ', '\001', '(', '\016', '2', ';', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', 
    '2', '4', '3', '_', '2', '4', '3', '.', 'E', 's', 'p', '_', 'a', 'v', 'h', 'a', 'v', 'a', 'b', 'l', 'i', 'a', 'b', 'l', 'e', 
    'T', 'y', 'p', 'e', '\022', 'N', '\n', '\r', 'e', 's', 'p', '_', 'v', 'd', 'c', 'f', 'l', 'g', 'f', 'l', 't', '\030', '\016', ' ', '\001', 
    '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 
    's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '.', 'E', 's', 'p', '_', 'v', 'd', 'c', 'f', 
    'l', 'g', 'f', 'l', 't', 'T', 'y', 'p', 'e', '\022', 'N', '\n', '\r', 'e', 's', 'p', '_', 't', 'c', 's', 'f', 'l', 'g', 'f', 'l', 
    't', '\030', '\017', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'E', 's', 'p', '_', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '.', 'E', 's', 'p', 
    '_', 't', 'c', 's', 'f', 'l', 'g', 'f', 'l', 't', 'T', 'y', 'p', 'e', '\022', 'R', '\n', '\017', 'e', 's', 'p', '_', 't', 'c', 's', 
    'c', 't', 'r', 'l', 'a', 'c', 't', 'v', '\030', '\020', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', 
    '2', '4', '3', '.', 'E', 's', 'p', '_', 't', 'c', 's', 'c', 't', 'r', 'l', 'a', 'c', 't', 'v', 'T', 'y', 'p', 'e', '\022', 'R', 
    '\n', '\017', 'e', 's', 'p', '_', 'e', 's', 'p', 'c', 't', 'r', 'l', 'a', 'c', 't', 'v', '\030', '\021', ' ', '\001', '(', '\016', '2', '9', 
    '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 't', 
    'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '.', 'E', 's', 'p', '_', 'e', 's', 'p', 'c', 't', 'r', 'l', 'a', 
    'c', 't', 'v', 'T', 'y', 'p', 'e', '\022', '\\', '\n', '\024', 'e', 's', 'p', '_', 'd', 'r', 'i', 'v', 'i', 'n', 'g', '_', 'm', 'o', 
    'd', 'e', '_', 'r', 'e', 'q', '\030', '\022', ' ', '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', 
    '3', '.', 'E', 's', 'p', '_', 'd', 'r', 'i', 'v', 'i', 'n', 'g', '_', 'm', 'o', 'd', 'e', '_', 'r', 'e', 'q', 'T', 'y', 'p', 
    'e', '\022', 'R', '\n', '\017', 'e', 's', 'p', '_', 'e', 's', 'p', 'i', 'n', 'f', 'o', 'l', 'a', 'm', 'p', '\030', '\023', ' ', '\001', '(', 
    '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 
    't', 'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '.', 'E', 's', 'p', '_', 'e', 's', 'p', 'i', 'n', 
    'f', 'o', 'l', 'a', 'm', 'p', 'T', 'y', 'p', 'e', '\022', 'T', '\n', '\020', 'e', 's', 'p', '_', 'e', 's', 'p', 'e', 'n', 'a', 'b', 
    'l', 'e', 's', 't', 's', '\030', '\024', ' ', '\001', '(', '\016', '2', ':', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', 
    '.', 'E', 's', 'p', '_', 'e', 's', 'p', 'e', 'n', 'a', 'b', 'l', 'e', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'X', '\n', '\022', 
    'e', 's', 'p', '_', 'g', 'e', 'a', 'r', 's', 'h', 'i', 'f', 't', 'p', 'r', 'e', 'v', 'n', '\030', '\025', ' ', '\001', '(', '\016', '2', 
    '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 
    't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '.', 'E', 's', 'p', '_', 'g', 'e', 'a', 'r', 's', 'h', 'i', 
    'f', 't', 'p', 'r', 'e', 'v', 'n', 'T', 'y', 'p', 'e', '\022', 'N', '\n', '\r', 'e', 's', 'p', '_', 'e', 'p', 'b', 's', 't', 'a', 
    't', 'u', 's', '\030', '\026', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '.', 'E', 
    's', 'p', '_', 'e', 'p', 'b', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\024', 'r', 'o', 'l', 'l', 'i', 
    'n', 'g', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', '2', '4', '3', '\030', '\027', ' ', '\001', '(', '\005', '\022', 'X', '\n', '\022', 
    'r', 'o', 'l', 'l', 'e', 'r', 'b', 'e', 'n', 'c', 'h', 'm', 'o', 'd', 'e', 's', 't', 's', '\030', '\030', ' ', '\001', '(', '\016', '2', 
    '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 
    't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '.', 'R', 'o', 'l', 'l', 'e', 'r', 'b', 'e', 'n', 'c', 'h', 
    'm', 'o', 'd', 'e', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 
    'x', '2', '4', '3', '\030', '\031', ' ', '\001', '(', '\005', '\022', 'X', '\n', '\022', 'e', 's', 'p', '_', 'e', 'p', 'b', 'e', 'r', 'r', 'o', 
    'r', 's', 't', 'a', 't', 'u', 's', '\030', '\032', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', 
    '4', '3', '.', 'E', 's', 'p', '_', 'e', 'p', 'b', 'e', 'r', 'r', 'o', 'r', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', 
    '\022', 'R', '\n', '\017', 'e', 's', 'p', '_', 'c', 'c', 's', 'w', 'i', 't', 'c', 'h', 'o', 'f', 'f', '\030', '\033', ' ', '\001', '(', '\016', 
    '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 
    'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '.', 'E', 's', 'p', '_', 'c', 'c', 's', 'w', 'i', 't', 
    'c', 'h', 'o', 'f', 'f', 'T', 'y', 'p', 'e', '\022', 'T', '\n', '\020', 'e', 's', 'p', '_', 'h', 'd', 'c', 'a', 'v', 'a', 'i', 'l', 
    'a', 'b', 'l', 'e', '\030', '\034', ' ', '\001', '(', '\016', '2', ':', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'E', 's', 'p', '_', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '.', 
    'E', 's', 'p', '_', 'h', 'd', 'c', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\"', 'Z', '\n', '\024', 'E', 
    's', 'p', '_', 'h', 'h', 'c', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'E', 'S', 
    'P', '_', 'H', 'H', 'C', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', 
    '\000', '\022', '\"', '\n', '\036', 'E', 'S', 'P', '_', 'H', 'H', 'C', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'N', 'O', 'T', 
    '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', '\001', '\"', 'K', '\n', '\021', 'E', 's', 'p', '_', 'h', 'h', 'c', 'a', 'c', 
    't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'E', 'S', 'P', '_', 'H', 'H', 'C', 'A', 'C', 'T', 'I', 'V', 'E', 
    '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\030', '\n', '\024', 'E', 'S', 'P', '_', 'H', 'H', 'C', 'A', 
    'C', 'T', 'I', 'V', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', 'x', '\n', '\021', 'E', 's', 'p', '_', 'h', 'd', 'c', 
    'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '\025', '\n', '\021', 'E', 'S', 'P', '_', 'H', 'D', 'C', 'A', 'C', 'T', 'I', 
    'V', 'E', '_', 'O', 'F', 'F', '\020', '\000', '\022', '#', '\n', '\037', 'E', 'S', 'P', '_', 'H', 'D', 'C', 'A', 'C', 'T', 'I', 'V', 'E', 
    '_', 'O', 'N', '_', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'B', 'R', 'A', 'K', 'I', 'N', 'G', '\020', '\001', '\022', '\'', '\n', '#', 'E', 
    'S', 'P', '_', 'H', 'D', 'C', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'O', 'N', '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 
    'E', '_', 'B', 'R', 'A', 'K', 'I', 'N', 'G', '\020', '\002', '\"', '\206', '\001', '\n', '\"', 'E', 's', 'p', '_', 'l', 'd', 'm', 'b', 'l', 
    'c', '_', 'b', 'l', 'r', 'e', 'q', 'u', 'e', 's', 't', 'c', 'o', 'n', 't', 'r', 'o', 'l', 'l', 'e', 'r', 'T', 'y', 'p', 'e', 
    '\022', '1', '\n', '-', 'E', 'S', 'P', '_', 'L', 'D', 'M', 'B', 'L', 'C', '_', 'B', 'L', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', 'C', 
    'O', 'N', 'T', 'R', 'O', 'L', 'L', 'E', 'R', '_', 'N', 'O', 'T', '_', 'I', 'L', 'L', 'U', 'M', 'I', 'N', 'A', 'T', 'E', '\020', 
    '\000', '\022', '-', '\n', ')', 'E', 'S', 'P', '_', 'L', 'D', 'M', 'B', 'L', 'C', '_', 'B', 'L', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', 
    'C', 'O', 'N', 'T', 'R', 'O', 'L', 'L', 'E', 'R', '_', 'I', 'L', 'L', 'U', 'M', 'I', 'N', 'A', 'T', 'E', '\020', '\001', '\"', 'Z', 
    '\n', '\024', 'E', 's', 'p', '_', 'c', 'd', 'p', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', '\036', '\n', 
    '\032', 'E', 'S', 'P', '_', 'C', 'D', 'P', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 
    'L', 'E', '\020', '\000', '\022', '\"', '\n', '\036', 'E', 'S', 'P', '_', 'C', 'D', 'P', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 
    'N', 'O', 'T', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', '\001', '\"', 'K', '\n', '\021', 'E', 's', 'p', '_', 'c', 'd', 
    'p', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'E', 'S', 'P', '_', 'C', 'D', 'P', 'A', 'C', 'T', 
    'I', 'V', 'E', '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\030', '\n', '\024', 'E', 'S', 'P', '_', 'C', 
    'D', 'P', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', '\253', '\001', '\n', '\032', 'E', 's', 'p', 
    '_', 'e', 'p', 'b', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'm', 'e', 's', 's', 'a', 'g', 'e', '3', 'T', 'y', 'p', 'e', '\022', '%', 
    '\n', '!', 'E', 'S', 'P', '_', 'E', 'P', 'B', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '3', '_', 
    'N', 'O', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', '\020', '\000', '\022', 'f', '\n', 'b', 'E', 'S', 'P', '_', 'E', 'P', 'B', 'W', 'A', 
    'R', 'N', 'I', 'N', 'G', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '3', '_', 'W', 'H', 'E', 'N', '_', 'A', 'P', 'P', 'L', 'I', 'E', 
    'D', '_', 'T', 'H', 'E', '_', 'E', 'P', 'B', '_', 'T', 'H', 'E', '_', 'S', 'L', 'O', 'P', 'E', '_', 'O', 'F', '_', 'V', 'E', 
    'H', 'I', 'C', 'L', 'E', '_', 'I', 'S', '_', 'M', 'O', 'R', 'E', '_', 'T', 'H', 'A', 'N', '_', '2', '0', '_', 'F', 'O', 'R', 
    '_', 'P', 'K', '_', '3', '0', '_', 'F', 'O', 'R', '_', 'S', 'U', 'V', '\020', '\001', '\"', '\215', '\001', '\n', '\032', 'E', 's', 'p', '_', 
    'e', 'p', 'b', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'm', 'e', 's', 's', 'a', 'g', 'e', '2', 'T', 'y', 'p', 'e', '\022', '%', '\n', 
    '!', 'E', 'S', 'P', '_', 'E', 'P', 'B', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '2', '_', 'N', 
    'O', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', '\020', '\000', '\022', 'H', '\n', 'D', 'E', 'S', 'P', '_', 'E', 'P', 'B', 'W', 'A', 'R', 
    'N', 'I', 'N', 'G', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '2', '_', 'E', 'P', 'B', '_', 'D', 'R', 'I', 'V', 'E', 'R', 'O', 'F', 
    'F', '_', 'W', 'I', 'T', 'H', 'O', 'U', 'T', '_', 'S', 'E', 'A', 'T', 'B', 'L', 'E', 'T', '_', 'O', 'R', '_', 'D', 'R', 'I', 
    'V', 'E', 'R', '_', 'D', 'O', 'O', 'R', '\020', '\001', '\"', '\212', '\001', '\n', '\032', 'E', 's', 'p', '_', 'e', 'p', 'b', 'w', 'a', 'r', 
    'n', 'i', 'n', 'g', 'm', 'e', 's', 's', 'a', 'g', 'e', '1', 'T', 'y', 'p', 'e', '\022', '%', '\n', '!', 'E', 'S', 'P', '_', 'E', 
    'P', 'B', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '1', '_', 'N', 'O', '_', 'D', 'I', 'S', 'P', 
    'L', 'A', 'Y', '\020', '\000', '\022', 'E', '\n', 'A', 'E', 'S', 'P', '_', 'E', 'P', 'B', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'M', 'E', 
    'S', 'S', 'A', 'G', 'E', '1', '_', 'N', 'O', '_', 'B', 'R', 'A', 'K', 'E', '_', 'P', 'E', 'D', 'A', 'L', '_', 'P', 'R', 'E', 
    'S', 'S', 'E', 'D', '_', 'A', 'N', 'D', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', '_', 'T', 'H', 'E', '_', 'E', 'P', 'B', '\020', 
    '\001', '\"', '\233', '\001', '\n', '\031', 'E', 's', 'p', '_', 'a', 'v', 'h', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'm', 'e', 's', 's', 'a', 
    'g', 'e', 'T', 'y', 'p', 'e', '\022', '$', '\n', ' ', 'E', 'S', 'P', '_', 'A', 'V', 'H', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'M', 
    'E', 'S', 'S', 'A', 'G', 'E', '_', 'N', 'O', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\000', '\022', 'X', '\n', 'T', 'E', 'S', 
    'P', '_', 'A', 'V', 'H', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'M', 'E', 'S', 'S', 'A', 'G', 'E', '_', 'P', 'L', 'E', 'A', 'S', 
    'E', '_', 'C', 'L', 'O', 'S', 'E', '_', 'T', 'H', 'E', '_', 'D', 'O', 'O', 'R', '_', 'O', 'R', '_', 'S', 'E', 'A', 'T', 'B', 
    'L', 'E', 'T', '_', 'T', 'H', 'E', 'N', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'T', 'H', 'E', '_', 'A', 'V', 'H', 
    '_', 'B', 'U', 'T', 'T', 'O', 'N', '\020', '\001', '\"', 'I', '\n', '\021', 'E', 's', 'p', '_', 'a', 'v', 'h', 'a', 'c', 't', 'i', 'v', 
    'e', 'T', 'y', 'p', 'e', '\022', '\032', '\n', '\026', 'E', 'S', 'P', '_', 'A', 'V', 'H', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'I', 'N', 
    'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\030', '\n', '\024', 'E', 'S', 'P', '_', 'A', 'V', 'H', 'A', 'C', 'T', 'I', 'V', 'E', 
    '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', 'P', '\n', '\022', 'E', 's', 'p', '_', 'a', 'v', 'h', 's', 't', 'a', 'n', 'd', 
    'b', 'y', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'E', 'S', 'P', '_', 'A', 'V', 'H', 'S', 'T', 'A', 'N', 'D', 'B', 'Y', '_', 
    'N', 'O', 'T', '_', 'S', 'T', 'A', 'N', 'D', 'B', 'Y', '\020', '\000', '\022', '\032', '\n', '\026', 'E', 'S', 'P', '_', 'A', 'V', 'H', 'S', 
    'T', 'A', 'N', 'D', 'B', 'Y', '_', 'S', 'T', 'A', 'N', 'D', 'B', 'Y', '\020', '\001', '\"', ']', '\n', '\025', 'E', 's', 'p', '_', 'a', 
    'v', 'h', 'a', 'v', 'a', 'b', 'l', 'i', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', '\037', '\n', '\033', 'E', 'S', 'P', '_', 'A', 
    'V', 'H', 'A', 'V', 'A', 'B', 'L', 'I', 'A', 'B', 'L', 'E', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', '\000', '\022', 
    '#', '\n', '\037', 'E', 'S', 'P', '_', 'A', 'V', 'H', 'A', 'V', 'A', 'B', 'L', 'I', 'A', 'B', 'L', 'E', '_', 'N', 'O', 'T', '_', 
    'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', '\001', '\"', 'L', '\n', '\021', 'E', 's', 'p', '_', 'v', 'd', 'c', 'f', 'l', 'g', 
    'f', 'l', 't', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'E', 'S', 'P', '_', 'V', 'D', 'C', 'F', 'L', 'G', 'F', 'L', 'T', '_', 
    'N', 'O', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', '\020', '\000', '\022', '\031', '\n', '\025', 'E', 'S', 'P', '_', 'V', 'D', 'C', 'F', 'L', 
    'G', 'F', 'L', 'T', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', '\020', '\001', '\"', 'L', '\n', '\021', 'E', 's', 'p', '_', 't', 'c', 's', 
    'f', 'l', 'g', 'f', 'l', 't', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'E', 'S', 'P', '_', 'T', 'C', 'S', 'F', 'L', 'G', 'F', 
    'L', 'T', '_', 'N', 'O', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', '\020', '\000', '\022', '\031', '\n', '\025', 'E', 'S', 'P', '_', 'T', 'C', 
    'S', 'F', 'L', 'G', 'F', 'L', 'T', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', '\020', '\001', '\"', 'Q', '\n', '\023', 'E', 's', 'p', '_', 
    't', 'c', 's', 'c', 't', 'r', 'l', 'a', 'c', 't', 'v', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'E', 'S', 'P', '_', 'T', 'C', 
    'S', 'C', 'T', 'R', 'L', 'A', 'C', 'T', 'V', '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\032', '\n', 
    '\026', 'E', 'S', 'P', '_', 'T', 'C', 'S', 'C', 'T', 'R', 'L', 'A', 'C', 'T', 'V', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', 
    '\"', 'Q', '\n', '\023', 'E', 's', 'p', '_', 'e', 's', 'p', 'c', 't', 'r', 'l', 'a', 'c', 't', 'v', 'T', 'y', 'p', 'e', '\022', '\036', 
    '\n', '\032', 'E', 'S', 'P', '_', 'E', 'S', 'P', 'C', 'T', 'R', 'L', 'A', 'C', 'T', 'V', '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 
    'I', 'V', 'E', '\020', '\000', '\022', '\032', '\n', '\026', 'E', 'S', 'P', '_', 'E', 'S', 'P', 'C', 'T', 'R', 'L', 'A', 'C', 'T', 'V', '_', 
    'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', '\251', '\003', '\n', '\030', 'E', 's', 'p', '_', 'd', 'r', 'i', 'v', 'i', 'n', 'g', '_', 
    'm', 'o', 'd', 'e', '_', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'E', 'S', 'P', '_', 'D', 'R', 'I', 'V', 'I', 
    'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'A', 'U', 'T', 'O', '\020', '\000', '\022', '\035', '\n', '\031', 'E', 'S', 'P', 
    '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'S', 'N', 'O', 'W', '\020', '\001', '\022', 
    ' ', '\n', '\034', 'E', 'S', 'P', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'N', 
    'O', '_', 'U', 'S', 'E', 'D', '\020', '\002', '\022', '\036', '\n', '\032', 'E', 'S', 'P', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 
    'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'S', 'P', 'O', 'R', 'T', '\020', '\003', '\022', '\034', '\n', '\030', 'E', 'S', 'P', '_', 'D', 'R', 
    'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'E', 'C', 'O', '\020', '\004', '\022', '\033', '\n', '\027', 'E', 
    'S', 'P', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', '4', 'L', '\020', '\005', '\022', 
    '\035', '\n', '\031', 'E', 'S', 'P', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'R', 
    'O', 'C', 'K', '\020', '\006', '\022', '\037', '\n', '\033', 'E', 'S', 'P', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', 
    '_', 'R', 'E', 'Q', '_', 'W', 'E', 'T', 'M', 'U', 'D', '\020', '\007', '\022', '\035', '\n', '\031', 'E', 'S', 'P', '_', 'D', 'R', 'I', 'V', 
    'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'S', 'A', 'N', 'D', '\020', '\010', '\022', '%', '\n', '!', 'E', 'S', 
    'P', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'A', 'T', 'S', '_', 'S', 'H', 
    'I', 'F', 'T', 'I', 'N', 'G', '\020', '\r', '\022', '*', '\n', '&', 'E', 'S', 'P', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 
    'O', 'D', 'E', '_', 'R', 'E', 'Q', '_', 'A', 'T', 'S', '_', 'S', 'H', 'I', 'F', 'T', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', 
    '\020', '\016', '\022', ' ', '\n', '\034', 'E', 'S', 'P', '_', 'D', 'R', 'I', 'V', 'I', 'N', 'G', '_', 'M', 'O', 'D', 'E', '_', 'R', 'E', 
    'Q', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\017', '\"', 'F', '\n', '\023', 'E', 's', 'p', '_', 'e', 's', 'p', 'i', 'n', 'f', 
    'o', 'l', 'a', 'm', 'p', 'T', 'y', 'p', 'e', '\022', '\027', '\n', '\023', 'E', 'S', 'P', '_', 'E', 'S', 'P', 'I', 'N', 'F', 'O', 'L', 
    'A', 'M', 'P', '_', 'O', 'F', 'F', '\020', '\000', '\022', '\026', '\n', '\022', 'E', 'S', 'P', '_', 'E', 'S', 'P', 'I', 'N', 'F', 'O', 'L', 
    'A', 'M', 'P', '_', 'O', 'N', '\020', '\001', '\"', '[', '\n', '\024', 'E', 's', 'p', '_', 'e', 's', 'p', 'e', 'n', 'a', 'b', 'l', 'e', 
    's', 't', 's', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'E', 'S', 'P', '_', 'E', 'S', 'P', 'E', 'N', 'A', 'B', 'L', 'E', 'S', 
    'T', 'S', '_', 'E', 'S', 'P', '_', 'D', 'I', 'S', 'A', 'B', 'L', 'E', 'D', '\020', '\000', '\022', ' ', '\n', '\034', 'E', 'S', 'P', '_', 
    'E', 'S', 'P', 'E', 'N', 'A', 'B', 'L', 'E', 'S', 'T', 'S', '_', 'E', 'S', 'P', '_', 'E', 'N', 'A', 'B', 'L', 'E', 'D', '\020', 
    '\001', '\"', '\271', '\001', '\n', '\026', 'E', 's', 'p', '_', 'g', 'e', 'a', 'r', 's', 'h', 'i', 'f', 't', 'p', 'r', 'e', 'v', 'n', 'T', 
    'y', 'p', 'e', '\022', '!', '\n', '\035', 'E', 'S', 'P', '_', 'G', 'E', 'A', 'R', 'S', 'H', 'I', 'F', 'T', 'P', 'R', 'E', 'V', 'N', 
    '_', 'N', 'O', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\000', '\022', '&', '\n', '\"', 'E', 'S', 'P', '_', 'G', 'E', 'A', 'R', 
    'S', 'H', 'I', 'F', 'T', 'P', 'R', 'E', 'V', 'N', '_', 'I', 'N', 'H', 'I', 'B', 'I', 'T', '_', 'U', 'P', 'S', 'H', 'I', 'F', 
    'T', '\020', '\001', '\022', ')', '\n', '%', 'E', 'S', 'P', '_', 'G', 'E', 'A', 'R', 'S', 'H', 'I', 'F', 'T', 'P', 'R', 'E', 'V', 'N', 
    '_', 'I', 'N', 'H', 'I', 'B', 'I', 'T', '_', 'D', 'O', 'W', 'N', '_', 'S', 'H', 'I', 'F', 'T', '\020', '\002', '\022', ')', '\n', '%', 
    'E', 'S', 'P', '_', 'G', 'E', 'A', 'R', 'S', 'H', 'I', 'F', 'T', 'P', 'R', 'E', 'V', 'N', '_', 'I', 'N', 'H', 'I', 'B', 'I', 
    'T', '_', 'A', 'L', 'L', '_', 'S', 'H', 'I', 'F', 'T', 'S', '\020', '\003', '\"', '\270', '\001', '\n', '\021', 'E', 's', 'p', '_', 'e', 'p', 
    'b', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\032', '\n', '\026', 'E', 'S', 'P', '_', 'E', 'P', 'B', 'S', 'T', 'A', 
    'T', 'U', 'S', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', 'D', '\020', '\000', '\022', '\031', '\n', '\025', 'E', 'S', 'P', '_', 'E', 'P', 'B', 
    'S', 'T', 'A', 'T', 'U', 'S', '_', 'A', 'P', 'P', 'L', 'I', 'E', 'D', '\020', '\001', '\022', '\034', '\n', '\030', 'E', 'S', 'P', '_', 'E', 
    'P', 'B', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'I', 'N', 'G', 'R', '\020', '\002', '\022', '\032', '\n', '\026', 
    'E', 'S', 'P', '_', 'E', 'P', 'B', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'A', 'P', 'P', 'L', 'Y', 'I', 'N', 'G', '\020', '\003', '\022', 
    '\031', '\n', '\025', 'E', 'S', 'P', '_', 'E', 'P', 'B', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'U', 'N', 'K', 'N', 'O', 'W', 'N', '\020', 
    '\004', '\022', '\027', '\n', '\023', 'E', 'S', 'P', '_', 'E', 'P', 'B', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'E', 'R', 'R', 'O', 'R', '\020', 
    '\005', '\"', 'z', '\n', '\026', 'R', 'o', 'l', 'l', 'e', 'r', 'b', 'e', 'n', 'c', 'h', 'm', 'o', 'd', 'e', 's', 't', 's', 'T', 'y', 
    'p', 'e', '\022', '0', '\n', ',', 'R', 'O', 'L', 'L', 'E', 'R', 'B', 'E', 'N', 'C', 'H', 'M', 'O', 'D', 'E', 'S', 'T', 'S', '_', 
    'R', 'O', 'L', 'L', 'E', 'R', 'B', 'E', 'N', 'C', 'H', '_', 'M', 'O', 'D', 'E', '_', 'I', 'N', 'A', 'C', 'T', 'I', 'V', 'E', 
    '\020', '\000', '\022', '.', '\n', '*', 'R', 'O', 'L', 'L', 'E', 'R', 'B', 'E', 'N', 'C', 'H', 'M', 'O', 'D', 'E', 'S', 'T', 'S', '_', 
    'R', 'O', 'L', 'L', 'E', 'R', 'B', 'E', 'N', 'C', 'H', '_', 'M', 'O', 'D', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', 
    '\"', '\233', '\001', '\n', '\026', 'E', 's', 'p', '_', 'e', 'p', 'b', 'e', 'r', 'r', 'o', 'r', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 
    'p', 'e', '\022', ' ', '\n', '\034', 'E', 'S', 'P', '_', 'E', 'P', 'B', 'E', 'R', 'R', 'O', 'R', 'S', 'T', 'A', 'T', 'U', 'S', '_', 
    'U', 'N', 'D', 'E', 'F', 'I', 'N', 'E', 'D', '\020', '\000', '\022', '\037', '\n', '\033', 'E', 'S', 'P', '_', 'E', 'P', 'B', 'E', 'R', 'R', 
    'O', 'R', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'N', 'O', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\001', '\022', '\034', '\n', '\030', 'E', 'S', 
    'P', '_', 'E', 'P', 'B', 'E', 'R', 'R', 'O', 'R', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\002', '\022', 
    ' ', '\n', '\034', 'E', 'S', 'P', '_', 'E', 'P', 'B', 'E', 'R', 'R', 'O', 'R', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'D', 'I', 'A', 
    'G', 'N', 'O', 'S', 'I', 'S', '\020', '\003', '\"', 'w', '\n', '\023', 'E', 's', 'p', '_', 'c', 'c', 's', 'w', 'i', 't', 'c', 'h', 'o', 
    'f', 'f', 'T', 'y', 'p', 'e', '\022', '1', '\n', '-', 'E', 'S', 'P', '_', 'C', 'C', 'S', 'W', 'I', 'T', 'C', 'H', 'O', 'F', 'F', 
    '_', 'N', 'O', 'T', '_', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'O', 'F', 'F', '_', 'C', 'R', 'U', 'I', 'S', 'E', '_', 'C', 'O', 
    'N', 'T', 'R', 'O', 'L', '\020', '\000', '\022', '-', '\n', ')', 'E', 'S', 'P', '_', 'C', 'C', 'S', 'W', 'I', 'T', 'C', 'H', 'O', 'F', 
    'F', '_', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'O', 'F', 'F', '_', 'C', 'R', 'U', 'I', 'S', 'E', '_', 'C', 'O', 'N', 'T', 'R', 
    'O', 'L', '\020', '\001', '\"', 'Z', '\n', '\024', 'E', 's', 'p', '_', 'h', 'd', 'c', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 
    'y', 'p', 'e', '\022', '\036', '\n', '\032', 'E', 'S', 'P', '_', 'H', 'D', 'C', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'A', 
    'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', '\000', '\022', '\"', '\n', '\036', 'E', 'S', 'P', '_', 'H', 'D', 'C', 'A', 'V', 'A', 'I', 
    'L', 'A', 'B', 'L', 'E', '_', 'N', 'O', 'T', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', '\001', '\"', '\330', '\004', '\n', 
    '\022', 'E', 's', 'p', '_', 'a', 'x', 'a', 'y', '_', '0', 'x', '2', '4', '2', '_', '2', '4', '2', '\022', '\020', '\n', '\010', 'e', 's', 
    'p', '_', 'a', 'l', 'a', 't', '\030', '\001', ' ', '\001', '(', '\001', '\022', '\023', '\n', '\013', 'e', 's', 'p', '_', 'y', 'a', 'w', 'r', 'a', 
    't', 'e', '\030', '\002', ' ', '\001', '(', '\001', '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 
    'e', 'r', '_', '0', 'x', '2', '4', '2', '\030', '\003', ' ', '\001', '(', '\005', '\022', 'T', '\n', '\021', 'e', 's', 'p', '_', 'y', 'a', 'w', 
    'r', 'a', 't', 'e', 's', 't', 'a', 't', 'u', 's', '\030', '\004', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 'x', 'a', 'y', '_', '0', 'x', '2', '4', '2', '_', 
    '2', '4', '2', '.', 'E', 's', 'p', '_', 'y', 'a', 'w', 'r', 'a', 't', 'e', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', 
    '\022', 'N', '\n', '\016', 'e', 's', 'p', '_', 'a', 'l', 'a', 't', 's', 't', 'a', 't', 'u', 's', '\030', '\005', ' ', '\001', '(', '\016', '2', 
    '6', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 'x', 'a', 
    'y', '_', '0', 'x', '2', '4', '2', '_', '2', '4', '2', '.', 'E', 's', 'p', '_', 'a', 'l', 'a', 't', 's', 't', 'a', 't', 'u', 
    's', 'T', 'y', 'p', 'e', '\022', 'N', '\n', '\016', 'e', 's', 'p', '_', 'a', 'l', 'g', 't', 's', 't', 'a', 't', 'u', 's', '\030', '\006', 
    ' ', '\001', '(', '\016', '2', '6', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 
    'p', '_', 'a', 'x', 'a', 'y', '_', '0', 'x', '2', '4', '2', '_', '2', '4', '2', '.', 'E', 's', 'p', '_', 'a', 'l', 'g', 't', 
    's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', 
    '2', '4', '2', '\030', '\007', ' ', '\001', '(', '\005', '\022', '\020', '\n', '\010', 'e', 's', 'p', '_', 'a', 'l', 'g', 't', '\030', '\010', ' ', '\001', 
    '(', '\001', '\"', 'N', '\n', '\025', 'E', 's', 'p', '_', 'y', 'a', 'w', 'r', 'a', 't', 'e', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 
    'p', 'e', '\022', '\030', '\n', '\024', 'E', 'S', 'P', '_', 'Y', 'A', 'W', 'R', 'A', 'T', 'E', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'O', 
    'K', '\020', '\000', '\022', '\033', '\n', '\027', 'E', 'S', 'P', '_', 'Y', 'A', 'W', 'R', 'A', 'T', 'E', 'S', 'T', 'A', 'T', 'U', 'S', '_', 
    'F', 'A', 'U', 'L', 'T', '\020', '\001', '\"', 'E', '\n', '\022', 'E', 's', 'p', '_', 'a', 'l', 'a', 't', 's', 't', 'a', 't', 'u', 's', 
    'T', 'y', 'p', 'e', '\022', '\025', '\n', '\021', 'E', 'S', 'P', '_', 'A', 'L', 'A', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'O', 'K', 
    '\020', '\000', '\022', '\030', '\n', '\024', 'E', 'S', 'P', '_', 'A', 'L', 'A', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'F', 'A', 'U', 'L', 
    'T', '\020', '\001', '\"', 'E', '\n', '\022', 'E', 's', 'p', '_', 'a', 'l', 'g', 't', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', 
    '\022', '\025', '\n', '\021', 'E', 'S', 'P', '_', 'A', 'L', 'G', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'O', 'K', '\020', '\000', '\022', '\030', 
    '\n', '\024', 'E', 'S', 'P', '_', 'A', 'L', 'G', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'F', 'A', 'U', 'L', 'T', '\020', '\001', '\"', 
    '\306', '\025', '\n', '\024', 'G', 'w', '_', 's', 'w', 'm', '_', 'm', 'r', 'r', '_', '0', 'x', '3', '1', 'b', '_', '3', '1', 'b', '\022', 
    '\\', '\n', '\024', 's', 'w', 'm', '_', 'a', 'c', 'c', 't', 'a', 'u', 'g', 'a', 'p', 's', 'e', 't', 'p', 'l', 'u', 's', '\030', '\001', 
    ' ', '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', 
    '_', 's', 'w', 'm', '_', 'm', 'r', 'r', '_', '0', 'x', '3', '1', 'b', '_', '3', '1', 'b', '.', 'S', 'w', 'm', '_', 'a', 'c', 
    'c', 't', 'a', 'u', 'g', 'a', 'p', 's', 'e', 't', 'p', 'l', 'u', 's', 'T', 'y', 'p', 'e', '\022', 'T', '\n', '\020', 's', 'w', 'm', 
    '_', 'a', 'c', 'c', 'v', 's', 'e', 't', 'm', 'i', 'n', 'u', 's', '\030', '\002', ' ', '\001', '(', '\016', '2', ':', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'm', 'r', 'r', '_', '0', 
    'x', '3', '1', 'b', '_', '3', '1', 'b', '.', 'S', 'w', 'm', '_', 'a', 'c', 'c', 'v', 's', 'e', 't', 'm', 'i', 'n', 'u', 's', 
    'T', 'y', 'p', 'e', '\022', 'V', '\n', '\021', 's', 'w', 'm', '_', 's', 'h', 'i', 'f', 't', 'p', 'a', 'd', 'r', 'e', 'q', 'u', 'p', 
    '\030', '\003', ' ', '\001', '(', '\016', '2', ';', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 
    'G', 'w', '_', 's', 'w', 'm', '_', 'm', 'r', 'r', '_', '0', 'x', '3', '1', 'b', '_', '3', '1', 'b', '.', 'S', 'w', 'm', '_', 
    's', 'h', 'i', 'f', 't', 'p', 'a', 'd', 'r', 'e', 'q', 'u', 'p', 'T', 'y', 'p', 'e', '\022', 'X', '\n', '\022', 's', 'w', 'm', '_', 
    'a', 'c', 'c', 'l', 'i', 'm', 'p', 'h', 'o', 'm', 'e', 's', 't', 's', '\030', '\004', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 'm', 
    'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'm', 'r', 'r', '_', 
    '0', 'x', '3', '1', 'b', '_', '3', '1', 'b', '.', 'S', 'w', 'm', '_', 'a', 'c', 'c', 'l', 'i', 'm', 'p', 'h', 'o', 'm', 'e', 
    's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\\', '\n', '\024', 's', 'w', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 's', 't', 
    's', 'w', 'i', 't', 'c', 'h', '\030', '\005', ' ', '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'm', 'r', 'r', '_', '0', 'x', '3', '1', 'b', '_', '3', '1', 
    'b', '.', 'S', 'w', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 's', 't', 's', 'w', 'i', 't', 'c', 'h', 'T', 'y', 'p', 
    'e', '\022', '^', '\n', '\025', 's', 'w', 'm', '_', 'a', 'c', 'c', 't', 'a', 'u', 'g', 'a', 'p', 's', 'e', 't', 'm', 'i', 'n', 'u', 
    's', '\030', '\006', ' ', '\001', '(', '\016', '2', '?', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'm', 'r', 'r', '_', '0', 'x', '3', '1', 'b', '_', '3', '1', 'b', '.', 'S', 'w', 'm', 
    '_', 'a', 'c', 'c', 't', 'a', 'u', 'g', 'a', 'p', 's', 'e', 't', 'm', 'i', 'n', 'u', 's', 'T', 'y', 'p', 'e', '\022', 'R', '\n', 
    '\017', 's', 'w', 'm', '_', 'a', 'c', 'c', 'v', 's', 'e', 't', 'p', 'l', 'u', 's', '\030', '\007', ' ', '\001', '(', '\016', '2', '9', '.', 
    'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'm', 'r', 
    'r', '_', '0', 'x', '3', '1', 'b', '_', '3', '1', 'b', '.', 'S', 'w', 'm', '_', 'a', 'c', 'c', 'v', 's', 'e', 't', 'p', 'l', 
    'u', 's', 'T', 'y', 'p', 'e', '\022', 'R', '\n', '\017', 's', 'w', 'm', '_', 's', 'h', 'i', 'f', 't', 'p', 'a', 'd', 'f', 'l', 't', 
    '\030', '\010', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 
    'G', 'w', '_', 's', 'w', 'm', '_', 'm', 'r', 'r', '_', '0', 'x', '3', '1', 'b', '_', '3', '1', 'b', '.', 'S', 'w', 'm', '_', 
    's', 'h', 'i', 'f', 't', 'p', 'a', 'd', 'f', 'l', 't', 'T', 'y', 'p', 'e', '\022', 'V', '\n', '\021', 's', 'w', 'm', '_', 'a', 'c', 
    'c', 'd', 'e', 'a', 'c', 't', 'i', 'v', 'a', 't', 'e', '\030', '\t', ' ', '\001', '(', '\016', '2', ';', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'm', 'r', 'r', '_', '0', 'x', '3', 
    '1', 'b', '_', '3', '1', 'b', '.', 'S', 'w', 'm', '_', 'a', 'c', 'c', 'd', 'e', 'a', 'c', 't', 'i', 'v', 'a', 't', 'e', 'T', 
    'y', 'p', 'e', '\022', 'N', '\n', '\r', 's', 'w', 'm', '_', 'a', 'c', 'c', 'r', 'e', 's', 'u', 'm', 'e', '\030', '\n', ' ', '\001', '(', 
    '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 
    'm', '_', 'm', 'r', 'r', '_', '0', 'x', '3', '1', 'b', '_', '3', '1', 'b', '.', 'S', 'w', 'm', '_', 'a', 'c', 'c', 'r', 'e', 
    's', 'u', 'm', 'e', 'T', 'y', 'p', 'e', '\022', 'H', '\n', '\n', 's', 'w', 'm', '_', 'a', 'c', 'c', 's', 'e', 't', '\030', '\013', ' ', 
    '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 
    's', 'w', 'm', '_', 'm', 'r', 'r', '_', '0', 'x', '3', '1', 'b', '_', '3', '1', 'b', '.', 'S', 'w', 'm', '_', 'a', 'c', 'c', 
    's', 'e', 't', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 'e', 
    'r', '_', '0', 'x', '3', '1', 'b', '\030', '\014', ' ', '\001', '(', '\005', '\022', 'Z', '\n', '\023', 's', 'w', 'm', '_', 'a', 'c', 'c', 'e', 
    'n', 'a', 'b', 'l', 'e', 's', 'w', 'i', 't', 'c', 'h', '\030', '\r', ' ', '\001', '(', '\016', '2', '=', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'm', 'r', 'r', '_', '0', 'x', '3', 
    '1', 'b', '_', '3', '1', 'b', '.', 'S', 'w', 'm', '_', 'a', 'c', 'c', 'e', 'n', 'a', 'b', 'l', 'e', 's', 'w', 'i', 't', 'c', 
    'h', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '3', '1', 'b', '\030', '\016', 
    ' ', '\001', '(', '\005', '\022', 'T', '\n', '\020', 's', 'w', 'm', '_', 'a', 'c', 'c', 'r', 'e', 's', 'u', 'm', 'e', '_', 'q', 't', '\030', 
    '\017', ' ', '\001', '(', '\016', '2', ':', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 
    'w', '_', 's', 'w', 'm', '_', 'm', 'r', 'r', '_', '0', 'x', '3', '1', 'b', '_', '3', '1', 'b', '.', 'S', 'w', 'm', '_', 'a', 
    'c', 'c', 'r', 'e', 's', 'u', 'm', 'e', '_', 'q', 't', 'T', 'y', 'p', 'e', '\022', 'N', '\n', '\r', 's', 'w', 'm', '_', 't', 'j', 
    'a', 's', 'w', 'i', 't', 'c', 'h', '\030', '\020', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'm', 'r', 'r', '_', '0', 'x', '3', '1', 'b', '_', '3', 
    '1', 'b', '.', 'S', 'w', 'm', '_', 't', 'j', 'a', 's', 'w', 'i', 't', 'c', 'h', 'T', 'y', 'p', 'e', '\022', 'Z', '\n', '\023', 's', 
    'w', 'm', '_', 's', 'h', 'i', 'f', 't', 'p', 'a', 'd', 'r', 'e', 'q', 'd', 'o', 'w', 'n', '\030', '\021', ' ', '\001', '(', '\016', '2', 
    '=', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 
    'm', 'r', 'r', '_', '0', 'x', '3', '1', 'b', '_', '3', '1', 'b', '.', 'S', 'w', 'm', '_', 's', 'h', 'i', 'f', 't', 'p', 'a', 
    'd', 'r', 'e', 'q', 'd', 'o', 'w', 'n', 'T', 'y', 'p', 'e', '\"', '_', '\n', '\030', 'S', 'w', 'm', '_', 'a', 'c', 'c', 't', 'a', 
    'u', 'g', 'a', 'p', 's', 'e', 't', 'p', 'l', 'u', 's', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'S', 'W', 'M', '_', 'A', 'C', 
    'C', 'T', 'A', 'U', 'G', 'A', 'P', 'S', 'E', 'T', 'P', 'L', 'U', 'S', '_', 'N', 'O', '_', 'P', 'R', 'E', 'S', 'S', '\020', '\000', 
    '\022', ' ', '\n', '\034', 'S', 'W', 'M', '_', 'A', 'C', 'C', 'T', 'A', 'U', 'G', 'A', 'P', 'S', 'E', 'T', 'P', 'L', 'U', 'S', '_', 
    'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\"', 'S', '\n', '\024', 'S', 'w', 'm', '_', 'a', 'c', 'c', 'v', 's', 'e', 't', 'm', 
    'i', 'n', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'S', 'W', 'M', '_', 'A', 'C', 'C', 'V', 'S', 'E', 'T', 'M', 'I', 
    'N', 'U', 'S', '_', 'N', 'O', '_', 'P', 'R', 'E', 'S', 'S', '\020', '\000', '\022', '\034', '\n', '\030', 'S', 'W', 'M', '_', 'A', 'C', 'C', 
    'V', 'S', 'E', 'T', 'M', 'I', 'N', 'U', 'S', '_', 'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\"', 'T', '\n', '\025', 'S', 'w', 
    'm', '_', 's', 'h', 'i', 'f', 't', 'p', 'a', 'd', 'r', 'e', 'q', 'u', 'p', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'S', 'W', 
    'M', '_', 'S', 'H', 'I', 'F', 'T', 'P', 'A', 'D', 'R', 'E', 'Q', 'U', 'P', '_', 'N', 'O', '_', 'P', 'R', 'E', 'S', 'S', '\020', 
    '\000', '\022', '\033', '\n', '\027', 'S', 'W', 'M', '_', 'S', 'H', 'I', 'F', 'T', 'P', 'A', 'D', 'R', 'E', 'Q', 'U', 'P', '_', 'P', 'R', 
    'E', 'S', 'S', '\020', '\001', '\"', 'X', '\n', '\026', 'S', 'w', 'm', '_', 'a', 'c', 'c', 'l', 'i', 'm', 'p', 'h', 'o', 'm', 'e', 's', 
    't', 's', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'S', 'W', 'M', '_', 'A', 'C', 'C', 'L', 'I', 'M', 'P', 'H', 'O', 'M', 'E', 
    'S', 'T', 'S', '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\000', '\022', '\037', '\n', '\033', 'S', 'W', 'M', '_', 'A', 'C', 'C', 'L', 'I', 
    'M', 'P', 'H', 'O', 'M', 'E', 'S', 'T', 'S', '_', 'L', 'I', 'M', 'P', 'H', 'O', 'M', 'E', '\020', '\001', '\"', '\203', '\001', '\n', '\030', 
    'S', 'w', 'm', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 's', 't', 's', 'w', 'i', 't', 'c', 'h', 'T', 'y', 'p', 'e', '\022', 
    '3', '\n', '/', 'S', 'W', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'S', 'T', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'P', 
    'R', 'E', 'V', 'E', 'N', 'T', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'S', 'T', '_', 'C', 'O', 'N', 'T', 'R', 'O', 'L', 
    '\020', '\000', '\022', '2', '\n', '.', 'S', 'W', 'M', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'S', 'T', 'S', 'W', 'I', 'T', 'C', 
    'H', '_', 'E', 'N', 'A', 'B', 'L', 'E', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'S', 'T', '_', 'C', 'O', 'N', 'T', 'R', 
    'O', 'L', '\020', '\001', '\"', 'b', '\n', '\031', 'S', 'w', 'm', '_', 'a', 'c', 'c', 't', 'a', 'u', 'g', 'a', 'p', 's', 'e', 't', 'm', 
    'i', 'n', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\"', '\n', '\036', 'S', 'W', 'M', '_', 'A', 'C', 'C', 'T', 'A', 'U', 'G', 'A', 'P', 
    'S', 'E', 'T', 'M', 'I', 'N', 'U', 'S', '_', 'N', 'O', '_', 'P', 'R', 'E', 'S', 'S', '\020', '\000', '\022', '!', '\n', '\035', 'S', 'W', 
    'M', '_', 'A', 'C', 'C', 'T', 'A', 'U', 'G', 'A', 'P', 'S', 'E', 'T', 'M', 'I', 'N', 'U', 'S', '_', 'P', 'R', 'E', 'S', 'S', 
    'E', 'D', '\020', '\001', '\"', 'P', '\n', '\023', 'S', 'w', 'm', '_', 'a', 'c', 'c', 'v', 's', 'e', 't', 'p', 'l', 'u', 's', 'T', 'y', 
    'p', 'e', '\022', '\034', '\n', '\030', 'S', 'W', 'M', '_', 'A', 'C', 'C', 'V', 'S', 'E', 'T', 'P', 'L', 'U', 'S', '_', 'N', 'O', '_', 
    'P', 'R', 'E', 'S', 'S', '\020', '\000', '\022', '\033', '\n', '\027', 'S', 'W', 'M', '_', 'A', 'C', 'C', 'V', 'S', 'E', 'T', 'P', 'L', 'U', 
    'S', '_', 'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\"', 'N', '\n', '\023', 'S', 'w', 'm', '_', 's', 'h', 'i', 'f', 't', 'p', 
    'a', 'd', 'f', 'l', 't', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'S', 'W', 'M', '_', 'S', 'H', 'I', 'F', 'T', 'P', 'A', 'D', 
    'F', 'L', 'T', '_', 'N', 'O', '_', 'F', 'A', 'U', 'L', 'T', '\020', '\000', '\022', '\031', '\n', '\025', 'S', 'W', 'M', '_', 'S', 'H', 'I', 
    'F', 'T', 'P', 'A', 'D', 'F', 'L', 'T', '_', 'F', 'A', 'U', 'L', 'T', '\020', '\001', '\"', 'V', '\n', '\025', 'S', 'w', 'm', '_', 'a', 
    'c', 'c', 'd', 'e', 'a', 'c', 't', 'i', 'v', 'a', 't', 'e', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'S', 'W', 'M', '_', 'A', 
    'C', 'C', 'D', 'E', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'E', '_', 'N', 'O', '_', 'P', 'R', 'E', 'S', 'S', '\020', '\000', '\022', '\035', 
    '\n', '\031', 'S', 'W', 'M', '_', 'A', 'C', 'C', 'D', 'E', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'E', '_', 'P', 'R', 'E', 'S', 'S', 
    'E', 'D', '\020', '\001', '\"', 'J', '\n', '\021', 'S', 'w', 'm', '_', 'a', 'c', 'c', 'r', 'e', 's', 'u', 'm', 'e', 'T', 'y', 'p', 'e', 
    '\022', '\032', '\n', '\026', 'S', 'W', 'M', '_', 'A', 'C', 'C', 'R', 'E', 'S', 'U', 'M', 'E', '_', 'N', 'O', '_', 'P', 'R', 'E', 'S', 
    'S', '\020', '\000', '\022', '\031', '\n', '\025', 'S', 'W', 'M', '_', 'A', 'C', 'C', 'R', 'E', 'S', 'U', 'M', 'E', '_', 'P', 'R', 'E', 'S', 
    'S', 'E', 'D', '\020', '\001', '\"', 'A', '\n', '\016', 'S', 'w', 'm', '_', 'a', 'c', 'c', 's', 'e', 't', 'T', 'y', 'p', 'e', '\022', '\027', 
    '\n', '\023', 'S', 'W', 'M', '_', 'A', 'C', 'C', 'S', 'E', 'T', '_', 'N', 'O', '_', 'P', 'R', 'E', 'S', 'S', '\020', '\000', '\022', '\026', 
    '\n', '\022', 'S', 'W', 'M', '_', 'A', 'C', 'C', 'S', 'E', 'T', '_', 'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\"', 'r', '\n', 
    '\027', 'S', 'w', 'm', '_', 'a', 'c', 'c', 'e', 'n', 'a', 'b', 'l', 'e', 's', 'w', 'i', 't', 'c', 'h', 'T', 'y', 'p', 'e', '\022', 
    '+', '\n', '\'', 'S', 'W', 'M', '_', 'A', 'C', 'C', 'E', 'N', 'A', 'B', 'L', 'E', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'P', 'R', 
    'E', 'V', 'E', 'N', 'T', '_', 'A', 'C', 'C', '_', 'C', 'O', 'N', 'T', 'R', 'O', 'L', '\020', '\000', '\022', '*', '\n', '&', 'S', 'W', 
    'M', '_', 'A', 'C', 'C', 'E', 'N', 'A', 'B', 'L', 'E', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'E', 'N', 'A', 'B', 'L', 'E', '_', 
    'A', 'C', 'C', '_', 'C', 'O', 'N', 'T', 'R', 'O', 'L', '\020', '\001', '\"', 'P', '\n', '\024', 'S', 'w', 'm', '_', 'a', 'c', 'c', 'r', 
    'e', 's', 'u', 'm', 'e', '_', 'q', 't', 'T', 'y', 'p', 'e', '\022', '\032', '\n', '\026', 'S', 'W', 'M', '_', 'A', 'C', 'C', 'R', 'E', 
    'S', 'U', 'M', 'E', '_', 'Q', 'T', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '\034', '\n', '\030', 'S', 'W', 'M', '_', 'A', 'C', 
    'C', 'R', 'E', 'S', 'U', 'M', 'E', '_', 'Q', 'T', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', '`', '\n', '\021', 'S', 
    'w', 'm', '_', 't', 'j', 'a', 's', 'w', 'i', 't', 'c', 'h', 'T', 'y', 'p', 'e', '\022', '%', '\n', '!', 'S', 'W', 'M', '_', 'T', 
    'J', 'A', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'P', 'R', 'E', 'V', 'E', 'N', 'T', '_', 'T', 'J', 'A', '_', 'C', 'O', 'N', 'T', 
    'R', 'O', 'L', '\020', '\000', '\022', '$', '\n', ' ', 'S', 'W', 'M', '_', 'T', 'J', 'A', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'E', 'N', 
    'A', 'B', 'L', 'E', '_', 'T', 'J', 'A', '_', 'C', 'O', 'N', 'T', 'R', 'O', 'L', '\020', '\001', '\"', 'Z', '\n', '\027', 'S', 'w', 'm', 
    '_', 's', 'h', 'i', 'f', 't', 'p', 'a', 'd', 'r', 'e', 'q', 'd', 'o', 'w', 'n', 'T', 'y', 'p', 'e', '\022', ' ', '\n', '\034', 'S', 
    'W', 'M', '_', 'S', 'H', 'I', 'F', 'T', 'P', 'A', 'D', 'R', 'E', 'Q', 'D', 'O', 'W', 'N', '_', 'N', 'O', '_', 'P', 'R', 'E', 
    'S', 'S', '\020', '\000', '\022', '\035', '\n', '\031', 'S', 'W', 'M', '_', 'S', 'H', 'I', 'F', 'T', 'P', 'A', 'D', 'R', 'E', 'Q', 'D', 'O', 
    'W', 'N', '_', 'P', 'R', 'E', 'S', 'S', '\020', '\001', '\"', '\313', '/', '\n', '\025', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 
    'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '\022', 'M', '\n', '\014', 's', 'w', 'm', '_', 'h', 'i', 'g', 'h', 'b', 'e', 
    'a', 'm', '\030', '\001', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 
    's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 'S', 
    'w', 'm', '_', 'h', 'i', 'g', 'h', 'b', 'e', 'a', 'm', 'T', 'y', 'p', 'e', '\022', '[', '\n', '\023', 's', 'w', 'm', '_', 'f', 'r', 
    'o', 'n', 't', 'w', 'i', 'p', 'i', 'n', 'g', 'm', 'o', 'd', 'e', '\030', '\002', ' ', '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', 
    '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 'f', 'r', 'o', 'n', 't', 'w', 'i', 'p', 'i', 'n', 'g', 
    'm', 'o', 'd', 'e', 'T', 'y', 'p', 'e', '\022', 'o', '\n', '\035', 's', 'w', 'm', '_', 'w', 'i', 'p', 'i', 'n', 'g', 'i', 'n', 't', 
    'e', 'r', 'v', 'a', 'l', '_', 's', 'e', 'n', 's', 'i', 't', 'v', 'i', 't', 'y', '\030', '\003', ' ', '\001', '(', '\016', '2', 'H', '.', 
    'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 
    'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 'w', 'i', 'p', 'i', 'n', 'g', 'i', 'n', 
    't', 'e', 'r', 'v', 'a', 'l', '_', 's', 'e', 'n', 's', 'i', 't', 'v', 'i', 't', 'y', 'T', 'y', 'p', 'e', '\022', 'U', '\n', '\020', 
    's', 'w', 'm', '_', 'r', 'e', 'a', 'r', 'f', 'o', 'g', 'l', 'i', 'g', 'h', 't', '\030', '\004', ' ', '\001', '(', '\016', '2', ';', '.', 
    'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 
    'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 'r', 'e', 'a', 'r', 'f', 'o', 'g', 'l', 
    'i', 'g', 'h', 't', 'T', 'y', 'p', 'e', '\022', 'W', '\n', '\021', 's', 'w', 'm', '_', 'f', 'r', 'o', 'n', 't', 'f', 'o', 'g', 'l', 
    'i', 'g', 'h', 't', '\030', '\005', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', 
    '.', 'S', 'w', 'm', '_', 'f', 'r', 'o', 'n', 't', 'f', 'o', 'g', 'l', 'i', 'g', 'h', 't', 'T', 'y', 'p', 'e', '\022', '_', '\n', 
    '\025', 's', 'w', 'm', '_', 'w', 'a', 's', 'h', 'e', 'r', 'l', 'i', 'm', 'p', 'h', 'o', 'm', 'e', 's', 't', 's', '\030', '\006', ' ', 
    '\001', '(', '\016', '2', '@', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 
    's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 'w', 'a', 
    's', 'h', 'e', 'r', 'l', 'i', 'm', 'p', 'h', 'o', 'm', 'e', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'Y', '\n', '\022', 's', 'w', 
    'm', '_', 'r', 'e', 'a', 'r', 'w', 'i', 'p', 'i', 'n', 'g', 'm', 'o', 'd', 'e', '\030', '\007', ' ', '\001', '(', '\016', '2', '=', '.', 
    'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 
    'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 'r', 'e', 'a', 'r', 'w', 'i', 'p', 'i', 
    'n', 'g', 'm', 'o', 'd', 'e', 'T', 'y', 'p', 'e', '\022', '_', '\n', '\025', 's', 'w', 'm', '_', 't', 'u', 'r', 'n', 'i', 'n', 'd', 
    'i', 'c', 'a', 't', 'i', 'o', 'n', 'a', 'c', 't', '\030', '\010', ' ', '\001', '(', '\016', '2', '@', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', 
    '1', 'a', '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 't', 'u', 'r', 'n', 'i', 'n', 'd', 'i', 'c', 'a', 't', 'i', 'o', 'n', 
    'a', 'c', 't', 'T', 'y', 'p', 'e', '\022', 'M', '\n', '\014', 's', 'w', 'm', '_', 'v', 'o', 'l', '_', 'p', 'l', 'u', 's', '\030', '\t', 
    ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', 
    '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 'v', 
    'o', 'l', '_', 'p', 'l', 'u', 's', 'T', 'y', 'p', 'e', '\022', 'O', '\n', '\r', 's', 'w', 'm', '_', 'v', 'o', 'l', '_', 'm', 'i', 
    'n', 'u', 's', '\030', '\n', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 
    'S', 'w', 'm', '_', 'v', 'o', 'l', '_', 'm', 'i', 'n', 'u', 's', 'T', 'y', 'p', 'e', '\022', 'I', '\n', '\n', 's', 'w', 'm', '_', 
    'w', 'e', 'c', 'h', 'a', 't', '\030', '\013', ' ', '\001', '(', '\016', '2', '5', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', 
    '1', 'a', '.', 'S', 'w', 'm', '_', 'w', 'e', 'c', 'h', 'a', 't', 'T', 'y', 'p', 'e', '\022', '[', '\n', '\023', 's', 'w', 'm', '_', 
    'l', 'a', 'm', 'p', 'l', 'i', 'm', 'p', 'h', 'o', 'm', 'e', 's', 't', 's', '\030', '\014', ' ', '\001', '(', '\016', '2', '>', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 
    'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 'l', 'a', 'm', 'p', 'l', 'i', 'm', 'p', 'h', 
    'o', 'm', 'e', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'M', '\n', '\014', 's', 'w', 'm', '_', 'h', 'e', 'a', 'd', 'l', 'a', 'm', 
    'p', '\030', '\r', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 'S', 'w', 
    'm', '_', 'h', 'e', 'a', 'd', 'l', 'a', 'm', 'p', 'T', 'y', 'p', 'e', '\022', 'O', '\n', '\r', 's', 'w', 'm', '_', 'n', 'e', 'x', 
    't', '_', 's', 'o', 'n', 'g', '\030', '\016', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', 
    '1', 'a', '.', 'S', 'w', 'm', '_', 'n', 'e', 'x', 't', '_', 's', 'o', 'n', 'g', 'T', 'y', 'p', 'e', '\022', 'W', '\n', '\021', 's', 
    'w', 'm', '_', 'p', 'r', 'e', 'v', 'i', 'o', 'u', 's', '_', 's', 'o', 'n', 'g', '\030', '\017', ' ', '\001', '(', '\016', '2', '<', '.', 
    'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 
    'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 'p', 'r', 'e', 'v', 'i', 'o', 'u', 's', 
    '_', 's', 'o', 'n', 'g', 'T', 'y', 'p', 'e', '\022', 'G', '\n', '\t', 's', 'w', 'm', '_', 'p', 'h', 'o', 'n', 'e', '\030', '\020', ' ', 
    '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 
    's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 'p', 'h', 
    'o', 'n', 'e', 'T', 'y', 'p', 'e', '\022', 'E', '\n', '\010', 's', 'w', 'm', '_', 'm', 'u', 't', 'e', '\030', '\021', ' ', '\001', '(', '\016', 
    '2', '3', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', 
    '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 'm', 'u', 't', 'e', 'T', 
    'y', 'p', 'e', '\022', 'Q', '\n', '\016', 's', 'w', 'm', '_', 'm', 'e', 'n', 'u', '_', 'r', 'i', 'g', 'h', 't', '\030', '\022', ' ', '\001', 
    '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 
    'w', 'm', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 'm', 'e', 'n', 
    'u', '_', 'r', 'i', 'g', 'h', 't', 'T', 'y', 'p', 'e', '\022', 'O', '\n', '\r', 's', 'w', 'm', '_', 'm', 'e', 'n', 'u', '_', 'l', 
    'e', 'f', 't', '\030', '\023', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 
    'S', 'w', 'm', '_', 'm', 'e', 'n', 'u', '_', 'l', 'e', 'f', 't', 'T', 'y', 'p', 'e', '\022', 'O', '\n', '\r', 's', 'w', 'm', '_', 
    'm', 'e', 'n', 'u', '_', 'd', 'o', 'w', 'n', '\030', '\024', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 
    'a', '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 'm', 'e', 'n', 'u', '_', 'd', 'o', 'w', 'n', 'T', 'y', 'p', 'e', '\022', 'K', 
    '\n', '\013', 's', 'w', 'm', '_', 'm', 'e', 'n', 'u', '_', 'u', 'p', '\030', '\025', ' ', '\001', '(', '\016', '2', '6', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', 
    '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 'm', 'e', 'n', 'u', '_', 'u', 'p', 'T', 'y', 'p', 'e', 
    '\022', 'Q', '\n', '\016', 's', 'w', 'm', '_', 'f', 'w', 'a', 's', 'h', 'e', 'r', 's', 't', 's', '\030', '\026', ' ', '\001', '(', '\016', '2', 
    '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 
    'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 'f', 'w', 'a', 's', 'h', 'e', 
    'r', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 
    'e', 'r', '_', '0', 'x', '3', '1', 'a', '\030', '\027', ' ', '\001', '(', '\005', '\022', 'S', '\n', '\017', 's', 'w', 'm', '_', 'm', 'e', 'n', 
    'u', '_', 'r', 'e', 't', 'u', 'r', 'n', '\030', '\030', ' ', '\001', '(', '\016', '2', ':', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', 
    '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 'm', 'e', 'n', 'u', '_', 'r', 'e', 't', 'u', 'r', 'n', 'T', 'y', 'p', 'e', '\022', 
    'U', '\n', '\020', 's', 'w', 'm', '_', 'm', 'e', 'n', 'u', '_', 'c', 'o', 'n', 'f', 'i', 'r', 'm', '\030', '\031', ' ', '\001', '(', '\016', 
    '2', ';', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', 
    '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 'm', 'e', 'n', 'u', '_', 
    'c', 'o', 'n', 'f', 'i', 'r', 'm', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 
    'x', '3', '1', 'a', '\030', '\032', ' ', '\001', '(', '\005', '\022', 'Q', '\n', '\016', 's', 'w', 'm', '_', 'r', 'w', 'a', 's', 'h', 'e', 'r', 
    's', 't', 's', '\030', '\033', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 
    'S', 'w', 'm', '_', 'r', 'w', 'a', 's', 'h', 'e', 'r', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'W', '\n', '\021', 's', 'w', 'm', 
    '_', 'f', 'l', 'a', 's', 'h', 'l', 'i', 'g', 'h', 't', 's', 't', 's', '\030', '\034', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 'm', 
    'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 'y', 
    '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '.', 'S', 'w', 'm', '_', 'f', 'l', 'a', 's', 'h', 'l', 'i', 'g', 'h', 't', 
    's', 't', 's', 'T', 'y', 'p', 'e', '\"', '|', '\n', '\020', 'S', 'w', 'm', '_', 'h', 'i', 'g', 'h', 'b', 'e', 'a', 'm', 'T', 'y', 
    'p', 'e', '\022', '\031', '\n', '\025', 'S', 'W', 'M', '_', 'H', 'I', 'G', 'H', 'B', 'E', 'A', 'M', '_', 'R', 'E', 'L', 'E', 'A', 'S', 
    'E', 'D', '\020', '\000', '\022', '\030', '\n', '\024', 'S', 'W', 'M', '_', 'H', 'I', 'G', 'H', 'B', 'E', 'A', 'M', '_', 'P', 'R', 'E', 'S', 
    'S', 'E', 'D', '\020', '\001', '\022', '\031', '\n', '\025', 'S', 'W', 'M', '_', 'H', 'I', 'G', 'H', 'B', 'E', 'A', 'M', '_', 'R', 'E', 'S', 
    'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\030', '\n', '\024', 'S', 'W', 'M', '_', 'H', 'I', 'G', 'H', 'B', 'E', 'A', 'M', '_', 'I', 
    'N', 'V', 'A', 'L', 'I', 'D', '\020', '\003', '\"', '\316', '\002', '\n', '\027', 'S', 'w', 'm', '_', 'f', 'r', 'o', 'n', 't', 'w', 'i', 'p', 
    'i', 'n', 'g', 'm', 'o', 'd', 'e', 'T', 'y', 'p', 'e', '\022', '(', '\n', '$', 'S', 'W', 'M', '_', 'F', 'R', 'O', 'N', 'T', 'W', 
    'I', 'P', 'I', 'N', 'G', 'M', 'O', 'D', 'E', '_', 'F', 'R', 'O', 'N', 'T', '_', 'W', 'I', 'P', 'I', 'N', 'G', '_', 'O', 'F', 
    'F', '\020', '\000', '\022', '8', '\n', '4', 'S', 'W', 'M', '_', 'F', 'R', 'O', 'N', 'T', 'W', 'I', 'P', 'I', 'N', 'G', 'M', 'O', 'D', 
    'E', '_', 'F', 'R', 'O', 'N', 'T', '_', 'W', 'I', 'P', 'E', 'R', '_', 'S', 'P', 'E', 'E', 'D', '_', 'L', 'O', 'W', '_', 'A', 
    'C', 'T', 'I', 'V', 'A', 'T', 'I', 'O', 'N', '\020', '\001', '\022', '9', '\n', '5', 'S', 'W', 'M', '_', 'F', 'R', 'O', 'N', 'T', 'W', 
    'I', 'P', 'I', 'N', 'G', 'M', 'O', 'D', 'E', '_', 'F', 'R', 'O', 'N', 'T', '_', 'W', 'I', 'P', 'E', 'R', '_', 'S', 'P', 'E', 
    'E', 'D', '_', 'H', 'I', 'G', 'H', '_', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'I', 'O', 'N', '\020', '\002', '\022', '4', '\n', '0', 'S', 
    'W', 'M', '_', 'F', 'R', 'O', 'N', 'T', 'W', 'I', 'P', 'I', 'N', 'G', 'M', 'O', 'D', 'E', '_', 'F', 'R', 'O', 'N', 'T', '_', 
    'M', 'I', 'S', 'T', '_', 'W', 'I', 'P', 'I', 'N', 'G', '_', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'I', 'O', 'N', '\020', '\003', '\022', 
    '=', '\n', '9', 'S', 'W', 'M', '_', 'F', 'R', 'O', 'N', 'T', 'W', 'I', 'P', 'I', 'N', 'G', 'M', 'O', 'D', 'E', '_', 'F', 'R', 
    'O', 'N', 'T', '_', 'A', 'U', 'T', 'O', '_', 'I', 'N', 'T', 'E', 'R', 'V', 'A', 'L', '_', 'W', 'I', 'P', 'I', 'N', 'G', '_', 
    'A', 'C', 'T', 'I', 'V', 'A', 'T', 'I', 'O', 'N', '\020', '\004', '\022', '\037', '\n', '\033', 'S', 'W', 'M', '_', 'F', 'R', 'O', 'N', 'T', 
    'W', 'I', 'P', 'I', 'N', 'G', 'M', 'O', 'D', 'E', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\007', '\"', '\222', '\002', '\n', '!', 
    'S', 'w', 'm', '_', 'w', 'i', 'p', 'i', 'n', 'g', 'i', 'n', 't', 'e', 'r', 'v', 'a', 'l', '_', 's', 'e', 'n', 's', 'i', 't', 
    'v', 'i', 't', 'y', 'T', 'y', 'p', 'e', '\022', '/', '\n', '+', 'S', 'W', 'M', '_', 'W', 'I', 'P', 'I', 'N', 'G', 'I', 'N', 'T', 
    'E', 'R', 'V', 'A', 'L', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'V', 'I', 'T', 'Y', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 'V', 
    'I', 'T', 'Y', '_', '0', '\020', '\000', '\022', '/', '\n', '+', 'S', 'W', 'M', '_', 'W', 'I', 'P', 'I', 'N', 'G', 'I', 'N', 'T', 'E', 
    'R', 'V', 'A', 'L', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'V', 'I', 'T', 'Y', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 'V', 'I', 
    'T', 'Y', '_', '1', '\020', '\001', '\022', '/', '\n', '+', 'S', 'W', 'M', '_', 'W', 'I', 'P', 'I', 'N', 'G', 'I', 'N', 'T', 'E', 'R', 
    'V', 'A', 'L', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'V', 'I', 'T', 'Y', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 'V', 'I', 'T', 
    'Y', '_', '2', '\020', '\002', '\022', '/', '\n', '+', 'S', 'W', 'M', '_', 'W', 'I', 'P', 'I', 'N', 'G', 'I', 'N', 'T', 'E', 'R', 'V', 
    'A', 'L', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'V', 'I', 'T', 'Y', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 'V', 'I', 'T', 'Y', 
    '_', '3', '\020', '\003', '\022', ')', '\n', '%', 'S', 'W', 'M', '_', 'W', 'I', 'P', 'I', 'N', 'G', 'I', 'N', 'T', 'E', 'R', 'V', 'A', 
    'L', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'V', 'I', 'T', 'Y', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\007', '\"', '\220', '\001', 
    '\n', '\024', 'S', 'w', 'm', '_', 'r', 'e', 'a', 'r', 'f', 'o', 'g', 'l', 'i', 'g', 'h', 't', 'T', 'y', 'p', 'e', '\022', '\035', '\n', 
    '\031', 'S', 'W', 'M', '_', 'R', 'E', 'A', 'R', 'F', 'O', 'G', 'L', 'I', 'G', 'H', 'T', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', 
    'D', '\020', '\000', '\022', '\034', '\n', '\030', 'S', 'W', 'M', '_', 'R', 'E', 'A', 'R', 'F', 'O', 'G', 'L', 'I', 'G', 'H', 'T', '_', 'P', 
    'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\022', '\035', '\n', '\031', 'S', 'W', 'M', '_', 'R', 'E', 'A', 'R', 'F', 'O', 'G', 'L', 'I', 
    'G', 'H', 'T', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\034', '\n', '\030', 'S', 'W', 'M', '_', 'R', 'E', 'A', 
    'R', 'F', 'O', 'G', 'L', 'I', 'G', 'H', 'T', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\003', '\"', '\213', '\001', '\n', '\025', 'S', 
    'w', 'm', '_', 'f', 'r', 'o', 'n', 't', 'f', 'o', 'g', 'l', 'i', 'g', 'h', 't', 'T', 'y', 'p', 'e', '\022', '\031', '\n', '\025', 'S', 
    'W', 'M', '_', 'F', 'R', 'O', 'N', 'T', 'F', 'O', 'G', 'L', 'I', 'G', 'H', 'T', '_', 'O', 'F', 'F', '\020', '\000', '\022', '\030', '\n', 
    '\024', 'S', 'W', 'M', '_', 'F', 'R', 'O', 'N', 'T', 'F', 'O', 'G', 'L', 'I', 'G', 'H', 'T', '_', 'O', 'N', '\020', '\001', '\022', '\036', 
    '\n', '\032', 'S', 'W', 'M', '_', 'F', 'R', 'O', 'N', 'T', 'F', 'O', 'G', 'L', 'I', 'G', 'H', 'T', '_', 'R', 'E', 'S', 'E', 'R', 
    'V', 'E', 'D', '\020', '\002', '\022', '\035', '\n', '\031', 'S', 'W', 'M', '_', 'F', 'R', 'O', 'N', 'T', 'F', 'O', 'G', 'L', 'I', 'G', 'H', 
    'T', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\003', '\"', 'a', '\n', '\031', 'S', 'w', 'm', '_', 'w', 'a', 's', 'h', 'e', 'r', 
    'l', 'i', 'm', 'p', 'h', 'o', 'm', 'e', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', ' ', '\n', '\034', 'S', 'W', 'M', '_', 'W', 'A', 
    'S', 'H', 'E', 'R', 'L', 'I', 'M', 'P', 'H', 'O', 'M', 'E', 'S', 'T', 'S', '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\000', '\022', 
    '\"', '\n', '\036', 'S', 'W', 'M', '_', 'W', 'A', 'S', 'H', 'E', 'R', 'L', 'I', 'M', 'P', 'H', 'O', 'M', 'E', 'S', 'T', 'S', '_', 
    'L', 'I', 'M', 'P', 'H', 'O', 'M', 'E', '\020', '\001', '\"', '\264', '\001', '\n', '\026', 'S', 'w', 'm', '_', 'r', 'e', 'a', 'r', 'w', 'i', 
    'p', 'i', 'n', 'g', 'm', 'o', 'd', 'e', 'T', 'y', 'p', 'e', '\022', '%', '\n', '!', 'S', 'W', 'M', '_', 'R', 'E', 'A', 'R', 'W', 
    'I', 'P', 'I', 'N', 'G', 'M', 'O', 'D', 'E', '_', 'R', 'E', 'A', 'R', 'W', 'I', 'P', 'I', 'N', 'G', '_', 'O', 'F', 'F', '\020', 
    '\000', '\022', '2', '\n', '.', 'S', 'W', 'M', '_', 'R', 'E', 'A', 'R', 'W', 'I', 'P', 'I', 'N', 'G', 'M', 'O', 'D', 'E', '_', 'R', 
    'E', 'A', 'R', '_', 'W', 'I', 'P', 'E', 'R', '_', 'U', 'N', 'I', 'F', 'O', 'R', 'M', 'I', 'T', 'Y', '_', 'S', 'P', 'E', 'E', 
    'D', '\020', '\001', '\022', '\037', '\n', '\033', 'S', 'W', 'M', '_', 'R', 'E', 'A', 'R', 'W', 'I', 'P', 'I', 'N', 'G', 'M', 'O', 'D', 'E', 
    '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\036', '\n', '\032', 'S', 'W', 'M', '_', 'R', 'E', 'A', 'R', 'W', 'I', 
    'P', 'I', 'N', 'G', 'M', 'O', 'D', 'E', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\003', '\"', '\254', '\001', '\n', '\031', 'S', 'w', 
    'm', '_', 't', 'u', 'r', 'n', 'i', 'n', 'd', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'a', 'c', 't', 'T', 'y', 'p', 'e', '\022', '!', 
    '\n', '\035', 'S', 'W', 'M', '_', 'T', 'U', 'R', 'N', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', 'A', 'C', 'T', '_', 'D', 
    'E', 'F', 'A', 'U', 'L', 'T', '\020', '\000', '\022', '#', '\n', '\037', 'S', 'W', 'M', '_', 'T', 'U', 'R', 'N', 'I', 'N', 'D', 'I', 'C', 
    'A', 'T', 'I', 'O', 'N', 'A', 'C', 'T', '_', 'T', 'U', 'R', 'N', '_', 'L', 'E', 'F', 'T', '\020', '\001', '\022', '$', '\n', ' ', 'S', 
    'W', 'M', '_', 'T', 'U', 'R', 'N', 'I', 'N', 'D', 'I', 'C', 'A', 'T', 'I', 'O', 'N', 'A', 'C', 'T', '_', 'T', 'U', 'R', 'N', 
    '_', 'R', 'I', 'G', 'H', 'T', '\020', '\002', '\022', '!', '\n', '\035', 'S', 'W', 'M', '_', 'T', 'U', 'R', 'N', 'I', 'N', 'D', 'I', 'C', 
    'A', 'T', 'I', 'O', 'N', 'A', 'C', 'T', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\003', '\"', '|', '\n', '\020', 'S', 'w', 'm', 
    '_', 'v', 'o', 'l', '_', 'p', 'l', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\031', '\n', '\025', 'S', 'W', 'M', '_', 'V', 'O', 'L', '_', 
    'P', 'L', 'U', 'S', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', 'D', '\020', '\000', '\022', '\030', '\n', '\024', 'S', 'W', 'M', '_', 'V', 'O', 
    'L', '_', 'P', 'L', 'U', 'S', '_', 'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\022', '\031', '\n', '\025', 'S', 'W', 'M', '_', 'V', 
    'O', 'L', '_', 'P', 'L', 'U', 'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\030', '\n', '\024', 'S', 'W', 'M', 
    '_', 'V', 'O', 'L', '_', 'P', 'L', 'U', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\003', '\"', '\201', '\001', '\n', '\021', 'S', 
    'w', 'm', '_', 'v', 'o', 'l', '_', 'm', 'i', 'n', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\032', '\n', '\026', 'S', 'W', 'M', '_', 'V', 
    'O', 'L', '_', 'M', 'I', 'N', 'U', 'S', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', 'D', '\020', '\000', '\022', '\031', '\n', '\025', 'S', 'W', 
    'M', '_', 'V', 'O', 'L', '_', 'M', 'I', 'N', 'U', 'S', '_', 'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\022', '\032', '\n', '\026', 
    'S', 'W', 'M', '_', 'V', 'O', 'L', '_', 'M', 'I', 'N', 'U', 'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', 
    '\031', '\n', '\025', 'S', 'W', 'M', '_', 'V', 'O', 'L', '_', 'M', 'I', 'N', 'U', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', 
    '\003', '\"', 'A', '\n', '\016', 'S', 'w', 'm', '_', 'w', 'e', 'c', 'h', 'a', 't', 'T', 'y', 'p', 'e', '\022', '\027', '\n', '\023', 'S', 'W', 
    'M', '_', 'W', 'E', 'C', 'H', 'A', 'T', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', 'D', '\020', '\000', '\022', '\026', '\n', '\022', 'S', 'W', 
    'M', '_', 'W', 'E', 'C', 'H', 'A', 'T', '_', 'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\"', '[', '\n', '\027', 'S', 'w', 'm', 
    '_', 'l', 'a', 'm', 'p', 'l', 'i', 'm', 'p', 'h', 'o', 'm', 'e', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'S', 
    'W', 'M', '_', 'L', 'A', 'M', 'P', 'L', 'I', 'M', 'P', 'H', 'O', 'M', 'E', 'S', 'T', 'S', '_', 'N', 'O', 'R', 'M', 'A', 'L', 
    '\020', '\000', '\022', ' ', '\n', '\034', 'S', 'W', 'M', '_', 'L', 'A', 'M', 'P', 'L', 'I', 'M', 'P', 'H', 'O', 'M', 'E', 'S', 'T', 'S', 
    '_', 'L', 'I', 'M', 'P', 'H', 'O', 'M', 'E', '\020', '\001', '\"', '\230', '\001', '\n', '\020', 'S', 'w', 'm', '_', 'h', 'e', 'a', 'd', 'l', 
    'a', 'm', 'p', 'T', 'y', 'p', 'e', '\022', '\024', '\n', '\020', 'S', 'W', 'M', '_', 'H', 'E', 'A', 'D', 'L', 'A', 'M', 'P', '_', 'O', 
    'F', 'F', '\020', '\000', '\022', '\032', '\n', '\026', 'S', 'W', 'M', '_', 'H', 'E', 'A', 'D', 'L', 'A', 'M', 'P', '_', 'A', 'U', 'T', 'O', 
    'L', 'I', 'G', 'H', 'T', '\020', '\001', '\022', '\036', '\n', '\032', 'S', 'W', 'M', '_', 'H', 'E', 'A', 'D', 'L', 'A', 'M', 'P', '_', 'P', 
    'O', 'S', 'I', 'T', 'I', 'O', 'N', 'L', 'I', 'G', 'H', 'T', '\020', '\002', '\022', '\030', '\n', '\024', 'S', 'W', 'M', '_', 'H', 'E', 'A', 
    'D', 'L', 'A', 'M', 'P', '_', 'L', 'O', 'W', 'B', 'E', 'A', 'M', '\020', '\003', '\022', '\030', '\n', '\024', 'S', 'W', 'M', '_', 'H', 'E', 
    'A', 'D', 'L', 'A', 'M', 'P', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\004', '\"', '\201', '\001', '\n', '\021', 'S', 'w', 'm', '_', 
    'n', 'e', 'x', 't', '_', 's', 'o', 'n', 'g', 'T', 'y', 'p', 'e', '\022', '\032', '\n', '\026', 'S', 'W', 'M', '_', 'N', 'E', 'X', 'T', 
    '_', 'S', 'O', 'N', 'G', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', 'D', '\020', '\000', '\022', '\031', '\n', '\025', 'S', 'W', 'M', '_', 'N', 
    'E', 'X', 'T', '_', 'S', 'O', 'N', 'G', '_', 'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\022', '\032', '\n', '\026', 'S', 'W', 'M', 
    '_', 'N', 'E', 'X', 'T', '_', 'S', 'O', 'N', 'G', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\031', '\n', '\025', 
    'S', 'W', 'M', '_', 'N', 'E', 'X', 'T', '_', 'S', 'O', 'N', 'G', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\003', '\"', '\225', 
    '\001', '\n', '\025', 'S', 'w', 'm', '_', 'p', 'r', 'e', 'v', 'i', 'o', 'u', 's', '_', 's', 'o', 'n', 'g', 'T', 'y', 'p', 'e', '\022', 
    '\036', '\n', '\032', 'S', 'W', 'M', '_', 'P', 'R', 'E', 'V', 'I', 'O', 'U', 'S', '_', 'S', 'O', 'N', 'G', '_', 'R', 'E', 'L', 'E', 
    'A', 'S', 'E', 'D', '\020', '\000', '\022', '\035', '\n', '\031', 'S', 'W', 'M', '_', 'P', 'R', 'E', 'V', 'I', 'O', 'U', 'S', '_', 'S', 'O', 
    'N', 'G', '_', 'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\022', '\036', '\n', '\032', 'S', 'W', 'M', '_', 'P', 'R', 'E', 'V', 'I', 
    'O', 'U', 'S', '_', 'S', 'O', 'N', 'G', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\035', '\n', '\031', 'S', 'W', 
    'M', '_', 'P', 'R', 'E', 'V', 'I', 'O', 'U', 'S', '_', 'S', 'O', 'N', 'G', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\003', 
    '\"', 'm', '\n', '\r', 'S', 'w', 'm', '_', 'p', 'h', 'o', 'n', 'e', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\022', 'S', 'W', 'M', '_', 
    'P', 'H', 'O', 'N', 'E', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', 'D', '\020', '\000', '\022', '\025', '\n', '\021', 'S', 'W', 'M', '_', 'P', 
    'H', 'O', 'N', 'E', '_', 'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\022', '\026', '\n', '\022', 'S', 'W', 'M', '_', 'P', 'H', 'O', 
    'N', 'E', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\025', '\n', '\021', 'S', 'W', 'M', '_', 'P', 'H', 'O', 'N', 
    'E', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\003', '\"', 'h', '\n', '\014', 'S', 'w', 'm', '_', 'm', 'u', 't', 'e', 'T', 'y', 
    'p', 'e', '\022', '\025', '\n', '\021', 'S', 'W', 'M', '_', 'M', 'U', 'T', 'E', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', 'D', '\020', '\000', 
    '\022', '\024', '\n', '\020', 'S', 'W', 'M', '_', 'M', 'U', 'T', 'E', '_', 'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\022', '\025', '\n', 
    '\021', 'S', 'W', 'M', '_', 'M', 'U', 'T', 'E', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\024', '\n', '\020', 'S', 
    'W', 'M', '_', 'M', 'U', 'T', 'E', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\003', '\"', '\206', '\001', '\n', '\022', 'S', 'w', 'm', 
    '_', 'm', 'e', 'n', 'u', '_', 'r', 'i', 'g', 'h', 't', 'T', 'y', 'p', 'e', '\022', '\033', '\n', '\027', 'S', 'W', 'M', '_', 'M', 'E', 
    'N', 'U', '_', 'R', 'I', 'G', 'H', 'T', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', 'D', '\020', '\000', '\022', '\032', '\n', '\026', 'S', 'W', 
    'M', '_', 'M', 'E', 'N', 'U', '_', 'R', 'I', 'G', 'H', 'T', '_', 'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\022', '\033', '\n', 
    '\027', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', '_', 'R', 'I', 'G', 'H', 'T', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', 
    '\002', '\022', '\032', '\n', '\026', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', '_', 'R', 'I', 'G', 'H', 'T', '_', 'I', 'N', 'V', 'A', 'L', 
    'I', 'D', '\020', '\003', '\"', '\201', '\001', '\n', '\021', 'S', 'w', 'm', '_', 'm', 'e', 'n', 'u', '_', 'l', 'e', 'f', 't', 'T', 'y', 'p', 
    'e', '\022', '\032', '\n', '\026', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', '_', 'L', 'E', 'F', 'T', '_', 'R', 'E', 'L', 'E', 'A', 'S', 
    'E', 'D', '\020', '\000', '\022', '\031', '\n', '\025', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', '_', 'L', 'E', 'F', 'T', '_', 'P', 'R', 'E', 
    'S', 'S', 'E', 'D', '\020', '\001', '\022', '\032', '\n', '\026', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', '_', 'L', 'E', 'F', 'T', '_', 'R', 
    'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\031', '\n', '\025', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', '_', 'L', 'E', 'F', 
    'T', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\003', '\"', '\201', '\001', '\n', '\021', 'S', 'w', 'm', '_', 'm', 'e', 'n', 'u', '_', 
    'd', 'o', 'w', 'n', 'T', 'y', 'p', 'e', '\022', '\032', '\n', '\026', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', '_', 'D', 'O', 'W', 'N', 
    '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', 'D', '\020', '\000', '\022', '\031', '\n', '\025', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', '_', 'D', 
    'O', 'W', 'N', '_', 'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\022', '\032', '\n', '\026', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', 
    '_', 'D', 'O', 'W', 'N', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\031', '\n', '\025', 'S', 'W', 'M', '_', 'M', 
    'E', 'N', 'U', '_', 'D', 'O', 'W', 'N', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\003', '\"', 'w', '\n', '\017', 'S', 'w', 'm', 
    '_', 'm', 'e', 'n', 'u', '_', 'u', 'p', 'T', 'y', 'p', 'e', '\022', '\030', '\n', '\024', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', '_', 
    'U', 'P', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', 'D', '\020', '\000', '\022', '\027', '\n', '\023', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', 
    '_', 'U', 'P', '_', 'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\022', '\030', '\n', '\024', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', 
    '_', 'U', 'P', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\027', '\n', '\023', 'S', 'W', 'M', '_', 'M', 'E', 'N', 
    'U', '_', 'U', 'P', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\003', '\"', '\206', '\001', '\n', '\022', 'S', 'w', 'm', '_', 'f', 'w', 
    'a', 's', 'h', 'e', 'r', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\033', '\n', '\027', 'S', 'W', 'M', '_', 'F', 'W', 'A', 'S', 'H', 
    'E', 'R', 'S', 'T', 'S', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', 'D', '\020', '\000', '\022', '\032', '\n', '\026', 'S', 'W', 'M', '_', 'F', 
    'W', 'A', 'S', 'H', 'E', 'R', 'S', 'T', 'S', '_', 'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\022', '\033', '\n', '\027', 'S', 'W', 
    'M', '_', 'F', 'W', 'A', 'S', 'H', 'E', 'R', 'S', 'T', 'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\032', 
    '\n', '\026', 'S', 'W', 'M', '_', 'F', 'W', 'A', 'S', 'H', 'E', 'R', 'S', 'T', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', 
    '\003', '\"', '\213', '\001', '\n', '\023', 'S', 'w', 'm', '_', 'm', 'e', 'n', 'u', '_', 'r', 'e', 't', 'u', 'r', 'n', 'T', 'y', 'p', 'e', 
    '\022', '\034', '\n', '\030', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', '_', 'R', 'E', 'T', 'U', 'R', 'N', '_', 'R', 'E', 'L', 'E', 'A', 
    'S', 'E', 'D', '\020', '\000', '\022', '\033', '\n', '\027', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', '_', 'R', 'E', 'T', 'U', 'R', 'N', '_', 
    'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\022', '\034', '\n', '\030', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', '_', 'R', 'E', 'T', 
    'U', 'R', 'N', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\033', '\n', '\027', 'S', 'W', 'M', '_', 'M', 'E', 'N', 
    'U', '_', 'R', 'E', 'T', 'U', 'R', 'N', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\003', '\"', '\220', '\001', '\n', '\024', 'S', 'w', 
    'm', '_', 'm', 'e', 'n', 'u', '_', 'c', 'o', 'n', 'f', 'i', 'r', 'm', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'S', 'W', 'M', 
    '_', 'M', 'E', 'N', 'U', '_', 'C', 'O', 'N', 'F', 'I', 'R', 'M', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', 'D', '\020', '\000', '\022', 
    '\034', '\n', '\030', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', '_', 'C', 'O', 'N', 'F', 'I', 'R', 'M', '_', 'P', 'R', 'E', 'S', 'S', 
    'E', 'D', '\020', '\001', '\022', '\035', '\n', '\031', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', '_', 'C', 'O', 'N', 'F', 'I', 'R', 'M', '_', 
    'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\034', '\n', '\030', 'S', 'W', 'M', '_', 'M', 'E', 'N', 'U', '_', 'C', 'O', 
    'N', 'F', 'I', 'R', 'M', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\003', '\"', '\206', '\001', '\n', '\022', 'S', 'w', 'm', '_', 'r', 
    'w', 'a', 's', 'h', 'e', 'r', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\033', '\n', '\027', 'S', 'W', 'M', '_', 'R', 'W', 'A', 'S', 
    'H', 'E', 'R', 'S', 'T', 'S', '_', 'R', 'E', 'L', 'E', 'A', 'S', 'E', 'D', '\020', '\000', '\022', '\032', '\n', '\026', 'S', 'W', 'M', '_', 
    'R', 'W', 'A', 'S', 'H', 'E', 'R', 'S', 'T', 'S', '_', 'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\022', '\033', '\n', '\027', 'S', 
    'W', 'M', '_', 'R', 'W', 'A', 'S', 'H', 'E', 'R', 'S', 'T', 'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', 
    '\032', '\n', '\026', 'S', 'W', 'M', '_', 'R', 'W', 'A', 'S', 'H', 'E', 'R', 'S', 'T', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', 
    '\020', '\003', '\"', '\225', '\001', '\n', '\025', 'S', 'w', 'm', '_', 'f', 'l', 'a', 's', 'h', 'l', 'i', 'g', 'h', 't', 's', 't', 's', 'T', 
    'y', 'p', 'e', '\022', '\036', '\n', '\032', 'S', 'W', 'M', '_', 'F', 'L', 'A', 'S', 'H', 'L', 'I', 'G', 'H', 'T', 'S', 'T', 'S', '_', 
    'R', 'E', 'L', 'E', 'A', 'S', 'E', 'D', '\020', '\000', '\022', '\035', '\n', '\031', 'S', 'W', 'M', '_', 'F', 'L', 'A', 'S', 'H', 'L', 'I', 
    'G', 'H', 'T', 'S', 'T', 'S', '_', 'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\001', '\022', '\036', '\n', '\032', 'S', 'W', 'M', '_', 'F', 
    'L', 'A', 'S', 'H', 'L', 'I', 'G', 'H', 'T', 'S', 'T', 'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\035', 
    '\n', '\031', 'S', 'W', 'M', '_', 'F', 'L', 'A', 'S', 'H', 'L', 'I', 'G', 'H', 'T', 'S', 'T', 'S', '_', 'I', 'N', 'V', 'A', 'L', 
    'I', 'D', '\020', '\003', '\"', '\203', '\003', '\n', '\023', 'G', 'w', '_', 'e', 'm', 's', '_', 't', 'q', '_', '0', 'x', '1', '0', '1', '_', 
    '1', '0', '1', '\022', ' ', '\n', '\030', 'e', 'm', 's', '_', 'i', 'n', 'd', 'i', 'c', 'a', 't', 'e', 'd', 'r', 'e', 'a', 'l', 'e', 
    'n', 'g', 't', 'o', 'r', 'q', '\030', '\001', ' ', '\001', '(', '\001', '\022', '\024', '\n', '\014', 'e', 'm', 's', '_', 'e', 'n', 'g', 's', 'p', 
    'e', 'e', 'd', '\030', '\002', ' ', '\001', '(', '\001', '\022', 'U', '\n', '\021', 'e', 'm', 's', '_', 'e', 'n', 'g', 's', 'p', 'e', 'e', 'd', 
    'e', 'r', 'r', 'o', 'r', '\030', '\003', ' ', '\001', '(', '\016', '2', ':', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'e', 'm', 's', '_', 't', 'q', '_', '0', 'x', '1', '0', '1', '_', '1', '0', '1', '.', 
    'E', 'm', 's', '_', 'e', 'n', 'g', 's', 'p', 'e', 'e', 'd', 'e', 'r', 'r', 'o', 'r', 'T', 'y', 'p', 'e', '\022', ' ', '\n', '\030', 
    'e', 'm', 's', '_', 'r', 'n', 'g', 'm', 'o', 'd', 't', 'o', 'r', 'q', 'c', 'r', 's', 'l', 'e', 'a', 'd', 'm', 'i', 'n', '\030', 
    '\004', ' ', '\001', '(', '\001', '\022', '$', '\n', '\034', 'd', 'c', 'm', '_', 'e', 'm', 's', '_', 'r', 'o', 'l', 'l', 'i', 'n', 'g', 'c', 
    'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', '1', '0', '1', '\030', '\005', ' ', '\001', '(', '\005', '\022', '\036', '\n', '\026', 'd', 'c', 'm', 
    '_', 'e', 'm', 's', '_', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '1', '0', '1', '\030', '\006', ' ', '\001', '(', '\005', 
    '\022', ' ', '\n', '\030', 'e', 'm', 's', '_', 'r', 'n', 'g', 'm', 'o', 'd', 't', 'o', 'r', 'q', 'c', 'r', 's', 'l', 'e', 'a', 'd', 
    'm', 'a', 'x', '\030', '\007', ' ', '\001', '(', '\001', '\"', 'S', '\n', '\025', 'E', 'm', 's', '_', 'e', 'n', 'g', 's', 'p', 'e', 'e', 'd', 
    'e', 'r', 'r', 'o', 'r', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'E', 'M', 'S', '_', 'E', 'N', 'G', 'S', 'P', 'E', 'E', 'D', 
    'E', 'R', 'R', 'O', 'R', '_', 'N', 'O', 'E', 'R', 'R', 'O', 'R', '\020', '\000', '\022', '\033', '\n', '\027', 'E', 'M', 'S', '_', 'E', 'N', 
    'G', 'S', 'P', 'E', 'E', 'D', 'E', 'R', 'R', 'O', 'R', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\001', '\"', '\272', '\021', '\n', '\021', 'E', 
    's', 'p', '_', 'v', 'l', 'c', '_', '0', 'x', '2', '2', '3', '_', '2', '2', '3', '\022', '\"', '\n', '\032', 'e', 's', 'p', '_', 'v', 
    'l', 'c', '_', 'i', 'n', 't', 'e', 'r', 'n', 'a', 'l', 't', 'a', 'r', 'g', 'e', 't', 'a', 'c', 'c', 'e', '\030', '\001', ' ', '\001', 
    '(', '\001', '\022', '[', '\n', '\025', 'e', 's', 'p', '_', 'a', 'p', 'a', '_', 'g', 'e', 'a', 'r', 'b', 'o', 'x', 'e', 'n', 'a', 'b', 
    'l', 'e', '\030', '\002', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 
    's', '.', 'E', 's', 'p', '_', 'v', 'l', 'c', '_', '0', 'x', '2', '2', '3', '_', '2', '2', '3', '.', 'E', 's', 'p', '_', 'a', 
    'p', 'a', '_', 'g', 'e', 'a', 'r', 'b', 'o', 'x', 'e', 'n', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', '_', '\n', '\027', 'e', 
    's', 'p', '_', 't', 'a', 'r', 'g', 'e', 't', '_', 'g', 'e', 'a', 'r', '_', 'r', 'e', 'q', 'u', 'e', 's', 't', '\030', '\003', ' ', 
    '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', 
    '_', 'v', 'l', 'c', '_', '0', 'x', '2', '2', '3', '_', '2', '2', '3', '.', 'E', 's', 'p', '_', 't', 'a', 'r', 'g', 'e', 't', 
    '_', 'g', 'e', 'a', 'r', '_', 'r', 'e', 'q', 'u', 'e', 's', 't', 'T', 'y', 'p', 'e', '\022', 'Q', '\n', '\020', 'e', 's', 'p', '_', 
    'v', 'l', 'c', '_', 'a', 'p', 'a', 'c', 't', 'i', 'v', 'e', '\030', '\004', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'v', 'l', 'c', '_', '0', 'x', '2', '2', '3', 
    '_', '2', '2', '3', '.', 'E', 's', 'p', '_', 'v', 'l', 'c', '_', 'a', 'p', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', 
    '\022', '[', '\n', '\025', 'e', 's', 'p', '_', 'p', 'a', 'm', '_', 'l', 'c', '_', 'f', 'a', 'i', 'l', 'u', 'r', 'e', 's', 't', 's', 
    '\030', '\005', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 
    'E', 's', 'p', '_', 'v', 'l', 'c', '_', '0', 'x', '2', '2', '3', '_', '2', '2', '3', '.', 'E', 's', 'p', '_', 'p', 'a', 'm', 
    '_', 'l', 'c', '_', 'f', 'a', 'i', 'l', 'u', 'r', 'e', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'S', '\n', '\021', 'e', 's', 'p', 
    '_', 'p', 'a', 'm', '_', 'l', 'c', '_', 's', 't', 'a', 't', 'u', 's', '\030', '\006', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 'm', 
    'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'v', 'l', 'c', '_', '0', 'x', '2', 
    '2', '3', '_', '2', '2', '3', '.', 'E', 's', 'p', '_', 'p', 'a', 'm', '_', 'l', 'c', '_', 's', 't', 'a', 't', 'u', 's', 'T', 
    'y', 'p', 'e', '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', 
    '2', '2', '3', '\030', '\007', ' ', '\001', '(', '\005', '\022', 'M', '\n', '\016', 'e', 's', 'p', '_', 'v', 'l', 'c', '_', 'a', 'c', 't', 'i', 
    'v', 'e', '\030', '\010', ' ', '\001', '(', '\016', '2', '5', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 
    's', '.', 'E', 's', 'p', '_', 'v', 'l', 'c', '_', '0', 'x', '2', '2', '3', '_', '2', '2', '3', '.', 'E', 's', 'p', '_', 'v', 
    'l', 'c', '_', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', 'S', '\n', '\021', 'e', 's', 'p', '_', 'v', 'l', 'c', '_', 
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', '\030', '\t', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'v', 'l', 'c', '_', '0', 'x', '2', '2', '3', '_', '2', '2', 
    '3', '.', 'E', 's', 'p', '_', 'v', 'l', 'c', '_', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', 'Y', 
    '\n', '\024', 'e', 's', 'p', '_', 'v', 'l', 'c', 'a', 'p', 'a', '_', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', '\030', '\n', ' ', 
    '\001', '(', '\016', '2', ';', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', 
    '_', 'v', 'l', 'c', '_', '0', 'x', '2', '2', '3', '_', '2', '2', '3', '.', 'E', 's', 'p', '_', 'v', 'l', 'c', 'a', 'p', 'a', 
    '_', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', 'Y', '\n', '\024', 'e', 's', 'p', '_', 'v', 'l', 'c', 
    'e', 'n', 'g', 't', 'o', 'r', 'q', 'r', 'e', 'q', 'a', 'c', 't', '\030', '\013', ' ', '\001', '(', '\016', '2', ';', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'v', 'l', 'c', '_', '0', 'x', '2', '2', 
    '3', '_', '2', '2', '3', '.', 'E', 's', 'p', '_', 'v', 'l', 'c', 'e', 'n', 'g', 't', 'o', 'r', 'q', 'r', 'e', 'q', 'a', 'c', 
    't', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '2', '2', '3', '\030', '\014', 
    ' ', '\001', '(', '\005', '\022', '\031', '\n', '\021', 'e', 's', 'p', '_', 'v', 'l', 'c', 'e', 'n', 'g', 't', 'o', 'r', 'q', 'r', 'e', 'q', 
    '\030', '\r', ' ', '\001', '(', '\005', '\"', 'o', '\n', '\031', 'E', 's', 'p', '_', 'a', 'p', 'a', '_', 'g', 'e', 'a', 'r', 'b', 'o', 'x', 
    'e', 'n', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', '$', '\n', ' ', 'E', 'S', 'P', '_', 'A', 'P', 'A', '_', 'G', 'E', 'A', 
    'R', 'B', 'O', 'X', 'E', 'N', 'A', 'B', 'L', 'E', '_', 'N', 'O', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\000', '\022', ',', 
    '\n', '(', 'E', 'S', 'P', '_', 'A', 'P', 'A', '_', 'G', 'E', 'A', 'R', 'B', 'O', 'X', 'E', 'N', 'A', 'B', 'L', 'E', '_', 'G', 
    'E', 'A', 'R', '_', 'S', 'H', 'I', 'F', 'T', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\001', '\"', '\324', '\001', '\n', '\033', 'E', 
    's', 'p', '_', 't', 'a', 'r', 'g', 'e', 't', '_', 'g', 'e', 'a', 'r', '_', 'r', 'e', 'q', 'u', 'e', 's', 't', 'T', 'y', 'p', 
    'e', '\022', '&', '\n', '\"', 'E', 'S', 'P', '_', 'T', 'A', 'R', 'G', 'E', 'T', '_', 'G', 'E', 'A', 'R', '_', 'R', 'E', 'Q', 'U', 
    'E', 'S', 'T', '_', 'N', 'O', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\000', '\022', ' ', '\n', '\034', 'E', 'S', 'P', '_', 'T', 
    'A', 'R', 'G', 'E', 'T', '_', 'G', 'E', 'A', 'R', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '_', 'P', 'A', 'R', 'K', '\020', '\001', 
    '\022', '#', '\n', '\037', 'E', 'S', 'P', '_', 'T', 'A', 'R', 'G', 'E', 'T', '_', 'G', 'E', 'A', 'R', '_', 'R', 'E', 'Q', 'U', 'E', 
    'S', 'T', '_', 'R', 'E', 'V', 'E', 'R', 'S', 'E', '\020', '\002', '\022', '#', '\n', '\037', 'E', 'S', 'P', '_', 'T', 'A', 'R', 'G', 'E', 
    'T', '_', 'G', 'E', 'A', 'R', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '_', 'N', 'E', 'U', 'T', 'R', 'A', 'L', '\020', '\003', '\022', 
    '!', '\n', '\035', 'E', 'S', 'P', '_', 'T', 'A', 'R', 'G', 'E', 'T', '_', 'G', 'E', 'A', 'R', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 
    'T', '_', 'D', 'R', 'I', 'V', 'E', '\020', '\004', '\"', 'T', '\n', '\024', 'E', 's', 'p', '_', 'v', 'l', 'c', '_', 'a', 'p', 'a', 'c', 
    't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '\037', '\n', '\033', 'E', 'S', 'P', '_', 'V', 'L', 'C', '_', 'A', 'P', 'A', 'C', 'T', 
    'I', 'V', 'E', '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\033', '\n', '\027', 'E', 'S', 'P', '_', 'V', 
    'L', 'C', '_', 'A', 'P', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', '\341', '\002', '\n', '\031', 
    'E', 's', 'p', '_', 'p', 'a', 'm', '_', 'l', 'c', '_', 'f', 'a', 'i', 'l', 'u', 'r', 'e', 's', 't', 's', 'T', 'y', 'p', 'e', 
    '\022', '\"', '\n', '\036', 'E', 'S', 'P', '_', 'P', 'A', 'M', '_', 'L', 'C', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', 'S', 'T', 'S', 
    '_', 'N', 'O', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\000', '\022', ')', '\n', '%', 'E', 'S', 'P', '_', 'P', 'A', 'M', '_', 'L', 'C', 
    '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', 'S', 'T', 'S', '_', 'V', 'E', 'H', 'I', 'C', 'L', 'E', '_', 'B', 'L', 'O', 'C', 'K', 
    'E', 'D', '\020', '\001', '\022', '1', '\n', '-', 'E', 'S', 'P', '_', 'P', 'A', 'M', '_', 'L', 'C', '_', 'F', 'A', 'I', 'L', 'U', 'R', 
    'E', 'S', 'T', 'S', '_', 'U', 'N', 'E', 'X', 'P', 'E', 'C', 'T', 'E', 'D', '_', 'G', 'E', 'A', 'R', 'P', 'O', 'S', 'I', 'T', 
    'I', 'O', 'N', '\020', '\002', '\022', '/', '\n', '+', 'E', 'S', 'P', '_', 'P', 'A', 'M', '_', 'L', 'C', '_', 'F', 'A', 'I', 'L', 'U', 
    'R', 'E', 'S', 'T', 'S', '_', 'U', 'N', 'E', 'X', 'P', 'E', 'C', 'T', 'E', 'D', '_', 'E', 'P', 'B', '_', 'A', 'C', 'T', 'I', 
    'O', 'N', '\020', '\003', '\022', '9', '\n', '5', 'E', 'S', 'P', '_', 'P', 'A', 'M', '_', 'L', 'C', '_', 'F', 'A', 'I', 'L', 'U', 'R', 
    'E', 'S', 'T', 'S', '_', 'U', 'N', 'E', 'X', 'P', 'E', 'C', 'T', 'E', 'D', '_', 'A', 'C', 'C', 'P', 'E', 'D', 'A', 'L', 'I', 
    'N', 'T', 'E', 'R', 'V', 'E', 'N', 'T', 'I', 'O', 'N', '\020', '\004', '\022', '5', '\n', '1', 'E', 'S', 'P', '_', 'P', 'A', 'M', '_', 
    'L', 'C', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', 'S', 'T', 'S', '_', 'U', 'N', 'E', 'X', 'P', 'E', 'C', 'T', 'E', 'D', '_', 
    'G', 'E', 'A', 'R', 'I', 'N', 'T', 'E', 'R', 'V', 'E', 'N', 'T', 'I', 'O', 'N', '\020', '\005', '\022', '\037', '\n', '\033', 'E', 'S', 'P', 
    '_', 'P', 'A', 'M', '_', 'L', 'C', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', 'S', 'T', 'S', '_', 'E', 'R', 'R', 'O', 'R', '\020', 
    '\007', '\"', '\232', '\001', '\n', '\025', 'E', 's', 'p', '_', 'p', 'a', 'm', '_', 'l', 'c', '_', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 
    'p', 'e', '\022', '\031', '\n', '\025', 'E', 'S', 'P', '_', 'P', 'A', 'M', '_', 'L', 'C', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'O', 
    'F', 'F', '\020', '\000', '\022', '\035', '\n', '\031', 'E', 'S', 'P', '_', 'P', 'A', 'M', '_', 'L', 'C', '_', 'S', 'T', 'A', 'T', 'U', 'S', 
    '_', 'S', 'T', 'A', 'N', 'D', 'B', 'Y', '\020', '\001', '\022', '*', '\n', '&', 'E', 'S', 'P', '_', 'P', 'A', 'M', '_', 'L', 'C', '_', 
    'S', 'T', 'A', 'T', 'U', 'S', '_', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'A', 'U', 'T', 'O', 'M', 'A', 'T', 'I', 'C', 'P', 'A', 
    'R', 'K', '\020', '\004', '\022', '\033', '\n', '\027', 'E', 'S', 'P', '_', 'P', 'A', 'M', '_', 'L', 'C', '_', 'S', 'T', 'A', 'T', 'U', 'S', 
    '_', 'E', 'R', 'R', 'O', 'R', '\020', '\n', '\"', 'N', '\n', '\022', 'E', 's', 'p', '_', 'v', 'l', 'c', '_', 'a', 'c', 't', 'i', 'v', 
    'e', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'E', 'S', 'P', '_', 'V', 'L', 'C', '_', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'N', 
    'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\031', '\n', '\025', 'E', 'S', 'P', '_', 'V', 'L', 'C', '_', 'A', 'C', 
    'T', 'I', 'V', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', ']', '\n', '\025', 'E', 's', 'p', '_', 'v', 'l', 'c', '_', 
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', '#', '\n', '\037', 'E', 'S', 'P', '_', 'V', 'L', 'C', '_', 
    'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'N', 'O', 'T', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', '\000', 
    '\022', '\037', '\n', '\033', 'E', 'S', 'P', '_', 'V', 'L', 'C', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'A', 'V', 'A', 
    'I', 'L', 'A', 'B', 'L', 'E', '\020', '\001', '\"', 'f', '\n', '\030', 'E', 's', 'p', '_', 'v', 'l', 'c', 'a', 'p', 'a', '_', 'a', 'v', 
    'a', 'i', 'l', 'a', 'b', 'l', 'e', 'T', 'y', 'p', 'e', '\022', '&', '\n', '\"', 'E', 'S', 'P', '_', 'V', 'L', 'C', 'A', 'P', 'A', 
    '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'N', 'O', 'T', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', 
    '\000', '\022', '\"', '\n', '\036', 'E', 'S', 'P', '_', 'V', 'L', 'C', 'A', 'P', 'A', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', 
    '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', '\001', '\"', '\\', '\n', '\030', 'E', 's', 'p', '_', 'v', 'l', 'c', 'e', 'n', 
    'g', 't', 'o', 'r', 'q', 'r', 'e', 'q', 'a', 'c', 't', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'E', 'S', 'P', '_', 'V', 'L', 
    'C', 'E', 'N', 'G', 'T', 'O', 'R', 'Q', 'R', 'E', 'Q', 'A', 'C', 'T', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', ' ', '\n', 
    '\034', 'E', 'S', 'P', '_', 'V', 'L', 'C', 'E', 'N', 'G', 'T', 'O', 'R', 'Q', 'R', 'E', 'Q', 'A', 'C', 'T', '_', 'I', 'N', 'V', 
    'A', 'L', 'I', 'D', '\020', '\001', '\"', '\253', '\006', '\n', '\026', 'G', 'w', '_', 'e', 'm', 's', '_', 'w', 'h', 'l', 't', 'q', '_', '0', 
    'x', '1', '0', '7', '_', '1', '0', '7', '\022', '\033', '\n', '\023', 'm', 'i', 'n', 'i', 'n', 'd', 'i', 'c', 'a', 't', 'e', 'd', 't', 
    'o', 'r', 'q', 'w', 'h', 'l', '\030', '\001', ' ', '\001', '(', '\005', '\022', '\034', '\n', '\024', 'e', 'm', 's', '_', 'a', 'c', 'c', 'r', 'a', 
    'w', 'p', 'e', 'd', 'a', 'l', 'r', 'a', 't', 'i', 'o', '\030', '\002', ' ', '\001', '(', '\001', '\022', '\031', '\n', '\021', 'e', 'm', 's', '_', 
    'a', 'c', 'c', 'p', 'e', 'd', 'a', 'l', 'r', 'a', 't', 'i', 'o', '\030', '\003', ' ', '\001', '(', '\001', '\022', '$', '\n', '\034', 'd', 'c', 
    'm', '_', 'e', 'm', 's', '_', 'r', 'o', 'l', 'l', 'i', 'n', 'g', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', '1', '0', 
    '7', '\030', '\004', ' ', '\001', '(', '\005', '\022', 'N', '\n', '\014', 'e', 'm', 's', '_', 'k', 'i', 'c', 'k', 'd', 'o', 'w', 'n', '\030', '\005', 
    ' ', '\001', '(', '\016', '2', '8', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', 
    '_', 'e', 'm', 's', '_', 'w', 'h', 'l', 't', 'q', '_', '0', 'x', '1', '0', '7', '_', '1', '0', '7', '.', 'E', 'm', 's', '_', 
    'k', 'i', 'c', 'k', 'd', 'o', 'w', 'n', 'T', 'y', 'p', 'e', '\022', 'b', '\n', '\026', 'e', 'm', 's', '_', 'a', 'c', 'c', 'p', 'e', 
    'd', 'a', 'l', 'r', 'a', 't', 'i', 'o', 'e', 'r', 'r', 'o', 'r', '\030', '\006', ' ', '\001', '(', '\016', '2', 'B', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'e', 'm', 's', '_', 'w', 'h', 'l', 't', 'q', 
    '_', '0', 'x', '1', '0', '7', '_', '1', '0', '7', '.', 'E', 'm', 's', '_', 'a', 'c', 'c', 'p', 'e', 'd', 'a', 'l', 'r', 'a', 
    't', 'i', 'o', 'e', 'r', 'r', 'o', 'r', 'T', 'y', 'p', 'e', '\022', 'Z', '\n', '\022', 'e', 'm', 's', '_', 'b', 'r', 'k', 'p', 'e', 
    'd', 'a', 'l', 's', 't', 'a', 's', 'u', 's', '\030', '\007', ' ', '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'e', 'm', 's', '_', 'w', 'h', 'l', 't', 'q', '_', '0', 'x', '1', 
    '0', '7', '_', '1', '0', '7', '.', 'E', 'm', 's', '_', 'b', 'r', 'k', 'p', 'e', 'd', 'a', 'l', 's', 't', 'a', 's', 'u', 's', 
    'T', 'y', 'p', 'e', '\022', '\036', '\n', '\026', 'd', 'c', 'm', '_', 'e', 'm', 's', '_', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', 
    '0', 'x', '1', '0', '7', '\030', '\010', ' ', '\001', '(', '\005', '\022', '\033', '\n', '\023', 'm', 'a', 'x', 'i', 'n', 'd', 'i', 'c', 'a', 't', 
    'e', 'd', 't', 'o', 'r', 'q', 'w', 'h', 'l', '\030', '\t', ' ', '\001', '(', '\005', '\"', 'G', '\n', '\020', 'E', 'm', 's', '_', 'k', 'i', 
    'c', 'k', 'd', 'o', 'w', 'n', 'T', 'y', 'p', 'e', '\022', '\032', '\n', '\026', 'E', 'M', 'S', '_', 'K', 'I', 'C', 'K', 'D', 'O', 'W', 
    'N', '_', 'N', 'O', 'T', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\027', '\n', '\023', 'E', 'M', 'S', '_', 'K', 'I', 'C', 'K', 
    'D', 'O', 'W', 'N', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', 'b', '\n', '\032', 'E', 'm', 's', '_', 'a', 'c', 'c', 'p', 
    'e', 'd', 'a', 'l', 'r', 'a', 't', 'i', 'o', 'e', 'r', 'r', 'o', 'r', 'T', 'y', 'p', 'e', '\022', '\"', '\n', '\036', 'E', 'M', 'S', 
    '_', 'A', 'C', 'C', 'P', 'E', 'D', 'A', 'L', 'R', 'A', 'T', 'I', 'O', 'E', 'R', 'R', 'O', 'R', '_', 'N', 'O', 'E', 'R', 'R', 
    'O', 'R', '\020', '\000', '\022', ' ', '\n', '\034', 'E', 'M', 'S', '_', 'A', 'C', 'C', 'P', 'E', 'D', 'A', 'L', 'R', 'A', 'T', 'I', 'O', 
    'E', 'R', 'R', 'O', 'R', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\001', '\"', '\232', '\001', '\n', '\026', 'E', 'm', 's', '_', 'b', 'r', 'k', 
    'p', 'e', 'd', 'a', 'l', 's', 't', 'a', 's', 'u', 's', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'E', 'M', 'S', '_', 'B', 'R', 
    'K', 'P', 'E', 'D', 'A', 'L', 'S', 'T', 'A', 'S', 'U', 'S', '_', 'N', 'O', 'T', 'P', 'R', 'E', 'S', 'S', 'E', 'D', '\020', '\000', 
    '\022', '\036', '\n', '\032', 'E', 'M', 'S', '_', 'B', 'R', 'K', 'P', 'E', 'D', 'A', 'L', 'S', 'T', 'A', 'S', 'U', 'S', '_', 'P', 'R', 
    'E', 'S', 'S', 'E', 'D', '\020', '\001', '\022', '\037', '\n', '\033', 'E', 'M', 'S', '_', 'B', 'R', 'K', 'P', 'E', 'D', 'A', 'L', 'S', 'T', 
    'A', 'S', 'U', 'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', '\022', '\034', '\n', '\030', 'E', 'M', 'S', '_', 'B', 'R', 
    'K', 'P', 'E', 'D', 'A', 'L', 'S', 'T', 'A', 'S', 'U', 'S', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\003', '\"', '\211', '\013', '\n', '\021', 
    'A', 'b', 's', '_', 's', 't', 's', '_', '0', 'x', '2', '2', '1', '_', '2', '2', '1', '\022', '\031', '\n', '\021', 'a', 'b', 's', '_', 
    'w', 'h', 'l', 'm', 'i', 'l', 'g', 'f', 'r', 'n', 't', 'r', 'i', '\030', '\001', ' ', '\001', '(', '\005', '\022', '\025', '\n', '\r', 'a', 'b', 
    's', '_', 'v', 'e', 'h', 's', 'p', 'd', 'l', 'g', 't', '\030', '\002', ' ', '\001', '(', '\001', '\022', 'W', '\n', '\023', 'a', 'b', 's', '_', 
    'v', 'e', 'h', 's', 'p', 'd', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '\030', '\003', ' ', '\001', '(', '\016', '2', ':', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'A', 'b', 's', '_', 's', 't', 's', '_', '0', 'x', 
    '2', '2', '1', '_', '2', '2', '1', '.', 'A', 'b', 's', '_', 'v', 'e', 'h', 's', 'p', 'd', 'd', 'i', 'r', 'e', 'c', 't', 'i', 
    'o', 'n', 'T', 'y', 'p', 'e', '\022', 'K', '\n', '\r', 'a', 'b', 's', '_', 'e', 'b', 'd', 'f', 'l', 'g', 'f', 'l', 't', '\030', '\004', 
    ' ', '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'A', 'b', 
    's', '_', 's', 't', 's', '_', '0', 'x', '2', '2', '1', '_', '2', '2', '1', '.', 'A', 'b', 's', '_', 'e', 'b', 'd', 'f', 'l', 
    'g', 'f', 'l', 't', 'T', 'y', 'p', 'e', '\022', 'K', '\n', '\r', 'a', 'b', 's', '_', 'a', 'b', 's', 'f', 'l', 'g', 'f', 'l', 't', 
    '\030', '\005', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 
    'A', 'b', 's', '_', 's', 't', 's', '_', '0', 'x', '2', '2', '1', '_', '2', '2', '1', '.', 'A', 'b', 's', '_', 'a', 'b', 's', 
    'f', 'l', 'g', 'f', 'l', 't', 'T', 'y', 'p', 'e', '\022', 'O', '\n', '\017', 'a', 'b', 's', '_', 'a', 'b', 's', 'c', 't', 'r', 'l', 
    'a', 'c', 't', 'v', '\030', '\006', ' ', '\001', '(', '\016', '2', '6', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'A', 'b', 's', '_', 's', 't', 's', '_', '0', 'x', '2', '2', '1', '_', '2', '2', '1', '.', 'A', 'b', 's', 
    '_', 'a', 'b', 's', 'c', 't', 'r', 'l', 'a', 'c', 't', 'v', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\024', 'r', 'o', 'l', 'l', 'i', 
    'n', 'g', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', '2', '2', '1', '\030', '\007', ' ', '\001', '(', '\005', '\022', '_', '\n', '\027', 
    'a', 'b', 's', '_', 'w', 'h', 'l', 'm', 'i', 'l', 'g', 'f', 'r', 'n', 't', 'l', 'e', 's', 't', 'a', 't', 'u', 's', '\030', '\010', 
    ' ', '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'A', 'b', 
    's', '_', 's', 't', 's', '_', '0', 'x', '2', '2', '1', '_', '2', '2', '1', '.', 'A', 'b', 's', '_', 'w', 'h', 'l', 'm', 'i', 
    'l', 'g', 'f', 'r', 'n', 't', 'l', 'e', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '_', '\n', '\027', 'a', 'b', 's', 
    '_', 'w', 'h', 'l', 'm', 'i', 'l', 'g', 'f', 'r', 'n', 't', 'r', 'i', 's', 't', 'a', 't', 'u', 's', '\030', '\t', ' ', '\001', '(', 
    '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'A', 'b', 's', '_', 's', 
    't', 's', '_', '0', 'x', '2', '2', '1', '_', '2', '2', '1', '.', 'A', 'b', 's', '_', 'w', 'h', 'l', 'm', 'i', 'l', 'g', 'f', 
    'r', 'n', 't', 'r', 'i', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', 'W', '\n', '\023', 'a', 'b', 's', '_', 'v', 'e', 
    'h', 's', 'p', 'd', 'l', 'g', 't', 's', 't', 'a', 't', 'u', 's', '\030', '\n', ' ', '\001', '(', '\016', '2', ':', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'A', 'b', 's', '_', 's', 't', 's', '_', '0', 'x', '2', '2', 
    '1', '_', '2', '2', '1', '.', 'A', 'b', 's', '_', 'v', 'e', 'h', 's', 'p', 'd', 'l', 'g', 't', 's', 't', 'a', 't', 'u', 's', 
    'T', 'y', 'p', 'e', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '2', '2', '1', '\030', '\013', ' ', 
    '\001', '(', '\005', '\022', '\031', '\n', '\021', 'a', 'b', 's', '_', 'w', 'h', 'l', 'm', 'i', 'l', 'g', 'f', 'r', 'n', 't', 'l', 'e', '\030', 
    '\014', ' ', '\001', '(', '\005', '\"', '\\', '\n', '\027', 'A', 'b', 's', '_', 'v', 'e', 'h', 's', 'p', 'd', 'd', 'i', 'r', 'e', 'c', 't', 
    'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', '\037', '\n', '\033', 'A', 'B', 'S', '_', 'V', 'E', 'H', 'S', 'P', 'D', 'D', 'I', 'R', 'E', 
    'C', 'T', 'I', 'O', 'N', '_', 'F', 'O', 'R', 'W', 'A', 'R', 'D', '\020', '\000', '\022', ' ', '\n', '\034', 'A', 'B', 'S', '_', 'V', 'E', 
    'H', 'S', 'P', 'D', 'D', 'I', 'R', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'B', 'A', 'C', 'K', 'W', 'A', 'R', 'D', '\020', '\001', '\"', 
    'L', '\n', '\021', 'A', 'b', 's', '_', 'e', 'b', 'd', 'f', 'l', 'g', 'f', 'l', 't', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'A', 
    'B', 'S', '_', 'E', 'B', 'D', 'F', 'L', 'G', 'F', 'L', 'T', '_', 'N', 'O', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', '\020', '\000', 
    '\022', '\031', '\n', '\025', 'A', 'B', 'S', '_', 'E', 'B', 'D', 'F', 'L', 'G', 'F', 'L', 'T', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', 
    '\020', '\001', '\"', 'L', '\n', '\021', 'A', 'b', 's', '_', 'a', 'b', 's', 'f', 'l', 'g', 'f', 'l', 't', 'T', 'y', 'p', 'e', '\022', '\034', 
    '\n', '\030', 'A', 'B', 'S', '_', 'A', 'B', 'S', 'F', 'L', 'G', 'F', 'L', 'T', '_', 'N', 'O', '_', 'F', 'A', 'I', 'L', 'U', 'R', 
    'E', '\020', '\000', '\022', '\031', '\n', '\025', 'A', 'B', 'S', '_', 'A', 'B', 'S', 'F', 'L', 'G', 'F', 'L', 'T', '_', 'F', 'A', 'I', 'L', 
    'U', 'R', 'E', '\020', '\001', '\"', 'Q', '\n', '\023', 'A', 'b', 's', '_', 'a', 'b', 's', 'c', 't', 'r', 'l', 'a', 'c', 't', 'v', 'T', 
    'y', 'p', 'e', '\022', '\036', '\n', '\032', 'A', 'B', 'S', '_', 'A', 'B', 'S', 'C', 'T', 'R', 'L', 'A', 'C', 'T', 'V', '_', 'N', 'O', 
    'T', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\032', '\n', '\026', 'A', 'B', 'S', '_', 'A', 'B', 'S', 'C', 'T', 'R', 'L', 
    'A', 'C', 'T', 'V', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', 'e', '\n', '\033', 'A', 'b', 's', '_', 'w', 'h', 'l', 'm', 
    'i', 'l', 'g', 'f', 'r', 'n', 't', 'l', 'e', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'A', 'B', 
    'S', '_', 'W', 'H', 'L', 'M', 'I', 'L', 'G', 'F', 'R', 'N', 'T', 'L', 'E', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'V', 'A', 'L', 
    'I', 'D', '\020', '\000', '\022', '#', '\n', '\037', 'A', 'B', 'S', '_', 'W', 'H', 'L', 'M', 'I', 'L', 'G', 'F', 'R', 'N', 'T', 'L', 'E', 
    'S', 'T', 'A', 'T', 'U', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', 'e', '\n', '\033', 'A', 'b', 's', '_', 'w', 
    'h', 'l', 'm', 'i', 'l', 'g', 'f', 'r', 'n', 't', 'r', 'i', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '!', '\n', 
    '\035', 'A', 'B', 'S', '_', 'W', 'H', 'L', 'M', 'I', 'L', 'G', 'F', 'R', 'N', 'T', 'R', 'I', 'S', 'T', 'A', 'T', 'U', 'S', '_', 
    'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '#', '\n', '\037', 'A', 'B', 'S', '_', 'W', 'H', 'L', 'M', 'I', 'L', 'G', 'F', 'R', 'N', 
    'T', 'R', 'I', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', 'w', '\n', '\027', 'A', 'b', 
    's', '_', 'v', 'e', 'h', 's', 'p', 'd', 'l', 'g', 't', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 
    'A', 'B', 'S', '_', 'V', 'E', 'H', 'S', 'P', 'D', 'L', 'G', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'V', 'A', 'L', 'I', 'D', 
    '\020', '\000', '\022', '\037', '\n', '\033', 'A', 'B', 'S', '_', 'V', 'E', 'H', 'S', 'P', 'D', 'L', 'G', 'T', 'S', 'T', 'A', 'T', 'U', 'S', 
    '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\022', '\034', '\n', '\030', 'A', 'B', 'S', '_', 'V', 'E', 'H', 'S', 'P', 'D', 'L', 
    'G', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'I', 'N', 'I', 'T', '\020', '\002', '\"', '\212', '\010', '\n', '\023', 'M', 'r', 'r', '_', 'f', 
    'r', 'o', 'b', 'j', '_', '0', 'x', '4', '8', '0', '_', '4', '8', '0', '\022', '\027', '\n', '\017', 'm', 'r', 'r', '_', 'l', '_', 'o', 
    'b', 'j', 'e', 'c', 't', '_', 'd', 'y', '\030', '\001', ' ', '\001', '(', '\001', '\022', 'W', '\n', '\022', 'm', 'r', 'r', '_', 'l', '_', 'o', 
    'b', 'j', '_', '0', 'x', '_', 'c', 'l', 'a', 's', 's', '\030', '\002', ' ', '\001', '(', '\016', '2', ';', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', 'f', 'r', 'o', 'b', 'j', '_', '0', 'x', '4', '8', 
    '0', '_', '4', '8', '0', '.', 'M', 'r', 'r', '_', 'l', '_', 'o', 'b', 'j', '_', '0', 'x', '_', 'c', 'l', 'a', 's', 's', 'T', 
    'y', 'p', 'e', '\022', '\027', '\n', '\017', 'm', 'r', 'r', '_', 'r', '_', 'o', 'b', 'j', 'e', 'c', 't', '_', 'd', 'x', '\030', '\003', ' ', 
    '\001', '(', '\001', '\022', '\027', '\n', '\017', 'm', 'r', 'r', '_', 'r', '_', 'o', 'b', 'j', 'e', 'c', 't', '_', 'd', 'y', '\030', '\004', ' ', 
    '\001', '(', '\001', '\022', 'W', '\n', '\022', 'm', 'r', 'r', '_', 'r', '_', 'o', 'b', 'j', '_', '0', 'x', '_', 'c', 'l', 'a', 's', 's', 
    '\030', '\005', ' ', '\001', '(', '\016', '2', ';', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 
    'M', 'r', 'r', '_', 'f', 'r', 'o', 'b', 'j', '_', '0', 'x', '4', '8', '0', '_', '4', '8', '0', '.', 'M', 'r', 'r', '_', 'r', 
    '_', 'o', 'b', 'j', '_', '0', 'x', '_', 'c', 'l', 'a', 's', 's', 'T', 'y', 'p', 'e', '\022', 'a', '\n', '\027', 'm', 'r', 'r', '_', 
    'l', 'e', 'f', 't', 't', 'a', 'r', 'g', 'r', 't', 'd', 'e', 't', 'e', 'c', 't', 'i', 'o', 'n', '\030', '\006', ' ', '\001', '(', '\016', 
    '2', '@', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', 'f', 'r', 
    'o', 'b', 'j', '_', '0', 'x', '4', '8', '0', '_', '4', '8', '0', '.', 'M', 'r', 'r', '_', 'l', 'e', 'f', 't', 't', 'a', 'r', 
    'g', 'r', 't', 'd', 'e', 't', 'e', 'c', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', 'c', '\n', '\030', 'm', 'r', 'r', '_', 'r', 
    'i', 'g', 'h', 't', 't', 'a', 'r', 'g', 'r', 't', 'd', 'e', 't', 'e', 'c', 't', 'i', 'o', 'n', '\030', '\007', ' ', '\001', '(', '\016', 
    '2', 'A', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', 'f', 'r', 
    'o', 'b', 'j', '_', '0', 'x', '4', '8', '0', '_', '4', '8', '0', '.', 'M', 'r', 'r', '_', 'r', 'i', 'g', 'h', 't', 't', 'a', 
    'r', 'g', 'r', 't', 'd', 'e', 't', 'e', 'c', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', '\027', '\n', '\017', 'm', 'r', 'r', '_', 
    'l', '_', 'o', 'b', 'j', 'e', 'c', 't', '_', 'd', 'x', '\030', '\010', ' ', '\001', '(', '\001', '\"', '\226', '\001', '\n', '\026', 'M', 'r', 'r', 
    '_', 'l', '_', 'o', 'b', 'j', '_', '0', 'x', '_', 'c', 'l', 'a', 's', 's', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'M', 'R', 
    'R', '_', 'L', '_', 'O', 'B', 'J', '_', '0', 'X', '_', 'C', 'L', 'A', 'S', 'S', '_', 'U', 'N', 'K', 'N', 'O', 'W', 'N', '\020', 
    '\000', '\022', '\032', '\n', '\026', 'M', 'R', 'R', '_', 'L', '_', 'O', 'B', 'J', '_', '0', 'X', '_', 'C', 'L', 'A', 'S', 'S', '_', 'C', 
    'A', 'R', '\020', '\001', '\022', '\034', '\n', '\030', 'M', 'R', 'R', '_', 'L', '_', 'O', 'B', 'J', '_', '0', 'X', '_', 'C', 'L', 'A', 'S', 
    'S', '_', 'T', 'R', 'U', 'C', 'K', '\020', '\002', '\022', '\"', '\n', '\036', 'M', 'R', 'R', '_', 'L', '_', 'O', 'B', 'J', '_', '0', 'X', 
    '_', 'C', 'L', 'A', 'S', 'S', '_', 'T', 'W', 'O', '_', 'W', 'H', 'E', 'E', 'L', 'E', 'R', '\020', '\003', '\"', '\226', '\001', '\n', '\026', 
    'M', 'r', 'r', '_', 'r', '_', 'o', 'b', 'j', '_', '0', 'x', '_', 'c', 'l', 'a', 's', 's', 'T', 'y', 'p', 'e', '\022', '\036', '\n', 
    '\032', 'M', 'R', 'R', '_', 'R', '_', 'O', 'B', 'J', '_', '0', 'X', '_', 'C', 'L', 'A', 'S', 'S', '_', 'U', 'N', 'K', 'N', 'O', 
    'W', 'N', '\020', '\000', '\022', '\032', '\n', '\026', 'M', 'R', 'R', '_', 'R', '_', 'O', 'B', 'J', '_', '0', 'X', '_', 'C', 'L', 'A', 'S', 
    'S', '_', 'C', 'A', 'R', '\020', '\001', '\022', '\034', '\n', '\030', 'M', 'R', 'R', '_', 'R', '_', 'O', 'B', 'J', '_', '0', 'X', '_', 'C', 
    'L', 'A', 'S', 'S', '_', 'T', 'R', 'U', 'C', 'K', '\020', '\002', '\022', '\"', '\n', '\036', 'M', 'R', 'R', '_', 'R', '_', 'O', 'B', 'J', 
    '_', '0', 'X', '_', 'C', 'L', 'A', 'S', 'S', '_', 'T', 'W', 'O', '_', 'W', 'H', 'E', 'E', 'L', 'E', 'R', '\020', '\003', '\"', 'o', 
    '\n', '\033', 'M', 'r', 'r', '_', 'l', 'e', 'f', 't', 't', 'a', 'r', 'g', 'r', 't', 'd', 'e', 't', 'e', 'c', 't', 'i', 'o', 'n', 
    'T', 'y', 'p', 'e', '\022', ')', '\n', '%', 'M', 'R', 'R', '_', 'L', 'E', 'F', 'T', 'T', 'A', 'R', 'G', 'R', 'T', 'D', 'E', 'T', 
    'E', 'C', 'T', 'I', 'O', 'N', '_', 'N', 'O', 'T', '_', 'D', 'E', 'C', 'T', 'E', 'C', 'T', 'E', 'D', '\020', '\000', '\022', '%', '\n', 
    '!', 'M', 'R', 'R', '_', 'L', 'E', 'F', 'T', 'T', 'A', 'R', 'G', 'R', 'T', 'D', 'E', 'T', 'E', 'C', 'T', 'I', 'O', 'N', '_', 
    'D', 'E', 'C', 'T', 'E', 'C', 'T', 'E', 'D', '\020', '\001', '\"', 'r', '\n', '\034', 'M', 'r', 'r', '_', 'r', 'i', 'g', 'h', 't', 't', 
    'a', 'r', 'g', 'r', 't', 'd', 'e', 't', 'e', 'c', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', '*', '\n', '&', 'M', 'R', 'R', 
    '_', 'R', 'I', 'G', 'H', 'T', 'T', 'A', 'R', 'G', 'R', 'T', 'D', 'E', 'T', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'N', 'O', 'T', 
    '_', 'D', 'E', 'C', 'T', 'E', 'C', 'T', 'E', 'D', '\020', '\000', '\022', '&', '\n', '\"', 'M', 'R', 'R', '_', 'R', 'I', 'G', 'H', 'T', 
    'T', 'A', 'R', 'G', 'R', 'T', 'D', 'E', 'T', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'D', 'E', 'C', 'T', 'E', 'C', 'T', 'E', 'D', 
    '\020', '\001', '\"', '\302', '\032', '\n', '\r', 'M', 'r', 'r', '_', '0', 'x', '2', '4', '6', '_', '2', '4', '6', '\022', '?', '\n', '\t', 't', 
    'a', 'u', 'g', 'a', 'p', 's', 'e', 't', '\030', '\001', ' ', '\001', '(', '\016', '2', ',', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '4', '6', '_', '2', '4', '6', '.', 'T', 'a', 'u', 
    'g', 'a', 'p', 's', 'e', 't', 'T', 'y', 'p', 'e', '\022', '=', '\n', '\010', 'd', 'x', 't', 'a', 'r', 'o', 'b', 'j', '\030', '\002', ' ', 
    '\001', '(', '\016', '2', '+', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', 
    '_', '0', 'x', '2', '4', '6', '_', '2', '4', '6', '.', 'D', 'x', 't', 'a', 'r', 'o', 'b', 'j', 'T', 'y', 'p', 'e', '\022', 'C', 
    '\n', '\013', 'a', 'c', 'c', 'h', 'm', 'i', '_', 'm', 'o', 'd', 'e', '\030', '\003', ' ', '\001', '(', '\016', '2', '.', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '4', '6', '_', '2', '4', 
    '6', '.', 'A', 'c', 'c', 'h', 'm', 'i', '_', 'm', 'o', 'd', 'e', 'T', 'y', 'p', 'e', '\022', 'C', '\n', '\013', 'a', 'c', 'c', 'f', 
    'a', 'i', 'l', 'i', 'n', 'f', 'o', '\030', '\004', ' ', '\001', '(', '\016', '2', '.', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '4', '6', '_', '2', '4', '6', '.', 'A', 'c', 'c', 'f', 
    'a', 'i', 'l', 'i', 'n', 'f', 'o', 'T', 'y', 'p', 'e', '\022', 'C', '\n', '\013', 't', 'a', 'k', 'e', 'o', 'v', 'e', 'r', 'r', 'e', 
    'q', '\030', '\005', ' ', '\001', '(', '\016', '2', '.', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'M', 'r', 'r', '_', '0', 'x', '2', '4', '6', '_', '2', '4', '6', '.', 'T', 'a', 'k', 'e', 'o', 'v', 'e', 'r', 'r', 'e', 
    'q', 'T', 'y', 'p', 'e', '\022', 'O', '\n', '\021', 'm', 'r', 'r', '_', 'f', 'c', 'w', '_', 's', 'e', 'n', 's', 'i', 't', 'i', 'v', 
    'e', '\030', '\006', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'M', 'r', 'r', '_', '0', 'x', '2', '4', '6', '_', '2', '4', '6', '.', 'M', 'r', 'r', '_', 'f', 'c', 'w', '_', 's', 'e', 
    'n', 's', 'i', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '?', '\n', '\t', 'a', 'e', 'b', '_', 's', 't', 'a', 't', 'e', '\030', 
    '\007', ' ', '\001', '(', '\016', '2', ',', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 
    'r', 'r', '_', '0', 'x', '2', '4', '6', '_', '2', '4', '6', '.', 'A', 'e', 'b', '_', 's', 't', 'a', 't', 'e', 'T', 'y', 'p', 
    'e', '\022', 'S', '\n', '\023', 'a', 'c', 'c', '_', 's', 't', 'a', 'r', 't', 's', 't', 'o', 'p', '_', 'i', 'n', 'f', 'o', 'r', '\030', 
    '\010', ' ', '\001', '(', '\016', '2', '6', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 
    'r', 'r', '_', '0', 'x', '2', '4', '6', '_', '2', '4', '6', '.', 'A', 'c', 'c', '_', 's', 't', 'a', 'r', 't', 's', 't', 'o', 
    'p', '_', 'i', 'n', 'f', 'o', 'r', 'T', 'y', 'p', 'e', '\022', 'I', '\n', '\016', 'f', 'c', 'w', '_', 'p', 'r', 'e', 'w', 'a', 'r', 
    'n', 'i', 'n', 'g', '\030', '\t', ' ', '\001', '(', '\016', '2', '1', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '4', '6', '_', '2', '4', '6', '.', 'F', 'c', 'w', '_', 'p', 'r', 'e', 
    'w', 'a', 'r', 'n', 'i', 'n', 'g', 'T', 'y', 'p', 'e', '\022', 'O', '\n', '\021', 'f', 'c', 'w', '_', 'l', 'a', 't', 'e', 'n', 't', 
    'w', 'a', 'r', 'n', 'i', 'n', 'g', '\030', '\n', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '4', '6', '_', '2', '4', '6', '.', 'F', 'c', 'w', '_', 
    'l', 'a', 't', 'e', 'n', 't', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'T', 'y', 'p', 'e', '\022', '?', '\n', '\t', 'f', 'c', 'w', '_', 
    's', 't', 'a', 't', 'e', '\030', '\013', ' ', '\001', '(', '\016', '2', ',', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '4', '6', '_', '2', '4', '6', '.', 'F', 'c', 'w', '_', 's', 't', 
    'a', 't', 'e', 'T', 'y', 'p', 'e', '\022', '\021', '\n', '\t', 'o', 'b', 'j', '_', 's', 'p', 'e', 'e', 'd', '\030', '\014', ' ', '\001', '(', 
    '\005', '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', '2', '4', 
    '6', '\030', '\r', ' ', '\001', '(', '\005', '\022', '=', '\n', '\010', 't', 'e', 'x', 't', 'i', 'n', 'f', 'o', '\030', '\016', ' ', '\001', '(', '\016', 
    '2', '+', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', 
    '2', '4', '6', '_', '2', '4', '6', '.', 'T', 'e', 'x', 't', 'i', 'n', 'f', 'o', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\016', 'c', 
    'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '2', '4', '6', '\030', '\017', ' ', '\001', '(', '\005', '\022', ';', '\n', '\007', 'v', 's', 
    'e', 't', 'd', 'i', 's', '\030', '\020', ' ', '\001', '(', '\016', '2', '*', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '4', '6', '_', '2', '4', '6', '.', 'V', 's', 'e', 't', 'd', 'i', 
    's', 'T', 'y', 'p', 'e', '\022', '=', '\n', '\010', 'o', 'b', 'j', 'v', 'a', 'l', 'i', 'd', '\030', '\021', ' ', '\001', '(', '\016', '2', '+', 
    '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '4', 
    '6', '_', '2', '4', '6', '.', 'O', 'b', 'j', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\"', '\317', '\001', '\n', '\r', 'T', 'a', 
    'u', 'g', 'a', 'p', 's', 'e', 't', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\022', 'T', 'A', 'U', 'G', 'A', 'P', 'S', 'E', 'T', '_', 
    'T', 'A', 'U', 'G', 'A', 'P', '_', '0', '\020', '\000', '\022', '\026', '\n', '\022', 'T', 'A', 'U', 'G', 'A', 'P', 'S', 'E', 'T', '_', 'T', 
    'A', 'U', 'G', 'A', 'P', '_', '1', '\020', '\001', '\022', '\026', '\n', '\022', 'T', 'A', 'U', 'G', 'A', 'P', 'S', 'E', 'T', '_', 'T', 'A', 
    'U', 'G', 'A', 'P', '_', '2', '\020', '\002', '\022', '\026', '\n', '\022', 'T', 'A', 'U', 'G', 'A', 'P', 'S', 'E', 'T', '_', 'T', 'A', 'U', 
    'G', 'A', 'P', '_', '3', '\020', '\003', '\022', '\026', '\n', '\022', 'T', 'A', 'U', 'G', 'A', 'P', 'S', 'E', 'T', '_', 'T', 'A', 'U', 'G', 
    'A', 'P', '_', '4', '\020', '\004', '\022', '\026', '\n', '\022', 'T', 'A', 'U', 'G', 'A', 'P', 'S', 'E', 'T', '_', 'T', 'A', 'U', 'G', 'A', 
    'P', '_', '5', '\020', '\005', '\022', '\026', '\n', '\022', 'T', 'A', 'U', 'G', 'A', 'P', 'S', 'E', 'T', '_', 'T', 'A', 'U', 'G', 'A', 'P', 
    '_', '6', '\020', '\006', '\022', '\026', '\n', '\022', 'T', 'A', 'U', 'G', 'A', 'P', 'S', 'E', 'T', '_', 'T', 'A', 'U', 'G', 'A', 'P', '_', 
    '7', '\020', '\007', '\"', '\326', '\001', '\n', '\014', 'D', 'x', 't', 'a', 'r', 'o', 'b', 'j', 'T', 'y', 'p', 'e', '\022', '\027', '\n', '\023', 'D', 
    'X', 'T', 'A', 'R', 'O', 'B', 'J', '_', 'D', 'I', 'S', 'T', 'A', 'N', 'C', 'E', '_', '0', '\020', '\000', '\022', '\027', '\n', '\023', 'D', 
    'X', 'T', 'A', 'R', 'O', 'B', 'J', '_', 'D', 'I', 'S', 'T', 'A', 'N', 'C', 'E', '_', '1', '\020', '\001', '\022', '\027', '\n', '\023', 'D', 
    'X', 'T', 'A', 'R', 'O', 'B', 'J', '_', 'D', 'I', 'S', 'T', 'A', 'N', 'C', 'E', '_', '2', '\020', '\002', '\022', '\027', '\n', '\023', 'D', 
    'X', 'T', 'A', 'R', 'O', 'B', 'J', '_', 'D', 'I', 'S', 'T', 'A', 'N', 'C', 'E', '_', '3', '\020', '\003', '\022', '\027', '\n', '\023', 'D', 
    'X', 'T', 'A', 'R', 'O', 'B', 'J', '_', 'D', 'I', 'S', 'T', 'A', 'N', 'C', 'E', '_', '4', '\020', '\004', '\022', '\027', '\n', '\023', 'D', 
    'X', 'T', 'A', 'R', 'O', 'B', 'J', '_', 'D', 'I', 'S', 'T', 'A', 'N', 'C', 'E', '_', '5', '\020', '\005', '\022', '\027', '\n', '\023', 'D', 
    'X', 'T', 'A', 'R', 'O', 'B', 'J', '_', 'D', 'I', 'S', 'T', 'A', 'N', 'C', 'E', '_', '6', '\020', '\006', '\022', '\027', '\n', '\023', 'D', 
    'X', 'T', 'A', 'R', 'O', 'B', 'J', '_', 'D', 'I', 'S', 'T', 'A', 'N', 'C', 'E', '_', '7', '\020', '\007', '\"', '\202', '\002', '\n', '\017', 
    'A', 'c', 'c', 'h', 'm', 'i', '_', 'm', 'o', 'd', 'e', 'T', 'y', 'p', 'e', '\022', '\030', '\n', '\024', 'A', 'C', 'C', 'H', 'M', 'I', 
    '_', 'M', 'O', 'D', 'E', '_', 'O', 'F', 'F', '_', 'M', 'O', 'D', 'E', '\020', '\000', '\022', '\034', '\n', '\030', 'A', 'C', 'C', 'H', 'M', 
    'I', '_', 'M', 'O', 'D', 'E', '_', 'P', 'A', 'S', 'S', 'I', 'V', 'E', '_', 'M', 'O', 'D', 'E', '\020', '\001', '\022', '\035', '\n', '\031', 
    'A', 'C', 'C', 'H', 'M', 'I', '_', 'M', 'O', 'D', 'E', '_', 'S', 'T', 'A', 'N', 'D', '_', 'B', 'Y', '_', 'M', 'O', 'D', 'E', 
    '\020', '\002', '\022', '#', '\n', '\037', 'A', 'C', 'C', 'H', 'M', 'I', '_', 'M', 'O', 'D', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'E', '_', 
    'C', 'O', 'N', 'T', 'R', 'O', 'L', '_', 'M', 'O', 'D', 'E', '\020', '\003', '\022', '\037', '\n', '\033', 'A', 'C', 'C', 'H', 'M', 'I', '_', 
    'M', 'O', 'D', 'E', '_', 'B', 'R', 'A', 'K', 'E', '_', 'O', 'N', 'L', 'Y', '_', 'M', 'O', 'D', 'E', '\020', '\004', '\022', '\030', '\n', 
    '\024', 'A', 'C', 'C', 'H', 'M', 'I', '_', 'M', 'O', 'D', 'E', '_', 'O', 'V', 'E', 'R', 'R', 'I', 'D', 'E', '\020', '\005', '\022', '\032', 
    '\n', '\026', 'A', 'C', 'C', 'H', 'M', 'I', '_', 'M', 'O', 'D', 'E', '_', 'S', 'T', 'A', 'N', 'D', 'S', 'T', 'I', 'L', 'L', '\020', 
    '\006', '\022', '\034', '\n', '\030', 'A', 'C', 'C', 'H', 'M', 'I', '_', 'M', 'O', 'D', 'E', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', '_', 
    'M', 'O', 'D', 'E', '\020', '\007', '\"', 'B', '\n', '\017', 'A', 'c', 'c', 'f', 'a', 'i', 'l', 'i', 'n', 'f', 'o', 'T', 'y', 'p', 'e', 
    '\022', '\030', '\n', '\024', 'A', 'C', 'C', 'F', 'A', 'I', 'L', 'I', 'N', 'F', 'O', '_', 'N', 'O', '_', 'E', 'R', 'R', 'O', 'R', '\020', 
    '\000', '\022', '\025', '\n', '\021', 'A', 'C', 'C', 'F', 'A', 'I', 'L', 'I', 'N', 'F', 'O', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\001', '\"', 
    '^', '\n', '\017', 'T', 'a', 'k', 'e', 'o', 'v', 'e', 'r', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '#', '\n', '\037', 'T', 'A', 'K', 
    'E', 'O', 'V', 'E', 'R', 'R', 'E', 'Q', '_', 'N', 'O', '_', 'T', 'A', 'K', 'E', 'O', 'V', 'E', 'R', '_', 'R', 'E', 'Q', 'U', 
    'E', 'S', 'T', '\020', '\000', '\022', '&', '\n', '\"', 'T', 'A', 'K', 'E', 'O', 'V', 'E', 'R', 'R', 'E', 'Q', '_', 'V', 'A', 'L', 'I', 
    'D', '_', 'T', 'A', 'K', 'E', 'O', 'V', 'E', 'R', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\001', '\"', '\270', '\001', '\n', '\025', 
    'M', 'r', 'r', '_', 'f', 'c', 'w', '_', 's', 'e', 'n', 's', 'i', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 
    'M', 'R', 'R', '_', 'F', 'C', 'W', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 'V', 'E', '_', 'U', 'N', 'A', 'V', 'A', 'I', 'L', 
    'A', 'B', 'L', 'E', '\020', '\000', '\022', '*', '\n', '&', 'M', 'R', 'R', '_', 'F', 'C', 'W', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 
    'V', 'E', '_', 'L', 'E', 'V', 'E', 'L', '1', '_', 'L', 'O', 'W', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 'V', 'E', '\020', '\001', 
    '\022', '#', '\n', '\037', 'M', 'R', 'R', '_', 'F', 'C', 'W', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 'V', 'E', '_', 'L', 'E', 'V', 
    'E', 'L', '2', '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\002', '\022', '+', '\n', '\'', 'M', 'R', 'R', '_', 'F', 'C', 'W', '_', 'S', 
    'E', 'N', 'S', 'I', 'T', 'I', 'V', 'E', '_', 'L', 'E', 'V', 'E', 'L', '3', '_', 'H', 'I', 'G', 'H', '_', 'S', 'E', 'N', 'S', 
    'I', 'T', 'I', 'V', 'E', '\020', '\003', '\"', '\250', '\001', '\n', '\r', 'A', 'e', 'b', '_', 's', 't', 'a', 't', 'e', 'T', 'y', 'p', 'e', 
    '\022', '\031', '\n', '\025', 'A', 'E', 'B', '_', 'S', 'T', 'A', 'T', 'E', '_', 'U', 'N', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', 
    '\020', '\000', '\022', '\021', '\n', '\r', 'A', 'E', 'B', '_', 'S', 'T', 'A', 'T', 'E', '_', 'O', 'F', 'F', '\020', '\001', '\022', '\025', '\n', '\021', 
    'A', 'E', 'B', '_', 'S', 'T', 'A', 'T', 'E', '_', 'S', 'T', 'A', 'N', 'D', 'B', 'Y', '\020', '\002', '\022', '$', '\n', ' ', 'A', 'E', 
    'B', '_', 'S', 'T', 'A', 'T', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'N', 'O', '_', 'I', 'N', 'T', 'E', 'R', 'V', 'E', 
    'N', 'T', 'I', 'O', 'N', '\020', '\003', '\022', '\024', '\n', '\020', 'A', 'E', 'B', '_', 'S', 'T', 'A', 'T', 'E', '_', 'A', 'C', 'T', 'I', 
    'V', 'E', '\020', '\004', '\022', '\026', '\n', '\022', 'A', 'E', 'B', '_', 'S', 'T', 'A', 'T', 'E', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 
    'D', '\020', '\005', '\"', '\302', '\001', '\n', '\027', 'A', 'c', 'c', '_', 's', 't', 'a', 'r', 't', 's', 't', 'o', 'p', '_', 'i', 'n', 'f', 
    'o', 'r', 'T', 'y', 'p', 'e', '\022', '\'', '\n', '#', 'A', 'C', 'C', '_', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 'O', 'P', '_', 'I', 
    'N', 'F', 'O', 'R', '_', 'A', 'C', 'C', '_', 'S', 'T', 'O', 'P', 'A', 'L', 'L', 'O', 'W', 'E', 'D', '\020', '\000', '\022', ')', '\n', 
    '%', 'A', 'C', 'C', '_', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 'O', 'P', '_', 'I', 'N', 'F', 'O', 'R', '_', 'A', 'C', 'C', '_', 
    'S', 'T', 'O', 'P', 'F', 'O', 'R', 'B', 'I', 'D', 'D', 'E', 'N', '\020', '\001', '\022', '(', '\n', '$', 'A', 'C', 'C', '_', 'S', 'T', 
    'A', 'R', 'T', 'S', 'T', 'O', 'P', '_', 'I', 'N', 'F', 'O', 'R', '_', 'A', 'C', 'C', '_', 'S', 'T', 'A', 'R', 'T', 'R', 'E', 
    'Q', 'U', 'E', 'S', 'T', '\020', '\002', '\022', ')', '\n', '%', 'A', 'C', 'C', '_', 'S', 'T', 'A', 'R', 'T', 'S', 'T', 'O', 'P', '_', 
    'I', 'N', 'F', 'O', 'R', '_', 'A', 'C', 'C', '_', 'S', 'Y', 'S', 'T', 'E', 'M', 'F', 'A', 'I', 'L', 'U', 'R', 'E', '\020', '\003', 
    '\"', 'O', '\n', '\022', 'F', 'c', 'w', '_', 'p', 'r', 'e', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'T', 'y', 'p', 'e', '\022', '\035', '\n', 
    '\031', 'F', 'C', 'W', '_', 'P', 'R', 'E', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'N', 'O', '_', 'W', 'A', 'R', 'N', 'I', 'N', 
    'G', '\020', '\000', '\022', '\032', '\n', '\026', 'F', 'C', 'W', '_', 'P', 'R', 'E', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'W', 'A', 'R', 
    'N', 'I', 'N', 'G', '\020', '\001', '\"', 'X', '\n', '\025', 'F', 'c', 'w', '_', 'l', 'a', 't', 'e', 'n', 't', 'w', 'a', 'r', 'n', 'i', 
    'n', 'g', 'T', 'y', 'p', 'e', '\022', ' ', '\n', '\034', 'F', 'C', 'W', '_', 'L', 'A', 'T', 'E', 'N', 'T', 'W', 'A', 'R', 'N', 'I', 
    'N', 'G', '_', 'N', 'O', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\000', '\022', '\035', '\n', '\031', 'F', 'C', 'W', '_', 'L', 'A', 
    'T', 'E', 'N', 'T', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\001', '\"', '\250', '\001', '\n', 
    '\r', 'F', 'c', 'w', '_', 's', 't', 'a', 't', 'e', 'T', 'y', 'p', 'e', '\022', '\031', '\n', '\025', 'F', 'C', 'W', '_', 'S', 'T', 'A', 
    'T', 'E', '_', 'U', 'N', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '\020', '\000', '\022', '\021', '\n', '\r', 'F', 'C', 'W', '_', 'S', 
    'T', 'A', 'T', 'E', '_', 'O', 'F', 'F', '\020', '\001', '\022', '\025', '\n', '\021', 'F', 'C', 'W', '_', 'S', 'T', 'A', 'T', 'E', '_', 'S', 
    'T', 'A', 'N', 'D', 'B', 'Y', '\020', '\002', '\022', '$', '\n', ' ', 'F', 'C', 'W', '_', 'S', 'T', 'A', 'T', 'E', '_', 'A', 'C', 'T', 
    'I', 'V', 'E', '_', 'N', 'O', '_', 'I', 'N', 'T', 'E', 'R', 'V', 'E', 'N', 'T', 'I', 'O', 'N', '\020', '\003', '\022', '\024', '\n', '\020', 
    'F', 'C', 'W', '_', 'S', 'T', 'A', 'T', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\004', '\022', '\026', '\n', '\022', 'F', 'C', 'W', 
    '_', 'S', 'T', 'A', 'T', 'E', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\005', '\"', '\321', '\003', '\n', '\014', 'T', 'e', 'x', 
    't', 'i', 'n', 'f', 'o', 'T', 'y', 'p', 'e', '\022', '\027', '\n', '\023', 'T', 'E', 'X', 'T', 'I', 'N', 'F', 'O', '_', 'N', 'O', '_', 
    'D', 'I', 'S', 'P', 'L', 'A', 'Y', '\020', '\000', '\022', '\037', '\n', '\033', 'T', 'E', 'X', 'T', 'I', 'N', 'F', 'O', '_', 'A', 'C', 'C', 
    '_', 'I', 'S', '_', 'S', 'W', 'I', 'T', 'C', 'H', 'E', 'D', '_', 'O', 'N', '\020', '\001', '\022', ' ', '\n', '\034', 'T', 'E', 'X', 'T', 
    'I', 'N', 'F', 'O', '_', 'A', 'C', 'C', '_', 'I', 'S', '_', 'S', 'W', 'I', 'T', 'C', 'H', 'E', 'D', '_', 'O', 'F', 'F', '\020', 
    '\002', '\022', '\035', '\n', '\031', 'T', 'E', 'X', 'T', 'I', 'N', 'F', 'O', '_', 'A', 'C', 'C', '_', 'I', 'S', '_', 'C', 'A', 'N', 'C', 
    'E', 'L', 'L', 'E', 'D', '\020', '\003', '\022', '\027', '\n', '\023', 'T', 'E', 'X', 'T', 'I', 'N', 'F', 'O', '_', 'A', 'C', 'C', '_', 'A', 
    'C', 'T', 'I', 'V', 'E', '\020', '\004', '\022', '\032', '\n', '\026', 'T', 'E', 'X', 'T', 'I', 'N', 'F', 'O', '_', 'M', 'R', 'R', '_', 'B', 
    'L', 'I', 'N', 'D', 'N', 'E', 'S', 'S', '\020', '\005', '\022', '\037', '\n', '\033', 'T', 'E', 'X', 'T', 'I', 'N', 'F', 'O', '_', 'A', 'C', 
    'C', '_', 'A', 'N', 'D', '_', 'P', 'E', 'B', 'S', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\006', '\022', '\031', '\n', '\025', 'T', 'E', 'X', 
    'T', 'I', 'N', 'F', 'O', '_', 'E', 'P', 'B', '_', 'A', 'C', 'T', 'I', 'V', 'A', 'T', 'E', '\020', '\007', '\022', '\034', '\n', '\030', 'T', 
    'E', 'X', 'T', 'I', 'N', 'F', 'O', '_', 'N', 'O', '_', 'F', 'O', 'R', 'W', 'A', 'R', 'D', '_', 'G', 'E', 'A', 'R', '\020', '\010', 
    '\022', '\037', '\n', '\033', 'T', 'E', 'X', 'T', 'I', 'N', 'F', 'O', '_', 'S', 'E', 'A', 'T', 'B', 'E', 'L', 'T', '_', 'U', 'N', 'B', 
    'U', 'C', 'K', 'L', 'E', 'D', '\020', '\t', '\022', '\024', '\n', '\020', 'T', 'E', 'X', 'T', 'I', 'N', 'F', 'O', '_', 'E', 'S', 'P', '_', 
    'O', 'F', 'F', '\020', '\n', '\022', '\036', '\n', '\032', 'T', 'E', 'X', 'T', 'I', 'N', 'F', 'O', '_', 'S', 'P', 'E', 'E', 'D', '_', 'O', 
    'V', 'E', 'R', '_', '1', '5', '0', 'K', 'P', 'H', '\020', '\013', '\022', '\026', '\n', '\022', 'T', 'E', 'X', 'T', 'I', 'N', 'F', 'O', '_', 
    'D', 'O', 'O', 'R', '_', 'O', 'P', 'E', 'N', '\020', '\014', '\022', '\025', '\n', '\021', 'T', 'E', 'X', 'T', 'I', 'N', 'F', 'O', '_', 'O', 
    'V', 'E', 'R', 'R', 'I', 'D', 'E', '\020', '\r', '\022', '\026', '\n', '\022', 'T', 'E', 'X', 'T', 'I', 'N', 'F', 'O', '_', 'E', 'S', 'P', 
    '_', 'E', 'R', 'R', 'O', 'R', '\020', '\016', '\022', '\031', '\n', '\025', 'T', 'E', 'X', 'T', 'I', 'N', 'F', 'O', '_', 'U', 'N', 'C', 'A', 
    'L', 'I', 'B', 'R', 'A', 'T', 'E', 'D', '\020', '\017', '\"', '#', '\n', '\013', 'V', 's', 'e', 't', 'd', 'i', 's', 'T', 'y', 'p', 'e', 
    '\022', '\024', '\n', '\017', 'V', 'S', 'E', 'T', 'D', 'I', 'S', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\377', '\003', '\"', 'K', '\n', 
    '\014', 'O', 'b', 'j', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\022', 'O', 'B', 'J', 'V', 'A', 'L', 'I', 'D', 
    '_', 'N', 'O', '_', 'O', 'B', 'J', 'E', 'C', 'T', '\020', '\000', '\022', '#', '\n', '\037', 'O', 'B', 'J', 'V', 'A', 'L', 'I', 'D', '_', 
    'T', 'A', 'R', 'G', 'E', 'T', '_', 'O', 'B', 'J', 'E', 'C', 'T', '_', 'D', 'E', 'T', 'E', 'C', 'T', 'E', 'D', '\020', '\001', '\"', 
    '\227', '\020', '\n', '\024', 'G', 'w', '_', 'm', 'p', '5', '_', 'n', 'a', 'v', '_', '0', 'x', '5', '3', '3', '_', '5', '3', '3', '\022', 
    'Z', '\n', '\023', 'n', 'a', 'v', '_', 's', 'p', 'e', 'e', 'd', 'l', 'i', 'm', 'i', 't', 'u', 'n', 'i', 't', 's', '\030', '\001', ' ', 
    '\001', '(', '\016', '2', '=', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 
    'm', 'p', '5', '_', 'n', 'a', 'v', '_', '0', 'x', '5', '3', '3', '_', '5', '3', '3', '.', 'N', 'a', 'v', '_', 's', 'p', 'e', 
    'e', 'd', 'l', 'i', 'm', 'i', 't', 'u', 'n', 'i', 't', 's', 'T', 'y', 'p', 'e', '\022', 'T', '\n', '\020', 'n', 'a', 'v', '_', 'c', 
    'u', 'r', 'r', 'r', 'o', 'a', 'd', 't', 'y', 'p', 'e', '\030', '\002', ' ', '\001', '(', '\016', '2', ':', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', 'n', 'a', 'v', '_', '0', 'x', '5', 
    '3', '3', '_', '5', '3', '3', '.', 'N', 'a', 'v', '_', 'c', 'u', 'r', 'r', 'r', 'o', 'a', 'd', 't', 'y', 'p', 'e', 'T', 'y', 
    'p', 'e', '\022', 'P', '\n', '\016', 'n', 'a', 'v', '_', 's', 'p', 'e', 'e', 'd', 'l', 'i', 'm', 'i', 't', '\030', '\003', ' ', '\001', '(', 
    '\016', '2', '8', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', 
    '5', '_', 'n', 'a', 'v', '_', '0', 'x', '5', '3', '3', '_', '5', '3', '3', '.', 'N', 'a', 'v', '_', 's', 'p', 'e', 'e', 'd', 
    'l', 'i', 'm', 'i', 't', 'T', 'y', 'p', 'e', '\022', 'V', '\n', '\021', 'm', 'p', '5', '_', 'a', 'p', 'a', 'a', 'c', 't', 'i', 'v', 
    'e', '_', 'c', 'm', 'd', '\030', '\004', ' ', '\001', '(', '\016', '2', ';', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', 'n', 'a', 'v', '_', '0', 'x', '5', '3', '3', '_', '5', '3', '3', 
    '.', 'M', 'p', '5', '_', 'a', 'p', 'a', 'a', 'c', 't', 'i', 'v', 'e', '_', 'c', 'm', 'd', 'T', 'y', 'p', 'e', '\022', '^', '\n', 
    '\025', 'm', 'p', '5', '_', 'a', 'p', 'a', '_', 'c', 'o', 'n', 'f', 'i', 'r', 'm', 'b', 'u', 't', 't', 'o', 'n', '\030', '\005', ' ', 
    '\001', '(', '\016', '2', '?', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 
    'm', 'p', '5', '_', 'n', 'a', 'v', '_', '0', 'x', '5', '3', '3', '_', '5', '3', '3', '.', 'M', 'p', '5', '_', 'a', 'p', 'a', 
    '_', 'c', 'o', 'n', 'f', 'i', 'r', 'm', 'b', 'u', 't', 't', 'o', 'n', 'T', 'y', 'p', 'e', '\022', 'b', '\n', '\027', 'm', 'p', '5', 
    '_', 'a', 'p', 'a', '_', 'f', 'u', 'n', 'c', 't', 'i', 'o', 'n', '_', 's', 'e', 'l', 'e', 'c', 't', '\030', '\006', ' ', '\001', '(', 
    '\016', '2', 'A', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', 
    '5', '_', 'n', 'a', 'v', '_', '0', 'x', '5', '3', '3', '_', '5', '3', '3', '.', 'M', 'p', '5', '_', 'a', 'p', 'a', '_', 'f', 
    'u', 'n', 'c', 't', 'i', 'o', 'n', '_', 's', 'e', 'l', 'e', 'c', 't', 'T', 'y', 'p', 'e', '\022', 'B', '\n', '\007', 'n', 'a', 'v', 
    '_', 's', 't', 's', '\030', '\007', ' ', '\001', '(', '\016', '2', '1', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', 'n', 'a', 'v', '_', '0', 'x', '5', '3', '3', '_', '5', '3', '3', '.', 
    'N', 'a', 'v', '_', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\027', '\n', '\017', 'n', 'a', 'v', '_', 'c', 'o', 'u', 'n', 't', 'r', 
    'y', 'c', 'o', 'd', 'e', '\030', '\010', ' ', '\001', '(', '\005', '\022', '\\', '\n', '\024', 'n', 'a', 'v', '_', 's', 'p', 'e', 'e', 'd', 'l', 
    'i', 'm', 'i', 't', 's', 't', 'a', 't', 'u', 's', '\030', '\t', ' ', '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', 'n', 'a', 'v', '_', '0', 'x', '5', '3', 
    '3', '_', '5', '3', '3', '.', 'N', 'a', 'v', '_', 's', 'p', 'e', 'e', 'd', 'l', 'i', 'm', 'i', 't', 's', 't', 'a', 't', 'u', 
    's', 'T', 'y', 'p', 'e', '\"', '\226', '\001', '\n', '\027', 'N', 'a', 'v', '_', 's', 'p', 'e', 'e', 'd', 'l', 'i', 'm', 'i', 't', 'u', 
    'n', 'i', 't', 's', 'T', 'y', 'p', 'e', '\022', '\037', '\n', '\033', 'N', 'A', 'V', '_', 'S', 'P', 'E', 'E', 'D', 'L', 'I', 'M', 'I', 
    'T', 'U', 'N', 'I', 'T', 'S', '_', 'U', 'N', 'K', 'N', 'O', 'W', 'N', '\020', '\000', '\022', '\033', '\n', '\027', 'N', 'A', 'V', '_', 'S', 
    'P', 'E', 'E', 'D', 'L', 'I', 'M', 'I', 'T', 'U', 'N', 'I', 'T', 'S', '_', 'M', 'P', 'H', '\020', '\001', '\022', '\033', '\n', '\027', 'N', 
    'A', 'V', '_', 'S', 'P', 'E', 'E', 'D', 'L', 'I', 'M', 'I', 'T', 'U', 'N', 'I', 'T', 'S', '_', 'K', 'M', 'H', '\020', '\002', '\022', 
    ' ', '\n', '\034', 'N', 'A', 'V', '_', 'S', 'P', 'E', 'E', 'D', 'L', 'I', 'M', 'I', 'T', 'U', 'N', 'I', 'T', 'S', '_', 'R', 'E', 
    'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\307', '\001', '\n', '\024', 'N', 'a', 'v', '_', 'c', 'u', 'r', 'r', 'r', 'o', 'a', 'd', 
    't', 'y', 'p', 'e', 'T', 'y', 'p', 'e', '\022', '\033', '\n', '\027', 'N', 'A', 'V', '_', 'C', 'U', 'R', 'R', 'R', 'O', 'A', 'D', 'T', 
    'Y', 'P', 'E', '_', 'U', 'N', 'K', 'N', 'O', 'W', '\020', '\000', '\022', '$', '\n', ' ', 'N', 'A', 'V', '_', 'C', 'U', 'R', 'R', 'R', 
    'O', 'A', 'D', 'T', 'Y', 'P', 'E', '_', 'H', 'I', 'G', 'H', '_', 'S', 'P', 'E', 'E', 'D', '_', 'R', 'O', 'A', 'D', '\020', '\001', 
    '\022', '%', '\n', '!', 'N', 'A', 'V', '_', 'C', 'U', 'R', 'R', 'R', 'O', 'A', 'D', 'T', 'Y', 'P', 'E', '_', 'C', 'I', 'T', 'Y', 
    '_', 'E', 'X', 'P', 'R', 'E', 'S', 'S', '_', 'W', 'A', 'Y', '\020', '\002', '\022', '\"', '\n', '\036', 'N', 'A', 'V', '_', 'C', 'U', 'R', 
    'R', 'R', 'O', 'A', 'D', 'T', 'Y', 'P', 'E', '_', 'D', 'O', 'W', 'N', 'T', 'O', 'W', 'N', '_', 'R', 'O', 'A', 'D', '\020', '\003', 
    '\022', '!', '\n', '\035', 'N', 'A', 'V', '_', 'C', 'U', 'R', 'R', 'R', 'O', 'A', 'D', 'T', 'Y', 'P', 'E', '_', 'C', 'O', 'U', 'N', 
    'T', 'R', 'Y', '_', 'R', 'O', 'A', 'D', '\020', '\004', '\"', '\325', '\001', '\n', '\022', 'N', 'a', 'v', '_', 's', 'p', 'e', 'e', 'd', 'l', 
    'i', 'm', 'i', 't', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'N', 'A', 'V', '_', 'S', 'P', 'E', 'E', 'D', 'L', 'I', 'M', 'I', 
    'T', '_', 'N', 'O', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', '\020', '\000', '\022', '\030', '\n', '\024', 'N', 'A', 'V', '_', 'S', 'P', 'E', 
    'E', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '5', '\020', '\001', '\022', '\031', '\n', '\025', 'N', 'A', 'V', '_', 'S', 'P', 
    'E', 'E', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '1', '0', '\020', '\002', '\022', '\031', '\n', '\025', 'N', 'A', 'V', '_', 
    'S', 'P', 'E', 'E', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '1', '5', '\020', '\003', '\022', '\031', '\n', '\025', 'N', 'A', 
    'V', '_', 'S', 'P', 'E', 'E', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '2', '0', '\020', '\004', '\022', '\031', '\n', '\025', 
    'N', 'A', 'V', '_', 'S', 'P', 'E', 'E', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '2', '5', '\020', '\005', '\022', '\032', 
    '\n', '\026', 'N', 'A', 'V', '_', 'S', 'P', 'E', 'E', 'D', 'L', 'I', 'M', 'I', 'T', '_', 'S', 'P', 'L', '_', '1', '3', '0', '\020', 
    '\032', '\"', 'X', '\n', '\025', 'M', 'p', '5', '_', 'a', 'p', 'a', 'a', 'c', 't', 'i', 'v', 'e', '_', 'c', 'm', 'd', 'T', 'y', 'p', 
    'e', '\022', ' ', '\n', '\034', 'M', 'P', '5', '_', 'A', 'P', 'A', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'C', 'M', 'D', '_', 'N', 'O', 
    '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\000', '\022', '\035', '\n', '\031', 'M', 'P', '5', '_', 'A', 'P', 'A', 'A', 'C', 'T', 'I', 
    'V', 'E', '_', 'C', 'M', 'D', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\001', '\"', '\315', '\001', '\n', '\031', 'M', 'p', '5', '_', 
    'a', 'p', 'a', '_', 'c', 'o', 'n', 'f', 'i', 'r', 'm', 'b', 'u', 't', 't', 'o', 'n', 'T', 'y', 'p', 'e', '\022', ')', '\n', '%', 
    'M', 'P', '5', '_', 'A', 'P', 'A', '_', 'C', 'O', 'N', 'F', 'I', 'R', 'M', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'N', 'O', '_', 
    'B', 'U', 'T', 'T', 'O', 'N', '_', 'P', 'R', 'E', 'S', 'S', '\020', '\000', '\022', '.', '\n', '*', 'M', 'P', '5', '_', 'A', 'P', 'A', 
    '_', 'C', 'O', 'N', 'F', 'I', 'R', 'M', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'C', 'O', 'M', 'F', 'I', 'R', 'M', '_', 'B', 'U', 
    'T', 'T', 'O', 'N', '_', 'P', 'R', 'E', 'S', 'S', '\020', '\001', '\022', '1', '\n', '-', 'M', 'P', '5', '_', 'A', 'P', 'A', '_', 'C', 
    'O', 'N', 'F', 'I', 'R', 'M', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'T', 'E', 'R', 'M', 'I', 'N', 'A', 'T', 'E', 'D', '_', 'B', 
    'U', 'T', 'T', 'O', 'N', '_', 'P', 'R', 'E', 'S', 'S', '\020', '\002', '\022', '\"', '\n', '\036', 'M', 'P', '5', '_', 'A', 'P', 'A', '_', 
    'C', 'O', 'N', 'F', 'I', 'R', 'M', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', 
    '\326', '\001', '\n', '\033', 'M', 'p', '5', '_', 'a', 'p', 'a', '_', 'f', 'u', 'n', 'c', 't', 'i', 'o', 'n', '_', 's', 'e', 'l', 'e', 
    'c', 't', 'T', 'y', 'p', 'e', '\022', '+', '\n', '\'', 'M', 'P', '5', '_', 'A', 'P', 'A', '_', 'F', 'U', 'N', 'C', 'T', 'I', 'O', 
    'N', '_', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'N', 'O', '_', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'P', 'R', 'E', 'S', 'S', '\020', 
    '\000', '\022', '-', '\n', ')', 'M', 'P', '5', '_', 'A', 'P', 'A', '_', 'F', 'U', 'N', 'C', 'T', 'I', 'O', 'N', '_', 'S', 'E', 'L', 
    'E', 'C', 'T', '_', 'P', 'P', 'S', 'C', '_', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'P', 'R', 'E', 'S', 'S', '\020', '\001', '\022', '-', 
    '\n', ')', 'M', 'P', '5', '_', 'A', 'P', 'A', '_', 'F', 'U', 'N', 'C', 'T', 'I', 'O', 'N', '_', 'S', 'E', 'L', 'E', 'C', 'T', 
    '_', 'C', 'P', 'S', 'C', '_', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'P', 'R', 'E', 'S', 'S', '\020', '\002', '\022', ',', '\n', '(', 'M', 
    'P', '5', '_', 'A', 'P', 'A', '_', 'F', 'U', 'N', 'C', 'T', 'I', 'O', 'N', '_', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'P', 'O', 
    'C', '_', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'P', 'R', 'E', 'S', 'S', '\020', '\003', '\"', '7', '\n', '\013', 'N', 'a', 'v', '_', 's', 
    't', 's', 'T', 'y', 'p', 'e', '\022', '\024', '\n', '\020', 'N', 'A', 'V', '_', 'S', 'T', 'S', '_', 'I', 'N', 'A', 'C', 'T', 'I', 'V', 
    'E', '\020', '\000', '\022', '\022', '\n', '\016', 'N', 'A', 'V', '_', 'S', 'T', 'S', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', '\254', 
    '\001', '\n', '\030', 'N', 'a', 'v', '_', 's', 'p', 'e', 'e', 'd', 'l', 'i', 'm', 'i', 't', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 
    'p', 'e', '\022', '#', '\n', '\037', 'N', 'A', 'V', '_', 'S', 'P', 'E', 'E', 'D', 'L', 'I', 'M', 'I', 'T', 'S', 'T', 'A', 'T', 'U', 
    'S', '_', 'S', 'L', '_', 'U', 'N', 'K', 'N', 'O', 'W', 'N', '\020', '\000', '\022', '\"', '\n', '\036', 'N', 'A', 'V', '_', 'S', 'P', 'E', 
    'E', 'D', 'L', 'I', 'M', 'I', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'S', 'L', '_', 'E', 'X', 'I', 'S', 'T', 'S', '\020', '\001', 
    '\022', '#', '\n', '\037', 'N', 'A', 'V', '_', 'S', 'P', 'E', 'E', 'D', 'L', 'I', 'M', 'I', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 
    'S', 'L', '_', 'N', 'O', 'L', 'I', 'M', 'I', 'T', '\020', '\002', '\022', '\"', '\n', '\036', 'N', 'A', 'V', '_', 'S', 'P', 'E', 'E', 'D', 
    'L', 'I', 'M', 'I', 'T', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'S', 'L', '_', 'P', 'L', 'U', 'R', 'A', 'L', '\020', '\003', '\"', '\206', 
    ')', '\n', '\020', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', '3', '0', '\022', 'R', '\n', '\021', 'm', 'p', 
    '5', '_', 'f', 'c', 'w', '_', 's', 'e', 'n', 's', 'i', 't', 'i', 'v', 'e', '\030', '\001', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', 
    '3', '0', '_', '5', '3', '0', '.', 'M', 'p', '5', '_', 'f', 'c', 'w', '_', 's', 'e', 'n', 's', 'i', 't', 'i', 'v', 'e', 'T', 
    'y', 'p', 'e', '\022', '\\', '\n', '\026', 'm', 'p', '5', '_', 'i', 'c', 'm', 'e', 'n', 'u', 's', 'h', 'i', 'f', 't', '_', 'b', 'u', 
    't', 't', 'o', 'n', '\030', '\002', ' ', '\001', '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', '3', '0', '.', 'M', 'p', '5', '_', 
    'i', 'c', 'm', 'e', 'n', 'u', 's', 'h', 'i', 'f', 't', '_', 'b', 'u', 't', 't', 'o', 'n', 'T', 'y', 'p', 'e', '\022', 'L', '\n', 
    '\016', 'm', 'p', '5', '_', 'a', 'e', 'b', '_', 'o', 'n', '_', 'o', 'f', 'f', '\030', '\003', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', 
    '3', '0', '_', '5', '3', '0', '.', 'M', 'p', '5', '_', 'a', 'e', 'b', '_', 'o', 'n', '_', 'o', 'f', 'f', 'T', 'y', 'p', 'e', 
    '\022', 'L', '\n', '\016', 'm', 'p', '5', '_', 'f', 'c', 'w', '_', 'o', 'n', '_', 'o', 'f', 'f', '\030', '\004', ' ', '\001', '(', '\016', '2', 
    '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', 
    '0', 'x', '5', '3', '0', '_', '5', '3', '0', '.', 'M', 'p', '5', '_', 'f', 'c', 'w', '_', 'o', 'n', '_', 'o', 'f', 'f', 'T', 
    'y', 'p', 'e', '\022', 'P', '\n', '\020', 'm', 'p', '5', '_', 'b', 's', 'd', 's', 'w', 'i', 't', 'c', 'h', 's', 't', 's', '\030', '\005', 
    ' ', '\001', '(', '\016', '2', '6', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', 
    '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', '3', '0', '.', 'M', 'p', '5', '_', 'b', 's', 'd', 's', 'w', 'i', 
    't', 'c', 'h', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'R', '\n', '\021', 'm', 'p', '5', '_', 'a', 'f', 's', '_', 's', 'w', 't', 
    'i', 'c', 'h', 's', 't', 's', '\030', '\006', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', '3', '0', '.', 'M', 'p', 
    '5', '_', 'a', 'f', 's', '_', 's', 'w', 't', 'i', 'c', 'h', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', 'X', '\n', '\024', 'm', 'p', 
    '5', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', 't', 'y', 'p', 'e', 'r', 'e', 'q', '\030', '\007', ' ', '\001', '(', '\016', '2', 
    ':', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', 
    '0', 'x', '5', '3', '0', '_', '5', '3', '0', '.', 'M', 'p', '5', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 'i', 't', 't', 'y', 
    'p', 'e', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '^', '\n', '\027', 'm', 'p', '5', '_', 'i', 'c', 'm', 'e', 'n', 'u', 'a', 'c', 
    't', 'i', 'v', 'e', '_', 'b', 'u', 't', 't', 'o', 'n', '\030', '\010', ' ', '\001', '(', '\016', '2', '=', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', 
    '3', '0', '.', 'M', 'p', '5', '_', 'i', 'c', 'm', 'e', 'n', 'u', 'a', 'c', 't', 'i', 'v', 'e', '_', 'b', 'u', 't', 't', 'o', 
    'n', 'T', 'y', 'p', 'e', '\022', 'N', '\n', '\017', 'm', 'p', '5', '_', 'a', 'l', 'a', 'r', 'm', 's', 't', 'a', 't', 'u', 's', '\030', 
    '\t', ' ', '\001', '(', '\016', '2', '5', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 
    'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', '3', '0', '.', 'M', 'p', '5', '_', 'a', 'l', 'a', 'r', 'm', 
    's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', 'L', '\n', '\016', 'm', 'p', '5', '_', 'a', 'l', 'a', 'r', 'm', 'o', 'r', 
    'n', 'o', 't', '\030', '\n', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', '3', '0', '.', 'M', 'p', '5', '_', 'a', 
    'l', 'a', 'r', 'm', 'o', 'r', 'n', 'o', 't', 'T', 'y', 'p', 'e', '\022', 'R', '\n', '\021', 'm', 'p', '5', '_', 'p', 'a', 'a', 'k', 
    'r', 'e', 's', 'e', 't', '_', 'r', 'e', 'q', '\030', '\013', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', '3', '0', 
    '.', 'M', 'p', '5', '_', 'p', 'a', 'a', 'k', 'r', 'e', 's', 'e', 't', '_', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', 'L', '\n', 
    '\016', 'm', 'p', '5', '_', 'c', 't', 'a', '_', 'a', 'c', 't', 'i', 'v', 'e', '\030', '\014', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', 
    '3', '0', '_', '5', '3', '0', '.', 'M', 'p', '5', '_', 'c', 't', 'a', '_', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', 
    '\022', 'R', '\n', '\021', 'm', 'p', '5', '_', 'b', 's', 'd', 'l', 'c', 'a', '_', 'a', 'c', 't', 'i', 'v', 'e', '\030', '\r', ' ', '\001', 
    '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 
    'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', '3', '0', '.', 'M', 'p', '5', '_', 'b', 's', 'd', 'l', 'c', 'a', '_', 'a', 
    'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', 'L', '\n', '\016', 'm', 'p', '5', '_', 't', 's', 'r', 'm', 'e', 'n', 'u', 'r', 
    'e', 'q', '\030', '\016', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 
    's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', '3', '0', '.', 'M', 'p', '5', '_', 't', 's', 
    'r', 'm', 'e', 'n', 'u', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', 'L', '\n', '\016', 'm', 'p', '5', '_', 'l', 'd', 'w', 'w', 'a', 
    'r', 'n', 'i', 'n', 'g', '\030', '\017', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', '3', '0', '.', 'M', 'p', '5', 
    '_', 'l', 'd', 'w', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'T', 'y', 'p', 'e', '\022', 'R', '\n', '\021', 'm', 'p', '5', '_', 'l', 'd', 
    'w', 's', 'e', 'n', 's', 'i', 't', 'v', 'i', 't', 'y', '\030', '\020', ' ', '\001', '(', '\016', '2', '7', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', 
    '3', '0', '.', 'M', 'p', '5', '_', 'l', 'd', 'w', 's', 'e', 'n', 's', 'i', 't', 'v', 'i', 't', 'y', 'T', 'y', 'p', 'e', '\022', 
    'J', '\n', '\r', 'm', 'p', '5', '_', 'a', 'v', 'm', '_', 'a', 'n', 'g', 'l', 'e', '\030', '\021', ' ', '\001', '(', '\016', '2', '3', '.', 
    'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', 
    '5', '3', '0', '_', '5', '3', '0', '.', 'M', 'p', '5', '_', 'a', 'v', 'm', '_', 'a', 'n', 'g', 'l', 'e', 'T', 'y', 'p', 'e', 
    '\022', '\036', '\n', '\026', 'm', 'p', '5', '_', 'a', 'v', 'm', '_', 'r', 'o', 't', 'a', 't', 'i', 'o', 'n', 'c', 'h', 'a', 'n', 'g', 
    'e', '\030', '\022', ' ', '\001', '(', '\005', '\022', 'L', '\n', '\016', 'm', 'p', '5', '_', 'i', 'h', 'c', 'm', 'e', 'n', 'u', 'r', 'e', 'q', 
    '\030', '\023', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 
    'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', '3', '0', '.', 'M', 'p', '5', '_', 'i', 'h', 'c', 'm', 
    'e', 'n', 'u', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', 'L', '\n', '\016', 'm', 'p', '5', '_', 'd', 'o', 'a', '_', 'a', 'c', 't', 
    'i', 'v', 'e', '\030', '\024', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', '3', '0', '.', 'M', 'p', '5', '_', 'd', 
    'o', 'a', '_', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', 'Z', '\n', '\025', 'm', 'p', '5', '_', 'a', 'p', 'a', '_', 
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', '_', 's', 't', 's', '\030', '\025', ' ', '\001', '(', '\016', '2', ';', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', 
    '_', '5', '3', '0', '.', 'M', 'p', '5', '_', 'a', 'p', 'a', '_', 'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', '_', 's', 't', 
    's', 'T', 'y', 'p', 'e', '\022', 'f', '\n', '\033', 'm', 'p', '5', '_', 't', 'p', 'm', 's', 'a', 'u', 't', 'o', 'l', 'o', 'c', 'a', 
    't', 'i', 'o', 'n', 's', 'e', 't', 't', 'i', 'n', 'g', '\030', '\026', ' ', '\001', '(', '\016', '2', 'A', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', 
    '3', '0', '.', 'M', 'p', '5', '_', 't', 'p', 'm', 's', 'a', 'u', 't', 'o', 'l', 'o', 'c', 'a', 't', 'i', 'o', 'n', 's', 'e', 
    't', 't', 'i', 'n', 'g', 'T', 'y', 'p', 'e', '\022', 'b', '\n', '\031', 'm', 'p', '5', '_', 'a', 'v', 'm', '_', 'r', 'o', 't', 'a', 
    't', 'i', 'o', 'n', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '\030', '\027', ' ', '\001', '(', '\016', '2', '?', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', 
    '_', '5', '3', '0', '.', 'M', 'p', '5', '_', 'a', 'v', 'm', '_', 'r', 'o', 't', 'a', 't', 'i', 'o', 'n', 'd', 'i', 'r', 'e', 
    'c', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', 'L', '\n', '\016', 'm', 'p', '5', '_', 'a', 'v', 'm', '_', 'b', 'u', 't', 't', 
    'o', 'n', '\030', '\030', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 
    's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', '3', '0', '.', 'M', 'p', '5', '_', 'a', 'v', 
    'm', '_', 'b', 'u', 't', 't', 'o', 'n', 'T', 'y', 'p', 'e', '\022', 'N', '\n', '\017', 'm', 'p', '5', '_', 'v', 'i', 'e', 'w', '_', 
    'c', 'h', 'o', 'i', 'c', 'e', '\030', '\031', ' ', '\001', '(', '\016', '2', '5', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', '3', '0', '.', 'M', 'p', 
    '5', '_', 'v', 'i', 'e', 'w', '_', 'c', 'h', 'o', 'i', 'c', 'e', 'T', 'y', 'p', 'e', '\"', '\270', '\001', '\n', '\025', 'M', 'p', '5', 
    '_', 'f', 'c', 'w', '_', 's', 'e', 'n', 's', 'i', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'M', 'P', '5', 
    '_', 'F', 'C', 'W', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 'V', 'E', '_', 'U', 'N', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 
    'E', '\020', '\000', '\022', '*', '\n', '&', 'M', 'P', '5', '_', 'F', 'C', 'W', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 'V', 'E', '_', 
    'L', 'E', 'V', 'E', 'L', '1', '_', 'L', 'O', 'W', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 'V', 'E', '\020', '\001', '\022', '#', '\n', 
    '\037', 'M', 'P', '5', '_', 'F', 'C', 'W', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 'V', 'E', '_', 'L', 'E', 'V', 'E', 'L', '2', 
    '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\002', '\022', '+', '\n', '\'', 'M', 'P', '5', '_', 'F', 'C', 'W', '_', 'S', 'E', 'N', 'S', 
    'I', 'T', 'I', 'V', 'E', '_', 'L', 'E', 'V', 'E', 'L', '3', '_', 'H', 'I', 'G', 'H', '_', 'S', 'E', 'N', 'S', 'I', 'T', 'I', 
    'V', 'E', '\020', '\003', '\"', '\257', '\001', '\n', '\032', 'M', 'p', '5', '_', 'i', 'c', 'm', 'e', 'n', 'u', 's', 'h', 'i', 'f', 't', '_', 
    'b', 'u', 't', 't', 'o', 'n', 'T', 'y', 'p', 'e', '\022', '#', '\n', '\037', 'M', 'P', '5', '_', 'I', 'C', 'M', 'E', 'N', 'U', 'S', 
    'H', 'I', 'F', 'T', '_', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'N', 'O', '_', 'E', 'V', 'E', 'N', 'T', '\020', '\000', '\022', '\"', '\n', 
    '\036', 'M', 'P', '5', '_', 'I', 'C', 'M', 'E', 'N', 'U', 'S', 'H', 'I', 'F', 'T', '_', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'P', 
    'A', 'G', 'E', '_', 'U', 'P', '\020', '\001', '\022', '$', '\n', ' ', 'M', 'P', '5', '_', 'I', 'C', 'M', 'E', 'N', 'U', 'S', 'H', 'I', 
    'F', 'T', '_', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'P', 'A', 'G', 'E', '_', 'D', 'O', 'W', 'N', '\020', '\002', '\022', '\"', '\n', '\036', 
    'M', 'P', '5', '_', 'I', 'C', 'M', 'E', 'N', 'U', 'S', 'H', 'I', 'F', 'T', '_', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'I', 'N', 
    'V', 'A', 'L', 'I', 'D', '\020', '\003', '\"', 'Q', '\n', '\022', 'M', 'p', '5', '_', 'a', 'e', 'b', '_', 'o', 'n', '_', 'o', 'f', 'f', 
    'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'M', 'P', '5', '_', 'A', 'E', 'B', '_', 'O', 'N', '_', 'O', 'F', 'F', '_', 'S', 'W', 
    'I', 'T', 'C', 'H', '_', 'O', 'N', '\020', '\000', '\022', '\035', '\n', '\031', 'M', 'P', '5', '_', 'A', 'E', 'B', '_', 'O', 'N', '_', 'O', 
    'F', 'F', '_', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'O', 'F', 'F', '\020', '\001', '\"', 'Q', '\n', '\022', 'M', 'p', '5', '_', 'f', 'c', 
    'w', '_', 'o', 'n', '_', 'o', 'f', 'f', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'M', 'P', '5', '_', 'F', 'C', 'W', '_', 'O', 
    'N', '_', 'O', 'F', 'F', '_', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'O', 'N', '\020', '\000', '\022', '\035', '\n', '\031', 'M', 'P', '5', '_', 
    'F', 'C', 'W', '_', 'O', 'N', '_', 'O', 'F', 'F', '_', 'S', 'W', 'I', 'T', 'C', 'H', '_', 'O', 'F', 'F', '\020', '\001', '\"', 'I', 
    '\n', '\024', 'M', 'p', '5', '_', 'b', 's', 'd', 's', 'w', 'i', 't', 'c', 'h', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\027', '\n', 
    '\023', 'M', 'P', '5', '_', 'B', 'S', 'D', 'S', 'W', 'I', 'T', 'C', 'H', 'S', 'T', 'S', '_', 'O', 'N', '\020', '\000', '\022', '\030', '\n', 
    '\024', 'M', 'P', '5', '_', 'B', 'S', 'D', 'S', 'W', 'I', 'T', 'C', 'H', 'S', 'T', 'S', '_', 'O', 'F', 'F', '\020', '\001', '\"', 'T', 
    '\n', '\025', 'M', 'p', '5', '_', 'a', 'f', 's', '_', 's', 'w', 't', 'i', 'c', 'h', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '\036', 
    '\n', '\032', 'M', 'P', '5', '_', 'A', 'F', 'S', '_', 'S', 'W', 'T', 'I', 'C', 'H', 'S', 'T', 'S', '_', 'N', 'O', '_', 'P', 'R', 
    'E', 'S', 'S', '\020', '\000', '\022', '\033', '\n', '\027', 'M', 'P', '5', '_', 'A', 'F', 'S', '_', 'S', 'W', 'T', 'I', 'C', 'H', 'S', 'T', 
    'S', '_', 'P', 'R', 'E', 'S', 'S', '\020', '\001', '\"', '\237', '\001', '\n', '\030', 'M', 'p', '5', '_', 'l', 'a', 'n', 'e', 'a', 's', 's', 
    'i', 't', 't', 'y', 'p', 'e', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '%', '\n', '!', 'M', 'P', '5', '_', 'L', 'A', 'N', 'E', 
    'A', 'S', 'S', 'I', 'T', 'T', 'Y', 'P', 'E', 'R', 'E', 'Q', '_', 'N', 'O', '_', 'S', 'E', 'L', 'E', 'C', 'T', 'I', 'O', 'N', 
    '\020', '\000', '\022', '\034', '\n', '\030', 'M', 'P', '5', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', 'T', 'Y', 'P', 'E', 'R', 'E', 
    'Q', '_', 'L', 'D', 'W', '\020', '\001', '\022', '\034', '\n', '\030', 'M', 'P', '5', '_', 'L', 'A', 'N', 'E', 'A', 'S', 'S', 'I', 'T', 'T', 
    'Y', 'P', 'E', 'R', 'E', 'Q', '_', 'L', 'K', 'A', '\020', '\002', '\022', ' ', '\n', '\034', 'M', 'P', '5', '_', 'L', 'A', 'N', 'E', 'A', 
    'S', 'S', 'I', 'T', 'T', 'Y', 'P', 'E', 'R', 'E', 'Q', '_', 'L', 'D', 'W', '_', 'L', 'K', 'A', '\020', '\003', '\"', '\270', '\001', '\n', 
    '\033', 'M', 'p', '5', '_', 'i', 'c', 'm', 'e', 'n', 'u', 'a', 'c', 't', 'i', 'v', 'e', '_', 'b', 'u', 't', 't', 'o', 'n', 'T', 
    'y', 'p', 'e', '\022', '\037', '\n', '\033', 'M', 'P', '5', '_', 'I', 'C', 'M', 'E', 'N', 'U', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'B', 
    'U', 'T', 'T', 'O', 'N', '_', 'O', 'F', 'F', '\020', '\000', '\022', '.', '\n', '*', 'M', 'P', '5', '_', 'I', 'C', 'M', 'E', 'N', 'U', 
    'A', 'C', 'T', 'I', 'V', 'E', '_', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'M', 'E', 'N', 'U', '_', 'S', 'W', 'I', 'T', 'C', 'H', 
    '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\022', '#', '\n', '\037', 'M', 'P', '5', '_', 'I', 'C', 'M', 'E', 'N', 'U', 'A', 'C', 
    'T', 'I', 'V', 'E', '_', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'S', 'I', 'L', 'E', 'N', 'C', 'E', '\020', '\002', '\022', '#', '\n', '\037', 
    'M', 'P', '5', '_', 'I', 'C', 'M', 'E', 'N', 'U', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'I', 
    'N', 'V', 'A', 'L', 'I', 'D', '\020', '\003', '\"', '\211', '\001', '\n', '\023', 'M', 'p', '5', '_', 'a', 'l', 'a', 'r', 'm', 's', 't', 'a', 
    't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'M', 'P', '5', '_', 'A', 'L', 'A', 'R', 'M', 'S', 'T', 'A', 'T', 'U', 
    'S', '_', 'I', 'N', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\032', '\n', '\026', 'M', 'P', '5', '_', 'A', 'L', 'A', 'R', 'M', 
    'S', 'T', 'A', 'T', 'U', 'S', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\022', '\032', '\n', '\026', 'M', 'P', '5', '_', 'A', 'L', 
    'A', 'R', 'M', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'F', 'A', 'I', 'L', 'E', 'D', '\020', '\002', '\022', '\034', '\n', '\030', 'M', 'P', '5', 
    '_', 'A', 'L', 'A', 'R', 'M', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', 'K', 
    '\n', '\022', 'M', 'p', '5', '_', 'a', 'l', 'a', 'r', 'm', 'o', 'r', 'n', 'o', 't', 'T', 'y', 'p', 'e', '\022', '\033', '\n', '\027', 'M', 
    'P', '5', '_', 'A', 'L', 'A', 'R', 'M', 'O', 'R', 'N', 'O', 'T', '_', 'N', 'O', '_', 'A', 'L', 'A', 'R', 'M', '\020', '\000', '\022', 
    '\030', '\n', '\024', 'M', 'P', '5', '_', 'A', 'L', 'A', 'R', 'M', 'O', 'R', 'N', 'O', 'T', '_', 'A', 'L', 'A', 'R', 'M', '\020', '\001', 
    '\"', 'X', '\n', '\025', 'M', 'p', '5', '_', 'p', 'a', 'a', 'k', 'r', 'e', 's', 'e', 't', '_', 'r', 'e', 'q', 'T', 'y', 'p', 'e', 
    '\022', ' ', '\n', '\034', 'M', 'P', '5', '_', 'P', 'A', 'A', 'K', 'R', 'E', 'S', 'E', 'T', '_', 'R', 'E', 'Q', '_', 'N', 'O', '_', 
    'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\000', '\022', '\035', '\n', '\031', 'M', 'P', '5', '_', 'P', 'A', 'A', 'K', 'R', 'E', 'S', 'E', 
    'T', '_', 'R', 'E', 'Q', '_', 'R', 'E', 'Q', 'U', 'E', 'S', 'T', '\020', '\001', '\"', 'C', '\n', '\022', 'M', 'p', '5', '_', 'c', 't', 
    'a', '_', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '\025', '\n', '\021', 'M', 'P', '5', '_', 'C', 'T', 'A', '_', 'A', 
    'C', 'T', 'I', 'V', 'E', '_', 'O', 'N', '\020', '\000', '\022', '\026', '\n', '\022', 'M', 'P', '5', '_', 'C', 'T', 'A', '_', 'A', 'C', 'T', 
    'I', 'V', 'E', '_', 'O', 'F', 'F', '\020', '\001', '\"', 'L', '\n', '\025', 'M', 'p', '5', '_', 'b', 's', 'd', 'l', 'c', 'a', '_', 'a', 
    'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '\030', '\n', '\024', 'M', 'P', '5', '_', 'B', 'S', 'D', 'L', 'C', 'A', '_', 'A', 
    'C', 'T', 'I', 'V', 'E', '_', 'O', 'N', '\020', '\000', '\022', '\031', '\n', '\025', 'M', 'P', '5', '_', 'B', 'S', 'D', 'L', 'C', 'A', '_', 
    'A', 'C', 'T', 'I', 'V', 'E', '_', 'O', 'F', 'F', '\020', '\001', '\"', 'C', '\n', '\022', 'M', 'p', '5', '_', 't', 's', 'r', 'm', 'e', 
    'n', 'u', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '\025', '\n', '\021', 'M', 'P', '5', '_', 'T', 'S', 'R', 'M', 'E', 'N', 'U', 'R', 
    'E', 'Q', '_', 'O', 'N', '\020', '\000', '\022', '\026', '\n', '\022', 'M', 'P', '5', '_', 'T', 'S', 'R', 'M', 'E', 'N', 'U', 'R', 'E', 'Q', 
    '_', 'O', 'F', 'F', '\020', '\001', '\"', '\263', '\001', '\n', '\022', 'M', 'p', '5', '_', 'l', 'd', 'w', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 
    'T', 'y', 'p', 'e', '\022', '7', '\n', '3', 'M', 'P', '5', '_', 'L', 'D', 'W', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'A', 'U', 
    'D', 'I', 'B', 'L', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'A', 'N', 'D', '_', 'W', 'H', 'E', 'E', 'L', 'S', 'T', 
    'E', 'E', 'R', '_', 'S', 'H', 'A', 'K', 'E', '\020', '\000', '\022', '\"', '\n', '\036', 'M', 'P', '5', '_', 'L', 'D', 'W', 'W', 'A', 'R', 
    'N', 'I', 'N', 'G', '_', 'A', 'U', 'D', 'I', 'B', 'L', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\001', '\022', '#', '\n', 
    '\037', 'M', 'P', '5', '_', 'L', 'D', 'W', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'W', 'H', 'E', 'E', 'L', 'S', 'T', 'E', 'E', 
    'R', '_', 'S', 'H', 'A', 'K', 'E', '\020', '\002', '\022', '\033', '\n', '\027', 'M', 'P', '5', '_', 'L', 'D', 'W', 'W', 'A', 'R', 'N', 'I', 
    'N', 'G', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', 'n', '\n', '\025', 'M', 'p', '5', '_', 'l', 'd', 'w', 's', 
    'e', 'n', 's', 'i', 't', 'v', 'i', 't', 'y', 'T', 'y', 'p', 'e', '\022', '\032', '\n', '\026', 'M', 'P', '5', '_', 'L', 'D', 'W', 'S', 
    'E', 'N', 'S', 'I', 'T', 'V', 'I', 'T', 'Y', '_', 'H', 'I', 'G', 'H', '\020', '\000', '\022', '\031', '\n', '\025', 'M', 'P', '5', '_', 'L', 
    'D', 'W', 'S', 'E', 'N', 'S', 'I', 'T', 'V', 'I', 'T', 'Y', '_', 'L', 'O', 'W', '\020', '\001', '\022', '\036', '\n', '\032', 'M', 'P', '5', 
    '_', 'L', 'D', 'W', 'S', 'E', 'N', 'S', 'I', 'T', 'V', 'I', 'T', 'Y', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\002', 
    '\"', '\354', '\003', '\n', '\021', 'M', 'p', '5', '_', 'a', 'v', 'm', '_', 'a', 'n', 'g', 'l', 'e', 'T', 'y', 'p', 'e', '\022', '\034', '\n', 
    '\030', 'M', 'P', '5', '_', 'A', 'V', 'M', '_', 'A', 'N', 'G', 'L', 'E', '_', 'C', 'E', 'N', 'T', 'E', 'R', '_', 'K', 'E', 'Y', 
    '\020', '\000', '\022', '\'', '\n', '#', 'M', 'P', '5', '_', 'A', 'V', 'M', '_', 'A', 'N', 'G', 'L', 'E', '_', 'F', 'R', 'O', 'N', 'T', 
    '_', '3', 'D', '_', 'F', 'R', 'O', 'N', 'T', '_', 'A', 'V', 'M', '_', '2', 'D', '\020', '\001', '\022', ' ', '\n', '\034', 'M', 'P', '5', 
    '_', 'A', 'V', 'M', '_', 'A', 'N', 'G', 'L', 'E', '_', 'F', 'R', 'O', 'N', 'T', '_', 'R', 'I', 'G', 'H', 'T', '_', '3', 'D', 
    '\020', '\002', '\022', '\'', '\n', '#', 'M', 'P', '5', '_', 'A', 'V', 'M', '_', 'A', 'N', 'G', 'L', 'E', '_', 'R', 'I', 'G', 'H', 'T', 
    '_', '3', 'D', '_', 'R', 'I', 'G', 'H', 'T', '_', 'A', 'V', 'M', '_', '2', 'D', '\020', '\003', '\022', '\037', '\n', '\033', 'M', 'P', '5', 
    '_', 'A', 'V', 'M', '_', 'A', 'N', 'G', 'L', 'E', '_', 'R', 'E', 'A', 'R', '_', 'R', 'I', 'G', 'H', 'T', '_', '3', 'D', '\020', 
    '\004', '\022', '%', '\n', '!', 'M', 'P', '5', '_', 'A', 'V', 'M', '_', 'A', 'N', 'G', 'L', 'E', '_', 'R', 'E', 'A', 'R', '_', '3', 
    'D', '_', 'R', 'E', 'A', 'R', '_', 'A', 'V', 'M', '_', '2', 'D', '\020', '\005', '\022', '\036', '\n', '\032', 'M', 'P', '5', '_', 'A', 'V', 
    'M', '_', 'A', 'N', 'G', 'L', 'E', '_', 'L', 'E', 'F', 'T', '_', 'R', 'E', 'A', 'R', '_', '3', 'D', '\020', '\006', '\022', '%', '\n', 
    '!', 'M', 'P', '5', '_', 'A', 'V', 'M', '_', 'A', 'N', 'G', 'L', 'E', '_', 'L', 'E', 'F', 'T', '_', '3', 'D', '_', 'L', 'E', 
    'F', 'T', '_', 'A', 'V', 'M', '_', '2', 'D', '\020', '\007', '\022', '\037', '\n', '\033', 'M', 'P', '5', '_', 'A', 'V', 'M', '_', 'A', 'N', 
    'G', 'L', 'E', '_', 'L', 'E', 'F', 'T', '_', 'F', 'R', 'O', 'N', 'T', '_', '3', 'D', '\020', '\010', '\022', '\030', '\n', '\024', 'M', 'P', 
    '5', '_', 'A', 'V', 'M', '_', 'A', 'N', 'G', 'L', 'E', '_', '3', 'D', '_', 'K', 'E', 'Y', '\020', '\t', '\022', '\030', '\n', '\024', 'M', 
    'P', '5', '_', 'A', 'V', 'M', '_', 'A', 'N', 'G', 'L', 'E', '_', '2', 'D', '_', 'K', 'E', 'Y', '\020', '\n', '\022', '*', '\n', '&', 
    'M', 'P', '5', '_', 'A', 'V', 'M', '_', 'A', 'N', 'G', 'L', 'E', '_', 'N', 'O', '_', 'V', 'I', 'D', 'E', 'O', '_', 'S', 'I', 
    'G', 'N', 'A', 'L', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\013', '\022', '\032', '\n', '\026', 'M', 'P', '5', '_', 'A', 'V', 
    'M', '_', 'A', 'N', 'G', 'L', 'E', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\014', '\022', '\031', '\n', '\025', 'M', 'P', '5', 
    '_', 'A', 'V', 'M', '_', 'A', 'N', 'G', 'L', 'E', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\017', '\"', 'C', '\n', '\022', 'M', 
    'p', '5', '_', 'i', 'h', 'c', 'm', 'e', 'n', 'u', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '\025', '\n', '\021', 'M', 'P', '5', '_', 
    'I', 'H', 'C', 'M', 'E', 'N', 'U', 'R', 'E', 'Q', '_', 'O', 'N', '\020', '\000', '\022', '\026', '\n', '\022', 'M', 'P', '5', '_', 'I', 'H', 
    'C', 'M', 'E', 'N', 'U', 'R', 'E', 'Q', '_', 'O', 'F', 'F', '\020', '\001', '\"', 'C', '\n', '\022', 'M', 'p', '5', '_', 'd', 'o', 'a', 
    '_', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '\025', '\n', '\021', 'M', 'P', '5', '_', 'D', 'O', 'A', '_', 'A', 'C', 
    'T', 'I', 'V', 'E', '_', 'O', 'N', '\020', '\000', '\022', '\026', '\n', '\022', 'M', 'P', '5', '_', 'D', 'O', 'A', '_', 'A', 'C', 'T', 'I', 
    'V', 'E', '_', 'O', 'F', 'F', '\020', '\001', '\"', '\212', '\001', '\n', '\031', 'M', 'p', '5', '_', 'a', 'p', 'a', '_', 'a', 'v', 'a', 'i', 
    'l', 'a', 'b', 'l', 'e', '_', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'M', 'P', '5', '_', 'A', 'P', 'A', '_', 
    'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'S', 'T', 'S', '_', 'I', 'N', 'I', 'T', 'I', 'A', 'L', '\020', '\000', '\022', '\"', 
    '\n', '\036', 'M', 'P', '5', '_', 'A', 'P', 'A', '_', 'A', 'V', 'A', 'I', 'L', 'A', 'B', 'L', 'E', '_', 'S', 'T', 'S', '_', 'A', 
    'V', 'A', 'L', 'I', 'B', 'L', 'E', '\020', '\001', '\022', '&', '\n', '\"', 'M', 'P', '5', '_', 'A', 'P', 'A', '_', 'A', 'V', 'A', 'I', 
    'L', 'A', 'B', 'L', 'E', '_', 'S', 'T', 'S', '_', 'N', 'O', 'T', '_', 'A', 'V', 'A', 'L', 'I', 'B', 'L', 'E', '\020', '\002', '\"', 
    '\220', '\001', '\n', '\037', 'M', 'p', '5', '_', 't', 'p', 'm', 's', 'a', 'u', 't', 'o', 'l', 'o', 'c', 'a', 't', 'i', 'o', 'n', 's', 
    'e', 't', 't', 'i', 'n', 'g', 'T', 'y', 'p', 'e', '\022', '6', '\n', '2', 'M', 'P', '5', '_', 'T', 'P', 'M', 'S', 'A', 'U', 'T', 
    'O', 'L', 'O', 'C', 'A', 'T', 'I', 'O', 'N', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', 'A', 'U', 'T', 'O', 'L', 'O', 'C', 'A', 
    'T', 'I', 'O', 'N', 'S', 'E', 'T', 'T', 'I', 'N', 'G', 'O', 'F', 'F', '\020', '\000', '\022', '5', '\n', '1', 'M', 'P', '5', '_', 'T', 
    'P', 'M', 'S', 'A', 'U', 'T', 'O', 'L', 'O', 'C', 'A', 'T', 'I', 'O', 'N', 'S', 'E', 'T', 'T', 'I', 'N', 'G', '_', 'A', 'U', 
    'T', 'O', 'L', 'O', 'C', 'A', 'T', 'I', 'O', 'N', 'S', 'E', 'T', 'T', 'I', 'N', 'G', 'O', 'N', '\020', '\001', '\"', '\304', '\001', '\n', 
    '\035', 'M', 'p', '5', '_', 'a', 'v', 'm', '_', 'r', 'o', 't', 'a', 't', 'i', 'o', 'n', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 
    'n', 'T', 'y', 'p', 'e', '\022', '%', '\n', '!', 'M', 'P', '5', '_', 'A', 'V', 'M', '_', 'R', 'O', 'T', 'A', 'T', 'I', 'O', 'N', 
    'D', 'I', 'R', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'I', 'N', 'I', 'T', 'I', 'A', 'L', '\020', '\000', '\022', '\'', '\n', '#', 'M', 'P', 
    '5', '_', 'A', 'V', 'M', '_', 'R', 'O', 'T', 'A', 'T', 'I', 'O', 'N', 'D', 'I', 'R', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'C', 
    'L', 'O', 'C', 'K', 'W', 'I', 'S', 'E', '\020', '\001', '\022', '+', '\n', '\'', 'M', 'P', '5', '_', 'A', 'V', 'M', '_', 'R', 'O', 'T', 
    'A', 'T', 'I', 'O', 'N', 'D', 'I', 'R', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'A', 'N', 'T', 'I', 'C', 'L', 'O', 'C', 'K', 'W', 
    'I', 'S', 'E', '\020', '\002', '\022', '&', '\n', '\"', 'M', 'P', '5', '_', 'A', 'V', 'M', '_', 'R', 'O', 'T', 'A', 'T', 'I', 'O', 'N', 
    'D', 'I', 'R', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\205', '\001', '\n', '\022', 
    'M', 'p', '5', '_', 'a', 'v', 'm', '_', 'b', 'u', 't', 't', 'o', 'n', 'T', 'y', 'p', 'e', '\022', '\027', '\n', '\023', 'M', 'P', '5', 
    '_', 'A', 'V', 'M', '_', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'I', 'N', 'I', 'T', '\020', '\000', '\022', '\033', '\n', '\027', 'M', 'P', '5', 
    '_', 'A', 'V', 'M', '_', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'S', 'T', 'A', 'R', 'T', '_', 'U', 'P', '\020', '\001', '\022', '\034', '\n', 
    '\030', 'M', 'P', '5', '_', 'A', 'V', 'M', '_', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'S', 'H', 'U', 'T', '_', 'D', 'O', 'W', 'N', 
    '\020', '\002', '\022', '\033', '\n', '\027', 'M', 'P', '5', '_', 'A', 'V', 'M', '_', 'B', 'U', 'T', 'T', 'O', 'N', '_', 'F', 'A', 'U', 'L', 
    'T', 'U', 'R', 'E', '\020', '\003', '\"', 'H', '\n', '\023', 'M', 'p', '5', '_', 'v', 'i', 'e', 'w', '_', 'c', 'h', 'o', 'i', 'c', 'e', 
    'T', 'y', 'p', 'e', '\022', '\027', '\n', '\023', 'M', 'P', '5', '_', 'V', 'I', 'E', 'W', '_', 'C', 'H', 'O', 'I', 'C', 'E', '_', 'A', 
    'V', 'M', '\020', '\000', '\022', '\030', '\n', '\024', 'M', 'P', '5', '_', 'V', 'I', 'E', 'W', '_', 'C', 'H', 'O', 'I', 'C', 'E', '_', 'A', 
    'D', 'A', 'S', '\020', '\001', '\"', '\341', '\007', '\n', '\023', 'M', 'r', 'r', '_', 'f', 'r', 'o', 'b', 'j', '_', '0', 'x', '2', '7', '9', 
    '_', '2', '7', '9', '\022', '\027', '\n', '\017', 'm', 'r', 'r', '_', 'f', '_', 'o', 'b', 'j', 'e', 'c', 't', '_', 'd', 'y', '\030', '\001', 
    ' ', '\001', '(', '\001', '\022', 'W', '\n', '\022', 'm', 'r', 'r', '_', 'f', '_', 'o', 'b', 'j', '_', '0', 'x', '_', 'c', 'l', 'a', 's', 
    's', '\030', '\002', ' ', '\001', '(', '\016', '2', ';', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'M', 'r', 'r', '_', 'f', 'r', 'o', 'b', 'j', '_', '0', 'x', '2', '7', '9', '_', '2', '7', '9', '.', 'M', 'r', 'r', '_', 
    'f', '_', 'o', 'b', 'j', '_', '0', 'x', '_', 'c', 'l', 'a', 's', 's', 'T', 'y', 'p', 'e', '\022', '\030', '\n', '\020', 'm', 'r', 'r', 
    '_', 'f', 'f', '_', 'o', 'b', 'j', 'e', 'c', 't', '_', 'd', 'x', '\030', '\003', ' ', '\001', '(', '\001', '\022', '\030', '\n', '\020', 'm', 'r', 
    'r', '_', 'f', 'f', '_', 'o', 'b', 'j', 'e', 'c', 't', '_', 'd', 'y', '\030', '\004', ' ', '\001', '(', '\001', '\022', 'Y', '\n', '\023', 'm', 
    'r', 'r', '_', 'f', 'f', '_', 'o', 'b', 'j', '_', '0', 'x', '_', 'c', 'l', 'a', 's', 's', '\030', '\005', ' ', '\001', '(', '\016', '2', 
    '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', 'f', 'r', 'o', 
    'b', 'j', '_', '0', 'x', '2', '7', '9', '_', '2', '7', '9', '.', 'M', 'r', 'r', '_', 'f', 'f', '_', 'o', 'b', 'j', '_', '0', 
    'x', '_', 'c', 'l', 'a', 's', 's', 'T', 'y', 'p', 'e', '\022', ']', '\n', '\025', 'm', 'r', 'r', '_', 'f', 'f', 't', 'a', 'r', 'g', 
    'r', 't', 'd', 'e', 't', 'e', 'c', 't', 'i', 'o', 'n', '\030', '\006', ' ', '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', 'f', 'r', 'o', 'b', 'j', '_', '0', 'x', '2', '7', 
    '9', '_', '2', '7', '9', '.', 'M', 'r', 'r', '_', 'f', 'f', 't', 'a', 'r', 'g', 'r', 't', 'd', 'e', 't', 'e', 'c', 't', 'i', 
    'o', 'n', 'T', 'y', 'p', 'e', '\022', 'S', '\n', '\020', 'm', 'r', 'r', '_', 'p', 'e', 'd', 'd', 'e', 't', 'e', 'c', 't', 'i', 'o', 
    'n', '\030', '\007', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'M', 'r', 'r', '_', 'f', 'r', 'o', 'b', 'j', '_', '0', 'x', '2', '7', '9', '_', '2', '7', '9', '.', 'M', 'r', 'r', '_', 
    'p', 'e', 'd', 'd', 'e', 't', 'e', 'c', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', '\027', '\n', '\017', 'm', 'r', 'r', '_', 'f', 
    '_', 'o', 'b', 'j', 'e', 'c', 't', '_', 'd', 'x', '\030', '\010', ' ', '\001', '(', '\001', '\"', '\226', '\001', '\n', '\026', 'M', 'r', 'r', '_', 
    'f', '_', 'o', 'b', 'j', '_', '0', 'x', '_', 'c', 'l', 'a', 's', 's', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'M', 'R', 'R', 
    '_', 'F', '_', 'O', 'B', 'J', '_', '0', 'X', '_', 'C', 'L', 'A', 'S', 'S', '_', 'U', 'N', 'K', 'N', 'O', 'W', 'N', '\020', '\000', 
    '\022', '\032', '\n', '\026', 'M', 'R', 'R', '_', 'F', '_', 'O', 'B', 'J', '_', '0', 'X', '_', 'C', 'L', 'A', 'S', 'S', '_', 'C', 'A', 
    'R', '\020', '\001', '\022', '\034', '\n', '\030', 'M', 'R', 'R', '_', 'F', '_', 'O', 'B', 'J', '_', '0', 'X', '_', 'C', 'L', 'A', 'S', 'S', 
    '_', 'T', 'R', 'U', 'C', 'K', '\020', '\002', '\022', '\"', '\n', '\036', 'M', 'R', 'R', '_', 'F', '_', 'O', 'B', 'J', '_', '0', 'X', '_', 
    'C', 'L', 'A', 'S', 'S', '_', 'T', 'W', 'O', '_', 'W', 'H', 'E', 'E', 'L', 'E', 'R', '\020', '\003', '\"', '\233', '\001', '\n', '\027', 'M', 
    'r', 'r', '_', 'f', 'f', '_', 'o', 'b', 'j', '_', '0', 'x', '_', 'c', 'l', 'a', 's', 's', 'T', 'y', 'p', 'e', '\022', '\037', '\n', 
    '\033', 'M', 'R', 'R', '_', 'F', 'F', '_', 'O', 'B', 'J', '_', '0', 'X', '_', 'C', 'L', 'A', 'S', 'S', '_', 'U', 'N', 'K', 'N', 
    'O', 'W', 'N', '\020', '\000', '\022', '\033', '\n', '\027', 'M', 'R', 'R', '_', 'F', 'F', '_', 'O', 'B', 'J', '_', '0', 'X', '_', 'C', 'L', 
    'A', 'S', 'S', '_', 'C', 'A', 'R', '\020', '\001', '\022', '\035', '\n', '\031', 'M', 'R', 'R', '_', 'F', 'F', '_', 'O', 'B', 'J', '_', '0', 
    'X', '_', 'C', 'L', 'A', 'S', 'S', '_', 'T', 'R', 'U', 'C', 'K', '\020', '\002', '\022', '#', '\n', '\037', 'M', 'R', 'R', '_', 'F', 'F', 
    '_', 'O', 'B', 'J', '_', '0', 'X', '_', 'C', 'L', 'A', 'S', 'S', '_', 'T', 'W', 'O', '_', 'W', 'H', 'E', 'E', 'L', 'E', 'R', 
    '\020', '\003', '\"', 'i', '\n', '\031', 'M', 'r', 'r', '_', 'f', 'f', 't', 'a', 'r', 'g', 'r', 't', 'd', 'e', 't', 'e', 'c', 't', 'i', 
    'o', 'n', 'T', 'y', 'p', 'e', '\022', '\'', '\n', '#', 'M', 'R', 'R', '_', 'F', 'F', 'T', 'A', 'R', 'G', 'R', 'T', 'D', 'E', 'T', 
    'E', 'C', 'T', 'I', 'O', 'N', '_', 'N', 'O', 'T', '_', 'D', 'E', 'C', 'T', 'E', 'C', 'T', 'E', 'D', '\020', '\000', '\022', '#', '\n', 
    '\037', 'M', 'R', 'R', '_', 'F', 'F', 'T', 'A', 'R', 'G', 'R', 'T', 'D', 'E', 'T', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'D', 'E', 
    'C', 'T', 'E', 'C', 'T', 'E', 'D', '\020', '\001', '\"', 'Z', '\n', '\024', 'M', 'r', 'r', '_', 'p', 'e', 'd', 'd', 'e', 't', 'e', 'c', 
    't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', '\"', '\n', '\036', 'M', 'R', 'R', '_', 'P', 'E', 'D', 'D', 'E', 'T', 'E', 'C', 'T', 
    'I', 'O', 'N', '_', 'N', 'O', 'T', '_', 'D', 'E', 'C', 'T', 'E', 'C', 'T', 'E', 'D', '\020', '\000', '\022', '\036', '\n', '\032', 'M', 'R', 
    'R', '_', 'P', 'E', 'D', 'D', 'E', 'T', 'E', 'C', 'T', 'I', 'O', 'N', '_', 'D', 'E', 'C', 'T', 'E', 'C', 'T', 'E', 'D', '\020', 
    '\001', '\"', '\233', '\t', '\n', '\017', 'G', 'w', '_', 'i', 'c', '_', '0', 'x', '5', '1', '0', '_', '5', '1', '0', '\022', 'a', '\n', '\031', 
    'i', 'c', '_', 'a', 'i', 'r', 'b', 'a', 'g', 't', 'e', 'l', 'l', 't', 'a', 'l', 'e', 'b', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 
    '\030', '\001', ' ', '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 
    'G', 'w', '_', 'i', 'c', '_', '0', 'x', '5', '1', '0', '_', '5', '1', '0', '.', 'I', 'c', '_', 'a', 'i', 'r', 'b', 'a', 'g', 
    't', 'e', 'l', 'l', 't', 'a', 'l', 'e', 'b', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 'T', 'y', 'p', 'e', '\022', 'W', '\n', '\024', 'i', 
    'c', '_', 'v', 'e', 'h', 'b', 'r', 'k', 'p', 'u', 'm', 'p', '_', 'e', 'r', 'r', '_', 'i', 'c', '\030', '\002', ' ', '\001', '(', '\016', 
    '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'i', 'c', '_', 
    '0', 'x', '5', '1', '0', '_', '5', '1', '0', '.', 'I', 'c', '_', 'v', 'e', 'h', 'b', 'r', 'k', 'p', 'u', 'm', 'p', '_', 'e', 
    'r', 'r', '_', 'i', 'c', 'T', 'y', 'p', 'e', '\022', 'C', '\n', '\n', 'i', 'c', '_', 'd', 'i', 's', 'f', 'a', 'i', 'l', '\030', '\003', 
    ' ', '\001', '(', '\016', '2', '/', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', 
    '_', 'i', 'c', '_', '0', 'x', '5', '1', '0', '_', '5', '1', '0', '.', 'I', 'c', '_', 'd', 'i', 's', 'f', 'a', 'i', 'l', 'T', 
    'y', 'p', 'e', '\022', 'M', '\n', '\017', 'i', 'c', '_', 'q', 'd', 'a', 's', 'h', 'a', 'c', 'c', 'f', 'a', 'i', 'l', '\030', '\004', ' ', 
    '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 
    'i', 'c', '_', '0', 'x', '5', '1', '0', '_', '5', '1', '0', '.', 'I', 'c', '_', 'q', 'd', 'a', 's', 'h', 'a', 'c', 'c', 'f', 
    'a', 'i', 'l', 'T', 'y', 'p', 'e', '\022', '\025', '\n', '\r', 'i', 'c', '_', 'v', 'e', 'h', 's', 'p', 'd', '_', 'h', 'm', 'i', '\030', 
    '\005', ' ', '\001', '(', '\005', '\022', ' ', '\n', '\030', 'i', 'c', '_', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 
    'e', 'r', '_', '0', 'x', '5', '1', '0', '\030', '\006', ' ', '\001', '(', '\005', '\022', '\031', '\n', '\021', 'i', 'c', '_', 'c', 'h', 'e', 'c', 
    'k', 's', 'u', 'm', '_', '0', 'x', '5', '1', '0', '\030', '\007', ' ', '\001', '(', '\005', '\022', '\036', '\n', '\026', 'i', 'c', '_', 'o', 'd', 
    'o', 'm', 'e', 't', 'e', 'r', 'm', 'a', 's', 't', 'e', 'r', 'v', 'a', 'l', 'u', 'e', '\030', '\010', ' ', '\001', '(', '\001', '\"', '\200', 
    '\003', '\n', '\035', 'I', 'c', '_', 'a', 'i', 'r', 'b', 'a', 'g', 't', 'e', 'l', 'l', 't', 'a', 'l', 'e', 'b', 'e', 'h', 'a', 'v', 
    'i', 'o', 'r', 'T', 'y', 'p', 'e', '\022', '@', '\n', '<', 'I', 'C', '_', 'A', 'I', 'R', 'B', 'A', 'G', 'T', 'E', 'L', 'L', 'T', 
    'A', 'L', 'E', 'B', 'E', 'H', 'A', 'V', 'I', 'O', 'R', '_', 'N', 'O', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', '_', 'I', 'N', 
    '_', 'L', 'A', 'M', 'P', '_', 'A', 'N', 'D', '_', 'L', 'A', 'M', 'P', '_', 'I', 'S', '_', 'O', 'F', 'F', '\020', '\000', '\022', '-', 
    '\n', ')', 'I', 'C', '_', 'A', 'I', 'R', 'B', 'A', 'G', 'T', 'E', 'L', 'L', 'T', 'A', 'L', 'E', 'B', 'E', 'H', 'A', 'V', 'I', 
    'O', 'R', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', '_', 'I', 'N', '_', 'L', 'A', 'M', 'P', '\020', '\001', '\022', '?', '\n', ';', 'I', 
    'C', '_', 'A', 'I', 'R', 'B', 'A', 'G', 'T', 'E', 'L', 'L', 'T', 'A', 'L', 'E', 'B', 'E', 'H', 'A', 'V', 'I', 'O', 'R', '_', 
    'N', 'O', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', '_', 'I', 'N', '_', 'T', 'H', 'E', '_', 'L', 'A', 'M', 'P', '_', 'L', 'A', 
    'M', 'P', '_', 'I', 'S', '_', 'O', 'N', '\020', '\002', '\022', 'E', '\n', 'A', 'I', 'C', '_', 'A', 'I', 'R', 'B', 'A', 'G', 'T', 'E', 
    'L', 'L', 'T', 'A', 'L', 'E', 'B', 'E', 'H', 'A', 'V', 'I', 'O', 'R', '_', 'N', 'O', '_', 'F', 'A', 'I', 'L', 'U', 'R', 'E', 
    '_', 'I', 'N', '_', 'T', 'H', 'E', '_', 'L', 'A', 'M', 'P', '_', 'L', 'A', 'M', 'P', '_', 'I', 'S', '_', 'B', 'L', 'I', 'N', 
    'K', 'I', 'N', 'G', '\020', '\003', '\022', '?', '\n', ';', 'I', 'C', '_', 'A', 'I', 'R', 'B', 'A', 'G', 'T', 'E', 'L', 'L', 'T', 'A', 
    'L', 'E', 'B', 'E', 'H', 'A', 'V', 'I', 'O', 'R', '_', 'A', 'I', 'R', 'B', 'A', 'G', 'F', 'A', 'I', 'L', 'S', 'T', 'S', '_', 
    'S', 'I', 'G', 'N', 'A', 'L', '_', 'N', 'O', 'T', '_', 'R', 'E', 'C', 'E', 'I', 'V', 'E', 'D', '\020', '\004', '\022', '%', '\n', '!', 
    'I', 'C', '_', 'A', 'I', 'R', 'B', 'A', 'G', 'T', 'E', 'L', 'L', 'T', 'A', 'L', 'E', 'B', 'E', 'H', 'A', 'V', 'I', 'O', 'R', 
    '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\005', '\"', '[', '\n', '\030', 'I', 'c', '_', 'v', 'e', 'h', 'b', 'r', 'k', 'p', 'u', 
    'm', 'p', '_', 'e', 'r', 'r', '_', 'i', 'c', 'T', 'y', 'p', 'e', '\022', '\037', '\n', '\033', 'I', 'C', '_', 'V', 'E', 'H', 'B', 'R', 
    'K', 'P', 'U', 'M', 'P', '_', 'E', 'R', 'R', '_', 'I', 'C', '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\000', '\022', '\036', '\n', '\032', 
    'I', 'C', '_', 'V', 'E', 'H', 'B', 'R', 'K', 'P', 'U', 'M', 'P', '_', 'E', 'R', 'R', '_', 'I', 'C', '_', 'E', 'R', 'R', 'O', 
    'R', '\020', '\001', '\"', '?', '\n', '\016', 'I', 'c', '_', 'd', 'i', 's', 'f', 'a', 'i', 'l', 'T', 'y', 'p', 'e', '\022', '\027', '\n', '\023', 
    'I', 'C', '_', 'D', 'I', 'S', 'F', 'A', 'I', 'L', '_', 'N', 'O', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\000', '\022', '\024', '\n', '\020', 
    'I', 'C', '_', 'D', 'I', 'S', 'F', 'A', 'I', 'L', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\001', '\"', '\242', '\001', '\n', '\023', 'I', 'c', 
    '_', 'q', 'd', 'a', 's', 'h', 'a', 'c', 'c', 'f', 'a', 'i', 'l', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'I', 'C', '_', 'Q', 
    'D', 'A', 'S', 'H', 'A', 'C', 'C', 'F', 'A', 'I', 'L', '_', 'N', 'O', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\000', '\022', '$', '\n', 
    ' ', 'I', 'C', '_', 'Q', 'D', 'A', 'S', 'H', 'A', 'C', 'C', 'F', 'A', 'I', 'L', '_', 'R', 'E', 'V', 'E', 'R', 'S', 'I', 'B', 
    'L', 'E', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\001', '\022', '&', '\n', '\"', 'I', 'C', '_', 'Q', 'D', 'A', 'S', 'H', 'A', 'C', 'C', 
    'F', 'A', 'I', 'L', '_', 'I', 'R', 'R', 'E', 'V', 'E', 'R', 'S', 'I', 'B', 'L', 'E', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\002', 
    '\022', '\037', '\n', '\033', 'I', 'C', '_', 'Q', 'D', 'A', 'S', 'H', 'A', 'C', 'C', 'F', 'A', 'I', 'L', '_', 'N', 'O', 'T', '_', 'D', 
    'E', 'F', 'I', 'N', 'E', 'D', '\020', '\003', '\"', '\336', '\003', '\n', '\020', 'E', 's', 'p', '_', 't', 'q', '_', '0', 'x', '2', '1', '7', 
    '_', '2', '1', '7', '\022', '\036', '\n', '\026', 'e', 's', 'p', '_', 't', 'q', 'd', 'e', 'c', 'r', 'e', 'q', 'd', 'b', 'y', 'e', 's', 
    'p', 's', 'l', 'o', 'w', '\030', '\001', ' ', '\001', '(', '\001', '\022', '\033', '\n', '\023', 'e', 's', 'p', '_', 't', 'q', 'i', 'n', 'c', 'c', 
    'r', 'e', 'q', 'd', 'b', 'y', 'e', 's', 'p', '\030', '\002', ' ', '\001', '(', '\001', '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 'i', 'n', 
    'g', '_', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', '2', '1', '7', '\030', '\003', ' ', '\001', '(', '\005', '\022', 'L', '\n', '\016', 
    'e', 's', 'p', '_', 't', 'r', 'q', 'i', 'n', 'c', '_', 'r', 'e', 'q', '\030', '\004', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 'm', 
    'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 't', 'q', '_', '0', 'x', '2', '1', 
    '7', '_', '2', '1', '7', '.', 'E', 's', 'p', '_', 't', 'r', 'q', 'i', 'n', 'c', '_', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', 
    'L', '\n', '\016', 'e', 's', 'p', '_', 't', 'r', 'q', 'r', 'e', 'd', '_', 'r', 'e', 'q', '\030', '\005', ' ', '\001', '(', '\016', '2', '4', 
    '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 't', 'q', '_', '0', 
    'x', '2', '1', '7', '_', '2', '1', '7', '.', 'E', 's', 'p', '_', 't', 'r', 'q', 'r', 'e', 'd', '_', 'r', 'e', 'q', 'T', 'y', 
    'p', 'e', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '2', '1', '7', '\030', '\006', ' ', '\001', '(', 
    '\005', '\022', '\036', '\n', '\026', 'e', 's', 'p', '_', 't', 'q', 'd', 'e', 'c', 'r', 'e', 'q', 'd', 'b', 'y', 'e', 's', 'p', 'f', 'a', 
    's', 't', '\030', '\007', ' ', '\001', '(', '\001', '\"', 'L', '\n', '\022', 'E', 's', 'p', '_', 't', 'r', 'q', 'i', 'n', 'c', '_', 'r', 'e', 
    'q', 'T', 'y', 'p', 'e', '\022', '\033', '\n', '\027', 'E', 'S', 'P', '_', 'T', 'R', 'Q', 'I', 'N', 'C', '_', 'R', 'E', 'Q', '_', 'I', 
    'N', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\031', '\n', '\025', 'E', 'S', 'P', '_', 'T', 'R', 'Q', 'I', 'N', 'C', '_', 'R', 
    'E', 'Q', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', 'L', '\n', '\022', 'E', 's', 'p', '_', 't', 'r', 'q', 'r', 'e', 'd', 
    '_', 'r', 'e', 'q', 'T', 'y', 'p', 'e', '\022', '\033', '\n', '\027', 'E', 'S', 'P', '_', 'T', 'R', 'Q', 'R', 'E', 'D', '_', 'R', 'E', 
    'Q', '_', 'I', 'N', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\031', '\n', '\025', 'E', 'S', 'P', '_', 'T', 'R', 'Q', 'R', 'E', 
    'D', '_', 'R', 'E', 'Q', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', '\345', '\003', '\n', '\022', 'E', 's', 'p', '_', 'r', 'p', 
    'm', 'f', '_', '0', 'x', '2', '1', '3', '_', '2', '1', '3', '\022', '\026', '\n', '\016', 'e', 's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 
    'r', 'p', 'm', 'f', 'r', '\030', '\001', ' ', '\001', '(', '\001', '\022', 'X', '\n', '\023', 'e', 's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'r', 
    'p', 'm', 'f', 'r', 'v', 'a', 'l', 'i', 'd', '\030', '\002', ' ', '\001', '(', '\016', '2', ';', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'r', 'p', 'm', 'f', '_', '0', 'x', '2', '1', '3', '_', '2', 
    '1', '3', '.', 'E', 's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'r', 'p', 'm', 'f', 'r', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 
    'e', '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', '2', '1', 
    '3', '\030', '\003', ' ', '\001', '(', '\005', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '2', '1', '3', 
    '\030', '\004', ' ', '\001', '(', '\005', '\022', '\026', '\n', '\016', 'e', 's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'r', 'p', 'm', 'f', 'l', '\030', 
    '\005', ' ', '\001', '(', '\001', '\022', 'X', '\n', '\023', 'e', 's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'r', 'p', 'm', 'f', 'l', 'v', 'a', 
    'l', 'i', 'd', '\030', '\006', ' ', '\001', '(', '\016', '2', ';', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'E', 's', 'p', '_', 'r', 'p', 'm', 'f', '_', '0', 'x', '2', '1', '3', '_', '2', '1', '3', '.', 'E', 's', 'p', 
    '_', 'w', 'h', 'e', 'e', 'l', 'r', 'p', 'm', 'f', 'l', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\"', 'Y', '\n', '\027', 'E', 
    's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'r', 'p', 'm', 'f', 'r', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', '\035', '\n', 
    '\031', 'E', 'S', 'P', '_', 'W', 'H', 'E', 'E', 'L', 'R', 'P', 'M', 'F', 'R', 'V', 'A', 'L', 'I', 'D', '_', 'V', 'A', 'L', 'I', 
    'D', '\020', '\000', '\022', '\037', '\n', '\033', 'E', 'S', 'P', '_', 'W', 'H', 'E', 'E', 'L', 'R', 'P', 'M', 'F', 'R', 'V', 'A', 'L', 'I', 
    'D', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', 'Y', '\n', '\027', 'E', 's', 'p', '_', 'w', 'h', 'e', 'e', 'l', 'r', 
    'p', 'm', 'f', 'l', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'E', 'S', 'P', '_', 'W', 'H', 'E', 'E', 
    'L', 'R', 'P', 'M', 'F', 'L', 'V', 'A', 'L', 'I', 'D', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '\037', '\n', '\033', 'E', 'S', 
    'P', '_', 'W', 'H', 'E', 'E', 'L', 'R', 'P', 'M', 'F', 'L', 'V', 'A', 'L', 'I', 'D', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', 
    '\020', '\001', '\"', '\316', '\035', '\n', '\024', 'G', 'w', '_', 'i', 'c', '_', 't', 'i', 'm', 'e', '_', '0', 'x', '5', '8', '1', '_', '5', 
    '8', '1', '\022', 'D', '\n', '\010', 'i', 'c', '_', 'm', 'o', 'n', 't', 'h', '\030', '\001', ' ', '\001', '(', '\016', '2', '2', '.', 'j', 'm', 
    'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'i', 'c', '_', 't', 'i', 'm', 'e', '_', 
    '0', 'x', '5', '8', '1', '_', '5', '8', '1', '.', 'I', 'c', '_', 'm', 'o', 'n', 't', 'h', 'T', 'y', 'p', 'e', '\022', 'B', '\n', 
    '\007', 'i', 'c', '_', 'd', 'a', 't', 'e', '\030', '\002', ' ', '\001', '(', '\016', '2', '1', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', 
    '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'i', 'c', '_', 't', 'i', 'm', 'e', '_', '0', 'x', '5', '8', '1', '_', 
    '5', '8', '1', '.', 'I', 'c', '_', 'd', 'a', 't', 'e', 'T', 'y', 'p', 'e', '\022', 'B', '\n', '\007', 'i', 'c', '_', 'h', 'o', 'u', 
    'r', '\030', '\003', ' ', '\001', '(', '\016', '2', '1', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'G', 'w', '_', 'i', 'c', '_', 't', 'i', 'm', 'e', '_', '0', 'x', '5', '8', '1', '_', '5', '8', '1', '.', 'I', 'c', '_', 
    'h', 'o', 'u', 'r', 'T', 'y', 'p', 'e', '\022', 'F', '\n', '\t', 'i', 'c', '_', 'm', 'i', 'n', 'u', 't', 'e', '\030', '\004', ' ', '\001', 
    '(', '\016', '2', '3', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'i', 
    'c', '_', 't', 'i', 'm', 'e', '_', '0', 'x', '5', '8', '1', '_', '5', '8', '1', '.', 'I', 'c', '_', 'm', 'i', 'n', 'u', 't', 
    'e', 'T', 'y', 'p', 'e', '\022', 'F', '\n', '\t', 'i', 'c', '_', 's', 'e', 'c', 'o', 'n', 'd', '\030', '\005', ' ', '\001', '(', '\016', '2', 
    '3', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'i', 'c', '_', 't', 
    'i', 'm', 'e', '_', '0', 'x', '5', '8', '1', '_', '5', '8', '1', '.', 'I', 'c', '_', 's', 'e', 'c', 'o', 'n', 'd', 'T', 'y', 
    'p', 'e', '\022', 'B', '\n', '\007', 'i', 'c', '_', 'y', 'e', 'a', 'r', '\030', '\006', ' ', '\001', '(', '\016', '2', '1', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'i', 'c', '_', 't', 'i', 'm', 'e', '_', '0', 
    'x', '5', '8', '1', '_', '5', '8', '1', '.', 'I', 'c', '_', 'y', 'e', 'a', 'r', 'T', 'y', 'p', 'e', '\"', '\321', '\001', '\n', '\014', 
    'I', 'c', '_', 'm', 'o', 'n', 't', 'h', 'T', 'y', 'p', 'e', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'M', 'O', 'N', 'T', 'H', '_', 
    '1', '\020', '\000', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'M', 'O', 'N', 'T', 'H', '_', '2', '\020', '\001', '\022', '\016', '\n', '\n', 'I', 'C', 
    '_', 'M', 'O', 'N', 'T', 'H', '_', '3', '\020', '\002', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'M', 'O', 'N', 'T', 'H', '_', '4', '\020', 
    '\003', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'M', 'O', 'N', 'T', 'H', '_', '5', '\020', '\004', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'M', 
    'O', 'N', 'T', 'H', '_', '6', '\020', '\005', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'M', 'O', 'N', 'T', 'H', '_', '7', '\020', '\006', '\022', 
    '\016', '\n', '\n', 'I', 'C', '_', 'M', 'O', 'N', 'T', 'H', '_', '8', '\020', '\007', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'M', 'O', 'N', 
    'T', 'H', '_', '9', '\020', '\010', '\022', '\017', '\n', '\013', 'I', 'C', '_', 'M', 'O', 'N', 'T', 'H', '_', '1', '0', '\020', '\t', '\022', '\017', 
    '\n', '\013', 'I', 'C', '_', 'M', 'O', 'N', 'T', 'H', '_', '1', '1', '\020', '\n', '\022', '\017', '\n', '\013', 'I', 'C', '_', 'M', 'O', 'N', 
    'T', 'H', '_', '1', '2', '\020', '\013', '\"', '\364', '\003', '\n', '\013', 'I', 'c', '_', 'd', 'a', 't', 'e', 'T', 'y', 'p', 'e', '\022', '\r', 
    '\n', '\t', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '1', '\020', '\000', '\022', '\r', '\n', '\t', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', 
    '2', '\020', '\001', '\022', '\r', '\n', '\t', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '3', '\020', '\002', '\022', '\r', '\n', '\t', 'I', 'C', '_', 
    'D', 'A', 'T', 'E', '_', '4', '\020', '\003', '\022', '\r', '\n', '\t', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '5', '\020', '\004', '\022', '\r', 
    '\n', '\t', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '6', '\020', '\005', '\022', '\r', '\n', '\t', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', 
    '7', '\020', '\006', '\022', '\r', '\n', '\t', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '8', '\020', '\007', '\022', '\r', '\n', '\t', 'I', 'C', '_', 
    'D', 'A', 'T', 'E', '_', '9', '\020', '\010', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '1', '0', '\020', '\t', '\022', 
    '\016', '\n', '\n', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '1', '1', '\020', '\n', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'D', 'A', 'T', 
    'E', '_', '1', '2', '\020', '\013', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '1', '3', '\020', '\014', '\022', '\016', '\n', 
    '\n', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '1', '4', '\020', '\r', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', 
    '1', '5', '\020', '\016', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '1', '6', '\020', '\017', '\022', '\016', '\n', '\n', 'I', 
    'C', '_', 'D', 'A', 'T', 'E', '_', '1', '7', '\020', '\020', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '1', '8', 
    '\020', '\021', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '1', '9', '\020', '\022', '\022', '\016', '\n', '\n', 'I', 'C', '_', 
    'D', 'A', 'T', 'E', '_', '2', '0', '\020', '\023', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '2', '1', '\020', '\024', 
    '\022', '\016', '\n', '\n', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '2', '2', '\020', '\025', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'D', 'A', 
    'T', 'E', '_', '2', '3', '\020', '\026', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '2', '4', '\020', '\027', '\022', '\016', 
    '\n', '\n', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '2', '5', '\020', '\030', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'D', 'A', 'T', 'E', 
    '_', '2', '6', '\020', '\031', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '2', '7', '\020', '\032', '\022', '\016', '\n', '\n', 
    'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '2', '8', '\020', '\033', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '2', 
    '9', '\020', '\034', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'D', 'A', 'T', 'E', '_', '3', '0', '\020', '\035', '\022', '\016', '\n', '\n', 'I', 'C', 
    '_', 'D', 'A', 'T', 'E', '_', '3', '1', '\020', '\036', '\"', '\203', '\003', '\n', '\013', 'I', 'c', '_', 'h', 'o', 'u', 'r', 'T', 'y', 'p', 
    'e', '\022', '\r', '\n', '\t', 'I', 'C', '_', 'H', 'O', 'U', 'R', '_', '0', '\020', '\000', '\022', '\r', '\n', '\t', 'I', 'C', '_', 'H', 'O', 
    'U', 'R', '_', '1', '\020', '\001', '\022', '\r', '\n', '\t', 'I', 'C', '_', 'H', 'O', 'U', 'R', '_', '2', '\020', '\002', '\022', '\r', '\n', '\t', 
    'I', 'C', '_', 'H', 'O', 'U', 'R', '_', '3', '\020', '\003', '\022', '\r', '\n', '\t', 'I', 'C', '_', 'H', 'O', 'U', 'R', '_', '4', '\020', 
    '\004', '\022', '\r', '\n', '\t', 'I', 'C', '_', 'H', 'O', 'U', 'R', '_', '5', '\020', '\005', '\022', '\r', '\n', '\t', 'I', 'C', '_', 'H', 'O', 
    'U', 'R', '_', '6', '\020', '\006', '\022', '\r', '\n', '\t', 'I', 'C', '_', 'H', 'O', 'U', 'R', '_', '7', '\020', '\007', '\022', '\r', '\n', '\t', 
    'I', 'C', '_', 'H', 'O', 'U', 'R', '_', '8', '\020', '\010', '\022', '\r', '\n', '\t', 'I', 'C', '_', 'H', 'O', 'U', 'R', '_', '9', '\020', 
    '\t', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'H', 'O', 'U', 'R', '_', '1', '0', '\020', '\n', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'H', 
    'O', 'U', 'R', '_', '1', '1', '\020', '\013', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'H', 'O', 'U', 'R', '_', '1', '2', '\020', '\014', '\022', 
    '\016', '\n', '\n', 'I', 'C', '_', 'H', 'O', 'U', 'R', '_', '1', '3', '\020', '\r', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'H', 'O', 'U', 
    'R', '_', '1', '4', '\020', '\016', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'H', 'O', 'U', 'R', '_', '1', '5', '\020', '\017', '\022', '\016', '\n', 
    '\n', 'I', 'C', '_', 'H', 'O', 'U', 'R', '_', '1', '6', '\020', '\020', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'H', 'O', 'U', 'R', '_', 
    '1', '7', '\020', '\021', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'H', 'O', 'U', 'R', '_', '1', '8', '\020', '\022', '\022', '\016', '\n', '\n', 'I', 
    'C', '_', 'H', 'O', 'U', 'R', '_', '1', '9', '\020', '\023', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'H', 'O', 'U', 'R', '_', '2', '0', 
    '\020', '\024', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'H', 'O', 'U', 'R', '_', '2', '1', '\020', '\025', '\022', '\016', '\n', '\n', 'I', 'C', '_', 
    'H', 'O', 'U', 'R', '_', '2', '2', '\020', '\026', '\022', '\016', '\n', '\n', 'I', 'C', '_', 'H', 'O', 'U', 'R', '_', '2', '3', '\020', '\027', 
    '\"', '\275', '\010', '\n', '\r', 'I', 'c', '_', 'm', 'i', 'n', 'u', 't', 'e', 'T', 'y', 'p', 'e', '\022', '\017', '\n', '\013', 'I', 'C', '_', 
    'M', 'I', 'N', 'U', 'T', 'E', '_', '0', '\020', '\000', '\022', '\017', '\n', '\013', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '1', 
    '\020', '\001', '\022', '\017', '\n', '\013', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '2', '\020', '\002', '\022', '\017', '\n', '\013', 'I', 'C', 
    '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '3', '\020', '\003', '\022', '\017', '\n', '\013', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', 
    '4', '\020', '\004', '\022', '\017', '\n', '\013', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '5', '\020', '\005', '\022', '\017', '\n', '\013', 'I', 
    'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '6', '\020', '\006', '\022', '\017', '\n', '\013', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', 
    '_', '7', '\020', '\007', '\022', '\017', '\n', '\013', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '8', '\020', '\010', '\022', '\017', '\n', '\013', 
    'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '9', '\020', '\t', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 
    'E', '_', '1', '0', '\020', '\n', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '1', '1', '\020', '\013', '\022', 
    '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '1', '2', '\020', '\014', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 
    'I', 'N', 'U', 'T', 'E', '_', '1', '3', '\020', '\r', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '1', 
    '4', '\020', '\016', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '1', '5', '\020', '\017', '\022', '\020', '\n', '\014', 
    'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '1', '6', '\020', '\020', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 
    'T', 'E', '_', '1', '7', '\020', '\021', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '1', '8', '\020', '\022', 
    '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '1', '9', '\020', '\023', '\022', '\020', '\n', '\014', 'I', 'C', '_', 
    'M', 'I', 'N', 'U', 'T', 'E', '_', '2', '0', '\020', '\024', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', 
    '2', '1', '\020', '\025', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '2', '2', '\020', '\026', '\022', '\020', '\n', 
    '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '2', '3', '\020', '\027', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 
    'U', 'T', 'E', '_', '2', '4', '\020', '\030', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '2', '5', '\020', 
    '\031', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '2', '6', '\020', '\032', '\022', '\020', '\n', '\014', 'I', 'C', 
    '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '2', '7', '\020', '\033', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', 
    '_', '2', '8', '\020', '\034', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '2', '9', '\020', '\035', '\022', '\020', 
    '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '3', '0', '\020', '\036', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 
    'N', 'U', 'T', 'E', '_', '3', '1', '\020', '\037', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '3', '2', 
    '\020', ' ', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '3', '3', '\020', '!', '\022', '\020', '\n', '\014', 'I', 
    'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '3', '4', '\020', '\"', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 
    'E', '_', '3', '5', '\020', '#', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '3', '6', '\020', '$', '\022', 
    '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '3', '7', '\020', '%', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 
    'I', 'N', 'U', 'T', 'E', '_', '3', '8', '\020', '&', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '3', 
    '9', '\020', '\'', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '4', '0', '\020', '(', '\022', '\020', '\n', '\014', 
    'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '4', '1', '\020', ')', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 
    'T', 'E', '_', '4', '2', '\020', '*', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '4', '3', '\020', '+', 
    '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '4', '4', '\020', ',', '\022', '\020', '\n', '\014', 'I', 'C', '_', 
    'M', 'I', 'N', 'U', 'T', 'E', '_', '4', '5', '\020', '-', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', 
    '4', '6', '\020', '.', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '4', '7', '\020', '/', '\022', '\020', '\n', 
    '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '4', '8', '\020', '0', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 
    'U', 'T', 'E', '_', '4', '9', '\020', '1', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '5', '0', '\020', 
    '2', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '5', '1', '\020', '3', '\022', '\020', '\n', '\014', 'I', 'C', 
    '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '5', '2', '\020', '4', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', 
    '_', '5', '3', '\020', '5', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '5', '4', '\020', '6', '\022', '\020', 
    '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '5', '5', '\020', '7', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 
    'N', 'U', 'T', 'E', '_', '5', '6', '\020', '8', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '5', '7', 
    '\020', '9', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '5', '8', '\020', ':', '\022', '\020', '\n', '\014', 'I', 
    'C', '_', 'M', 'I', 'N', 'U', 'T', 'E', '_', '5', '9', '\020', ';', '\"', '\275', '\010', '\n', '\r', 'I', 'c', '_', 's', 'e', 'c', 'o', 
    'n', 'd', 'T', 'y', 'p', 'e', '\022', '\017', '\n', '\013', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '0', '\020', '\000', '\022', '\017', 
    '\n', '\013', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '1', '\020', '\001', '\022', '\017', '\n', '\013', 'I', 'C', '_', 'S', 'E', 'C', 
    'O', 'N', 'D', '_', '2', '\020', '\002', '\022', '\017', '\n', '\013', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '3', '\020', '\003', '\022', 
    '\017', '\n', '\013', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '4', '\020', '\004', '\022', '\017', '\n', '\013', 'I', 'C', '_', 'S', 'E', 
    'C', 'O', 'N', 'D', '_', '5', '\020', '\005', '\022', '\017', '\n', '\013', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '6', '\020', '\006', 
    '\022', '\017', '\n', '\013', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '7', '\020', '\007', '\022', '\017', '\n', '\013', 'I', 'C', '_', 'S', 
    'E', 'C', 'O', 'N', 'D', '_', '8', '\020', '\010', '\022', '\017', '\n', '\013', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '9', '\020', 
    '\t', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '1', '0', '\020', '\n', '\022', '\020', '\n', '\014', 'I', 'C', 
    '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '1', '1', '\020', '\013', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', 
    '_', '1', '2', '\020', '\014', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '1', '3', '\020', '\r', '\022', '\020', 
    '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '1', '4', '\020', '\016', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 
    'C', 'O', 'N', 'D', '_', '1', '5', '\020', '\017', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '1', '6', 
    '\020', '\020', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '1', '7', '\020', '\021', '\022', '\020', '\n', '\014', 'I', 
    'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '1', '8', '\020', '\022', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 
    'D', '_', '1', '9', '\020', '\023', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '2', '0', '\020', '\024', '\022', 
    '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '2', '1', '\020', '\025', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 
    'E', 'C', 'O', 'N', 'D', '_', '2', '2', '\020', '\026', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '2', 
    '3', '\020', '\027', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '2', '4', '\020', '\030', '\022', '\020', '\n', '\014', 
    'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '2', '5', '\020', '\031', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 
    'N', 'D', '_', '2', '6', '\020', '\032', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '2', '7', '\020', '\033', 
    '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '2', '8', '\020', '\034', '\022', '\020', '\n', '\014', 'I', 'C', '_', 
    'S', 'E', 'C', 'O', 'N', 'D', '_', '2', '9', '\020', '\035', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', 
    '3', '0', '\020', '\036', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '3', '1', '\020', '\037', '\022', '\020', '\n', 
    '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '3', '2', '\020', ' ', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 
    'O', 'N', 'D', '_', '3', '3', '\020', '!', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '3', '4', '\020', 
    '\"', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '3', '5', '\020', '#', '\022', '\020', '\n', '\014', 'I', 'C', 
    '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '3', '6', '\020', '$', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', 
    '_', '3', '7', '\020', '%', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '3', '8', '\020', '&', '\022', '\020', 
    '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '3', '9', '\020', '\'', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 
    'C', 'O', 'N', 'D', '_', '4', '0', '\020', '(', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '4', '1', 
    '\020', ')', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '4', '2', '\020', '*', '\022', '\020', '\n', '\014', 'I', 
    'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '4', '3', '\020', '+', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 
    'D', '_', '4', '4', '\020', ',', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '4', '5', '\020', '-', '\022', 
    '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '4', '6', '\020', '.', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 
    'E', 'C', 'O', 'N', 'D', '_', '4', '7', '\020', '/', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '4', 
    '8', '\020', '0', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '4', '9', '\020', '1', '\022', '\020', '\n', '\014', 
    'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '5', '0', '\020', '2', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 
    'N', 'D', '_', '5', '1', '\020', '3', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '5', '2', '\020', '4', 
    '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '5', '3', '\020', '5', '\022', '\020', '\n', '\014', 'I', 'C', '_', 
    'S', 'E', 'C', 'O', 'N', 'D', '_', '5', '4', '\020', '6', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', 
    '5', '5', '\020', '7', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '5', '6', '\020', '8', '\022', '\020', '\n', 
    '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '5', '7', '\020', '9', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 
    'O', 'N', 'D', '_', '5', '8', '\020', ':', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'S', 'E', 'C', 'O', 'N', 'D', '_', '5', '9', '\020', 
    ';', '\"', 'C', '\n', '\013', 'I', 'c', '_', 'y', 'e', 'a', 'r', 'T', 'y', 'p', 'e', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'Y', 'E', 
    'A', 'R', '_', '2', '0', '1', '9', '\020', '\002', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'Y', 'E', 'A', 'R', '_', '2', '0', '2', '0', 
    '\020', '\003', '\022', '\020', '\n', '\014', 'I', 'C', '_', 'Y', 'E', 'A', 'R', '_', '2', '0', '2', '1', '\020', '\004', '\"', '\317', '\001', '\n', '\r', 
    'A', 'f', 's', '_', '0', 'x', '5', 'a', '0', '_', '5', 'a', '0', '\022', 'E', '\n', '\014', 'a', 'f', 's', '_', 'w', 'o', 'r', 'k', 
    '_', 's', 't', 's', '\030', '\001', ' ', '\001', '(', '\016', '2', '/', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'A', 'f', 's', '_', '0', 'x', '5', 'a', '0', '_', '5', 'a', '0', '.', 'A', 'f', 's', '_', 'w', 'o', 'r', 
    'k', '_', 's', 't', 's', 'T', 'y', 'p', 'e', '\"', 'w', '\n', '\020', 'A', 'f', 's', '_', 'w', 'o', 'r', 'k', '_', 's', 't', 's', 
    'T', 'y', 'p', 'e', '\022', '\024', '\n', '\020', 'A', 'F', 'S', '_', 'W', 'O', 'R', 'K', '_', 'S', 'T', 'S', '_', 'O', 'F', 'F', '\020', 
    '\000', '\022', '\023', '\n', '\017', 'A', 'F', 'S', '_', 'W', 'O', 'R', 'K', '_', 'S', 'T', 'S', '_', 'O', 'N', '\020', '\001', '\022', '\026', '\n', 
    '\022', 'A', 'F', 'S', '_', 'W', 'O', 'R', 'K', '_', 'S', 'T', 'S', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\002', '\022', ' ', '\n', '\034', 
    'A', 'F', 'S', '_', 'W', 'O', 'R', 'K', '_', 'S', 'T', 'S', '_', 'N', 'O', 'T', '_', 'C', 'A', 'L', 'I', 'B', 'R', 'A', 'T', 
    'I', 'O', 'N', '\020', '\003', '\"', '\203', '\006', '\n', '\020', 'S', 'o', 'd', '_', 'n', 'm', '_', '0', 'x', '4', '4', '0', '_', '4', '4', 
    '0', '\022', 'J', '\n', '\r', 's', 'o', 'd', 'n', 'm', 'l', 'i', 'm', 'p', 'h', 'o', 'm', 'e', '\030', '\001', ' ', '\001', '(', '\016', '2', 
    '3', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', 'n', 'm', '_', 
    '0', 'x', '4', '4', '0', '_', '4', '4', '0', '.', 'S', 'o', 'd', 'n', 'm', 'l', 'i', 'm', 'p', 'h', 'o', 'm', 'e', 'T', 'y', 
    'p', 'e', '\022', 'J', '\n', '\r', 's', 'o', 'd', 'n', 'm', 's', 'l', 'e', 'e', 'p', 'i', 'n', 'd', '\030', '\002', ' ', '\001', '(', '\016', 
    '2', '3', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', 'n', 'm', 
    '_', '0', 'x', '4', '4', '0', '_', '4', '4', '0', '.', 'S', 'o', 'd', 'n', 'm', 's', 'l', 'e', 'e', 'p', 'i', 'n', 'd', 'T', 
    'y', 'p', 'e', '\022', 'J', '\n', '\r', 's', 'o', 'd', 'n', 'm', 's', 'l', 'e', 'e', 'p', 'a', 'c', 'k', '\030', '\003', ' ', '\001', '(', 
    '\016', '2', '3', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', 'n', 
    'm', '_', '0', 'x', '4', '4', '0', '_', '4', '4', '0', '.', 'S', 'o', 'd', 'n', 'm', 's', 'l', 'e', 'e', 'p', 'a', 'c', 'k', 
    'T', 'y', 'p', 'e', '\022', '\025', '\n', '\r', 's', 'o', 'd', 'n', 'm', 'd', 'e', 's', 't', 'a', 'd', 'd', 'r', '\030', '\004', ' ', '\001', 
    '(', '\005', '\022', 'D', '\n', '\n', 's', 'o', 'd', 'n', 'm', 'a', 'l', 'i', 'v', 'e', '\030', '\005', ' ', '\001', '(', '\016', '2', '0', '.', 
    'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', 'n', 'm', '_', '0', 'x', 
    '4', '4', '0', '_', '4', '4', '0', '.', 'S', 'o', 'd', 'n', 'm', 'a', 'l', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', 'B', '\n', 
    '\t', 's', 'o', 'd', 'n', 'm', 'r', 'i', 'n', 'g', '\030', '\006', ' ', '\001', '(', '\016', '2', '/', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', 'n', 'm', '_', '0', 'x', '4', '4', '0', '_', '4', '4', 
    '0', '.', 'S', 'o', 'd', 'n', 'm', 'r', 'i', 'n', 'g', 'T', 'y', 'p', 'e', '\"', 'K', '\n', '\021', 'S', 'o', 'd', 'n', 'm', 'l', 
    'i', 'm', 'p', 'h', 'o', 'm', 'e', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'S', 'O', 'D', 'N', 'M', 'L', 'I', 'M', 'P', 'H', 
    'O', 'M', 'E', '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\030', '\n', '\024', 'S', 'O', 'D', 'N', 'M', 
    'L', 'I', 'M', 'P', 'H', 'O', 'M', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', 'K', '\n', '\021', 'S', 'o', 'd', 'n', 
    'm', 's', 'l', 'e', 'e', 'p', 'i', 'n', 'd', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'S', 'O', 'D', 'N', 'M', 'S', 'L', 'E', 
    'E', 'P', 'I', 'N', 'D', '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\030', '\n', '\024', 'S', 'O', 'D', 
    'N', 'M', 'S', 'L', 'E', 'E', 'P', 'I', 'N', 'D', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', 'K', '\n', '\021', 'S', 'o', 
    'd', 'n', 'm', 's', 'l', 'e', 'e', 'p', 'a', 'c', 'k', 'T', 'y', 'p', 'e', '\022', '\034', '\n', '\030', 'S', 'O', 'D', 'N', 'M', 'S', 
    'L', 'E', 'E', 'P', 'A', 'C', 'K', '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\030', '\n', '\024', 'S', 
    'O', 'D', 'N', 'M', 'S', 'L', 'E', 'E', 'P', 'A', 'C', 'K', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', 'B', '\n', '\016', 
    'S', 'o', 'd', 'n', 'm', 'a', 'l', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '\031', '\n', '\025', 'S', 'O', 'D', 'N', 'M', 'A', 'L', 
    'I', 'V', 'E', '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\025', '\n', '\021', 'S', 'O', 'D', 'N', 'M', 
    'A', 'L', 'I', 'V', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', '?', '\n', '\r', 'S', 'o', 'd', 'n', 'm', 'r', 'i', 
    'n', 'g', 'T', 'y', 'p', 'e', '\022', '\030', '\n', '\024', 'S', 'O', 'D', 'N', 'M', 'R', 'I', 'N', 'G', '_', 'N', 'O', 'T', '_', 'A', 
    'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\024', '\n', '\020', 'S', 'O', 'D', 'N', 'M', 'R', 'I', 'N', 'G', '_', 'A', 'C', 'T', 'I', 
    'V', 'E', '\020', '\001', '\"', '\343', '\005', '\n', '\017', 'G', 'w', '_', 'n', 'm', '_', '0', 'x', '4', '6', '0', '_', '4', '6', '0', '\022', 
    'G', '\n', '\014', 'g', 'w', 'n', 'm', 'l', 'i', 'm', 'p', 'h', 'o', 'm', 'e', '\030', '\001', ' ', '\001', '(', '\016', '2', '1', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'n', 'm', '_', '0', 'x', '4', '6', 
    '0', '_', '4', '6', '0', '.', 'G', 'w', 'n', 'm', 'l', 'i', 'm', 'p', 'h', 'o', 'm', 'e', 'T', 'y', 'p', 'e', '\022', 'G', '\n', 
    '\014', 'g', 'w', 'n', 'm', 's', 'l', 'e', 'e', 'p', 'i', 'n', 'd', '\030', '\002', ' ', '\001', '(', '\016', '2', '1', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'n', 'm', '_', '0', 'x', '4', '6', '0', '_', 
    '4', '6', '0', '.', 'G', 'w', 'n', 'm', 's', 'l', 'e', 'e', 'p', 'i', 'n', 'd', 'T', 'y', 'p', 'e', '\022', 'G', '\n', '\014', 'g', 
    'w', 'n', 'm', 's', 'l', 'e', 'e', 'p', 'a', 'c', 'k', '\030', '\003', ' ', '\001', '(', '\016', '2', '1', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'n', 'm', '_', '0', 'x', '4', '6', '0', '_', '4', '6', 
    '0', '.', 'G', 'w', 'n', 'm', 's', 'l', 'e', 'e', 'p', 'a', 'c', 'k', 'T', 'y', 'p', 'e', '\022', '\024', '\n', '\014', 'g', 'w', 'n', 
    'm', 'd', 'e', 's', 't', 'a', 'd', 'd', 'r', '\030', '\004', ' ', '\001', '(', '\005', '\022', 'A', '\n', '\t', 'g', 'w', 'n', 'm', 'a', 'l', 
    'i', 'v', 'e', '\030', '\005', ' ', '\001', '(', '\016', '2', '.', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'G', 'w', '_', 'n', 'm', '_', '0', 'x', '4', '6', '0', '_', '4', '6', '0', '.', 'G', 'w', 'n', 'm', 'a', 'l', 
    'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '?', '\n', '\010', 'g', 'w', 'n', 'm', 'r', 'i', 'n', 'g', '\030', '\006', ' ', '\001', '(', '\016', 
    '2', '-', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'n', 'm', '_', 
    '0', 'x', '4', '6', '0', '_', '4', '6', '0', '.', 'G', 'w', 'n', 'm', 'r', 'i', 'n', 'g', 'T', 'y', 'p', 'e', '\"', 'H', '\n', 
    '\020', 'G', 'w', 'n', 'm', 'l', 'i', 'm', 'p', 'h', 'o', 'm', 'e', 'T', 'y', 'p', 'e', '\022', '\033', '\n', '\027', 'G', 'W', 'N', 'M', 
    'L', 'I', 'M', 'P', 'H', 'O', 'M', 'E', '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\027', '\n', '\023', 
    'G', 'W', 'N', 'M', 'L', 'I', 'M', 'P', 'H', 'O', 'M', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', 'H', '\n', '\020', 
    'G', 'w', 'n', 'm', 's', 'l', 'e', 'e', 'p', 'i', 'n', 'd', 'T', 'y', 'p', 'e', '\022', '\033', '\n', '\027', 'G', 'W', 'N', 'M', 'S', 
    'L', 'E', 'E', 'P', 'I', 'N', 'D', '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\027', '\n', '\023', 'G', 
    'W', 'N', 'M', 'S', 'L', 'E', 'E', 'P', 'I', 'N', 'D', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', 'H', '\n', '\020', 'G', 
    'w', 'n', 'm', 's', 'l', 'e', 'e', 'p', 'a', 'c', 'k', 'T', 'y', 'p', 'e', '\022', '\033', '\n', '\027', 'G', 'W', 'N', 'M', 'S', 'L', 
    'E', 'E', 'P', 'A', 'C', 'K', '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\027', '\n', '\023', 'G', 'W', 
    'N', 'M', 'S', 'L', 'E', 'E', 'P', 'A', 'C', 'K', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', '?', '\n', '\r', 'G', 'w', 
    'n', 'm', 'a', 'l', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', '\030', '\n', '\024', 'G', 'W', 'N', 'M', 'A', 'L', 'I', 'V', 'E', '_', 
    'N', 'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\024', '\n', '\020', 'G', 'W', 'N', 'M', 'A', 'L', 'I', 'V', 'E', 
    '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', '<', '\n', '\014', 'G', 'w', 'n', 'm', 'r', 'i', 'n', 'g', 'T', 'y', 'p', 'e', 
    '\022', '\027', '\n', '\023', 'G', 'W', 'N', 'M', 'R', 'I', 'N', 'G', '_', 'N', 'O', 'T', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', 
    '\022', '\023', '\n', '\017', 'G', 'W', 'N', 'M', 'R', 'I', 'N', 'G', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', '\257', '\033', '\n', 
    '\r', 'E', 'p', 's', '_', '0', 'x', '2', '6', '0', '_', '2', '6', '0', '\022', ']', '\n', '\030', 'e', 'p', 's', '_', 's', 'a', 's', 
    's', 'o', 'f', 't', 'l', 'i', 'm', 'i', 't', 'r', 'i', 'g', 'h', 't', 'f', 'l', 'g', '\030', '\001', ' ', '\001', '(', '\016', '2', ';', 
    '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 'p', 's', '_', '0', 'x', '2', '6', 
    '0', '_', '2', '6', '0', '.', 'E', 'p', 's', '_', 's', 'a', 's', 's', 'o', 'f', 't', 'l', 'i', 'm', 'i', 't', 'r', 'i', 'g', 
    'h', 't', 'f', 'l', 'g', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\016', 'e', 'p', 's', '_', 'n', '_', 'l', 'o', 'a', 'd', 'i', 'n', 
    'f', 'o', '\030', '\002', ' ', '\001', '(', '\005', '\022', 'a', '\n', '\032', 'e', 'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 'g', 'e', 
    'n', 'c', 'y', 'p', 'o', 'w', 'e', 'r', 'l', 'i', 'm', 'i', 't', '\030', '\003', ' ', '\001', '(', '\016', '2', '=', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 'p', 's', '_', '0', 'x', '2', '6', '0', '_', '2', '6', 
    '0', '.', 'E', 'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 'p', 'o', 'w', 'e', 'r', 'l', 'i', 
    'm', 'i', 't', 'T', 'y', 'p', 'e', '\022', 'W', '\n', '\025', 'e', 'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 'g', 'e', 'n', 
    'c', 'y', 'm', 'o', 't', 'o', 'r', '\030', '\004', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 'p', 's', '_', '0', 'x', '2', '6', '0', '_', '2', '6', '0', '.', 'E', 'p', 's', '_', 
    's', 't', '_', 'e', 'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 'm', 'o', 't', 'o', 'r', 'T', 'y', 'p', 'e', '\022', 'S', '\n', '\023', 
    'e', 'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 'e', 'c', 'u', '\030', '\005', ' ', '\001', '(', '\016', 
    '2', '6', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 'p', 's', '_', '0', 'x', 
    '2', '6', '0', '_', '2', '6', '0', '.', 'E', 'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 'e', 
    'c', 'u', 'T', 'y', 'p', 'e', '\022', 'e', '\n', '\034', 'e', 'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 'g', 'e', 'n', 'c', 
    'y', 'c', 'a', 'n', 'i', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', '\030', '\006', ' ', '\001', '(', '\016', '2', '?', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 'p', 's', '_', '0', 'x', '2', '6', '0', '_', '2', '6', 
    '0', '.', 'E', 'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 'c', 'a', 'n', 'i', 'n', 't', 'e', 
    'r', 'f', 'a', 'c', 'e', 'T', 'y', 'p', 'e', '\022', 'Y', '\n', '\026', 'e', 'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 'g', 
    'e', 'n', 'c', 'y', 's', 'e', 'n', 's', 'o', 'r', '\030', '\007', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 'p', 's', '_', '0', 'x', '2', '6', '0', '_', '2', '6', '0', '.', 'E', 
    'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 's', 'e', 'n', 's', 'o', 'r', 'T', 'y', 'p', 'e', 
    '\022', ']', '\n', '\030', 'e', 'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 'o', 'v', 'e', 'r', 't', 
    'e', 'm', 'p', '\030', '\010', ' ', '\001', '(', '\016', '2', ';', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'E', 'p', 's', '_', '0', 'x', '2', '6', '0', '_', '2', '6', '0', '.', 'E', 'p', 's', '_', 's', 't', '_', 'e', 
    'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 'o', 'v', 'e', 'r', 't', 'e', 'm', 'p', 'T', 'y', 'p', 'e', '\022', 'c', '\n', '\033', 'e', 
    'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 'o', 'v', 'e', 'r', 'v', 'o', 'l', 't', 'a', 'g', 
    'e', '\030', '\t', ' ', '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'E', 'p', 's', '_', '0', 'x', '2', '6', '0', '_', '2', '6', '0', '.', 'E', 'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 
    'r', 'g', 'e', 'n', 'c', 'y', 'o', 'v', 'e', 'r', 'v', 'o', 'l', 't', 'a', 'g', 'e', 'T', 'y', 'p', 'e', '\022', 'e', '\n', '\034', 
    'e', 'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 'u', 'n', 'd', 'e', 'r', 'v', 'o', 'l', 't', 
    'a', 'g', 'e', '\030', '\n', ' ', '\001', '(', '\016', '2', '?', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'E', 'p', 's', '_', '0', 'x', '2', '6', '0', '_', '2', '6', '0', '.', 'E', 'p', 's', '_', 's', 't', '_', 'e', 
    'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 'u', 'n', 'd', 'e', 'r', 'v', 'o', 'l', 't', 'a', 'g', 'e', 'T', 'y', 'p', 'e', '\022', 
    'Q', '\n', '\022', 'e', 'p', 's', '_', 'f', '_', 'e', 'c', 'u', 't', 'e', 'm', 'p', 'v', 'a', 'l', 'i', 'd', '\030', '\013', ' ', '\001', 
    '(', '\016', '2', '5', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 'p', 's', '_', 
    '0', 'x', '2', '6', '0', '_', '2', '6', '0', '.', 'E', 'p', 's', '_', 'f', '_', 'e', 'c', 'u', 't', 'e', 'm', 'p', 'v', 'a', 
    'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', '[', '\n', '\027', 'e', 'p', 's', '_', 's', 'a', 's', 's', 'o', 'f', 't', 'l', 'i', 'm', 
    'i', 't', 'l', 'e', 'f', 't', 'f', 'l', 'g', '\030', '\014', ' ', '\001', '(', '\016', '2', ':', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 'p', 's', '_', '0', 'x', '2', '6', '0', '_', '2', '6', '0', '.', 'E', 'p', 
    's', '_', 's', 'a', 's', 's', 'o', 'f', 't', 'l', 'i', 'm', 'i', 't', 'l', 'e', 'f', 't', 'f', 'l', 'g', 'T', 'y', 'p', 'e', 
    '\022', '\025', '\n', '\r', 'e', 'p', 's', '_', 'n', '_', 'e', 'c', 'u', 't', 'e', 'm', 'p', '\030', '\r', ' ', '\001', '(', '\005', '\022', '\035', 
    '\n', '\025', 'e', 'p', 's', '_', 'n', '_', 'p', 'e', 'r', 'f', 'o', 'r', 'm', 'a', 'n', 'c', 'e', 'r', 'e', 'd', 'u', '\030', '\016', 
    ' ', '\001', '(', '\001', '\022', 'I', '\n', '\016', 'e', 'p', 's', '_', 's', 't', '_', 'd', 't', 'c', 'f', 'l', 'a', 'g', '\030', '\017', ' ', 
    '\001', '(', '\016', '2', '1', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 'p', 's', 
    '_', '0', 'x', '2', '6', '0', '_', '2', '6', '0', '.', 'E', 'p', 's', '_', 's', 't', '_', 'd', 't', 'c', 'f', 'l', 'a', 'g', 
    'T', 'y', 'p', 'e', '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 
    'x', '2', '6', '0', '\030', '\020', ' ', '\001', '(', '\005', '\022', 'K', '\n', '\017', 'e', 'p', 's', '_', 's', 'a', 's', 'i', 'n', 'd', 'e', 
    'x', 's', 't', 's', '\030', '\021', ' ', '\001', '(', '\016', '2', '2', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'E', 'p', 's', '_', '0', 'x', '2', '6', '0', '_', '2', '6', '0', '.', 'E', 'p', 's', '_', 's', 'a', 's', 
    'i', 'n', 'd', 'e', 'x', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '[', '\n', '\027', 'e', 'p', 's', '_', 's', '_', 'w', 'a', 'r', 
    'n', 'i', 'n', 'g', 'l', 'a', 'm', 'p', 'y', 'e', 'l', 'l', 'o', 'w', '\030', '\022', ' ', '\001', '(', '\016', '2', ':', '.', 'j', 'm', 
    'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 'p', 's', '_', '0', 'x', '2', '6', '0', '_', '2', 
    '6', '0', '.', 'E', 'p', 's', '_', 's', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'l', 'a', 'm', 'p', 'y', 'e', 'l', 'l', 'o', 
    'w', 'T', 'y', 'p', 'e', '\022', '\026', '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '2', '6', '0', '\030', '\023', 
    ' ', '\001', '(', '\005', '\022', 'O', '\n', '\021', 'e', 'p', 's', '_', 's', '_', 's', 'a', 'f', 'e', 'l', 'a', 'm', 'p', 'r', 'e', 'd', 
    '\030', '\024', ' ', '\001', '(', '\016', '2', '4', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 
    'E', 'p', 's', '_', '0', 'x', '2', '6', '0', '_', '2', '6', '0', '.', 'E', 'p', 's', '_', 's', '_', 's', 'a', 'f', 'e', 'l', 
    'a', 'm', 'p', 'r', 'e', 'd', 'T', 'y', 'p', 'e', '\022', 'I', '\n', '\016', 'e', 'p', 's', '_', 'f', '_', 'l', 'o', 'a', 'd', 'i', 
    'n', 'f', 'o', '\030', '\025', ' ', '\001', '(', '\016', '2', '1', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'E', 'p', 's', '_', '0', 'x', '2', '6', '0', '_', '2', '6', '0', '.', 'E', 'p', 's', '_', 'f', '_', 'l', 'o', 
    'a', 'd', 'i', 'n', 'f', 'o', 'T', 'y', 'p', 'e', '\"', '\320', '\001', '\n', '\034', 'E', 'p', 's', '_', 's', 'a', 's', 's', 'o', 'f', 
    't', 'l', 'i', 'm', 'i', 't', 'r', 'i', 'g', 'h', 't', 'f', 'l', 'g', 'T', 'y', 'p', 'e', '\022', '\'', '\n', '#', 'E', 'P', 'S', 
    '_', 'S', 'A', 'S', 'S', 'O', 'F', 'T', 'L', 'I', 'M', 'I', 'T', 'R', 'I', 'G', 'H', 'T', 'F', 'L', 'G', '_', 'N', 'O', '_', 
    'L', 'E', 'A', 'R', 'N', 'E', 'D', '\020', '\000', '\022', ':', '\n', '6', 'E', 'P', 'S', '_', 'S', 'A', 'S', 'S', 'O', 'F', 'T', 'L', 
    'I', 'M', 'I', 'T', 'R', 'I', 'G', 'H', 'T', 'F', 'L', 'G', '_', 'P', 'R', 'I', 'M', 'A', 'R', 'Y', '_', 'L', 'E', 'A', 'R', 
    'N', 'E', 'D', '_', 'O', 'N', 'L', 'Y', '_', 'F', 'O', 'R', '_', 'C', 'E', 'P', 'S', '\020', '\001', '\022', '$', '\n', ' ', 'E', 'P', 
    'S', '_', 'S', 'A', 'S', 'S', 'O', 'F', 'T', 'L', 'I', 'M', 'I', 'T', 'R', 'I', 'G', 'H', 'T', 'F', 'L', 'G', '_', 'L', 'E', 
    'A', 'R', 'N', 'E', 'D', '\020', '\002', '\022', '%', '\n', '!', 'E', 'P', 'S', '_', 'S', 'A', 'S', 'S', 'O', 'F', 'T', 'L', 'I', 'M', 
    'I', 'T', 'R', 'I', 'G', 'H', 'T', 'F', 'L', 'G', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '{', '\n', '\036', 
    'E', 'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 'p', 'o', 'w', 'e', 'r', 'l', 'i', 'm', 'i', 
    't', 'T', 'y', 'p', 'e', '\022', '%', '\n', '!', 'E', 'P', 'S', '_', 'S', 'T', '_', 'E', 'M', 'E', 'R', 'G', 'E', 'N', 'C', 'Y', 
    'P', 'O', 'W', 'E', 'R', 'L', 'I', 'M', 'I', 'T', '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\000', '\022', '2', '\n', '.', 'E', 'P', 
    'S', '_', 'S', 'T', '_', 'E', 'M', 'E', 'R', 'G', 'E', 'N', 'C', 'Y', 'P', 'O', 'W', 'E', 'R', 'L', 'I', 'M', 'I', 'T', '_', 
    'P', 'O', 'W', 'E', 'R', '_', 'D', 'E', 'N', 'S', 'I', 'T', 'Y', '_', 'L', 'I', 'M', 'I', 'T', '\020', '\001', '\"', 'j', '\n', '\031', 
    'E', 'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 'm', 'o', 't', 'o', 'r', 'T', 'y', 'p', 'e', 
    '\022', ' ', '\n', '\034', 'E', 'P', 'S', '_', 'S', 'T', '_', 'E', 'M', 'E', 'R', 'G', 'E', 'N', 'C', 'Y', 'M', 'O', 'T', 'O', 'R', 
    '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\000', '\022', '+', '\n', '\'', 'E', 'P', 'S', '_', 'S', 'T', '_', 'E', 'M', 'E', 'R', 'G', 
    'E', 'N', 'C', 'Y', 'M', 'O', 'T', 'O', 'R', '_', 'S', 'E', 'R', 'V', 'O', '_', 'M', 'O', 'T', 'O', 'R', '_', 'F', 'A', 'U', 
    'L', 'T', '\020', '\001', '\"', 'b', '\n', '\027', 'E', 'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 'e', 
    'c', 'u', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'E', 'P', 'S', '_', 'S', 'T', '_', 'E', 'M', 'E', 'R', 'G', 'E', 'N', 'C', 
    'Y', 'E', 'C', 'U', '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\000', '\022', '\'', '\n', '#', 'E', 'P', 'S', '_', 'S', 'T', '_', 'E', 
    'M', 'E', 'R', 'G', 'E', 'N', 'C', 'Y', 'E', 'C', 'U', '_', 'E', 'C', 'U', '_', 'I', 'N', 'N', 'E', 'R', '_', 'F', 'A', 'U', 
    'L', 'T', '\020', '\001', '\"', '\204', '\001', '\n', ' ', 'E', 'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 
    'c', 'a', 'n', 'i', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', 'T', 'y', 'p', 'e', '\022', '\'', '\n', '#', 'E', 'P', 'S', '_', 'S', 
    'T', '_', 'E', 'M', 'E', 'R', 'G', 'E', 'N', 'C', 'Y', 'C', 'A', 'N', 'I', 'N', 'T', 'E', 'R', 'F', 'A', 'C', 'E', '_', 'N', 
    'O', 'R', 'M', 'A', 'L', '\020', '\000', '\022', '7', '\n', '3', 'E', 'P', 'S', '_', 'S', 'T', '_', 'E', 'M', 'E', 'R', 'G', 'E', 'N', 
    'C', 'Y', 'C', 'A', 'N', 'I', 'N', 'T', 'E', 'R', 'F', 'A', 'C', 'E', '_', 'C', 'A', 'N', '_', 'I', 'N', 'T', 'E', 'R', 'F', 
    'A', 'C', 'E', '_', 'I', 'S', '_', 'F', 'A', 'U', 'L', 'T', '\020', '\001', '\"', 'k', '\n', '\032', 'E', 'p', 's', '_', 's', 't', '_', 
    'e', 'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 's', 'e', 'n', 's', 'o', 'r', 'T', 'y', 'p', 'e', '\022', '!', '\n', '\035', 'E', 'P', 
    'S', '_', 'S', 'T', '_', 'E', 'M', 'E', 'R', 'G', 'E', 'N', 'C', 'Y', 'S', 'E', 'N', 'S', 'O', 'R', '_', 'N', 'O', 'R', 'M', 
    'A', 'L', '\020', '\000', '\022', '*', '\n', '&', 'E', 'P', 'S', '_', 'S', 'T', '_', 'E', 'M', 'E', 'R', 'G', 'E', 'N', 'C', 'Y', 'S', 
    'E', 'N', 'S', 'O', 'R', '_', 'S', 'E', 'N', 'S', 'O', 'R', '_', 'I', 'S', '_', 'F', 'A', 'U', 'L', 'T', '\020', '\001', '\"', 'r', 
    '\n', '\034', 'E', 'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 'o', 'v', 'e', 'r', 't', 'e', 'm', 
    'p', 'T', 'y', 'p', 'e', '\022', '#', '\n', '\037', 'E', 'P', 'S', '_', 'S', 'T', '_', 'E', 'M', 'E', 'R', 'G', 'E', 'N', 'C', 'Y', 
    'O', 'V', 'E', 'R', 'T', 'E', 'M', 'P', '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\000', '\022', '-', '\n', ')', 'E', 'P', 'S', '_', 
    'S', 'T', '_', 'E', 'M', 'E', 'R', 'G', 'E', 'N', 'C', 'Y', 'O', 'V', 'E', 'R', 'T', 'E', 'M', 'P', '_', 'O', 'V', 'E', 'R', 
    '_', 'T', 'E', 'M', 'P', 'E', 'R', 'A', 'T', 'U', 'R', 'E', '\020', '\001', '\"', 'w', '\n', '\037', 'E', 'p', 's', '_', 's', 't', '_', 
    'e', 'm', 'e', 'r', 'g', 'e', 'n', 'c', 'y', 'o', 'v', 'e', 'r', 'v', 'o', 'l', 't', 'a', 'g', 'e', 'T', 'y', 'p', 'e', '\022', 
    '&', '\n', '\"', 'E', 'P', 'S', '_', 'S', 'T', '_', 'E', 'M', 'E', 'R', 'G', 'E', 'N', 'C', 'Y', 'O', 'V', 'E', 'R', 'V', 'O', 
    'L', 'T', 'A', 'G', 'E', '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\000', '\022', ',', '\n', '(', 'E', 'P', 'S', '_', 'S', 'T', '_', 
    'E', 'M', 'E', 'R', 'G', 'E', 'N', 'C', 'Y', 'O', 'V', 'E', 'R', 'V', 'O', 'L', 'T', 'A', 'G', 'E', '_', 'O', 'V', 'E', 'R', 
    '_', 'V', 'O', 'L', 'T', 'A', 'G', 'E', '\020', '\001', '\"', '{', '\n', ' ', 'E', 'p', 's', '_', 's', 't', '_', 'e', 'm', 'e', 'r', 
    'g', 'e', 'n', 'c', 'y', 'u', 'n', 'd', 'e', 'r', 'v', 'o', 'l', 't', 'a', 'g', 'e', 'T', 'y', 'p', 'e', '\022', '\'', '\n', '#', 
    'E', 'P', 'S', '_', 'S', 'T', '_', 'E', 'M', 'E', 'R', 'G', 'E', 'N', 'C', 'Y', 'U', 'N', 'D', 'E', 'R', 'V', 'O', 'L', 'T', 
    'A', 'G', 'E', '_', 'N', 'O', 'R', 'M', 'A', 'L', '\020', '\000', '\022', '.', '\n', '*', 'E', 'P', 'S', '_', 'S', 'T', '_', 'E', 'M', 
    'E', 'R', 'G', 'E', 'N', 'C', 'Y', 'U', 'N', 'D', 'E', 'R', 'V', 'O', 'L', 'T', 'A', 'G', 'E', '_', 'U', 'N', 'D', 'E', 'R', 
    '_', 'V', 'O', 'L', 'T', 'A', 'G', 'E', '\020', '\001', '\"', 'V', '\n', '\026', 'E', 'p', 's', '_', 'f', '_', 'e', 'c', 'u', 't', 'e', 
    'm', 'p', 'v', 'a', 'l', 'i', 'd', 'T', 'y', 'p', 'e', '\022', '\036', '\n', '\032', 'E', 'P', 'S', '_', 'F', '_', 'E', 'C', 'U', 'T', 
    'E', 'M', 'P', 'V', 'A', 'L', 'I', 'D', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', '\020', '\000', '\022', '\034', '\n', '\030', 'E', 'P', 'S', 
    '_', 'F', '_', 'E', 'C', 'U', 'T', 'E', 'M', 'P', 'V', 'A', 'L', 'I', 'D', '_', 'V', 'A', 'L', 'I', 'D', '\020', '\001', '\"', '\313', 
    '\001', '\n', '\033', 'E', 'p', 's', '_', 's', 'a', 's', 's', 'o', 'f', 't', 'l', 'i', 'm', 'i', 't', 'l', 'e', 'f', 't', 'f', 'l', 
    'g', 'T', 'y', 'p', 'e', '\022', '&', '\n', '\"', 'E', 'P', 'S', '_', 'S', 'A', 'S', 'S', 'O', 'F', 'T', 'L', 'I', 'M', 'I', 'T', 
    'L', 'E', 'F', 'T', 'F', 'L', 'G', '_', 'N', 'O', '_', 'L', 'E', 'A', 'R', 'N', 'E', 'D', '\020', '\000', '\022', '9', '\n', '5', 'E', 
    'P', 'S', '_', 'S', 'A', 'S', 'S', 'O', 'F', 'T', 'L', 'I', 'M', 'I', 'T', 'L', 'E', 'F', 'T', 'F', 'L', 'G', '_', 'P', 'R', 
    'I', 'M', 'A', 'R', 'Y', '_', 'L', 'E', 'A', 'R', 'N', 'E', 'D', '_', 'O', 'N', 'L', 'Y', '_', 'F', 'O', 'R', '_', 'C', 'E', 
    'P', 'S', '\020', '\001', '\022', '#', '\n', '\037', 'E', 'P', 'S', '_', 'S', 'A', 'S', 'S', 'O', 'F', 'T', 'L', 'I', 'M', 'I', 'T', 'L', 
    'E', 'F', 'T', 'F', 'L', 'G', '_', 'L', 'E', 'A', 'R', 'N', 'E', 'D', '\020', '\002', '\022', '$', '\n', ' ', 'E', 'P', 'S', '_', 'S', 
    'A', 'S', 'S', 'O', 'F', 'T', 'L', 'I', 'M', 'I', 'T', 'L', 'E', 'F', 'T', 'F', 'L', 'G', '_', 'R', 'E', 'S', 'E', 'R', 'V', 
    'E', 'D', '\020', '\003', '\"', 'S', '\n', '\022', 'E', 'p', 's', '_', 's', 't', '_', 'd', 't', 'c', 'f', 'l', 'a', 'g', 'T', 'y', 'p', 
    'e', '\022', '\037', '\n', '\033', 'E', 'P', 'S', '_', 'S', 'T', '_', 'D', 'T', 'C', 'F', 'L', 'A', 'G', '_', 'N', 'O', '_', 'D', 'T', 
    'C', '_', 'E', 'X', 'I', 'S', 'T', '\020', '\000', '\022', '\034', '\n', '\030', 'E', 'P', 'S', '_', 'S', 'T', '_', 'D', 'T', 'C', 'F', 'L', 
    'A', 'G', '_', 'D', 'T', 'C', '_', 'E', 'X', 'I', 'S', 'T', '\020', '\001', '\"', '\177', '\n', '\023', 'E', 'p', 's', '_', 's', 'a', 's', 
    'i', 'n', 'd', 'e', 'x', 's', 't', 's', 'T', 'y', 'p', 'e', '\022', '5', '\n', '1', 'E', 'P', 'S', '_', 'S', 'A', 'S', 'I', 'N', 
    'D', 'E', 'X', 'S', 'T', 'S', '_', 'S', 'T', 'E', 'E', 'R', 'W', 'H', 'E', 'E', 'L', '_', 'N', 'O', 'T', '_', 'A', 'T', '_', 
    'M', 'I', 'D', 'D', 'L', 'E', '_', 'P', 'O', 'S', 'I', 'T', 'I', 'O', 'N', '\020', '\000', '\022', '1', '\n', '-', 'E', 'P', 'S', '_', 
    'S', 'A', 'S', 'I', 'N', 'D', 'E', 'X', 'S', 'T', 'S', '_', 'S', 'T', 'E', 'E', 'R', 'W', 'H', 'E', 'E', 'L', '_', 'A', 'T', 
    '_', 'M', 'I', 'D', 'D', 'L', 'E', '_', 'P', 'O', 'S', 'I', 'T', 'I', 'O', 'N', '\020', '\001', '\"', 'b', '\n', '\033', 'E', 'p', 's', 
    '_', 's', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'l', 'a', 'm', 'p', 'y', 'e', 'l', 'l', 'o', 'w', 'T', 'y', 'p', 'e', '\022', 
    '!', '\n', '\035', 'E', 'P', 'S', '_', 'S', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'L', 'A', 'M', 'P', 'Y', 'E', 'L', 'L', 'O', 
    'W', '_', 'C', 'L', 'O', 'S', 'E', '\020', '\000', '\022', ' ', '\n', '\034', 'E', 'P', 'S', '_', 'S', '_', 'W', 'A', 'R', 'N', 'I', 'N', 
    'G', 'L', 'A', 'M', 'P', 'Y', 'E', 'L', 'L', 'O', 'W', '_', 'O', 'P', 'E', 'N', '\020', '\001', '\"', 'P', '\n', '\025', 'E', 'p', 's', 
    '_', 's', '_', 's', 'a', 'f', 'e', 'l', 'a', 'm', 'p', 'r', 'e', 'd', 'T', 'y', 'p', 'e', '\022', '\033', '\n', '\027', 'E', 'P', 'S', 
    '_', 'S', '_', 'S', 'A', 'F', 'E', 'L', 'A', 'M', 'P', 'R', 'E', 'D', '_', 'C', 'L', 'O', 'S', 'E', '\020', '\000', '\022', '\032', '\n', 
    '\026', 'E', 'P', 'S', '_', 'S', '_', 'S', 'A', 'F', 'E', 'L', 'A', 'M', 'P', 'R', 'E', 'D', '_', 'O', 'P', 'E', 'N', '\020', '\001', 
    '\"', 'K', '\n', '\022', 'E', 'p', 's', '_', 'f', '_', 'l', 'o', 'a', 'd', 'i', 'n', 'f', 'o', 'T', 'y', 'p', 'e', '\022', '\033', '\n', 
    '\027', 'E', 'P', 'S', '_', 'F', '_', 'L', 'O', 'A', 'D', 'I', 'N', 'F', 'O', '_', 'N', 'O', '_', 'F', 'A', 'U', 'L', 'T', '\020', 
    '\000', '\022', '\030', '\n', '\024', 'E', 'P', 'S', '_', 'F', '_', 'L', 'O', 'A', 'D', 'I', 'N', 'F', 'O', '_', 'F', 'A', 'U', 'L', 'T', 
    '\020', '\001', '\"', '\363', ' ', '\n', '\r', 'S', 'o', 'd', '_', '0', 'x', '2', '7', '5', '_', '2', '7', '5', '\022', '[', '\n', '\027', 's', 
    'o', 'd', '_', 'l', 'c', 'a', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'r', 'e', 'q', 'r', 'i', 'g', 'h', 't', '\030', '\001', ' ', 
    '\001', '(', '\016', '2', ':', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', 
    '_', '0', 'x', '2', '7', '5', '_', '2', '7', '5', '.', 'S', 'o', 'd', '_', 'l', 'c', 'a', '_', 'w', 'a', 'r', 'n', 'i', 'n', 
    'g', 'r', 'e', 'q', 'r', 'i', 'g', 'h', 't', 'T', 'y', 'p', 'e', '\022', 'K', '\n', '\017', 's', 'o', 'd', '_', 'b', 'l', 'i', 's', 
    '_', 'a', 'c', 't', 'i', 'v', 'e', '\030', '\002', ' ', '\001', '(', '\016', '2', '2', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', '0', 'x', '2', '7', '5', '_', '2', '7', '5', '.', 'S', 'o', 'd', '_', 
    'b', 'l', 'i', 's', '_', 'a', 'c', 't', 'i', 'v', 'e', 'T', 'y', 'p', 'e', '\022', 'M', '\n', '\020', 's', 'o', 'd', '_', 'b', 'l', 
    'i', 's', '_', 'd', 'i', 's', 'p', 'l', 'a', 'y', '\030', '\003', ' ', '\001', '(', '\016', '2', '3', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', '0', 'x', '2', '7', '5', '_', '2', '7', '5', '.', 'S', 
    'o', 'd', '_', 'b', 'l', 'i', 's', '_', 'd', 'i', 's', 'p', 'l', 'a', 'y', 'T', 'y', 'p', 'e', '\022', 'Y', '\n', '\026', 's', 'o', 
    'd', '_', 'l', 'c', 'a', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'r', 'e', 'q', 'l', 'e', 'f', 't', '\030', '\004', ' ', '\001', '(', 
    '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', '0', 
    'x', '2', '7', '5', '_', '2', '7', '5', '.', 'S', 'o', 'd', '_', 'l', 'c', 'a', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'r', 
    'e', 'q', 'l', 'e', 'f', 't', 'T', 'y', 'p', 'e', '\022', 'a', '\n', '\032', 's', 'o', 'd', '_', 'd', 'o', 'a', '_', 'w', 'a', 'r', 
    'n', 'i', 'n', 'g', 'r', 'e', 'q', 'l', 'e', 'f', 't', 'r', 'e', 'a', 'r', '\030', '\005', ' ', '\001', '(', '\016', '2', '=', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', '0', 'x', '2', '7', '5', '_', 
    '2', '7', '5', '.', 'S', 'o', 'd', '_', 'd', 'o', 'a', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'r', 'e', 'q', 'l', 'e', 'f', 
    't', 'r', 'e', 'a', 'r', 'T', 'y', 'p', 'e', '\022', 'c', '\n', '\033', 's', 'o', 'd', '_', 'd', 'o', 'a', '_', 'w', 'a', 'r', 'n', 
    'i', 'n', 'g', 'r', 'e', 'q', 'l', 'e', 'f', 't', 'f', 'r', 'o', 'n', 't', '\030', '\006', ' ', '\001', '(', '\016', '2', '>', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', '0', 'x', '2', '7', '5', '_', 
    '2', '7', '5', '.', 'S', 'o', 'd', '_', 'd', 'o', 'a', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'r', 'e', 'q', 'l', 'e', 'f', 
    't', 'f', 'r', 'o', 'n', 't', 'T', 'y', 'p', 'e', '\022', 'Y', '\n', '\026', 's', 'o', 'd', '_', 'c', 't', 'a', '_', 'w', 'a', 'r', 
    'n', 'i', 'n', 'g', 'r', 'e', 'q', 'l', 'e', 'f', 't', '\030', '\007', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', '0', 'x', '2', '7', '5', '_', '2', '7', '5', '.', 
    'S', 'o', 'd', '_', 'c', 't', 'a', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'r', 'e', 'q', 'l', 'e', 'f', 't', 'T', 'y', 'p', 
    'e', '\022', 'G', '\n', '\r', 's', 'o', 'd', '_', 'd', 'o', 'a', '_', 's', 't', 'a', 't', 'e', '\030', '\010', ' ', '\001', '(', '\016', '2', 
    '0', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', '0', 'x', '2', 
    '7', '5', '_', '2', '7', '5', '.', 'S', 'o', 'd', '_', 'd', 'o', 'a', '_', 's', 't', 'a', 't', 'e', 'T', 'y', 'p', 'e', '\022', 
    'G', '\n', '\r', 's', 'o', 'd', '_', 'c', 't', 'a', '_', 's', 't', 'a', 't', 'e', '\030', '\t', ' ', '\001', '(', '\016', '2', '0', '.', 
    'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', '0', 'x', '2', '7', '5', 
    '_', '2', '7', '5', '.', 'S', 'o', 'd', '_', 'c', 't', 'a', '_', 's', 't', 'a', 't', 'e', 'T', 'y', 'p', 'e', '\022', 'M', '\n', 
    '\020', 's', 'o', 'd', '_', 's', 'o', 'd', 'l', 'c', 'a', '_', 's', 't', 'a', 't', 'e', '\030', '\n', ' ', '\001', '(', '\016', '2', '3', 
    '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', '0', 'x', '2', '7', 
    '5', '_', '2', '7', '5', '.', 'S', 'o', 'd', '_', 's', 'o', 'd', 'l', 'c', 'a', '_', 's', 't', 'a', 't', 'e', 'T', 'y', 'p', 
    'e', '\022', 'K', '\n', '\017', 'd', 'o', 'a', '_', 'o', 'f', 'f', 't', 'e', 'l', 'l', 't', 'a', 'l', 'e', '\030', '\013', ' ', '\001', '(', 
    '\016', '2', '2', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', '0', 
    'x', '2', '7', '5', '_', '2', '7', '5', '.', 'D', 'o', 'a', '_', 'o', 'f', 'f', 't', 'e', 'l', 'l', 't', 'a', 'l', 'e', 'T', 
    'y', 'p', 'e', '\022', 'c', '\n', '\033', 's', 'o', 'd', '_', 'd', 'o', 'a', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'r', 'e', 'q', 
    'r', 'i', 'g', 'h', 't', 'r', 'e', 'a', 'r', '\030', '\014', ' ', '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', '0', 'x', '2', '7', '5', '_', '2', '7', '5', '.', 'S', 'o', 
    'd', '_', 'd', 'o', 'a', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'r', 'e', 'q', 'r', 'i', 'g', 'h', 't', 'r', 'e', 'a', 'r', 
    'T', 'y', 'p', 'e', '\022', 'K', '\n', '\017', 'c', 't', 'a', '_', 'o', 'f', 'f', 't', 'e', 'l', 'l', 't', 'a', 'l', 'e', '\030', '\r', 
    ' ', '\001', '(', '\016', '2', '2', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 
    'd', '_', '0', 'x', '2', '7', '5', '_', '2', '7', '5', '.', 'C', 't', 'a', '_', 'o', 'f', 'f', 't', 'e', 'l', 'l', 't', 'a', 
    'l', 'e', 'T', 'y', 'p', 'e', '\022', 'Q', '\n', '\022', 's', 'o', 'd', 'l', 'c', 'a', '_', 'o', 'f', 'f', 't', 'e', 'l', 'l', 't', 
    'a', 'l', 'e', '\030', '\016', ' ', '\001', '(', '\016', '2', '5', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'S', 'o', 'd', '_', '0', 'x', '2', '7', '5', '_', '2', '7', '5', '.', 'S', 'o', 'd', 'l', 'c', 'a', '_', 'o', 
    'f', 'f', 't', 'e', 'l', 'l', 't', 'a', 'l', 'e', 'T', 'y', 'p', 'e', '\022', 'e', '\n', '\034', 's', 'o', 'd', '_', 'd', 'o', 'a', 
    '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'r', 'e', 'q', 'r', 'i', 'g', 'h', 't', 'f', 'r', 'o', 'n', 't', '\030', '\017', ' ', '\001', 
    '(', '\016', '2', '?', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', 
    '0', 'x', '2', '7', '5', '_', '2', '7', '5', '.', 'S', 'o', 'd', '_', 'd', 'o', 'a', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 
    'r', 'e', 'q', 'r', 'i', 'g', 'h', 't', 'f', 'r', 'o', 'n', 't', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\025', 'r', 'o', 'l', 'l', 
    'i', 'n', 'g', '_', 'c', 'o', 'u', 'n', 't', 'e', 'r', '_', '0', 'x', '2', '7', '5', '\030', '\020', ' ', '\001', '(', '\005', '\022', '\026', 
    '\n', '\016', 'c', 'h', 'e', 'c', 'k', 's', 'u', 'm', '_', '0', 'x', '2', '7', '5', '\030', '\021', ' ', '\001', '(', '\005', '\022', '[', '\n', 
    '\027', 's', 'o', 'd', '_', 'c', 't', 'a', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'r', 'e', 'q', 'r', 'i', 'g', 'h', 't', '\030', 
    '\022', ' ', '\001', '(', '\016', '2', ':', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 
    'o', 'd', '_', '0', 'x', '2', '7', '5', '_', '2', '7', '5', '.', 'S', 'o', 'd', '_', 'c', 't', 'a', '_', 'w', 'a', 'r', 'n', 
    'i', 'n', 'g', 'r', 'e', 'q', 'r', 'i', 'g', 'h', 't', 'T', 'y', 'p', 'e', '\022', 'W', '\n', '\025', 's', 'o', 'd', '_', 'a', 'u', 
    't', 'o', 'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 'f', 'l', 'a', 'g', '\030', '\023', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', '0', 'x', '2', '7', '5', '_', 
    '2', '7', '5', '.', 'S', 'o', 'd', '_', 'a', 'u', 't', 'o', 'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 'f', 'l', 'a', 'g', 
    'T', 'y', 'p', 'e', '\"', '\305', '\001', '\n', '\033', 'S', 'o', 'd', '_', 'l', 'c', 'a', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'r', 
    'e', 'q', 'r', 'i', 'g', 'h', 't', 'T', 'y', 'p', 'e', '\022', '&', '\n', '\"', 'S', 'O', 'D', '_', 'L', 'C', 'A', '_', 'W', 'A', 
    'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'R', 'I', 'G', 'H', 'T', '_', 'N', 'O', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', 
    '\000', '\022', '+', '\n', '\'', 'S', 'O', 'D', '_', 'L', 'C', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'R', 'I', 
    'G', 'H', 'T', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'E', 'V', 'E', 'L', '_', '1', '\020', '\001', '\022', '+', '\n', '\'', 
    'S', 'O', 'D', '_', 'L', 'C', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'R', 'I', 'G', 'H', 'T', '_', 'W', 
    'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'E', 'V', 'E', 'L', '_', '2', '\020', '\002', '\022', '$', '\n', ' ', 'S', 'O', 'D', '_', 'L', 
    'C', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'R', 'I', 'G', 'H', 'T', '_', 'R', 'E', 'S', 'E', 'R', 'V', 
    'E', 'D', '\020', '\003', '\"', '\206', '\001', '\n', '\023', 'S', 'o', 'd', '_', 'b', 'l', 'i', 's', '_', 'a', 'c', 't', 'i', 'v', 'e', 'T', 
    'y', 'p', 'e', '\022', '\035', '\n', '\031', 'S', 'O', 'D', '_', 'B', 'L', 'I', 'S', '_', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'N', 'O', 
    '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\032', '\n', '\026', 'S', 'O', 'D', '_', 'B', 'L', 'I', 'S', '_', 'A', 'C', 'T', 
    'I', 'V', 'E', '_', 'S', 'T', 'A', 'N', 'B', 'Y', '\020', '\001', '\022', '\032', '\n', '\026', 'S', 'O', 'D', '_', 'B', 'L', 'I', 'S', '_', 
    'A', 'C', 'T', 'I', 'V', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\002', '\022', '\030', '\n', '\024', 'S', 'O', 'D', '_', 'B', 'L', 
    'I', 'S', '_', 'A', 'C', 'T', 'I', 'V', 'E', '_', 'F', 'A', 'I', 'L', '\020', '\003', '\"', '\214', '\002', '\n', '\024', 'S', 'o', 'd', '_', 
    'b', 'l', 'i', 's', '_', 'd', 'i', 's', 'p', 'l', 'a', 'y', 'T', 'y', 'p', 'e', '\022', '\037', '\n', '\033', 'S', 'O', 'D', '_', 'B', 
    'L', 'I', 'S', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', '_', 'N', 'O', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', '\020', '\000', '\022', 
    '*', '\n', '&', 'S', 'O', 'D', '_', 'B', 'L', 'I', 'S', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', '_', 'S', 'O', 'D', '_', 'L', 
    'C', 'A', '_', 'C', 'T', 'A', '_', 'D', 'O', 'A', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\001', '\022', '.', '\n', '*', 'S', 'O', 'D', 
    '_', 'B', 'L', 'I', 'S', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', '_', 'S', 'O', 'D', '_', 'L', 'C', 'A', '_', 'C', 'T', 'A', 
    '_', 'D', 'O', 'A', '_', 'B', 'L', 'I', 'N', 'D', 'N', 'E', 'S', 'S', '\020', '\002', '\022', '2', '\n', '.', 'S', 'O', 'D', '_', 'B', 
    'L', 'I', 'S', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', '_', 'S', 'O', 'D', '_', 'L', 'C', 'A', '_', 'C', 'T', 'A', '_', 'D', 
    'O', 'A', '_', 'U', 'N', 'C', 'A', 'L', 'I', 'B', 'R', 'A', 'T', 'I', 'O', 'N', '\020', '\003', '\022', '$', '\n', ' ', 'S', 'O', 'D', 
    '_', 'B', 'L', 'I', 'S', '_', 'D', 'I', 'S', 'P', 'L', 'A', 'Y', '_', 'T', 'E', 'M', 'P', 'O', 'R', 'A', 'R', 'Y', '_', 'E', 
    'R', 'R', 'O', 'R', '\020', '\004', '\022', '\035', '\n', '\031', 'S', 'O', 'D', '_', 'B', 'L', 'I', 'S', '_', 'D', 'I', 'S', 'P', 'L', 'A', 
    'Y', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\005', '\"', '\300', '\001', '\n', '\032', 'S', 'o', 'd', '_', 'l', 'c', 'a', '_', 
    'w', 'a', 'r', 'n', 'i', 'n', 'g', 'r', 'e', 'q', 'l', 'e', 'f', 't', 'T', 'y', 'p', 'e', '\022', '%', '\n', '!', 'S', 'O', 'D', 
    '_', 'L', 'C', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'L', 'E', 'F', 'T', '_', 'N', 'O', '_', 'W', 'A', 
    'R', 'N', 'I', 'N', 'G', '\020', '\000', '\022', '*', '\n', '&', 'S', 'O', 'D', '_', 'L', 'C', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 
    'G', 'R', 'E', 'Q', 'L', 'E', 'F', 'T', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'E', 'V', 'E', 'L', '_', '1', '\020', 
    '\001', '\022', '*', '\n', '&', 'S', 'O', 'D', '_', 'L', 'C', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'L', 'E', 
    'F', 'T', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'E', 'V', 'E', 'L', '_', '2', '\020', '\002', '\022', '#', '\n', '\037', 'S', 
    'O', 'D', '_', 'L', 'C', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'L', 'E', 'F', 'T', '_', 'R', 'E', 'S', 
    'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\324', '\001', '\n', '\036', 'S', 'o', 'd', '_', 'd', 'o', 'a', '_', 'w', 'a', 'r', 'n', 'i', 
    'n', 'g', 'r', 'e', 'q', 'l', 'e', 'f', 't', 'r', 'e', 'a', 'r', 'T', 'y', 'p', 'e', '\022', ')', '\n', '%', 'S', 'O', 'D', '_', 
    'D', 'O', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'L', 'E', 'F', 'T', 'R', 'E', 'A', 'R', '_', 'N', 'O', 
    '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\000', '\022', '.', '\n', '*', 'S', 'O', 'D', '_', 'D', 'O', 'A', '_', 'W', 'A', 'R', 
    'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'L', 'E', 'F', 'T', 'R', 'E', 'A', 'R', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 
    'E', 'V', 'E', 'L', '_', '1', '\020', '\001', '\022', '.', '\n', '*', 'S', 'O', 'D', '_', 'D', 'O', 'A', '_', 'W', 'A', 'R', 'N', 'I', 
    'N', 'G', 'R', 'E', 'Q', 'L', 'E', 'F', 'T', 'R', 'E', 'A', 'R', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'E', 'V', 
    'E', 'L', '_', '2', '\020', '\002', '\022', '\'', '\n', '#', 'S', 'O', 'D', '_', 'D', 'O', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 
    'R', 'E', 'Q', 'L', 'E', 'F', 'T', 'R', 'E', 'A', 'R', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\331', '\001', 
    '\n', '\037', 'S', 'o', 'd', '_', 'd', 'o', 'a', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'r', 'e', 'q', 'l', 'e', 'f', 't', 'f', 
    'r', 'o', 'n', 't', 'T', 'y', 'p', 'e', '\022', '*', '\n', '&', 'S', 'O', 'D', '_', 'D', 'O', 'A', '_', 'W', 'A', 'R', 'N', 'I', 
    'N', 'G', 'R', 'E', 'Q', 'L', 'E', 'F', 'T', 'F', 'R', 'O', 'N', 'T', '_', 'N', 'O', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 
    '\020', '\000', '\022', '/', '\n', '+', 'S', 'O', 'D', '_', 'D', 'O', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'L', 
    'E', 'F', 'T', 'F', 'R', 'O', 'N', 'T', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'E', 'V', 'E', 'L', '_', '1', '\020', 
    '\001', '\022', '/', '\n', '+', 'S', 'O', 'D', '_', 'D', 'O', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'L', 'E', 
    'F', 'T', 'F', 'R', 'O', 'N', 'T', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'E', 'V', 'E', 'L', '_', '2', '\020', '\002', 
    '\022', '(', '\n', '$', 'S', 'O', 'D', '_', 'D', 'O', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'L', 'E', 'F', 
    'T', 'F', 'R', 'O', 'N', 'T', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\224', '\001', '\n', '\032', 'S', 'o', 'd', 
    '_', 'c', 't', 'a', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'r', 'e', 'q', 'l', 'e', 'f', 't', 'T', 'y', 'p', 'e', '\022', '%', 
    '\n', '!', 'S', 'O', 'D', '_', 'C', 'T', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'L', 'E', 'F', 'T', '_', 
    'N', 'O', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\000', '\022', '#', '\n', '\037', 'S', 'O', 'D', '_', 'C', 'T', 'A', '_', 'W', 
    'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'L', 'E', 'F', 'T', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\001', '\022', 
    '*', '\n', '&', 'S', 'O', 'D', '_', 'C', 'T', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'L', 'E', 'F', 'T', 
    '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'E', 'V', 'E', 'L', '_', '2', '\020', '\002', '\"', 'I', '\n', '\021', 'S', 'o', 'd', 
    '_', 'd', 'o', 'a', '_', 's', 't', 'a', 't', 'e', 'T', 'y', 'p', 'e', '\022', '\032', '\n', '\026', 'S', 'O', 'D', '_', 'D', 'O', 'A', 
    '_', 'S', 'T', 'A', 'T', 'E', '_', 'I', 'N', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\030', '\n', '\024', 'S', 'O', 'D', '_', 
    'D', 'O', 'A', '_', 'S', 'T', 'A', 'T', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', 'I', '\n', '\021', 'S', 'o', 'd', 
    '_', 'c', 't', 'a', '_', 's', 't', 'a', 't', 'e', 'T', 'y', 'p', 'e', '\022', '\032', '\n', '\026', 'S', 'O', 'D', '_', 'C', 'T', 'A', 
    '_', 'S', 'T', 'A', 'T', 'E', '_', 'I', 'N', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\030', '\n', '\024', 'S', 'O', 'D', '_', 
    'C', 'T', 'A', '_', 'S', 'T', 'A', 'T', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\001', '\"', 'R', '\n', '\024', 'S', 'o', 'd', 
    '_', 's', 'o', 'd', 'l', 'c', 'a', '_', 's', 't', 'a', 't', 'e', 'T', 'y', 'p', 'e', '\022', '\035', '\n', '\031', 'S', 'O', 'D', '_', 
    'S', 'O', 'D', 'L', 'C', 'A', '_', 'S', 'T', 'A', 'T', 'E', '_', 'I', 'N', 'A', 'C', 'T', 'I', 'V', 'E', '\020', '\000', '\022', '\033', 
    '\n', '\027', 'S', 'O', 'D', '_', 'S', 'O', 'D', 'L', 'C', 'A', '_', 'S', 'T', 'A', 'T', 'E', '_', 'A', 'C', 'T', 'I', 'V', 'E', 
    '\020', '\001', '\"', '^', '\n', '\023', 'D', 'o', 'a', '_', 'o', 'f', 'f', 't', 'e', 'l', 'l', 't', 'a', 'l', 'e', 'T', 'y', 'p', 'e', 
    '\022', '#', '\n', '\037', 'D', 'O', 'A', '_', 'O', 'F', 'F', 'T', 'E', 'L', 'L', 'T', 'A', 'L', 'E', '_', 'O', 'F', 'F', 'T', 'E', 
    'L', 'L', 'T', 'L', 'A', 'E', '_', 'O', 'F', 'F', '\020', '\000', '\022', '\"', '\n', '\036', 'D', 'O', 'A', '_', 'O', 'F', 'F', 'T', 'E', 
    'L', 'L', 'T', 'A', 'L', 'E', '_', 'O', 'F', 'F', 'T', 'E', 'L', 'L', 'T', 'A', 'L', 'E', '_', 'O', 'N', '\020', '\001', '\"', '\331', 
    '\001', '\n', '\037', 'S', 'o', 'd', '_', 'd', 'o', 'a', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'r', 'e', 'q', 'r', 'i', 'g', 'h', 
    't', 'r', 'e', 'a', 'r', 'T', 'y', 'p', 'e', '\022', '*', '\n', '&', 'S', 'O', 'D', '_', 'D', 'O', 'A', '_', 'W', 'A', 'R', 'N', 
    'I', 'N', 'G', 'R', 'E', 'Q', 'R', 'I', 'G', 'H', 'T', 'R', 'E', 'A', 'R', '_', 'N', 'O', '_', 'W', 'A', 'R', 'N', 'I', 'N', 
    'G', '\020', '\000', '\022', '/', '\n', '+', 'S', 'O', 'D', '_', 'D', 'O', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 
    'R', 'I', 'G', 'H', 'T', 'R', 'E', 'A', 'R', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'E', 'V', 'E', 'L', '_', '1', 
    '\020', '\001', '\022', '/', '\n', '+', 'S', 'O', 'D', '_', 'D', 'O', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'R', 
    'I', 'G', 'H', 'T', 'R', 'E', 'A', 'R', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'E', 'V', 'E', 'L', '_', '2', '\020', 
    '\002', '\022', '(', '\n', '$', 'S', 'O', 'D', '_', 'D', 'O', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'R', 'I', 
    'G', 'H', 'T', 'R', 'E', 'A', 'R', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '^', '\n', '\023', 'C', 't', 'a', 
    '_', 'o', 'f', 'f', 't', 'e', 'l', 'l', 't', 'a', 'l', 'e', 'T', 'y', 'p', 'e', '\022', '#', '\n', '\037', 'C', 'T', 'A', '_', 'O', 
    'F', 'F', 'T', 'E', 'L', 'L', 'T', 'A', 'L', 'E', '_', 'O', 'F', 'F', 'T', 'E', 'L', 'L', 'T', 'L', 'A', 'E', '_', 'O', 'F', 
    'F', '\020', '\000', '\022', '\"', '\n', '\036', 'C', 'T', 'A', '_', 'O', 'F', 'F', 'T', 'E', 'L', 'L', 'T', 'A', 'L', 'E', '_', 'O', 'F', 
    'F', 'T', 'E', 'L', 'L', 'T', 'A', 'L', 'E', '_', 'O', 'N', '\020', '\001', '\"', 'g', '\n', '\026', 'S', 'o', 'd', 'l', 'c', 'a', '_', 
    'o', 'f', 'f', 't', 'e', 'l', 'l', 't', 'a', 'l', 'e', 'T', 'y', 'p', 'e', '\022', '&', '\n', '\"', 'S', 'O', 'D', 'L', 'C', 'A', 
    '_', 'O', 'F', 'F', 'T', 'E', 'L', 'L', 'T', 'A', 'L', 'E', '_', 'O', 'F', 'F', 'T', 'E', 'L', 'L', 'T', 'L', 'A', 'E', '_', 
    'O', 'F', 'F', '\020', '\000', '\022', '%', '\n', '!', 'S', 'O', 'D', 'L', 'C', 'A', '_', 'O', 'F', 'F', 'T', 'E', 'L', 'L', 'T', 'A', 
    'L', 'E', '_', 'O', 'F', 'F', 'T', 'E', 'L', 'L', 'T', 'A', 'L', 'E', '_', 'O', 'N', '\020', '\001', '\"', '\336', '\001', '\n', ' ', 'S', 
    'o', 'd', '_', 'd', 'o', 'a', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'r', 'e', 'q', 'r', 'i', 'g', 'h', 't', 'f', 'r', 'o', 
    'n', 't', 'T', 'y', 'p', 'e', '\022', '+', '\n', '\'', 'S', 'O', 'D', '_', 'D', 'O', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 
    'R', 'E', 'Q', 'R', 'I', 'G', 'H', 'T', 'F', 'R', 'O', 'N', 'T', '_', 'N', 'O', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', 
    '\000', '\022', '0', '\n', ',', 'S', 'O', 'D', '_', 'D', 'O', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'R', 'I', 
    'G', 'H', 'T', 'F', 'R', 'O', 'N', 'T', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'E', 'V', 'E', 'L', '_', '1', '\020', 
    '\001', '\022', '0', '\n', ',', 'S', 'O', 'D', '_', 'D', 'O', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'R', 'I', 
    'G', 'H', 'T', 'F', 'R', 'O', 'N', 'T', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'E', 'V', 'E', 'L', '_', '2', '\020', 
    '\002', '\022', ')', '\n', '%', 'S', 'O', 'D', '_', 'D', 'O', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'R', 'I', 
    'G', 'H', 'T', 'F', 'R', 'O', 'N', 'T', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\230', '\001', '\n', '\033', 'S', 
    'o', 'd', '_', 'c', 't', 'a', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'r', 'e', 'q', 'r', 'i', 'g', 'h', 't', 'T', 'y', 'p', 
    'e', '\022', '&', '\n', '\"', 'S', 'O', 'D', '_', 'C', 'T', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'R', 'I', 
    'G', 'H', 'T', '_', 'N', 'O', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\000', '\022', '$', '\n', ' ', 'S', 'O', 'D', '_', 'C', 
    'T', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 'Q', 'R', 'I', 'G', 'H', 'T', '_', 'R', 'E', 'S', 'E', 'R', 'V', 
    'E', 'D', '\020', '\001', '\022', '+', '\n', '\'', 'S', 'O', 'D', '_', 'C', 'T', 'A', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 'R', 'E', 
    'Q', 'R', 'I', 'G', 'H', 'T', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'E', 'V', 'E', 'L', '_', '2', '\020', '\002', '\"', 
    '\213', '\001', '\n', '\031', 'S', 'o', 'd', '_', 'a', 'u', 't', 'o', 'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 'f', 'l', 'a', 'g', 
    'T', 'y', 'p', 'e', '\022', '$', '\n', ' ', 'S', 'O', 'D', '_', 'A', 'U', 'T', 'O', 'A', 'L', 'I', 'G', 'N', 'M', 'E', 'N', 'T', 
    'F', 'L', 'A', 'G', '_', 'N', 'O', '_', 'S', 'U', 'C', 'C', 'E', 'S', 'S', '\020', '\000', '\022', '$', '\n', ' ', 'S', 'O', 'D', '_', 
    'A', 'U', 'T', 'O', 'A', 'L', 'I', 'G', 'N', 'M', 'E', 'N', 'T', 'F', 'L', 'A', 'G', '_', 'S', 'U', 'C', 'C', 'E', 'S', 'S', 
    'F', 'U', 'L', '\020', '\001', '\022', '\"', '\n', '\036', 'S', 'O', 'D', '_', 'A', 'U', 'T', 'O', 'A', 'L', 'I', 'G', 'N', 'M', 'E', 'N', 
    'T', 'F', 'L', 'A', 'G', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\"', '\332', '\035', '\n', '\026', 'G', 'w', '_', 't', 
    'p', 'm', 's', '_', 't', 'i', 'r', 'e', '_', '0', 'x', '3', '6', '1', '_', '3', '6', '1', '\022', '\030', '\n', '\020', 't', 'p', 'm', 
    's', '_', 'r', 'f', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '\030', '\001', ' ', '\001', '(', '\001', '\022', '\030', '\n', '\020', 't', 'p', 
    'm', 's', '_', 'r', 'r', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '\030', '\002', ' ', '\001', '(', '\001', '\022', '\030', '\n', '\020', 't', 
    'p', 'm', 's', '_', 'l', 'r', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '\030', '\003', ' ', '\001', '(', '\001', '\022', '\035', '\n', '\025', 
    't', 'p', 'm', 's', '_', 't', 'i', 'r', 'e', '_', 't', 'e', 'm', 'p', 'e', 'r', 'a', 't', 'u', 'r', 'e', '\030', '\004', ' ', '\001', 
    '(', '\005', '\022', 'f', '\n', '\030', 't', 'p', 'm', 's', '_', 'l', 'f', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '_', 'w', 'a', 
    'r', 'n', 'i', 'n', 'g', '\030', '\005', ' ', '\001', '(', '\016', '2', 'D', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'p', 'm', 's', '_', 't', 'i', 'r', 'e', '_', '0', 'x', '3', '6', '1', '_', '3', 
    '6', '1', '.', 'T', 'p', 'm', 's', '_', 'l', 'f', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '_', 'w', 'a', 'r', 'n', 'i', 
    'n', 'g', 'T', 'y', 'p', 'e', '\022', 'f', '\n', '\030', 't', 'p', 'm', 's', '_', 'r', 'f', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 
    'e', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', '\030', '\006', ' ', '\001', '(', '\016', '2', 'D', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'p', 'm', 's', '_', 't', 'i', 'r', 'e', '_', '0', 'x', '3', 
    '6', '1', '_', '3', '6', '1', '.', 'T', 'p', 'm', 's', '_', 'r', 'f', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '_', 'w', 
    'a', 'r', 'n', 'i', 'n', 'g', 'T', 'y', 'p', 'e', '\022', 'Z', '\n', '\022', 't', 'p', 'm', 's', '_', 's', 'y', 's', 't', 'e', 'm', 
    '_', 's', 't', 'a', 't', 'u', 's', '\030', '\007', ' ', '\001', '(', '\016', '2', '>', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'p', 'm', 's', '_', 't', 'i', 'r', 'e', '_', '0', 'x', '3', '6', '1', 
    '_', '3', '6', '1', '.', 'T', 'p', 'm', 's', '_', 's', 'y', 's', 't', 'e', 'm', '_', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 
    'p', 'e', '\022', 'f', '\n', '\030', 't', 'p', 'm', 's', '_', 'r', 'r', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '_', 'w', 'a', 
    'r', 'n', 'i', 'n', 'g', '\030', '\010', ' ', '\001', '(', '\016', '2', 'D', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'p', 'm', 's', '_', 't', 'i', 'r', 'e', '_', '0', 'x', '3', '6', '1', '_', '3', 
    '6', '1', '.', 'T', 'p', 'm', 's', '_', 'r', 'r', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '_', 'w', 'a', 'r', 'n', 'i', 
    'n', 'g', 'T', 'y', 'p', 'e', '\022', 'f', '\n', '\030', 't', 'p', 'm', 's', '_', 'l', 'r', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 
    'e', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', '\030', '\t', ' ', '\001', '(', '\016', '2', 'D', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'p', 'm', 's', '_', 't', 'i', 'r', 'e', '_', '0', 'x', '3', 
    '6', '1', '_', '3', '6', '1', '.', 'T', 'p', 'm', 's', '_', 'l', 'r', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '_', 'w', 
    'a', 'r', 'n', 'i', 'n', 'g', 'T', 'y', 'p', 'e', '\022', 'f', '\n', '\030', 't', 'p', 'm', 's', '_', 't', 'e', 'm', 'p', 'e', 'r', 
    'a', 't', 'u', 'r', 'e', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', '\030', '\n', ' ', '\001', '(', '\016', '2', 'D', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'p', 'm', 's', '_', 't', 'i', 'r', 'e', 
    '_', '0', 'x', '3', '6', '1', '_', '3', '6', '1', '.', 'T', 'p', 'm', 's', '_', 't', 'e', 'm', 'p', 'e', 'r', 'a', 't', 'u', 
    'r', 'e', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'T', 'y', 'p', 'e', '\022', 'N', '\n', '\014', 't', 'p', 'm', 's', '_', 'r', 'e', 
    's', 'r', 'v', 'e', 'd', '\030', '\013', ' ', '\001', '(', '\016', '2', '8', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'p', 'm', 's', '_', 't', 'i', 'r', 'e', '_', '0', 'x', '3', '6', '1', '_', '3', 
    '6', '1', '.', 'T', 'p', 'm', 's', '_', 'r', 'e', 's', 'r', 'v', 'e', 'd', 'T', 'y', 'p', 'e', '\022', 'P', '\n', '\r', 't', 'i', 
    'r', 'e', '_', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', '\030', '\014', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'p', 'm', 's', '_', 't', 'i', 'r', 'e', '_', '0', 
    'x', '3', '6', '1', '_', '3', '6', '1', '.', 'T', 'i', 'r', 'e', '_', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'T', 'y', 'p', 
    'e', '\022', 'V', '\n', '\020', 't', 'p', 'm', 's', '_', 'l', 'a', 'm', 'p', '_', 's', 't', 'a', 't', 'u', 's', '\030', '\r', ' ', '\001', 
    '(', '\016', '2', '<', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 
    'p', 'm', 's', '_', 't', 'i', 'r', 'e', '_', '0', 'x', '3', '6', '1', '_', '3', '6', '1', '.', 'T', 'p', 'm', 's', '_', 'l', 
    'a', 'm', 'p', '_', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', 'P', '\n', '\r', 't', 'p', 'm', 's', '_', 'a', 'l', 
    '_', 's', 't', 'a', 't', 'e', '\030', '\016', ' ', '\001', '(', '\016', '2', '9', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'p', 'm', 's', '_', 't', 'i', 'r', 'e', '_', '0', 'x', '3', '6', '1', '_', 
    '3', '6', '1', '.', 'T', 'p', 'm', 's', '_', 'a', 'l', '_', 's', 't', 'a', 't', 'e', 'T', 'y', 'p', 'e', '\022', '\030', '\n', '\020', 
    't', 'p', 'm', 's', '_', 'l', 'f', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '\030', '\017', ' ', '\001', '(', '\001', '\"', '\267', '\003', 
    '\n', '\034', 'T', 'p', 'm', 's', '_', 'l', 'f', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '_', 'w', 'a', 'r', 'n', 'i', 'n', 
    'g', 'T', 'y', 'p', 'e', '\022', '\'', '\n', '#', 'T', 'P', 'M', 'S', '_', 'L', 'F', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', 
    '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'N', 'O', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\000', '\022', '2', '\n', '.', 
    'T', 'P', 'M', 'S', '_', 'L', 'F', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 
    'H', 'I', 'G', 'H', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\001', '\022', '1', 
    '\n', '-', 'T', 'P', 'M', 'S', '_', 'L', 'F', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 
    'G', '_', 'L', 'O', 'W', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\002', '\022', 
    '2', '\n', '.', 'T', 'P', 'M', 'S', '_', 'L', 'F', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 
    'N', 'G', '_', 'Q', 'U', 'I', 'K', '_', 'L', 'E', 'A', 'K', 'A', 'G', 'E', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', 
    '\003', '\022', '(', '\n', '$', 'T', 'P', 'M', 'S', '_', 'L', 'F', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 
    'N', 'I', 'N', 'G', '_', 'L', 'O', 'S', 'T', '_', 'S', 'E', 'N', 'S', 'O', 'R', '\020', '\004', '\022', '/', '\n', '+', 'T', 'P', 'M', 
    'S', '_', 'L', 'F', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'S', 'E', 'N', 
    'S', 'O', 'R', '_', 'B', 'A', 'T', 'T', 'E', 'R', 'Y', '_', 'L', 'O', 'W', '\020', '\005', '\022', '5', '\n', '1', 'T', 'P', 'M', 'S', 
    '_', 'L', 'F', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'S', 'E', 'N', 'S', 
    'O', 'R', '_', 'F', 'A', 'U', 'L', 'T', 'U', 'R', 'E', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\006', '\022', 'A', '\n', 
    '=', 'T', 'P', 'M', 'S', '_', 'L', 'F', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 
    '_', 'L', 'O', 'W', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', '_', 'Q', 'U', 'I', 'K', '_', 'L', 
    'E', 'A', 'K', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\007', '\"', '\267', '\003', '\n', '\034', 'T', 'p', 'm', 's', '_', 'r', 
    'f', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'T', 'y', 'p', 'e', '\022', '\'', '\n', 
    '#', 'T', 'P', 'M', 'S', '_', 'R', 'F', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', 
    '_', 'N', 'O', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\000', '\022', '2', '\n', '.', 'T', 'P', 'M', 'S', '_', 'R', 'F', '_', 
    'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'H', 'I', 'G', 'H', '_', 'P', 'R', 'E', 
    'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\001', '\022', '1', '\n', '-', 'T', 'P', 'M', 'S', '_', 'R', 
    'F', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'O', 'W', '_', 'P', 'R', 
    'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\002', '\022', '2', '\n', '.', 'T', 'P', 'M', 'S', '_', 
    'R', 'F', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'Q', 'U', 'I', 'K', '_', 
    'L', 'E', 'A', 'K', 'A', 'G', 'E', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\022', '(', '\n', '$', 'T', 'P', 'M', 
    'S', '_', 'R', 'F', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'O', 'S', 
    'T', '_', 'S', 'E', 'N', 'S', 'O', 'R', '\020', '\004', '\022', '/', '\n', '+', 'T', 'P', 'M', 'S', '_', 'R', 'F', '_', 'P', 'R', 'E', 
    'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'S', 'E', 'N', 'S', 'O', 'R', '_', 'B', 'A', 'T', 'T', 
    'E', 'R', 'Y', '_', 'L', 'O', 'W', '\020', '\005', '\022', '5', '\n', '1', 'T', 'P', 'M', 'S', '_', 'R', 'F', '_', 'P', 'R', 'E', 'S', 
    'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'S', 'E', 'N', 'S', 'O', 'R', '_', 'F', 'A', 'U', 'L', 'T', 
    'U', 'R', 'E', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\006', '\022', 'A', '\n', '=', 'T', 'P', 'M', 'S', '_', 'R', 'F', 
    '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'O', 'W', '_', 'P', 'R', 'E', 
    'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', '_', 'Q', 'U', 'I', 'K', '_', 'L', 'E', 'A', 'K', '_', 'R', 'E', 'S', 'E', 
    'R', 'V', 'E', 'D', '\020', '\007', '\"', '\267', '\001', '\n', '\026', 'T', 'p', 'm', 's', '_', 's', 'y', 's', 't', 'e', 'm', '_', 's', 't', 
    'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '#', '\n', '\037', 'T', 'P', 'M', 'S', '_', 'S', 'Y', 'S', 'T', 'E', 'M', '_', 'S', 
    'T', 'A', 'T', 'U', 'S', '_', 'N', 'O', '_', 'A', 'N', 'Y', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\000', '\022', '#', '\n', '\037', 'T', 
    'P', 'M', 'S', '_', 'S', 'Y', 'S', 'T', 'E', 'M', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'S', 'Y', 'S', 'T', 'E', 'M', '_', 
    'E', 'R', 'R', 'O', 'R', '\020', '\001', '\022', '/', '\n', '+', 'T', 'P', 'M', 'S', '_', 'S', 'Y', 'S', 'T', 'E', 'M', '_', 'S', 'T', 
    'A', 'T', 'U', 'S', '_', 'S', 'Y', 'E', 'T', 'E', 'M', '_', 'W', 'A', 'I', 'T', '_', 'F', 'O', 'R', '_', 'L', 'E', 'A', 'R', 
    'N', 'I', 'N', 'G', '\020', '\002', '\022', '\"', '\n', '\036', 'T', 'P', 'M', 'S', '_', 'S', 'Y', 'S', 'T', 'E', 'M', '_', 'S', 'T', 'A', 
    'T', 'U', 'S', '_', 'W', 'I', 'N', 'T', 'E', 'R', '_', 'M', 'O', 'D', 'E', '\020', '\003', '\"', '\267', '\003', '\n', '\034', 'T', 'p', 'm', 
    's', '_', 'r', 'r', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'T', 'y', 'p', 'e', 
    '\022', '\'', '\n', '#', 'T', 'P', 'M', 'S', '_', 'R', 'R', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 
    'I', 'N', 'G', '_', 'N', 'O', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\000', '\022', '2', '\n', '.', 'T', 'P', 'M', 'S', '_', 
    'R', 'R', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'H', 'I', 'G', 'H', '_', 
    'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\001', '\022', '1', '\n', '-', 'T', 'P', 'M', 
    'S', '_', 'R', 'R', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'O', 'W', 
    '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\002', '\022', '2', '\n', '.', 'T', 'P', 
    'M', 'S', '_', 'R', 'R', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'Q', 'U', 
    'I', 'K', '_', 'L', 'E', 'A', 'K', 'A', 'G', 'E', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\022', '(', '\n', '$', 
    'T', 'P', 'M', 'S', '_', 'R', 'R', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 
    'L', 'O', 'S', 'T', '_', 'S', 'E', 'N', 'S', 'O', 'R', '\020', '\004', '\022', '/', '\n', '+', 'T', 'P', 'M', 'S', '_', 'R', 'R', '_', 
    'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'S', 'E', 'N', 'S', 'O', 'R', '_', 'B', 
    'A', 'T', 'T', 'E', 'R', 'Y', '_', 'L', 'O', 'W', '\020', '\005', '\022', '5', '\n', '1', 'T', 'P', 'M', 'S', '_', 'R', 'R', '_', 'P', 
    'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'S', 'E', 'N', 'S', 'O', 'R', '_', 'F', 'A', 
    'U', 'L', 'T', 'U', 'R', 'E', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\006', '\022', 'A', '\n', '=', 'T', 'P', 'M', 'S', 
    '_', 'R', 'R', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'O', 'W', '_', 
    'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', '_', 'Q', 'U', 'I', 'K', '_', 'L', 'E', 'A', 'K', '_', 'R', 
    'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\007', '\"', '\267', '\003', '\n', '\034', 'T', 'p', 'm', 's', '_', 'l', 'r', '_', 'p', 'r', 'e', 
    's', 's', 'u', 'r', 'e', '_', 'w', 'a', 'r', 'n', 'i', 'n', 'g', 'T', 'y', 'p', 'e', '\022', '\'', '\n', '#', 'T', 'P', 'M', 'S', 
    '_', 'L', 'R', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'N', 'O', '_', 'W', 
    'A', 'R', 'N', 'I', 'N', 'G', '\020', '\000', '\022', '2', '\n', '.', 'T', 'P', 'M', 'S', '_', 'L', 'R', '_', 'P', 'R', 'E', 'S', 'S', 
    'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'H', 'I', 'G', 'H', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', 
    '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\001', '\022', '1', '\n', '-', 'T', 'P', 'M', 'S', '_', 'L', 'R', '_', 'P', 'R', 'E', 
    'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'O', 'W', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 
    'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\002', '\022', '2', '\n', '.', 'T', 'P', 'M', 'S', '_', 'L', 'R', '_', 'P', 'R', 
    'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'Q', 'U', 'I', 'K', '_', 'L', 'E', 'A', 'K', 'A', 
    'G', 'E', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\003', '\022', '(', '\n', '$', 'T', 'P', 'M', 'S', '_', 'L', 'R', '_', 
    'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'O', 'S', 'T', '_', 'S', 'E', 'N', 
    'S', 'O', 'R', '\020', '\004', '\022', '/', '\n', '+', 'T', 'P', 'M', 'S', '_', 'L', 'R', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', 
    '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'S', 'E', 'N', 'S', 'O', 'R', '_', 'B', 'A', 'T', 'T', 'E', 'R', 'Y', '_', 'L', 
    'O', 'W', '\020', '\005', '\022', '5', '\n', '1', 'T', 'P', 'M', 'S', '_', 'L', 'R', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', '_', 
    'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'S', 'E', 'N', 'S', 'O', 'R', '_', 'F', 'A', 'U', 'L', 'T', 'U', 'R', 'E', '_', 'R', 
    'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\006', '\022', 'A', '\n', '=', 'T', 'P', 'M', 'S', '_', 'L', 'R', '_', 'P', 'R', 'E', 'S', 
    'S', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'L', 'O', 'W', '_', 'P', 'R', 'E', 'S', 'S', 'U', 'R', 'E', 
    '_', 'W', 'A', 'R', 'N', '_', 'Q', 'U', 'I', 'K', '_', 'L', 'E', 'A', 'K', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', 
    '\007', '\"', '\205', '\001', '\n', '\034', 'T', 'p', 'm', 's', '_', 't', 'e', 'm', 'p', 'e', 'r', 'a', 't', 'u', 'r', 'e', '_', 'w', 'a', 
    'r', 'n', 'i', 'n', 'g', 'T', 'y', 'p', 'e', '\022', '3', '\n', '/', 'T', 'P', 'M', 'S', '_', 'T', 'E', 'M', 'P', 'E', 'R', 'A', 
    'T', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'N', 'O', '_', 'T', 'E', 'M', 'P', 'E', 'R', 'A', 'T', 'U', 
    'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\000', '\022', '0', '\n', ',', 'T', 'P', 'M', 'S', '_', 'T', 'E', 'M', 'P', 
    'E', 'R', 'A', 'T', 'U', 'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'T', 'E', 'M', 'P', 'E', 'R', 'A', 'T', 'U', 
    'R', 'E', '_', 'W', 'A', 'R', 'N', 'I', 'N', 'G', '\020', '\001', '\"', 'I', '\n', '\020', 'T', 'p', 'm', 's', '_', 'r', 'e', 's', 'r', 
    'v', 'e', 'd', 'T', 'y', 'p', 'e', '\022', '\031', '\n', '\025', 'T', 'P', 'M', 'S', '_', 'R', 'E', 'S', 'R', 'V', 'E', 'D', '_', 'R', 
    'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\000', '\022', '\032', '\n', '\026', 'T', 'P', 'M', 'S', '_', 'R', 'E', 'S', 'R', 'V', 'E', 'D', 
    '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '1', '\020', '\001', '\"', '\342', '\001', '\n', '\021', 'T', 'i', 'r', 'e', '_', 'p', 'o', 's', 
    'i', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', '\022', '%', '\n', '!', 'T', 'I', 'R', 'E', '_', 'P', 'O', 'S', 'I', 'T', 'I', 'O', 
    'N', '_', 'N', 'O', '_', 'A', 'N', 'Y', '_', 'S', 'E', 'N', 'S', 'O', 'R', '_', 'E', 'R', 'R', 'O', 'R', '\020', '\000', '\022', '!', 
    '\n', '\035', 'T', 'I', 'R', 'E', '_', 'P', 'O', 'S', 'I', 'T', 'I', 'O', 'N', '_', 'L', 'E', 'F', 'T', '_', 'F', 'R', 'O', 'N', 
    'T', '_', 'T', 'I', 'R', 'E', '\020', '\001', '\022', '\"', '\n', '\036', 'T', 'I', 'R', 'E', '_', 'P', 'O', 'S', 'I', 'T', 'I', 'O', 'N', 
    '_', 'R', 'I', 'G', 'H', 'T', '_', 'F', 'R', 'O', 'N', 'T', '_', 'T', 'I', 'R', 'E', '\020', '\002', '\022', '!', '\n', '\035', 'T', 'I', 
    'R', 'E', '_', 'P', 'O', 'S', 'I', 'T', 'I', 'O', 'N', '_', 'R', 'I', 'G', 'H', 'T', '_', 'R', 'E', 'A', 'R', '_', 'T', 'I', 
    'R', 'E', '\020', '\003', '\022', ' ', '\n', '\034', 'T', 'I', 'R', 'E', '_', 'P', 'O', 'S', 'I', 'T', 'I', 'O', 'N', '_', 'L', 'E', 'F', 
    'T', '_', 'R', 'E', 'A', 'R', '_', 'T', 'I', 'R', 'E', '\020', '\004', '\022', '\032', '\n', '\026', 'T', 'I', 'R', 'E', '_', 'P', 'O', 'S', 
    'I', 'T', 'I', 'O', 'N', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', 'D', '\020', '\005', '\"', '\232', '\001', '\n', '\024', 'T', 'p', 'm', 's', 
    '_', 'l', 'a', 'm', 'p', '_', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\"', '\n', '\036', 'T', 'P', 'M', 'S', '_', 
    'L', 'A', 'M', 'P', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'N', 'O', '_', 'L', 'A', 'M', 'P', '_', 'L', 'I', 'G', 'H', 'T', 
    '\020', '\000', '\022', '\037', '\n', '\033', 'T', 'P', 'M', 'S', '_', 'L', 'A', 'M', 'P', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'L', 'A', 
    'M', 'P', '_', 'F', 'L', 'A', 'S', 'H', '\020', '\001', '\022', '\037', '\n', '\033', 'T', 'P', 'M', 'S', '_', 'L', 'A', 'M', 'P', '_', 'S', 
    'T', 'A', 'T', 'U', 'S', '_', 'L', 'A', 'M', 'P', '_', 'L', 'I', 'G', 'H', 'T', '\020', '\002', '\022', '\034', '\n', '\030', 'T', 'P', 'M', 
    'S', '_', 'L', 'A', 'M', 'P', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'R', 'E', 'S', 'E', 'V', 'E', 'D', '\020', '\003', '\"', '\221', 
    '\001', '\n', '\021', 'T', 'p', 'm', 's', '_', 'a', 'l', '_', 's', 't', 'a', 't', 'e', 'T', 'y', 'p', 'e', '\022', '\032', '\n', '\026', 'T', 
    'P', 'M', 'S', '_', 'A', 'L', '_', 'S', 'T', 'A', 'T', 'E', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', 'S', '\020', '\000', '\022', '\037', 
    '\n', '\033', 'T', 'P', 'M', 'S', '_', 'A', 'L', '_', 'S', 'T', 'A', 'T', 'E', '_', 'S', 'E', 'L', 'F', '_', 'L', 'E', 'A', 'R', 
    'N', 'I', 'N', 'G', '\020', '\001', '\022', '$', '\n', ' ', 'T', 'P', 'M', 'S', '_', 'A', 'L', '_', 'S', 'T', 'A', 'T', 'E', '_', 'S', 
    'E', 'L', 'F', '_', 'L', 'E', 'A', 'R', 'N', 'I', 'N', 'G', '_', 'O', 'V', 'E', 'R', '\020', '\002', '\022', '\031', '\n', '\025', 'T', 'P', 
    'M', 'S', '_', 'A', 'L', '_', 'S', 'T', 'A', 'T', 'E', '_', 'R', 'E', 'S', 'E', 'R', 'V', 'E', '\020', '\003', '\"', '\337', '\002', '\n', 
    '\020', 'I', 'n', 's', '_', 'd', 'a', 't', 'a', 'i', 'n', 'f', 'o', '_', '5', '0', '6', '\022', '\027', '\n', '\017', 'i', 'n', 's', '_', 
    'g', 'p', 's', 'f', 'l', 'a', 'g', '_', 'p', 'o', 's', '\030', '\001', ' ', '\001', '(', '\005', '\022', '\021', '\n', '\t', 'i', 'n', 's', '_', 
    'n', 'u', 'm', 's', 'v', '\030', '\002', ' ', '\001', '(', '\005', '\022', '\033', '\n', '\023', 'i', 'n', 's', '_', 'g', 'p', 's', 'f', 'l', 'a', 
    'g', '_', 'h', 'e', 'a', 'd', 'i', 'n', 'g', '\030', '\003', ' ', '\001', '(', '\005', '\022', '\023', '\n', '\013', 'i', 'n', 's', '_', 'g', 'p', 
    's', '_', 'a', 'g', 'e', '\030', '\004', ' ', '\001', '(', '\005', '\022', '\026', '\n', '\016', 'i', 'n', 's', '_', 'c', 'a', 'r', '_', 's', 't', 
    'a', 't', 'u', 's', '\030', '\005', ' ', '\001', '(', '\005', '\022', '\022', '\n', '\n', 'i', 'n', 's', '_', 's', 't', 'a', 't', 'u', 's', '\030', 
    '\006', ' ', '\001', '(', '\005', '\"', 'X', '\n', '\022', 'I', 'n', 's', '_', 'c', 'a', 'r', '_', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 
    'p', 'e', '\022', '$', '\n', ' ', 'I', 'N', 'S', '_', 'C', 'A', 'R', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'R', 'E', 'C', 'E', 
    'I', 'V', 'E', 'W', 'H', 'E', 'E', 'L', 'S', 'P', 'E', 'E', 'D', '\020', '\000', '\022', '\034', '\n', '\030', 'I', 'N', 'S', '_', 'C', 'A', 
    'R', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'N', 'O', 'R', 'E', 'C', 'E', 'I', 'V', 'E', '\020', '\001', '\"', 'g', '\n', '\016', 'I', 
    'n', 's', '_', 's', 't', 'a', 't', 'u', 's', 'T', 'y', 'p', 'e', '\022', '\023', '\n', '\017', 'I', 'N', 'S', '_', 'S', 'T', 'A', 'T', 
    'U', 'S', '_', 'N', 'O', 'N', 'E', '\020', '\000', '\022', '%', '\n', '!', 'I', 'N', 'S', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'A', 
    'T', 'T', 'I', 'T', 'U', 'D', 'E', 'I', 'N', 'I', 'T', 'I', 'A', 'L', 'I', 'Z', 'A', 'T', 'I', 'O', 'N', '\020', '\001', '\022', '\031', 
    '\n', '\025', 'I', 'N', 'S', '_', 'S', 'T', 'A', 'T', 'U', 'S', '_', 'N', 'A', 'V', 'I', 'G', 'A', 'T', 'I', 'O', 'N', '\020', '\002', 
    '\"', 'o', '\n', '\013', 'I', 'n', 's', '_', 's', 't', 'd', '_', '5', '0', '7', '\022', '\023', '\n', '\013', 'i', 'n', 's', '_', 's', 't', 
    'd', '_', 'l', 'a', 't', '\030', '\001', ' ', '\001', '(', '\001', '\022', '\023', '\n', '\013', 'i', 'n', 's', '_', 's', 't', 'd', '_', 'l', 'o', 
    'n', '\030', '\002', ' ', '\001', '(', '\001', '\022', '\033', '\n', '\023', 'i', 'n', 's', '_', 's', 't', 'd', '_', 'l', 'o', 'c', 'a', 't', 'h', 
    'e', 'i', 'g', 'h', 't', '\030', '\003', ' ', '\001', '(', '\001', '\022', '\031', '\n', '\021', 'i', 'n', 'i', 'n', 's', '_', 's', 't', 'd', '_', 
    'h', 'e', 'a', 'd', 'i', 'n', 'g', '\030', '\004', ' ', '\001', '(', '\001', '\"', 'I', '\n', '\031', 'I', 'n', 's', '_', 'l', 'a', 't', 'i', 
    't', 'u', 'd', 'e', 'l', 'o', 'n', 'g', 'i', 't', 'u', 'd', 'e', '_', '5', '0', '4', '\022', '\025', '\n', '\r', 'i', 'n', 's', '_', 
    '_', 'l', 'a', 't', 'i', 't', 'u', 'd', 'e', '\030', '\001', ' ', '\001', '(', '\001', '\022', '\025', '\n', '\r', 'i', 'n', 's', '_', 'l', 'o', 
    'n', 'g', 'i', 't', 'u', 'd', 'e', '\030', '\002', ' ', '\001', '(', '\001', '\"', 'S', '\n', '\r', 'I', 'n', 's', '_', 's', 'p', 'e', 'e', 
    'd', '_', '5', '0', '5', '\022', '\024', '\n', '\014', 'i', 'n', 's', '_', 'n', 'o', 'r', 't', 'h', 's', 'p', 'd', '\030', '\001', ' ', '\001', 
    '(', '\001', '\022', '\023', '\n', '\013', 'i', 'n', 's', '_', 'e', 'a', 's', 't', 's', 'p', 'd', '\030', '\002', ' ', '\001', '(', '\001', '\022', '\027', 
    '\n', '\017', 'i', 'n', 's', '_', 't', 'o', 'g', 'r', 'o', 'u', 'n', 'd', 's', 'p', 'd', '\030', '\003', ' ', '\001', '(', '\001', '\"', 'c', 
    '\n', '\030', 'I', 'n', 's', '_', 'h', 'e', 'a', 'd', 'i', 'n', 'g', 'p', 'i', 't', 'c', 'h', 'r', 'o', 'l', 'l', '_', '5', '0', 
    '2', '\022', '\026', '\n', '\016', 'i', 'n', 's', '_', 'p', 'i', 't', 'c', 'h', 'a', 'n', 'g', 'l', 'e', '\030', '\001', ' ', '\001', '(', '\001', 
    '\022', '\025', '\n', '\r', 'i', 'n', 's', '_', 'r', 'o', 'l', 'l', 'a', 'n', 'g', 'l', 'e', '\030', '\002', ' ', '\001', '(', '\001', '\022', '\030', 
    '\n', '\020', 'i', 'n', 's', '_', 'h', 'e', 'a', 'd', 'i', 'n', 'g', 'a', 'n', 'g', 'l', 'e', '\030', '\003', ' ', '\001', '(', '\001', '\"', 
    'B', '\n', '\025', 'I', 'n', 's', '_', 'h', 'e', 'i', 'g', 'h', 't', 'a', 'n', 'd', 't', 'i', 'm', 'e', '_', '5', '0', '3', '\022', 
    '\027', '\n', '\017', 'i', 'n', 's', '_', 'l', 'o', 'c', 'a', 't', 'h', 'e', 'i', 'g', 'h', 't', '\030', '\001', ' ', '\001', '(', '\001', '\022', 
    '\020', '\n', '\010', 'i', 'n', 's', '_', 't', 'i', 'm', 'e', '\030', '\002', ' ', '\001', '(', '\005', '\"', '>', '\n', '\014', 'I', 'n', 's', '_', 
    'g', 'y', 'r', 'o', '_', '5', '0', '1', '\022', '\016', '\n', '\006', 'g', 'y', 'r', 'o', '_', 'x', '\030', '\001', ' ', '\001', '(', '\001', '\022', 
    '\016', '\n', '\006', 'g', 'y', 'r', 'o', '_', 'y', '\030', '\002', ' ', '\001', '(', '\001', '\022', '\016', '\n', '\006', 'g', 'y', 'r', 'o', '_', 'z', 
    '\030', '\003', ' ', '\001', '(', '\001', '\"', ':', '\n', '\013', 'I', 'n', 's', '_', 'a', 'c', 'c', '_', '5', '0', '0', '\022', '\r', '\n', '\005', 
    'a', 'c', 'c', '_', 'x', '\030', '\001', ' ', '\001', '(', '\001', '\022', '\r', '\n', '\005', 'a', 'c', 'c', '_', 'y', '\030', '\002', ' ', '\001', '(', 
    '\001', '\022', '\r', '\n', '\005', 'a', 'c', 'c', '_', 'z', '\030', '\003', ' ', '\001', '(', '\001', '\"', '\211', '\034', '\n', '\004', 'C', 'x', '7', '5', 
    '\022', 'C', '\n', '\024', 'g', 'w', '_', 'e', 'm', 's', '_', 's', 't', 's', '_', '0', 'x', '1', '5', '1', '_', '1', '5', '1', '\030', 
    '\001', ' ', '\001', '(', '\013', '2', '%', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 
    'w', '_', 'e', 'm', 's', '_', 's', 't', 's', '_', '0', 'x', '1', '5', '1', '_', '1', '5', '1', '\022', '=', '\n', '\021', 'e', 's', 
    'p', '_', 'r', 'a', 'w', '_', '0', 'x', '2', '1', '2', '_', '2', '1', '2', '\030', '\002', ' ', '\001', '(', '\013', '2', '\"', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'r', 'a', 'w', '_', '0', 'x', 
    '2', '1', '2', '_', '2', '1', '2', '\022', 'E', '\n', '\025', 'g', 'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', 
    '3', '1', '0', '_', '3', '1', '0', '\030', '\003', ' ', '\001', '(', '\013', '2', '&', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'c', 'm', '_', 'd', 'o', 'o', 'r', '_', '0', 'x', '3', '1', '0', '_', 
    '3', '1', '0', '\022', '5', '\n', '\r', 'p', 'a', 'm', '_', '0', 'x', '2', '7', '0', '_', '2', '7', '0', '\030', '\004', ' ', '\001', '(', 
    '\013', '2', '\036', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 
    'x', '2', '7', '0', '_', '2', '7', '0', '\022', '5', '\n', '\r', 'p', 'a', 'm', '_', '0', 'x', '2', '7', '1', '_', '2', '7', '1', 
    '\030', '\005', ' ', '\001', '(', '\013', '2', '\036', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 
    'P', 'a', 'm', '_', '0', 'x', '2', '7', '1', '_', '2', '7', '1', '\022', '5', '\n', '\r', 'p', 'a', 'm', '_', '0', 'x', '2', '7', 
    '2', '_', '2', '7', '2', '\030', '\006', ' ', '\001', '(', '\013', '2', '\036', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'P', 'a', 'm', '_', '0', 'x', '2', '7', '2', '_', '2', '7', '2', '\022', '5', '\n', '\r', 'm', 'r', 'r', 
    '_', '0', 'x', '2', '3', '8', '_', '2', '3', '8', '\030', '\007', ' ', '\001', '(', '\013', '2', '\036', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '3', '8', '_', '2', '3', '8', '\022', '5', 
    '\n', '\r', 'm', 'r', 'r', '_', '0', 'x', '2', '3', '9', '_', '2', '3', '9', '\030', '\010', ' ', '\001', '(', '\013', '2', '\036', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', '0', 'x', '2', '3', '9', '_', 
    '2', '3', '9', '\022', 'I', '\n', '\027', 'e', 's', 'p', '_', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '_', '0', 'x', '2', '3', 
    '5', '_', '2', '3', '5', '\030', '\t', ' ', '\001', '(', '\013', '2', '(', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '_', '0', 'x', '2', '3', '5', '_', 
    '2', '3', '5', '\022', 'G', '\n', '\026', 'e', 's', 'p', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '2', '3', '4', 
    '_', '2', '3', '4', '\030', '\n', ' ', '\001', '(', '\013', '2', '\'', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '2', '3', '4', '_', '2', '3', 
    '4', '\022', 'G', '\n', '\026', 'e', 'p', 's', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '1', '7', '6', '_', '1', 
    '7', '6', '\030', '\013', ' ', '\001', '(', '\013', '2', '\'', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 
    's', '.', 'E', 'p', 's', '_', 'a', 'd', 'v', 'a', 'n', 'c', 'e', 'd', '_', '0', 'x', '1', '7', '6', '_', '1', '7', '6', '\022', 
    'G', '\n', '\026', 'e', 's', 'p', '_', 'w', 'h', 'l', 'p', 'u', 'l', 's', 'e', '_', '0', 'x', '2', '3', '6', '_', '2', '3', '6', 
    '\030', '\014', ' ', '\001', '(', '\013', '2', '\'', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 
    'E', 's', 'p', '_', 'w', 'h', 'l', 'p', 'u', 'l', 's', 'e', '_', '0', 'x', '2', '3', '6', '_', '2', '3', '6', '\022', 'I', '\n', 
    '\027', 'i', 'p', 'm', '_', 'r', 'i', 'g', 'h', 't', 'l', 'i', 'n', 'e', '_', '0', 'x', '4', '9', '0', '_', '4', '9', '0', '\030', 
    '\r', ' ', '\001', '(', '\013', '2', '(', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 
    'p', 'm', '_', 'r', 'i', 'g', 'h', 't', 'l', 'i', 'n', 'e', '_', '0', 'x', '4', '9', '0', '_', '4', '9', '0', '\022', 'C', '\n', 
    '\024', 's', 'a', 's', '_', 's', 'e', 'n', 's', 'o', 'r', '_', '0', 'x', '1', '7', '5', '_', '1', '7', '5', '\030', '\016', ' ', '\001', 
    '(', '\013', '2', '%', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'S', 'a', 's', '_', 
    's', 'e', 'n', 's', 'o', 'r', '_', '0', 'x', '1', '7', '5', '_', '1', '7', '5', '\022', '=', '\n', '\021', 'g', 'w', '_', 'b', 'o', 
    'd', 'y', '_', '0', 'x', '3', '2', '1', '_', '3', '2', '1', '\030', '\017', ' ', '\001', '(', '\013', '2', '\"', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '2', '1', 
    '_', '3', '2', '1', '\022', 'G', '\n', '\026', 'i', 'p', 'm', '_', 'l', 'e', 'f', 't', 'l', 'i', 'n', 'e', '_', '0', 'x', '2', '7', 
    '8', '_', '2', '7', '8', '\030', '\020', ' ', '\001', '(', '\013', '2', '\'', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'I', 'p', 'm', '_', 'l', 'e', 'f', 't', 'l', 'i', 'n', 'e', '_', '0', 'x', '2', '7', '8', '_', '2', 
    '7', '8', '\022', 'O', '\n', '\032', 'g', 'w', '_', 'e', 'm', 's', '_', 'e', 'n', 'g', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', 
    '1', '4', '2', '_', '1', '4', '2', '\030', '\021', ' ', '\001', '(', '\013', '2', '+', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'e', 'm', 's', '_', 'e', 'n', 'g', 's', 't', 'a', 't', 'u', 's', '_', '0', 
    'x', '1', '4', '2', '_', '1', '4', '2', '\022', 'O', '\n', '\032', 'g', 'w', '_', 't', 'b', 'o', 'x', '_', 'l', 'o', 'c', 'a', 't', 
    'i', 'o', 'n', '_', '0', 'x', '5', '8', '0', '_', '5', '8', '0', '\030', '\022', ' ', '\001', '(', '\013', '2', '+', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'b', 'o', 'x', '_', 'l', 'o', 'c', 'a', 
    't', 'i', 'o', 'n', '_', '0', 'x', '5', '8', '0', '_', '5', '8', '0', '\022', '5', '\n', '\r', 's', 'r', 's', '_', '0', 'x', '3', 
    '5', '0', '_', '3', '5', '0', '\030', '\023', ' ', '\001', '(', '\013', '2', '\036', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'S', 'r', 's', '_', '0', 'x', '3', '5', '0', '_', '3', '5', '0', '\022', '5', '\n', '\r', 'i', 'p', 
    'm', '_', '0', 'x', '2', '4', '5', '_', '2', '4', '5', '\030', '\024', ' ', '\001', '(', '\013', '2', '\036', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'p', 'm', '_', '0', 'x', '2', '4', '5', '_', '2', '4', '5', '\022', 
    'G', '\n', '\026', 'g', 'w', '_', 'e', 'm', 's', '_', 't', 'q', 'w', 'h', 'l', '_', '0', 'x', '1', '1', '1', '_', '1', '1', '1', 
    '\030', '\025', ' ', '\001', '(', '\013', '2', '\'', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 
    'G', 'w', '_', 'e', 'm', 's', '_', 't', 'q', 'w', 'h', 'l', '_', '0', 'x', '1', '1', '1', '_', '1', '1', '1', '\022', 'M', '\n', 
    '\031', 'g', 'w', '_', 't', 'c', 'u', '_', 'g', 'e', 'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 'x', '1', '2', '3', '_', '1', '2', 
    '3', '\030', '\026', ' ', '\001', '(', '\013', '2', '*', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'G', 'w', '_', 't', 'c', 'u', '_', 'g', 'e', 'a', 'r', 'i', 'n', 'f', 'o', '_', '0', 'x', '1', '2', '3', '_', '1', '2', 
    '3', '\022', 'G', '\n', '\026', 'e', 's', 'p', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '_', '0', 'x', '2', '4', '1', '_', '2', 
    '4', '1', '\030', '\027', ' ', '\001', '(', '\013', '2', '\'', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 
    's', '.', 'E', 's', 'p', '_', 'p', 'r', 'e', 's', 's', 'u', 'r', 'e', '_', '0', 'x', '2', '4', '1', '_', '2', '4', '1', '\022', 
    'C', '\n', '\024', 'e', 's', 'p', '_', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '\030', '\030', 
    ' ', '\001', '(', '\013', '2', '%', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 
    'p', '_', 's', 't', 'a', 't', 'u', 's', '_', '0', 'x', '2', '4', '3', '_', '2', '4', '3', '\022', '?', '\n', '\022', 'e', 's', 'p', 
    '_', 'a', 'x', 'a', 'y', '_', '0', 'x', '2', '4', '2', '_', '2', '4', '2', '\030', '\031', ' ', '\001', '(', '\013', '2', '#', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'a', 'x', 'a', 'y', '_', '0', 
    'x', '2', '4', '2', '_', '2', '4', '2', '\022', 'C', '\n', '\024', 'g', 'w', '_', 's', 'w', 'm', '_', 'm', 'r', 'r', '_', '0', 'x', 
    '3', '1', 'b', '_', '3', '1', 'b', '\030', '\032', ' ', '\001', '(', '\013', '2', '%', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 
    'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'm', 'r', 'r', '_', '0', 'x', '3', '1', 'b', '_', '3', 
    '1', 'b', '\022', 'E', '\n', '\025', 'g', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', 
    '1', 'a', '\030', '\033', ' ', '\001', '(', '\013', '2', '&', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 
    's', '.', 'G', 'w', '_', 's', 'w', 'm', '_', 'b', 'o', 'd', 'y', '_', '0', 'x', '3', '1', 'a', '_', '3', '1', 'a', '\022', 'A', 
    '\n', '\023', 'g', 'w', '_', 'e', 'm', 's', '_', 't', 'q', '_', '0', 'x', '1', '0', '1', '_', '1', '0', '1', '\030', '\034', ' ', '\001', 
    '(', '\013', '2', '$', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'e', 
    'm', 's', '_', 't', 'q', '_', '0', 'x', '1', '0', '1', '_', '1', '0', '1', '\022', '=', '\n', '\021', 'e', 's', 'p', '_', 'v', 'l', 
    'c', '_', '0', 'x', '2', '2', '3', '_', '2', '2', '3', '\030', '\035', ' ', '\001', '(', '\013', '2', '\"', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'v', 'l', 'c', '_', '0', 'x', '2', '2', '3', '_', 
    '2', '2', '3', '\022', 'G', '\n', '\026', 'g', 'w', '_', 'e', 'm', 's', '_', 'w', 'h', 'l', 't', 'q', '_', '0', 'x', '1', '0', '7', 
    '_', '1', '0', '7', '\030', '\036', ' ', '\001', '(', '\013', '2', '\'', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 
    'b', 'u', 's', '.', 'G', 'w', '_', 'e', 'm', 's', '_', 'w', 'h', 'l', 't', 'q', '_', '0', 'x', '1', '0', '7', '_', '1', '0', 
    '7', '\022', '=', '\n', '\021', 'a', 'b', 's', '_', 's', 't', 's', '_', '0', 'x', '2', '2', '1', '_', '2', '2', '1', '\030', '\037', ' ', 
    '\001', '(', '\013', '2', '\"', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'A', 'b', 's', 
    '_', 's', 't', 's', '_', '0', 'x', '2', '2', '1', '_', '2', '2', '1', '\022', 'A', '\n', '\023', 'm', 'r', 'r', '_', 'f', 'r', 'o', 
    'b', 'j', '_', '0', 'x', '4', '8', '0', '_', '4', '8', '0', '\030', ' ', ' ', '\001', '(', '\013', '2', '$', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', 'f', 'r', 'o', 'b', 'j', '_', '0', 'x', '4', 
    '8', '0', '_', '4', '8', '0', '\022', '5', '\n', '\r', 'm', 'r', 'r', '_', '0', 'x', '2', '4', '6', '_', '2', '4', '6', '\030', '!', 
    ' ', '\001', '(', '\013', '2', '\036', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 
    'r', '_', '0', 'x', '2', '4', '6', '_', '2', '4', '6', '\022', 'C', '\n', '\024', 'g', 'w', '_', 'm', 'p', '5', '_', 'n', 'a', 'v', 
    '_', '0', 'x', '5', '3', '3', '_', '5', '3', '3', '\030', '\"', ' ', '\001', '(', '\013', '2', '%', '.', 'j', 'm', 'c', '_', 'a', 'u', 
    't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'm', 'p', '5', '_', 'n', 'a', 'v', '_', '0', 'x', '5', '3', 
    '3', '_', '5', '3', '3', '\022', ';', '\n', '\020', 'g', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', '3', '0', 
    '\030', '#', ' ', '\001', '(', '\013', '2', '!', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 
    'G', 'w', '_', 'm', 'p', '5', '_', '0', 'x', '5', '3', '0', '_', '5', '3', '0', '\022', 'A', '\n', '\023', 'm', 'r', 'r', '_', 'f', 
    'r', 'o', 'b', 'j', '_', '0', 'x', '2', '7', '9', '_', '2', '7', '9', '\030', '$', ' ', '\001', '(', '\013', '2', '$', '.', 'j', 'm', 
    'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'M', 'r', 'r', '_', 'f', 'r', 'o', 'b', 'j', '_', '0', 
    'x', '2', '7', '9', '_', '2', '7', '9', '\022', '9', '\n', '\017', 'g', 'w', '_', 'i', 'c', '_', '0', 'x', '5', '1', '0', '_', '5', 
    '1', '0', '\030', '%', ' ', '\001', '(', '\013', '2', ' ', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 
    's', '.', 'G', 'w', '_', 'i', 'c', '_', '0', 'x', '5', '1', '0', '_', '5', '1', '0', '\022', 'C', '\n', '\024', 'a', 'b', 's', '_', 
    'w', 'h', 'l', 's', 'p', 'd', '_', '0', 'x', '2', '1', '1', '_', '2', '1', '1', '\030', '&', ' ', '\001', '(', '\013', '2', '%', '.', 
    'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'A', 'b', 's', '_', 'w', 'h', 'l', 's', 'p', 
    'd', '_', '0', 'x', '2', '1', '1', '_', '2', '1', '1', '\022', ';', '\n', '\020', 'e', 's', 'p', '_', 't', 'q', '_', '0', 'x', '2', 
    '1', '7', '_', '2', '1', '7', '\030', '\'', ' ', '\001', '(', '\013', '2', '!', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 't', 'q', '_', '0', 'x', '2', '1', '7', '_', '2', '1', '7', '\022', '?', '\n', 
    '\022', 'e', 's', 'p', '_', 'r', 'p', 'm', 'f', '_', '0', 'x', '2', '1', '3', '_', '2', '1', '3', '\030', '(', ' ', '\001', '(', '\013', 
    '2', '#', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 's', 'p', '_', 'r', 'p', 
    'm', 'f', '_', '0', 'x', '2', '1', '3', '_', '2', '1', '3', '\022', 'C', '\n', '\024', 'g', 'w', '_', 'i', 'c', '_', 't', 'i', 'm', 
    'e', '_', '0', 'x', '5', '8', '1', '_', '5', '8', '1', '\030', ')', ' ', '\001', '(', '\013', '2', '%', '.', 'j', 'm', 'c', '_', 'a', 
    'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'i', 'c', '_', 't', 'i', 'm', 'e', '_', '0', 'x', '5', 
    '8', '1', '_', '5', '8', '1', '\022', '5', '\n', '\r', 'a', 'f', 's', '_', '0', 'x', '5', 'a', '0', '_', '5', 'a', '0', '\030', '*', 
    ' ', '\001', '(', '\013', '2', '\036', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'A', 'f', 
    's', '_', '0', 'x', '5', 'a', '0', '_', '5', 'a', '0', '\022', ';', '\n', '\020', 's', 'o', 'd', '_', 'n', 'm', '_', '0', 'x', '4', 
    '4', '0', '_', '4', '4', '0', '\030', '+', ' ', '\001', '(', '\013', '2', '!', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 
    'a', 'n', 'b', 'u', 's', '.', 'S', 'o', 'd', '_', 'n', 'm', '_', '0', 'x', '4', '4', '0', '_', '4', '4', '0', '\022', '9', '\n', 
    '\017', 'g', 'w', '_', 'n', 'm', '_', '0', 'x', '4', '6', '0', '_', '4', '6', '0', '\030', ',', ' ', '\001', '(', '\013', '2', ' ', '.', 
    'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 'n', 'm', '_', '0', 'x', '4', 
    '6', '0', '_', '4', '6', '0', '\022', '5', '\n', '\r', 'e', 'p', 's', '_', '0', 'x', '2', '6', '0', '_', '2', '6', '0', '\030', '-', 
    ' ', '\001', '(', '\013', '2', '\036', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'E', 'p', 
    's', '_', '0', 'x', '2', '6', '0', '_', '2', '6', '0', '\022', '5', '\n', '\r', 's', 'o', 'd', '_', '0', 'x', '2', '7', '5', '_', 
    '2', '7', '5', '\030', '.', ' ', '\001', '(', '\013', '2', '\036', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 
    'u', 's', '.', 'S', 'o', 'd', '_', '0', 'x', '2', '7', '5', '_', '2', '7', '5', '\022', 'G', '\n', '\026', 'g', 'w', '_', 't', 'p', 
    'm', 's', '_', 't', 'i', 'r', 'e', '_', '0', 'x', '3', '6', '1', '_', '3', '6', '1', '\030', '/', ' ', '\001', '(', '\013', '2', '\'', 
    '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'G', 'w', '_', 't', 'p', 'm', 's', '_', 
    't', 'i', 'r', 'e', '_', '0', 'x', '3', '6', '1', '_', '3', '6', '1', '\022', ';', '\n', '\020', 'i', 'n', 's', '_', 'd', 'a', 't', 
    'a', 'i', 'n', 'f', 'o', '_', '5', '0', '6', '\030', '0', ' ', '\001', '(', '\013', '2', '!', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 
    'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'n', 's', '_', 'd', 'a', 't', 'a', 'i', 'n', 'f', 'o', '_', '5', '0', '6', 
    '\022', '1', '\n', '\013', 'i', 'n', 's', '_', 's', 't', 'd', '_', '5', '0', '7', '\030', '1', ' ', '\001', '(', '\013', '2', '\034', '.', 'j', 
    'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'n', 's', '_', 's', 't', 'd', '_', '5', '0', 
    '7', '\022', 'M', '\n', '\031', 'i', 'n', 's', '_', 'l', 'a', 't', 'i', 't', 'u', 'd', 'e', 'l', 'o', 'n', 'g', 'i', 't', 'u', 'd', 
    'e', '_', '5', '0', '4', '\030', '2', ' ', '\001', '(', '\013', '2', '*', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 
    'n', 'b', 'u', 's', '.', 'I', 'n', 's', '_', 'l', 'a', 't', 'i', 't', 'u', 'd', 'e', 'l', 'o', 'n', 'g', 'i', 't', 'u', 'd', 
    'e', '_', '5', '0', '4', '\022', '5', '\n', '\r', 'i', 'n', 's', '_', 's', 'p', 'e', 'e', 'd', '_', '5', '0', '5', '\030', '3', ' ', 
    '\001', '(', '\013', '2', '\036', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'n', 's', 
    '_', 's', 'p', 'e', 'e', 'd', '_', '5', '0', '5', '\022', 'K', '\n', '\030', 'i', 'n', 's', '_', 'h', 'e', 'a', 'd', 'i', 'n', 'g', 
    'p', 'i', 't', 'c', 'h', 'r', 'o', 'l', 'l', '_', '5', '0', '2', '\030', '4', ' ', '\001', '(', '\013', '2', ')', '.', 'j', 'm', 'c', 
    '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'n', 's', '_', 'h', 'e', 'a', 'd', 'i', 'n', 'g', 'p', 
    'i', 't', 'c', 'h', 'r', 'o', 'l', 'l', '_', '5', '0', '2', '\022', 'E', '\n', '\025', 'i', 'n', 's', '_', 'h', 'e', 'i', 'g', 'h', 
    't', 'a', 'n', 'd', 't', 'i', 'm', 'e', '_', '5', '0', '3', '\030', '5', ' ', '\001', '(', '\013', '2', '&', '.', 'j', 'm', 'c', '_', 
    'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 'n', 's', '_', 'h', 'e', 'i', 'g', 'h', 't', 'a', 'n', 'd', 
    't', 'i', 'm', 'e', '_', '5', '0', '3', '\022', '3', '\n', '\014', 'i', 'n', 's', '_', 'g', 'y', 'r', 'o', '_', '5', '0', '1', '\030', 
    '6', ' ', '\001', '(', '\013', '2', '\035', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', '.', 'I', 
    'n', 's', '_', 'g', 'y', 'r', 'o', '_', '5', '0', '1', '\022', '1', '\n', '\013', 'i', 'n', 's', '_', 'a', 'c', 'c', '_', '5', '0', 
    '0', '\030', '7', ' ', '\001', '(', '\013', '2', '\034', '.', 'j', 'm', 'c', '_', 'a', 'u', 't', 'o', '.', 'c', 'a', 'n', 'b', 'u', 's', 
    '.', 'I', 'n', 's', '_', 'a', 'c', 'c', '_', '5', '0', '0', 
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 118637);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/canbus/proto/cx75.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto

const ::google::protobuf::EnumDescriptor* Abs_whlspd_0x211_211_Abs_whlspdreristatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[0];
}
bool Abs_whlspd_0x211_211_Abs_whlspdreristatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Abs_whlspd_0x211_211_Abs_whlspdreristatusType Abs_whlspd_0x211_211::ABS_WHLSPDRERISTATUS_VALID;
const Abs_whlspd_0x211_211_Abs_whlspdreristatusType Abs_whlspd_0x211_211::ABS_WHLSPDRERISTATUS_INVALID;
const Abs_whlspd_0x211_211_Abs_whlspdreristatusType Abs_whlspd_0x211_211::Abs_whlspdreristatusType_MIN;
const Abs_whlspd_0x211_211_Abs_whlspdreristatusType Abs_whlspd_0x211_211::Abs_whlspdreristatusType_MAX;
const int Abs_whlspd_0x211_211::Abs_whlspdreristatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[1];
}
bool Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Abs_whlspd_0x211_211_Abs_whlspdrelestatusType Abs_whlspd_0x211_211::ABS_WHLSPDRELESTATUS_VALID;
const Abs_whlspd_0x211_211_Abs_whlspdrelestatusType Abs_whlspd_0x211_211::ABS_WHLSPDRELESTATUS_INVALID;
const Abs_whlspd_0x211_211_Abs_whlspdrelestatusType Abs_whlspd_0x211_211::Abs_whlspdrelestatusType_MIN;
const Abs_whlspd_0x211_211_Abs_whlspdrelestatusType Abs_whlspd_0x211_211::Abs_whlspdrelestatusType_MAX;
const int Abs_whlspd_0x211_211::Abs_whlspdrelestatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[2];
}
bool Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType Abs_whlspd_0x211_211::ABS_WHLSPDFRNTRISTATUS_VALID;
const Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType Abs_whlspd_0x211_211::ABS_WHLSPDFRNTRISTATUS_INVALID;
const Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType Abs_whlspd_0x211_211::Abs_whlspdfrntristatusType_MIN;
const Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType Abs_whlspd_0x211_211::Abs_whlspdfrntristatusType_MAX;
const int Abs_whlspd_0x211_211::Abs_whlspdfrntristatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[3];
}
bool Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType Abs_whlspd_0x211_211::ABS_WHLSPDFRNTLESTATUS_VALID;
const Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType Abs_whlspd_0x211_211::ABS_WHLSPDFRNTLESTATUS_INVALID;
const Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType Abs_whlspd_0x211_211::Abs_whlspdfrntlestatusType_MIN;
const Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType Abs_whlspd_0x211_211::Abs_whlspdfrntlestatusType_MAX;
const int Abs_whlspd_0x211_211::Abs_whlspdfrntlestatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[4];
}
bool Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType Gw_ems_sts_0x151_151::EMS_ATSDRIVINGMODESTATUS_STANDARD;
const Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType Gw_ems_sts_0x151_151::EMS_ATSDRIVINGMODESTATUS_SPORT;
const Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType Gw_ems_sts_0x151_151::EMS_ATSDRIVINGMODESTATUS_ECO;
const Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType Gw_ems_sts_0x151_151::EMS_ATSDRIVINGMODESTATUS_INVALID;
const Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType Gw_ems_sts_0x151_151::Ems_atsdrivingmodestatusType_MIN;
const Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType Gw_ems_sts_0x151_151::Ems_atsdrivingmodestatusType_MAX;
const int Gw_ems_sts_0x151_151::Ems_atsdrivingmodestatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[5];
}
bool Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType Gw_ems_sts_0x151_151::EMS_ENGINESTOPSTARTSTATUS_NON_START_STOPMODE;
const Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType Gw_ems_sts_0x151_151::EMS_ENGINESTOPSTARTSTATUS_ENGINESTANDBY;
const Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType Gw_ems_sts_0x151_151::EMS_ENGINESTOPSTARTSTATUS_ENGINESTOPPED;
const Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType Gw_ems_sts_0x151_151::EMS_ENGINESTOPSTARTSTATUS_STARTERRESTART;
const Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType Gw_ems_sts_0x151_151::EMS_ENGINESTOPSTARTSTATUS_ENGINERESTART;
const Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType Gw_ems_sts_0x151_151::EMS_ENGINESTOPSTARTSTATUS_ENGINEOPERATION;
const Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType Gw_ems_sts_0x151_151::EMS_ENGINESTOPSTARTSTATUS_ENGINEAUTO_STOPPING;
const Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType Gw_ems_sts_0x151_151::EMS_ENGINESTOPSTARTSTATUS_RESERVED;
const Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType Gw_ems_sts_0x151_151::Ems_enginestopstartstatusType_MIN;
const Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType Gw_ems_sts_0x151_151::Ems_enginestopstartstatusType_MAX;
const int Gw_ems_sts_0x151_151::Ems_enginestopstartstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[6];
}
bool Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType Gw_ems_sts_0x151_151::EMS_CRUISECONTROLSTATUS_CRUISECONTROLOOFF;
const Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType Gw_ems_sts_0x151_151::EMS_CRUISECONTROLSTATUS_ACTIVE;
const Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType Gw_ems_sts_0x151_151::EMS_CRUISECONTROLSTATUS_STANDBY;
const Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType Gw_ems_sts_0x151_151::EMS_CRUISECONTROLSTATUS_ERROR;
const Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType Gw_ems_sts_0x151_151::Ems_cruisecontrolstatusType_MIN;
const Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType Gw_ems_sts_0x151_151::Ems_cruisecontrolstatusType_MAX;
const int Gw_ems_sts_0x151_151::Ems_cruisecontrolstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[7];
}
bool Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType Gw_ems_sts_0x151_151::EMS_DRIVINGMODECHANGE_FAULT_FLAG_NORMAL;
const Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType Gw_ems_sts_0x151_151::EMS_DRIVINGMODECHANGE_FAULT_FLAG_FAULT;
const Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType Gw_ems_sts_0x151_151::Ems_drivingmodechange_fault_flagType_MIN;
const Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType Gw_ems_sts_0x151_151::Ems_drivingmodechange_fault_flagType_MAX;
const int Gw_ems_sts_0x151_151::Ems_drivingmodechange_fault_flagType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[8];
}
bool Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_raw_0x212_212_Esp_vxwwheelrrvalidType Esp_raw_0x212_212::ESP_VXWWHEELRRVALID_VALID;
const Esp_raw_0x212_212_Esp_vxwwheelrrvalidType Esp_raw_0x212_212::ESP_VXWWHEELRRVALID_INVALID;
const Esp_raw_0x212_212_Esp_vxwwheelrrvalidType Esp_raw_0x212_212::Esp_vxwwheelrrvalidType_MIN;
const Esp_raw_0x212_212_Esp_vxwwheelrrvalidType Esp_raw_0x212_212::Esp_vxwwheelrrvalidType_MAX;
const int Esp_raw_0x212_212::Esp_vxwwheelrrvalidType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[9];
}
bool Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_raw_0x212_212_Esp_vxwwheelrlvalidType Esp_raw_0x212_212::ESP_VXWWHEELRLVALID_VALID;
const Esp_raw_0x212_212_Esp_vxwwheelrlvalidType Esp_raw_0x212_212::ESP_VXWWHEELRLVALID_INVALID;
const Esp_raw_0x212_212_Esp_vxwwheelrlvalidType Esp_raw_0x212_212::Esp_vxwwheelrlvalidType_MIN;
const Esp_raw_0x212_212_Esp_vxwwheelrlvalidType Esp_raw_0x212_212::Esp_vxwwheelrlvalidType_MAX;
const int Esp_raw_0x212_212::Esp_vxwwheelrlvalidType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[10];
}
bool Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_raw_0x212_212_Esp_vxwwheelfrvalidType Esp_raw_0x212_212::ESP_VXWWHEELFRVALID_VALID;
const Esp_raw_0x212_212_Esp_vxwwheelfrvalidType Esp_raw_0x212_212::ESP_VXWWHEELFRVALID_INVALID;
const Esp_raw_0x212_212_Esp_vxwwheelfrvalidType Esp_raw_0x212_212::Esp_vxwwheelfrvalidType_MIN;
const Esp_raw_0x212_212_Esp_vxwwheelfrvalidType Esp_raw_0x212_212::Esp_vxwwheelfrvalidType_MAX;
const int Esp_raw_0x212_212::Esp_vxwwheelfrvalidType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_raw_0x212_212_Esp_vxwwheelflvalidType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[11];
}
bool Esp_raw_0x212_212_Esp_vxwwheelflvalidType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_raw_0x212_212_Esp_vxwwheelflvalidType Esp_raw_0x212_212::ESP_VXWWHEELFLVALID_VALID;
const Esp_raw_0x212_212_Esp_vxwwheelflvalidType Esp_raw_0x212_212::ESP_VXWWHEELFLVALID_INVALID;
const Esp_raw_0x212_212_Esp_vxwwheelflvalidType Esp_raw_0x212_212::Esp_vxwwheelflvalidType_MIN;
const Esp_raw_0x212_212_Esp_vxwwheelflvalidType Esp_raw_0x212_212::Esp_vxwwheelflvalidType_MAX;
const int Esp_raw_0x212_212::Esp_vxwwheelflvalidType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[12];
}
bool Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_doorstsrearriType Gw_bcm_door_0x310_310::BCM_DOORSTSREARRI_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorstsrearriType Gw_bcm_door_0x310_310::BCM_DOORSTSREARRI_CLOSED;
const Gw_bcm_door_0x310_310_Bcm_doorstsrearriType Gw_bcm_door_0x310_310::BCM_DOORSTSREARRI_OPEN;
const Gw_bcm_door_0x310_310_Bcm_doorstsrearriType Gw_bcm_door_0x310_310::BCM_DOORSTSREARRI_FAULT;
const Gw_bcm_door_0x310_310_Bcm_doorstsrearriType Gw_bcm_door_0x310_310::Bcm_doorstsrearriType_MIN;
const Gw_bcm_door_0x310_310_Bcm_doorstsrearriType Gw_bcm_door_0x310_310::Bcm_doorstsrearriType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_doorstsrearriType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[13];
}
bool Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSREARLE_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSREARLE_LOCKED;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSREARLE_UNLOCKED;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSREARLE_FAULT;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType Gw_bcm_door_0x310_310::Bcm_doorlockstsrearleType_MIN;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType Gw_bcm_door_0x310_310::Bcm_doorlockstsrearleType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_doorlockstsrearleType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[14];
}
bool Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSFRNTRI_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSFRNTRI_LOCKED;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSFRNTRI_UNLOCKED;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSFRNTRI_FAULT;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType Gw_bcm_door_0x310_310::Bcm_doorlockstsfrntriType_MIN;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType Gw_bcm_door_0x310_310::Bcm_doorlockstsfrntriType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_doorlockstsfrntriType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[15];
}
bool Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSFRNTLE_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSFRNTLE_LOCKED;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSFRNTLE_UNLOCKED;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSFRNTLE_FAULT;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType Gw_bcm_door_0x310_310::Bcm_doorlockstsfrntleType_MIN;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType Gw_bcm_door_0x310_310::Bcm_doorlockstsfrntleType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_doorlockstsfrntleType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_antitheftstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[16];
}
bool Gw_bcm_door_0x310_310_Bcm_antitheftstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_antitheftstsType Gw_bcm_door_0x310_310::BCM_ANTITHEFTSTS_FORTIFY;
const Gw_bcm_door_0x310_310_Bcm_antitheftstsType Gw_bcm_door_0x310_310::BCM_ANTITHEFTSTS_LIFT_THE_FORTIFICATION;
const Gw_bcm_door_0x310_310_Bcm_antitheftstsType Gw_bcm_door_0x310_310::BCM_ANTITHEFTSTS_WARNING;
const Gw_bcm_door_0x310_310_Bcm_antitheftstsType Gw_bcm_door_0x310_310::BCM_ANTITHEFTSTS_ABNORMAL_FORTIFICATION;
const Gw_bcm_door_0x310_310_Bcm_antitheftstsType Gw_bcm_door_0x310_310::Bcm_antitheftstsType_MIN;
const Gw_bcm_door_0x310_310_Bcm_antitheftstsType Gw_bcm_door_0x310_310::Bcm_antitheftstsType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_antitheftstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[17];
}
bool Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_loadsensitivityType Gw_bcm_door_0x310_310::BCM_LOADSENSITIVITY_INACITVE;
const Gw_bcm_door_0x310_310_Bcm_loadsensitivityType Gw_bcm_door_0x310_310::BCM_LOADSENSITIVITY_ACTIVE;
const Gw_bcm_door_0x310_310_Bcm_loadsensitivityType Gw_bcm_door_0x310_310::Bcm_loadsensitivityType_MIN;
const Gw_bcm_door_0x310_310_Bcm_loadsensitivityType Gw_bcm_door_0x310_310::Bcm_loadsensitivityType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_loadsensitivityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[18];
}
bool Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 31:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_NO_LOCK_UNLOCK_ACTION;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_PE_LOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_RKE_LOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_LEAVE_VEHICLE_LOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_MASTER_LOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_FINGER_LOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_RKE_30S_AUTOLOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_PE_30S_AUTOLOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_NEAR_TO_VEHICLE_30S_AUTOLOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_TBOX_LOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_SPEEDLOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_DIAGNOSTIC_LOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_TBOX_30S_AUTOLOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_LOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_PE_UNLOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_RKE_UNLOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_NEAR_TO_VEHICLE_UNLOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_MASTER_UNLOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_FINGER_UNLOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_CRASHUNLOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_KEYREMOVALUNLOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_ENGOFFUNLOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_TBOX_UNLCOK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_DIAGNOSTIC_UNLOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_KEY_FORGOTTEN_TO_UNLOCK_THE_CAR;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::BCM_LOCKUNLOCKFEEDBACK_ANY_OTHER_UNLOCK;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::Bcm_lockunlockfeedbackType_MIN;
const Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::Bcm_lockunlockfeedbackType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_lockunlockfeedbackType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[19];
}
bool Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSTRUNK_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSTRUNK_LOCKED;
const Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSTRUNK_UNLOCKED;
const Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSTRUNK_FAULT;
const Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType Gw_bcm_door_0x310_310::Bcm_doorlockststrunkType_MIN;
const Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType Gw_bcm_door_0x310_310::Bcm_doorlockststrunkType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_doorlockststrunkType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorststrunkType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[20];
}
bool Gw_bcm_door_0x310_310_Bcm_doorststrunkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_doorststrunkType Gw_bcm_door_0x310_310::BCM_DOORSTSTRUNK_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorststrunkType Gw_bcm_door_0x310_310::BCM_DOORSTSTRUNK_CLOSED;
const Gw_bcm_door_0x310_310_Bcm_doorststrunkType Gw_bcm_door_0x310_310::BCM_DOORSTSTRUNK_OPEN;
const Gw_bcm_door_0x310_310_Bcm_doorststrunkType Gw_bcm_door_0x310_310::BCM_DOORSTSTRUNK_FAULT;
const Gw_bcm_door_0x310_310_Bcm_doorststrunkType Gw_bcm_door_0x310_310::Bcm_doorststrunkType_MIN;
const Gw_bcm_door_0x310_310_Bcm_doorststrunkType Gw_bcm_door_0x310_310::Bcm_doorststrunkType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_doorststrunkType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[21];
}
bool Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType Gw_bcm_door_0x310_310::BCM_TRUNKDOORPREUNLOCKSTS_NO_USED_NO_ACTION;
const Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType Gw_bcm_door_0x310_310::BCM_TRUNKDOORPREUNLOCKSTS_PREUNLOCKED;
const Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType Gw_bcm_door_0x310_310::Bcm_trunkdoorpreunlockstsType_MIN;
const Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType Gw_bcm_door_0x310_310::Bcm_trunkdoorpreunlockstsType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_trunkdoorpreunlockstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[22];
}
bool Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_doorstsrearleType Gw_bcm_door_0x310_310::BCM_DOORSTSREARLE_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorstsrearleType Gw_bcm_door_0x310_310::BCM_DOORSTSREARLE_CLOSED;
const Gw_bcm_door_0x310_310_Bcm_doorstsrearleType Gw_bcm_door_0x310_310::BCM_DOORSTSREARLE_OPEN;
const Gw_bcm_door_0x310_310_Bcm_doorstsrearleType Gw_bcm_door_0x310_310::BCM_DOORSTSREARLE_FAULT;
const Gw_bcm_door_0x310_310_Bcm_doorstsrearleType Gw_bcm_door_0x310_310::Bcm_doorstsrearleType_MIN;
const Gw_bcm_door_0x310_310_Bcm_doorstsrearleType Gw_bcm_door_0x310_310::Bcm_doorstsrearleType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_doorstsrearleType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[23];
}
bool Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_frontwiperstsType Gw_bcm_door_0x310_310::BCM_FRONTWIPERSTS_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_frontwiperstsType Gw_bcm_door_0x310_310::BCM_FRONTWIPERSTS_OFF;
const Gw_bcm_door_0x310_310_Bcm_frontwiperstsType Gw_bcm_door_0x310_310::BCM_FRONTWIPERSTS_LOW;
const Gw_bcm_door_0x310_310_Bcm_frontwiperstsType Gw_bcm_door_0x310_310::BCM_FRONTWIPERSTS_HIGH;
const Gw_bcm_door_0x310_310_Bcm_frontwiperstsType Gw_bcm_door_0x310_310::Bcm_frontwiperstsType_MIN;
const Gw_bcm_door_0x310_310_Bcm_frontwiperstsType Gw_bcm_door_0x310_310::Bcm_frontwiperstsType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_frontwiperstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[24];
}
bool Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_enginehoodstsType Gw_bcm_door_0x310_310::BCM_ENGINEHOODSTS_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_enginehoodstsType Gw_bcm_door_0x310_310::BCM_ENGINEHOODSTS_CLOSED;
const Gw_bcm_door_0x310_310_Bcm_enginehoodstsType Gw_bcm_door_0x310_310::BCM_ENGINEHOODSTS_OPEN;
const Gw_bcm_door_0x310_310_Bcm_enginehoodstsType Gw_bcm_door_0x310_310::BCM_ENGINEHOODSTS_FAULT;
const Gw_bcm_door_0x310_310_Bcm_enginehoodstsType Gw_bcm_door_0x310_310::Bcm_enginehoodstsType_MIN;
const Gw_bcm_door_0x310_310_Bcm_enginehoodstsType Gw_bcm_door_0x310_310::Bcm_enginehoodstsType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_enginehoodstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_plg_driverswType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[25];
}
bool Gw_bcm_door_0x310_310_Bcm_plg_driverswType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_plg_driverswType Gw_bcm_door_0x310_310::BCM_PLG_DRIVERSW_RELEASE;
const Gw_bcm_door_0x310_310_Bcm_plg_driverswType Gw_bcm_door_0x310_310::BCM_PLG_DRIVERSW_PRESS;
const Gw_bcm_door_0x310_310_Bcm_plg_driverswType Gw_bcm_door_0x310_310::BCM_PLG_DRIVERSW_STUCK;
const Gw_bcm_door_0x310_310_Bcm_plg_driverswType Gw_bcm_door_0x310_310::BCM_PLG_DRIVERSW_RESERVED;
const Gw_bcm_door_0x310_310_Bcm_plg_driverswType Gw_bcm_door_0x310_310::Bcm_plg_driverswType_MIN;
const Gw_bcm_door_0x310_310_Bcm_plg_driverswType Gw_bcm_door_0x310_310::Bcm_plg_driverswType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_plg_driverswType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_windowscmdType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[26];
}
bool Gw_bcm_door_0x310_310_Bcm_windowscmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_windowscmdType Gw_bcm_door_0x310_310::BCM_WINDOWSCMD_INVALID;
const Gw_bcm_door_0x310_310_Bcm_windowscmdType Gw_bcm_door_0x310_310::BCM_WINDOWSCMD_WINDOWS_UP;
const Gw_bcm_door_0x310_310_Bcm_windowscmdType Gw_bcm_door_0x310_310::BCM_WINDOWSCMD_WINDOWS_DOWN;
const Gw_bcm_door_0x310_310_Bcm_windowscmdType Gw_bcm_door_0x310_310::BCM_WINDOWSCMD_WINDOWS_VENT;
const Gw_bcm_door_0x310_310_Bcm_windowscmdType Gw_bcm_door_0x310_310::BCM_WINDOWSCMD_WINDOWS_STOP;
const Gw_bcm_door_0x310_310_Bcm_windowscmdType Gw_bcm_door_0x310_310::Bcm_windowscmdType_MIN;
const Gw_bcm_door_0x310_310_Bcm_windowscmdType Gw_bcm_door_0x310_310::Bcm_windowscmdType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_windowscmdType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[27];
}
bool Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_rearwiperstsType Gw_bcm_door_0x310_310::BCM_REARWIPERSTS_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_rearwiperstsType Gw_bcm_door_0x310_310::BCM_REARWIPERSTS_OFF;
const Gw_bcm_door_0x310_310_Bcm_rearwiperstsType Gw_bcm_door_0x310_310::BCM_REARWIPERSTS_ON;
const Gw_bcm_door_0x310_310_Bcm_rearwiperstsType Gw_bcm_door_0x310_310::BCM_REARWIPERSTS_RESERVED;
const Gw_bcm_door_0x310_310_Bcm_rearwiperstsType Gw_bcm_door_0x310_310::Bcm_rearwiperstsType_MIN;
const Gw_bcm_door_0x310_310_Bcm_rearwiperstsType Gw_bcm_door_0x310_310::Bcm_rearwiperstsType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_rearwiperstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[28];
}
bool Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType Gw_bcm_door_0x310_310::BCM_DOORSTSFRNTRI_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType Gw_bcm_door_0x310_310::BCM_DOORSTSFRNTRI_CLOSED;
const Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType Gw_bcm_door_0x310_310::BCM_DOORSTSFRNTRI_OPEN;
const Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType Gw_bcm_door_0x310_310::BCM_DOORSTSFRNTRI_FAULT;
const Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType Gw_bcm_door_0x310_310::Bcm_doorstsfrntriType_MIN;
const Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType Gw_bcm_door_0x310_310::Bcm_doorstsfrntriType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_doorstsfrntriType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[29];
}
bool Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType Gw_bcm_door_0x310_310::BCM_TURNINDICATORSTS_OFF;
const Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType Gw_bcm_door_0x310_310::BCM_TURNINDICATORSTS_LEON;
const Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType Gw_bcm_door_0x310_310::BCM_TURNINDICATORSTS_RION;
const Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType Gw_bcm_door_0x310_310::BCM_TURNINDICATORSTS_LEANDRION;
const Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType Gw_bcm_door_0x310_310::Bcm_turnindicatorstsType_MIN;
const Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType Gw_bcm_door_0x310_310::Bcm_turnindicatorstsType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_turnindicatorstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[30];
}
bool Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType Gw_bcm_door_0x310_310::BCM_DOORSTSFRNTLE_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType Gw_bcm_door_0x310_310::BCM_DOORSTSFRNTLE_CLOSED;
const Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType Gw_bcm_door_0x310_310::BCM_DOORSTSFRNTLE_OPEN;
const Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType Gw_bcm_door_0x310_310::BCM_DOORSTSFRNTLE_FAULT;
const Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType Gw_bcm_door_0x310_310::Bcm_doorstsfrntleType_MIN;
const Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType Gw_bcm_door_0x310_310::Bcm_doorstsfrntleType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_doorstsfrntleType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[31];
}
bool Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSREARRI_NO_USED;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSREARRI_LOCKED;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSREARRI_UNLOCKED;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType Gw_bcm_door_0x310_310::BCM_DOORLOCKSTSREARRI_FAULT;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType Gw_bcm_door_0x310_310::Bcm_doorlockstsrearriType_MIN;
const Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType Gw_bcm_door_0x310_310::Bcm_doorlockstsrearriType_MAX;
const int Gw_bcm_door_0x310_310::Bcm_doorlockstsrearriType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x270_270_Pam_esp_target_gear_requestType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[32];
}
bool Pam_0x270_270_Pam_esp_target_gear_requestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x270_270_Pam_esp_target_gear_requestType Pam_0x270_270::PAM_ESP_TARGET_GEAR_REQUEST_NO_REQUEST;
const Pam_0x270_270_Pam_esp_target_gear_requestType Pam_0x270_270::PAM_ESP_TARGET_GEAR_REQUEST_PARK;
const Pam_0x270_270_Pam_esp_target_gear_requestType Pam_0x270_270::PAM_ESP_TARGET_GEAR_REQUEST_REVERSE;
const Pam_0x270_270_Pam_esp_target_gear_requestType Pam_0x270_270::PAM_ESP_TARGET_GEAR_REQUEST_NEUTRAL;
const Pam_0x270_270_Pam_esp_target_gear_requestType Pam_0x270_270::PAM_ESP_TARGET_GEAR_REQUEST_DRIVE;
const Pam_0x270_270_Pam_esp_target_gear_requestType Pam_0x270_270::Pam_esp_target_gear_requestType_MIN;
const Pam_0x270_270_Pam_esp_target_gear_requestType Pam_0x270_270::Pam_esp_target_gear_requestType_MAX;
const int Pam_0x270_270::Pam_esp_target_gear_requestType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x270_270_Pam_brakefunctionmodeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[33];
}
bool Pam_0x270_270_Pam_brakefunctionmodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x270_270_Pam_brakefunctionmodeType Pam_0x270_270::PAM_BRAKEFUNCTIONMODE_NO_ACTION;
const Pam_0x270_270_Pam_brakefunctionmodeType Pam_0x270_270::PAM_BRAKEFUNCTIONMODE_AUTOMATICPARK;
const Pam_0x270_270_Pam_brakefunctionmodeType Pam_0x270_270::Pam_brakefunctionmodeType_MIN;
const Pam_0x270_270_Pam_brakefunctionmodeType Pam_0x270_270::Pam_brakefunctionmodeType_MAX;
const int Pam_0x270_270::Pam_brakefunctionmodeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x270_270_Stopstartinhibit_apaType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[34];
}
bool Pam_0x270_270_Stopstartinhibit_apaType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x270_270_Stopstartinhibit_apaType Pam_0x270_270::STOPSTARTINHIBIT_APA_FALSE;
const Pam_0x270_270_Stopstartinhibit_apaType Pam_0x270_270::STOPSTARTINHIBIT_APA_TRUE;
const Pam_0x270_270_Stopstartinhibit_apaType Pam_0x270_270::Stopstartinhibit_apaType_MIN;
const Pam_0x270_270_Stopstartinhibit_apaType Pam_0x270_270::Stopstartinhibit_apaType_MAX;
const int Pam_0x270_270::Stopstartinhibit_apaType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x270_270_Pam_apafType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[35];
}
bool Pam_0x270_270_Pam_apafType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x270_270_Pam_apafType Pam_0x270_270::PAM_APAF_NORMAL;
const Pam_0x270_270_Pam_apafType Pam_0x270_270::PAM_APAF_APA_FAILURE;
const Pam_0x270_270_Pam_apafType Pam_0x270_270::Pam_apafType_MIN;
const Pam_0x270_270_Pam_apafType Pam_0x270_270::Pam_apafType_MAX;
const int Pam_0x270_270::Pam_apafType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x270_270_Pam_cmdepsstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[36];
}
bool Pam_0x270_270_Pam_cmdepsstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x270_270_Pam_cmdepsstsType Pam_0x270_270::PAM_CMDEPSSTS_NO_REQUEST;
const Pam_0x270_270_Pam_cmdepsstsType Pam_0x270_270::PAM_CMDEPSSTS_CONTROL_EPS_REQUEST;
const Pam_0x270_270_Pam_cmdepsstsType Pam_0x270_270::PAM_CMDEPSSTS_EPS_CONTROL;
const Pam_0x270_270_Pam_cmdepsstsType Pam_0x270_270::Pam_cmdepsstsType_MIN;
const Pam_0x270_270_Pam_cmdepsstsType Pam_0x270_270::Pam_cmdepsstsType_MAX;
const int Pam_0x270_270::Pam_cmdepsstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x270_270_Pam_stsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[37];
}
bool Pam_0x270_270_Pam_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x270_270_Pam_stsType Pam_0x270_270::PAM_STS_OFF;
const Pam_0x270_270_Pam_stsType Pam_0x270_270::PAM_STS_STANDBY_STANDBY_ENABLE;
const Pam_0x270_270_Pam_stsType Pam_0x270_270::PAM_STS_SEARCHING_ENABLE;
const Pam_0x270_270_Pam_stsType Pam_0x270_270::PAM_STS_GUIDANCE_ACTIVE_ACTIVE;
const Pam_0x270_270_Pam_stsType Pam_0x270_270::PAM_STS_COMPLETED;
const Pam_0x270_270_Pam_stsType Pam_0x270_270::PAM_STS_FAILURE_DISABLE;
const Pam_0x270_270_Pam_stsType Pam_0x270_270::PAM_STS_TERMINATED;
const Pam_0x270_270_Pam_stsType Pam_0x270_270::PAM_STS_RESERVED;
const Pam_0x270_270_Pam_stsType Pam_0x270_270::Pam_stsType_MIN;
const Pam_0x270_270_Pam_stsType Pam_0x270_270::Pam_stsType_MAX;
const int Pam_0x270_270::Pam_stsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x270_270_Pam_brakemodestsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[38];
}
bool Pam_0x270_270_Pam_brakemodestsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x270_270_Pam_brakemodestsType Pam_0x270_270::PAM_BRAKEMODESTS_INIT;
const Pam_0x270_270_Pam_brakemodestsType Pam_0x270_270::PAM_BRAKEMODESTS_STANDBY;
const Pam_0x270_270_Pam_brakemodestsType Pam_0x270_270::PAM_BRAKEMODESTS_ACTIVE;
const Pam_0x270_270_Pam_brakemodestsType Pam_0x270_270::PAM_BRAKEMODESTS_MANEUVERFINISHED;
const Pam_0x270_270_Pam_brakemodestsType Pam_0x270_270::PAM_BRAKEMODESTS_SUSPEND;
const Pam_0x270_270_Pam_brakemodestsType Pam_0x270_270::PAM_BRAKEMODESTS_ABORT;
const Pam_0x270_270_Pam_brakemodestsType Pam_0x270_270::Pam_brakemodestsType_MIN;
const Pam_0x270_270_Pam_brakemodestsType Pam_0x270_270::Pam_brakemodestsType_MAX;
const int Pam_0x270_270::Pam_brakemodestsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x270_270_Pam_failurebrakemodeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[39];
}
bool Pam_0x270_270_Pam_failurebrakemodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x270_270_Pam_failurebrakemodeType Pam_0x270_270::PAM_FAILUREBRAKEMODE_IDLE_NO_BRAKING;
const Pam_0x270_270_Pam_failurebrakemodeType Pam_0x270_270::PAM_FAILUREBRAKEMODE_COMFORTABLE_RESERVED;
const Pam_0x270_270_Pam_failurebrakemodeType Pam_0x270_270::PAM_FAILUREBRAKEMODE_EMERGENCY;
const Pam_0x270_270_Pam_failurebrakemodeType Pam_0x270_270::PAM_FAILUREBRAKEMODE_RESERVED;
const Pam_0x270_270_Pam_failurebrakemodeType Pam_0x270_270::Pam_failurebrakemodeType_MIN;
const Pam_0x270_270_Pam_failurebrakemodeType Pam_0x270_270::Pam_failurebrakemodeType_MAX;
const int Pam_0x270_270::Pam_failurebrakemodeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_infodisplayreqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[40];
}
bool Pam_0x271_271_Pam_infodisplayreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_NO_REQUEST;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_FORWARD_AGAIN;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_TURN_LEVER;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_GEAR_P;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_CONFIRM_SWITCH;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_SEARCHINGPROCESS;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_DRIVE_FW;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_STOP;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_FUNCTION_SELECT;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_FUNCTION_OFF;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_PROCESS_BAR;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_PPSC_REQUEST_ONLY;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_CPSC_REQUEST_ONLY;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_PPSC_CPSC_REQUEST;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_GEAR_R;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_GEAR_D;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_DRIVE_BW;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_SLOW_DOWN;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_RELEASE_BRAKE_ANDSTEERING_WHEEL;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_CLOSE_DOOR;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_BUCKLE_SEAT_BELT;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_REPRESS_DEAD_MAN_SWITCH;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_PRESS_BRAKE_PEDAL;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_GEAR_R_AND_BRAKE;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_FUNCTION_COMPLETE;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_REQ_FUNCTION_NOT_AVAILABLE;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::PAM_INFODISPLAYREQ_RESERVED;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::Pam_infodisplayreqType_MIN;
const Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::Pam_infodisplayreqType_MAX;
const int Pam_0x271_271::Pam_infodisplayreqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_objectstsflmType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[41];
}
bool Pam_0x271_271_Pam_objectstsflmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x271_271_Pam_objectstsflmType Pam_0x271_271::PAM_OBJECTSTSFLM_NO_OBJECT;
const Pam_0x271_271_Pam_objectstsflmType Pam_0x271_271::PAM_OBJECTSTSFLM_OBJECT_IN_ZONE_1;
const Pam_0x271_271_Pam_objectstsflmType Pam_0x271_271::PAM_OBJECTSTSFLM_OBJECT_ZONE_2;
const Pam_0x271_271_Pam_objectstsflmType Pam_0x271_271::PAM_OBJECTSTSFLM_OBJECT_ZONE_3;
const Pam_0x271_271_Pam_objectstsflmType Pam_0x271_271::PAM_OBJECTSTSFLM_OBJECT_ZONE_4;
const Pam_0x271_271_Pam_objectstsflmType Pam_0x271_271::PAM_OBJECTSTSFLM_OBJECT_ZONE_5;
const Pam_0x271_271_Pam_objectstsflmType Pam_0x271_271::Pam_objectstsflmType_MIN;
const Pam_0x271_271_Pam_objectstsflmType Pam_0x271_271::Pam_objectstsflmType_MAX;
const int Pam_0x271_271::Pam_objectstsflmType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_objectstsflcType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[42];
}
bool Pam_0x271_271_Pam_objectstsflcType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x271_271_Pam_objectstsflcType Pam_0x271_271::PAM_OBJECTSTSFLC_NO_OBJECT;
const Pam_0x271_271_Pam_objectstsflcType Pam_0x271_271::PAM_OBJECTSTSFLC_OBJECT_IN_ZONE_1;
const Pam_0x271_271_Pam_objectstsflcType Pam_0x271_271::PAM_OBJECTSTSFLC_OBJECT_ZONE_2;
const Pam_0x271_271_Pam_objectstsflcType Pam_0x271_271::PAM_OBJECTSTSFLC_OBJECT_ZONE_3;
const Pam_0x271_271_Pam_objectstsflcType Pam_0x271_271::Pam_objectstsflcType_MIN;
const Pam_0x271_271_Pam_objectstsflcType Pam_0x271_271::Pam_objectstsflcType_MAX;
const int Pam_0x271_271::Pam_objectstsflcType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_objectstsfrcType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[43];
}
bool Pam_0x271_271_Pam_objectstsfrcType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x271_271_Pam_objectstsfrcType Pam_0x271_271::PAM_OBJECTSTSFRC_NO_OBJECT;
const Pam_0x271_271_Pam_objectstsfrcType Pam_0x271_271::PAM_OBJECTSTSFRC_OBJECT_IN_ZONE_1;
const Pam_0x271_271_Pam_objectstsfrcType Pam_0x271_271::PAM_OBJECTSTSFRC_OBJECT_ZONE_2;
const Pam_0x271_271_Pam_objectstsfrcType Pam_0x271_271::PAM_OBJECTSTSFRC_OBJECT_ZONE_3;
const Pam_0x271_271_Pam_objectstsfrcType Pam_0x271_271::Pam_objectstsfrcType_MIN;
const Pam_0x271_271_Pam_objectstsfrcType Pam_0x271_271::Pam_objectstsfrcType_MAX;
const int Pam_0x271_271::Pam_objectstsfrcType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_objectstsfrmType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[44];
}
bool Pam_0x271_271_Pam_objectstsfrmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x271_271_Pam_objectstsfrmType Pam_0x271_271::PAM_OBJECTSTSFRM_NO_OBJECT;
const Pam_0x271_271_Pam_objectstsfrmType Pam_0x271_271::PAM_OBJECTSTSFRM_OBJECT_IN_ZONE_1;
const Pam_0x271_271_Pam_objectstsfrmType Pam_0x271_271::PAM_OBJECTSTSFRM_OBJECT_ZONE_2;
const Pam_0x271_271_Pam_objectstsfrmType Pam_0x271_271::PAM_OBJECTSTSFRM_OBJECT_ZONE_3;
const Pam_0x271_271_Pam_objectstsfrmType Pam_0x271_271::PAM_OBJECTSTSFRM_OBJECT_ZONE_4;
const Pam_0x271_271_Pam_objectstsfrmType Pam_0x271_271::PAM_OBJECTSTSFRM_OBJECT_ZONE_5;
const Pam_0x271_271_Pam_objectstsfrmType Pam_0x271_271::Pam_objectstsfrmType_MIN;
const Pam_0x271_271_Pam_objectstsfrmType Pam_0x271_271::Pam_objectstsfrmType_MAX;
const int Pam_0x271_271::Pam_objectstsfrmType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_objectstsrlmType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[45];
}
bool Pam_0x271_271_Pam_objectstsrlmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x271_271_Pam_objectstsrlmType Pam_0x271_271::PAM_OBJECTSTSRLM_NO_OBJECT;
const Pam_0x271_271_Pam_objectstsrlmType Pam_0x271_271::PAM_OBJECTSTSRLM_OBJECT_IN_ZONE1;
const Pam_0x271_271_Pam_objectstsrlmType Pam_0x271_271::PAM_OBJECTSTSRLM_OBJECT_ZONE2;
const Pam_0x271_271_Pam_objectstsrlmType Pam_0x271_271::PAM_OBJECTSTSRLM_OBJECT_ZONE3;
const Pam_0x271_271_Pam_objectstsrlmType Pam_0x271_271::PAM_OBJECTSTSRLM_OBJECT_ZONE4;
const Pam_0x271_271_Pam_objectstsrlmType Pam_0x271_271::PAM_OBJECTSTSRLM_OBJECT_ZONE5;
const Pam_0x271_271_Pam_objectstsrlmType Pam_0x271_271::PAM_OBJECTSTSRLM_OBJECT_ZONE6;
const Pam_0x271_271_Pam_objectstsrlmType Pam_0x271_271::PAM_OBJECTSTSRLM_OBJECT_ZONE7;
const Pam_0x271_271_Pam_objectstsrlmType Pam_0x271_271::PAM_OBJECTSTSRLM_RESERVED;
const Pam_0x271_271_Pam_objectstsrlmType Pam_0x271_271::Pam_objectstsrlmType_MIN;
const Pam_0x271_271_Pam_objectstsrlmType Pam_0x271_271::Pam_objectstsrlmType_MAX;
const int Pam_0x271_271::Pam_objectstsrlmType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_objectstsrlcType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[46];
}
bool Pam_0x271_271_Pam_objectstsrlcType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x271_271_Pam_objectstsrlcType Pam_0x271_271::PAM_OBJECTSTSRLC_NO_OBJECT;
const Pam_0x271_271_Pam_objectstsrlcType Pam_0x271_271::PAM_OBJECTSTSRLC_OBJECT_IN_ZONE_1;
const Pam_0x271_271_Pam_objectstsrlcType Pam_0x271_271::PAM_OBJECTSTSRLC_OBJECT_ZONE_2;
const Pam_0x271_271_Pam_objectstsrlcType Pam_0x271_271::PAM_OBJECTSTSRLC_OBJECT_ZONE_3;
const Pam_0x271_271_Pam_objectstsrlcType Pam_0x271_271::Pam_objectstsrlcType_MIN;
const Pam_0x271_271_Pam_objectstsrlcType Pam_0x271_271::Pam_objectstsrlcType_MAX;
const int Pam_0x271_271::Pam_objectstsrlcType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_objectstsrrcType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[47];
}
bool Pam_0x271_271_Pam_objectstsrrcType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x271_271_Pam_objectstsrrcType Pam_0x271_271::PAM_OBJECTSTSRRC_NO_OBJECT;
const Pam_0x271_271_Pam_objectstsrrcType Pam_0x271_271::PAM_OBJECTSTSRRC_OBJECT_IN_ZONE_1;
const Pam_0x271_271_Pam_objectstsrrcType Pam_0x271_271::PAM_OBJECTSTSRRC_OBJECT_ZONE_2;
const Pam_0x271_271_Pam_objectstsrrcType Pam_0x271_271::PAM_OBJECTSTSRRC_OBJECT_ZONE_3;
const Pam_0x271_271_Pam_objectstsrrcType Pam_0x271_271::Pam_objectstsrrcType_MIN;
const Pam_0x271_271_Pam_objectstsrrcType Pam_0x271_271::Pam_objectstsrrcType_MAX;
const int Pam_0x271_271::Pam_objectstsrrcType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_objectstsrrmType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[48];
}
bool Pam_0x271_271_Pam_objectstsrrmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x271_271_Pam_objectstsrrmType Pam_0x271_271::PAM_OBJECTSTSRRM_NO_OBJECT;
const Pam_0x271_271_Pam_objectstsrrmType Pam_0x271_271::PAM_OBJECTSTSRRM_OBJECT_IN_ZONE_1;
const Pam_0x271_271_Pam_objectstsrrmType Pam_0x271_271::PAM_OBJECTSTSRRM_OBJECT_ZONE_2;
const Pam_0x271_271_Pam_objectstsrrmType Pam_0x271_271::PAM_OBJECTSTSRRM_OBJECT_ZONE_3;
const Pam_0x271_271_Pam_objectstsrrmType Pam_0x271_271::PAM_OBJECTSTSRRM_OBJECT_ZONE_4;
const Pam_0x271_271_Pam_objectstsrrmType Pam_0x271_271::PAM_OBJECTSTSRRM_OBJECT_ZONE_5;
const Pam_0x271_271_Pam_objectstsrrmType Pam_0x271_271::PAM_OBJECTSTSRRM_OBJECT_ZONE_6;
const Pam_0x271_271_Pam_objectstsrrmType Pam_0x271_271::PAM_OBJECTSTSRRM_OBJECT_ZONE_7;
const Pam_0x271_271_Pam_objectstsrrmType Pam_0x271_271::Pam_objectstsrrmType_MIN;
const Pam_0x271_271_Pam_objectstsrrmType Pam_0x271_271::Pam_objectstsrrmType_MAX;
const int Pam_0x271_271::Pam_objectstsrrmType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_chimecmdsoundstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[49];
}
bool Pam_0x271_271_Pam_chimecmdsoundstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x271_271_Pam_chimecmdsoundstatusType Pam_0x271_271::PAM_CHIMECMDSOUNDSTATUS_NOWARNING;
const Pam_0x271_271_Pam_chimecmdsoundstatusType Pam_0x271_271::PAM_CHIMECMDSOUNDSTATUS_FRONTSYSTEMWARNING;
const Pam_0x271_271_Pam_chimecmdsoundstatusType Pam_0x271_271::PAM_CHIMECMDSOUNDSTATUS_REARSYSTEMWARNING;
const Pam_0x271_271_Pam_chimecmdsoundstatusType Pam_0x271_271::PAM_CHIMECMDSOUNDSTATUS_APA;
const Pam_0x271_271_Pam_chimecmdsoundstatusType Pam_0x271_271::Pam_chimecmdsoundstatusType_MIN;
const Pam_0x271_271_Pam_chimecmdsoundstatusType Pam_0x271_271::Pam_chimecmdsoundstatusType_MAX;
const int Pam_0x271_271::Pam_chimecmdsoundstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_rearsystemworkstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[50];
}
bool Pam_0x271_271_Pam_rearsystemworkstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x271_271_Pam_rearsystemworkstsType Pam_0x271_271::PAM_REARSYSTEMWORKSTS_DISABLE;
const Pam_0x271_271_Pam_rearsystemworkstsType Pam_0x271_271::PAM_REARSYSTEMWORKSTS_ENABLE;
const Pam_0x271_271_Pam_rearsystemworkstsType Pam_0x271_271::PAM_REARSYSTEMWORKSTS_ACTIVE;
const Pam_0x271_271_Pam_rearsystemworkstsType Pam_0x271_271::PAM_REARSYSTEMWORKSTS_FAILED;
const Pam_0x271_271_Pam_rearsystemworkstsType Pam_0x271_271::Pam_rearsystemworkstsType_MIN;
const Pam_0x271_271_Pam_rearsystemworkstsType Pam_0x271_271::Pam_rearsystemworkstsType_MAX;
const int Pam_0x271_271::Pam_rearsystemworkstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_frontsystemworkstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[51];
}
bool Pam_0x271_271_Pam_frontsystemworkstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x271_271_Pam_frontsystemworkstsType Pam_0x271_271::PAM_FRONTSYSTEMWORKSTS_DISABLE;
const Pam_0x271_271_Pam_frontsystemworkstsType Pam_0x271_271::PAM_FRONTSYSTEMWORKSTS_ENABLE;
const Pam_0x271_271_Pam_frontsystemworkstsType Pam_0x271_271::PAM_FRONTSYSTEMWORKSTS_ACTIVE;
const Pam_0x271_271_Pam_frontsystemworkstsType Pam_0x271_271::PAM_FRONTSYSTEMWORKSTS_FAILED;
const Pam_0x271_271_Pam_frontsystemworkstsType Pam_0x271_271::Pam_frontsystemworkstsType_MIN;
const Pam_0x271_271_Pam_frontsystemworkstsType Pam_0x271_271::Pam_frontsystemworkstsType_MAX;
const int Pam_0x271_271::Pam_frontsystemworkstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_parkingbarstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[52];
}
bool Pam_0x271_271_Pam_parkingbarstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x271_271_Pam_parkingbarstsType Pam_0x271_271::PAM_PARKINGBARSTS_DISPLAY_OFF;
const Pam_0x271_271_Pam_parkingbarstsType Pam_0x271_271::PAM_PARKINGBARSTS_DISPLAY_ON_FROM_TOP_TO_BOTTOM;
const Pam_0x271_271_Pam_parkingbarstsType Pam_0x271_271::PAM_PARKINGBARSTS_DISPLAY_ON_FROM_BOTTOM_TO_TOP;
const Pam_0x271_271_Pam_parkingbarstsType Pam_0x271_271::Pam_parkingbarstsType_MIN;
const Pam_0x271_271_Pam_parkingbarstsType Pam_0x271_271::Pam_parkingbarstsType_MAX;
const int Pam_0x271_271::Pam_parkingbarstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_chimecmdsoundcadenceType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[53];
}
bool Pam_0x271_271_Pam_chimecmdsoundcadenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271::PAM_CHIMECMDSOUNDCADENCE_TONE_0_NO_WARNING;
const Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271::PAM_CHIMECMDSOUNDCADENCE_TONE_1;
const Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271::PAM_CHIMECMDSOUNDCADENCE_TONE_2;
const Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271::PAM_CHIMECMDSOUNDCADENCE_TONE_3;
const Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271::PAM_CHIMECMDSOUNDCADENCE_TONE_4;
const Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271::PAM_CHIMECMDSOUNDCADENCE_TONE_5;
const Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271::PAM_CHIMECMDSOUNDCADENCE_TONE_6;
const Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271::PAM_CHIMECMDSOUNDCADENCE_TONE_7;
const Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271::PAM_CHIMECMDSOUNDCADENCE_RPA_NOK;
const Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271::PAM_CHIMECMDSOUNDCADENCE_RPA_OK;
const Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271::PAM_CHIMECMDSOUNDCADENCE_TONE_10_PAM_FAILED_TONE;
const Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271::PAM_CHIMECMDSOUNDCADENCE_TONE_11_PAM_WARNING_TONE;
const Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271::PAM_CHIMECMDSOUNDCADENCE_TONE_12_PAM_SUCCESSFUL_TONE;
const Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271::Pam_chimecmdsoundcadenceType_MIN;
const Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271::Pam_chimecmdsoundcadenceType_MAX;
const int Pam_0x271_271::Pam_chimecmdsoundcadenceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x271_271_Pam_parkingbarpercentType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[54];
}
bool Pam_0x271_271_Pam_parkingbarpercentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_0PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_1PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_2PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_3PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_4PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_5PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_6PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_7PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_8PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_9PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_10PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_11PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_12PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_13PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_14PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_15PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_16PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_17PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_18PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_19PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_20PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_21PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_22PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_23PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_24PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_25PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_26PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_27PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_28PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_29PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_30PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_31PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_32PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_33PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_34PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_35PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_36PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_37PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_38PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_39PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_40PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_41PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_42PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_43PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_44PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_45PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_46PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_47PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_48PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_49PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_50PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_51PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_52PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_53PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_54PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_55PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_56PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_57PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_58PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_59PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_60PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_61PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_62PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_63PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_64PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_65PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_66PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_67PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_68PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_69PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_70PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_71PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_72PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_73PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_74PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_75PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_76PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_77PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_78PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_79PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_80PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_81PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_82PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_83PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_84PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_85PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_86PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_87PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_88PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_89PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_90PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_91PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_92PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_93PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_94PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_95PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_96PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_97PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_98PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_99PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_100PERCENT;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::PAM_PARKINGBARPERCENT_NO_DISPLAY_APA;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::Pam_parkingbarpercentType_MIN;
const Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::Pam_parkingbarpercentType_MAX;
const int Pam_0x271_271::Pam_parkingbarpercentType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Apa_parkslot_stateType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[55];
}
bool Pam_0x272_272_Apa_parkslot_stateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x272_272_Apa_parkslot_stateType Pam_0x272_272::APA_PARKSLOT_STATE_NO_SLOT;
const Pam_0x272_272_Apa_parkslot_stateType Pam_0x272_272::APA_PARKSLOT_STATE_SLOT_LEFT;
const Pam_0x272_272_Apa_parkslot_stateType Pam_0x272_272::APA_PARKSLOT_STATE_SLOT_RIGHT;
const Pam_0x272_272_Apa_parkslot_stateType Pam_0x272_272::APA_PARKSLOT_STATE_INVALID;
const Pam_0x272_272_Apa_parkslot_stateType Pam_0x272_272::Apa_parkslot_stateType_MIN;
const Pam_0x272_272_Apa_parkslot_stateType Pam_0x272_272::Apa_parkslot_stateType_MAX;
const int Pam_0x272_272::Apa_parkslot_stateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Sdg_objectsts_frsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[56];
}
bool Pam_0x272_272_Sdg_objectsts_frsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x272_272_Sdg_objectsts_frsType Pam_0x272_272::SDG_OBJECTSTS_FRS_NO_OBJECT;
const Pam_0x272_272_Sdg_objectsts_frsType Pam_0x272_272::SDG_OBJECTSTS_FRS_OBJECT_IN_ZONE_1;
const Pam_0x272_272_Sdg_objectsts_frsType Pam_0x272_272::SDG_OBJECTSTS_FRS_OBJECT_IN_ZONE_2;
const Pam_0x272_272_Sdg_objectsts_frsType Pam_0x272_272::SDG_OBJECTSTS_FRS_OBJECT_IN_ZONE_3;
const Pam_0x272_272_Sdg_objectsts_frsType Pam_0x272_272::Sdg_objectsts_frsType_MIN;
const Pam_0x272_272_Sdg_objectsts_frsType Pam_0x272_272::Sdg_objectsts_frsType_MAX;
const int Pam_0x272_272::Sdg_objectsts_frsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Sdg_objectstsrlsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[57];
}
bool Pam_0x272_272_Sdg_objectstsrlsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x272_272_Sdg_objectstsrlsType Pam_0x272_272::SDG_OBJECTSTSRLS_NO_OBJECT;
const Pam_0x272_272_Sdg_objectstsrlsType Pam_0x272_272::SDG_OBJECTSTSRLS_OBJECT_IN_ZONE_1;
const Pam_0x272_272_Sdg_objectstsrlsType Pam_0x272_272::SDG_OBJECTSTSRLS_OBJECT_IN_ZONE_2;
const Pam_0x272_272_Sdg_objectstsrlsType Pam_0x272_272::SDG_OBJECTSTSRLS_OBJECT_IN_ZONE_3;
const Pam_0x272_272_Sdg_objectstsrlsType Pam_0x272_272::Sdg_objectstsrlsType_MIN;
const Pam_0x272_272_Sdg_objectstsrlsType Pam_0x272_272::Sdg_objectstsrlsType_MAX;
const int Pam_0x272_272::Sdg_objectstsrlsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Apa_selectedsideType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[58];
}
bool Pam_0x272_272_Apa_selectedsideType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x272_272_Apa_selectedsideType Pam_0x272_272::APA_SELECTEDSIDE_NONE;
const Pam_0x272_272_Apa_selectedsideType Pam_0x272_272::APA_SELECTEDSIDE_LEFT;
const Pam_0x272_272_Apa_selectedsideType Pam_0x272_272::APA_SELECTEDSIDE_RIGHT;
const Pam_0x272_272_Apa_selectedsideType Pam_0x272_272::APA_SELECTEDSIDE_RESERVED;
const Pam_0x272_272_Apa_selectedsideType Pam_0x272_272::Apa_selectedsideType_MIN;
const Pam_0x272_272_Apa_selectedsideType Pam_0x272_272::Apa_selectedsideType_MAX;
const int Pam_0x272_272::Apa_selectedsideType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Sdg_objectstsrrsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[59];
}
bool Pam_0x272_272_Sdg_objectstsrrsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x272_272_Sdg_objectstsrrsType Pam_0x272_272::SDG_OBJECTSTSRRS_NO_OBJECT;
const Pam_0x272_272_Sdg_objectstsrrsType Pam_0x272_272::SDG_OBJECTSTSRRS_OBJECT_IN_ZONE_1;
const Pam_0x272_272_Sdg_objectstsrrsType Pam_0x272_272::SDG_OBJECTSTSRRS_OBJECT_IN_ZONE_2;
const Pam_0x272_272_Sdg_objectstsrrsType Pam_0x272_272::SDG_OBJECTSTSRRS_OBJECT_IN_ZONE_3;
const Pam_0x272_272_Sdg_objectstsrrsType Pam_0x272_272::Sdg_objectstsrrsType_MIN;
const Pam_0x272_272_Sdg_objectstsrrsType Pam_0x272_272::Sdg_objectstsrrsType_MAX;
const int Pam_0x272_272::Sdg_objectstsrrsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Sdg_objectstsfrs_rrsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[60];
}
bool Pam_0x272_272_Sdg_objectstsfrs_rrsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x272_272_Sdg_objectstsfrs_rrsType Pam_0x272_272::SDG_OBJECTSTSFRS_RRS_NO_OBJECT;
const Pam_0x272_272_Sdg_objectstsfrs_rrsType Pam_0x272_272::SDG_OBJECTSTSFRS_RRS_OBJECT_IN_ZONE_1;
const Pam_0x272_272_Sdg_objectstsfrs_rrsType Pam_0x272_272::SDG_OBJECTSTSFRS_RRS_OBJECT_IN_ZONE_2;
const Pam_0x272_272_Sdg_objectstsfrs_rrsType Pam_0x272_272::SDG_OBJECTSTSFRS_RRS_OBJECT_IN_ZONE_3;
const Pam_0x272_272_Sdg_objectstsfrs_rrsType Pam_0x272_272::Sdg_objectstsfrs_rrsType_MIN;
const Pam_0x272_272_Sdg_objectstsfrs_rrsType Pam_0x272_272::Sdg_objectstsfrs_rrsType_MAX;
const int Pam_0x272_272::Sdg_objectstsfrs_rrsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Apa_quit_indicationType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[61];
}
bool Pam_0x272_272_Apa_quit_indicationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_NO_REQUEST;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_EXTERNAL_ECU_FAILURE;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_APA_FAILURE;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_SPEED_HIGH;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_TIMING_OVERFLOW;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_MOVE_TIMES_OVERFLOW;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_RECOVER_INT_TIMS_OVERFLOW;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_GAS_PEDAL;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_GEAR_INTERVENTION;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_EXTERNAL_ECU_ACTVIE;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_ACC;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_TRAJECTORY;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_SPACE_LIMIT;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_NO_OBJECT_IN_FRONT;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_SEAT_BELT_UNBUCKLE;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_DRIVER_DOOR;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_EPB_APPLY;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_VEHICLE_BLOCK;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_GEAR_INTERRUPT;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_STEERING_WHEEL_HANDS_ON;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_REQ_QUIT_ABOVE_SLOPE_LIMT;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::APA_QUIT_INDICATION_RESERVED;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::Apa_quit_indicationType_MIN;
const Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::Apa_quit_indicationType_MAX;
const int Pam_0x272_272::Apa_quit_indicationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Apa_recover_int_indicationType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[62];
}
bool Pam_0x272_272_Apa_recover_int_indicationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x272_272_Apa_recover_int_indicationType Pam_0x272_272::APA_RECOVER_INT_INDICATION_NO_REQUEST;
const Pam_0x272_272_Apa_recover_int_indicationType Pam_0x272_272::APA_RECOVER_INT_INDICATION_REQ_RECOVER_DEAD_MAN_SWITCH_RELEASE;
const Pam_0x272_272_Apa_recover_int_indicationType Pam_0x272_272::APA_RECOVER_INT_INDICATION_REQ_RECOVER_FOUND_OBSTACLE_IN_TRAJECTORY;
const Pam_0x272_272_Apa_recover_int_indicationType Pam_0x272_272::APA_RECOVER_INT_INDICATION_REQ_RECOVER_NON_DRIVER_DOOR_OPEN;
const Pam_0x272_272_Apa_recover_int_indicationType Pam_0x272_272::APA_RECOVER_INT_INDICATION_REQ_RECOVER_BRAKE_PEDAL_RELEASE;
const Pam_0x272_272_Apa_recover_int_indicationType Pam_0x272_272::APA_RECOVER_INT_INDICATION_RESERVED;
const Pam_0x272_272_Apa_recover_int_indicationType Pam_0x272_272::Apa_recover_int_indicationType_MIN;
const Pam_0x272_272_Apa_recover_int_indicationType Pam_0x272_272::Apa_recover_int_indicationType_MAX;
const int Pam_0x272_272::Apa_recover_int_indicationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Sdg_objectstsfls_rlsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[63];
}
bool Pam_0x272_272_Sdg_objectstsfls_rlsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x272_272_Sdg_objectstsfls_rlsType Pam_0x272_272::SDG_OBJECTSTSFLS_RLS_NO_OBJECT;
const Pam_0x272_272_Sdg_objectstsfls_rlsType Pam_0x272_272::SDG_OBJECTSTSFLS_RLS_OBJECT_IN_ZONE_1;
const Pam_0x272_272_Sdg_objectstsfls_rlsType Pam_0x272_272::SDG_OBJECTSTSFLS_RLS_OBJECT_IN_ZONE_2;
const Pam_0x272_272_Sdg_objectstsfls_rlsType Pam_0x272_272::SDG_OBJECTSTSFLS_RLS_OBJECT_IN_ZONE_3;
const Pam_0x272_272_Sdg_objectstsfls_rlsType Pam_0x272_272::Sdg_objectstsfls_rlsType_MIN;
const Pam_0x272_272_Sdg_objectstsfls_rlsType Pam_0x272_272::Sdg_objectstsfls_rlsType_MAX;
const int Pam_0x272_272::Sdg_objectstsfls_rlsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Apa_indicationType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[64];
}
bool Pam_0x272_272_Apa_indicationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x272_272_Apa_indicationType Pam_0x272_272::APA_INDICATION_NO_ACTIVE;
const Pam_0x272_272_Apa_indicationType Pam_0x272_272::APA_INDICATION_PPSC_ACTIVE;
const Pam_0x272_272_Apa_indicationType Pam_0x272_272::APA_INDICATION_CPSC_ACTIVE;
const Pam_0x272_272_Apa_indicationType Pam_0x272_272::APA_INDICATION_POC_ACTIVE;
const Pam_0x272_272_Apa_indicationType Pam_0x272_272::APA_INDICATION_RESERVED;
const Pam_0x272_272_Apa_indicationType Pam_0x272_272::Apa_indicationType_MIN;
const Pam_0x272_272_Apa_indicationType Pam_0x272_272::Apa_indicationType_MAX;
const int Pam_0x272_272::Apa_indicationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Pam_0x272_272_Sdg_objectstsflsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[65];
}
bool Pam_0x272_272_Sdg_objectstsflsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Pam_0x272_272_Sdg_objectstsflsType Pam_0x272_272::SDG_OBJECTSTSFLS_NO_OBJECT;
const Pam_0x272_272_Sdg_objectstsflsType Pam_0x272_272::SDG_OBJECTSTSFLS_OBJECT_IN_ZONE_1;
const Pam_0x272_272_Sdg_objectstsflsType Pam_0x272_272::SDG_OBJECTSTSFLS_OBJECT_IN_ZONE_2;
const Pam_0x272_272_Sdg_objectstsflsType Pam_0x272_272::SDG_OBJECTSTSFLS_OBJECT_IN_ZONE_3;
const Pam_0x272_272_Sdg_objectstsflsType Pam_0x272_272::Sdg_objectstsflsType_MIN;
const Pam_0x272_272_Sdg_objectstsflsType Pam_0x272_272::Sdg_objectstsflsType_MAX;
const int Pam_0x272_272::Sdg_objectstsflsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Acc_uppercomftbandreqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[66];
}
bool Mrr_0x239_239_Acc_uppercomftbandreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x239_239_Acc_uppercomftbandreqType Mrr_0x239_239::ACC_UPPERCOMFTBANDREQ_NO_DEMAND;
const Mrr_0x239_239_Acc_uppercomftbandreqType Mrr_0x239_239::ACC_UPPERCOMFTBANDREQ_DEMAND;
const Mrr_0x239_239_Acc_uppercomftbandreqType Mrr_0x239_239::Acc_uppercomftbandreqType_MIN;
const Mrr_0x239_239_Acc_uppercomftbandreqType Mrr_0x239_239::Acc_uppercomftbandreqType_MAX;
const int Mrr_0x239_239::Acc_uppercomftbandreqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Acc_brakepreferredType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[67];
}
bool Mrr_0x239_239_Acc_brakepreferredType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x239_239_Acc_brakepreferredType Mrr_0x239_239::ACC_BRAKEPREFERRED_NO_DEMAND;
const Mrr_0x239_239_Acc_brakepreferredType Mrr_0x239_239::ACC_BRAKEPREFERRED_DEMAND;
const Mrr_0x239_239_Acc_brakepreferredType Mrr_0x239_239::Acc_brakepreferredType_MIN;
const Mrr_0x239_239_Acc_brakepreferredType Mrr_0x239_239::Acc_brakepreferredType_MAX;
const int Mrr_0x239_239::Acc_brakepreferredType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Eba_reqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[68];
}
bool Mrr_0x239_239_Eba_reqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x239_239_Eba_reqType Mrr_0x239_239::EBA_REQ_NO_DEMAND;
const Mrr_0x239_239_Eba_reqType Mrr_0x239_239::EBA_REQ_DEMAND;
const Mrr_0x239_239_Eba_reqType Mrr_0x239_239::Eba_reqType_MIN;
const Mrr_0x239_239_Eba_reqType Mrr_0x239_239::Eba_reqType_MAX;
const int Mrr_0x239_239::Eba_reqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Aeb_reqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[69];
}
bool Mrr_0x239_239_Aeb_reqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x239_239_Aeb_reqType Mrr_0x239_239::AEB_REQ_NO_DEMAND;
const Mrr_0x239_239_Aeb_reqType Mrr_0x239_239::AEB_REQ_DEMAND;
const Mrr_0x239_239_Aeb_reqType Mrr_0x239_239::Aeb_reqType_MIN;
const Mrr_0x239_239_Aeb_reqType Mrr_0x239_239::Aeb_reqType_MAX;
const int Mrr_0x239_239::Aeb_reqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Acc_standstillreqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[70];
}
bool Mrr_0x239_239_Acc_standstillreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x239_239_Acc_standstillreqType Mrr_0x239_239::ACC_STANDSTILLREQ_NO_DEMAND;
const Mrr_0x239_239_Acc_standstillreqType Mrr_0x239_239::ACC_STANDSTILLREQ_DEMAND;
const Mrr_0x239_239_Acc_standstillreqType Mrr_0x239_239::Acc_standstillreqType_MIN;
const Mrr_0x239_239_Acc_standstillreqType Mrr_0x239_239::Acc_standstillreqType_MAX;
const int Mrr_0x239_239::Acc_standstillreqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Acc_driveoffType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[71];
}
bool Mrr_0x239_239_Acc_driveoffType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x239_239_Acc_driveoffType Mrr_0x239_239::ACC_DRIVEOFF_NO_DEMAND;
const Mrr_0x239_239_Acc_driveoffType Mrr_0x239_239::ACC_DRIVEOFF_DEMAND;
const Mrr_0x239_239_Acc_driveoffType Mrr_0x239_239::Acc_driveoffType_MIN;
const Mrr_0x239_239_Acc_driveoffType Mrr_0x239_239::Acc_driveoffType_MAX;
const int Mrr_0x239_239::Acc_driveoffType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Awb_levelType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[72];
}
bool Mrr_0x239_239_Awb_levelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x239_239_Awb_levelType Mrr_0x239_239::AWB_LEVEL_NO_LEVEL;
const Mrr_0x239_239_Awb_levelType Mrr_0x239_239::AWB_LEVEL_LEVEL_1;
const Mrr_0x239_239_Awb_levelType Mrr_0x239_239::AWB_LEVEL_LEVEL_2;
const Mrr_0x239_239_Awb_levelType Mrr_0x239_239::AWB_LEVEL_LEVEL_3;
const Mrr_0x239_239_Awb_levelType Mrr_0x239_239::AWB_LEVEL_LEVEL_4;
const Mrr_0x239_239_Awb_levelType Mrr_0x239_239::Awb_levelType_MIN;
const Mrr_0x239_239_Awb_levelType Mrr_0x239_239::Awb_levelType_MAX;
const int Mrr_0x239_239::Awb_levelType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Abp_reqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[73];
}
bool Mrr_0x239_239_Abp_reqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x239_239_Abp_reqType Mrr_0x239_239::ABP_REQ_NO_DEMAND;
const Mrr_0x239_239_Abp_reqType Mrr_0x239_239::ABP_REQ_DEMAND;
const Mrr_0x239_239_Abp_reqType Mrr_0x239_239::Abp_reqType_MIN;
const Mrr_0x239_239_Abp_reqType Mrr_0x239_239::Abp_reqType_MAX;
const int Mrr_0x239_239::Abp_reqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Awb_reqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[74];
}
bool Mrr_0x239_239_Awb_reqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x239_239_Awb_reqType Mrr_0x239_239::AWB_REQ_NO_DEMAND;
const Mrr_0x239_239_Awb_reqType Mrr_0x239_239::AWB_REQ_DEMAND;
const Mrr_0x239_239_Awb_reqType Mrr_0x239_239::Awb_reqType_MIN;
const Mrr_0x239_239_Awb_reqType Mrr_0x239_239::Awb_reqType_MAX;
const int Mrr_0x239_239::Awb_reqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Aba_reqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[75];
}
bool Mrr_0x239_239_Aba_reqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x239_239_Aba_reqType Mrr_0x239_239::ABA_REQ_NO_DEMAND;
const Mrr_0x239_239_Aba_reqType Mrr_0x239_239::ABA_REQ_DEMAND;
const Mrr_0x239_239_Aba_reqType Mrr_0x239_239::Aba_reqType_MIN;
const Mrr_0x239_239_Aba_reqType Mrr_0x239_239::Aba_reqType_MAX;
const int Mrr_0x239_239::Aba_reqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Acc_stateType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[76];
}
bool Mrr_0x239_239_Acc_stateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x239_239_Acc_stateType Mrr_0x239_239::ACC_STATE_OFF_MODE;
const Mrr_0x239_239_Acc_stateType Mrr_0x239_239::ACC_STATE_PASSIVE_MODE;
const Mrr_0x239_239_Acc_stateType Mrr_0x239_239::ACC_STATE_STAND_BY_MODE;
const Mrr_0x239_239_Acc_stateType Mrr_0x239_239::ACC_STATE_ACTIVE_CONTROL_MODE;
const Mrr_0x239_239_Acc_stateType Mrr_0x239_239::ACC_STATE_BRAKE_ONLY_MODE;
const Mrr_0x239_239_Acc_stateType Mrr_0x239_239::ACC_STATE_OVERRIDE;
const Mrr_0x239_239_Acc_stateType Mrr_0x239_239::ACC_STATE_STANDSTILL;
const Mrr_0x239_239_Acc_stateType Mrr_0x239_239::ACC_STATE_FAILURE_MODE;
const Mrr_0x239_239_Acc_stateType Mrr_0x239_239::Acc_stateType_MIN;
const Mrr_0x239_239_Acc_stateType Mrr_0x239_239::Acc_stateType_MAX;
const int Mrr_0x239_239::Acc_stateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_ShutdownmodeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[77];
}
bool Mrr_0x239_239_ShutdownmodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x239_239_ShutdownmodeType Mrr_0x239_239::SHUTDOWNMODE_SOFT_OFF;
const Mrr_0x239_239_ShutdownmodeType Mrr_0x239_239::SHUTDOWNMODE_FAST_OFF;
const Mrr_0x239_239_ShutdownmodeType Mrr_0x239_239::SHUTDOWNMODE_RESERVED;
const Mrr_0x239_239_ShutdownmodeType Mrr_0x239_239::SHUTDOWNMODE_INITIAL;
const Mrr_0x239_239_ShutdownmodeType Mrr_0x239_239::ShutdownmodeType_MIN;
const Mrr_0x239_239_ShutdownmodeType Mrr_0x239_239::ShutdownmodeType_MAX;
const int Mrr_0x239_239::ShutdownmodeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x239_239_Aba_levelType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[78];
}
bool Mrr_0x239_239_Aba_levelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x239_239_Aba_levelType Mrr_0x239_239::ABA_LEVEL_LEVEL_0;
const Mrr_0x239_239_Aba_levelType Mrr_0x239_239::ABA_LEVEL_LEVEL_1;
const Mrr_0x239_239_Aba_levelType Mrr_0x239_239::ABA_LEVEL_LEVEL_2;
const Mrr_0x239_239_Aba_levelType Mrr_0x239_239::ABA_LEVEL_LEVEL_3;
const Mrr_0x239_239_Aba_levelType Mrr_0x239_239::Aba_levelType_MIN;
const Mrr_0x239_239_Aba_levelType Mrr_0x239_239::Aba_levelType_MAX;
const int Mrr_0x239_239::Aba_levelType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[79];
}
bool Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType Esp_direction_0x235_235::ESP_FRWHEELDRIVEDIRSTATUS_VALID;
const Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType Esp_direction_0x235_235::ESP_FRWHEELDRIVEDIRSTATUS_INVALID;
const Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType Esp_direction_0x235_235::Esp_frwheeldrivedirstatusType_MIN;
const Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType Esp_direction_0x235_235::Esp_frwheeldrivedirstatusType_MAX;
const int Esp_direction_0x235_235::Esp_frwheeldrivedirstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[80];
}
bool Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType Esp_direction_0x235_235::ESP_FLWHEELDRIVEDIRSTATUS_VALID;
const Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType Esp_direction_0x235_235::ESP_FLWHEELDRIVEDIRSTATUS_INVALID;
const Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType Esp_direction_0x235_235::Esp_flwheeldrivedirstatusType_MIN;
const Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType Esp_direction_0x235_235::Esp_flwheeldrivedirstatusType_MAX;
const int Esp_direction_0x235_235::Esp_flwheeldrivedirstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[81];
}
bool Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType Esp_direction_0x235_235::ESP_RRWHEELDRIVEDIRSTATUS_VALID;
const Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType Esp_direction_0x235_235::ESP_RRWHEELDRIVEDIRSTATUS_INVALID;
const Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType Esp_direction_0x235_235::Esp_rrwheeldrivedirstatusType_MIN;
const Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType Esp_direction_0x235_235::Esp_rrwheeldrivedirstatusType_MAX;
const int Esp_direction_0x235_235::Esp_rrwheeldrivedirstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[82];
}
bool Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType Esp_direction_0x235_235::ESP_RLWHEELDRIVEDIRSTATUS_VALID;
const Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType Esp_direction_0x235_235::ESP_RLWHEELDRIVEDIRSTATUS_INVALID;
const Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType Esp_direction_0x235_235::Esp_rlwheeldrivedirstatusType_MIN;
const Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType Esp_direction_0x235_235::Esp_rlwheeldrivedirstatusType_MAX;
const int Esp_direction_0x235_235::Esp_rlwheeldrivedirstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[83];
}
bool Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType Esp_direction_0x235_235::ESP_RRWHEELDRIVEDIRECTION_UNDEFINED;
const Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType Esp_direction_0x235_235::ESP_RRWHEELDRIVEDIRECTION_STANDSTILL;
const Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType Esp_direction_0x235_235::ESP_RRWHEELDRIVEDIRECTION_FORWARD;
const Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType Esp_direction_0x235_235::ESP_RRWHEELDRIVEDIRECTION_BACKWARD;
const Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType Esp_direction_0x235_235::Esp_rrwheeldrivedirectionType_MIN;
const Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType Esp_direction_0x235_235::Esp_rrwheeldrivedirectionType_MAX;
const int Esp_direction_0x235_235::Esp_rrwheeldrivedirectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[84];
}
bool Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType Esp_direction_0x235_235::ESP_RLWHEELDRIVEDIRECTION_UNDEFINED;
const Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType Esp_direction_0x235_235::ESP_RLWHEELDRIVEDIRECTION_STANDSTILL;
const Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType Esp_direction_0x235_235::ESP_RLWHEELDRIVEDIRECTION_FORWARD;
const Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType Esp_direction_0x235_235::ESP_RLWHEELDRIVEDIRECTION_BACKWARD;
const Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType Esp_direction_0x235_235::Esp_rlwheeldrivedirectionType_MIN;
const Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType Esp_direction_0x235_235::Esp_rlwheeldrivedirectionType_MAX;
const int Esp_direction_0x235_235::Esp_rlwheeldrivedirectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[85];
}
bool Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_direction_0x235_235_Esp_frwheeldrivedirectionType Esp_direction_0x235_235::ESP_FRWHEELDRIVEDIRECTION_UNDEFINED;
const Esp_direction_0x235_235_Esp_frwheeldrivedirectionType Esp_direction_0x235_235::ESP_FRWHEELDRIVEDIRECTION_STANDSTILL;
const Esp_direction_0x235_235_Esp_frwheeldrivedirectionType Esp_direction_0x235_235::ESP_FRWHEELDRIVEDIRECTION_FORWARD;
const Esp_direction_0x235_235_Esp_frwheeldrivedirectionType Esp_direction_0x235_235::ESP_FRWHEELDRIVEDIRECTION_BACKWARD;
const Esp_direction_0x235_235_Esp_frwheeldrivedirectionType Esp_direction_0x235_235::Esp_frwheeldrivedirectionType_MIN;
const Esp_direction_0x235_235_Esp_frwheeldrivedirectionType Esp_direction_0x235_235::Esp_frwheeldrivedirectionType_MAX;
const int Esp_direction_0x235_235::Esp_frwheeldrivedirectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[86];
}
bool Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_direction_0x235_235_Esp_flwheeldrivedirectionType Esp_direction_0x235_235::ESP_FLWHEELDRIVEDIRECTION_UNDEFINED;
const Esp_direction_0x235_235_Esp_flwheeldrivedirectionType Esp_direction_0x235_235::ESP_FLWHEELDRIVEDIRECTION_STANDSTILL;
const Esp_direction_0x235_235_Esp_flwheeldrivedirectionType Esp_direction_0x235_235::ESP_FLWHEELDRIVEDIRECTION_FORWARD;
const Esp_direction_0x235_235_Esp_flwheeldrivedirectionType Esp_direction_0x235_235::ESP_FLWHEELDRIVEDIRECTION_BACKWARD;
const Esp_direction_0x235_235_Esp_flwheeldrivedirectionType Esp_direction_0x235_235::Esp_flwheeldrivedirectionType_MIN;
const Esp_direction_0x235_235_Esp_flwheeldrivedirectionType Esp_direction_0x235_235::Esp_flwheeldrivedirectionType_MAX;
const int Esp_direction_0x235_235::Esp_flwheeldrivedirectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[87];
}
bool Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_direction_0x235_235_Esp_whlmilgrearlestatusType Esp_direction_0x235_235::ESP_WHLMILGREARLESTATUS_VALID;
const Esp_direction_0x235_235_Esp_whlmilgrearlestatusType Esp_direction_0x235_235::ESP_WHLMILGREARLESTATUS_INVALID;
const Esp_direction_0x235_235_Esp_whlmilgrearlestatusType Esp_direction_0x235_235::Esp_whlmilgrearlestatusType_MIN;
const Esp_direction_0x235_235_Esp_whlmilgrearlestatusType Esp_direction_0x235_235::Esp_whlmilgrearlestatusType_MAX;
const int Esp_direction_0x235_235::Esp_whlmilgrearlestatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_whlmilgrearristatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[88];
}
bool Esp_direction_0x235_235_Esp_whlmilgrearristatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_direction_0x235_235_Esp_whlmilgrearristatusType Esp_direction_0x235_235::ESP_WHLMILGREARRISTATUS_VALID;
const Esp_direction_0x235_235_Esp_whlmilgrearristatusType Esp_direction_0x235_235::ESP_WHLMILGREARRISTATUS_INVALID;
const Esp_direction_0x235_235_Esp_whlmilgrearristatusType Esp_direction_0x235_235::Esp_whlmilgrearristatusType_MIN;
const Esp_direction_0x235_235_Esp_whlmilgrearristatusType Esp_direction_0x235_235::Esp_whlmilgrearristatusType_MAX;
const int Esp_direction_0x235_235::Esp_whlmilgrearristatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_direction_0x235_235_Esp_vehiclestandstillType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[89];
}
bool Esp_direction_0x235_235_Esp_vehiclestandstillType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_direction_0x235_235_Esp_vehiclestandstillType Esp_direction_0x235_235::ESP_VEHICLESTANDSTILL_NOT_STANDSTILL;
const Esp_direction_0x235_235_Esp_vehiclestandstillType Esp_direction_0x235_235::ESP_VEHICLESTANDSTILL_STANDSTILL;
const Esp_direction_0x235_235_Esp_vehiclestandstillType Esp_direction_0x235_235::ESP_VEHICLESTANDSTILL_INVALID;
const Esp_direction_0x235_235_Esp_vehiclestandstillType Esp_direction_0x235_235::Esp_vehiclestandstillType_MIN;
const Esp_direction_0x235_235_Esp_vehiclestandstillType Esp_direction_0x235_235::Esp_vehiclestandstillType_MAX;
const int Esp_direction_0x235_235::Esp_vehiclestandstillType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_vdcactiveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[90];
}
bool Esp_advanced_0x234_234_Esp_vdcactiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_vdcactiveType Esp_advanced_0x234_234::ESP_VDCACTIVE_NOT_ACTIVE;
const Esp_advanced_0x234_234_Esp_vdcactiveType Esp_advanced_0x234_234::ESP_VDCACTIVE_ACTIVE;
const Esp_advanced_0x234_234_Esp_vdcactiveType Esp_advanced_0x234_234::Esp_vdcactiveType_MIN;
const Esp_advanced_0x234_234_Esp_vdcactiveType Esp_advanced_0x234_234::Esp_vdcactiveType_MAX;
const int Esp_advanced_0x234_234::Esp_vdcactiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_ebdactiveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[91];
}
bool Esp_advanced_0x234_234_Esp_ebdactiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_ebdactiveType Esp_advanced_0x234_234::ESP_EBDACTIVE_NOT_ACTIVE;
const Esp_advanced_0x234_234_Esp_ebdactiveType Esp_advanced_0x234_234::ESP_EBDACTIVE_ACTIVE;
const Esp_advanced_0x234_234_Esp_ebdactiveType Esp_advanced_0x234_234::Esp_ebdactiveType_MIN;
const Esp_advanced_0x234_234_Esp_ebdactiveType Esp_advanced_0x234_234::Esp_ebdactiveType_MAX;
const int Esp_advanced_0x234_234::Esp_ebdactiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_ecdtempoffType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[92];
}
bool Esp_advanced_0x234_234_Esp_ecdtempoffType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_ecdtempoffType Esp_advanced_0x234_234::ESP_ECDTEMPOFF_NOT_HIGH;
const Esp_advanced_0x234_234_Esp_ecdtempoffType Esp_advanced_0x234_234::ESP_ECDTEMPOFF_TEMP_TOO_HIGH;
const Esp_advanced_0x234_234_Esp_ecdtempoffType Esp_advanced_0x234_234::Esp_ecdtempoffType_MIN;
const Esp_advanced_0x234_234_Esp_ecdtempoffType Esp_advanced_0x234_234::Esp_ecdtempoffType_MAX;
const int Esp_advanced_0x234_234::Esp_ecdtempoffType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_nobrakeforceType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[93];
}
bool Esp_advanced_0x234_234_Esp_nobrakeforceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_nobrakeforceType Esp_advanced_0x234_234::ESP_NOBRAKEFORCE_EXIST_BRK_FORCE;
const Esp_advanced_0x234_234_Esp_nobrakeforceType Esp_advanced_0x234_234::ESP_NOBRAKEFORCE_NO_BRK_FORCE;
const Esp_advanced_0x234_234_Esp_nobrakeforceType Esp_advanced_0x234_234::Esp_nobrakeforceType_MIN;
const Esp_advanced_0x234_234_Esp_nobrakeforceType Esp_advanced_0x234_234::Esp_nobrakeforceType_MAX;
const int Esp_advanced_0x234_234::Esp_nobrakeforceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[94];
}
bool Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType Esp_advanced_0x234_234::ESP_BRKFRICTQTOTATWHLVAILD_VALID;
const Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType Esp_advanced_0x234_234::ESP_BRKFRICTQTOTATWHLVAILD_INVALID;
const Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType Esp_advanced_0x234_234::Esp_brkfrictqtotatwhlvaildType_MIN;
const Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType Esp_advanced_0x234_234::Esp_brkfrictqtotatwhlvaildType_MAX;
const int Esp_advanced_0x234_234::Esp_brkfrictqtotatwhlvaildType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_aebdecavailableType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[95];
}
bool Esp_advanced_0x234_234_Esp_aebdecavailableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_aebdecavailableType Esp_advanced_0x234_234::ESP_AEBDECAVAILABLE_NOT_AVAILABLE;
const Esp_advanced_0x234_234_Esp_aebdecavailableType Esp_advanced_0x234_234::ESP_AEBDECAVAILABLE_AVAILABLE;
const Esp_advanced_0x234_234_Esp_aebdecavailableType Esp_advanced_0x234_234::Esp_aebdecavailableType_MIN;
const Esp_advanced_0x234_234_Esp_aebdecavailableType Esp_advanced_0x234_234::Esp_aebdecavailableType_MAX;
const int Esp_advanced_0x234_234::Esp_aebdecavailableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_aebdecactiveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[96];
}
bool Esp_advanced_0x234_234_Esp_aebdecactiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_aebdecactiveType Esp_advanced_0x234_234::ESP_AEBDECACTIVE_NOT_ACTIVATED;
const Esp_advanced_0x234_234_Esp_aebdecactiveType Esp_advanced_0x234_234::ESP_AEBDECACTIVE_ACTIVATED;
const Esp_advanced_0x234_234_Esp_aebdecactiveType Esp_advanced_0x234_234::Esp_aebdecactiveType_MIN;
const Esp_advanced_0x234_234_Esp_aebdecactiveType Esp_advanced_0x234_234::Esp_aebdecactiveType_MAX;
const int Esp_advanced_0x234_234::Esp_aebdecactiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_prefillavailableType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[97];
}
bool Esp_advanced_0x234_234_Esp_prefillavailableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_prefillavailableType Esp_advanced_0x234_234::ESP_PREFILLAVAILABLE_NOT_AVAILABLE;
const Esp_advanced_0x234_234_Esp_prefillavailableType Esp_advanced_0x234_234::ESP_PREFILLAVAILABLE_AVAILABLE;
const Esp_advanced_0x234_234_Esp_prefillavailableType Esp_advanced_0x234_234::Esp_prefillavailableType_MIN;
const Esp_advanced_0x234_234_Esp_prefillavailableType Esp_advanced_0x234_234::Esp_prefillavailableType_MAX;
const int Esp_advanced_0x234_234::Esp_prefillavailableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_prefillactiveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[98];
}
bool Esp_advanced_0x234_234_Esp_prefillactiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_prefillactiveType Esp_advanced_0x234_234::ESP_PREFILLACTIVE_NOT_ACTIVATED;
const Esp_advanced_0x234_234_Esp_prefillactiveType Esp_advanced_0x234_234::ESP_PREFILLACTIVE_ACTIVATED;
const Esp_advanced_0x234_234_Esp_prefillactiveType Esp_advanced_0x234_234::Esp_prefillactiveType_MIN;
const Esp_advanced_0x234_234_Esp_prefillactiveType Esp_advanced_0x234_234::Esp_prefillactiveType_MAX;
const int Esp_advanced_0x234_234::Esp_prefillactiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_abaavailableType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[99];
}
bool Esp_advanced_0x234_234_Esp_abaavailableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_abaavailableType Esp_advanced_0x234_234::ESP_ABAAVAILABLE_NOT_AVAILABLE;
const Esp_advanced_0x234_234_Esp_abaavailableType Esp_advanced_0x234_234::ESP_ABAAVAILABLE_AVAILABLE;
const Esp_advanced_0x234_234_Esp_abaavailableType Esp_advanced_0x234_234::Esp_abaavailableType_MIN;
const Esp_advanced_0x234_234_Esp_abaavailableType Esp_advanced_0x234_234::Esp_abaavailableType_MAX;
const int Esp_advanced_0x234_234::Esp_abaavailableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_abaactiveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[100];
}
bool Esp_advanced_0x234_234_Esp_abaactiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_abaactiveType Esp_advanced_0x234_234::ESP_ABAACTIVE_NOT_ACTIVATED;
const Esp_advanced_0x234_234_Esp_abaactiveType Esp_advanced_0x234_234::ESP_ABAACTIVE_ACTIVATED;
const Esp_advanced_0x234_234_Esp_abaactiveType Esp_advanced_0x234_234::Esp_abaactiveType_MIN;
const Esp_advanced_0x234_234_Esp_abaactiveType Esp_advanced_0x234_234::Esp_abaactiveType_MAX;
const int Esp_advanced_0x234_234::Esp_abaactiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_cddavailableType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[101];
}
bool Esp_advanced_0x234_234_Esp_cddavailableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_cddavailableType Esp_advanced_0x234_234::ESP_CDDAVAILABLE_NOT_AVAILABLE;
const Esp_advanced_0x234_234_Esp_cddavailableType Esp_advanced_0x234_234::ESP_CDDAVAILABLE_AVAILABLE;
const Esp_advanced_0x234_234_Esp_cddavailableType Esp_advanced_0x234_234::Esp_cddavailableType_MIN;
const Esp_advanced_0x234_234_Esp_cddavailableType Esp_advanced_0x234_234::Esp_cddavailableType_MAX;
const int Esp_advanced_0x234_234::Esp_cddavailableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_dtcactiveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[102];
}
bool Esp_advanced_0x234_234_Esp_dtcactiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_dtcactiveType Esp_advanced_0x234_234::ESP_DTCACTIVE_NOT_ACTIVATED;
const Esp_advanced_0x234_234_Esp_dtcactiveType Esp_advanced_0x234_234::ESP_DTCACTIVE_ACTIVATED;
const Esp_advanced_0x234_234_Esp_dtcactiveType Esp_advanced_0x234_234::Esp_dtcactiveType_MIN;
const Esp_advanced_0x234_234_Esp_dtcactiveType Esp_advanced_0x234_234::Esp_dtcactiveType_MAX;
const int Esp_advanced_0x234_234::Esp_dtcactiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_awbavailableType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[103];
}
bool Esp_advanced_0x234_234_Esp_awbavailableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_awbavailableType Esp_advanced_0x234_234::ESP_AWBAVAILABLE_NOT_AVAILABLE;
const Esp_advanced_0x234_234_Esp_awbavailableType Esp_advanced_0x234_234::ESP_AWBAVAILABLE_AVAILABLE;
const Esp_advanced_0x234_234_Esp_awbavailableType Esp_advanced_0x234_234::Esp_awbavailableType_MIN;
const Esp_advanced_0x234_234_Esp_awbavailableType Esp_advanced_0x234_234::Esp_awbavailableType_MAX;
const int Esp_advanced_0x234_234::Esp_awbavailableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_awbactiveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[104];
}
bool Esp_advanced_0x234_234_Esp_awbactiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_awbactiveType Esp_advanced_0x234_234::ESP_AWBACTIVE_NOT_ACTIVATED;
const Esp_advanced_0x234_234_Esp_awbactiveType Esp_advanced_0x234_234::ESP_AWBACTIVE_ACTIVATED;
const Esp_advanced_0x234_234_Esp_awbactiveType Esp_advanced_0x234_234::Esp_awbactiveType_MIN;
const Esp_advanced_0x234_234_Esp_awbactiveType Esp_advanced_0x234_234::Esp_awbactiveType_MAX;
const int Esp_advanced_0x234_234::Esp_awbactiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_vlcerrorType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[105];
}
bool Esp_advanced_0x234_234_Esp_vlcerrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_vlcerrorType Esp_advanced_0x234_234::ESP_VLCERROR_NOT_ERROR;
const Esp_advanced_0x234_234_Esp_vlcerrorType Esp_advanced_0x234_234::ESP_VLCERROR_ERROR;
const Esp_advanced_0x234_234_Esp_vlcerrorType Esp_advanced_0x234_234::Esp_vlcerrorType_MIN;
const Esp_advanced_0x234_234_Esp_vlcerrorType Esp_advanced_0x234_234::Esp_vlcerrorType_MAX;
const int Esp_advanced_0x234_234::Esp_vlcerrorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_cdderrorType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[106];
}
bool Esp_advanced_0x234_234_Esp_cdderrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_cdderrorType Esp_advanced_0x234_234::ESP_CDDERROR_NOT_ERROR;
const Esp_advanced_0x234_234_Esp_cdderrorType Esp_advanced_0x234_234::ESP_CDDERROR_ERROR;
const Esp_advanced_0x234_234_Esp_cdderrorType Esp_advanced_0x234_234::Esp_cdderrorType_MIN;
const Esp_advanced_0x234_234_Esp_cdderrorType Esp_advanced_0x234_234::Esp_cdderrorType_MAX;
const int Esp_advanced_0x234_234::Esp_cdderrorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_cddactiveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[107];
}
bool Esp_advanced_0x234_234_Esp_cddactiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_cddactiveType Esp_advanced_0x234_234::ESP_CDDACTIVE_NOT_ACTIVATED;
const Esp_advanced_0x234_234_Esp_cddactiveType Esp_advanced_0x234_234::ESP_CDDACTIVE_ACTIVATED;
const Esp_advanced_0x234_234_Esp_cddactiveType Esp_advanced_0x234_234::Esp_cddactiveType_MIN;
const Esp_advanced_0x234_234_Esp_cddactiveType Esp_advanced_0x234_234::Esp_cddactiveType_MAX;
const int Esp_advanced_0x234_234::Esp_cddactiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_advanced_0x234_234_Esp_cdd_apactiveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[108];
}
bool Esp_advanced_0x234_234_Esp_cdd_apactiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_advanced_0x234_234_Esp_cdd_apactiveType Esp_advanced_0x234_234::ESP_CDD_APACTIVE_NOT_ACTIVATED;
const Esp_advanced_0x234_234_Esp_cdd_apactiveType Esp_advanced_0x234_234::ESP_CDD_APACTIVE_ACTIVATED;
const Esp_advanced_0x234_234_Esp_cdd_apactiveType Esp_advanced_0x234_234::Esp_cdd_apactiveType_MIN;
const Esp_advanced_0x234_234_Esp_cdd_apactiveType Esp_advanced_0x234_234::Esp_cdd_apactiveType_MAX;
const int Esp_advanced_0x234_234::Esp_cdd_apactiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[109];
}
bool Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_advanced_0x176_176_Eps_tosionbartorquevalidType Eps_advanced_0x176_176::EPS_TOSIONBARTORQUEVALID_VAILD;
const Eps_advanced_0x176_176_Eps_tosionbartorquevalidType Eps_advanced_0x176_176::EPS_TOSIONBARTORQUEVALID_INVALID;
const Eps_advanced_0x176_176_Eps_tosionbartorquevalidType Eps_advanced_0x176_176::Eps_tosionbartorquevalidType_MIN;
const Eps_advanced_0x176_176_Eps_tosionbartorquevalidType Eps_advanced_0x176_176::Eps_tosionbartorquevalidType_MAX;
const int Eps_advanced_0x176_176::Eps_tosionbartorquevalidType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[110];
}
bool Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType Eps_advanced_0x176_176::EPS_LKARESPONSETORQUEVALID_VAILD;
const Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType Eps_advanced_0x176_176::EPS_LKARESPONSETORQUEVALID_INVALID;
const Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType Eps_advanced_0x176_176::Eps_lkaresponsetorquevalidType_MIN;
const Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType Eps_advanced_0x176_176::Eps_lkaresponsetorquevalidType_MAX;
const int Eps_advanced_0x176_176::Eps_lkaresponsetorquevalidType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[111];
}
bool Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_advanced_0x176_176_Eps_ldwcontrolstatusType Eps_advanced_0x176_176::EPS_LDWCONTROLSTATUS_DEACTIVATED;
const Eps_advanced_0x176_176_Eps_ldwcontrolstatusType Eps_advanced_0x176_176::EPS_LDWCONTROLSTATUS_INACTIVE;
const Eps_advanced_0x176_176_Eps_ldwcontrolstatusType Eps_advanced_0x176_176::EPS_LDWCONTROLSTATUS_ACTIVE;
const Eps_advanced_0x176_176_Eps_ldwcontrolstatusType Eps_advanced_0x176_176::EPS_LDWCONTROLSTATUS_RESERVED;
const Eps_advanced_0x176_176_Eps_ldwcontrolstatusType Eps_advanced_0x176_176::Eps_ldwcontrolstatusType_MIN;
const Eps_advanced_0x176_176_Eps_ldwcontrolstatusType Eps_advanced_0x176_176::Eps_ldwcontrolstatusType_MAX;
const int Eps_advanced_0x176_176::Eps_ldwcontrolstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[112];
}
bool Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType Eps_advanced_0x176_176::EPS_PAM_STEERINGSTS_RESERVED_STEERING_POSITION_IS_OK;
const Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType Eps_advanced_0x176_176::EPS_PAM_STEERINGSTS_RESERVED_STEERING_POSITION_IS_ADJUSTING;
const Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType Eps_advanced_0x176_176::Eps_pam_steeringsts_reservedType_MIN;
const Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType Eps_advanced_0x176_176::Eps_pam_steeringsts_reservedType_MAX;
const int Eps_advanced_0x176_176::Eps_pam_steeringsts_reservedType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_advanced_0x176_176_Eps_lkacontrolstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[113];
}
bool Eps_advanced_0x176_176_Eps_lkacontrolstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_advanced_0x176_176_Eps_lkacontrolstatusType Eps_advanced_0x176_176::EPS_LKACONTROLSTATUS_NO_REQUEST;
const Eps_advanced_0x176_176_Eps_lkacontrolstatusType Eps_advanced_0x176_176::EPS_LKACONTROLSTATUS_REQUEST_HONORED;
const Eps_advanced_0x176_176_Eps_lkacontrolstatusType Eps_advanced_0x176_176::EPS_LKACONTROLSTATUS_CONTROL_REQUEST_NOT_ALLOWED_TEMPORARILY;
const Eps_advanced_0x176_176_Eps_lkacontrolstatusType Eps_advanced_0x176_176::EPS_LKACONTROLSTATUS_CONTROL_REQUEST_NOT_ALLOWED_PERMANENT;
const Eps_advanced_0x176_176_Eps_lkacontrolstatusType Eps_advanced_0x176_176::Eps_lkacontrolstatusType_MIN;
const Eps_advanced_0x176_176_Eps_lkacontrolstatusType Eps_advanced_0x176_176::Eps_lkacontrolstatusType_MAX;
const int Eps_advanced_0x176_176::Eps_lkacontrolstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_advanced_0x176_176_Eps_epspaminhType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[114];
}
bool Eps_advanced_0x176_176_Eps_epspaminhType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_advanced_0x176_176_Eps_epspaminhType Eps_advanced_0x176_176::EPS_EPSPAMINH_NORMAL_OPERATION;
const Eps_advanced_0x176_176_Eps_epspaminhType Eps_advanced_0x176_176::EPS_EPSPAMINH_OVER_SPEED;
const Eps_advanced_0x176_176_Eps_epspaminhType Eps_advanced_0x176_176::EPS_EPSPAMINH_DRIVER_INTERFERENCE;
const Eps_advanced_0x176_176_Eps_epspaminhType Eps_advanced_0x176_176::EPS_EPSPAMINH_ABNORMAL_CAN_INPUT;
const Eps_advanced_0x176_176_Eps_epspaminhType Eps_advanced_0x176_176::EPS_EPSPAMINH_EXCESS_ANGLE_DEVIATION;
const Eps_advanced_0x176_176_Eps_epspaminhType Eps_advanced_0x176_176::EPS_EPSPAMINH_EPS_FAILURE;
const Eps_advanced_0x176_176_Eps_epspaminhType Eps_advanced_0x176_176::Eps_epspaminhType_MIN;
const Eps_advanced_0x176_176_Eps_epspaminhType Eps_advanced_0x176_176::Eps_epspaminhType_MAX;
const int Eps_advanced_0x176_176::Eps_epspaminhType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_advanced_0x176_176_Eps_epspamstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[115];
}
bool Eps_advanced_0x176_176_Eps_epspamstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_advanced_0x176_176_Eps_epspamstsType Eps_advanced_0x176_176::EPS_EPSPAMSTS_INHIBIT;
const Eps_advanced_0x176_176_Eps_epspamstsType Eps_advanced_0x176_176::EPS_EPSPAMSTS_AVAILABLE;
const Eps_advanced_0x176_176_Eps_epspamstsType Eps_advanced_0x176_176::EPS_EPSPAMSTS_ACTIVE;
const Eps_advanced_0x176_176_Eps_epspamstsType Eps_advanced_0x176_176::EPS_EPSPAMSTS_ABORT;
const Eps_advanced_0x176_176_Eps_epspamstsType Eps_advanced_0x176_176::EPS_EPSPAMSTS_REPLY_FOR_CONTROL;
const Eps_advanced_0x176_176_Eps_epspamstsType Eps_advanced_0x176_176::EPS_EPSPAMSTS_NRCD_ACTIVE;
const Eps_advanced_0x176_176_Eps_epspamstsType Eps_advanced_0x176_176::EPS_EPSPAMSTS_ADAS_ACTIVE;
const Eps_advanced_0x176_176_Eps_epspamstsType Eps_advanced_0x176_176::EPS_EPSPAMSTS_FAILURE;
const Eps_advanced_0x176_176_Eps_epspamstsType Eps_advanced_0x176_176::Eps_epspamstsType_MIN;
const Eps_advanced_0x176_176_Eps_epspamstsType Eps_advanced_0x176_176::Eps_epspamstsType_MAX;
const int Eps_advanced_0x176_176::Eps_epspamstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[116];
}
bool Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType Esp_whlpulse_0x236_236::ESP_WHEELPULSE_RR_VALID_VALID;
const Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType Esp_whlpulse_0x236_236::ESP_WHEELPULSE_RR_VALID_INVALID;
const Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType Esp_whlpulse_0x236_236::Esp_wheelpulse_rr_validType_MIN;
const Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType Esp_whlpulse_0x236_236::Esp_wheelpulse_rr_validType_MAX;
const int Esp_whlpulse_0x236_236::Esp_wheelpulse_rr_validType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[117];
}
bool Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType Esp_whlpulse_0x236_236::ESP_WHEELPULSE_RL_VALID_VALID;
const Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType Esp_whlpulse_0x236_236::ESP_WHEELPULSE_RL_VALID_INVALID;
const Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType Esp_whlpulse_0x236_236::Esp_wheelpulse_rl_validType_MIN;
const Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType Esp_whlpulse_0x236_236::Esp_wheelpulse_rl_validType_MAX;
const int Esp_whlpulse_0x236_236::Esp_wheelpulse_rl_validType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[118];
}
bool Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType Esp_whlpulse_0x236_236::ESP_WHEELPULSE_FR_VALID_VALID;
const Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType Esp_whlpulse_0x236_236::ESP_WHEELPULSE_FR_VALID_INVALID;
const Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType Esp_whlpulse_0x236_236::Esp_wheelpulse_fr_validType_MIN;
const Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType Esp_whlpulse_0x236_236::Esp_wheelpulse_fr_validType_MAX;
const int Esp_whlpulse_0x236_236::Esp_wheelpulse_fr_validType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[119];
}
bool Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType Esp_whlpulse_0x236_236::ESP_WHEELPULSE_FL_VALID_VALID;
const Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType Esp_whlpulse_0x236_236::ESP_WHEELPULSE_FL_VALID_INVALID;
const Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType Esp_whlpulse_0x236_236::Esp_wheelpulse_fl_validType_MIN;
const Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType Esp_whlpulse_0x236_236::Esp_wheelpulse_fl_validType_MAX;
const int Esp_whlpulse_0x236_236::Esp_wheelpulse_fl_validType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sas_sensor_0x175_175_Sas_trimmingstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[120];
}
bool Sas_sensor_0x175_175_Sas_trimmingstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sas_sensor_0x175_175_Sas_trimmingstsType Sas_sensor_0x175_175::SAS_TRIMMINGSTS_NOT_TRIMMED;
const Sas_sensor_0x175_175_Sas_trimmingstsType Sas_sensor_0x175_175::SAS_TRIMMINGSTS_TRIMMED;
const Sas_sensor_0x175_175_Sas_trimmingstsType Sas_sensor_0x175_175::Sas_trimmingstsType_MIN;
const Sas_sensor_0x175_175_Sas_trimmingstsType Sas_sensor_0x175_175::Sas_trimmingstsType_MAX;
const int Sas_sensor_0x175_175::Sas_trimmingstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[121];
}
bool Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType Sas_sensor_0x175_175::SAS_STEERWHEELROTSPDSTATUS_VALID;
const Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType Sas_sensor_0x175_175::SAS_STEERWHEELROTSPDSTATUS_INVALID;
const Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType Sas_sensor_0x175_175::Sas_steerwheelrotspdstatusType_MIN;
const Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType Sas_sensor_0x175_175::Sas_steerwheelrotspdstatusType_MAX;
const int Sas_sensor_0x175_175::Sas_steerwheelrotspdstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sas_sensor_0x175_175_Sas_sasstscalType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[122];
}
bool Sas_sensor_0x175_175_Sas_sasstscalType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sas_sensor_0x175_175_Sas_sasstscalType Sas_sensor_0x175_175::SAS_SASSTSCAL_SENSOR_NOT_CALIBRATED;
const Sas_sensor_0x175_175_Sas_sasstscalType Sas_sensor_0x175_175::SAS_SASSTSCAL_SENSOR_CALIBRATED;
const Sas_sensor_0x175_175_Sas_sasstscalType Sas_sensor_0x175_175::Sas_sasstscalType_MIN;
const Sas_sensor_0x175_175_Sas_sasstscalType Sas_sensor_0x175_175::Sas_sasstscalType_MAX;
const int Sas_sensor_0x175_175::Sas_sasstscalType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[123];
}
bool Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sas_sensor_0x175_175_Sas_raw_sasstssnsrType Sas_sensor_0x175_175::SAS_RAW_SASSTSSNSR_SENSOR_VALUE_INVALID;
const Sas_sensor_0x175_175_Sas_raw_sasstssnsrType Sas_sensor_0x175_175::SAS_RAW_SASSTSSNSR_SENSOR_VALUE_VALID;
const Sas_sensor_0x175_175_Sas_raw_sasstssnsrType Sas_sensor_0x175_175::Sas_raw_sasstssnsrType_MIN;
const Sas_sensor_0x175_175_Sas_raw_sasstssnsrType Sas_sensor_0x175_175::Sas_raw_sasstssnsrType_MAX;
const int Sas_sensor_0x175_175::Sas_raw_sasstssnsrType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sas_sensor_0x175_175_Sas_sasstssnsrType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[124];
}
bool Sas_sensor_0x175_175_Sas_sasstssnsrType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sas_sensor_0x175_175_Sas_sasstssnsrType Sas_sensor_0x175_175::SAS_SASSTSSNSR_SENSOR_VALUE_INVALID;
const Sas_sensor_0x175_175_Sas_sasstssnsrType Sas_sensor_0x175_175::SAS_SASSTSSNSR_SENSOR_VALUE_VALID;
const Sas_sensor_0x175_175_Sas_sasstssnsrType Sas_sensor_0x175_175::Sas_sasstssnsrType_MIN;
const Sas_sensor_0x175_175_Sas_sasstssnsrType Sas_sensor_0x175_175::Sas_sasstssnsrType_MAX;
const int Sas_sensor_0x175_175::Sas_sasstssnsrType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_outsidetempdigType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[125];
}
bool Gw_body_0x321_321_Bcm_outsidetempdigType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_body_0x321_321_Bcm_outsidetempdigType Gw_body_0x321_321::BCM_OUTSIDETEMPDIG_NOFAULT;
const Gw_body_0x321_321_Bcm_outsidetempdigType Gw_body_0x321_321::BCM_OUTSIDETEMPDIG_SHORTCIRCUIT;
const Gw_body_0x321_321_Bcm_outsidetempdigType Gw_body_0x321_321::BCM_OUTSIDETEMPDIG_OPENCIRCUIT;
const Gw_body_0x321_321_Bcm_outsidetempdigType Gw_body_0x321_321::Bcm_outsidetempdigType_MIN;
const Gw_body_0x321_321_Bcm_outsidetempdigType Gw_body_0x321_321::Bcm_outsidetempdigType_MAX;
const int Gw_body_0x321_321::Bcm_outsidetempdigType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[126];
}
bool Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321::BCM_DRIVING_MODE_REQ_BCM_NORMAL;
const Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321::BCM_DRIVING_MODE_REQ_BCM_SNOW;
const Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321::BCM_DRIVING_MODE_REQ_BCM_NOUSED;
const Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321::BCM_DRIVING_MODE_REQ_BCM_SPORT;
const Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321::BCM_DRIVING_MODE_REQ_BCM_ECO;
const Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321::BCM_DRIVING_MODE_REQ_BCM_4L;
const Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321::BCM_DRIVING_MODE_REQ_BCM_ROCK;
const Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321::BCM_DRIVING_MODE_REQ_BCM_WETMUD;
const Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321::BCM_DRIVING_MODE_REQ_BCM_SAND;
const Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321::BCM_DRIVING_MODE_REQ_BCM_GHAT_FORN330L;
const Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321::BCM_DRIVING_MODE_REQ_BCM_MANUAL_FORN330L;
const Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321::BCM_DRIVING_MODE_REQ_BCM_ATSFAULTBCM;
const Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321::BCM_DRIVING_MODE_REQ_BCM_INVALID;
const Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321::Bcm_driving_mode_req_bcmType_MIN;
const Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321::Bcm_driving_mode_req_bcmType_MAX;
const int Gw_body_0x321_321::Bcm_driving_mode_req_bcmType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_powermodeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[127];
}
bool Gw_body_0x321_321_Bcm_powermodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_body_0x321_321_Bcm_powermodeType Gw_body_0x321_321::BCM_POWERMODE_UNDEFINED;
const Gw_body_0x321_321_Bcm_powermodeType Gw_body_0x321_321::BCM_POWERMODE_OFF;
const Gw_body_0x321_321_Bcm_powermodeType Gw_body_0x321_321::BCM_POWERMODE_ACC;
const Gw_body_0x321_321_Bcm_powermodeType Gw_body_0x321_321::BCM_POWERMODE_ON;
const Gw_body_0x321_321_Bcm_powermodeType Gw_body_0x321_321::BCM_POWERMODE_START;
const Gw_body_0x321_321_Bcm_powermodeType Gw_body_0x321_321::Bcm_powermodeType_MIN;
const Gw_body_0x321_321_Bcm_powermodeType Gw_body_0x321_321::Bcm_powermodeType_MAX;
const int Gw_body_0x321_321::Bcm_powermodeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_frntfoglmpstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[128];
}
bool Gw_body_0x321_321_Bcm_frntfoglmpstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_body_0x321_321_Bcm_frntfoglmpstsType Gw_body_0x321_321::BCM_FRNTFOGLMPSTS_INVALID;
const Gw_body_0x321_321_Bcm_frntfoglmpstsType Gw_body_0x321_321::BCM_FRNTFOGLMPSTS_OFF;
const Gw_body_0x321_321_Bcm_frntfoglmpstsType Gw_body_0x321_321::BCM_FRNTFOGLMPSTS_ON;
const Gw_body_0x321_321_Bcm_frntfoglmpstsType Gw_body_0x321_321::BCM_FRNTFOGLMPSTS_RESERVED;
const Gw_body_0x321_321_Bcm_frntfoglmpstsType Gw_body_0x321_321::Bcm_frntfoglmpstsType_MIN;
const Gw_body_0x321_321_Bcm_frntfoglmpstsType Gw_body_0x321_321::Bcm_frntfoglmpstsType_MAX;
const int Gw_body_0x321_321::Bcm_frntfoglmpstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_lowbeamstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[129];
}
bool Gw_body_0x321_321_Bcm_lowbeamstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_body_0x321_321_Bcm_lowbeamstsType Gw_body_0x321_321::BCM_LOWBEAMSTS_INVALID;
const Gw_body_0x321_321_Bcm_lowbeamstsType Gw_body_0x321_321::BCM_LOWBEAMSTS_OFF;
const Gw_body_0x321_321_Bcm_lowbeamstsType Gw_body_0x321_321::BCM_LOWBEAMSTS_ON;
const Gw_body_0x321_321_Bcm_lowbeamstsType Gw_body_0x321_321::BCM_LOWBEAMSTS_RESERVED;
const Gw_body_0x321_321_Bcm_lowbeamstsType Gw_body_0x321_321::Bcm_lowbeamstsType_MIN;
const Gw_body_0x321_321_Bcm_lowbeamstsType Gw_body_0x321_321::Bcm_lowbeamstsType_MAX;
const int Gw_body_0x321_321::Bcm_lowbeamstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_highbeamstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[130];
}
bool Gw_body_0x321_321_Bcm_highbeamstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_body_0x321_321_Bcm_highbeamstsType Gw_body_0x321_321::BCM_HIGHBEAMSTS_INVALID;
const Gw_body_0x321_321_Bcm_highbeamstsType Gw_body_0x321_321::BCM_HIGHBEAMSTS_OFF;
const Gw_body_0x321_321_Bcm_highbeamstsType Gw_body_0x321_321::BCM_HIGHBEAMSTS_ON;
const Gw_body_0x321_321_Bcm_highbeamstsType Gw_body_0x321_321::BCM_HIGHBEAMSTS_RESERVED;
const Gw_body_0x321_321_Bcm_highbeamstsType Gw_body_0x321_321::Bcm_highbeamstsType_MIN;
const Gw_body_0x321_321_Bcm_highbeamstsType Gw_body_0x321_321::Bcm_highbeamstsType_MAX;
const int Gw_body_0x321_321::Bcm_highbeamstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_ss_enablestsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[131];
}
bool Gw_body_0x321_321_Bcm_ss_enablestsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_body_0x321_321_Bcm_ss_enablestsType Gw_body_0x321_321::BCM_SS_ENABLESTS_INVALID;
const Gw_body_0x321_321_Bcm_ss_enablestsType Gw_body_0x321_321::BCM_SS_ENABLESTS_STARTSTOPISALLOW;
const Gw_body_0x321_321_Bcm_ss_enablestsType Gw_body_0x321_321::BCM_SS_ENABLESTS_STARTSTOPISFORBID;
const Gw_body_0x321_321_Bcm_ss_enablestsType Gw_body_0x321_321::BCM_SS_ENABLESTS_RESERVED;
const Gw_body_0x321_321_Bcm_ss_enablestsType Gw_body_0x321_321::Bcm_ss_enablestsType_MIN;
const Gw_body_0x321_321_Bcm_ss_enablestsType Gw_body_0x321_321::Bcm_ss_enablestsType_MAX;
const int Gw_body_0x321_321::Bcm_ss_enablestsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_reardef_statusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[132];
}
bool Gw_body_0x321_321_Bcm_reardef_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_body_0x321_321_Bcm_reardef_statusType Gw_body_0x321_321::BCM_REARDEF_STATUS_INVALID;
const Gw_body_0x321_321_Bcm_reardef_statusType Gw_body_0x321_321::BCM_REARDEF_STATUS_REARDEFINACTIVE;
const Gw_body_0x321_321_Bcm_reardef_statusType Gw_body_0x321_321::BCM_REARDEF_STATUS_REARDEFACTIVE;
const Gw_body_0x321_321_Bcm_reardef_statusType Gw_body_0x321_321::BCM_REARDEF_STATUS_RESERVED;
const Gw_body_0x321_321_Bcm_reardef_statusType Gw_body_0x321_321::Bcm_reardef_statusType_MIN;
const Gw_body_0x321_321_Bcm_reardef_statusType Gw_body_0x321_321::Bcm_reardef_statusType_MAX;
const int Gw_body_0x321_321::Bcm_reardef_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_brakefluidstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[133];
}
bool Gw_body_0x321_321_Bcm_brakefluidstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_body_0x321_321_Bcm_brakefluidstsType Gw_body_0x321_321::BCM_BRAKEFLUIDSTS_INVALID;
const Gw_body_0x321_321_Bcm_brakefluidstsType Gw_body_0x321_321::BCM_BRAKEFLUIDSTS_NORMAL;
const Gw_body_0x321_321_Bcm_brakefluidstsType Gw_body_0x321_321::BCM_BRAKEFLUIDSTS_LOW;
const Gw_body_0x321_321_Bcm_brakefluidstsType Gw_body_0x321_321::BCM_BRAKEFLUIDSTS_RESERVED;
const Gw_body_0x321_321_Bcm_brakefluidstsType Gw_body_0x321_321::Bcm_brakefluidstsType_MIN;
const Gw_body_0x321_321_Bcm_brakefluidstsType Gw_body_0x321_321::Bcm_brakefluidstsType_MAX;
const int Gw_body_0x321_321::Bcm_brakefluidstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_autolampstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[134];
}
bool Gw_body_0x321_321_Bcm_autolampstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_body_0x321_321_Bcm_autolampstsType Gw_body_0x321_321::BCM_AUTOLAMPSTS_INVALID;
const Gw_body_0x321_321_Bcm_autolampstsType Gw_body_0x321_321::BCM_AUTOLAMPSTS_INACTIVE;
const Gw_body_0x321_321_Bcm_autolampstsType Gw_body_0x321_321::BCM_AUTOLAMPSTS_ACTIVE;
const Gw_body_0x321_321_Bcm_autolampstsType Gw_body_0x321_321::BCM_AUTOLAMPSTS_RESERVED;
const Gw_body_0x321_321_Bcm_autolampstsType Gw_body_0x321_321::Bcm_autolampstsType_MIN;
const Gw_body_0x321_321_Bcm_autolampstsType Gw_body_0x321_321::Bcm_autolampstsType_MAX;
const int Gw_body_0x321_321::Bcm_autolampstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_poslmpstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[135];
}
bool Gw_body_0x321_321_Bcm_poslmpstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_body_0x321_321_Bcm_poslmpstsType Gw_body_0x321_321::BCM_POSLMPSTS_NOUESD;
const Gw_body_0x321_321_Bcm_poslmpstsType Gw_body_0x321_321::BCM_POSLMPSTS_OFF;
const Gw_body_0x321_321_Bcm_poslmpstsType Gw_body_0x321_321::BCM_POSLMPSTS_ON;
const Gw_body_0x321_321_Bcm_poslmpstsType Gw_body_0x321_321::BCM_POSLMPSTS_RESERVED;
const Gw_body_0x321_321_Bcm_poslmpstsType Gw_body_0x321_321::Bcm_poslmpstsType_MIN;
const Gw_body_0x321_321_Bcm_poslmpstsType Gw_body_0x321_321::Bcm_poslmpstsType_MAX;
const int Gw_body_0x321_321::Bcm_poslmpstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_bgllumlvlsettingType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[136];
}
bool Gw_body_0x321_321_Bcm_bgllumlvlsettingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_0PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_1PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_2PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_3PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_4PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_5PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_6PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_7PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_8PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_9PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_10PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_11PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_12PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_13PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_14PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_15PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_16PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_17PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_18PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_19PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_20PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_21PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_22PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_23PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_24PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_25PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_26PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_27PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_28PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_29PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_30PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_31PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_32PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_33PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_34PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_35PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_36PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_37PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_38PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_39PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_40PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_41PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_42PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_43PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_44PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_45PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_46PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_47PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_48PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_49PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_50PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_51PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_52PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_53PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_54PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_55PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_56PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_57PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_58PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_59PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_60PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_61PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_62PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_63PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_64PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_65PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_66PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_67PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_68PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_69PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_70PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_71PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_72PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_73PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_74PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_75PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_76PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_77PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_78PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_79PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_80PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_81PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_82PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_83PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_84PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_85PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_86PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_87PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_88PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_89PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_90PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_91PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_92PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_93PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_94PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_95PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_96PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_97PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_98PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_99PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::BCM_BGLLUMLVLSETTING_100PERCENT;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::Bcm_bgllumlvlsettingType_MIN;
const Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::Bcm_bgllumlvlsettingType_MAX;
const int Gw_body_0x321_321::Bcm_bgllumlvlsettingType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_body_0x321_321_Bcm_reverse_gearType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[137];
}
bool Gw_body_0x321_321_Bcm_reverse_gearType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_body_0x321_321_Bcm_reverse_gearType Gw_body_0x321_321::BCM_REVERSE_GEAR_UNDEFINED;
const Gw_body_0x321_321_Bcm_reverse_gearType Gw_body_0x321_321::BCM_REVERSE_GEAR_NOTINREVERSEGEAR;
const Gw_body_0x321_321_Bcm_reverse_gearType Gw_body_0x321_321::BCM_REVERSE_GEAR_INREVERSEGEAR;
const Gw_body_0x321_321_Bcm_reverse_gearType Gw_body_0x321_321::BCM_REVERSE_GEAR_RESERVED;
const Gw_body_0x321_321_Bcm_reverse_gearType Gw_body_0x321_321::Bcm_reverse_gearType_MIN;
const Gw_body_0x321_321_Bcm_reverse_gearType Gw_body_0x321_321::Bcm_reverse_gearType_MAX;
const int Gw_body_0x321_321::Bcm_reverse_gearType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[138];
}
bool Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType Gw_ems_engstatus_0x142_142::EMS_ENGOPERATIONSTATUS_STOPPED;
const Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType Gw_ems_engstatus_0x142_142::EMS_ENGOPERATIONSTATUS_RUNNING;
const Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType Gw_ems_engstatus_0x142_142::EMS_ENGOPERATIONSTATUS_IDLE;
const Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType Gw_ems_engstatus_0x142_142::EMS_ENGOPERATIONSTATUS_DFCO_RESERVED;
const Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType Gw_ems_engstatus_0x142_142::EMS_ENGOPERATIONSTATUS_CRANKING;
const Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType Gw_ems_engstatus_0x142_142::EMS_ENGOPERATIONSTATUS_STALLING;
const Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType Gw_ems_engstatus_0x142_142::Ems_engoperationstatusType_MIN;
const Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType Gw_ems_engstatus_0x142_142::Ems_engoperationstatusType_MAX;
const int Gw_ems_engstatus_0x142_142::Ems_engoperationstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[139];
}
bool Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType Gw_ems_engstatus_0x142_142::EMS_AIRCOMPRESSORSTATUS_OFF;
const Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType Gw_ems_engstatus_0x142_142::EMS_AIRCOMPRESSORSTATUS_ON;
const Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType Gw_ems_engstatus_0x142_142::Ems_aircompressorstatusType_MIN;
const Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType Gw_ems_engstatus_0x142_142::Ems_aircompressorstatusType_MAX;
const int Gw_ems_engstatus_0x142_142::Ems_aircompressorstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[140];
}
bool Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType Gw_ems_engstatus_0x142_142::EMS_THROTTLEPLATEPOSITIONERROR_NOERROR;
const Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType Gw_ems_engstatus_0x142_142::EMS_THROTTLEPLATEPOSITIONERROR_ERROR;
const Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType Gw_ems_engstatus_0x142_142::Ems_throttleplatepositionerrorType_MIN;
const Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType Gw_ems_engstatus_0x142_142::Ems_throttleplatepositionerrorType_MAX;
const int Gw_ems_engstatus_0x142_142::Ems_throttleplatepositionerrorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[141];
}
bool Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::EMS_STARTSTOPMESSAGE_NOWARNINGMESSAGE;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::EMS_STARTSTOPMESSAGE_CLIMATEREQUEST;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::EMS_STARTSTOPMESSAGE_BRAKELOW;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::EMS_STARTSTOPMESSAGE_START_STOPOFF;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::EMS_STARTSTOPMESSAGE_BATTERYLOW;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::EMS_STARTSTOPMESSAGE_ECTLOW;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::EMS_STARTSTOPMESSAGE_APAINHIBIT;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::EMS_STARTSTOPMESSAGE_ACCINHIBIT;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::EMS_STARTSTOPMESSAGE_TCUINHIBIT;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::EMS_STARTSTOPMESSAGE_STARTPROTECT;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::EMS_STARTSTOPMESSAGE_HOODOPEN;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::EMS_STARTSTOPMESSAGE_DRVIEDOOROPNE;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::EMS_STARTSTOPMESSAGE_STEERINGANGELHIGH;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::EMS_STARTSTOPMESSAGE_STARTSTOPFAILURE;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::EMS_STARTSTOPMESSAGE_MANUALLYRESTART;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::EMS_STARTSTOPMESSAGE_RESERVED;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::Ems_startstopmessageType_MIN;
const Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::Ems_startstopmessageType_MAX;
const int Gw_ems_engstatus_0x142_142::Ems_startstopmessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[142];
}
bool Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ems_engstatus_0x142_142_Ems_ignswtstsType Gw_ems_engstatus_0x142_142::EMS_IGNSWTSTS_IGNITIONOFF;
const Gw_ems_engstatus_0x142_142_Ems_ignswtstsType Gw_ems_engstatus_0x142_142::EMS_IGNSWTSTS_IGNITIONON;
const Gw_ems_engstatus_0x142_142_Ems_ignswtstsType Gw_ems_engstatus_0x142_142::Ems_ignswtstsType_MIN;
const Gw_ems_engstatus_0x142_142_Ems_ignswtstsType Gw_ems_engstatus_0x142_142::Ems_ignswtstsType_MAX;
const int Gw_ems_engstatus_0x142_142::Ems_ignswtstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tbox_location_0x580_580_Tbox_gps_ubType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[143];
}
bool Gw_tbox_location_0x580_580_Tbox_gps_ubType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tbox_location_0x580_580_Tbox_gps_ubType Gw_tbox_location_0x580_580::TBOX_GPS_UB_NOT_UPDATE_GPS;
const Gw_tbox_location_0x580_580_Tbox_gps_ubType Gw_tbox_location_0x580_580::TBOX_GPS_UB_UPDATE_GPS;
const Gw_tbox_location_0x580_580_Tbox_gps_ubType Gw_tbox_location_0x580_580::Tbox_gps_ubType_MIN;
const Gw_tbox_location_0x580_580_Tbox_gps_ubType Gw_tbox_location_0x580_580::Tbox_gps_ubType_MAX;
const int Gw_tbox_location_0x580_580::Tbox_gps_ubType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tbox_location_0x580_580_Tbox_locationstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[144];
}
bool Gw_tbox_location_0x580_580_Tbox_locationstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tbox_location_0x580_580_Tbox_locationstsType Gw_tbox_location_0x580_580::TBOX_LOCATIONSTS_NORTH_LATITUDE_EAST_LONGITUDE;
const Gw_tbox_location_0x580_580_Tbox_locationstsType Gw_tbox_location_0x580_580::TBOX_LOCATIONSTS_NORTH_LATITUDE_WEST_LONGITUDE;
const Gw_tbox_location_0x580_580_Tbox_locationstsType Gw_tbox_location_0x580_580::TBOX_LOCATIONSTS_SOUTH_LATITUDE_EAST_LONGITUDE;
const Gw_tbox_location_0x580_580_Tbox_locationstsType Gw_tbox_location_0x580_580::TBOX_LOCATIONSTS_SOUTH_LATITUDE_WEST_LONGITUDE;
const Gw_tbox_location_0x580_580_Tbox_locationstsType Gw_tbox_location_0x580_580::TBOX_LOCATIONSTS_INVALID;
const Gw_tbox_location_0x580_580_Tbox_locationstsType Gw_tbox_location_0x580_580::Tbox_locationstsType_MIN;
const Gw_tbox_location_0x580_580_Tbox_locationstsType Gw_tbox_location_0x580_580::Tbox_locationstsType_MAX;
const int Gw_tbox_location_0x580_580::Tbox_locationstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Srs_0x350_350_Srs_sbr_secondrowrightType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[145];
}
bool Srs_0x350_350_Srs_sbr_secondrowrightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Srs_0x350_350_Srs_sbr_secondrowrightType Srs_0x350_350::SRS_SBR_SECONDROWRIGHT_LAMP_OFF;
const Srs_0x350_350_Srs_sbr_secondrowrightType Srs_0x350_350::SRS_SBR_SECONDROWRIGHT_LAMP_FLASHING_RESERVED;
const Srs_0x350_350_Srs_sbr_secondrowrightType Srs_0x350_350::SRS_SBR_SECONDROWRIGHT_LAMP_ON;
const Srs_0x350_350_Srs_sbr_secondrowrightType Srs_0x350_350::SRS_SBR_SECONDROWRIGHT_FAULT_RESERVED;
const Srs_0x350_350_Srs_sbr_secondrowrightType Srs_0x350_350::Srs_sbr_secondrowrightType_MIN;
const Srs_0x350_350_Srs_sbr_secondrowrightType Srs_0x350_350::Srs_sbr_secondrowrightType_MAX;
const int Srs_0x350_350::Srs_sbr_secondrowrightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Srs_0x350_350_Srs_sbr_secondrowmidType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[146];
}
bool Srs_0x350_350_Srs_sbr_secondrowmidType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Srs_0x350_350_Srs_sbr_secondrowmidType Srs_0x350_350::SRS_SBR_SECONDROWMID_LAMP_OFF;
const Srs_0x350_350_Srs_sbr_secondrowmidType Srs_0x350_350::SRS_SBR_SECONDROWMID_LAMP_FLASHING_RESERVED;
const Srs_0x350_350_Srs_sbr_secondrowmidType Srs_0x350_350::SRS_SBR_SECONDROWMID_LAMP_ON;
const Srs_0x350_350_Srs_sbr_secondrowmidType Srs_0x350_350::SRS_SBR_SECONDROWMID_FAULT_RESERVED;
const Srs_0x350_350_Srs_sbr_secondrowmidType Srs_0x350_350::Srs_sbr_secondrowmidType_MIN;
const Srs_0x350_350_Srs_sbr_secondrowmidType Srs_0x350_350::Srs_sbr_secondrowmidType_MAX;
const int Srs_0x350_350::Srs_sbr_secondrowmidType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Srs_0x350_350_Srs_sbr_secondrowleftType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[147];
}
bool Srs_0x350_350_Srs_sbr_secondrowleftType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Srs_0x350_350_Srs_sbr_secondrowleftType Srs_0x350_350::SRS_SBR_SECONDROWLEFT_LAMP_OFF;
const Srs_0x350_350_Srs_sbr_secondrowleftType Srs_0x350_350::SRS_SBR_SECONDROWLEFT_LAMP_FLASHING_RESERVED;
const Srs_0x350_350_Srs_sbr_secondrowleftType Srs_0x350_350::SRS_SBR_SECONDROWLEFT_LAMP_ON;
const Srs_0x350_350_Srs_sbr_secondrowleftType Srs_0x350_350::SRS_SBR_SECONDROWLEFT_FAULT_RESERVED;
const Srs_0x350_350_Srs_sbr_secondrowleftType Srs_0x350_350::Srs_sbr_secondrowleftType_MIN;
const Srs_0x350_350_Srs_sbr_secondrowleftType Srs_0x350_350::Srs_sbr_secondrowleftType_MAX;
const int Srs_0x350_350::Srs_sbr_secondrowleftType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Srs_0x350_350_Srs_sbr_pamsengerType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[148];
}
bool Srs_0x350_350_Srs_sbr_pamsengerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Srs_0x350_350_Srs_sbr_pamsengerType Srs_0x350_350::SRS_SBR_PAMSENGER_LAMP_OFF;
const Srs_0x350_350_Srs_sbr_pamsengerType Srs_0x350_350::SRS_SBR_PAMSENGER_LAMP_FLASHING_RESERVED;
const Srs_0x350_350_Srs_sbr_pamsengerType Srs_0x350_350::SRS_SBR_PAMSENGER_LAMP_ON;
const Srs_0x350_350_Srs_sbr_pamsengerType Srs_0x350_350::SRS_SBR_PAMSENGER_FAULT_RESERVED;
const Srs_0x350_350_Srs_sbr_pamsengerType Srs_0x350_350::Srs_sbr_pamsengerType_MIN;
const Srs_0x350_350_Srs_sbr_pamsengerType Srs_0x350_350::Srs_sbr_pamsengerType_MAX;
const int Srs_0x350_350::Srs_sbr_pamsengerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Srs_0x350_350_Srs_sbr_driverType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[149];
}
bool Srs_0x350_350_Srs_sbr_driverType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Srs_0x350_350_Srs_sbr_driverType Srs_0x350_350::SRS_SBR_DRIVER_LAMP_OFF;
const Srs_0x350_350_Srs_sbr_driverType Srs_0x350_350::SRS_SBR_DRIVER_LAMP_FLASHING_RESERVED;
const Srs_0x350_350_Srs_sbr_driverType Srs_0x350_350::SRS_SBR_DRIVER_LAMP_ON;
const Srs_0x350_350_Srs_sbr_driverType Srs_0x350_350::SRS_SBR_DRIVER_FAULT_RESERVED;
const Srs_0x350_350_Srs_sbr_driverType Srs_0x350_350::Srs_sbr_driverType_MIN;
const Srs_0x350_350_Srs_sbr_driverType Srs_0x350_350::Srs_sbr_driverType_MAX;
const int Srs_0x350_350::Srs_sbr_driverType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Srs_0x350_350_Srs_crashoutputstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[150];
}
bool Srs_0x350_350_Srs_crashoutputstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Srs_0x350_350_Srs_crashoutputstsType Srs_0x350_350::SRS_CRASHOUTPUTSTS_NO_CRASH;
const Srs_0x350_350_Srs_crashoutputstsType Srs_0x350_350::SRS_CRASHOUTPUTSTS_CRASH;
const Srs_0x350_350_Srs_crashoutputstsType Srs_0x350_350::Srs_crashoutputstsType_MIN;
const Srs_0x350_350_Srs_crashoutputstsType Srs_0x350_350::Srs_crashoutputstsType_MAX;
const int Srs_0x350_350::Srs_crashoutputstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Srs_0x350_350_Srs_airbagfailstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[151];
}
bool Srs_0x350_350_Srs_airbagfailstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Srs_0x350_350_Srs_airbagfailstsType Srs_0x350_350::SRS_AIRBAGFAILSTS_LAMP_OFF;
const Srs_0x350_350_Srs_airbagfailstsType Srs_0x350_350::SRS_AIRBAGFAILSTS_LAMP_FLASH;
const Srs_0x350_350_Srs_airbagfailstsType Srs_0x350_350::SRS_AIRBAGFAILSTS_LAMP_ON;
const Srs_0x350_350_Srs_airbagfailstsType Srs_0x350_350::SRS_AIRBAGFAILSTS_RESERVED;
const Srs_0x350_350_Srs_airbagfailstsType Srs_0x350_350::Srs_airbagfailstsType_MIN;
const Srs_0x350_350_Srs_airbagfailstsType Srs_0x350_350::Srs_airbagfailstsType_MAX;
const int Srs_0x350_350::Srs_airbagfailstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[152];
}
bool Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ipm_0x245_245_Ipm_laneassit_torquereqstatusType Ipm_0x245_245::IPM_LANEASSIT_TORQUEREQSTATUS_NO_REQUEST;
const Ipm_0x245_245_Ipm_laneassit_torquereqstatusType Ipm_0x245_245::IPM_LANEASSIT_TORQUEREQSTATUS_TORQUE_REQUEST;
const Ipm_0x245_245_Ipm_laneassit_torquereqstatusType Ipm_0x245_245::IPM_LANEASSIT_TORQUEREQSTATUS_RESERVED;
const Ipm_0x245_245_Ipm_laneassit_torquereqstatusType Ipm_0x245_245::Ipm_laneassit_torquereqstatusType_MIN;
const Ipm_0x245_245_Ipm_laneassit_torquereqstatusType Ipm_0x245_245::Ipm_laneassit_torquereqstatusType_MAX;
const int Ipm_0x245_245::Ipm_laneassit_torquereqstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_torquevalidityType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[153];
}
bool Ipm_0x245_245_Ipm_laneassit_torquevalidityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ipm_0x245_245_Ipm_laneassit_torquevalidityType Ipm_0x245_245::IPM_LANEASSIT_TORQUEVALIDITY_VALID;
const Ipm_0x245_245_Ipm_laneassit_torquevalidityType Ipm_0x245_245::IPM_LANEASSIT_TORQUEVALIDITY_INVALID;
const Ipm_0x245_245_Ipm_laneassit_torquevalidityType Ipm_0x245_245::Ipm_laneassit_torquevalidityType_MIN;
const Ipm_0x245_245_Ipm_laneassit_torquevalidityType Ipm_0x245_245::Ipm_laneassit_torquevalidityType_MAX;
const int Ipm_0x245_245::Ipm_laneassit_torquevalidityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_sensitivityType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[154];
}
bool Ipm_0x245_245_Ipm_laneassit_sensitivityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ipm_0x245_245_Ipm_laneassit_sensitivityType Ipm_0x245_245::IPM_LANEASSIT_SENSITIVITY_HIGHSENSITIVITY;
const Ipm_0x245_245_Ipm_laneassit_sensitivityType Ipm_0x245_245::IPM_LANEASSIT_SENSITIVITY_LOWSENSITIVITY;
const Ipm_0x245_245_Ipm_laneassit_sensitivityType Ipm_0x245_245::Ipm_laneassit_sensitivityType_MIN;
const Ipm_0x245_245_Ipm_laneassit_sensitivityType Ipm_0x245_245::Ipm_laneassit_sensitivityType_MAX;
const int Ipm_0x245_245::Ipm_laneassit_sensitivityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_warningaudioType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[155];
}
bool Ipm_0x245_245_Ipm_laneassit_warningaudioType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ipm_0x245_245_Ipm_laneassit_warningaudioType Ipm_0x245_245::IPM_LANEASSIT_WARNINGAUDIO_INACTIVE;
const Ipm_0x245_245_Ipm_laneassit_warningaudioType Ipm_0x245_245::IPM_LANEASSIT_WARNINGAUDIO_ACTIVE;
const Ipm_0x245_245_Ipm_laneassit_warningaudioType Ipm_0x245_245::Ipm_laneassit_warningaudioType_MIN;
const Ipm_0x245_245_Ipm_laneassit_warningaudioType Ipm_0x245_245::Ipm_laneassit_warningaudioType_MAX;
const int Ipm_0x245_245::Ipm_laneassit_warningaudioType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[156];
}
bool Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ipm_0x245_245_Ipm_laneassit_leftvisualizationType Ipm_0x245_245::IPM_LANEASSIT_LEFTVISUALIZATION_NO_DISPLAY;
const Ipm_0x245_245_Ipm_laneassit_leftvisualizationType Ipm_0x245_245::IPM_LANEASSIT_LEFTVISUALIZATION_LINE_TRACKING;
const Ipm_0x245_245_Ipm_laneassit_leftvisualizationType Ipm_0x245_245::IPM_LANEASSIT_LEFTVISUALIZATION_INTERVENTION;
const Ipm_0x245_245_Ipm_laneassit_leftvisualizationType Ipm_0x245_245::IPM_LANEASSIT_LEFTVISUALIZATION_WARNING;
const Ipm_0x245_245_Ipm_laneassit_leftvisualizationType Ipm_0x245_245::Ipm_laneassit_leftvisualizationType_MIN;
const Ipm_0x245_245_Ipm_laneassit_leftvisualizationType Ipm_0x245_245::Ipm_laneassit_leftvisualizationType_MAX;
const int Ipm_0x245_245::Ipm_laneassit_leftvisualizationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[157];
}
bool Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ipm_0x245_245_Ipm_laneassit_rightvisualizationType Ipm_0x245_245::IPM_LANEASSIT_RIGHTVISUALIZATION_NO_DISPLAY;
const Ipm_0x245_245_Ipm_laneassit_rightvisualizationType Ipm_0x245_245::IPM_LANEASSIT_RIGHTVISUALIZATION_LINE_TRACKING;
const Ipm_0x245_245_Ipm_laneassit_rightvisualizationType Ipm_0x245_245::IPM_LANEASSIT_RIGHTVISUALIZATION_INTERVENTION;
const Ipm_0x245_245_Ipm_laneassit_rightvisualizationType Ipm_0x245_245::IPM_LANEASSIT_RIGHTVISUALIZATION_WARNING;
const Ipm_0x245_245_Ipm_laneassit_rightvisualizationType Ipm_0x245_245::Ipm_laneassit_rightvisualizationType_MIN;
const Ipm_0x245_245_Ipm_laneassit_rightvisualizationType Ipm_0x245_245::Ipm_laneassit_rightvisualizationType_MAX;
const int Ipm_0x245_245::Ipm_laneassit_rightvisualizationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_slaspdlimitunitsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[158];
}
bool Ipm_0x245_245_Ipm_slaspdlimitunitsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ipm_0x245_245_Ipm_slaspdlimitunitsType Ipm_0x245_245::IPM_SLASPDLIMITUNITS_UNKNOWN;
const Ipm_0x245_245_Ipm_slaspdlimitunitsType Ipm_0x245_245::IPM_SLASPDLIMITUNITS_KMH;
const Ipm_0x245_245_Ipm_slaspdlimitunitsType Ipm_0x245_245::IPM_SLASPDLIMITUNITS_MPH;
const Ipm_0x245_245_Ipm_slaspdlimitunitsType Ipm_0x245_245::IPM_SLASPDLIMITUNITS_RESERVED;
const Ipm_0x245_245_Ipm_slaspdlimitunitsType Ipm_0x245_245::Ipm_slaspdlimitunitsType_MIN;
const Ipm_0x245_245_Ipm_slaspdlimitunitsType Ipm_0x245_245::Ipm_slaspdlimitunitsType_MAX;
const int Ipm_0x245_245::Ipm_slaspdlimitunitsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_slastateType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[159];
}
bool Ipm_0x245_245_Ipm_slastateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ipm_0x245_245_Ipm_slastateType Ipm_0x245_245::IPM_SLASTATE_OFF;
const Ipm_0x245_245_Ipm_slastateType Ipm_0x245_245::IPM_SLASTATE_FUSION_MODE;
const Ipm_0x245_245_Ipm_slastateType Ipm_0x245_245::IPM_SLASTATE_VISION_MODE;
const Ipm_0x245_245_Ipm_slastateType Ipm_0x245_245::IPM_SLASTATE_NAVIGATION_ONLY_MODE;
const Ipm_0x245_245_Ipm_slastateType Ipm_0x245_245::IPM_SLASTATE_DEFECT;
const Ipm_0x245_245_Ipm_slastateType Ipm_0x245_245::Ipm_slastateType_MIN;
const Ipm_0x245_245_Ipm_slastateType Ipm_0x245_245::Ipm_slastateType_MAX;
const int Ipm_0x245_245::Ipm_slastateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_statusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[160];
}
bool Ipm_0x245_245_Ipm_laneassit_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ipm_0x245_245_Ipm_laneassit_statusType Ipm_0x245_245::IPM_LANEASSIT_STATUS_OFF;
const Ipm_0x245_245_Ipm_laneassit_statusType Ipm_0x245_245::IPM_LANEASSIT_STATUS_STANDBY;
const Ipm_0x245_245_Ipm_laneassit_statusType Ipm_0x245_245::IPM_LANEASSIT_STATUS_LDW_ACTIVE_LKA_STANDBY;
const Ipm_0x245_245_Ipm_laneassit_statusType Ipm_0x245_245::IPM_LANEASSIT_STATUS_LDW_STANDBY_LKA_ACTIVE;
const Ipm_0x245_245_Ipm_laneassit_statusType Ipm_0x245_245::IPM_LANEASSIT_STATUS_ACTIVE;
const Ipm_0x245_245_Ipm_laneassit_statusType Ipm_0x245_245::IPM_LANEASSIT_STATUS_FAULT;
const Ipm_0x245_245_Ipm_laneassit_statusType Ipm_0x245_245::IPM_LANEASSIT_STATUS_CAMERA_BLOCKED;
const Ipm_0x245_245_Ipm_laneassit_statusType Ipm_0x245_245::IPM_LANEASSIT_STATUS_CAMERA_UNCALIBRATED;
const Ipm_0x245_245_Ipm_laneassit_statusType Ipm_0x245_245::Ipm_laneassit_statusType_MIN;
const Ipm_0x245_245_Ipm_laneassit_statusType Ipm_0x245_245::Ipm_laneassit_statusType_MAX;
const int Ipm_0x245_245::Ipm_laneassit_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_slaspdlimitType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[161];
}
bool Ipm_0x245_245_Ipm_slaspdlimitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_NO_DISPLAY;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_CANCELLED;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_5;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_10;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_15;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_20;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_25;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_30;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_35;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_40;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_45;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_50;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_55;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_60;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_65;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_70;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_75;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_80;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_85;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_90;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_95;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_100;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_105;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_110;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_115;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_120;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_125;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::IPM_SLASPDLIMIT_SPL_130;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::Ipm_slaspdlimitType_MIN;
const Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::Ipm_slaspdlimitType_MAX;
const int Ipm_0x245_245::Ipm_slaspdlimitType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_hma_statusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[162];
}
bool Ipm_0x245_245_Ipm_hma_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ipm_0x245_245_Ipm_hma_statusType Ipm_0x245_245::IPM_HMA_STATUS_OFF;
const Ipm_0x245_245_Ipm_hma_statusType Ipm_0x245_245::IPM_HMA_STATUS_PASSIVE;
const Ipm_0x245_245_Ipm_hma_statusType Ipm_0x245_245::IPM_HMA_STATUS_STANDBY;
const Ipm_0x245_245_Ipm_hma_statusType Ipm_0x245_245::IPM_HMA_STATUS_ACTIVE;
const Ipm_0x245_245_Ipm_hma_statusType Ipm_0x245_245::IPM_HMA_STATUS_FAULT;
const Ipm_0x245_245_Ipm_hma_statusType Ipm_0x245_245::IPM_HMA_STATUS_CAMERA_BLOCKED;
const Ipm_0x245_245_Ipm_hma_statusType Ipm_0x245_245::IPM_HMA_STATUS_RESERVED;
const Ipm_0x245_245_Ipm_hma_statusType Ipm_0x245_245::Ipm_hma_statusType_MIN;
const Ipm_0x245_245_Ipm_hma_statusType Ipm_0x245_245::Ipm_hma_statusType_MAX;
const int Ipm_0x245_245::Ipm_hma_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_tjaica_statusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[163];
}
bool Ipm_0x245_245_Ipm_tjaica_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ipm_0x245_245_Ipm_tjaica_statusType Ipm_0x245_245::IPM_TJAICA_STATUS_INACTIVE;
const Ipm_0x245_245_Ipm_tjaica_statusType Ipm_0x245_245::IPM_TJAICA_STATUS_ACTIVE;
const Ipm_0x245_245_Ipm_tjaica_statusType Ipm_0x245_245::Ipm_tjaica_statusType_MIN;
const Ipm_0x245_245_Ipm_tjaica_statusType Ipm_0x245_245::Ipm_tjaica_statusType_MAX;
const int Ipm_0x245_245::Ipm_tjaica_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_ldwwarningtypeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[164];
}
bool Ipm_0x245_245_Ipm_ldwwarningtypeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ipm_0x245_245_Ipm_ldwwarningtypeType Ipm_0x245_245::IPM_LDWWARNINGTYPE_AUDIBLE_WARNING_AND_WHEELSTEER_SHAKE;
const Ipm_0x245_245_Ipm_ldwwarningtypeType Ipm_0x245_245::IPM_LDWWARNINGTYPE_AUDIBLE_WARNING;
const Ipm_0x245_245_Ipm_ldwwarningtypeType Ipm_0x245_245::IPM_LDWWARNINGTYPE_WHEELSTEER_SHAKE;
const Ipm_0x245_245_Ipm_ldwwarningtypeType Ipm_0x245_245::IPM_LDWWARNINGTYPE_RESERVED;
const Ipm_0x245_245_Ipm_ldwwarningtypeType Ipm_0x245_245::Ipm_ldwwarningtypeType_MIN;
const Ipm_0x245_245_Ipm_ldwwarningtypeType Ipm_0x245_245::Ipm_ldwwarningtypeType_MAX;
const int Ipm_0x245_245::Ipm_ldwwarningtypeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_handsonreqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[165];
}
bool Ipm_0x245_245_Ipm_laneassit_handsonreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ipm_0x245_245_Ipm_laneassit_handsonreqType Ipm_0x245_245::IPM_LANEASSIT_HANDSONREQ_INACTIVE;
const Ipm_0x245_245_Ipm_laneassit_handsonreqType Ipm_0x245_245::IPM_LANEASSIT_HANDSONREQ_ACTIVE;
const Ipm_0x245_245_Ipm_laneassit_handsonreqType Ipm_0x245_245::Ipm_laneassit_handsonreqType_MIN;
const Ipm_0x245_245_Ipm_laneassit_handsonreqType Ipm_0x245_245::Ipm_laneassit_handsonreqType_MAX;
const int Ipm_0x245_245::Ipm_laneassit_handsonreqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_hma_highbeamreqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[166];
}
bool Ipm_0x245_245_Ipm_hma_highbeamreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ipm_0x245_245_Ipm_hma_highbeamreqType Ipm_0x245_245::IPM_HMA_HIGHBEAMREQ_NO_REQUEST;
const Ipm_0x245_245_Ipm_hma_highbeamreqType Ipm_0x245_245::IPM_HMA_HIGHBEAMREQ_HIGH_BEAM_REQUEST;
const Ipm_0x245_245_Ipm_hma_highbeamreqType Ipm_0x245_245::Ipm_hma_highbeamreqType_MIN;
const Ipm_0x245_245_Ipm_hma_highbeamreqType Ipm_0x245_245::Ipm_hma_highbeamreqType_MAX;
const int Ipm_0x245_245::Ipm_hma_highbeamreqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassittypeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[167];
}
bool Ipm_0x245_245_Ipm_laneassittypeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ipm_0x245_245_Ipm_laneassittypeType Ipm_0x245_245::IPM_LANEASSITTYPE_UNAVAILABLE;
const Ipm_0x245_245_Ipm_laneassittypeType Ipm_0x245_245::IPM_LANEASSITTYPE_LDW;
const Ipm_0x245_245_Ipm_laneassittypeType Ipm_0x245_245::IPM_LANEASSITTYPE_LKA;
const Ipm_0x245_245_Ipm_laneassittypeType Ipm_0x245_245::IPM_LANEASSITTYPE_LDW_LKA;
const Ipm_0x245_245_Ipm_laneassittypeType Ipm_0x245_245::IPM_LANEASSITTYPE_TJA_ICA;
const Ipm_0x245_245_Ipm_laneassittypeType Ipm_0x245_245::IPM_LANEASSITTYPE_TJA_ICA_LDW;
const Ipm_0x245_245_Ipm_laneassittypeType Ipm_0x245_245::IPM_LANEASSITTYPE_RESERVED;
const Ipm_0x245_245_Ipm_laneassittypeType Ipm_0x245_245::Ipm_laneassittypeType_MIN;
const Ipm_0x245_245_Ipm_laneassittypeType Ipm_0x245_245::Ipm_laneassittypeType_MAX;
const int Ipm_0x245_245::Ipm_laneassittypeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ipm_0x245_245_Ipm_laneassit_warningvibrationType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[168];
}
bool Ipm_0x245_245_Ipm_laneassit_warningvibrationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ipm_0x245_245_Ipm_laneassit_warningvibrationType Ipm_0x245_245::IPM_LANEASSIT_WARNINGVIBRATION_INACTIVE;
const Ipm_0x245_245_Ipm_laneassit_warningvibrationType Ipm_0x245_245::IPM_LANEASSIT_WARNINGVIBRATION_ACTIVE;
const Ipm_0x245_245_Ipm_laneassit_warningvibrationType Ipm_0x245_245::Ipm_laneassit_warningvibrationType_MIN;
const Ipm_0x245_245_Ipm_laneassit_warningvibrationType Ipm_0x245_245::Ipm_laneassit_warningvibrationType_MAX;
const int Ipm_0x245_245::Ipm_laneassit_warningvibrationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[169];
}
bool Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType Gw_ems_tqwhl_0x111_111::EMS_INDICATEDACCMESGERROR_NOEERROR;
const Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType Gw_ems_tqwhl_0x111_111::EMS_INDICATEDACCMESGERROR_REVERSIBLE_ERROR;
const Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType Gw_ems_tqwhl_0x111_111::EMS_INDICATEDACCMESGERROR_IRREVERSIBLE_ERROR;
const Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType Gw_ems_tqwhl_0x111_111::EMS_INDICATEDACCMESGERROR_NOTDEFINED;
const Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType Gw_ems_tqwhl_0x111_111::Ems_indicatedaccmesgerrorType_MIN;
const Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType Gw_ems_tqwhl_0x111_111::Ems_indicatedaccmesgerrorType_MAX;
const int Gw_ems_tqwhl_0x111_111::Ems_indicatedaccmesgerrorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[170];
}
bool Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType Gw_ems_tqwhl_0x111_111::EMS_INDICATEDDRIVEROVERRIDE_NOOVERRIDE;
const Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType Gw_ems_tqwhl_0x111_111::EMS_INDICATEDDRIVEROVERRIDE_DRIVEROVERRIDE;
const Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType Gw_ems_tqwhl_0x111_111::Ems_indicateddriveroverrideType_MIN;
const Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType Gw_ems_tqwhl_0x111_111::Ems_indicateddriveroverrideType_MAX;
const int Gw_ems_tqwhl_0x111_111::Ems_indicateddriveroverrideType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[171];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::TCU_DISPLAYGEAR_CURRENT_GEAR_N;
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::TCU_DISPLAYGEAR_GEAR_1;
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::TCU_DISPLAYGEAR_GEAR_2;
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::TCU_DISPLAYGEAR_GEAR_3;
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::TCU_DISPLAYGEAR_GEAR_4;
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::TCU_DISPLAYGEAR_GEAR_5;
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::TCU_DISPLAYGEAR_GEAR_6;
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::TCU_DISPLAYGEAR_GEAR_7;
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::TCU_DISPLAYGEAR_GEAR_8;
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::TCU_DISPLAYGEAR_CURRENT_GEAR_D;
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::TCU_DISPLAYGEAR_CURRENT_GEAR_L;
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::TCU_DISPLAYGEAR_CURRENT_GEAR_R;
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::TCU_DISPLAYGEAR_RESERVED;
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::TCU_DISPLAYGEAR_CURRENT_GEAR_P;
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::TCU_DISPLAYGEAR_INVALID;
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::Tcu_displaygearType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::Tcu_displaygearType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_displaygearType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[172];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType Gw_tcu_gearinfo_0x123_123::TCU_GEARSELECTORREQ_P;
const Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType Gw_tcu_gearinfo_0x123_123::TCU_GEARSELECTORREQ_L_RESERVED;
const Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType Gw_tcu_gearinfo_0x123_123::TCU_GEARSELECTORREQ_2_RESERVED;
const Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType Gw_tcu_gearinfo_0x123_123::TCU_GEARSELECTORREQ_3_RESERVED;
const Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType Gw_tcu_gearinfo_0x123_123::TCU_GEARSELECTORREQ_D;
const Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType Gw_tcu_gearinfo_0x123_123::TCU_GEARSELECTORREQ_N;
const Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType Gw_tcu_gearinfo_0x123_123::TCU_GEARSELECTORREQ_R;
const Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType Gw_tcu_gearinfo_0x123_123::TCU_GEARSELECTORREQ_M;
const Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType Gw_tcu_gearinfo_0x123_123::TCU_GEARSELECTORREQ_INVALID;
const Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType Gw_tcu_gearinfo_0x123_123::Tcu_gearselectorreqType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType Gw_tcu_gearinfo_0x123_123::Tcu_gearselectorreqType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_gearselectorreqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[173];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType Gw_tcu_gearinfo_0x123_123::TCU_TRANSPMOTOPARKREQINVALID_VALID;
const Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType Gw_tcu_gearinfo_0x123_123::TCU_TRANSPMOTOPARKREQINVALID_INVALID;
const Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType Gw_tcu_gearinfo_0x123_123::Tcu_transpmotoparkreqinvalidType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType Gw_tcu_gearinfo_0x123_123::Tcu_transpmotoparkreqinvalidType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_transpmotoparkreqinvalidType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[174];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType Gw_tcu_gearinfo_0x123_123::TCU_GEARSHIFTINPROGRESS_NOGEARSHIFTINPROGRESS;
const Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType Gw_tcu_gearinfo_0x123_123::TCU_GEARSHIFTINPROGRESS_GEARSHIFTINPROGRESS;
const Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType Gw_tcu_gearinfo_0x123_123::Tcu_gearshiftinprogressType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType Gw_tcu_gearinfo_0x123_123::Tcu_gearshiftinprogressType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_gearshiftinprogressType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[175];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType Gw_tcu_gearinfo_0x123_123::TCU_SHIFTLEVERPOS_SBWM_P;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType Gw_tcu_gearinfo_0x123_123::TCU_SHIFTLEVERPOS_SBWM_D;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType Gw_tcu_gearinfo_0x123_123::TCU_SHIFTLEVERPOS_SBWM_N;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType Gw_tcu_gearinfo_0x123_123::TCU_SHIFTLEVERPOS_SBWM_R;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType Gw_tcu_gearinfo_0x123_123::TCU_SHIFTLEVERPOS_SBWM_M;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType Gw_tcu_gearinfo_0x123_123::TCU_SHIFTLEVERPOS_SBWM_BLANK;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType Gw_tcu_gearinfo_0x123_123::TCU_SHIFTLEVERPOS_SBWM_RESERVED;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType Gw_tcu_gearinfo_0x123_123::TCU_SHIFTLEVERPOS_SBWM_INVALID;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType Gw_tcu_gearinfo_0x123_123::Tcu_shiftleverpos_sbwmType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType Gw_tcu_gearinfo_0x123_123::Tcu_shiftleverpos_sbwmType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_shiftleverpos_sbwmType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[176];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Gw_tcu_gearinfo_0x123_123::TCU_TARGETGEARREQ_DRIVETRAINOPEN_GEARN;
const Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Gw_tcu_gearinfo_0x123_123::TCU_TARGETGEARREQ_1STGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Gw_tcu_gearinfo_0x123_123::TCU_TARGETGEARREQ_2NDGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Gw_tcu_gearinfo_0x123_123::TCU_TARGETGEARREQ_3RDGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Gw_tcu_gearinfo_0x123_123::TCU_TARGETGEARREQ_4THGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Gw_tcu_gearinfo_0x123_123::TCU_TARGETGEARREQ_5THGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Gw_tcu_gearinfo_0x123_123::TCU_TARGETGEARREQ_6THGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Gw_tcu_gearinfo_0x123_123::TCU_TARGETGEARREQ_7THGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Gw_tcu_gearinfo_0x123_123::TCU_TARGETGEARREQ_8THGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Gw_tcu_gearinfo_0x123_123::TCU_TARGETGEARREQ_REVERSEGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Gw_tcu_gearinfo_0x123_123::TCU_TARGETGEARREQ_INVALID;
const Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Gw_tcu_gearinfo_0x123_123::Tcu_targetgearreqType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Gw_tcu_gearinfo_0x123_123::Tcu_targetgearreqType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_targetgearreqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_availableType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[177];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_availableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_availableType Gw_tcu_gearinfo_0x123_123::TCU_AVAILABLE_NOTAVAILABLE;
const Gw_tcu_gearinfo_0x123_123_Tcu_availableType Gw_tcu_gearinfo_0x123_123::TCU_AVAILABLE_AVAILABLE;
const Gw_tcu_gearinfo_0x123_123_Tcu_availableType Gw_tcu_gearinfo_0x123_123::Tcu_availableType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_availableType Gw_tcu_gearinfo_0x123_123::Tcu_availableType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_availableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[178];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType Gw_tcu_gearinfo_0x123_123::TCU_DRIVERINTERVENTION_NOINTERVENTION;
const Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType Gw_tcu_gearinfo_0x123_123::TCU_DRIVERINTERVENTION_DRIVERINTERVENTION;
const Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType Gw_tcu_gearinfo_0x123_123::Tcu_driverinterventionType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType Gw_tcu_gearinfo_0x123_123::Tcu_driverinterventionType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_driverinterventionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[179];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType Gw_tcu_gearinfo_0x123_123::TCU_TRSMFAULTFLAG_NORMAL;
const Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType Gw_tcu_gearinfo_0x123_123::TCU_TRSMFAULTFLAG_FAILURE_NOLIMP_HOME;
const Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType Gw_tcu_gearinfo_0x123_123::TCU_TRSMFAULTFLAG_FAIL_LIMP_HOMEACTIVATED;
const Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType Gw_tcu_gearinfo_0x123_123::TCU_TRSMFAULTFLAG_RESERVED;
const Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType Gw_tcu_gearinfo_0x123_123::Tcu_trsmfaultflagType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType Gw_tcu_gearinfo_0x123_123::Tcu_trsmfaultflagType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_trsmfaultflagType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[180];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123::TCU_STGEARMODE_STANDARD;
const Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123::TCU_STGEARMODE_SNOW;
const Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123::TCU_STGEARMODE_MANUAL_RESERVED;
const Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123::TCU_STGEARMODE_SPORT;
const Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123::TCU_STGEARMODE_ECO;
const Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123::TCU_STGEARMODE_4L;
const Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123::TCU_STGEARMODE_WETMUD;
const Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123::TCU_STGEARMODE_SAND;
const Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123::TCU_STGEARMODE_GHAT;
const Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123::TCU_STGEARMODE_MANUAL;
const Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123::TCU_STGEARMODE_ATSFAULTTCU;
const Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123::TCU_STGEARMODE_INVALID;
const Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123::Tcu_stgearmodeType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123::Tcu_stgearmodeType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_stgearmodeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[181];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Gw_tcu_gearinfo_0x123_123::TCU_DRIVING_MODE_REQ_NORMAL;
const Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Gw_tcu_gearinfo_0x123_123::TCU_DRIVING_MODE_REQ_SNOW;
const Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Gw_tcu_gearinfo_0x123_123::TCU_DRIVING_MODE_REQ_NOUSED;
const Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Gw_tcu_gearinfo_0x123_123::TCU_DRIVING_MODE_REQ_SPORT;
const Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Gw_tcu_gearinfo_0x123_123::TCU_DRIVING_MODE_REQ_ECO;
const Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Gw_tcu_gearinfo_0x123_123::TCU_DRIVING_MODE_REQ_4L;
const Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Gw_tcu_gearinfo_0x123_123::TCU_DRIVING_MODE_REQ_ROCK;
const Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Gw_tcu_gearinfo_0x123_123::TCU_DRIVING_MODE_REQ_WETMUD;
const Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Gw_tcu_gearinfo_0x123_123::TCU_DRIVING_MODE_REQ_SAND;
const Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Gw_tcu_gearinfo_0x123_123::TCU_DRIVING_MODE_REQ_SWITCHFAULT;
const Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Gw_tcu_gearinfo_0x123_123::TCU_DRIVING_MODE_REQ_INVALID;
const Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Gw_tcu_gearinfo_0x123_123::Tcu_driving_mode_reqType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Gw_tcu_gearinfo_0x123_123::Tcu_driving_mode_reqType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_driving_mode_reqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[182];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType Gw_tcu_gearinfo_0x123_123::TCU_EPBLOCKREQ_NO_REQUEST;
const Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType Gw_tcu_gearinfo_0x123_123::TCU_EPBLOCKREQ_REQUEST_PARK_BRAKE_ENGAGE;
const Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType Gw_tcu_gearinfo_0x123_123::Tcu_epblockreqType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType Gw_tcu_gearinfo_0x123_123::Tcu_epblockreqType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_epblockreqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[183];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType Gw_tcu_gearinfo_0x123_123::TCU_HIGHRESISTANCE_NO_HIGHRESISTANCE;
const Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType Gw_tcu_gearinfo_0x123_123::TCU_HIGHRESISTANCE_HIGHRESISTANCE;
const Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType Gw_tcu_gearinfo_0x123_123::Tcu_highresistanceType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType Gw_tcu_gearinfo_0x123_123::Tcu_highresistanceType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_highresistanceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[184];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType Gw_tcu_gearinfo_0x123_123::TCU_DRIVINGMODECHANGE_FAULT_FLAG_NOFAULT;
const Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType Gw_tcu_gearinfo_0x123_123::TCU_DRIVINGMODECHANGE_FAULT_FLAG_FAULT;
const Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType Gw_tcu_gearinfo_0x123_123::Tcu_drivingmodechange_fault_flagType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType Gw_tcu_gearinfo_0x123_123::Tcu_drivingmodechange_fault_flagType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_drivingmodechange_fault_flagType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[185];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType Gw_tcu_gearinfo_0x123_123::TCU_SHIFTLEVERTOPREQINVALID_VALID;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType Gw_tcu_gearinfo_0x123_123::TCU_SHIFTLEVERTOPREQINVALID_INVALID;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType Gw_tcu_gearinfo_0x123_123::Tcu_shiftlevertopreqinvalidType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType Gw_tcu_gearinfo_0x123_123::Tcu_shiftlevertopreqinvalidType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_shiftlevertopreqinvalidType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[186];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType Gw_tcu_gearinfo_0x123_123::TCU_TRANSPMOTORPARKREQ_NOREQUEST;
const Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType Gw_tcu_gearinfo_0x123_123::TCU_TRANSPMOTORPARKREQ_UNPARKREQUEST;
const Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType Gw_tcu_gearinfo_0x123_123::TCU_TRANSPMOTORPARKREQ_PARKREQUEST;
const Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType Gw_tcu_gearinfo_0x123_123::TCU_TRANSPMOTORPARKREQ_RESERVED;
const Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType Gw_tcu_gearinfo_0x123_123::Tcu_transpmotorparkreqType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType Gw_tcu_gearinfo_0x123_123::Tcu_transpmotorparkreqType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_transpmotorparkreqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[187];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType Gw_tcu_gearinfo_0x123_123::TCU_SHIFTLEVERTOPREQ_NOREQUEST;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType Gw_tcu_gearinfo_0x123_123::TCU_SHIFTLEVERTOPREQ_PARKREQUEST;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType Gw_tcu_gearinfo_0x123_123::TCU_SHIFTLEVERTOPREQ_RESERVED;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType Gw_tcu_gearinfo_0x123_123::Tcu_shiftlevertopreqType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType Gw_tcu_gearinfo_0x123_123::Tcu_shiftlevertopreqType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_shiftlevertopreqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[188];
}
bool Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Gw_tcu_gearinfo_0x123_123::TCU_CURRENTGEARPOSITION_DRIVETRAINOPEN_GEARN;
const Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Gw_tcu_gearinfo_0x123_123::TCU_CURRENTGEARPOSITION_1STGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Gw_tcu_gearinfo_0x123_123::TCU_CURRENTGEARPOSITION_2NDGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Gw_tcu_gearinfo_0x123_123::TCU_CURRENTGEARPOSITION_3RDGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Gw_tcu_gearinfo_0x123_123::TCU_CURRENTGEARPOSITION_4THGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Gw_tcu_gearinfo_0x123_123::TCU_CURRENTGEARPOSITION_5THGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Gw_tcu_gearinfo_0x123_123::TCU_CURRENTGEARPOSITION_6THGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Gw_tcu_gearinfo_0x123_123::TCU_CURRENTGEARPOSITION_7THGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Gw_tcu_gearinfo_0x123_123::TCU_CURRENTGEARPOSITION_8THGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Gw_tcu_gearinfo_0x123_123::TCU_CURRENTGEARPOSITION_REVERSEGEAR;
const Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Gw_tcu_gearinfo_0x123_123::TCU_CURRENTGEARPOSITION_INVALID;
const Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Gw_tcu_gearinfo_0x123_123::Tcu_currentgearpositionType_MIN;
const Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Gw_tcu_gearinfo_0x123_123::Tcu_currentgearpositionType_MAX;
const int Gw_tcu_gearinfo_0x123_123::Tcu_currentgearpositionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[189];
}
bool Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType Esp_pressure_0x241_241::ESP_TRFCASEMODREQDBYESP_NO_REQUEST;
const Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType Esp_pressure_0x241_241::ESP_TRFCASEMODREQDBYESP_FAST_OPEN_REQUEST;
const Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType Esp_pressure_0x241_241::ESP_TRFCASEMODREQDBYESP_TORQUE_UPPER_LIMIT_REQUEST;
const Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType Esp_pressure_0x241_241::ESP_TRFCASEMODREQDBYESP_FAILURE;
const Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType Esp_pressure_0x241_241::Esp_trfcasemodreqdbyespType_MIN;
const Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType Esp_pressure_0x241_241::Esp_trfcasemodreqdbyespType_MAX;
const int Esp_pressure_0x241_241::Esp_trfcasemodreqdbyespType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[190];
}
bool Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType Esp_pressure_0x241_241::ESP_PRESOFFSETMASTERCYLINDERVALI_VALID;
const Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType Esp_pressure_0x241_241::ESP_PRESOFFSETMASTERCYLINDERVALI_INVALID;
const Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType Esp_pressure_0x241_241::Esp_presoffsetmastercylindervaliType_MIN;
const Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType Esp_pressure_0x241_241::Esp_presoffsetmastercylindervaliType_MAX;
const int Esp_pressure_0x241_241::Esp_presoffsetmastercylindervaliType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[191];
}
bool Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType Esp_pressure_0x241_241::ESP_MASTER_CYLINDER_PRESSURE_STA_VALID;
const Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType Esp_pressure_0x241_241::ESP_MASTER_CYLINDER_PRESSURE_STA_INVALID;
const Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType Esp_pressure_0x241_241::Esp_master_cylinder_pressure_staType_MIN;
const Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType Esp_pressure_0x241_241::Esp_master_cylinder_pressure_staType_MAX;
const int Esp_pressure_0x241_241::Esp_master_cylinder_pressure_staType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_hhcavailableType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[192];
}
bool Esp_status_0x243_243_Esp_hhcavailableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_hhcavailableType Esp_status_0x243_243::ESP_HHCAVAILABLE_AVAILABLE;
const Esp_status_0x243_243_Esp_hhcavailableType Esp_status_0x243_243::ESP_HHCAVAILABLE_NOT_AVAILABLE;
const Esp_status_0x243_243_Esp_hhcavailableType Esp_status_0x243_243::Esp_hhcavailableType_MIN;
const Esp_status_0x243_243_Esp_hhcavailableType Esp_status_0x243_243::Esp_hhcavailableType_MAX;
const int Esp_status_0x243_243::Esp_hhcavailableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_hhcactiveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[193];
}
bool Esp_status_0x243_243_Esp_hhcactiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_hhcactiveType Esp_status_0x243_243::ESP_HHCACTIVE_NOT_ACTIVE;
const Esp_status_0x243_243_Esp_hhcactiveType Esp_status_0x243_243::ESP_HHCACTIVE_ACTIVE;
const Esp_status_0x243_243_Esp_hhcactiveType Esp_status_0x243_243::Esp_hhcactiveType_MIN;
const Esp_status_0x243_243_Esp_hhcactiveType Esp_status_0x243_243::Esp_hhcactiveType_MAX;
const int Esp_status_0x243_243::Esp_hhcactiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_hdcactiveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[194];
}
bool Esp_status_0x243_243_Esp_hdcactiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_hdcactiveType Esp_status_0x243_243::ESP_HDCACTIVE_OFF;
const Esp_status_0x243_243_Esp_hdcactiveType Esp_status_0x243_243::ESP_HDCACTIVE_ON_ACTIVE_BRAKING;
const Esp_status_0x243_243_Esp_hdcactiveType Esp_status_0x243_243::ESP_HDCACTIVE_ON_NOT_ACTIVE_BRAKING;
const Esp_status_0x243_243_Esp_hdcactiveType Esp_status_0x243_243::Esp_hdcactiveType_MIN;
const Esp_status_0x243_243_Esp_hdcactiveType Esp_status_0x243_243::Esp_hdcactiveType_MAX;
const int Esp_status_0x243_243::Esp_hdcactiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[195];
}
bool Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType Esp_status_0x243_243::ESP_LDMBLC_BLREQUESTCONTROLLER_NOT_ILLUMINATE;
const Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType Esp_status_0x243_243::ESP_LDMBLC_BLREQUESTCONTROLLER_ILLUMINATE;
const Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType Esp_status_0x243_243::Esp_ldmblc_blrequestcontrollerType_MIN;
const Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType Esp_status_0x243_243::Esp_ldmblc_blrequestcontrollerType_MAX;
const int Esp_status_0x243_243::Esp_ldmblc_blrequestcontrollerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_cdpavailableType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[196];
}
bool Esp_status_0x243_243_Esp_cdpavailableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_cdpavailableType Esp_status_0x243_243::ESP_CDPAVAILABLE_AVAILABLE;
const Esp_status_0x243_243_Esp_cdpavailableType Esp_status_0x243_243::ESP_CDPAVAILABLE_NOT_AVAILABLE;
const Esp_status_0x243_243_Esp_cdpavailableType Esp_status_0x243_243::Esp_cdpavailableType_MIN;
const Esp_status_0x243_243_Esp_cdpavailableType Esp_status_0x243_243::Esp_cdpavailableType_MAX;
const int Esp_status_0x243_243::Esp_cdpavailableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_cdpactiveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[197];
}
bool Esp_status_0x243_243_Esp_cdpactiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_cdpactiveType Esp_status_0x243_243::ESP_CDPACTIVE_NOT_ACTIVE;
const Esp_status_0x243_243_Esp_cdpactiveType Esp_status_0x243_243::ESP_CDPACTIVE_ACTIVE;
const Esp_status_0x243_243_Esp_cdpactiveType Esp_status_0x243_243::Esp_cdpactiveType_MIN;
const Esp_status_0x243_243_Esp_cdpactiveType Esp_status_0x243_243::Esp_cdpactiveType_MAX;
const int Esp_status_0x243_243::Esp_cdpactiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_epbwarningmessage3Type_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[198];
}
bool Esp_status_0x243_243_Esp_epbwarningmessage3Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_epbwarningmessage3Type Esp_status_0x243_243::ESP_EPBWARNINGMESSAGE3_NO_DISPLAY;
const Esp_status_0x243_243_Esp_epbwarningmessage3Type Esp_status_0x243_243::ESP_EPBWARNINGMESSAGE3_WHEN_APPLIED_THE_EPB_THE_SLOPE_OF_VEHICLE_IS_MORE_THAN_20_FOR_PK_30_FOR_SUV;
const Esp_status_0x243_243_Esp_epbwarningmessage3Type Esp_status_0x243_243::Esp_epbwarningmessage3Type_MIN;
const Esp_status_0x243_243_Esp_epbwarningmessage3Type Esp_status_0x243_243::Esp_epbwarningmessage3Type_MAX;
const int Esp_status_0x243_243::Esp_epbwarningmessage3Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_epbwarningmessage2Type_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[199];
}
bool Esp_status_0x243_243_Esp_epbwarningmessage2Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_epbwarningmessage2Type Esp_status_0x243_243::ESP_EPBWARNINGMESSAGE2_NO_DISPLAY;
const Esp_status_0x243_243_Esp_epbwarningmessage2Type Esp_status_0x243_243::ESP_EPBWARNINGMESSAGE2_EPB_DRIVEROFF_WITHOUT_SEATBLET_OR_DRIVER_DOOR;
const Esp_status_0x243_243_Esp_epbwarningmessage2Type Esp_status_0x243_243::Esp_epbwarningmessage2Type_MIN;
const Esp_status_0x243_243_Esp_epbwarningmessage2Type Esp_status_0x243_243::Esp_epbwarningmessage2Type_MAX;
const int Esp_status_0x243_243::Esp_epbwarningmessage2Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_epbwarningmessage1Type_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[200];
}
bool Esp_status_0x243_243_Esp_epbwarningmessage1Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_epbwarningmessage1Type Esp_status_0x243_243::ESP_EPBWARNINGMESSAGE1_NO_DISPLAY;
const Esp_status_0x243_243_Esp_epbwarningmessage1Type Esp_status_0x243_243::ESP_EPBWARNINGMESSAGE1_NO_BRAKE_PEDAL_PRESSED_AND_RELEASE_THE_EPB;
const Esp_status_0x243_243_Esp_epbwarningmessage1Type Esp_status_0x243_243::Esp_epbwarningmessage1Type_MIN;
const Esp_status_0x243_243_Esp_epbwarningmessage1Type Esp_status_0x243_243::Esp_epbwarningmessage1Type_MAX;
const int Esp_status_0x243_243::Esp_epbwarningmessage1Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_avhwarningmessageType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[201];
}
bool Esp_status_0x243_243_Esp_avhwarningmessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_avhwarningmessageType Esp_status_0x243_243::ESP_AVHWARNINGMESSAGE_NO_WARNING;
const Esp_status_0x243_243_Esp_avhwarningmessageType Esp_status_0x243_243::ESP_AVHWARNINGMESSAGE_PLEASE_CLOSE_THE_DOOR_OR_SEATBLET_THEN_PRESSURE_THE_AVH_BUTTON;
const Esp_status_0x243_243_Esp_avhwarningmessageType Esp_status_0x243_243::Esp_avhwarningmessageType_MIN;
const Esp_status_0x243_243_Esp_avhwarningmessageType Esp_status_0x243_243::Esp_avhwarningmessageType_MAX;
const int Esp_status_0x243_243::Esp_avhwarningmessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_avhactiveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[202];
}
bool Esp_status_0x243_243_Esp_avhactiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_avhactiveType Esp_status_0x243_243::ESP_AVHACTIVE_INACTIVE;
const Esp_status_0x243_243_Esp_avhactiveType Esp_status_0x243_243::ESP_AVHACTIVE_ACTIVE;
const Esp_status_0x243_243_Esp_avhactiveType Esp_status_0x243_243::Esp_avhactiveType_MIN;
const Esp_status_0x243_243_Esp_avhactiveType Esp_status_0x243_243::Esp_avhactiveType_MAX;
const int Esp_status_0x243_243::Esp_avhactiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_avhstandbyType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[203];
}
bool Esp_status_0x243_243_Esp_avhstandbyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_avhstandbyType Esp_status_0x243_243::ESP_AVHSTANDBY_NOT_STANDBY;
const Esp_status_0x243_243_Esp_avhstandbyType Esp_status_0x243_243::ESP_AVHSTANDBY_STANDBY;
const Esp_status_0x243_243_Esp_avhstandbyType Esp_status_0x243_243::Esp_avhstandbyType_MIN;
const Esp_status_0x243_243_Esp_avhstandbyType Esp_status_0x243_243::Esp_avhstandbyType_MAX;
const int Esp_status_0x243_243::Esp_avhstandbyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_avhavabliableType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[204];
}
bool Esp_status_0x243_243_Esp_avhavabliableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_avhavabliableType Esp_status_0x243_243::ESP_AVHAVABLIABLE_AVAILABLE;
const Esp_status_0x243_243_Esp_avhavabliableType Esp_status_0x243_243::ESP_AVHAVABLIABLE_NOT_AVAILABLE;
const Esp_status_0x243_243_Esp_avhavabliableType Esp_status_0x243_243::Esp_avhavabliableType_MIN;
const Esp_status_0x243_243_Esp_avhavabliableType Esp_status_0x243_243::Esp_avhavabliableType_MAX;
const int Esp_status_0x243_243::Esp_avhavabliableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_vdcflgfltType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[205];
}
bool Esp_status_0x243_243_Esp_vdcflgfltType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_vdcflgfltType Esp_status_0x243_243::ESP_VDCFLGFLT_NO_FAILURE;
const Esp_status_0x243_243_Esp_vdcflgfltType Esp_status_0x243_243::ESP_VDCFLGFLT_FAILURE;
const Esp_status_0x243_243_Esp_vdcflgfltType Esp_status_0x243_243::Esp_vdcflgfltType_MIN;
const Esp_status_0x243_243_Esp_vdcflgfltType Esp_status_0x243_243::Esp_vdcflgfltType_MAX;
const int Esp_status_0x243_243::Esp_vdcflgfltType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_tcsflgfltType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[206];
}
bool Esp_status_0x243_243_Esp_tcsflgfltType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_tcsflgfltType Esp_status_0x243_243::ESP_TCSFLGFLT_NO_FAILURE;
const Esp_status_0x243_243_Esp_tcsflgfltType Esp_status_0x243_243::ESP_TCSFLGFLT_FAILURE;
const Esp_status_0x243_243_Esp_tcsflgfltType Esp_status_0x243_243::Esp_tcsflgfltType_MIN;
const Esp_status_0x243_243_Esp_tcsflgfltType Esp_status_0x243_243::Esp_tcsflgfltType_MAX;
const int Esp_status_0x243_243::Esp_tcsflgfltType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_tcsctrlactvType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[207];
}
bool Esp_status_0x243_243_Esp_tcsctrlactvType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_tcsctrlactvType Esp_status_0x243_243::ESP_TCSCTRLACTV_NOT_ACTIVE;
const Esp_status_0x243_243_Esp_tcsctrlactvType Esp_status_0x243_243::ESP_TCSCTRLACTV_ACTIVE;
const Esp_status_0x243_243_Esp_tcsctrlactvType Esp_status_0x243_243::Esp_tcsctrlactvType_MIN;
const Esp_status_0x243_243_Esp_tcsctrlactvType Esp_status_0x243_243::Esp_tcsctrlactvType_MAX;
const int Esp_status_0x243_243::Esp_tcsctrlactvType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_espctrlactvType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[208];
}
bool Esp_status_0x243_243_Esp_espctrlactvType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_espctrlactvType Esp_status_0x243_243::ESP_ESPCTRLACTV_NOT_ACTIVE;
const Esp_status_0x243_243_Esp_espctrlactvType Esp_status_0x243_243::ESP_ESPCTRLACTV_ACTIVE;
const Esp_status_0x243_243_Esp_espctrlactvType Esp_status_0x243_243::Esp_espctrlactvType_MIN;
const Esp_status_0x243_243_Esp_espctrlactvType Esp_status_0x243_243::Esp_espctrlactvType_MAX;
const int Esp_status_0x243_243::Esp_espctrlactvType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_driving_mode_reqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[209];
}
bool Esp_status_0x243_243_Esp_driving_mode_reqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243::ESP_DRIVING_MODE_REQ_AUTO;
const Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243::ESP_DRIVING_MODE_REQ_SNOW;
const Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243::ESP_DRIVING_MODE_REQ_NO_USED;
const Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243::ESP_DRIVING_MODE_REQ_SPORT;
const Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243::ESP_DRIVING_MODE_REQ_ECO;
const Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243::ESP_DRIVING_MODE_REQ_4L;
const Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243::ESP_DRIVING_MODE_REQ_ROCK;
const Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243::ESP_DRIVING_MODE_REQ_WETMUD;
const Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243::ESP_DRIVING_MODE_REQ_SAND;
const Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243::ESP_DRIVING_MODE_REQ_ATS_SHIFTING;
const Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243::ESP_DRIVING_MODE_REQ_ATS_SHIFT_FAILURE;
const Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243::ESP_DRIVING_MODE_REQ_INVALID;
const Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243::Esp_driving_mode_reqType_MIN;
const Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243::Esp_driving_mode_reqType_MAX;
const int Esp_status_0x243_243::Esp_driving_mode_reqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_espinfolampType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[210];
}
bool Esp_status_0x243_243_Esp_espinfolampType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_espinfolampType Esp_status_0x243_243::ESP_ESPINFOLAMP_OFF;
const Esp_status_0x243_243_Esp_espinfolampType Esp_status_0x243_243::ESP_ESPINFOLAMP_ON;
const Esp_status_0x243_243_Esp_espinfolampType Esp_status_0x243_243::Esp_espinfolampType_MIN;
const Esp_status_0x243_243_Esp_espinfolampType Esp_status_0x243_243::Esp_espinfolampType_MAX;
const int Esp_status_0x243_243::Esp_espinfolampType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_espenablestsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[211];
}
bool Esp_status_0x243_243_Esp_espenablestsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_espenablestsType Esp_status_0x243_243::ESP_ESPENABLESTS_ESP_DISABLED;
const Esp_status_0x243_243_Esp_espenablestsType Esp_status_0x243_243::ESP_ESPENABLESTS_ESP_ENABLED;
const Esp_status_0x243_243_Esp_espenablestsType Esp_status_0x243_243::Esp_espenablestsType_MIN;
const Esp_status_0x243_243_Esp_espenablestsType Esp_status_0x243_243::Esp_espenablestsType_MAX;
const int Esp_status_0x243_243::Esp_espenablestsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_gearshiftprevnType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[212];
}
bool Esp_status_0x243_243_Esp_gearshiftprevnType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_gearshiftprevnType Esp_status_0x243_243::ESP_GEARSHIFTPREVN_NO_REQUEST;
const Esp_status_0x243_243_Esp_gearshiftprevnType Esp_status_0x243_243::ESP_GEARSHIFTPREVN_INHIBIT_UPSHIFT;
const Esp_status_0x243_243_Esp_gearshiftprevnType Esp_status_0x243_243::ESP_GEARSHIFTPREVN_INHIBIT_DOWN_SHIFT;
const Esp_status_0x243_243_Esp_gearshiftprevnType Esp_status_0x243_243::ESP_GEARSHIFTPREVN_INHIBIT_ALL_SHIFTS;
const Esp_status_0x243_243_Esp_gearshiftprevnType Esp_status_0x243_243::Esp_gearshiftprevnType_MIN;
const Esp_status_0x243_243_Esp_gearshiftprevnType Esp_status_0x243_243::Esp_gearshiftprevnType_MAX;
const int Esp_status_0x243_243::Esp_gearshiftprevnType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_epbstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[213];
}
bool Esp_status_0x243_243_Esp_epbstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_epbstatusType Esp_status_0x243_243::ESP_EPBSTATUS_RELEASED;
const Esp_status_0x243_243_Esp_epbstatusType Esp_status_0x243_243::ESP_EPBSTATUS_APPLIED;
const Esp_status_0x243_243_Esp_epbstatusType Esp_status_0x243_243::ESP_EPBSTATUS_RELEASINGR;
const Esp_status_0x243_243_Esp_epbstatusType Esp_status_0x243_243::ESP_EPBSTATUS_APPLYING;
const Esp_status_0x243_243_Esp_epbstatusType Esp_status_0x243_243::ESP_EPBSTATUS_UNKNOWN;
const Esp_status_0x243_243_Esp_epbstatusType Esp_status_0x243_243::ESP_EPBSTATUS_ERROR;
const Esp_status_0x243_243_Esp_epbstatusType Esp_status_0x243_243::Esp_epbstatusType_MIN;
const Esp_status_0x243_243_Esp_epbstatusType Esp_status_0x243_243::Esp_epbstatusType_MAX;
const int Esp_status_0x243_243::Esp_epbstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_RollerbenchmodestsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[214];
}
bool Esp_status_0x243_243_RollerbenchmodestsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_RollerbenchmodestsType Esp_status_0x243_243::ROLLERBENCHMODESTS_ROLLERBENCH_MODE_INACTIVE;
const Esp_status_0x243_243_RollerbenchmodestsType Esp_status_0x243_243::ROLLERBENCHMODESTS_ROLLERBENCH_MODE_ACTIVE;
const Esp_status_0x243_243_RollerbenchmodestsType Esp_status_0x243_243::RollerbenchmodestsType_MIN;
const Esp_status_0x243_243_RollerbenchmodestsType Esp_status_0x243_243::RollerbenchmodestsType_MAX;
const int Esp_status_0x243_243::RollerbenchmodestsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_epberrorstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[215];
}
bool Esp_status_0x243_243_Esp_epberrorstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_epberrorstatusType Esp_status_0x243_243::ESP_EPBERRORSTATUS_UNDEFINED;
const Esp_status_0x243_243_Esp_epberrorstatusType Esp_status_0x243_243::ESP_EPBERRORSTATUS_NO_ERROR;
const Esp_status_0x243_243_Esp_epberrorstatusType Esp_status_0x243_243::ESP_EPBERRORSTATUS_ERROR;
const Esp_status_0x243_243_Esp_epberrorstatusType Esp_status_0x243_243::ESP_EPBERRORSTATUS_DIAGNOSIS;
const Esp_status_0x243_243_Esp_epberrorstatusType Esp_status_0x243_243::Esp_epberrorstatusType_MIN;
const Esp_status_0x243_243_Esp_epberrorstatusType Esp_status_0x243_243::Esp_epberrorstatusType_MAX;
const int Esp_status_0x243_243::Esp_epberrorstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_ccswitchoffType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[216];
}
bool Esp_status_0x243_243_Esp_ccswitchoffType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_ccswitchoffType Esp_status_0x243_243::ESP_CCSWITCHOFF_NOT_SWITCH_OFF_CRUISE_CONTROL;
const Esp_status_0x243_243_Esp_ccswitchoffType Esp_status_0x243_243::ESP_CCSWITCHOFF_SWITCH_OFF_CRUISE_CONTROL;
const Esp_status_0x243_243_Esp_ccswitchoffType Esp_status_0x243_243::Esp_ccswitchoffType_MIN;
const Esp_status_0x243_243_Esp_ccswitchoffType Esp_status_0x243_243::Esp_ccswitchoffType_MAX;
const int Esp_status_0x243_243::Esp_ccswitchoffType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_status_0x243_243_Esp_hdcavailableType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[217];
}
bool Esp_status_0x243_243_Esp_hdcavailableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_status_0x243_243_Esp_hdcavailableType Esp_status_0x243_243::ESP_HDCAVAILABLE_AVAILABLE;
const Esp_status_0x243_243_Esp_hdcavailableType Esp_status_0x243_243::ESP_HDCAVAILABLE_NOT_AVAILABLE;
const Esp_status_0x243_243_Esp_hdcavailableType Esp_status_0x243_243::Esp_hdcavailableType_MIN;
const Esp_status_0x243_243_Esp_hdcavailableType Esp_status_0x243_243::Esp_hdcavailableType_MAX;
const int Esp_status_0x243_243::Esp_hdcavailableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_axay_0x242_242_Esp_yawratestatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[218];
}
bool Esp_axay_0x242_242_Esp_yawratestatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_axay_0x242_242_Esp_yawratestatusType Esp_axay_0x242_242::ESP_YAWRATESTATUS_OK;
const Esp_axay_0x242_242_Esp_yawratestatusType Esp_axay_0x242_242::ESP_YAWRATESTATUS_FAULT;
const Esp_axay_0x242_242_Esp_yawratestatusType Esp_axay_0x242_242::Esp_yawratestatusType_MIN;
const Esp_axay_0x242_242_Esp_yawratestatusType Esp_axay_0x242_242::Esp_yawratestatusType_MAX;
const int Esp_axay_0x242_242::Esp_yawratestatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_axay_0x242_242_Esp_alatstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[219];
}
bool Esp_axay_0x242_242_Esp_alatstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_axay_0x242_242_Esp_alatstatusType Esp_axay_0x242_242::ESP_ALATSTATUS_OK;
const Esp_axay_0x242_242_Esp_alatstatusType Esp_axay_0x242_242::ESP_ALATSTATUS_FAULT;
const Esp_axay_0x242_242_Esp_alatstatusType Esp_axay_0x242_242::Esp_alatstatusType_MIN;
const Esp_axay_0x242_242_Esp_alatstatusType Esp_axay_0x242_242::Esp_alatstatusType_MAX;
const int Esp_axay_0x242_242::Esp_alatstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_axay_0x242_242_Esp_algtstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[220];
}
bool Esp_axay_0x242_242_Esp_algtstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_axay_0x242_242_Esp_algtstatusType Esp_axay_0x242_242::ESP_ALGTSTATUS_OK;
const Esp_axay_0x242_242_Esp_algtstatusType Esp_axay_0x242_242::ESP_ALGTSTATUS_FAULT;
const Esp_axay_0x242_242_Esp_algtstatusType Esp_axay_0x242_242::Esp_algtstatusType_MIN;
const Esp_axay_0x242_242_Esp_algtstatusType Esp_axay_0x242_242::Esp_algtstatusType_MAX;
const int Esp_axay_0x242_242::Esp_algtstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[221];
}
bool Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType Gw_swm_mrr_0x31b_31b::SWM_ACCTAUGAPSETPLUS_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType Gw_swm_mrr_0x31b_31b::SWM_ACCTAUGAPSETPLUS_PRESSED;
const Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType Gw_swm_mrr_0x31b_31b::Swm_acctaugapsetplusType_MIN;
const Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType Gw_swm_mrr_0x31b_31b::Swm_acctaugapsetplusType_MAX;
const int Gw_swm_mrr_0x31b_31b::Swm_acctaugapsetplusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[222];
}
bool Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType Gw_swm_mrr_0x31b_31b::SWM_ACCVSETMINUS_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType Gw_swm_mrr_0x31b_31b::SWM_ACCVSETMINUS_PRESSED;
const Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType Gw_swm_mrr_0x31b_31b::Swm_accvsetminusType_MIN;
const Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType Gw_swm_mrr_0x31b_31b::Swm_accvsetminusType_MAX;
const int Gw_swm_mrr_0x31b_31b::Swm_accvsetminusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[223];
}
bool Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType Gw_swm_mrr_0x31b_31b::SWM_SHIFTPADREQUP_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType Gw_swm_mrr_0x31b_31b::SWM_SHIFTPADREQUP_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType Gw_swm_mrr_0x31b_31b::Swm_shiftpadrequpType_MIN;
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType Gw_swm_mrr_0x31b_31b::Swm_shiftpadrequpType_MAX;
const int Gw_swm_mrr_0x31b_31b::Swm_shiftpadrequpType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[224];
}
bool Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType Gw_swm_mrr_0x31b_31b::SWM_ACCLIMPHOMESTS_NORMAL;
const Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType Gw_swm_mrr_0x31b_31b::SWM_ACCLIMPHOMESTS_LIMPHOME;
const Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType Gw_swm_mrr_0x31b_31b::Swm_acclimphomestsType_MIN;
const Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType Gw_swm_mrr_0x31b_31b::Swm_acclimphomestsType_MAX;
const int Gw_swm_mrr_0x31b_31b::Swm_acclimphomestsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[225];
}
bool Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType Gw_swm_mrr_0x31b_31b::SWM_LANEASSISTSWITCH_PREVENT_LANEASSIST_CONTROL;
const Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType Gw_swm_mrr_0x31b_31b::SWM_LANEASSISTSWITCH_ENABLE_LANEASSIST_CONTROL;
const Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType Gw_swm_mrr_0x31b_31b::Swm_laneassistswitchType_MIN;
const Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType Gw_swm_mrr_0x31b_31b::Swm_laneassistswitchType_MAX;
const int Gw_swm_mrr_0x31b_31b::Swm_laneassistswitchType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[226];
}
bool Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType Gw_swm_mrr_0x31b_31b::SWM_ACCTAUGAPSETMINUS_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType Gw_swm_mrr_0x31b_31b::SWM_ACCTAUGAPSETMINUS_PRESSED;
const Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType Gw_swm_mrr_0x31b_31b::Swm_acctaugapsetminusType_MIN;
const Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType Gw_swm_mrr_0x31b_31b::Swm_acctaugapsetminusType_MAX;
const int Gw_swm_mrr_0x31b_31b::Swm_acctaugapsetminusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[227];
}
bool Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType Gw_swm_mrr_0x31b_31b::SWM_ACCVSETPLUS_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType Gw_swm_mrr_0x31b_31b::SWM_ACCVSETPLUS_PRESSED;
const Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType Gw_swm_mrr_0x31b_31b::Swm_accvsetplusType_MIN;
const Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType Gw_swm_mrr_0x31b_31b::Swm_accvsetplusType_MAX;
const int Gw_swm_mrr_0x31b_31b::Swm_accvsetplusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[228];
}
bool Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType Gw_swm_mrr_0x31b_31b::SWM_SHIFTPADFLT_NO_FAULT;
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType Gw_swm_mrr_0x31b_31b::SWM_SHIFTPADFLT_FAULT;
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType Gw_swm_mrr_0x31b_31b::Swm_shiftpadfltType_MIN;
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType Gw_swm_mrr_0x31b_31b::Swm_shiftpadfltType_MAX;
const int Gw_swm_mrr_0x31b_31b::Swm_shiftpadfltType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[229];
}
bool Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType Gw_swm_mrr_0x31b_31b::SWM_ACCDEACTIVATE_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType Gw_swm_mrr_0x31b_31b::SWM_ACCDEACTIVATE_PRESSED;
const Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType Gw_swm_mrr_0x31b_31b::Swm_accdeactivateType_MIN;
const Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType Gw_swm_mrr_0x31b_31b::Swm_accdeactivateType_MAX;
const int Gw_swm_mrr_0x31b_31b::Swm_accdeactivateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_accresumeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[230];
}
bool Gw_swm_mrr_0x31b_31b_Swm_accresumeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_mrr_0x31b_31b_Swm_accresumeType Gw_swm_mrr_0x31b_31b::SWM_ACCRESUME_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_accresumeType Gw_swm_mrr_0x31b_31b::SWM_ACCRESUME_PRESSED;
const Gw_swm_mrr_0x31b_31b_Swm_accresumeType Gw_swm_mrr_0x31b_31b::Swm_accresumeType_MIN;
const Gw_swm_mrr_0x31b_31b_Swm_accresumeType Gw_swm_mrr_0x31b_31b::Swm_accresumeType_MAX;
const int Gw_swm_mrr_0x31b_31b::Swm_accresumeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_accsetType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[231];
}
bool Gw_swm_mrr_0x31b_31b_Swm_accsetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_mrr_0x31b_31b_Swm_accsetType Gw_swm_mrr_0x31b_31b::SWM_ACCSET_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_accsetType Gw_swm_mrr_0x31b_31b::SWM_ACCSET_PRESSED;
const Gw_swm_mrr_0x31b_31b_Swm_accsetType Gw_swm_mrr_0x31b_31b::Swm_accsetType_MIN;
const Gw_swm_mrr_0x31b_31b_Swm_accsetType Gw_swm_mrr_0x31b_31b::Swm_accsetType_MAX;
const int Gw_swm_mrr_0x31b_31b::Swm_accsetType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[232];
}
bool Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType Gw_swm_mrr_0x31b_31b::SWM_ACCENABLESWITCH_PREVENT_ACC_CONTROL;
const Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType Gw_swm_mrr_0x31b_31b::SWM_ACCENABLESWITCH_ENABLE_ACC_CONTROL;
const Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType Gw_swm_mrr_0x31b_31b::Swm_accenableswitchType_MIN;
const Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType Gw_swm_mrr_0x31b_31b::Swm_accenableswitchType_MAX;
const int Gw_swm_mrr_0x31b_31b::Swm_accenableswitchType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[233];
}
bool Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType Gw_swm_mrr_0x31b_31b::SWM_ACCRESUME_QT_VALID;
const Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType Gw_swm_mrr_0x31b_31b::SWM_ACCRESUME_QT_INVALID;
const Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType Gw_swm_mrr_0x31b_31b::Swm_accresume_qtType_MIN;
const Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType Gw_swm_mrr_0x31b_31b::Swm_accresume_qtType_MAX;
const int Gw_swm_mrr_0x31b_31b::Swm_accresume_qtType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[234];
}
bool Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType Gw_swm_mrr_0x31b_31b::SWM_TJASWITCH_PREVENT_TJA_CONTROL;
const Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType Gw_swm_mrr_0x31b_31b::SWM_TJASWITCH_ENABLE_TJA_CONTROL;
const Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType Gw_swm_mrr_0x31b_31b::Swm_tjaswitchType_MIN;
const Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType Gw_swm_mrr_0x31b_31b::Swm_tjaswitchType_MAX;
const int Gw_swm_mrr_0x31b_31b::Swm_tjaswitchType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[235];
}
bool Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType Gw_swm_mrr_0x31b_31b::SWM_SHIFTPADREQDOWN_NO_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType Gw_swm_mrr_0x31b_31b::SWM_SHIFTPADREQDOWN_PRESS;
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType Gw_swm_mrr_0x31b_31b::Swm_shiftpadreqdownType_MIN;
const Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType Gw_swm_mrr_0x31b_31b::Swm_shiftpadreqdownType_MAX;
const int Gw_swm_mrr_0x31b_31b::Swm_shiftpadreqdownType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_highbeamType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[236];
}
bool Gw_swm_body_0x31a_31a_Swm_highbeamType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_highbeamType Gw_swm_body_0x31a_31a::SWM_HIGHBEAM_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_highbeamType Gw_swm_body_0x31a_31a::SWM_HIGHBEAM_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_highbeamType Gw_swm_body_0x31a_31a::SWM_HIGHBEAM_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_highbeamType Gw_swm_body_0x31a_31a::SWM_HIGHBEAM_INVALID;
const Gw_swm_body_0x31a_31a_Swm_highbeamType Gw_swm_body_0x31a_31a::Swm_highbeamType_MIN;
const Gw_swm_body_0x31a_31a_Swm_highbeamType Gw_swm_body_0x31a_31a::Swm_highbeamType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_highbeamType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[237];
}
bool Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType Gw_swm_body_0x31a_31a::SWM_FRONTWIPINGMODE_FRONT_WIPING_OFF;
const Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType Gw_swm_body_0x31a_31a::SWM_FRONTWIPINGMODE_FRONT_WIPER_SPEED_LOW_ACTIVATION;
const Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType Gw_swm_body_0x31a_31a::SWM_FRONTWIPINGMODE_FRONT_WIPER_SPEED_HIGH_ACTIVATION;
const Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType Gw_swm_body_0x31a_31a::SWM_FRONTWIPINGMODE_FRONT_MIST_WIPING_ACTIVATION;
const Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType Gw_swm_body_0x31a_31a::SWM_FRONTWIPINGMODE_FRONT_AUTO_INTERVAL_WIPING_ACTIVATION;
const Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType Gw_swm_body_0x31a_31a::SWM_FRONTWIPINGMODE_INVALID;
const Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType Gw_swm_body_0x31a_31a::Swm_frontwipingmodeType_MIN;
const Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType Gw_swm_body_0x31a_31a::Swm_frontwipingmodeType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_frontwipingmodeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[238];
}
bool Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType Gw_swm_body_0x31a_31a::SWM_WIPINGINTERVAL_SENSITVITY_SENSITIVITY_0;
const Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType Gw_swm_body_0x31a_31a::SWM_WIPINGINTERVAL_SENSITVITY_SENSITIVITY_1;
const Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType Gw_swm_body_0x31a_31a::SWM_WIPINGINTERVAL_SENSITVITY_SENSITIVITY_2;
const Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType Gw_swm_body_0x31a_31a::SWM_WIPINGINTERVAL_SENSITVITY_SENSITIVITY_3;
const Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType Gw_swm_body_0x31a_31a::SWM_WIPINGINTERVAL_SENSITVITY_INVALID;
const Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType Gw_swm_body_0x31a_31a::Swm_wipinginterval_sensitvityType_MIN;
const Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType Gw_swm_body_0x31a_31a::Swm_wipinginterval_sensitvityType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_wipinginterval_sensitvityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_rearfoglightType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[239];
}
bool Gw_swm_body_0x31a_31a_Swm_rearfoglightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_rearfoglightType Gw_swm_body_0x31a_31a::SWM_REARFOGLIGHT_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_rearfoglightType Gw_swm_body_0x31a_31a::SWM_REARFOGLIGHT_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_rearfoglightType Gw_swm_body_0x31a_31a::SWM_REARFOGLIGHT_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_rearfoglightType Gw_swm_body_0x31a_31a::SWM_REARFOGLIGHT_INVALID;
const Gw_swm_body_0x31a_31a_Swm_rearfoglightType Gw_swm_body_0x31a_31a::Swm_rearfoglightType_MIN;
const Gw_swm_body_0x31a_31a_Swm_rearfoglightType Gw_swm_body_0x31a_31a::Swm_rearfoglightType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_rearfoglightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_frontfoglightType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[240];
}
bool Gw_swm_body_0x31a_31a_Swm_frontfoglightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_frontfoglightType Gw_swm_body_0x31a_31a::SWM_FRONTFOGLIGHT_OFF;
const Gw_swm_body_0x31a_31a_Swm_frontfoglightType Gw_swm_body_0x31a_31a::SWM_FRONTFOGLIGHT_ON;
const Gw_swm_body_0x31a_31a_Swm_frontfoglightType Gw_swm_body_0x31a_31a::SWM_FRONTFOGLIGHT_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_frontfoglightType Gw_swm_body_0x31a_31a::SWM_FRONTFOGLIGHT_INVALID;
const Gw_swm_body_0x31a_31a_Swm_frontfoglightType Gw_swm_body_0x31a_31a::Swm_frontfoglightType_MIN;
const Gw_swm_body_0x31a_31a_Swm_frontfoglightType Gw_swm_body_0x31a_31a::Swm_frontfoglightType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_frontfoglightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[241];
}
bool Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType Gw_swm_body_0x31a_31a::SWM_WASHERLIMPHOMESTS_NORMAL;
const Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType Gw_swm_body_0x31a_31a::SWM_WASHERLIMPHOMESTS_LIMPHOME;
const Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType Gw_swm_body_0x31a_31a::Swm_washerlimphomestsType_MIN;
const Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType Gw_swm_body_0x31a_31a::Swm_washerlimphomestsType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_washerlimphomestsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[242];
}
bool Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType Gw_swm_body_0x31a_31a::SWM_REARWIPINGMODE_REARWIPING_OFF;
const Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType Gw_swm_body_0x31a_31a::SWM_REARWIPINGMODE_REAR_WIPER_UNIFORMITY_SPEED;
const Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType Gw_swm_body_0x31a_31a::SWM_REARWIPINGMODE_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType Gw_swm_body_0x31a_31a::SWM_REARWIPINGMODE_INVALID;
const Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType Gw_swm_body_0x31a_31a::Swm_rearwipingmodeType_MIN;
const Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType Gw_swm_body_0x31a_31a::Swm_rearwipingmodeType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_rearwipingmodeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_turnindicationactType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[243];
}
bool Gw_swm_body_0x31a_31a_Swm_turnindicationactType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_turnindicationactType Gw_swm_body_0x31a_31a::SWM_TURNINDICATIONACT_DEFAULT;
const Gw_swm_body_0x31a_31a_Swm_turnindicationactType Gw_swm_body_0x31a_31a::SWM_TURNINDICATIONACT_TURN_LEFT;
const Gw_swm_body_0x31a_31a_Swm_turnindicationactType Gw_swm_body_0x31a_31a::SWM_TURNINDICATIONACT_TURN_RIGHT;
const Gw_swm_body_0x31a_31a_Swm_turnindicationactType Gw_swm_body_0x31a_31a::SWM_TURNINDICATIONACT_INVALID;
const Gw_swm_body_0x31a_31a_Swm_turnindicationactType Gw_swm_body_0x31a_31a::Swm_turnindicationactType_MIN;
const Gw_swm_body_0x31a_31a_Swm_turnindicationactType Gw_swm_body_0x31a_31a::Swm_turnindicationactType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_turnindicationactType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_vol_plusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[244];
}
bool Gw_swm_body_0x31a_31a_Swm_vol_plusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_vol_plusType Gw_swm_body_0x31a_31a::SWM_VOL_PLUS_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_vol_plusType Gw_swm_body_0x31a_31a::SWM_VOL_PLUS_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_vol_plusType Gw_swm_body_0x31a_31a::SWM_VOL_PLUS_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_vol_plusType Gw_swm_body_0x31a_31a::SWM_VOL_PLUS_INVALID;
const Gw_swm_body_0x31a_31a_Swm_vol_plusType Gw_swm_body_0x31a_31a::Swm_vol_plusType_MIN;
const Gw_swm_body_0x31a_31a_Swm_vol_plusType Gw_swm_body_0x31a_31a::Swm_vol_plusType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_vol_plusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_vol_minusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[245];
}
bool Gw_swm_body_0x31a_31a_Swm_vol_minusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_vol_minusType Gw_swm_body_0x31a_31a::SWM_VOL_MINUS_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_vol_minusType Gw_swm_body_0x31a_31a::SWM_VOL_MINUS_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_vol_minusType Gw_swm_body_0x31a_31a::SWM_VOL_MINUS_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_vol_minusType Gw_swm_body_0x31a_31a::SWM_VOL_MINUS_INVALID;
const Gw_swm_body_0x31a_31a_Swm_vol_minusType Gw_swm_body_0x31a_31a::Swm_vol_minusType_MIN;
const Gw_swm_body_0x31a_31a_Swm_vol_minusType Gw_swm_body_0x31a_31a::Swm_vol_minusType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_vol_minusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_wechatType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[246];
}
bool Gw_swm_body_0x31a_31a_Swm_wechatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_wechatType Gw_swm_body_0x31a_31a::SWM_WECHAT_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_wechatType Gw_swm_body_0x31a_31a::SWM_WECHAT_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_wechatType Gw_swm_body_0x31a_31a::Swm_wechatType_MIN;
const Gw_swm_body_0x31a_31a_Swm_wechatType Gw_swm_body_0x31a_31a::Swm_wechatType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_wechatType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[247];
}
bool Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType Gw_swm_body_0x31a_31a::SWM_LAMPLIMPHOMESTS_NORMAL;
const Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType Gw_swm_body_0x31a_31a::SWM_LAMPLIMPHOMESTS_LIMPHOME;
const Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType Gw_swm_body_0x31a_31a::Swm_lamplimphomestsType_MIN;
const Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType Gw_swm_body_0x31a_31a::Swm_lamplimphomestsType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_lamplimphomestsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_headlampType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[248];
}
bool Gw_swm_body_0x31a_31a_Swm_headlampType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_headlampType Gw_swm_body_0x31a_31a::SWM_HEADLAMP_OFF;
const Gw_swm_body_0x31a_31a_Swm_headlampType Gw_swm_body_0x31a_31a::SWM_HEADLAMP_AUTOLIGHT;
const Gw_swm_body_0x31a_31a_Swm_headlampType Gw_swm_body_0x31a_31a::SWM_HEADLAMP_POSITIONLIGHT;
const Gw_swm_body_0x31a_31a_Swm_headlampType Gw_swm_body_0x31a_31a::SWM_HEADLAMP_LOWBEAM;
const Gw_swm_body_0x31a_31a_Swm_headlampType Gw_swm_body_0x31a_31a::SWM_HEADLAMP_INVALID;
const Gw_swm_body_0x31a_31a_Swm_headlampType Gw_swm_body_0x31a_31a::Swm_headlampType_MIN;
const Gw_swm_body_0x31a_31a_Swm_headlampType Gw_swm_body_0x31a_31a::Swm_headlampType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_headlampType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_next_songType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[249];
}
bool Gw_swm_body_0x31a_31a_Swm_next_songType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_next_songType Gw_swm_body_0x31a_31a::SWM_NEXT_SONG_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_next_songType Gw_swm_body_0x31a_31a::SWM_NEXT_SONG_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_next_songType Gw_swm_body_0x31a_31a::SWM_NEXT_SONG_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_next_songType Gw_swm_body_0x31a_31a::SWM_NEXT_SONG_INVALID;
const Gw_swm_body_0x31a_31a_Swm_next_songType Gw_swm_body_0x31a_31a::Swm_next_songType_MIN;
const Gw_swm_body_0x31a_31a_Swm_next_songType Gw_swm_body_0x31a_31a::Swm_next_songType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_next_songType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_previous_songType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[250];
}
bool Gw_swm_body_0x31a_31a_Swm_previous_songType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_previous_songType Gw_swm_body_0x31a_31a::SWM_PREVIOUS_SONG_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_previous_songType Gw_swm_body_0x31a_31a::SWM_PREVIOUS_SONG_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_previous_songType Gw_swm_body_0x31a_31a::SWM_PREVIOUS_SONG_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_previous_songType Gw_swm_body_0x31a_31a::SWM_PREVIOUS_SONG_INVALID;
const Gw_swm_body_0x31a_31a_Swm_previous_songType Gw_swm_body_0x31a_31a::Swm_previous_songType_MIN;
const Gw_swm_body_0x31a_31a_Swm_previous_songType Gw_swm_body_0x31a_31a::Swm_previous_songType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_previous_songType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_phoneType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[251];
}
bool Gw_swm_body_0x31a_31a_Swm_phoneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_phoneType Gw_swm_body_0x31a_31a::SWM_PHONE_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_phoneType Gw_swm_body_0x31a_31a::SWM_PHONE_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_phoneType Gw_swm_body_0x31a_31a::SWM_PHONE_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_phoneType Gw_swm_body_0x31a_31a::SWM_PHONE_INVALID;
const Gw_swm_body_0x31a_31a_Swm_phoneType Gw_swm_body_0x31a_31a::Swm_phoneType_MIN;
const Gw_swm_body_0x31a_31a_Swm_phoneType Gw_swm_body_0x31a_31a::Swm_phoneType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_phoneType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_muteType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[252];
}
bool Gw_swm_body_0x31a_31a_Swm_muteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_muteType Gw_swm_body_0x31a_31a::SWM_MUTE_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_muteType Gw_swm_body_0x31a_31a::SWM_MUTE_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_muteType Gw_swm_body_0x31a_31a::SWM_MUTE_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_muteType Gw_swm_body_0x31a_31a::SWM_MUTE_INVALID;
const Gw_swm_body_0x31a_31a_Swm_muteType Gw_swm_body_0x31a_31a::Swm_muteType_MIN;
const Gw_swm_body_0x31a_31a_Swm_muteType Gw_swm_body_0x31a_31a::Swm_muteType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_muteType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_menu_rightType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[253];
}
bool Gw_swm_body_0x31a_31a_Swm_menu_rightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_menu_rightType Gw_swm_body_0x31a_31a::SWM_MENU_RIGHT_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_menu_rightType Gw_swm_body_0x31a_31a::SWM_MENU_RIGHT_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_menu_rightType Gw_swm_body_0x31a_31a::SWM_MENU_RIGHT_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_menu_rightType Gw_swm_body_0x31a_31a::SWM_MENU_RIGHT_INVALID;
const Gw_swm_body_0x31a_31a_Swm_menu_rightType Gw_swm_body_0x31a_31a::Swm_menu_rightType_MIN;
const Gw_swm_body_0x31a_31a_Swm_menu_rightType Gw_swm_body_0x31a_31a::Swm_menu_rightType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_menu_rightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_menu_leftType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[254];
}
bool Gw_swm_body_0x31a_31a_Swm_menu_leftType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_menu_leftType Gw_swm_body_0x31a_31a::SWM_MENU_LEFT_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_menu_leftType Gw_swm_body_0x31a_31a::SWM_MENU_LEFT_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_menu_leftType Gw_swm_body_0x31a_31a::SWM_MENU_LEFT_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_menu_leftType Gw_swm_body_0x31a_31a::SWM_MENU_LEFT_INVALID;
const Gw_swm_body_0x31a_31a_Swm_menu_leftType Gw_swm_body_0x31a_31a::Swm_menu_leftType_MIN;
const Gw_swm_body_0x31a_31a_Swm_menu_leftType Gw_swm_body_0x31a_31a::Swm_menu_leftType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_menu_leftType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_menu_downType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[255];
}
bool Gw_swm_body_0x31a_31a_Swm_menu_downType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_menu_downType Gw_swm_body_0x31a_31a::SWM_MENU_DOWN_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_menu_downType Gw_swm_body_0x31a_31a::SWM_MENU_DOWN_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_menu_downType Gw_swm_body_0x31a_31a::SWM_MENU_DOWN_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_menu_downType Gw_swm_body_0x31a_31a::SWM_MENU_DOWN_INVALID;
const Gw_swm_body_0x31a_31a_Swm_menu_downType Gw_swm_body_0x31a_31a::Swm_menu_downType_MIN;
const Gw_swm_body_0x31a_31a_Swm_menu_downType Gw_swm_body_0x31a_31a::Swm_menu_downType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_menu_downType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_menu_upType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[256];
}
bool Gw_swm_body_0x31a_31a_Swm_menu_upType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_menu_upType Gw_swm_body_0x31a_31a::SWM_MENU_UP_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_menu_upType Gw_swm_body_0x31a_31a::SWM_MENU_UP_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_menu_upType Gw_swm_body_0x31a_31a::SWM_MENU_UP_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_menu_upType Gw_swm_body_0x31a_31a::SWM_MENU_UP_INVALID;
const Gw_swm_body_0x31a_31a_Swm_menu_upType Gw_swm_body_0x31a_31a::Swm_menu_upType_MIN;
const Gw_swm_body_0x31a_31a_Swm_menu_upType Gw_swm_body_0x31a_31a::Swm_menu_upType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_menu_upType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_fwasherstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[257];
}
bool Gw_swm_body_0x31a_31a_Swm_fwasherstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_fwasherstsType Gw_swm_body_0x31a_31a::SWM_FWASHERSTS_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_fwasherstsType Gw_swm_body_0x31a_31a::SWM_FWASHERSTS_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_fwasherstsType Gw_swm_body_0x31a_31a::SWM_FWASHERSTS_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_fwasherstsType Gw_swm_body_0x31a_31a::SWM_FWASHERSTS_INVALID;
const Gw_swm_body_0x31a_31a_Swm_fwasherstsType Gw_swm_body_0x31a_31a::Swm_fwasherstsType_MIN;
const Gw_swm_body_0x31a_31a_Swm_fwasherstsType Gw_swm_body_0x31a_31a::Swm_fwasherstsType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_fwasherstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_menu_returnType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[258];
}
bool Gw_swm_body_0x31a_31a_Swm_menu_returnType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_menu_returnType Gw_swm_body_0x31a_31a::SWM_MENU_RETURN_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_menu_returnType Gw_swm_body_0x31a_31a::SWM_MENU_RETURN_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_menu_returnType Gw_swm_body_0x31a_31a::SWM_MENU_RETURN_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_menu_returnType Gw_swm_body_0x31a_31a::SWM_MENU_RETURN_INVALID;
const Gw_swm_body_0x31a_31a_Swm_menu_returnType Gw_swm_body_0x31a_31a::Swm_menu_returnType_MIN;
const Gw_swm_body_0x31a_31a_Swm_menu_returnType Gw_swm_body_0x31a_31a::Swm_menu_returnType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_menu_returnType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_menu_confirmType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[259];
}
bool Gw_swm_body_0x31a_31a_Swm_menu_confirmType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_menu_confirmType Gw_swm_body_0x31a_31a::SWM_MENU_CONFIRM_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_menu_confirmType Gw_swm_body_0x31a_31a::SWM_MENU_CONFIRM_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_menu_confirmType Gw_swm_body_0x31a_31a::SWM_MENU_CONFIRM_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_menu_confirmType Gw_swm_body_0x31a_31a::SWM_MENU_CONFIRM_INVALID;
const Gw_swm_body_0x31a_31a_Swm_menu_confirmType Gw_swm_body_0x31a_31a::Swm_menu_confirmType_MIN;
const Gw_swm_body_0x31a_31a_Swm_menu_confirmType Gw_swm_body_0x31a_31a::Swm_menu_confirmType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_menu_confirmType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_rwasherstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[260];
}
bool Gw_swm_body_0x31a_31a_Swm_rwasherstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_rwasherstsType Gw_swm_body_0x31a_31a::SWM_RWASHERSTS_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_rwasherstsType Gw_swm_body_0x31a_31a::SWM_RWASHERSTS_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_rwasherstsType Gw_swm_body_0x31a_31a::SWM_RWASHERSTS_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_rwasherstsType Gw_swm_body_0x31a_31a::SWM_RWASHERSTS_INVALID;
const Gw_swm_body_0x31a_31a_Swm_rwasherstsType Gw_swm_body_0x31a_31a::Swm_rwasherstsType_MIN;
const Gw_swm_body_0x31a_31a_Swm_rwasherstsType Gw_swm_body_0x31a_31a::Swm_rwasherstsType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_rwasherstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_swm_body_0x31a_31a_Swm_flashlightstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[261];
}
bool Gw_swm_body_0x31a_31a_Swm_flashlightstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_swm_body_0x31a_31a_Swm_flashlightstsType Gw_swm_body_0x31a_31a::SWM_FLASHLIGHTSTS_RELEASED;
const Gw_swm_body_0x31a_31a_Swm_flashlightstsType Gw_swm_body_0x31a_31a::SWM_FLASHLIGHTSTS_PRESSED;
const Gw_swm_body_0x31a_31a_Swm_flashlightstsType Gw_swm_body_0x31a_31a::SWM_FLASHLIGHTSTS_RESERVED;
const Gw_swm_body_0x31a_31a_Swm_flashlightstsType Gw_swm_body_0x31a_31a::SWM_FLASHLIGHTSTS_INVALID;
const Gw_swm_body_0x31a_31a_Swm_flashlightstsType Gw_swm_body_0x31a_31a::Swm_flashlightstsType_MIN;
const Gw_swm_body_0x31a_31a_Swm_flashlightstsType Gw_swm_body_0x31a_31a::Swm_flashlightstsType_MAX;
const int Gw_swm_body_0x31a_31a::Swm_flashlightstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ems_tq_0x101_101_Ems_engspeederrorType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[262];
}
bool Gw_ems_tq_0x101_101_Ems_engspeederrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ems_tq_0x101_101_Ems_engspeederrorType Gw_ems_tq_0x101_101::EMS_ENGSPEEDERROR_NOERROR;
const Gw_ems_tq_0x101_101_Ems_engspeederrorType Gw_ems_tq_0x101_101::EMS_ENGSPEEDERROR_ERROR;
const Gw_ems_tq_0x101_101_Ems_engspeederrorType Gw_ems_tq_0x101_101::Ems_engspeederrorType_MIN;
const Gw_ems_tq_0x101_101_Ems_engspeederrorType Gw_ems_tq_0x101_101::Ems_engspeederrorType_MAX;
const int Gw_ems_tq_0x101_101::Ems_engspeederrorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_apa_gearboxenableType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[263];
}
bool Esp_vlc_0x223_223_Esp_apa_gearboxenableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_vlc_0x223_223_Esp_apa_gearboxenableType Esp_vlc_0x223_223::ESP_APA_GEARBOXENABLE_NO_REQUEST;
const Esp_vlc_0x223_223_Esp_apa_gearboxenableType Esp_vlc_0x223_223::ESP_APA_GEARBOXENABLE_GEAR_SHIFT_REQUEST;
const Esp_vlc_0x223_223_Esp_apa_gearboxenableType Esp_vlc_0x223_223::Esp_apa_gearboxenableType_MIN;
const Esp_vlc_0x223_223_Esp_apa_gearboxenableType Esp_vlc_0x223_223::Esp_apa_gearboxenableType_MAX;
const int Esp_vlc_0x223_223::Esp_apa_gearboxenableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_target_gear_requestType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[264];
}
bool Esp_vlc_0x223_223_Esp_target_gear_requestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_vlc_0x223_223_Esp_target_gear_requestType Esp_vlc_0x223_223::ESP_TARGET_GEAR_REQUEST_NO_REQUEST;
const Esp_vlc_0x223_223_Esp_target_gear_requestType Esp_vlc_0x223_223::ESP_TARGET_GEAR_REQUEST_PARK;
const Esp_vlc_0x223_223_Esp_target_gear_requestType Esp_vlc_0x223_223::ESP_TARGET_GEAR_REQUEST_REVERSE;
const Esp_vlc_0x223_223_Esp_target_gear_requestType Esp_vlc_0x223_223::ESP_TARGET_GEAR_REQUEST_NEUTRAL;
const Esp_vlc_0x223_223_Esp_target_gear_requestType Esp_vlc_0x223_223::ESP_TARGET_GEAR_REQUEST_DRIVE;
const Esp_vlc_0x223_223_Esp_target_gear_requestType Esp_vlc_0x223_223::Esp_target_gear_requestType_MIN;
const Esp_vlc_0x223_223_Esp_target_gear_requestType Esp_vlc_0x223_223::Esp_target_gear_requestType_MAX;
const int Esp_vlc_0x223_223::Esp_target_gear_requestType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_vlc_apactiveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[265];
}
bool Esp_vlc_0x223_223_Esp_vlc_apactiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_vlc_0x223_223_Esp_vlc_apactiveType Esp_vlc_0x223_223::ESP_VLC_APACTIVE_NOT_ACTIVE;
const Esp_vlc_0x223_223_Esp_vlc_apactiveType Esp_vlc_0x223_223::ESP_VLC_APACTIVE_ACTIVE;
const Esp_vlc_0x223_223_Esp_vlc_apactiveType Esp_vlc_0x223_223::Esp_vlc_apactiveType_MIN;
const Esp_vlc_0x223_223_Esp_vlc_apactiveType Esp_vlc_0x223_223::Esp_vlc_apactiveType_MAX;
const int Esp_vlc_0x223_223::Esp_vlc_apactiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[266];
}
bool Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_vlc_0x223_223_Esp_pam_lc_failurestsType Esp_vlc_0x223_223::ESP_PAM_LC_FAILURESTS_NO_ERROR;
const Esp_vlc_0x223_223_Esp_pam_lc_failurestsType Esp_vlc_0x223_223::ESP_PAM_LC_FAILURESTS_VEHICLE_BLOCKED;
const Esp_vlc_0x223_223_Esp_pam_lc_failurestsType Esp_vlc_0x223_223::ESP_PAM_LC_FAILURESTS_UNEXPECTED_GEARPOSITION;
const Esp_vlc_0x223_223_Esp_pam_lc_failurestsType Esp_vlc_0x223_223::ESP_PAM_LC_FAILURESTS_UNEXPECTED_EPB_ACTION;
const Esp_vlc_0x223_223_Esp_pam_lc_failurestsType Esp_vlc_0x223_223::ESP_PAM_LC_FAILURESTS_UNEXPECTED_ACCPEDALINTERVENTION;
const Esp_vlc_0x223_223_Esp_pam_lc_failurestsType Esp_vlc_0x223_223::ESP_PAM_LC_FAILURESTS_UNEXPECTED_GEARINTERVENTION;
const Esp_vlc_0x223_223_Esp_pam_lc_failurestsType Esp_vlc_0x223_223::ESP_PAM_LC_FAILURESTS_ERROR;
const Esp_vlc_0x223_223_Esp_pam_lc_failurestsType Esp_vlc_0x223_223::Esp_pam_lc_failurestsType_MIN;
const Esp_vlc_0x223_223_Esp_pam_lc_failurestsType Esp_vlc_0x223_223::Esp_pam_lc_failurestsType_MAX;
const int Esp_vlc_0x223_223::Esp_pam_lc_failurestsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_pam_lc_statusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[267];
}
bool Esp_vlc_0x223_223_Esp_pam_lc_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 4:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_vlc_0x223_223_Esp_pam_lc_statusType Esp_vlc_0x223_223::ESP_PAM_LC_STATUS_OFF;
const Esp_vlc_0x223_223_Esp_pam_lc_statusType Esp_vlc_0x223_223::ESP_PAM_LC_STATUS_STANDBY;
const Esp_vlc_0x223_223_Esp_pam_lc_statusType Esp_vlc_0x223_223::ESP_PAM_LC_STATUS_ACTIVE_AUTOMATICPARK;
const Esp_vlc_0x223_223_Esp_pam_lc_statusType Esp_vlc_0x223_223::ESP_PAM_LC_STATUS_ERROR;
const Esp_vlc_0x223_223_Esp_pam_lc_statusType Esp_vlc_0x223_223::Esp_pam_lc_statusType_MIN;
const Esp_vlc_0x223_223_Esp_pam_lc_statusType Esp_vlc_0x223_223::Esp_pam_lc_statusType_MAX;
const int Esp_vlc_0x223_223::Esp_pam_lc_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_vlc_activeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[268];
}
bool Esp_vlc_0x223_223_Esp_vlc_activeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_vlc_0x223_223_Esp_vlc_activeType Esp_vlc_0x223_223::ESP_VLC_ACTIVE_NOT_ACTIVE;
const Esp_vlc_0x223_223_Esp_vlc_activeType Esp_vlc_0x223_223::ESP_VLC_ACTIVE_ACTIVE;
const Esp_vlc_0x223_223_Esp_vlc_activeType Esp_vlc_0x223_223::Esp_vlc_activeType_MIN;
const Esp_vlc_0x223_223_Esp_vlc_activeType Esp_vlc_0x223_223::Esp_vlc_activeType_MAX;
const int Esp_vlc_0x223_223::Esp_vlc_activeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_vlc_availableType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[269];
}
bool Esp_vlc_0x223_223_Esp_vlc_availableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_vlc_0x223_223_Esp_vlc_availableType Esp_vlc_0x223_223::ESP_VLC_AVAILABLE_NOT_AVAILABLE;
const Esp_vlc_0x223_223_Esp_vlc_availableType Esp_vlc_0x223_223::ESP_VLC_AVAILABLE_AVAILABLE;
const Esp_vlc_0x223_223_Esp_vlc_availableType Esp_vlc_0x223_223::Esp_vlc_availableType_MIN;
const Esp_vlc_0x223_223_Esp_vlc_availableType Esp_vlc_0x223_223::Esp_vlc_availableType_MAX;
const int Esp_vlc_0x223_223::Esp_vlc_availableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_vlcapa_availableType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[270];
}
bool Esp_vlc_0x223_223_Esp_vlcapa_availableType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_vlc_0x223_223_Esp_vlcapa_availableType Esp_vlc_0x223_223::ESP_VLCAPA_AVAILABLE_NOT_AVAILABLE;
const Esp_vlc_0x223_223_Esp_vlcapa_availableType Esp_vlc_0x223_223::ESP_VLCAPA_AVAILABLE_AVAILABLE;
const Esp_vlc_0x223_223_Esp_vlcapa_availableType Esp_vlc_0x223_223::Esp_vlcapa_availableType_MIN;
const Esp_vlc_0x223_223_Esp_vlcapa_availableType Esp_vlc_0x223_223::Esp_vlcapa_availableType_MAX;
const int Esp_vlc_0x223_223::Esp_vlcapa_availableType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[271];
}
bool Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_vlc_0x223_223_Esp_vlcengtorqreqactType Esp_vlc_0x223_223::ESP_VLCENGTORQREQACT_VALID;
const Esp_vlc_0x223_223_Esp_vlcengtorqreqactType Esp_vlc_0x223_223::ESP_VLCENGTORQREQACT_INVALID;
const Esp_vlc_0x223_223_Esp_vlcengtorqreqactType Esp_vlc_0x223_223::Esp_vlcengtorqreqactType_MIN;
const Esp_vlc_0x223_223_Esp_vlcengtorqreqactType Esp_vlc_0x223_223::Esp_vlcengtorqreqactType_MAX;
const int Esp_vlc_0x223_223::Esp_vlcengtorqreqactType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ems_whltq_0x107_107_Ems_kickdownType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[272];
}
bool Gw_ems_whltq_0x107_107_Ems_kickdownType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ems_whltq_0x107_107_Ems_kickdownType Gw_ems_whltq_0x107_107::EMS_KICKDOWN_NOTACTIVE;
const Gw_ems_whltq_0x107_107_Ems_kickdownType Gw_ems_whltq_0x107_107::EMS_KICKDOWN_ACTIVE;
const Gw_ems_whltq_0x107_107_Ems_kickdownType Gw_ems_whltq_0x107_107::Ems_kickdownType_MIN;
const Gw_ems_whltq_0x107_107_Ems_kickdownType Gw_ems_whltq_0x107_107::Ems_kickdownType_MAX;
const int Gw_ems_whltq_0x107_107::Ems_kickdownType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[273];
}
bool Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType Gw_ems_whltq_0x107_107::EMS_ACCPEDALRATIOERROR_NOERROR;
const Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType Gw_ems_whltq_0x107_107::EMS_ACCPEDALRATIOERROR_ERROR;
const Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType Gw_ems_whltq_0x107_107::Ems_accpedalratioerrorType_MIN;
const Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType Gw_ems_whltq_0x107_107::Ems_accpedalratioerrorType_MAX;
const int Gw_ems_whltq_0x107_107::Ems_accpedalratioerrorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[274];
}
bool Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType Gw_ems_whltq_0x107_107::EMS_BRKPEDALSTASUS_NOTPRESSED;
const Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType Gw_ems_whltq_0x107_107::EMS_BRKPEDALSTASUS_PRESSED;
const Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType Gw_ems_whltq_0x107_107::EMS_BRKPEDALSTASUS_RESERVED;
const Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType Gw_ems_whltq_0x107_107::EMS_BRKPEDALSTASUS_ERROR;
const Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType Gw_ems_whltq_0x107_107::Ems_brkpedalstasusType_MIN;
const Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType Gw_ems_whltq_0x107_107::Ems_brkpedalstasusType_MAX;
const int Gw_ems_whltq_0x107_107::Ems_brkpedalstasusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Abs_sts_0x221_221_Abs_vehspddirectionType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[275];
}
bool Abs_sts_0x221_221_Abs_vehspddirectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Abs_sts_0x221_221_Abs_vehspddirectionType Abs_sts_0x221_221::ABS_VEHSPDDIRECTION_FORWARD;
const Abs_sts_0x221_221_Abs_vehspddirectionType Abs_sts_0x221_221::ABS_VEHSPDDIRECTION_BACKWARD;
const Abs_sts_0x221_221_Abs_vehspddirectionType Abs_sts_0x221_221::Abs_vehspddirectionType_MIN;
const Abs_sts_0x221_221_Abs_vehspddirectionType Abs_sts_0x221_221::Abs_vehspddirectionType_MAX;
const int Abs_sts_0x221_221::Abs_vehspddirectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Abs_sts_0x221_221_Abs_ebdflgfltType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[276];
}
bool Abs_sts_0x221_221_Abs_ebdflgfltType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Abs_sts_0x221_221_Abs_ebdflgfltType Abs_sts_0x221_221::ABS_EBDFLGFLT_NO_FAILURE;
const Abs_sts_0x221_221_Abs_ebdflgfltType Abs_sts_0x221_221::ABS_EBDFLGFLT_FAILURE;
const Abs_sts_0x221_221_Abs_ebdflgfltType Abs_sts_0x221_221::Abs_ebdflgfltType_MIN;
const Abs_sts_0x221_221_Abs_ebdflgfltType Abs_sts_0x221_221::Abs_ebdflgfltType_MAX;
const int Abs_sts_0x221_221::Abs_ebdflgfltType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Abs_sts_0x221_221_Abs_absflgfltType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[277];
}
bool Abs_sts_0x221_221_Abs_absflgfltType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Abs_sts_0x221_221_Abs_absflgfltType Abs_sts_0x221_221::ABS_ABSFLGFLT_NO_FAILURE;
const Abs_sts_0x221_221_Abs_absflgfltType Abs_sts_0x221_221::ABS_ABSFLGFLT_FAILURE;
const Abs_sts_0x221_221_Abs_absflgfltType Abs_sts_0x221_221::Abs_absflgfltType_MIN;
const Abs_sts_0x221_221_Abs_absflgfltType Abs_sts_0x221_221::Abs_absflgfltType_MAX;
const int Abs_sts_0x221_221::Abs_absflgfltType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Abs_sts_0x221_221_Abs_absctrlactvType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[278];
}
bool Abs_sts_0x221_221_Abs_absctrlactvType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Abs_sts_0x221_221_Abs_absctrlactvType Abs_sts_0x221_221::ABS_ABSCTRLACTV_NOT_ACTIVE;
const Abs_sts_0x221_221_Abs_absctrlactvType Abs_sts_0x221_221::ABS_ABSCTRLACTV_ACTIVE;
const Abs_sts_0x221_221_Abs_absctrlactvType Abs_sts_0x221_221::Abs_absctrlactvType_MIN;
const Abs_sts_0x221_221_Abs_absctrlactvType Abs_sts_0x221_221::Abs_absctrlactvType_MAX;
const int Abs_sts_0x221_221::Abs_absctrlactvType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[279];
}
bool Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType Abs_sts_0x221_221::ABS_WHLMILGFRNTLESTATUS_VALID;
const Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType Abs_sts_0x221_221::ABS_WHLMILGFRNTLESTATUS_INVALID;
const Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType Abs_sts_0x221_221::Abs_whlmilgfrntlestatusType_MIN;
const Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType Abs_sts_0x221_221::Abs_whlmilgfrntlestatusType_MAX;
const int Abs_sts_0x221_221::Abs_whlmilgfrntlestatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[280];
}
bool Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Abs_sts_0x221_221_Abs_whlmilgfrntristatusType Abs_sts_0x221_221::ABS_WHLMILGFRNTRISTATUS_VALID;
const Abs_sts_0x221_221_Abs_whlmilgfrntristatusType Abs_sts_0x221_221::ABS_WHLMILGFRNTRISTATUS_INVALID;
const Abs_sts_0x221_221_Abs_whlmilgfrntristatusType Abs_sts_0x221_221::Abs_whlmilgfrntristatusType_MIN;
const Abs_sts_0x221_221_Abs_whlmilgfrntristatusType Abs_sts_0x221_221::Abs_whlmilgfrntristatusType_MAX;
const int Abs_sts_0x221_221::Abs_whlmilgfrntristatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Abs_sts_0x221_221_Abs_vehspdlgtstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[281];
}
bool Abs_sts_0x221_221_Abs_vehspdlgtstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Abs_sts_0x221_221_Abs_vehspdlgtstatusType Abs_sts_0x221_221::ABS_VEHSPDLGTSTATUS_VALID;
const Abs_sts_0x221_221_Abs_vehspdlgtstatusType Abs_sts_0x221_221::ABS_VEHSPDLGTSTATUS_INVALID;
const Abs_sts_0x221_221_Abs_vehspdlgtstatusType Abs_sts_0x221_221::ABS_VEHSPDLGTSTATUS_INIT;
const Abs_sts_0x221_221_Abs_vehspdlgtstatusType Abs_sts_0x221_221::Abs_vehspdlgtstatusType_MIN;
const Abs_sts_0x221_221_Abs_vehspdlgtstatusType Abs_sts_0x221_221::Abs_vehspdlgtstatusType_MAX;
const int Abs_sts_0x221_221::Abs_vehspdlgtstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[282];
}
bool Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType Mrr_frobj_0x480_480::MRR_L_OBJ_0X_CLASS_UNKNOWN;
const Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType Mrr_frobj_0x480_480::MRR_L_OBJ_0X_CLASS_CAR;
const Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType Mrr_frobj_0x480_480::MRR_L_OBJ_0X_CLASS_TRUCK;
const Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType Mrr_frobj_0x480_480::MRR_L_OBJ_0X_CLASS_TWO_WHEELER;
const Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType Mrr_frobj_0x480_480::Mrr_l_obj_0x_classType_MIN;
const Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType Mrr_frobj_0x480_480::Mrr_l_obj_0x_classType_MAX;
const int Mrr_frobj_0x480_480::Mrr_l_obj_0x_classType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[283];
}
bool Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType Mrr_frobj_0x480_480::MRR_R_OBJ_0X_CLASS_UNKNOWN;
const Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType Mrr_frobj_0x480_480::MRR_R_OBJ_0X_CLASS_CAR;
const Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType Mrr_frobj_0x480_480::MRR_R_OBJ_0X_CLASS_TRUCK;
const Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType Mrr_frobj_0x480_480::MRR_R_OBJ_0X_CLASS_TWO_WHEELER;
const Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType Mrr_frobj_0x480_480::Mrr_r_obj_0x_classType_MIN;
const Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType Mrr_frobj_0x480_480::Mrr_r_obj_0x_classType_MAX;
const int Mrr_frobj_0x480_480::Mrr_r_obj_0x_classType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[284];
}
bool Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType Mrr_frobj_0x480_480::MRR_LEFTTARGRTDETECTION_NOT_DECTECTED;
const Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType Mrr_frobj_0x480_480::MRR_LEFTTARGRTDETECTION_DECTECTED;
const Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType Mrr_frobj_0x480_480::Mrr_lefttargrtdetectionType_MIN;
const Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType Mrr_frobj_0x480_480::Mrr_lefttargrtdetectionType_MAX;
const int Mrr_frobj_0x480_480::Mrr_lefttargrtdetectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[285];
}
bool Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType Mrr_frobj_0x480_480::MRR_RIGHTTARGRTDETECTION_NOT_DECTECTED;
const Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType Mrr_frobj_0x480_480::MRR_RIGHTTARGRTDETECTION_DECTECTED;
const Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType Mrr_frobj_0x480_480::Mrr_righttargrtdetectionType_MIN;
const Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType Mrr_frobj_0x480_480::Mrr_righttargrtdetectionType_MAX;
const int Mrr_frobj_0x480_480::Mrr_righttargrtdetectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_TaugapsetType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[286];
}
bool Mrr_0x246_246_TaugapsetType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x246_246_TaugapsetType Mrr_0x246_246::TAUGAPSET_TAUGAP_0;
const Mrr_0x246_246_TaugapsetType Mrr_0x246_246::TAUGAPSET_TAUGAP_1;
const Mrr_0x246_246_TaugapsetType Mrr_0x246_246::TAUGAPSET_TAUGAP_2;
const Mrr_0x246_246_TaugapsetType Mrr_0x246_246::TAUGAPSET_TAUGAP_3;
const Mrr_0x246_246_TaugapsetType Mrr_0x246_246::TAUGAPSET_TAUGAP_4;
const Mrr_0x246_246_TaugapsetType Mrr_0x246_246::TAUGAPSET_TAUGAP_5;
const Mrr_0x246_246_TaugapsetType Mrr_0x246_246::TAUGAPSET_TAUGAP_6;
const Mrr_0x246_246_TaugapsetType Mrr_0x246_246::TAUGAPSET_TAUGAP_7;
const Mrr_0x246_246_TaugapsetType Mrr_0x246_246::TaugapsetType_MIN;
const Mrr_0x246_246_TaugapsetType Mrr_0x246_246::TaugapsetType_MAX;
const int Mrr_0x246_246::TaugapsetType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_DxtarobjType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[287];
}
bool Mrr_0x246_246_DxtarobjType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x246_246_DxtarobjType Mrr_0x246_246::DXTAROBJ_DISTANCE_0;
const Mrr_0x246_246_DxtarobjType Mrr_0x246_246::DXTAROBJ_DISTANCE_1;
const Mrr_0x246_246_DxtarobjType Mrr_0x246_246::DXTAROBJ_DISTANCE_2;
const Mrr_0x246_246_DxtarobjType Mrr_0x246_246::DXTAROBJ_DISTANCE_3;
const Mrr_0x246_246_DxtarobjType Mrr_0x246_246::DXTAROBJ_DISTANCE_4;
const Mrr_0x246_246_DxtarobjType Mrr_0x246_246::DXTAROBJ_DISTANCE_5;
const Mrr_0x246_246_DxtarobjType Mrr_0x246_246::DXTAROBJ_DISTANCE_6;
const Mrr_0x246_246_DxtarobjType Mrr_0x246_246::DXTAROBJ_DISTANCE_7;
const Mrr_0x246_246_DxtarobjType Mrr_0x246_246::DxtarobjType_MIN;
const Mrr_0x246_246_DxtarobjType Mrr_0x246_246::DxtarobjType_MAX;
const int Mrr_0x246_246::DxtarobjType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_Acchmi_modeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[288];
}
bool Mrr_0x246_246_Acchmi_modeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x246_246_Acchmi_modeType Mrr_0x246_246::ACCHMI_MODE_OFF_MODE;
const Mrr_0x246_246_Acchmi_modeType Mrr_0x246_246::ACCHMI_MODE_PASSIVE_MODE;
const Mrr_0x246_246_Acchmi_modeType Mrr_0x246_246::ACCHMI_MODE_STAND_BY_MODE;
const Mrr_0x246_246_Acchmi_modeType Mrr_0x246_246::ACCHMI_MODE_ACTIVE_CONTROL_MODE;
const Mrr_0x246_246_Acchmi_modeType Mrr_0x246_246::ACCHMI_MODE_BRAKE_ONLY_MODE;
const Mrr_0x246_246_Acchmi_modeType Mrr_0x246_246::ACCHMI_MODE_OVERRIDE;
const Mrr_0x246_246_Acchmi_modeType Mrr_0x246_246::ACCHMI_MODE_STANDSTILL;
const Mrr_0x246_246_Acchmi_modeType Mrr_0x246_246::ACCHMI_MODE_FAILURE_MODE;
const Mrr_0x246_246_Acchmi_modeType Mrr_0x246_246::Acchmi_modeType_MIN;
const Mrr_0x246_246_Acchmi_modeType Mrr_0x246_246::Acchmi_modeType_MAX;
const int Mrr_0x246_246::Acchmi_modeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_AccfailinfoType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[289];
}
bool Mrr_0x246_246_AccfailinfoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x246_246_AccfailinfoType Mrr_0x246_246::ACCFAILINFO_NO_ERROR;
const Mrr_0x246_246_AccfailinfoType Mrr_0x246_246::ACCFAILINFO_ERROR;
const Mrr_0x246_246_AccfailinfoType Mrr_0x246_246::AccfailinfoType_MIN;
const Mrr_0x246_246_AccfailinfoType Mrr_0x246_246::AccfailinfoType_MAX;
const int Mrr_0x246_246::AccfailinfoType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_TakeoverreqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[290];
}
bool Mrr_0x246_246_TakeoverreqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x246_246_TakeoverreqType Mrr_0x246_246::TAKEOVERREQ_NO_TAKEOVER_REQUEST;
const Mrr_0x246_246_TakeoverreqType Mrr_0x246_246::TAKEOVERREQ_VALID_TAKEOVER_REQUEST;
const Mrr_0x246_246_TakeoverreqType Mrr_0x246_246::TakeoverreqType_MIN;
const Mrr_0x246_246_TakeoverreqType Mrr_0x246_246::TakeoverreqType_MAX;
const int Mrr_0x246_246::TakeoverreqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_Mrr_fcw_sensitiveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[291];
}
bool Mrr_0x246_246_Mrr_fcw_sensitiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x246_246_Mrr_fcw_sensitiveType Mrr_0x246_246::MRR_FCW_SENSITIVE_UNAVAILABLE;
const Mrr_0x246_246_Mrr_fcw_sensitiveType Mrr_0x246_246::MRR_FCW_SENSITIVE_LEVEL1_LOW_SENSITIVE;
const Mrr_0x246_246_Mrr_fcw_sensitiveType Mrr_0x246_246::MRR_FCW_SENSITIVE_LEVEL2_NORMAL;
const Mrr_0x246_246_Mrr_fcw_sensitiveType Mrr_0x246_246::MRR_FCW_SENSITIVE_LEVEL3_HIGH_SENSITIVE;
const Mrr_0x246_246_Mrr_fcw_sensitiveType Mrr_0x246_246::Mrr_fcw_sensitiveType_MIN;
const Mrr_0x246_246_Mrr_fcw_sensitiveType Mrr_0x246_246::Mrr_fcw_sensitiveType_MAX;
const int Mrr_0x246_246::Mrr_fcw_sensitiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_Aeb_stateType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[292];
}
bool Mrr_0x246_246_Aeb_stateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x246_246_Aeb_stateType Mrr_0x246_246::AEB_STATE_UNAVAILABLE;
const Mrr_0x246_246_Aeb_stateType Mrr_0x246_246::AEB_STATE_OFF;
const Mrr_0x246_246_Aeb_stateType Mrr_0x246_246::AEB_STATE_STANDBY;
const Mrr_0x246_246_Aeb_stateType Mrr_0x246_246::AEB_STATE_ACTIVE_NO_INTERVENTION;
const Mrr_0x246_246_Aeb_stateType Mrr_0x246_246::AEB_STATE_ACTIVE;
const Mrr_0x246_246_Aeb_stateType Mrr_0x246_246::AEB_STATE_RESERVED;
const Mrr_0x246_246_Aeb_stateType Mrr_0x246_246::Aeb_stateType_MIN;
const Mrr_0x246_246_Aeb_stateType Mrr_0x246_246::Aeb_stateType_MAX;
const int Mrr_0x246_246::Aeb_stateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_Acc_startstop_inforType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[293];
}
bool Mrr_0x246_246_Acc_startstop_inforType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x246_246_Acc_startstop_inforType Mrr_0x246_246::ACC_STARTSTOP_INFOR_ACC_STOPALLOWED;
const Mrr_0x246_246_Acc_startstop_inforType Mrr_0x246_246::ACC_STARTSTOP_INFOR_ACC_STOPFORBIDDEN;
const Mrr_0x246_246_Acc_startstop_inforType Mrr_0x246_246::ACC_STARTSTOP_INFOR_ACC_STARTREQUEST;
const Mrr_0x246_246_Acc_startstop_inforType Mrr_0x246_246::ACC_STARTSTOP_INFOR_ACC_SYSTEMFAILURE;
const Mrr_0x246_246_Acc_startstop_inforType Mrr_0x246_246::Acc_startstop_inforType_MIN;
const Mrr_0x246_246_Acc_startstop_inforType Mrr_0x246_246::Acc_startstop_inforType_MAX;
const int Mrr_0x246_246::Acc_startstop_inforType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_Fcw_prewarningType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[294];
}
bool Mrr_0x246_246_Fcw_prewarningType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x246_246_Fcw_prewarningType Mrr_0x246_246::FCW_PREWARNING_NO_WARNING;
const Mrr_0x246_246_Fcw_prewarningType Mrr_0x246_246::FCW_PREWARNING_WARNING;
const Mrr_0x246_246_Fcw_prewarningType Mrr_0x246_246::Fcw_prewarningType_MIN;
const Mrr_0x246_246_Fcw_prewarningType Mrr_0x246_246::Fcw_prewarningType_MAX;
const int Mrr_0x246_246::Fcw_prewarningType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_Fcw_latentwarningType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[295];
}
bool Mrr_0x246_246_Fcw_latentwarningType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x246_246_Fcw_latentwarningType Mrr_0x246_246::FCW_LATENTWARNING_NO_WARNING;
const Mrr_0x246_246_Fcw_latentwarningType Mrr_0x246_246::FCW_LATENTWARNING_WARNING;
const Mrr_0x246_246_Fcw_latentwarningType Mrr_0x246_246::Fcw_latentwarningType_MIN;
const Mrr_0x246_246_Fcw_latentwarningType Mrr_0x246_246::Fcw_latentwarningType_MAX;
const int Mrr_0x246_246::Fcw_latentwarningType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_Fcw_stateType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[296];
}
bool Mrr_0x246_246_Fcw_stateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x246_246_Fcw_stateType Mrr_0x246_246::FCW_STATE_UNAVAILABLE;
const Mrr_0x246_246_Fcw_stateType Mrr_0x246_246::FCW_STATE_OFF;
const Mrr_0x246_246_Fcw_stateType Mrr_0x246_246::FCW_STATE_STANDBY;
const Mrr_0x246_246_Fcw_stateType Mrr_0x246_246::FCW_STATE_ACTIVE_NO_INTERVENTION;
const Mrr_0x246_246_Fcw_stateType Mrr_0x246_246::FCW_STATE_ACTIVE;
const Mrr_0x246_246_Fcw_stateType Mrr_0x246_246::FCW_STATE_RESERVED;
const Mrr_0x246_246_Fcw_stateType Mrr_0x246_246::Fcw_stateType_MIN;
const Mrr_0x246_246_Fcw_stateType Mrr_0x246_246::Fcw_stateType_MAX;
const int Mrr_0x246_246::Fcw_stateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_TextinfoType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[297];
}
bool Mrr_0x246_246_TextinfoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TEXTINFO_NO_DISPLAY;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TEXTINFO_ACC_IS_SWITCHED_ON;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TEXTINFO_ACC_IS_SWITCHED_OFF;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TEXTINFO_ACC_IS_CANCELLED;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TEXTINFO_ACC_ACTIVE;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TEXTINFO_MRR_BLINDNESS;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TEXTINFO_ACC_AND_PEBS_ERROR;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TEXTINFO_EPB_ACTIVATE;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TEXTINFO_NO_FORWARD_GEAR;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TEXTINFO_SEATBELT_UNBUCKLED;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TEXTINFO_ESP_OFF;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TEXTINFO_SPEED_OVER_150KPH;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TEXTINFO_DOOR_OPEN;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TEXTINFO_OVERRIDE;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TEXTINFO_ESP_ERROR;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TEXTINFO_UNCALIBRATED;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TextinfoType_MIN;
const Mrr_0x246_246_TextinfoType Mrr_0x246_246::TextinfoType_MAX;
const int Mrr_0x246_246::TextinfoType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_VsetdisType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[298];
}
bool Mrr_0x246_246_VsetdisType_IsValid(int value) {
  switch (value) {
    case 511:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x246_246_VsetdisType Mrr_0x246_246::VSETDIS_INVALID;
const Mrr_0x246_246_VsetdisType Mrr_0x246_246::VsetdisType_MIN;
const Mrr_0x246_246_VsetdisType Mrr_0x246_246::VsetdisType_MAX;
const int Mrr_0x246_246::VsetdisType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_0x246_246_ObjvalidType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[299];
}
bool Mrr_0x246_246_ObjvalidType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_0x246_246_ObjvalidType Mrr_0x246_246::OBJVALID_NO_OBJECT;
const Mrr_0x246_246_ObjvalidType Mrr_0x246_246::OBJVALID_TARGET_OBJECT_DETECTED;
const Mrr_0x246_246_ObjvalidType Mrr_0x246_246::ObjvalidType_MIN;
const Mrr_0x246_246_ObjvalidType Mrr_0x246_246::ObjvalidType_MAX;
const int Mrr_0x246_246::ObjvalidType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[300];
}
bool Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType Gw_mp5_nav_0x533_533::NAV_SPEEDLIMITUNITS_UNKNOWN;
const Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType Gw_mp5_nav_0x533_533::NAV_SPEEDLIMITUNITS_MPH;
const Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType Gw_mp5_nav_0x533_533::NAV_SPEEDLIMITUNITS_KMH;
const Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType Gw_mp5_nav_0x533_533::NAV_SPEEDLIMITUNITS_RESERVED;
const Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType Gw_mp5_nav_0x533_533::Nav_speedlimitunitsType_MIN;
const Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType Gw_mp5_nav_0x533_533::Nav_speedlimitunitsType_MAX;
const int Gw_mp5_nav_0x533_533::Nav_speedlimitunitsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_nav_0x533_533_Nav_currroadtypeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[301];
}
bool Gw_mp5_nav_0x533_533_Nav_currroadtypeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_nav_0x533_533_Nav_currroadtypeType Gw_mp5_nav_0x533_533::NAV_CURRROADTYPE_UNKNOW;
const Gw_mp5_nav_0x533_533_Nav_currroadtypeType Gw_mp5_nav_0x533_533::NAV_CURRROADTYPE_HIGH_SPEED_ROAD;
const Gw_mp5_nav_0x533_533_Nav_currroadtypeType Gw_mp5_nav_0x533_533::NAV_CURRROADTYPE_CITY_EXPRESS_WAY;
const Gw_mp5_nav_0x533_533_Nav_currroadtypeType Gw_mp5_nav_0x533_533::NAV_CURRROADTYPE_DOWNTOWN_ROAD;
const Gw_mp5_nav_0x533_533_Nav_currroadtypeType Gw_mp5_nav_0x533_533::NAV_CURRROADTYPE_COUNTRY_ROAD;
const Gw_mp5_nav_0x533_533_Nav_currroadtypeType Gw_mp5_nav_0x533_533::Nav_currroadtypeType_MIN;
const Gw_mp5_nav_0x533_533_Nav_currroadtypeType Gw_mp5_nav_0x533_533::Nav_currroadtypeType_MAX;
const int Gw_mp5_nav_0x533_533::Nav_currroadtypeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_nav_0x533_533_Nav_speedlimitType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[302];
}
bool Gw_mp5_nav_0x533_533_Nav_speedlimitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 26:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_nav_0x533_533_Nav_speedlimitType Gw_mp5_nav_0x533_533::NAV_SPEEDLIMIT_NO_DISPLAY;
const Gw_mp5_nav_0x533_533_Nav_speedlimitType Gw_mp5_nav_0x533_533::NAV_SPEEDLIMIT_SPL_5;
const Gw_mp5_nav_0x533_533_Nav_speedlimitType Gw_mp5_nav_0x533_533::NAV_SPEEDLIMIT_SPL_10;
const Gw_mp5_nav_0x533_533_Nav_speedlimitType Gw_mp5_nav_0x533_533::NAV_SPEEDLIMIT_SPL_15;
const Gw_mp5_nav_0x533_533_Nav_speedlimitType Gw_mp5_nav_0x533_533::NAV_SPEEDLIMIT_SPL_20;
const Gw_mp5_nav_0x533_533_Nav_speedlimitType Gw_mp5_nav_0x533_533::NAV_SPEEDLIMIT_SPL_25;
const Gw_mp5_nav_0x533_533_Nav_speedlimitType Gw_mp5_nav_0x533_533::NAV_SPEEDLIMIT_SPL_130;
const Gw_mp5_nav_0x533_533_Nav_speedlimitType Gw_mp5_nav_0x533_533::Nav_speedlimitType_MIN;
const Gw_mp5_nav_0x533_533_Nav_speedlimitType Gw_mp5_nav_0x533_533::Nav_speedlimitType_MAX;
const int Gw_mp5_nav_0x533_533::Nav_speedlimitType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[303];
}
bool Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType Gw_mp5_nav_0x533_533::MP5_APAACTIVE_CMD_NO_REQUEST;
const Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType Gw_mp5_nav_0x533_533::MP5_APAACTIVE_CMD_REQUEST;
const Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType Gw_mp5_nav_0x533_533::Mp5_apaactive_cmdType_MIN;
const Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType Gw_mp5_nav_0x533_533::Mp5_apaactive_cmdType_MAX;
const int Gw_mp5_nav_0x533_533::Mp5_apaactive_cmdType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[304];
}
bool Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType Gw_mp5_nav_0x533_533::MP5_APA_CONFIRMBUTTON_NO_BUTTON_PRESS;
const Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType Gw_mp5_nav_0x533_533::MP5_APA_CONFIRMBUTTON_COMFIRM_BUTTON_PRESS;
const Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType Gw_mp5_nav_0x533_533::MP5_APA_CONFIRMBUTTON_TERMINATED_BUTTON_PRESS;
const Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType Gw_mp5_nav_0x533_533::MP5_APA_CONFIRMBUTTON_RESERVED;
const Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType Gw_mp5_nav_0x533_533::Mp5_apa_confirmbuttonType_MIN;
const Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType Gw_mp5_nav_0x533_533::Mp5_apa_confirmbuttonType_MAX;
const int Gw_mp5_nav_0x533_533::Mp5_apa_confirmbuttonType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[305];
}
bool Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType Gw_mp5_nav_0x533_533::MP5_APA_FUNCTION_SELECT_NO_BUTTON_PRESS;
const Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType Gw_mp5_nav_0x533_533::MP5_APA_FUNCTION_SELECT_PPSC_BUTTON_PRESS;
const Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType Gw_mp5_nav_0x533_533::MP5_APA_FUNCTION_SELECT_CPSC_BUTTON_PRESS;
const Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType Gw_mp5_nav_0x533_533::MP5_APA_FUNCTION_SELECT_POC_BUTTON_PRESS;
const Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType Gw_mp5_nav_0x533_533::Mp5_apa_function_selectType_MIN;
const Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType Gw_mp5_nav_0x533_533::Mp5_apa_function_selectType_MAX;
const int Gw_mp5_nav_0x533_533::Mp5_apa_function_selectType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_nav_0x533_533_Nav_stsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[306];
}
bool Gw_mp5_nav_0x533_533_Nav_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_nav_0x533_533_Nav_stsType Gw_mp5_nav_0x533_533::NAV_STS_INACTIVE;
const Gw_mp5_nav_0x533_533_Nav_stsType Gw_mp5_nav_0x533_533::NAV_STS_ACTIVE;
const Gw_mp5_nav_0x533_533_Nav_stsType Gw_mp5_nav_0x533_533::Nav_stsType_MIN;
const Gw_mp5_nav_0x533_533_Nav_stsType Gw_mp5_nav_0x533_533::Nav_stsType_MAX;
const int Gw_mp5_nav_0x533_533::Nav_stsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[307];
}
bool Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType Gw_mp5_nav_0x533_533::NAV_SPEEDLIMITSTATUS_SL_UNKNOWN;
const Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType Gw_mp5_nav_0x533_533::NAV_SPEEDLIMITSTATUS_SL_EXISTS;
const Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType Gw_mp5_nav_0x533_533::NAV_SPEEDLIMITSTATUS_SL_NOLIMIT;
const Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType Gw_mp5_nav_0x533_533::NAV_SPEEDLIMITSTATUS_SL_PLURAL;
const Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType Gw_mp5_nav_0x533_533::Nav_speedlimitstatusType_MIN;
const Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType Gw_mp5_nav_0x533_533::Nav_speedlimitstatusType_MAX;
const int Gw_mp5_nav_0x533_533::Nav_speedlimitstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[308];
}
bool Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_fcw_sensitiveType Gw_mp5_0x530_530::MP5_FCW_SENSITIVE_UNAVAILABLE;
const Gw_mp5_0x530_530_Mp5_fcw_sensitiveType Gw_mp5_0x530_530::MP5_FCW_SENSITIVE_LEVEL1_LOW_SENSITIVE;
const Gw_mp5_0x530_530_Mp5_fcw_sensitiveType Gw_mp5_0x530_530::MP5_FCW_SENSITIVE_LEVEL2_NORMAL;
const Gw_mp5_0x530_530_Mp5_fcw_sensitiveType Gw_mp5_0x530_530::MP5_FCW_SENSITIVE_LEVEL3_HIGH_SENSITIVE;
const Gw_mp5_0x530_530_Mp5_fcw_sensitiveType Gw_mp5_0x530_530::Mp5_fcw_sensitiveType_MIN;
const Gw_mp5_0x530_530_Mp5_fcw_sensitiveType Gw_mp5_0x530_530::Mp5_fcw_sensitiveType_MAX;
const int Gw_mp5_0x530_530::Mp5_fcw_sensitiveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[309];
}
bool Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_icmenushift_buttonType Gw_mp5_0x530_530::MP5_ICMENUSHIFT_BUTTON_NO_EVENT;
const Gw_mp5_0x530_530_Mp5_icmenushift_buttonType Gw_mp5_0x530_530::MP5_ICMENUSHIFT_BUTTON_PAGE_UP;
const Gw_mp5_0x530_530_Mp5_icmenushift_buttonType Gw_mp5_0x530_530::MP5_ICMENUSHIFT_BUTTON_PAGE_DOWN;
const Gw_mp5_0x530_530_Mp5_icmenushift_buttonType Gw_mp5_0x530_530::MP5_ICMENUSHIFT_BUTTON_INVALID;
const Gw_mp5_0x530_530_Mp5_icmenushift_buttonType Gw_mp5_0x530_530::Mp5_icmenushift_buttonType_MIN;
const Gw_mp5_0x530_530_Mp5_icmenushift_buttonType Gw_mp5_0x530_530::Mp5_icmenushift_buttonType_MAX;
const int Gw_mp5_0x530_530::Mp5_icmenushift_buttonType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_aeb_on_offType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[310];
}
bool Gw_mp5_0x530_530_Mp5_aeb_on_offType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_aeb_on_offType Gw_mp5_0x530_530::MP5_AEB_ON_OFF_SWITCH_ON;
const Gw_mp5_0x530_530_Mp5_aeb_on_offType Gw_mp5_0x530_530::MP5_AEB_ON_OFF_SWITCH_OFF;
const Gw_mp5_0x530_530_Mp5_aeb_on_offType Gw_mp5_0x530_530::Mp5_aeb_on_offType_MIN;
const Gw_mp5_0x530_530_Mp5_aeb_on_offType Gw_mp5_0x530_530::Mp5_aeb_on_offType_MAX;
const int Gw_mp5_0x530_530::Mp5_aeb_on_offType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_fcw_on_offType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[311];
}
bool Gw_mp5_0x530_530_Mp5_fcw_on_offType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_fcw_on_offType Gw_mp5_0x530_530::MP5_FCW_ON_OFF_SWITCH_ON;
const Gw_mp5_0x530_530_Mp5_fcw_on_offType Gw_mp5_0x530_530::MP5_FCW_ON_OFF_SWITCH_OFF;
const Gw_mp5_0x530_530_Mp5_fcw_on_offType Gw_mp5_0x530_530::Mp5_fcw_on_offType_MIN;
const Gw_mp5_0x530_530_Mp5_fcw_on_offType Gw_mp5_0x530_530::Mp5_fcw_on_offType_MAX;
const int Gw_mp5_0x530_530::Mp5_fcw_on_offType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_bsdswitchstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[312];
}
bool Gw_mp5_0x530_530_Mp5_bsdswitchstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_bsdswitchstsType Gw_mp5_0x530_530::MP5_BSDSWITCHSTS_ON;
const Gw_mp5_0x530_530_Mp5_bsdswitchstsType Gw_mp5_0x530_530::MP5_BSDSWITCHSTS_OFF;
const Gw_mp5_0x530_530_Mp5_bsdswitchstsType Gw_mp5_0x530_530::Mp5_bsdswitchstsType_MIN;
const Gw_mp5_0x530_530_Mp5_bsdswitchstsType Gw_mp5_0x530_530::Mp5_bsdswitchstsType_MAX;
const int Gw_mp5_0x530_530::Mp5_bsdswitchstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_afs_swtichstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[313];
}
bool Gw_mp5_0x530_530_Mp5_afs_swtichstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_afs_swtichstsType Gw_mp5_0x530_530::MP5_AFS_SWTICHSTS_NO_PRESS;
const Gw_mp5_0x530_530_Mp5_afs_swtichstsType Gw_mp5_0x530_530::MP5_AFS_SWTICHSTS_PRESS;
const Gw_mp5_0x530_530_Mp5_afs_swtichstsType Gw_mp5_0x530_530::Mp5_afs_swtichstsType_MIN;
const Gw_mp5_0x530_530_Mp5_afs_swtichstsType Gw_mp5_0x530_530::Mp5_afs_swtichstsType_MAX;
const int Gw_mp5_0x530_530::Mp5_afs_swtichstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_laneassittypereqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[314];
}
bool Gw_mp5_0x530_530_Mp5_laneassittypereqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_laneassittypereqType Gw_mp5_0x530_530::MP5_LANEASSITTYPEREQ_NO_SELECTION;
const Gw_mp5_0x530_530_Mp5_laneassittypereqType Gw_mp5_0x530_530::MP5_LANEASSITTYPEREQ_LDW;
const Gw_mp5_0x530_530_Mp5_laneassittypereqType Gw_mp5_0x530_530::MP5_LANEASSITTYPEREQ_LKA;
const Gw_mp5_0x530_530_Mp5_laneassittypereqType Gw_mp5_0x530_530::MP5_LANEASSITTYPEREQ_LDW_LKA;
const Gw_mp5_0x530_530_Mp5_laneassittypereqType Gw_mp5_0x530_530::Mp5_laneassittypereqType_MIN;
const Gw_mp5_0x530_530_Mp5_laneassittypereqType Gw_mp5_0x530_530::Mp5_laneassittypereqType_MAX;
const int Gw_mp5_0x530_530::Mp5_laneassittypereqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[315];
}
bool Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType Gw_mp5_0x530_530::MP5_ICMENUACTIVE_BUTTON_OFF;
const Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType Gw_mp5_0x530_530::MP5_ICMENUACTIVE_BUTTON_MENU_SWITCH_ACTIVE;
const Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType Gw_mp5_0x530_530::MP5_ICMENUACTIVE_BUTTON_SILENCE;
const Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType Gw_mp5_0x530_530::MP5_ICMENUACTIVE_BUTTON_INVALID;
const Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType Gw_mp5_0x530_530::Mp5_icmenuactive_buttonType_MIN;
const Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType Gw_mp5_0x530_530::Mp5_icmenuactive_buttonType_MAX;
const int Gw_mp5_0x530_530::Mp5_icmenuactive_buttonType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_alarmstatusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[316];
}
bool Gw_mp5_0x530_530_Mp5_alarmstatusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_alarmstatusType Gw_mp5_0x530_530::MP5_ALARMSTATUS_INACTIVE;
const Gw_mp5_0x530_530_Mp5_alarmstatusType Gw_mp5_0x530_530::MP5_ALARMSTATUS_ACTIVE;
const Gw_mp5_0x530_530_Mp5_alarmstatusType Gw_mp5_0x530_530::MP5_ALARMSTATUS_FAILED;
const Gw_mp5_0x530_530_Mp5_alarmstatusType Gw_mp5_0x530_530::MP5_ALARMSTATUS_RESERVED;
const Gw_mp5_0x530_530_Mp5_alarmstatusType Gw_mp5_0x530_530::Mp5_alarmstatusType_MIN;
const Gw_mp5_0x530_530_Mp5_alarmstatusType Gw_mp5_0x530_530::Mp5_alarmstatusType_MAX;
const int Gw_mp5_0x530_530::Mp5_alarmstatusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_alarmornotType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[317];
}
bool Gw_mp5_0x530_530_Mp5_alarmornotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_alarmornotType Gw_mp5_0x530_530::MP5_ALARMORNOT_NO_ALARM;
const Gw_mp5_0x530_530_Mp5_alarmornotType Gw_mp5_0x530_530::MP5_ALARMORNOT_ALARM;
const Gw_mp5_0x530_530_Mp5_alarmornotType Gw_mp5_0x530_530::Mp5_alarmornotType_MIN;
const Gw_mp5_0x530_530_Mp5_alarmornotType Gw_mp5_0x530_530::Mp5_alarmornotType_MAX;
const int Gw_mp5_0x530_530::Mp5_alarmornotType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_paakreset_reqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[318];
}
bool Gw_mp5_0x530_530_Mp5_paakreset_reqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_paakreset_reqType Gw_mp5_0x530_530::MP5_PAAKRESET_REQ_NO_REQUEST;
const Gw_mp5_0x530_530_Mp5_paakreset_reqType Gw_mp5_0x530_530::MP5_PAAKRESET_REQ_REQUEST;
const Gw_mp5_0x530_530_Mp5_paakreset_reqType Gw_mp5_0x530_530::Mp5_paakreset_reqType_MIN;
const Gw_mp5_0x530_530_Mp5_paakreset_reqType Gw_mp5_0x530_530::Mp5_paakreset_reqType_MAX;
const int Gw_mp5_0x530_530::Mp5_paakreset_reqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_cta_activeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[319];
}
bool Gw_mp5_0x530_530_Mp5_cta_activeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_cta_activeType Gw_mp5_0x530_530::MP5_CTA_ACTIVE_ON;
const Gw_mp5_0x530_530_Mp5_cta_activeType Gw_mp5_0x530_530::MP5_CTA_ACTIVE_OFF;
const Gw_mp5_0x530_530_Mp5_cta_activeType Gw_mp5_0x530_530::Mp5_cta_activeType_MIN;
const Gw_mp5_0x530_530_Mp5_cta_activeType Gw_mp5_0x530_530::Mp5_cta_activeType_MAX;
const int Gw_mp5_0x530_530::Mp5_cta_activeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_bsdlca_activeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[320];
}
bool Gw_mp5_0x530_530_Mp5_bsdlca_activeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_bsdlca_activeType Gw_mp5_0x530_530::MP5_BSDLCA_ACTIVE_ON;
const Gw_mp5_0x530_530_Mp5_bsdlca_activeType Gw_mp5_0x530_530::MP5_BSDLCA_ACTIVE_OFF;
const Gw_mp5_0x530_530_Mp5_bsdlca_activeType Gw_mp5_0x530_530::Mp5_bsdlca_activeType_MIN;
const Gw_mp5_0x530_530_Mp5_bsdlca_activeType Gw_mp5_0x530_530::Mp5_bsdlca_activeType_MAX;
const int Gw_mp5_0x530_530::Mp5_bsdlca_activeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_tsrmenureqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[321];
}
bool Gw_mp5_0x530_530_Mp5_tsrmenureqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_tsrmenureqType Gw_mp5_0x530_530::MP5_TSRMENUREQ_ON;
const Gw_mp5_0x530_530_Mp5_tsrmenureqType Gw_mp5_0x530_530::MP5_TSRMENUREQ_OFF;
const Gw_mp5_0x530_530_Mp5_tsrmenureqType Gw_mp5_0x530_530::Mp5_tsrmenureqType_MIN;
const Gw_mp5_0x530_530_Mp5_tsrmenureqType Gw_mp5_0x530_530::Mp5_tsrmenureqType_MAX;
const int Gw_mp5_0x530_530::Mp5_tsrmenureqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_ldwwarningType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[322];
}
bool Gw_mp5_0x530_530_Mp5_ldwwarningType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_ldwwarningType Gw_mp5_0x530_530::MP5_LDWWARNING_AUDIBLE_WARNING_AND_WHEELSTEER_SHAKE;
const Gw_mp5_0x530_530_Mp5_ldwwarningType Gw_mp5_0x530_530::MP5_LDWWARNING_AUDIBLE_WARNING;
const Gw_mp5_0x530_530_Mp5_ldwwarningType Gw_mp5_0x530_530::MP5_LDWWARNING_WHEELSTEER_SHAKE;
const Gw_mp5_0x530_530_Mp5_ldwwarningType Gw_mp5_0x530_530::MP5_LDWWARNING_RESERVED;
const Gw_mp5_0x530_530_Mp5_ldwwarningType Gw_mp5_0x530_530::Mp5_ldwwarningType_MIN;
const Gw_mp5_0x530_530_Mp5_ldwwarningType Gw_mp5_0x530_530::Mp5_ldwwarningType_MAX;
const int Gw_mp5_0x530_530::Mp5_ldwwarningType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_ldwsensitvityType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[323];
}
bool Gw_mp5_0x530_530_Mp5_ldwsensitvityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_ldwsensitvityType Gw_mp5_0x530_530::MP5_LDWSENSITVITY_HIGH;
const Gw_mp5_0x530_530_Mp5_ldwsensitvityType Gw_mp5_0x530_530::MP5_LDWSENSITVITY_LOW;
const Gw_mp5_0x530_530_Mp5_ldwsensitvityType Gw_mp5_0x530_530::MP5_LDWSENSITVITY_RESERVED;
const Gw_mp5_0x530_530_Mp5_ldwsensitvityType Gw_mp5_0x530_530::Mp5_ldwsensitvityType_MIN;
const Gw_mp5_0x530_530_Mp5_ldwsensitvityType Gw_mp5_0x530_530::Mp5_ldwsensitvityType_MAX;
const int Gw_mp5_0x530_530::Mp5_ldwsensitvityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_avm_angleType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[324];
}
bool Gw_mp5_0x530_530_Mp5_avm_angleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::MP5_AVM_ANGLE_CENTER_KEY;
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::MP5_AVM_ANGLE_FRONT_3D_FRONT_AVM_2D;
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::MP5_AVM_ANGLE_FRONT_RIGHT_3D;
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::MP5_AVM_ANGLE_RIGHT_3D_RIGHT_AVM_2D;
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::MP5_AVM_ANGLE_REAR_RIGHT_3D;
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::MP5_AVM_ANGLE_REAR_3D_REAR_AVM_2D;
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::MP5_AVM_ANGLE_LEFT_REAR_3D;
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::MP5_AVM_ANGLE_LEFT_3D_LEFT_AVM_2D;
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::MP5_AVM_ANGLE_LEFT_FRONT_3D;
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::MP5_AVM_ANGLE_3D_KEY;
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::MP5_AVM_ANGLE_2D_KEY;
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::MP5_AVM_ANGLE_NO_VIDEO_SIGNAL_RESERVED;
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::MP5_AVM_ANGLE_RESERVED;
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::MP5_AVM_ANGLE_INVALID;
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::Mp5_avm_angleType_MIN;
const Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::Mp5_avm_angleType_MAX;
const int Gw_mp5_0x530_530::Mp5_avm_angleType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_ihcmenureqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[325];
}
bool Gw_mp5_0x530_530_Mp5_ihcmenureqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_ihcmenureqType Gw_mp5_0x530_530::MP5_IHCMENUREQ_ON;
const Gw_mp5_0x530_530_Mp5_ihcmenureqType Gw_mp5_0x530_530::MP5_IHCMENUREQ_OFF;
const Gw_mp5_0x530_530_Mp5_ihcmenureqType Gw_mp5_0x530_530::Mp5_ihcmenureqType_MIN;
const Gw_mp5_0x530_530_Mp5_ihcmenureqType Gw_mp5_0x530_530::Mp5_ihcmenureqType_MAX;
const int Gw_mp5_0x530_530::Mp5_ihcmenureqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_doa_activeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[326];
}
bool Gw_mp5_0x530_530_Mp5_doa_activeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_doa_activeType Gw_mp5_0x530_530::MP5_DOA_ACTIVE_ON;
const Gw_mp5_0x530_530_Mp5_doa_activeType Gw_mp5_0x530_530::MP5_DOA_ACTIVE_OFF;
const Gw_mp5_0x530_530_Mp5_doa_activeType Gw_mp5_0x530_530::Mp5_doa_activeType_MIN;
const Gw_mp5_0x530_530_Mp5_doa_activeType Gw_mp5_0x530_530::Mp5_doa_activeType_MAX;
const int Gw_mp5_0x530_530::Mp5_doa_activeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_apa_available_stsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[327];
}
bool Gw_mp5_0x530_530_Mp5_apa_available_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_apa_available_stsType Gw_mp5_0x530_530::MP5_APA_AVAILABLE_STS_INITIAL;
const Gw_mp5_0x530_530_Mp5_apa_available_stsType Gw_mp5_0x530_530::MP5_APA_AVAILABLE_STS_AVALIBLE;
const Gw_mp5_0x530_530_Mp5_apa_available_stsType Gw_mp5_0x530_530::MP5_APA_AVAILABLE_STS_NOT_AVALIBLE;
const Gw_mp5_0x530_530_Mp5_apa_available_stsType Gw_mp5_0x530_530::Mp5_apa_available_stsType_MIN;
const Gw_mp5_0x530_530_Mp5_apa_available_stsType Gw_mp5_0x530_530::Mp5_apa_available_stsType_MAX;
const int Gw_mp5_0x530_530::Mp5_apa_available_stsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[328];
}
bool Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType Gw_mp5_0x530_530::MP5_TPMSAUTOLOCATIONSETTING_AUTOLOCATIONSETTINGOFF;
const Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType Gw_mp5_0x530_530::MP5_TPMSAUTOLOCATIONSETTING_AUTOLOCATIONSETTINGON;
const Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType Gw_mp5_0x530_530::Mp5_tpmsautolocationsettingType_MIN;
const Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType Gw_mp5_0x530_530::Mp5_tpmsautolocationsettingType_MAX;
const int Gw_mp5_0x530_530::Mp5_tpmsautolocationsettingType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[329];
}
bool Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType Gw_mp5_0x530_530::MP5_AVM_ROTATIONDIRECTION_INITIAL;
const Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType Gw_mp5_0x530_530::MP5_AVM_ROTATIONDIRECTION_CLOCKWISE;
const Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType Gw_mp5_0x530_530::MP5_AVM_ROTATIONDIRECTION_ANTICLOCKWISE;
const Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType Gw_mp5_0x530_530::MP5_AVM_ROTATIONDIRECTION_RESERVED;
const Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType Gw_mp5_0x530_530::Mp5_avm_rotationdirectionType_MIN;
const Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType Gw_mp5_0x530_530::Mp5_avm_rotationdirectionType_MAX;
const int Gw_mp5_0x530_530::Mp5_avm_rotationdirectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_avm_buttonType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[330];
}
bool Gw_mp5_0x530_530_Mp5_avm_buttonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_avm_buttonType Gw_mp5_0x530_530::MP5_AVM_BUTTON_INIT;
const Gw_mp5_0x530_530_Mp5_avm_buttonType Gw_mp5_0x530_530::MP5_AVM_BUTTON_START_UP;
const Gw_mp5_0x530_530_Mp5_avm_buttonType Gw_mp5_0x530_530::MP5_AVM_BUTTON_SHUT_DOWN;
const Gw_mp5_0x530_530_Mp5_avm_buttonType Gw_mp5_0x530_530::MP5_AVM_BUTTON_FAULTURE;
const Gw_mp5_0x530_530_Mp5_avm_buttonType Gw_mp5_0x530_530::Mp5_avm_buttonType_MIN;
const Gw_mp5_0x530_530_Mp5_avm_buttonType Gw_mp5_0x530_530::Mp5_avm_buttonType_MAX;
const int Gw_mp5_0x530_530::Mp5_avm_buttonType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_mp5_0x530_530_Mp5_view_choiceType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[331];
}
bool Gw_mp5_0x530_530_Mp5_view_choiceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_mp5_0x530_530_Mp5_view_choiceType Gw_mp5_0x530_530::MP5_VIEW_CHOICE_AVM;
const Gw_mp5_0x530_530_Mp5_view_choiceType Gw_mp5_0x530_530::MP5_VIEW_CHOICE_ADAS;
const Gw_mp5_0x530_530_Mp5_view_choiceType Gw_mp5_0x530_530::Mp5_view_choiceType_MIN;
const Gw_mp5_0x530_530_Mp5_view_choiceType Gw_mp5_0x530_530::Mp5_view_choiceType_MAX;
const int Gw_mp5_0x530_530::Mp5_view_choiceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[332];
}
bool Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType Mrr_frobj_0x279_279::MRR_F_OBJ_0X_CLASS_UNKNOWN;
const Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType Mrr_frobj_0x279_279::MRR_F_OBJ_0X_CLASS_CAR;
const Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType Mrr_frobj_0x279_279::MRR_F_OBJ_0X_CLASS_TRUCK;
const Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType Mrr_frobj_0x279_279::MRR_F_OBJ_0X_CLASS_TWO_WHEELER;
const Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType Mrr_frobj_0x279_279::Mrr_f_obj_0x_classType_MIN;
const Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType Mrr_frobj_0x279_279::Mrr_f_obj_0x_classType_MAX;
const int Mrr_frobj_0x279_279::Mrr_f_obj_0x_classType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[333];
}
bool Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType Mrr_frobj_0x279_279::MRR_FF_OBJ_0X_CLASS_UNKNOWN;
const Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType Mrr_frobj_0x279_279::MRR_FF_OBJ_0X_CLASS_CAR;
const Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType Mrr_frobj_0x279_279::MRR_FF_OBJ_0X_CLASS_TRUCK;
const Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType Mrr_frobj_0x279_279::MRR_FF_OBJ_0X_CLASS_TWO_WHEELER;
const Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType Mrr_frobj_0x279_279::Mrr_ff_obj_0x_classType_MIN;
const Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType Mrr_frobj_0x279_279::Mrr_ff_obj_0x_classType_MAX;
const int Mrr_frobj_0x279_279::Mrr_ff_obj_0x_classType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[334];
}
bool Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType Mrr_frobj_0x279_279::MRR_FFTARGRTDETECTION_NOT_DECTECTED;
const Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType Mrr_frobj_0x279_279::MRR_FFTARGRTDETECTION_DECTECTED;
const Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType Mrr_frobj_0x279_279::Mrr_fftargrtdetectionType_MIN;
const Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType Mrr_frobj_0x279_279::Mrr_fftargrtdetectionType_MAX;
const int Mrr_frobj_0x279_279::Mrr_fftargrtdetectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mrr_frobj_0x279_279_Mrr_peddetectionType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[335];
}
bool Mrr_frobj_0x279_279_Mrr_peddetectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mrr_frobj_0x279_279_Mrr_peddetectionType Mrr_frobj_0x279_279::MRR_PEDDETECTION_NOT_DECTECTED;
const Mrr_frobj_0x279_279_Mrr_peddetectionType Mrr_frobj_0x279_279::MRR_PEDDETECTION_DECTECTED;
const Mrr_frobj_0x279_279_Mrr_peddetectionType Mrr_frobj_0x279_279::Mrr_peddetectionType_MIN;
const Mrr_frobj_0x279_279_Mrr_peddetectionType Mrr_frobj_0x279_279::Mrr_peddetectionType_MAX;
const int Mrr_frobj_0x279_279::Mrr_peddetectionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[336];
}
bool Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType Gw_ic_0x510_510::IC_AIRBAGTELLTALEBEHAVIOR_NO_FAILURE_IN_LAMP_AND_LAMP_IS_OFF;
const Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType Gw_ic_0x510_510::IC_AIRBAGTELLTALEBEHAVIOR_FAILURE_IN_LAMP;
const Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType Gw_ic_0x510_510::IC_AIRBAGTELLTALEBEHAVIOR_NO_FAILURE_IN_THE_LAMP_LAMP_IS_ON;
const Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType Gw_ic_0x510_510::IC_AIRBAGTELLTALEBEHAVIOR_NO_FAILURE_IN_THE_LAMP_LAMP_IS_BLINKING;
const Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType Gw_ic_0x510_510::IC_AIRBAGTELLTALEBEHAVIOR_AIRBAGFAILSTS_SIGNAL_NOT_RECEIVED;
const Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType Gw_ic_0x510_510::IC_AIRBAGTELLTALEBEHAVIOR_INVALID;
const Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType Gw_ic_0x510_510::Ic_airbagtelltalebehaviorType_MIN;
const Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType Gw_ic_0x510_510::Ic_airbagtelltalebehaviorType_MAX;
const int Gw_ic_0x510_510::Ic_airbagtelltalebehaviorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[337];
}
bool Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ic_0x510_510_Ic_vehbrkpump_err_icType Gw_ic_0x510_510::IC_VEHBRKPUMP_ERR_IC_NORMAL;
const Gw_ic_0x510_510_Ic_vehbrkpump_err_icType Gw_ic_0x510_510::IC_VEHBRKPUMP_ERR_IC_ERROR;
const Gw_ic_0x510_510_Ic_vehbrkpump_err_icType Gw_ic_0x510_510::Ic_vehbrkpump_err_icType_MIN;
const Gw_ic_0x510_510_Ic_vehbrkpump_err_icType Gw_ic_0x510_510::Ic_vehbrkpump_err_icType_MAX;
const int Gw_ic_0x510_510::Ic_vehbrkpump_err_icType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ic_0x510_510_Ic_disfailType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[338];
}
bool Gw_ic_0x510_510_Ic_disfailType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ic_0x510_510_Ic_disfailType Gw_ic_0x510_510::IC_DISFAIL_NO_ERROR;
const Gw_ic_0x510_510_Ic_disfailType Gw_ic_0x510_510::IC_DISFAIL_ERROR;
const Gw_ic_0x510_510_Ic_disfailType Gw_ic_0x510_510::Ic_disfailType_MIN;
const Gw_ic_0x510_510_Ic_disfailType Gw_ic_0x510_510::Ic_disfailType_MAX;
const int Gw_ic_0x510_510::Ic_disfailType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ic_0x510_510_Ic_qdashaccfailType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[339];
}
bool Gw_ic_0x510_510_Ic_qdashaccfailType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ic_0x510_510_Ic_qdashaccfailType Gw_ic_0x510_510::IC_QDASHACCFAIL_NO_ERROR;
const Gw_ic_0x510_510_Ic_qdashaccfailType Gw_ic_0x510_510::IC_QDASHACCFAIL_REVERSIBLE_ERROR;
const Gw_ic_0x510_510_Ic_qdashaccfailType Gw_ic_0x510_510::IC_QDASHACCFAIL_IRREVERSIBLE_ERROR;
const Gw_ic_0x510_510_Ic_qdashaccfailType Gw_ic_0x510_510::IC_QDASHACCFAIL_NOT_DEFINED;
const Gw_ic_0x510_510_Ic_qdashaccfailType Gw_ic_0x510_510::Ic_qdashaccfailType_MIN;
const Gw_ic_0x510_510_Ic_qdashaccfailType Gw_ic_0x510_510::Ic_qdashaccfailType_MAX;
const int Gw_ic_0x510_510::Ic_qdashaccfailType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_tq_0x217_217_Esp_trqinc_reqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[340];
}
bool Esp_tq_0x217_217_Esp_trqinc_reqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_tq_0x217_217_Esp_trqinc_reqType Esp_tq_0x217_217::ESP_TRQINC_REQ_INACTIVE;
const Esp_tq_0x217_217_Esp_trqinc_reqType Esp_tq_0x217_217::ESP_TRQINC_REQ_ACTIVE;
const Esp_tq_0x217_217_Esp_trqinc_reqType Esp_tq_0x217_217::Esp_trqinc_reqType_MIN;
const Esp_tq_0x217_217_Esp_trqinc_reqType Esp_tq_0x217_217::Esp_trqinc_reqType_MAX;
const int Esp_tq_0x217_217::Esp_trqinc_reqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_tq_0x217_217_Esp_trqred_reqType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[341];
}
bool Esp_tq_0x217_217_Esp_trqred_reqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_tq_0x217_217_Esp_trqred_reqType Esp_tq_0x217_217::ESP_TRQRED_REQ_INACTIVE;
const Esp_tq_0x217_217_Esp_trqred_reqType Esp_tq_0x217_217::ESP_TRQRED_REQ_ACTIVE;
const Esp_tq_0x217_217_Esp_trqred_reqType Esp_tq_0x217_217::Esp_trqred_reqType_MIN;
const Esp_tq_0x217_217_Esp_trqred_reqType Esp_tq_0x217_217::Esp_trqred_reqType_MAX;
const int Esp_tq_0x217_217::Esp_trqred_reqType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[342];
}
bool Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType Esp_rpmf_0x213_213::ESP_WHEELRPMFRVALID_VALID;
const Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType Esp_rpmf_0x213_213::ESP_WHEELRPMFRVALID_INVALID;
const Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType Esp_rpmf_0x213_213::Esp_wheelrpmfrvalidType_MIN;
const Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType Esp_rpmf_0x213_213::Esp_wheelrpmfrvalidType_MAX;
const int Esp_rpmf_0x213_213::Esp_wheelrpmfrvalidType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[343];
}
bool Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType Esp_rpmf_0x213_213::ESP_WHEELRPMFLVALID_VALID;
const Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType Esp_rpmf_0x213_213::ESP_WHEELRPMFLVALID_INVALID;
const Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType Esp_rpmf_0x213_213::Esp_wheelrpmflvalidType_MIN;
const Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType Esp_rpmf_0x213_213::Esp_wheelrpmflvalidType_MAX;
const int Esp_rpmf_0x213_213::Esp_wheelrpmflvalidType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ic_time_0x581_581_Ic_monthType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[344];
}
bool Gw_ic_time_0x581_581_Ic_monthType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581::IC_MONTH_1;
const Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581::IC_MONTH_2;
const Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581::IC_MONTH_3;
const Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581::IC_MONTH_4;
const Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581::IC_MONTH_5;
const Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581::IC_MONTH_6;
const Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581::IC_MONTH_7;
const Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581::IC_MONTH_8;
const Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581::IC_MONTH_9;
const Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581::IC_MONTH_10;
const Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581::IC_MONTH_11;
const Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581::IC_MONTH_12;
const Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581::Ic_monthType_MIN;
const Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581::Ic_monthType_MAX;
const int Gw_ic_time_0x581_581::Ic_monthType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ic_time_0x581_581_Ic_dateType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[345];
}
bool Gw_ic_time_0x581_581_Ic_dateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_1;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_2;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_3;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_4;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_5;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_6;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_7;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_8;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_9;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_10;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_11;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_12;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_13;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_14;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_15;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_16;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_17;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_18;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_19;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_20;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_21;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_22;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_23;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_24;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_25;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_26;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_27;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_28;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_29;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_30;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::IC_DATE_31;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::Ic_dateType_MIN;
const Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::Ic_dateType_MAX;
const int Gw_ic_time_0x581_581::Ic_dateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ic_time_0x581_581_Ic_hourType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[346];
}
bool Gw_ic_time_0x581_581_Ic_hourType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_0;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_1;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_2;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_3;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_4;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_5;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_6;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_7;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_8;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_9;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_10;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_11;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_12;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_13;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_14;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_15;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_16;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_17;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_18;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_19;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_20;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_21;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_22;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::IC_HOUR_23;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::Ic_hourType_MIN;
const Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::Ic_hourType_MAX;
const int Gw_ic_time_0x581_581::Ic_hourType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ic_time_0x581_581_Ic_minuteType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[347];
}
bool Gw_ic_time_0x581_581_Ic_minuteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_0;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_1;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_2;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_3;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_4;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_5;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_6;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_7;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_8;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_9;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_10;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_11;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_12;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_13;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_14;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_15;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_16;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_17;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_18;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_19;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_20;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_21;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_22;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_23;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_24;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_25;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_26;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_27;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_28;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_29;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_30;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_31;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_32;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_33;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_34;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_35;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_36;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_37;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_38;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_39;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_40;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_41;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_42;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_43;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_44;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_45;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_46;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_47;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_48;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_49;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_50;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_51;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_52;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_53;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_54;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_55;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_56;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_57;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_58;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::IC_MINUTE_59;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::Ic_minuteType_MIN;
const Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::Ic_minuteType_MAX;
const int Gw_ic_time_0x581_581::Ic_minuteType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ic_time_0x581_581_Ic_secondType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[348];
}
bool Gw_ic_time_0x581_581_Ic_secondType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_0;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_1;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_2;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_3;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_4;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_5;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_6;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_7;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_8;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_9;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_10;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_11;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_12;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_13;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_14;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_15;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_16;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_17;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_18;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_19;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_20;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_21;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_22;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_23;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_24;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_25;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_26;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_27;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_28;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_29;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_30;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_31;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_32;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_33;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_34;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_35;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_36;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_37;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_38;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_39;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_40;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_41;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_42;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_43;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_44;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_45;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_46;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_47;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_48;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_49;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_50;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_51;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_52;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_53;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_54;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_55;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_56;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_57;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_58;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::IC_SECOND_59;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::Ic_secondType_MIN;
const Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::Ic_secondType_MAX;
const int Gw_ic_time_0x581_581::Ic_secondType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_ic_time_0x581_581_Ic_yearType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[349];
}
bool Gw_ic_time_0x581_581_Ic_yearType_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_ic_time_0x581_581_Ic_yearType Gw_ic_time_0x581_581::IC_YEAR_2019;
const Gw_ic_time_0x581_581_Ic_yearType Gw_ic_time_0x581_581::IC_YEAR_2020;
const Gw_ic_time_0x581_581_Ic_yearType Gw_ic_time_0x581_581::IC_YEAR_2021;
const Gw_ic_time_0x581_581_Ic_yearType Gw_ic_time_0x581_581::Ic_yearType_MIN;
const Gw_ic_time_0x581_581_Ic_yearType Gw_ic_time_0x581_581::Ic_yearType_MAX;
const int Gw_ic_time_0x581_581::Ic_yearType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Afs_0x5a0_5a0_Afs_work_stsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[350];
}
bool Afs_0x5a0_5a0_Afs_work_stsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Afs_0x5a0_5a0_Afs_work_stsType Afs_0x5a0_5a0::AFS_WORK_STS_OFF;
const Afs_0x5a0_5a0_Afs_work_stsType Afs_0x5a0_5a0::AFS_WORK_STS_ON;
const Afs_0x5a0_5a0_Afs_work_stsType Afs_0x5a0_5a0::AFS_WORK_STS_ERROR;
const Afs_0x5a0_5a0_Afs_work_stsType Afs_0x5a0_5a0::AFS_WORK_STS_NOT_CALIBRATION;
const Afs_0x5a0_5a0_Afs_work_stsType Afs_0x5a0_5a0::Afs_work_stsType_MIN;
const Afs_0x5a0_5a0_Afs_work_stsType Afs_0x5a0_5a0::Afs_work_stsType_MAX;
const int Afs_0x5a0_5a0::Afs_work_stsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_nm_0x440_440_SodnmlimphomeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[351];
}
bool Sod_nm_0x440_440_SodnmlimphomeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_nm_0x440_440_SodnmlimphomeType Sod_nm_0x440_440::SODNMLIMPHOME_NOT_ACTIVE;
const Sod_nm_0x440_440_SodnmlimphomeType Sod_nm_0x440_440::SODNMLIMPHOME_ACTIVE;
const Sod_nm_0x440_440_SodnmlimphomeType Sod_nm_0x440_440::SodnmlimphomeType_MIN;
const Sod_nm_0x440_440_SodnmlimphomeType Sod_nm_0x440_440::SodnmlimphomeType_MAX;
const int Sod_nm_0x440_440::SodnmlimphomeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_nm_0x440_440_SodnmsleepindType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[352];
}
bool Sod_nm_0x440_440_SodnmsleepindType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_nm_0x440_440_SodnmsleepindType Sod_nm_0x440_440::SODNMSLEEPIND_NOT_ACTIVE;
const Sod_nm_0x440_440_SodnmsleepindType Sod_nm_0x440_440::SODNMSLEEPIND_ACTIVE;
const Sod_nm_0x440_440_SodnmsleepindType Sod_nm_0x440_440::SodnmsleepindType_MIN;
const Sod_nm_0x440_440_SodnmsleepindType Sod_nm_0x440_440::SodnmsleepindType_MAX;
const int Sod_nm_0x440_440::SodnmsleepindType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_nm_0x440_440_SodnmsleepackType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[353];
}
bool Sod_nm_0x440_440_SodnmsleepackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_nm_0x440_440_SodnmsleepackType Sod_nm_0x440_440::SODNMSLEEPACK_NOT_ACTIVE;
const Sod_nm_0x440_440_SodnmsleepackType Sod_nm_0x440_440::SODNMSLEEPACK_ACTIVE;
const Sod_nm_0x440_440_SodnmsleepackType Sod_nm_0x440_440::SodnmsleepackType_MIN;
const Sod_nm_0x440_440_SodnmsleepackType Sod_nm_0x440_440::SodnmsleepackType_MAX;
const int Sod_nm_0x440_440::SodnmsleepackType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_nm_0x440_440_SodnmaliveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[354];
}
bool Sod_nm_0x440_440_SodnmaliveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_nm_0x440_440_SodnmaliveType Sod_nm_0x440_440::SODNMALIVE_NOT_ACTIVE;
const Sod_nm_0x440_440_SodnmaliveType Sod_nm_0x440_440::SODNMALIVE_ACTIVE;
const Sod_nm_0x440_440_SodnmaliveType Sod_nm_0x440_440::SodnmaliveType_MIN;
const Sod_nm_0x440_440_SodnmaliveType Sod_nm_0x440_440::SodnmaliveType_MAX;
const int Sod_nm_0x440_440::SodnmaliveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_nm_0x440_440_SodnmringType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[355];
}
bool Sod_nm_0x440_440_SodnmringType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_nm_0x440_440_SodnmringType Sod_nm_0x440_440::SODNMRING_NOT_ACTIVE;
const Sod_nm_0x440_440_SodnmringType Sod_nm_0x440_440::SODNMRING_ACTIVE;
const Sod_nm_0x440_440_SodnmringType Sod_nm_0x440_440::SodnmringType_MIN;
const Sod_nm_0x440_440_SodnmringType Sod_nm_0x440_440::SodnmringType_MAX;
const int Sod_nm_0x440_440::SodnmringType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_nm_0x460_460_GwnmlimphomeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[356];
}
bool Gw_nm_0x460_460_GwnmlimphomeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_nm_0x460_460_GwnmlimphomeType Gw_nm_0x460_460::GWNMLIMPHOME_NOT_ACTIVE;
const Gw_nm_0x460_460_GwnmlimphomeType Gw_nm_0x460_460::GWNMLIMPHOME_ACTIVE;
const Gw_nm_0x460_460_GwnmlimphomeType Gw_nm_0x460_460::GwnmlimphomeType_MIN;
const Gw_nm_0x460_460_GwnmlimphomeType Gw_nm_0x460_460::GwnmlimphomeType_MAX;
const int Gw_nm_0x460_460::GwnmlimphomeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_nm_0x460_460_GwnmsleepindType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[357];
}
bool Gw_nm_0x460_460_GwnmsleepindType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_nm_0x460_460_GwnmsleepindType Gw_nm_0x460_460::GWNMSLEEPIND_NOT_ACTIVE;
const Gw_nm_0x460_460_GwnmsleepindType Gw_nm_0x460_460::GWNMSLEEPIND_ACTIVE;
const Gw_nm_0x460_460_GwnmsleepindType Gw_nm_0x460_460::GwnmsleepindType_MIN;
const Gw_nm_0x460_460_GwnmsleepindType Gw_nm_0x460_460::GwnmsleepindType_MAX;
const int Gw_nm_0x460_460::GwnmsleepindType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_nm_0x460_460_GwnmsleepackType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[358];
}
bool Gw_nm_0x460_460_GwnmsleepackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_nm_0x460_460_GwnmsleepackType Gw_nm_0x460_460::GWNMSLEEPACK_NOT_ACTIVE;
const Gw_nm_0x460_460_GwnmsleepackType Gw_nm_0x460_460::GWNMSLEEPACK_ACTIVE;
const Gw_nm_0x460_460_GwnmsleepackType Gw_nm_0x460_460::GwnmsleepackType_MIN;
const Gw_nm_0x460_460_GwnmsleepackType Gw_nm_0x460_460::GwnmsleepackType_MAX;
const int Gw_nm_0x460_460::GwnmsleepackType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_nm_0x460_460_GwnmaliveType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[359];
}
bool Gw_nm_0x460_460_GwnmaliveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_nm_0x460_460_GwnmaliveType Gw_nm_0x460_460::GWNMALIVE_NOT_ACTIVE;
const Gw_nm_0x460_460_GwnmaliveType Gw_nm_0x460_460::GWNMALIVE_ACTIVE;
const Gw_nm_0x460_460_GwnmaliveType Gw_nm_0x460_460::GwnmaliveType_MIN;
const Gw_nm_0x460_460_GwnmaliveType Gw_nm_0x460_460::GwnmaliveType_MAX;
const int Gw_nm_0x460_460::GwnmaliveType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_nm_0x460_460_GwnmringType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[360];
}
bool Gw_nm_0x460_460_GwnmringType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_nm_0x460_460_GwnmringType Gw_nm_0x460_460::GWNMRING_NOT_ACTIVE;
const Gw_nm_0x460_460_GwnmringType Gw_nm_0x460_460::GWNMRING_ACTIVE;
const Gw_nm_0x460_460_GwnmringType Gw_nm_0x460_460::GwnmringType_MIN;
const Gw_nm_0x460_460_GwnmringType Gw_nm_0x460_460::GwnmringType_MAX;
const int Gw_nm_0x460_460::GwnmringType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_sassoftlimitrightflgType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[361];
}
bool Eps_0x260_260_Eps_sassoftlimitrightflgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_0x260_260_Eps_sassoftlimitrightflgType Eps_0x260_260::EPS_SASSOFTLIMITRIGHTFLG_NO_LEARNED;
const Eps_0x260_260_Eps_sassoftlimitrightflgType Eps_0x260_260::EPS_SASSOFTLIMITRIGHTFLG_PRIMARY_LEARNED_ONLY_FOR_CEPS;
const Eps_0x260_260_Eps_sassoftlimitrightflgType Eps_0x260_260::EPS_SASSOFTLIMITRIGHTFLG_LEARNED;
const Eps_0x260_260_Eps_sassoftlimitrightflgType Eps_0x260_260::EPS_SASSOFTLIMITRIGHTFLG_RESERVED;
const Eps_0x260_260_Eps_sassoftlimitrightflgType Eps_0x260_260::Eps_sassoftlimitrightflgType_MIN;
const Eps_0x260_260_Eps_sassoftlimitrightflgType Eps_0x260_260::Eps_sassoftlimitrightflgType_MAX;
const int Eps_0x260_260::Eps_sassoftlimitrightflgType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_emergencypowerlimitType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[362];
}
bool Eps_0x260_260_Eps_st_emergencypowerlimitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_0x260_260_Eps_st_emergencypowerlimitType Eps_0x260_260::EPS_ST_EMERGENCYPOWERLIMIT_NORMAL;
const Eps_0x260_260_Eps_st_emergencypowerlimitType Eps_0x260_260::EPS_ST_EMERGENCYPOWERLIMIT_POWER_DENSITY_LIMIT;
const Eps_0x260_260_Eps_st_emergencypowerlimitType Eps_0x260_260::Eps_st_emergencypowerlimitType_MIN;
const Eps_0x260_260_Eps_st_emergencypowerlimitType Eps_0x260_260::Eps_st_emergencypowerlimitType_MAX;
const int Eps_0x260_260::Eps_st_emergencypowerlimitType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_emergencymotorType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[363];
}
bool Eps_0x260_260_Eps_st_emergencymotorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_0x260_260_Eps_st_emergencymotorType Eps_0x260_260::EPS_ST_EMERGENCYMOTOR_NORMAL;
const Eps_0x260_260_Eps_st_emergencymotorType Eps_0x260_260::EPS_ST_EMERGENCYMOTOR_SERVO_MOTOR_FAULT;
const Eps_0x260_260_Eps_st_emergencymotorType Eps_0x260_260::Eps_st_emergencymotorType_MIN;
const Eps_0x260_260_Eps_st_emergencymotorType Eps_0x260_260::Eps_st_emergencymotorType_MAX;
const int Eps_0x260_260::Eps_st_emergencymotorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_emergencyecuType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[364];
}
bool Eps_0x260_260_Eps_st_emergencyecuType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_0x260_260_Eps_st_emergencyecuType Eps_0x260_260::EPS_ST_EMERGENCYECU_NORMAL;
const Eps_0x260_260_Eps_st_emergencyecuType Eps_0x260_260::EPS_ST_EMERGENCYECU_ECU_INNER_FAULT;
const Eps_0x260_260_Eps_st_emergencyecuType Eps_0x260_260::Eps_st_emergencyecuType_MIN;
const Eps_0x260_260_Eps_st_emergencyecuType Eps_0x260_260::Eps_st_emergencyecuType_MAX;
const int Eps_0x260_260::Eps_st_emergencyecuType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_emergencycaninterfaceType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[365];
}
bool Eps_0x260_260_Eps_st_emergencycaninterfaceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_0x260_260_Eps_st_emergencycaninterfaceType Eps_0x260_260::EPS_ST_EMERGENCYCANINTERFACE_NORMAL;
const Eps_0x260_260_Eps_st_emergencycaninterfaceType Eps_0x260_260::EPS_ST_EMERGENCYCANINTERFACE_CAN_INTERFACE_IS_FAULT;
const Eps_0x260_260_Eps_st_emergencycaninterfaceType Eps_0x260_260::Eps_st_emergencycaninterfaceType_MIN;
const Eps_0x260_260_Eps_st_emergencycaninterfaceType Eps_0x260_260::Eps_st_emergencycaninterfaceType_MAX;
const int Eps_0x260_260::Eps_st_emergencycaninterfaceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_emergencysensorType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[366];
}
bool Eps_0x260_260_Eps_st_emergencysensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_0x260_260_Eps_st_emergencysensorType Eps_0x260_260::EPS_ST_EMERGENCYSENSOR_NORMAL;
const Eps_0x260_260_Eps_st_emergencysensorType Eps_0x260_260::EPS_ST_EMERGENCYSENSOR_SENSOR_IS_FAULT;
const Eps_0x260_260_Eps_st_emergencysensorType Eps_0x260_260::Eps_st_emergencysensorType_MIN;
const Eps_0x260_260_Eps_st_emergencysensorType Eps_0x260_260::Eps_st_emergencysensorType_MAX;
const int Eps_0x260_260::Eps_st_emergencysensorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_emergencyovertempType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[367];
}
bool Eps_0x260_260_Eps_st_emergencyovertempType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_0x260_260_Eps_st_emergencyovertempType Eps_0x260_260::EPS_ST_EMERGENCYOVERTEMP_NORMAL;
const Eps_0x260_260_Eps_st_emergencyovertempType Eps_0x260_260::EPS_ST_EMERGENCYOVERTEMP_OVER_TEMPERATURE;
const Eps_0x260_260_Eps_st_emergencyovertempType Eps_0x260_260::Eps_st_emergencyovertempType_MIN;
const Eps_0x260_260_Eps_st_emergencyovertempType Eps_0x260_260::Eps_st_emergencyovertempType_MAX;
const int Eps_0x260_260::Eps_st_emergencyovertempType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_emergencyovervoltageType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[368];
}
bool Eps_0x260_260_Eps_st_emergencyovervoltageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_0x260_260_Eps_st_emergencyovervoltageType Eps_0x260_260::EPS_ST_EMERGENCYOVERVOLTAGE_NORMAL;
const Eps_0x260_260_Eps_st_emergencyovervoltageType Eps_0x260_260::EPS_ST_EMERGENCYOVERVOLTAGE_OVER_VOLTAGE;
const Eps_0x260_260_Eps_st_emergencyovervoltageType Eps_0x260_260::Eps_st_emergencyovervoltageType_MIN;
const Eps_0x260_260_Eps_st_emergencyovervoltageType Eps_0x260_260::Eps_st_emergencyovervoltageType_MAX;
const int Eps_0x260_260::Eps_st_emergencyovervoltageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_emergencyundervoltageType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[369];
}
bool Eps_0x260_260_Eps_st_emergencyundervoltageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_0x260_260_Eps_st_emergencyundervoltageType Eps_0x260_260::EPS_ST_EMERGENCYUNDERVOLTAGE_NORMAL;
const Eps_0x260_260_Eps_st_emergencyundervoltageType Eps_0x260_260::EPS_ST_EMERGENCYUNDERVOLTAGE_UNDER_VOLTAGE;
const Eps_0x260_260_Eps_st_emergencyundervoltageType Eps_0x260_260::Eps_st_emergencyundervoltageType_MIN;
const Eps_0x260_260_Eps_st_emergencyundervoltageType Eps_0x260_260::Eps_st_emergencyundervoltageType_MAX;
const int Eps_0x260_260::Eps_st_emergencyundervoltageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_f_ecutempvalidType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[370];
}
bool Eps_0x260_260_Eps_f_ecutempvalidType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_0x260_260_Eps_f_ecutempvalidType Eps_0x260_260::EPS_F_ECUTEMPVALID_INVALID;
const Eps_0x260_260_Eps_f_ecutempvalidType Eps_0x260_260::EPS_F_ECUTEMPVALID_VALID;
const Eps_0x260_260_Eps_f_ecutempvalidType Eps_0x260_260::Eps_f_ecutempvalidType_MIN;
const Eps_0x260_260_Eps_f_ecutempvalidType Eps_0x260_260::Eps_f_ecutempvalidType_MAX;
const int Eps_0x260_260::Eps_f_ecutempvalidType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_sassoftlimitleftflgType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[371];
}
bool Eps_0x260_260_Eps_sassoftlimitleftflgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_0x260_260_Eps_sassoftlimitleftflgType Eps_0x260_260::EPS_SASSOFTLIMITLEFTFLG_NO_LEARNED;
const Eps_0x260_260_Eps_sassoftlimitleftflgType Eps_0x260_260::EPS_SASSOFTLIMITLEFTFLG_PRIMARY_LEARNED_ONLY_FOR_CEPS;
const Eps_0x260_260_Eps_sassoftlimitleftflgType Eps_0x260_260::EPS_SASSOFTLIMITLEFTFLG_LEARNED;
const Eps_0x260_260_Eps_sassoftlimitleftflgType Eps_0x260_260::EPS_SASSOFTLIMITLEFTFLG_RESERVED;
const Eps_0x260_260_Eps_sassoftlimitleftflgType Eps_0x260_260::Eps_sassoftlimitleftflgType_MIN;
const Eps_0x260_260_Eps_sassoftlimitleftflgType Eps_0x260_260::Eps_sassoftlimitleftflgType_MAX;
const int Eps_0x260_260::Eps_sassoftlimitleftflgType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_st_dtcflagType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[372];
}
bool Eps_0x260_260_Eps_st_dtcflagType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_0x260_260_Eps_st_dtcflagType Eps_0x260_260::EPS_ST_DTCFLAG_NO_DTC_EXIST;
const Eps_0x260_260_Eps_st_dtcflagType Eps_0x260_260::EPS_ST_DTCFLAG_DTC_EXIST;
const Eps_0x260_260_Eps_st_dtcflagType Eps_0x260_260::Eps_st_dtcflagType_MIN;
const Eps_0x260_260_Eps_st_dtcflagType Eps_0x260_260::Eps_st_dtcflagType_MAX;
const int Eps_0x260_260::Eps_st_dtcflagType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_sasindexstsType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[373];
}
bool Eps_0x260_260_Eps_sasindexstsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_0x260_260_Eps_sasindexstsType Eps_0x260_260::EPS_SASINDEXSTS_STEERWHEEL_NOT_AT_MIDDLE_POSITION;
const Eps_0x260_260_Eps_sasindexstsType Eps_0x260_260::EPS_SASINDEXSTS_STEERWHEEL_AT_MIDDLE_POSITION;
const Eps_0x260_260_Eps_sasindexstsType Eps_0x260_260::Eps_sasindexstsType_MIN;
const Eps_0x260_260_Eps_sasindexstsType Eps_0x260_260::Eps_sasindexstsType_MAX;
const int Eps_0x260_260::Eps_sasindexstsType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_s_warninglampyellowType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[374];
}
bool Eps_0x260_260_Eps_s_warninglampyellowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_0x260_260_Eps_s_warninglampyellowType Eps_0x260_260::EPS_S_WARNINGLAMPYELLOW_CLOSE;
const Eps_0x260_260_Eps_s_warninglampyellowType Eps_0x260_260::EPS_S_WARNINGLAMPYELLOW_OPEN;
const Eps_0x260_260_Eps_s_warninglampyellowType Eps_0x260_260::Eps_s_warninglampyellowType_MIN;
const Eps_0x260_260_Eps_s_warninglampyellowType Eps_0x260_260::Eps_s_warninglampyellowType_MAX;
const int Eps_0x260_260::Eps_s_warninglampyellowType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_s_safelampredType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[375];
}
bool Eps_0x260_260_Eps_s_safelampredType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_0x260_260_Eps_s_safelampredType Eps_0x260_260::EPS_S_SAFELAMPRED_CLOSE;
const Eps_0x260_260_Eps_s_safelampredType Eps_0x260_260::EPS_S_SAFELAMPRED_OPEN;
const Eps_0x260_260_Eps_s_safelampredType Eps_0x260_260::Eps_s_safelampredType_MIN;
const Eps_0x260_260_Eps_s_safelampredType Eps_0x260_260::Eps_s_safelampredType_MAX;
const int Eps_0x260_260::Eps_s_safelampredType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Eps_0x260_260_Eps_f_loadinfoType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[376];
}
bool Eps_0x260_260_Eps_f_loadinfoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Eps_0x260_260_Eps_f_loadinfoType Eps_0x260_260::EPS_F_LOADINFO_NO_FAULT;
const Eps_0x260_260_Eps_f_loadinfoType Eps_0x260_260::EPS_F_LOADINFO_FAULT;
const Eps_0x260_260_Eps_f_loadinfoType Eps_0x260_260::Eps_f_loadinfoType_MIN;
const Eps_0x260_260_Eps_f_loadinfoType Eps_0x260_260::Eps_f_loadinfoType_MAX;
const int Eps_0x260_260::Eps_f_loadinfoType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_lca_warningreqrightType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[377];
}
bool Sod_0x275_275_Sod_lca_warningreqrightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_0x275_275_Sod_lca_warningreqrightType Sod_0x275_275::SOD_LCA_WARNINGREQRIGHT_NO_WARNING;
const Sod_0x275_275_Sod_lca_warningreqrightType Sod_0x275_275::SOD_LCA_WARNINGREQRIGHT_WARNING_LEVEL_1;
const Sod_0x275_275_Sod_lca_warningreqrightType Sod_0x275_275::SOD_LCA_WARNINGREQRIGHT_WARNING_LEVEL_2;
const Sod_0x275_275_Sod_lca_warningreqrightType Sod_0x275_275::SOD_LCA_WARNINGREQRIGHT_RESERVED;
const Sod_0x275_275_Sod_lca_warningreqrightType Sod_0x275_275::Sod_lca_warningreqrightType_MIN;
const Sod_0x275_275_Sod_lca_warningreqrightType Sod_0x275_275::Sod_lca_warningreqrightType_MAX;
const int Sod_0x275_275::Sod_lca_warningreqrightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_blis_activeType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[378];
}
bool Sod_0x275_275_Sod_blis_activeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_0x275_275_Sod_blis_activeType Sod_0x275_275::SOD_BLIS_ACTIVE_NO_ACTIVE;
const Sod_0x275_275_Sod_blis_activeType Sod_0x275_275::SOD_BLIS_ACTIVE_STANBY;
const Sod_0x275_275_Sod_blis_activeType Sod_0x275_275::SOD_BLIS_ACTIVE_ACTIVE;
const Sod_0x275_275_Sod_blis_activeType Sod_0x275_275::SOD_BLIS_ACTIVE_FAIL;
const Sod_0x275_275_Sod_blis_activeType Sod_0x275_275::Sod_blis_activeType_MIN;
const Sod_0x275_275_Sod_blis_activeType Sod_0x275_275::Sod_blis_activeType_MAX;
const int Sod_0x275_275::Sod_blis_activeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_blis_displayType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[379];
}
bool Sod_0x275_275_Sod_blis_displayType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_0x275_275_Sod_blis_displayType Sod_0x275_275::SOD_BLIS_DISPLAY_NO_DISPLAY;
const Sod_0x275_275_Sod_blis_displayType Sod_0x275_275::SOD_BLIS_DISPLAY_SOD_LCA_CTA_DOA_ERROR;
const Sod_0x275_275_Sod_blis_displayType Sod_0x275_275::SOD_BLIS_DISPLAY_SOD_LCA_CTA_DOA_BLINDNESS;
const Sod_0x275_275_Sod_blis_displayType Sod_0x275_275::SOD_BLIS_DISPLAY_SOD_LCA_CTA_DOA_UNCALIBRATION;
const Sod_0x275_275_Sod_blis_displayType Sod_0x275_275::SOD_BLIS_DISPLAY_TEMPORARY_ERROR;
const Sod_0x275_275_Sod_blis_displayType Sod_0x275_275::SOD_BLIS_DISPLAY_RESERVED;
const Sod_0x275_275_Sod_blis_displayType Sod_0x275_275::Sod_blis_displayType_MIN;
const Sod_0x275_275_Sod_blis_displayType Sod_0x275_275::Sod_blis_displayType_MAX;
const int Sod_0x275_275::Sod_blis_displayType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_lca_warningreqleftType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[380];
}
bool Sod_0x275_275_Sod_lca_warningreqleftType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_0x275_275_Sod_lca_warningreqleftType Sod_0x275_275::SOD_LCA_WARNINGREQLEFT_NO_WARNING;
const Sod_0x275_275_Sod_lca_warningreqleftType Sod_0x275_275::SOD_LCA_WARNINGREQLEFT_WARNING_LEVEL_1;
const Sod_0x275_275_Sod_lca_warningreqleftType Sod_0x275_275::SOD_LCA_WARNINGREQLEFT_WARNING_LEVEL_2;
const Sod_0x275_275_Sod_lca_warningreqleftType Sod_0x275_275::SOD_LCA_WARNINGREQLEFT_RESERVED;
const Sod_0x275_275_Sod_lca_warningreqleftType Sod_0x275_275::Sod_lca_warningreqleftType_MIN;
const Sod_0x275_275_Sod_lca_warningreqleftType Sod_0x275_275::Sod_lca_warningreqleftType_MAX;
const int Sod_0x275_275::Sod_lca_warningreqleftType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_doa_warningreqleftrearType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[381];
}
bool Sod_0x275_275_Sod_doa_warningreqleftrearType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_0x275_275_Sod_doa_warningreqleftrearType Sod_0x275_275::SOD_DOA_WARNINGREQLEFTREAR_NO_WARNING;
const Sod_0x275_275_Sod_doa_warningreqleftrearType Sod_0x275_275::SOD_DOA_WARNINGREQLEFTREAR_WARNING_LEVEL_1;
const Sod_0x275_275_Sod_doa_warningreqleftrearType Sod_0x275_275::SOD_DOA_WARNINGREQLEFTREAR_WARNING_LEVEL_2;
const Sod_0x275_275_Sod_doa_warningreqleftrearType Sod_0x275_275::SOD_DOA_WARNINGREQLEFTREAR_RESERVED;
const Sod_0x275_275_Sod_doa_warningreqleftrearType Sod_0x275_275::Sod_doa_warningreqleftrearType_MIN;
const Sod_0x275_275_Sod_doa_warningreqleftrearType Sod_0x275_275::Sod_doa_warningreqleftrearType_MAX;
const int Sod_0x275_275::Sod_doa_warningreqleftrearType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_doa_warningreqleftfrontType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[382];
}
bool Sod_0x275_275_Sod_doa_warningreqleftfrontType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_0x275_275_Sod_doa_warningreqleftfrontType Sod_0x275_275::SOD_DOA_WARNINGREQLEFTFRONT_NO_WARNING;
const Sod_0x275_275_Sod_doa_warningreqleftfrontType Sod_0x275_275::SOD_DOA_WARNINGREQLEFTFRONT_WARNING_LEVEL_1;
const Sod_0x275_275_Sod_doa_warningreqleftfrontType Sod_0x275_275::SOD_DOA_WARNINGREQLEFTFRONT_WARNING_LEVEL_2;
const Sod_0x275_275_Sod_doa_warningreqleftfrontType Sod_0x275_275::SOD_DOA_WARNINGREQLEFTFRONT_RESERVED;
const Sod_0x275_275_Sod_doa_warningreqleftfrontType Sod_0x275_275::Sod_doa_warningreqleftfrontType_MIN;
const Sod_0x275_275_Sod_doa_warningreqleftfrontType Sod_0x275_275::Sod_doa_warningreqleftfrontType_MAX;
const int Sod_0x275_275::Sod_doa_warningreqleftfrontType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_cta_warningreqleftType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[383];
}
bool Sod_0x275_275_Sod_cta_warningreqleftType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_0x275_275_Sod_cta_warningreqleftType Sod_0x275_275::SOD_CTA_WARNINGREQLEFT_NO_WARNING;
const Sod_0x275_275_Sod_cta_warningreqleftType Sod_0x275_275::SOD_CTA_WARNINGREQLEFT_RESERVED;
const Sod_0x275_275_Sod_cta_warningreqleftType Sod_0x275_275::SOD_CTA_WARNINGREQLEFT_WARNING_LEVEL_2;
const Sod_0x275_275_Sod_cta_warningreqleftType Sod_0x275_275::Sod_cta_warningreqleftType_MIN;
const Sod_0x275_275_Sod_cta_warningreqleftType Sod_0x275_275::Sod_cta_warningreqleftType_MAX;
const int Sod_0x275_275::Sod_cta_warningreqleftType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_doa_stateType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[384];
}
bool Sod_0x275_275_Sod_doa_stateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_0x275_275_Sod_doa_stateType Sod_0x275_275::SOD_DOA_STATE_INACTIVE;
const Sod_0x275_275_Sod_doa_stateType Sod_0x275_275::SOD_DOA_STATE_ACTIVE;
const Sod_0x275_275_Sod_doa_stateType Sod_0x275_275::Sod_doa_stateType_MIN;
const Sod_0x275_275_Sod_doa_stateType Sod_0x275_275::Sod_doa_stateType_MAX;
const int Sod_0x275_275::Sod_doa_stateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_cta_stateType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[385];
}
bool Sod_0x275_275_Sod_cta_stateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_0x275_275_Sod_cta_stateType Sod_0x275_275::SOD_CTA_STATE_INACTIVE;
const Sod_0x275_275_Sod_cta_stateType Sod_0x275_275::SOD_CTA_STATE_ACTIVE;
const Sod_0x275_275_Sod_cta_stateType Sod_0x275_275::Sod_cta_stateType_MIN;
const Sod_0x275_275_Sod_cta_stateType Sod_0x275_275::Sod_cta_stateType_MAX;
const int Sod_0x275_275::Sod_cta_stateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_sodlca_stateType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[386];
}
bool Sod_0x275_275_Sod_sodlca_stateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_0x275_275_Sod_sodlca_stateType Sod_0x275_275::SOD_SODLCA_STATE_INACTIVE;
const Sod_0x275_275_Sod_sodlca_stateType Sod_0x275_275::SOD_SODLCA_STATE_ACTIVE;
const Sod_0x275_275_Sod_sodlca_stateType Sod_0x275_275::Sod_sodlca_stateType_MIN;
const Sod_0x275_275_Sod_sodlca_stateType Sod_0x275_275::Sod_sodlca_stateType_MAX;
const int Sod_0x275_275::Sod_sodlca_stateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Doa_offtelltaleType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[387];
}
bool Sod_0x275_275_Doa_offtelltaleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_0x275_275_Doa_offtelltaleType Sod_0x275_275::DOA_OFFTELLTALE_OFFTELLTLAE_OFF;
const Sod_0x275_275_Doa_offtelltaleType Sod_0x275_275::DOA_OFFTELLTALE_OFFTELLTALE_ON;
const Sod_0x275_275_Doa_offtelltaleType Sod_0x275_275::Doa_offtelltaleType_MIN;
const Sod_0x275_275_Doa_offtelltaleType Sod_0x275_275::Doa_offtelltaleType_MAX;
const int Sod_0x275_275::Doa_offtelltaleType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_doa_warningreqrightrearType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[388];
}
bool Sod_0x275_275_Sod_doa_warningreqrightrearType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_0x275_275_Sod_doa_warningreqrightrearType Sod_0x275_275::SOD_DOA_WARNINGREQRIGHTREAR_NO_WARNING;
const Sod_0x275_275_Sod_doa_warningreqrightrearType Sod_0x275_275::SOD_DOA_WARNINGREQRIGHTREAR_WARNING_LEVEL_1;
const Sod_0x275_275_Sod_doa_warningreqrightrearType Sod_0x275_275::SOD_DOA_WARNINGREQRIGHTREAR_WARNING_LEVEL_2;
const Sod_0x275_275_Sod_doa_warningreqrightrearType Sod_0x275_275::SOD_DOA_WARNINGREQRIGHTREAR_RESERVED;
const Sod_0x275_275_Sod_doa_warningreqrightrearType Sod_0x275_275::Sod_doa_warningreqrightrearType_MIN;
const Sod_0x275_275_Sod_doa_warningreqrightrearType Sod_0x275_275::Sod_doa_warningreqrightrearType_MAX;
const int Sod_0x275_275::Sod_doa_warningreqrightrearType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Cta_offtelltaleType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[389];
}
bool Sod_0x275_275_Cta_offtelltaleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_0x275_275_Cta_offtelltaleType Sod_0x275_275::CTA_OFFTELLTALE_OFFTELLTLAE_OFF;
const Sod_0x275_275_Cta_offtelltaleType Sod_0x275_275::CTA_OFFTELLTALE_OFFTELLTALE_ON;
const Sod_0x275_275_Cta_offtelltaleType Sod_0x275_275::Cta_offtelltaleType_MIN;
const Sod_0x275_275_Cta_offtelltaleType Sod_0x275_275::Cta_offtelltaleType_MAX;
const int Sod_0x275_275::Cta_offtelltaleType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sodlca_offtelltaleType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[390];
}
bool Sod_0x275_275_Sodlca_offtelltaleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_0x275_275_Sodlca_offtelltaleType Sod_0x275_275::SODLCA_OFFTELLTALE_OFFTELLTLAE_OFF;
const Sod_0x275_275_Sodlca_offtelltaleType Sod_0x275_275::SODLCA_OFFTELLTALE_OFFTELLTALE_ON;
const Sod_0x275_275_Sodlca_offtelltaleType Sod_0x275_275::Sodlca_offtelltaleType_MIN;
const Sod_0x275_275_Sodlca_offtelltaleType Sod_0x275_275::Sodlca_offtelltaleType_MAX;
const int Sod_0x275_275::Sodlca_offtelltaleType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_doa_warningreqrightfrontType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[391];
}
bool Sod_0x275_275_Sod_doa_warningreqrightfrontType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_0x275_275_Sod_doa_warningreqrightfrontType Sod_0x275_275::SOD_DOA_WARNINGREQRIGHTFRONT_NO_WARNING;
const Sod_0x275_275_Sod_doa_warningreqrightfrontType Sod_0x275_275::SOD_DOA_WARNINGREQRIGHTFRONT_WARNING_LEVEL_1;
const Sod_0x275_275_Sod_doa_warningreqrightfrontType Sod_0x275_275::SOD_DOA_WARNINGREQRIGHTFRONT_WARNING_LEVEL_2;
const Sod_0x275_275_Sod_doa_warningreqrightfrontType Sod_0x275_275::SOD_DOA_WARNINGREQRIGHTFRONT_RESERVED;
const Sod_0x275_275_Sod_doa_warningreqrightfrontType Sod_0x275_275::Sod_doa_warningreqrightfrontType_MIN;
const Sod_0x275_275_Sod_doa_warningreqrightfrontType Sod_0x275_275::Sod_doa_warningreqrightfrontType_MAX;
const int Sod_0x275_275::Sod_doa_warningreqrightfrontType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_cta_warningreqrightType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[392];
}
bool Sod_0x275_275_Sod_cta_warningreqrightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_0x275_275_Sod_cta_warningreqrightType Sod_0x275_275::SOD_CTA_WARNINGREQRIGHT_NO_WARNING;
const Sod_0x275_275_Sod_cta_warningreqrightType Sod_0x275_275::SOD_CTA_WARNINGREQRIGHT_RESERVED;
const Sod_0x275_275_Sod_cta_warningreqrightType Sod_0x275_275::SOD_CTA_WARNINGREQRIGHT_WARNING_LEVEL_2;
const Sod_0x275_275_Sod_cta_warningreqrightType Sod_0x275_275::Sod_cta_warningreqrightType_MIN;
const Sod_0x275_275_Sod_cta_warningreqrightType Sod_0x275_275::Sod_cta_warningreqrightType_MAX;
const int Sod_0x275_275::Sod_cta_warningreqrightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Sod_0x275_275_Sod_autoalignmentflagType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[393];
}
bool Sod_0x275_275_Sod_autoalignmentflagType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Sod_0x275_275_Sod_autoalignmentflagType Sod_0x275_275::SOD_AUTOALIGNMENTFLAG_NO_SUCCESS;
const Sod_0x275_275_Sod_autoalignmentflagType Sod_0x275_275::SOD_AUTOALIGNMENTFLAG_SUCCESSFUL;
const Sod_0x275_275_Sod_autoalignmentflagType Sod_0x275_275::SOD_AUTOALIGNMENTFLAG_RESERVED;
const Sod_0x275_275_Sod_autoalignmentflagType Sod_0x275_275::Sod_autoalignmentflagType_MIN;
const Sod_0x275_275_Sod_autoalignmentflagType Sod_0x275_275::Sod_autoalignmentflagType_MAX;
const int Sod_0x275_275::Sod_autoalignmentflagType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[394];
}
bool Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_LF_PRESSURE_WARNING_NO_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_LF_PRESSURE_WARNING_HIGH_PRESSURE_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_LF_PRESSURE_WARNING_LOW_PRESSURE_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_LF_PRESSURE_WARNING_QUIK_LEAKAGE_RESERVED;
const Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_LF_PRESSURE_WARNING_LOST_SENSOR;
const Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_LF_PRESSURE_WARNING_SENSOR_BATTERY_LOW;
const Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_LF_PRESSURE_WARNING_SENSOR_FAULTURE_RESERVED;
const Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_LF_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED;
const Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType Gw_tpms_tire_0x361_361::Tpms_lf_pressure_warningType_MIN;
const Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType Gw_tpms_tire_0x361_361::Tpms_lf_pressure_warningType_MAX;
const int Gw_tpms_tire_0x361_361::Tpms_lf_pressure_warningType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[395];
}
bool Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_RF_PRESSURE_WARNING_NO_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_RF_PRESSURE_WARNING_HIGH_PRESSURE_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_RF_PRESSURE_WARNING_LOW_PRESSURE_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_RF_PRESSURE_WARNING_QUIK_LEAKAGE_RESERVED;
const Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_RF_PRESSURE_WARNING_LOST_SENSOR;
const Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_RF_PRESSURE_WARNING_SENSOR_BATTERY_LOW;
const Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_RF_PRESSURE_WARNING_SENSOR_FAULTURE_RESERVED;
const Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_RF_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED;
const Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType Gw_tpms_tire_0x361_361::Tpms_rf_pressure_warningType_MIN;
const Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType Gw_tpms_tire_0x361_361::Tpms_rf_pressure_warningType_MAX;
const int Gw_tpms_tire_0x361_361::Tpms_rf_pressure_warningType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_system_statusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[396];
}
bool Gw_tpms_tire_0x361_361_Tpms_system_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tpms_tire_0x361_361_Tpms_system_statusType Gw_tpms_tire_0x361_361::TPMS_SYSTEM_STATUS_NO_ANY_ERROR;
const Gw_tpms_tire_0x361_361_Tpms_system_statusType Gw_tpms_tire_0x361_361::TPMS_SYSTEM_STATUS_SYSTEM_ERROR;
const Gw_tpms_tire_0x361_361_Tpms_system_statusType Gw_tpms_tire_0x361_361::TPMS_SYSTEM_STATUS_SYETEM_WAIT_FOR_LEARNING;
const Gw_tpms_tire_0x361_361_Tpms_system_statusType Gw_tpms_tire_0x361_361::TPMS_SYSTEM_STATUS_WINTER_MODE;
const Gw_tpms_tire_0x361_361_Tpms_system_statusType Gw_tpms_tire_0x361_361::Tpms_system_statusType_MIN;
const Gw_tpms_tire_0x361_361_Tpms_system_statusType Gw_tpms_tire_0x361_361::Tpms_system_statusType_MAX;
const int Gw_tpms_tire_0x361_361::Tpms_system_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[397];
}
bool Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_RR_PRESSURE_WARNING_NO_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_RR_PRESSURE_WARNING_HIGH_PRESSURE_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_RR_PRESSURE_WARNING_LOW_PRESSURE_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_RR_PRESSURE_WARNING_QUIK_LEAKAGE_RESERVED;
const Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_RR_PRESSURE_WARNING_LOST_SENSOR;
const Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_RR_PRESSURE_WARNING_SENSOR_BATTERY_LOW;
const Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_RR_PRESSURE_WARNING_SENSOR_FAULTURE_RESERVED;
const Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_RR_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED;
const Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType Gw_tpms_tire_0x361_361::Tpms_rr_pressure_warningType_MIN;
const Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType Gw_tpms_tire_0x361_361::Tpms_rr_pressure_warningType_MAX;
const int Gw_tpms_tire_0x361_361::Tpms_rr_pressure_warningType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[398];
}
bool Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_LR_PRESSURE_WARNING_NO_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_LR_PRESSURE_WARNING_HIGH_PRESSURE_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_LR_PRESSURE_WARNING_LOW_PRESSURE_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_LR_PRESSURE_WARNING_QUIK_LEAKAGE_RESERVED;
const Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_LR_PRESSURE_WARNING_LOST_SENSOR;
const Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_LR_PRESSURE_WARNING_SENSOR_BATTERY_LOW;
const Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_LR_PRESSURE_WARNING_SENSOR_FAULTURE_RESERVED;
const Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType Gw_tpms_tire_0x361_361::TPMS_LR_PRESSURE_WARNING_LOW_PRESSURE_WARN_QUIK_LEAK_RESERVED;
const Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType Gw_tpms_tire_0x361_361::Tpms_lr_pressure_warningType_MIN;
const Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType Gw_tpms_tire_0x361_361::Tpms_lr_pressure_warningType_MAX;
const int Gw_tpms_tire_0x361_361::Tpms_lr_pressure_warningType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[399];
}
bool Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tpms_tire_0x361_361_Tpms_temperature_warningType Gw_tpms_tire_0x361_361::TPMS_TEMPERATURE_WARNING_NO_TEMPERATURE_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_temperature_warningType Gw_tpms_tire_0x361_361::TPMS_TEMPERATURE_WARNING_TEMPERATURE_WARNING;
const Gw_tpms_tire_0x361_361_Tpms_temperature_warningType Gw_tpms_tire_0x361_361::Tpms_temperature_warningType_MIN;
const Gw_tpms_tire_0x361_361_Tpms_temperature_warningType Gw_tpms_tire_0x361_361::Tpms_temperature_warningType_MAX;
const int Gw_tpms_tire_0x361_361::Tpms_temperature_warningType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_resrvedType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[400];
}
bool Gw_tpms_tire_0x361_361_Tpms_resrvedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tpms_tire_0x361_361_Tpms_resrvedType Gw_tpms_tire_0x361_361::TPMS_RESRVED_RESERVED;
const Gw_tpms_tire_0x361_361_Tpms_resrvedType Gw_tpms_tire_0x361_361::TPMS_RESRVED_RESERVED1;
const Gw_tpms_tire_0x361_361_Tpms_resrvedType Gw_tpms_tire_0x361_361::Tpms_resrvedType_MIN;
const Gw_tpms_tire_0x361_361_Tpms_resrvedType Gw_tpms_tire_0x361_361::Tpms_resrvedType_MAX;
const int Gw_tpms_tire_0x361_361::Tpms_resrvedType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tire_positionType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[401];
}
bool Gw_tpms_tire_0x361_361_Tire_positionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tpms_tire_0x361_361_Tire_positionType Gw_tpms_tire_0x361_361::TIRE_POSITION_NO_ANY_SENSOR_ERROR;
const Gw_tpms_tire_0x361_361_Tire_positionType Gw_tpms_tire_0x361_361::TIRE_POSITION_LEFT_FRONT_TIRE;
const Gw_tpms_tire_0x361_361_Tire_positionType Gw_tpms_tire_0x361_361::TIRE_POSITION_RIGHT_FRONT_TIRE;
const Gw_tpms_tire_0x361_361_Tire_positionType Gw_tpms_tire_0x361_361::TIRE_POSITION_RIGHT_REAR_TIRE;
const Gw_tpms_tire_0x361_361_Tire_positionType Gw_tpms_tire_0x361_361::TIRE_POSITION_LEFT_REAR_TIRE;
const Gw_tpms_tire_0x361_361_Tire_positionType Gw_tpms_tire_0x361_361::TIRE_POSITION_RESERVED;
const Gw_tpms_tire_0x361_361_Tire_positionType Gw_tpms_tire_0x361_361::Tire_positionType_MIN;
const Gw_tpms_tire_0x361_361_Tire_positionType Gw_tpms_tire_0x361_361::Tire_positionType_MAX;
const int Gw_tpms_tire_0x361_361::Tire_positionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[402];
}
bool Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tpms_tire_0x361_361_Tpms_lamp_statusType Gw_tpms_tire_0x361_361::TPMS_LAMP_STATUS_NO_LAMP_LIGHT;
const Gw_tpms_tire_0x361_361_Tpms_lamp_statusType Gw_tpms_tire_0x361_361::TPMS_LAMP_STATUS_LAMP_FLASH;
const Gw_tpms_tire_0x361_361_Tpms_lamp_statusType Gw_tpms_tire_0x361_361::TPMS_LAMP_STATUS_LAMP_LIGHT;
const Gw_tpms_tire_0x361_361_Tpms_lamp_statusType Gw_tpms_tire_0x361_361::TPMS_LAMP_STATUS_RESEVED;
const Gw_tpms_tire_0x361_361_Tpms_lamp_statusType Gw_tpms_tire_0x361_361::Tpms_lamp_statusType_MIN;
const Gw_tpms_tire_0x361_361_Tpms_lamp_statusType Gw_tpms_tire_0x361_361::Tpms_lamp_statusType_MAX;
const int Gw_tpms_tire_0x361_361::Tpms_lamp_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Gw_tpms_tire_0x361_361_Tpms_al_stateType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[403];
}
bool Gw_tpms_tire_0x361_361_Tpms_al_stateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Gw_tpms_tire_0x361_361_Tpms_al_stateType Gw_tpms_tire_0x361_361::TPMS_AL_STATE_DEFAULTS;
const Gw_tpms_tire_0x361_361_Tpms_al_stateType Gw_tpms_tire_0x361_361::TPMS_AL_STATE_SELF_LEARNING;
const Gw_tpms_tire_0x361_361_Tpms_al_stateType Gw_tpms_tire_0x361_361::TPMS_AL_STATE_SELF_LEARNING_OVER;
const Gw_tpms_tire_0x361_361_Tpms_al_stateType Gw_tpms_tire_0x361_361::TPMS_AL_STATE_RESERVE;
const Gw_tpms_tire_0x361_361_Tpms_al_stateType Gw_tpms_tire_0x361_361::Tpms_al_stateType_MIN;
const Gw_tpms_tire_0x361_361_Tpms_al_stateType Gw_tpms_tire_0x361_361::Tpms_al_stateType_MAX;
const int Gw_tpms_tire_0x361_361::Tpms_al_stateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ins_datainfo_506_Ins_car_statusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[404];
}
bool Ins_datainfo_506_Ins_car_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ins_datainfo_506_Ins_car_statusType Ins_datainfo_506::INS_CAR_STATUS_RECEIVEWHEELSPEED;
const Ins_datainfo_506_Ins_car_statusType Ins_datainfo_506::INS_CAR_STATUS_NORECEIVE;
const Ins_datainfo_506_Ins_car_statusType Ins_datainfo_506::Ins_car_statusType_MIN;
const Ins_datainfo_506_Ins_car_statusType Ins_datainfo_506::Ins_car_statusType_MAX;
const int Ins_datainfo_506::Ins_car_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Ins_datainfo_506_Ins_statusType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_enum_descriptors[405];
}
bool Ins_datainfo_506_Ins_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ins_datainfo_506_Ins_statusType Ins_datainfo_506::INS_STATUS_NONE;
const Ins_datainfo_506_Ins_statusType Ins_datainfo_506::INS_STATUS_ATTITUDEINITIALIZATION;
const Ins_datainfo_506_Ins_statusType Ins_datainfo_506::INS_STATUS_NAVIGATION;
const Ins_datainfo_506_Ins_statusType Ins_datainfo_506::Ins_statusType_MIN;
const Ins_datainfo_506_Ins_statusType Ins_datainfo_506::Ins_statusType_MAX;
const int Ins_datainfo_506::Ins_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Abs_whlspd_0x211_211::kAbsWhlspdfrntriFieldNumber;
const int Abs_whlspd_0x211_211::kAbsWhlspdreleFieldNumber;
const int Abs_whlspd_0x211_211::kAbsWhlspdreriFieldNumber;
const int Abs_whlspd_0x211_211::kRollingcounter0X211FieldNumber;
const int Abs_whlspd_0x211_211::kAbsWhlspdreristatusFieldNumber;
const int Abs_whlspd_0x211_211::kAbsWhlspdrelestatusFieldNumber;
const int Abs_whlspd_0x211_211::kAbsWhlspdfrntristatusFieldNumber;
const int Abs_whlspd_0x211_211::kAbsWhlspdfrntlestatusFieldNumber;
const int Abs_whlspd_0x211_211::kChecksum0X211FieldNumber;
const int Abs_whlspd_0x211_211::kAbsWhlspdfrntleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Abs_whlspd_0x211_211::Abs_whlspd_0x211_211()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Abs_whlspd_0x211_211)
}
Abs_whlspd_0x211_211::Abs_whlspd_0x211_211(const Abs_whlspd_0x211_211& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&abs_whlspdfrntri_, &from.abs_whlspdfrntri_,
    reinterpret_cast<char*>(&abs_whlspdfrntle_) -
    reinterpret_cast<char*>(&abs_whlspdfrntri_) + sizeof(abs_whlspdfrntle_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Abs_whlspd_0x211_211)
}

void Abs_whlspd_0x211_211::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&abs_whlspdfrntri_, 0, reinterpret_cast<char*>(&abs_whlspdfrntle_) -
    reinterpret_cast<char*>(&abs_whlspdfrntri_) + sizeof(abs_whlspdfrntle_));
}

Abs_whlspd_0x211_211::~Abs_whlspd_0x211_211() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Abs_whlspd_0x211_211)
  SharedDtor();
}

void Abs_whlspd_0x211_211::SharedDtor() {
}

void Abs_whlspd_0x211_211::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Abs_whlspd_0x211_211::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Abs_whlspd_0x211_211& Abs_whlspd_0x211_211::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Abs_whlspd_0x211_211* Abs_whlspd_0x211_211::New(::google::protobuf::Arena* arena) const {
  Abs_whlspd_0x211_211* n = new Abs_whlspd_0x211_211;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Abs_whlspd_0x211_211::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Abs_whlspd_0x211_211)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&abs_whlspdfrntri_, 0, reinterpret_cast<char*>(&abs_whlspdfrntlestatus_) -
      reinterpret_cast<char*>(&abs_whlspdfrntri_) + sizeof(abs_whlspdfrntlestatus_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&checksum_0x211_, 0, reinterpret_cast<char*>(&abs_whlspdfrntle_) -
      reinterpret_cast<char*>(&checksum_0x211_) + sizeof(abs_whlspdfrntle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Abs_whlspd_0x211_211::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Abs_whlspd_0x211_211)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double abs_whlspdfrntri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_abs_whlspdfrntri();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &abs_whlspdfrntri_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double abs_whlspdrele = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_abs_whlspdrele();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &abs_whlspdrele_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double abs_whlspdreri = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_abs_whlspdreri();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &abs_whlspdreri_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rollingcounter_0x211 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_rollingcounter_0x211();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rollingcounter_0x211_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdreristatusType abs_whlspdreristatus = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdreristatusType_IsValid(value)) {
            set_abs_whlspdreristatus(static_cast< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdreristatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdrelestatusType abs_whlspdrelestatus = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_IsValid(value)) {
            set_abs_whlspdrelestatus(static_cast< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdrelestatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdfrntristatusType abs_whlspdfrntristatus = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_IsValid(value)) {
            set_abs_whlspdfrntristatus(static_cast< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdfrntlestatusType abs_whlspdfrntlestatus = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_IsValid(value)) {
            set_abs_whlspdfrntlestatus(static_cast< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x211 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_checksum_0x211();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x211_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double abs_whlspdfrntle = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_abs_whlspdfrntle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &abs_whlspdfrntle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Abs_whlspd_0x211_211)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Abs_whlspd_0x211_211)
  return false;
#undef DO_
}

void Abs_whlspd_0x211_211::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Abs_whlspd_0x211_211)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double abs_whlspdfrntri = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->abs_whlspdfrntri(), output);
  }

  // optional double abs_whlspdrele = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->abs_whlspdrele(), output);
  }

  // optional double abs_whlspdreri = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->abs_whlspdreri(), output);
  }

  // optional int32 rollingcounter_0x211 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rollingcounter_0x211(), output);
  }

  // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdreristatusType abs_whlspdreristatus = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->abs_whlspdreristatus(), output);
  }

  // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdrelestatusType abs_whlspdrelestatus = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->abs_whlspdrelestatus(), output);
  }

  // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdfrntristatusType abs_whlspdfrntristatus = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->abs_whlspdfrntristatus(), output);
  }

  // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdfrntlestatusType abs_whlspdfrntlestatus = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->abs_whlspdfrntlestatus(), output);
  }

  // optional int32 checksum_0x211 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->checksum_0x211(), output);
  }

  // optional double abs_whlspdfrntle = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->abs_whlspdfrntle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Abs_whlspd_0x211_211)
}

::google::protobuf::uint8* Abs_whlspd_0x211_211::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Abs_whlspd_0x211_211)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double abs_whlspdfrntri = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->abs_whlspdfrntri(), target);
  }

  // optional double abs_whlspdrele = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->abs_whlspdrele(), target);
  }

  // optional double abs_whlspdreri = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->abs_whlspdreri(), target);
  }

  // optional int32 rollingcounter_0x211 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rollingcounter_0x211(), target);
  }

  // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdreristatusType abs_whlspdreristatus = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->abs_whlspdreristatus(), target);
  }

  // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdrelestatusType abs_whlspdrelestatus = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->abs_whlspdrelestatus(), target);
  }

  // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdfrntristatusType abs_whlspdfrntristatus = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->abs_whlspdfrntristatus(), target);
  }

  // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdfrntlestatusType abs_whlspdfrntlestatus = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->abs_whlspdfrntlestatus(), target);
  }

  // optional int32 checksum_0x211 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->checksum_0x211(), target);
  }

  // optional double abs_whlspdfrntle = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->abs_whlspdfrntle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Abs_whlspd_0x211_211)
  return target;
}

size_t Abs_whlspd_0x211_211::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Abs_whlspd_0x211_211)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double abs_whlspdfrntri = 1;
    if (has_abs_whlspdfrntri()) {
      total_size += 1 + 8;
    }

    // optional double abs_whlspdrele = 2;
    if (has_abs_whlspdrele()) {
      total_size += 1 + 8;
    }

    // optional double abs_whlspdreri = 3;
    if (has_abs_whlspdreri()) {
      total_size += 1 + 8;
    }

    // optional int32 rollingcounter_0x211 = 4;
    if (has_rollingcounter_0x211()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rollingcounter_0x211());
    }

    // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdreristatusType abs_whlspdreristatus = 5;
    if (has_abs_whlspdreristatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->abs_whlspdreristatus());
    }

    // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdrelestatusType abs_whlspdrelestatus = 6;
    if (has_abs_whlspdrelestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->abs_whlspdrelestatus());
    }

    // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdfrntristatusType abs_whlspdfrntristatus = 7;
    if (has_abs_whlspdfrntristatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->abs_whlspdfrntristatus());
    }

    // optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdfrntlestatusType abs_whlspdfrntlestatus = 8;
    if (has_abs_whlspdfrntlestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->abs_whlspdfrntlestatus());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 checksum_0x211 = 9;
    if (has_checksum_0x211()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x211());
    }

    // optional double abs_whlspdfrntle = 10;
    if (has_abs_whlspdfrntle()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Abs_whlspd_0x211_211::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Abs_whlspd_0x211_211)
  GOOGLE_DCHECK_NE(&from, this);
  const Abs_whlspd_0x211_211* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Abs_whlspd_0x211_211>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Abs_whlspd_0x211_211)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Abs_whlspd_0x211_211)
    MergeFrom(*source);
  }
}

void Abs_whlspd_0x211_211::MergeFrom(const Abs_whlspd_0x211_211& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Abs_whlspd_0x211_211)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      abs_whlspdfrntri_ = from.abs_whlspdfrntri_;
    }
    if (cached_has_bits & 0x00000002u) {
      abs_whlspdrele_ = from.abs_whlspdrele_;
    }
    if (cached_has_bits & 0x00000004u) {
      abs_whlspdreri_ = from.abs_whlspdreri_;
    }
    if (cached_has_bits & 0x00000008u) {
      rollingcounter_0x211_ = from.rollingcounter_0x211_;
    }
    if (cached_has_bits & 0x00000010u) {
      abs_whlspdreristatus_ = from.abs_whlspdreristatus_;
    }
    if (cached_has_bits & 0x00000020u) {
      abs_whlspdrelestatus_ = from.abs_whlspdrelestatus_;
    }
    if (cached_has_bits & 0x00000040u) {
      abs_whlspdfrntristatus_ = from.abs_whlspdfrntristatus_;
    }
    if (cached_has_bits & 0x00000080u) {
      abs_whlspdfrntlestatus_ = from.abs_whlspdfrntlestatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      checksum_0x211_ = from.checksum_0x211_;
    }
    if (cached_has_bits & 0x00000200u) {
      abs_whlspdfrntle_ = from.abs_whlspdfrntle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Abs_whlspd_0x211_211::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Abs_whlspd_0x211_211)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Abs_whlspd_0x211_211::CopyFrom(const Abs_whlspd_0x211_211& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Abs_whlspd_0x211_211)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Abs_whlspd_0x211_211::IsInitialized() const {
  return true;
}

void Abs_whlspd_0x211_211::Swap(Abs_whlspd_0x211_211* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Abs_whlspd_0x211_211::InternalSwap(Abs_whlspd_0x211_211* other) {
  std::swap(abs_whlspdfrntri_, other->abs_whlspdfrntri_);
  std::swap(abs_whlspdrele_, other->abs_whlspdrele_);
  std::swap(abs_whlspdreri_, other->abs_whlspdreri_);
  std::swap(rollingcounter_0x211_, other->rollingcounter_0x211_);
  std::swap(abs_whlspdreristatus_, other->abs_whlspdreristatus_);
  std::swap(abs_whlspdrelestatus_, other->abs_whlspdrelestatus_);
  std::swap(abs_whlspdfrntristatus_, other->abs_whlspdfrntristatus_);
  std::swap(abs_whlspdfrntlestatus_, other->abs_whlspdfrntlestatus_);
  std::swap(checksum_0x211_, other->checksum_0x211_);
  std::swap(abs_whlspdfrntle_, other->abs_whlspdfrntle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Abs_whlspd_0x211_211::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Abs_whlspd_0x211_211

// optional double abs_whlspdfrntri = 1;
bool Abs_whlspd_0x211_211::has_abs_whlspdfrntri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Abs_whlspd_0x211_211::set_has_abs_whlspdfrntri() {
  _has_bits_[0] |= 0x00000001u;
}
void Abs_whlspd_0x211_211::clear_has_abs_whlspdfrntri() {
  _has_bits_[0] &= ~0x00000001u;
}
void Abs_whlspd_0x211_211::clear_abs_whlspdfrntri() {
  abs_whlspdfrntri_ = 0;
  clear_has_abs_whlspdfrntri();
}
double Abs_whlspd_0x211_211::abs_whlspdfrntri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdfrntri)
  return abs_whlspdfrntri_;
}
void Abs_whlspd_0x211_211::set_abs_whlspdfrntri(double value) {
  set_has_abs_whlspdfrntri();
  abs_whlspdfrntri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdfrntri)
}

// optional double abs_whlspdrele = 2;
bool Abs_whlspd_0x211_211::has_abs_whlspdrele() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Abs_whlspd_0x211_211::set_has_abs_whlspdrele() {
  _has_bits_[0] |= 0x00000002u;
}
void Abs_whlspd_0x211_211::clear_has_abs_whlspdrele() {
  _has_bits_[0] &= ~0x00000002u;
}
void Abs_whlspd_0x211_211::clear_abs_whlspdrele() {
  abs_whlspdrele_ = 0;
  clear_has_abs_whlspdrele();
}
double Abs_whlspd_0x211_211::abs_whlspdrele() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdrele)
  return abs_whlspdrele_;
}
void Abs_whlspd_0x211_211::set_abs_whlspdrele(double value) {
  set_has_abs_whlspdrele();
  abs_whlspdrele_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdrele)
}

// optional double abs_whlspdreri = 3;
bool Abs_whlspd_0x211_211::has_abs_whlspdreri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Abs_whlspd_0x211_211::set_has_abs_whlspdreri() {
  _has_bits_[0] |= 0x00000004u;
}
void Abs_whlspd_0x211_211::clear_has_abs_whlspdreri() {
  _has_bits_[0] &= ~0x00000004u;
}
void Abs_whlspd_0x211_211::clear_abs_whlspdreri() {
  abs_whlspdreri_ = 0;
  clear_has_abs_whlspdreri();
}
double Abs_whlspd_0x211_211::abs_whlspdreri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdreri)
  return abs_whlspdreri_;
}
void Abs_whlspd_0x211_211::set_abs_whlspdreri(double value) {
  set_has_abs_whlspdreri();
  abs_whlspdreri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdreri)
}

// optional int32 rollingcounter_0x211 = 4;
bool Abs_whlspd_0x211_211::has_rollingcounter_0x211() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Abs_whlspd_0x211_211::set_has_rollingcounter_0x211() {
  _has_bits_[0] |= 0x00000008u;
}
void Abs_whlspd_0x211_211::clear_has_rollingcounter_0x211() {
  _has_bits_[0] &= ~0x00000008u;
}
void Abs_whlspd_0x211_211::clear_rollingcounter_0x211() {
  rollingcounter_0x211_ = 0;
  clear_has_rollingcounter_0x211();
}
::google::protobuf::int32 Abs_whlspd_0x211_211::rollingcounter_0x211() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.rollingcounter_0x211)
  return rollingcounter_0x211_;
}
void Abs_whlspd_0x211_211::set_rollingcounter_0x211(::google::protobuf::int32 value) {
  set_has_rollingcounter_0x211();
  rollingcounter_0x211_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.rollingcounter_0x211)
}

// optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdreristatusType abs_whlspdreristatus = 5;
bool Abs_whlspd_0x211_211::has_abs_whlspdreristatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Abs_whlspd_0x211_211::set_has_abs_whlspdreristatus() {
  _has_bits_[0] |= 0x00000010u;
}
void Abs_whlspd_0x211_211::clear_has_abs_whlspdreristatus() {
  _has_bits_[0] &= ~0x00000010u;
}
void Abs_whlspd_0x211_211::clear_abs_whlspdreristatus() {
  abs_whlspdreristatus_ = 0;
  clear_has_abs_whlspdreristatus();
}
::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdreristatusType Abs_whlspd_0x211_211::abs_whlspdreristatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdreristatus)
  return static_cast< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdreristatusType >(abs_whlspdreristatus_);
}
void Abs_whlspd_0x211_211::set_abs_whlspdreristatus(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdreristatusType value) {
  assert(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdreristatusType_IsValid(value));
  set_has_abs_whlspdreristatus();
  abs_whlspdreristatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdreristatus)
}

// optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdrelestatusType abs_whlspdrelestatus = 6;
bool Abs_whlspd_0x211_211::has_abs_whlspdrelestatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Abs_whlspd_0x211_211::set_has_abs_whlspdrelestatus() {
  _has_bits_[0] |= 0x00000020u;
}
void Abs_whlspd_0x211_211::clear_has_abs_whlspdrelestatus() {
  _has_bits_[0] &= ~0x00000020u;
}
void Abs_whlspd_0x211_211::clear_abs_whlspdrelestatus() {
  abs_whlspdrelestatus_ = 0;
  clear_has_abs_whlspdrelestatus();
}
::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdrelestatusType Abs_whlspd_0x211_211::abs_whlspdrelestatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdrelestatus)
  return static_cast< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdrelestatusType >(abs_whlspdrelestatus_);
}
void Abs_whlspd_0x211_211::set_abs_whlspdrelestatus(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdrelestatusType value) {
  assert(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdrelestatusType_IsValid(value));
  set_has_abs_whlspdrelestatus();
  abs_whlspdrelestatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdrelestatus)
}

// optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdfrntristatusType abs_whlspdfrntristatus = 7;
bool Abs_whlspd_0x211_211::has_abs_whlspdfrntristatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Abs_whlspd_0x211_211::set_has_abs_whlspdfrntristatus() {
  _has_bits_[0] |= 0x00000040u;
}
void Abs_whlspd_0x211_211::clear_has_abs_whlspdfrntristatus() {
  _has_bits_[0] &= ~0x00000040u;
}
void Abs_whlspd_0x211_211::clear_abs_whlspdfrntristatus() {
  abs_whlspdfrntristatus_ = 0;
  clear_has_abs_whlspdfrntristatus();
}
::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType Abs_whlspd_0x211_211::abs_whlspdfrntristatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdfrntristatus)
  return static_cast< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType >(abs_whlspdfrntristatus_);
}
void Abs_whlspd_0x211_211::set_abs_whlspdfrntristatus(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType value) {
  assert(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntristatusType_IsValid(value));
  set_has_abs_whlspdfrntristatus();
  abs_whlspdfrntristatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdfrntristatus)
}

// optional .jmc_auto.canbus.Abs_whlspd_0x211_211.Abs_whlspdfrntlestatusType abs_whlspdfrntlestatus = 8;
bool Abs_whlspd_0x211_211::has_abs_whlspdfrntlestatus() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Abs_whlspd_0x211_211::set_has_abs_whlspdfrntlestatus() {
  _has_bits_[0] |= 0x00000080u;
}
void Abs_whlspd_0x211_211::clear_has_abs_whlspdfrntlestatus() {
  _has_bits_[0] &= ~0x00000080u;
}
void Abs_whlspd_0x211_211::clear_abs_whlspdfrntlestatus() {
  abs_whlspdfrntlestatus_ = 0;
  clear_has_abs_whlspdfrntlestatus();
}
::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType Abs_whlspd_0x211_211::abs_whlspdfrntlestatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdfrntlestatus)
  return static_cast< ::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType >(abs_whlspdfrntlestatus_);
}
void Abs_whlspd_0x211_211::set_abs_whlspdfrntlestatus(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType value) {
  assert(::jmc_auto::canbus::Abs_whlspd_0x211_211_Abs_whlspdfrntlestatusType_IsValid(value));
  set_has_abs_whlspdfrntlestatus();
  abs_whlspdfrntlestatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdfrntlestatus)
}

// optional int32 checksum_0x211 = 9;
bool Abs_whlspd_0x211_211::has_checksum_0x211() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Abs_whlspd_0x211_211::set_has_checksum_0x211() {
  _has_bits_[0] |= 0x00000100u;
}
void Abs_whlspd_0x211_211::clear_has_checksum_0x211() {
  _has_bits_[0] &= ~0x00000100u;
}
void Abs_whlspd_0x211_211::clear_checksum_0x211() {
  checksum_0x211_ = 0;
  clear_has_checksum_0x211();
}
::google::protobuf::int32 Abs_whlspd_0x211_211::checksum_0x211() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.checksum_0x211)
  return checksum_0x211_;
}
void Abs_whlspd_0x211_211::set_checksum_0x211(::google::protobuf::int32 value) {
  set_has_checksum_0x211();
  checksum_0x211_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.checksum_0x211)
}

// optional double abs_whlspdfrntle = 10;
bool Abs_whlspd_0x211_211::has_abs_whlspdfrntle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Abs_whlspd_0x211_211::set_has_abs_whlspdfrntle() {
  _has_bits_[0] |= 0x00000200u;
}
void Abs_whlspd_0x211_211::clear_has_abs_whlspdfrntle() {
  _has_bits_[0] &= ~0x00000200u;
}
void Abs_whlspd_0x211_211::clear_abs_whlspdfrntle() {
  abs_whlspdfrntle_ = 0;
  clear_has_abs_whlspdfrntle();
}
double Abs_whlspd_0x211_211::abs_whlspdfrntle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdfrntle)
  return abs_whlspdfrntle_;
}
void Abs_whlspd_0x211_211::set_abs_whlspdfrntle(double value) {
  set_has_abs_whlspdfrntle();
  abs_whlspdfrntle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_whlspd_0x211_211.abs_whlspdfrntle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gw_ems_sts_0x151_151::kEmsEngbarometricpressureFieldNumber;
const int Gw_ems_sts_0x151_151::kEmsVacuumpressureFieldNumber;
const int Gw_ems_sts_0x151_151::kEmsTargcruisespeedFieldNumber;
const int Gw_ems_sts_0x151_151::kEmsAtsdrivingmodestatusFieldNumber;
const int Gw_ems_sts_0x151_151::kEmsEnginestopstartstatusFieldNumber;
const int Gw_ems_sts_0x151_151::kDcmEmsRollingcounter0X151FieldNumber;
const int Gw_ems_sts_0x151_151::kEmsCruisecontrolstatusFieldNumber;
const int Gw_ems_sts_0x151_151::kEmsDrivingmodechangeFaultFlagFieldNumber;
const int Gw_ems_sts_0x151_151::kDcmEmsChecksum0X151FieldNumber;
const int Gw_ems_sts_0x151_151::kEmsEngofftimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gw_ems_sts_0x151_151::Gw_ems_sts_0x151_151()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gw_ems_sts_0x151_151)
}
Gw_ems_sts_0x151_151::Gw_ems_sts_0x151_151(const Gw_ems_sts_0x151_151& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ems_vacuumpressure_, &from.ems_vacuumpressure_,
    reinterpret_cast<char*>(&ems_engofftime_) -
    reinterpret_cast<char*>(&ems_vacuumpressure_) + sizeof(ems_engofftime_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gw_ems_sts_0x151_151)
}

void Gw_ems_sts_0x151_151::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ems_vacuumpressure_, 0, reinterpret_cast<char*>(&ems_engofftime_) -
    reinterpret_cast<char*>(&ems_vacuumpressure_) + sizeof(ems_engofftime_));
}

Gw_ems_sts_0x151_151::~Gw_ems_sts_0x151_151() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gw_ems_sts_0x151_151)
  SharedDtor();
}

void Gw_ems_sts_0x151_151::SharedDtor() {
}

void Gw_ems_sts_0x151_151::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gw_ems_sts_0x151_151::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gw_ems_sts_0x151_151& Gw_ems_sts_0x151_151::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gw_ems_sts_0x151_151* Gw_ems_sts_0x151_151::New(::google::protobuf::Arena* arena) const {
  Gw_ems_sts_0x151_151* n = new Gw_ems_sts_0x151_151;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gw_ems_sts_0x151_151::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gw_ems_sts_0x151_151)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&ems_vacuumpressure_, 0, reinterpret_cast<char*>(&ems_drivingmodechange_fault_flag_) -
      reinterpret_cast<char*>(&ems_vacuumpressure_) + sizeof(ems_drivingmodechange_fault_flag_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&dcm_ems_checksum_0x151_, 0, reinterpret_cast<char*>(&ems_engofftime_) -
      reinterpret_cast<char*>(&dcm_ems_checksum_0x151_) + sizeof(ems_engofftime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gw_ems_sts_0x151_151::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gw_ems_sts_0x151_151)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ems_engbarometricpressure = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ems_engbarometricpressure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ems_engbarometricpressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ems_vacuumpressure = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_ems_vacuumpressure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ems_vacuumpressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ems_targcruisespeed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_ems_targcruisespeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ems_targcruisespeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_atsdrivingmodestatusType ems_atsdrivingmodestatus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_IsValid(value)) {
            set_ems_atsdrivingmodestatus(static_cast< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_enginestopstartstatusType ems_enginestopstartstatus = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_IsValid(value)) {
            set_ems_enginestopstartstatus(static_cast< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dcm_ems_rollingcounter_0x151 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_dcm_ems_rollingcounter_0x151();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dcm_ems_rollingcounter_0x151_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_cruisecontrolstatusType ems_cruisecontrolstatus = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_IsValid(value)) {
            set_ems_cruisecontrolstatus(static_cast< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_drivingmodechange_fault_flagType ems_drivingmodechange_fault_flag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_IsValid(value)) {
            set_ems_drivingmodechange_fault_flag(static_cast< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dcm_ems_checksum_0x151 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_dcm_ems_checksum_0x151();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dcm_ems_checksum_0x151_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ems_engofftime = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_ems_engofftime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ems_engofftime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gw_ems_sts_0x151_151)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gw_ems_sts_0x151_151)
  return false;
#undef DO_
}

void Gw_ems_sts_0x151_151::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gw_ems_sts_0x151_151)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ems_engbarometricpressure = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ems_engbarometricpressure(), output);
  }

  // optional double ems_vacuumpressure = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ems_vacuumpressure(), output);
  }

  // optional double ems_targcruisespeed = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ems_targcruisespeed(), output);
  }

  // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_atsdrivingmodestatusType ems_atsdrivingmodestatus = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ems_atsdrivingmodestatus(), output);
  }

  // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_enginestopstartstatusType ems_enginestopstartstatus = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ems_enginestopstartstatus(), output);
  }

  // optional int32 dcm_ems_rollingcounter_0x151 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dcm_ems_rollingcounter_0x151(), output);
  }

  // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_cruisecontrolstatusType ems_cruisecontrolstatus = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->ems_cruisecontrolstatus(), output);
  }

  // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_drivingmodechange_fault_flagType ems_drivingmodechange_fault_flag = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->ems_drivingmodechange_fault_flag(), output);
  }

  // optional int32 dcm_ems_checksum_0x151 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dcm_ems_checksum_0x151(), output);
  }

  // optional int32 ems_engofftime = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ems_engofftime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gw_ems_sts_0x151_151)
}

::google::protobuf::uint8* Gw_ems_sts_0x151_151::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gw_ems_sts_0x151_151)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ems_engbarometricpressure = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ems_engbarometricpressure(), target);
  }

  // optional double ems_vacuumpressure = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ems_vacuumpressure(), target);
  }

  // optional double ems_targcruisespeed = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ems_targcruisespeed(), target);
  }

  // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_atsdrivingmodestatusType ems_atsdrivingmodestatus = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ems_atsdrivingmodestatus(), target);
  }

  // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_enginestopstartstatusType ems_enginestopstartstatus = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ems_enginestopstartstatus(), target);
  }

  // optional int32 dcm_ems_rollingcounter_0x151 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dcm_ems_rollingcounter_0x151(), target);
  }

  // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_cruisecontrolstatusType ems_cruisecontrolstatus = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->ems_cruisecontrolstatus(), target);
  }

  // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_drivingmodechange_fault_flagType ems_drivingmodechange_fault_flag = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->ems_drivingmodechange_fault_flag(), target);
  }

  // optional int32 dcm_ems_checksum_0x151 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dcm_ems_checksum_0x151(), target);
  }

  // optional int32 ems_engofftime = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ems_engofftime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gw_ems_sts_0x151_151)
  return target;
}

size_t Gw_ems_sts_0x151_151::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gw_ems_sts_0x151_151)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double ems_vacuumpressure = 2;
    if (has_ems_vacuumpressure()) {
      total_size += 1 + 8;
    }

    // optional int32 ems_engbarometricpressure = 1;
    if (has_ems_engbarometricpressure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ems_engbarometricpressure());
    }

    // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_atsdrivingmodestatusType ems_atsdrivingmodestatus = 4;
    if (has_ems_atsdrivingmodestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ems_atsdrivingmodestatus());
    }

    // optional double ems_targcruisespeed = 3;
    if (has_ems_targcruisespeed()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_enginestopstartstatusType ems_enginestopstartstatus = 5;
    if (has_ems_enginestopstartstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ems_enginestopstartstatus());
    }

    // optional int32 dcm_ems_rollingcounter_0x151 = 6;
    if (has_dcm_ems_rollingcounter_0x151()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dcm_ems_rollingcounter_0x151());
    }

    // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_cruisecontrolstatusType ems_cruisecontrolstatus = 7;
    if (has_ems_cruisecontrolstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ems_cruisecontrolstatus());
    }

    // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_drivingmodechange_fault_flagType ems_drivingmodechange_fault_flag = 8;
    if (has_ems_drivingmodechange_fault_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ems_drivingmodechange_fault_flag());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 dcm_ems_checksum_0x151 = 9;
    if (has_dcm_ems_checksum_0x151()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dcm_ems_checksum_0x151());
    }

    // optional int32 ems_engofftime = 10;
    if (has_ems_engofftime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ems_engofftime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gw_ems_sts_0x151_151::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gw_ems_sts_0x151_151)
  GOOGLE_DCHECK_NE(&from, this);
  const Gw_ems_sts_0x151_151* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gw_ems_sts_0x151_151>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gw_ems_sts_0x151_151)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gw_ems_sts_0x151_151)
    MergeFrom(*source);
  }
}

void Gw_ems_sts_0x151_151::MergeFrom(const Gw_ems_sts_0x151_151& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gw_ems_sts_0x151_151)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      ems_vacuumpressure_ = from.ems_vacuumpressure_;
    }
    if (cached_has_bits & 0x00000002u) {
      ems_engbarometricpressure_ = from.ems_engbarometricpressure_;
    }
    if (cached_has_bits & 0x00000004u) {
      ems_atsdrivingmodestatus_ = from.ems_atsdrivingmodestatus_;
    }
    if (cached_has_bits & 0x00000008u) {
      ems_targcruisespeed_ = from.ems_targcruisespeed_;
    }
    if (cached_has_bits & 0x00000010u) {
      ems_enginestopstartstatus_ = from.ems_enginestopstartstatus_;
    }
    if (cached_has_bits & 0x00000020u) {
      dcm_ems_rollingcounter_0x151_ = from.dcm_ems_rollingcounter_0x151_;
    }
    if (cached_has_bits & 0x00000040u) {
      ems_cruisecontrolstatus_ = from.ems_cruisecontrolstatus_;
    }
    if (cached_has_bits & 0x00000080u) {
      ems_drivingmodechange_fault_flag_ = from.ems_drivingmodechange_fault_flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      dcm_ems_checksum_0x151_ = from.dcm_ems_checksum_0x151_;
    }
    if (cached_has_bits & 0x00000200u) {
      ems_engofftime_ = from.ems_engofftime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gw_ems_sts_0x151_151::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gw_ems_sts_0x151_151)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gw_ems_sts_0x151_151::CopyFrom(const Gw_ems_sts_0x151_151& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gw_ems_sts_0x151_151)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gw_ems_sts_0x151_151::IsInitialized() const {
  return true;
}

void Gw_ems_sts_0x151_151::Swap(Gw_ems_sts_0x151_151* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gw_ems_sts_0x151_151::InternalSwap(Gw_ems_sts_0x151_151* other) {
  std::swap(ems_vacuumpressure_, other->ems_vacuumpressure_);
  std::swap(ems_engbarometricpressure_, other->ems_engbarometricpressure_);
  std::swap(ems_atsdrivingmodestatus_, other->ems_atsdrivingmodestatus_);
  std::swap(ems_targcruisespeed_, other->ems_targcruisespeed_);
  std::swap(ems_enginestopstartstatus_, other->ems_enginestopstartstatus_);
  std::swap(dcm_ems_rollingcounter_0x151_, other->dcm_ems_rollingcounter_0x151_);
  std::swap(ems_cruisecontrolstatus_, other->ems_cruisecontrolstatus_);
  std::swap(ems_drivingmodechange_fault_flag_, other->ems_drivingmodechange_fault_flag_);
  std::swap(dcm_ems_checksum_0x151_, other->dcm_ems_checksum_0x151_);
  std::swap(ems_engofftime_, other->ems_engofftime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gw_ems_sts_0x151_151::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gw_ems_sts_0x151_151

// optional int32 ems_engbarometricpressure = 1;
bool Gw_ems_sts_0x151_151::has_ems_engbarometricpressure() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gw_ems_sts_0x151_151::set_has_ems_engbarometricpressure() {
  _has_bits_[0] |= 0x00000002u;
}
void Gw_ems_sts_0x151_151::clear_has_ems_engbarometricpressure() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gw_ems_sts_0x151_151::clear_ems_engbarometricpressure() {
  ems_engbarometricpressure_ = 0;
  clear_has_ems_engbarometricpressure();
}
::google::protobuf::int32 Gw_ems_sts_0x151_151::ems_engbarometricpressure() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_engbarometricpressure)
  return ems_engbarometricpressure_;
}
void Gw_ems_sts_0x151_151::set_ems_engbarometricpressure(::google::protobuf::int32 value) {
  set_has_ems_engbarometricpressure();
  ems_engbarometricpressure_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_engbarometricpressure)
}

// optional double ems_vacuumpressure = 2;
bool Gw_ems_sts_0x151_151::has_ems_vacuumpressure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gw_ems_sts_0x151_151::set_has_ems_vacuumpressure() {
  _has_bits_[0] |= 0x00000001u;
}
void Gw_ems_sts_0x151_151::clear_has_ems_vacuumpressure() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gw_ems_sts_0x151_151::clear_ems_vacuumpressure() {
  ems_vacuumpressure_ = 0;
  clear_has_ems_vacuumpressure();
}
double Gw_ems_sts_0x151_151::ems_vacuumpressure() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_vacuumpressure)
  return ems_vacuumpressure_;
}
void Gw_ems_sts_0x151_151::set_ems_vacuumpressure(double value) {
  set_has_ems_vacuumpressure();
  ems_vacuumpressure_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_vacuumpressure)
}

// optional double ems_targcruisespeed = 3;
bool Gw_ems_sts_0x151_151::has_ems_targcruisespeed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gw_ems_sts_0x151_151::set_has_ems_targcruisespeed() {
  _has_bits_[0] |= 0x00000008u;
}
void Gw_ems_sts_0x151_151::clear_has_ems_targcruisespeed() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gw_ems_sts_0x151_151::clear_ems_targcruisespeed() {
  ems_targcruisespeed_ = 0;
  clear_has_ems_targcruisespeed();
}
double Gw_ems_sts_0x151_151::ems_targcruisespeed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_targcruisespeed)
  return ems_targcruisespeed_;
}
void Gw_ems_sts_0x151_151::set_ems_targcruisespeed(double value) {
  set_has_ems_targcruisespeed();
  ems_targcruisespeed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_targcruisespeed)
}

// optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_atsdrivingmodestatusType ems_atsdrivingmodestatus = 4;
bool Gw_ems_sts_0x151_151::has_ems_atsdrivingmodestatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gw_ems_sts_0x151_151::set_has_ems_atsdrivingmodestatus() {
  _has_bits_[0] |= 0x00000004u;
}
void Gw_ems_sts_0x151_151::clear_has_ems_atsdrivingmodestatus() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gw_ems_sts_0x151_151::clear_ems_atsdrivingmodestatus() {
  ems_atsdrivingmodestatus_ = 0;
  clear_has_ems_atsdrivingmodestatus();
}
::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType Gw_ems_sts_0x151_151::ems_atsdrivingmodestatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_atsdrivingmodestatus)
  return static_cast< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType >(ems_atsdrivingmodestatus_);
}
void Gw_ems_sts_0x151_151::set_ems_atsdrivingmodestatus(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType value) {
  assert(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_atsdrivingmodestatusType_IsValid(value));
  set_has_ems_atsdrivingmodestatus();
  ems_atsdrivingmodestatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_atsdrivingmodestatus)
}

// optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_enginestopstartstatusType ems_enginestopstartstatus = 5;
bool Gw_ems_sts_0x151_151::has_ems_enginestopstartstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gw_ems_sts_0x151_151::set_has_ems_enginestopstartstatus() {
  _has_bits_[0] |= 0x00000010u;
}
void Gw_ems_sts_0x151_151::clear_has_ems_enginestopstartstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gw_ems_sts_0x151_151::clear_ems_enginestopstartstatus() {
  ems_enginestopstartstatus_ = 0;
  clear_has_ems_enginestopstartstatus();
}
::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType Gw_ems_sts_0x151_151::ems_enginestopstartstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_enginestopstartstatus)
  return static_cast< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType >(ems_enginestopstartstatus_);
}
void Gw_ems_sts_0x151_151::set_ems_enginestopstartstatus(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType value) {
  assert(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_enginestopstartstatusType_IsValid(value));
  set_has_ems_enginestopstartstatus();
  ems_enginestopstartstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_enginestopstartstatus)
}

// optional int32 dcm_ems_rollingcounter_0x151 = 6;
bool Gw_ems_sts_0x151_151::has_dcm_ems_rollingcounter_0x151() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gw_ems_sts_0x151_151::set_has_dcm_ems_rollingcounter_0x151() {
  _has_bits_[0] |= 0x00000020u;
}
void Gw_ems_sts_0x151_151::clear_has_dcm_ems_rollingcounter_0x151() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gw_ems_sts_0x151_151::clear_dcm_ems_rollingcounter_0x151() {
  dcm_ems_rollingcounter_0x151_ = 0;
  clear_has_dcm_ems_rollingcounter_0x151();
}
::google::protobuf::int32 Gw_ems_sts_0x151_151::dcm_ems_rollingcounter_0x151() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.dcm_ems_rollingcounter_0x151)
  return dcm_ems_rollingcounter_0x151_;
}
void Gw_ems_sts_0x151_151::set_dcm_ems_rollingcounter_0x151(::google::protobuf::int32 value) {
  set_has_dcm_ems_rollingcounter_0x151();
  dcm_ems_rollingcounter_0x151_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.dcm_ems_rollingcounter_0x151)
}

// optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_cruisecontrolstatusType ems_cruisecontrolstatus = 7;
bool Gw_ems_sts_0x151_151::has_ems_cruisecontrolstatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Gw_ems_sts_0x151_151::set_has_ems_cruisecontrolstatus() {
  _has_bits_[0] |= 0x00000040u;
}
void Gw_ems_sts_0x151_151::clear_has_ems_cruisecontrolstatus() {
  _has_bits_[0] &= ~0x00000040u;
}
void Gw_ems_sts_0x151_151::clear_ems_cruisecontrolstatus() {
  ems_cruisecontrolstatus_ = 0;
  clear_has_ems_cruisecontrolstatus();
}
::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType Gw_ems_sts_0x151_151::ems_cruisecontrolstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_cruisecontrolstatus)
  return static_cast< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType >(ems_cruisecontrolstatus_);
}
void Gw_ems_sts_0x151_151::set_ems_cruisecontrolstatus(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType value) {
  assert(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_cruisecontrolstatusType_IsValid(value));
  set_has_ems_cruisecontrolstatus();
  ems_cruisecontrolstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_cruisecontrolstatus)
}

// optional .jmc_auto.canbus.Gw_ems_sts_0x151_151.Ems_drivingmodechange_fault_flagType ems_drivingmodechange_fault_flag = 8;
bool Gw_ems_sts_0x151_151::has_ems_drivingmodechange_fault_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Gw_ems_sts_0x151_151::set_has_ems_drivingmodechange_fault_flag() {
  _has_bits_[0] |= 0x00000080u;
}
void Gw_ems_sts_0x151_151::clear_has_ems_drivingmodechange_fault_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
void Gw_ems_sts_0x151_151::clear_ems_drivingmodechange_fault_flag() {
  ems_drivingmodechange_fault_flag_ = 0;
  clear_has_ems_drivingmodechange_fault_flag();
}
::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType Gw_ems_sts_0x151_151::ems_drivingmodechange_fault_flag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_drivingmodechange_fault_flag)
  return static_cast< ::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType >(ems_drivingmodechange_fault_flag_);
}
void Gw_ems_sts_0x151_151::set_ems_drivingmodechange_fault_flag(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType value) {
  assert(::jmc_auto::canbus::Gw_ems_sts_0x151_151_Ems_drivingmodechange_fault_flagType_IsValid(value));
  set_has_ems_drivingmodechange_fault_flag();
  ems_drivingmodechange_fault_flag_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_drivingmodechange_fault_flag)
}

// optional int32 dcm_ems_checksum_0x151 = 9;
bool Gw_ems_sts_0x151_151::has_dcm_ems_checksum_0x151() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Gw_ems_sts_0x151_151::set_has_dcm_ems_checksum_0x151() {
  _has_bits_[0] |= 0x00000100u;
}
void Gw_ems_sts_0x151_151::clear_has_dcm_ems_checksum_0x151() {
  _has_bits_[0] &= ~0x00000100u;
}
void Gw_ems_sts_0x151_151::clear_dcm_ems_checksum_0x151() {
  dcm_ems_checksum_0x151_ = 0;
  clear_has_dcm_ems_checksum_0x151();
}
::google::protobuf::int32 Gw_ems_sts_0x151_151::dcm_ems_checksum_0x151() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.dcm_ems_checksum_0x151)
  return dcm_ems_checksum_0x151_;
}
void Gw_ems_sts_0x151_151::set_dcm_ems_checksum_0x151(::google::protobuf::int32 value) {
  set_has_dcm_ems_checksum_0x151();
  dcm_ems_checksum_0x151_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.dcm_ems_checksum_0x151)
}

// optional int32 ems_engofftime = 10;
bool Gw_ems_sts_0x151_151::has_ems_engofftime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Gw_ems_sts_0x151_151::set_has_ems_engofftime() {
  _has_bits_[0] |= 0x00000200u;
}
void Gw_ems_sts_0x151_151::clear_has_ems_engofftime() {
  _has_bits_[0] &= ~0x00000200u;
}
void Gw_ems_sts_0x151_151::clear_ems_engofftime() {
  ems_engofftime_ = 0;
  clear_has_ems_engofftime();
}
::google::protobuf::int32 Gw_ems_sts_0x151_151::ems_engofftime() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_engofftime)
  return ems_engofftime_;
}
void Gw_ems_sts_0x151_151::set_ems_engofftime(::google::protobuf::int32 value) {
  set_has_ems_engofftime();
  ems_engofftime_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_sts_0x151_151.ems_engofftime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esp_raw_0x212_212::kEspVxwwheelrawfrFieldNumber;
const int Esp_raw_0x212_212::kEspVxwwheelrawrlFieldNumber;
const int Esp_raw_0x212_212::kEspVxwwheelrawrrFieldNumber;
const int Esp_raw_0x212_212::kRollingCounter0X212FieldNumber;
const int Esp_raw_0x212_212::kEspVxwwheelrrvalidFieldNumber;
const int Esp_raw_0x212_212::kEspVxwwheelrlvalidFieldNumber;
const int Esp_raw_0x212_212::kEspVxwwheelfrvalidFieldNumber;
const int Esp_raw_0x212_212::kEspVxwwheelflvalidFieldNumber;
const int Esp_raw_0x212_212::kChecksum0X212FieldNumber;
const int Esp_raw_0x212_212::kEspVxwwheelrawflFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esp_raw_0x212_212::Esp_raw_0x212_212()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Esp_raw_0x212_212)
}
Esp_raw_0x212_212::Esp_raw_0x212_212(const Esp_raw_0x212_212& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&esp_vxwwheelrawfr_, &from.esp_vxwwheelrawfr_,
    reinterpret_cast<char*>(&esp_vxwwheelrawfl_) -
    reinterpret_cast<char*>(&esp_vxwwheelrawfr_) + sizeof(esp_vxwwheelrawfl_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Esp_raw_0x212_212)
}

void Esp_raw_0x212_212::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&esp_vxwwheelrawfr_, 0, reinterpret_cast<char*>(&esp_vxwwheelrawfl_) -
    reinterpret_cast<char*>(&esp_vxwwheelrawfr_) + sizeof(esp_vxwwheelrawfl_));
}

Esp_raw_0x212_212::~Esp_raw_0x212_212() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Esp_raw_0x212_212)
  SharedDtor();
}

void Esp_raw_0x212_212::SharedDtor() {
}

void Esp_raw_0x212_212::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esp_raw_0x212_212::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esp_raw_0x212_212& Esp_raw_0x212_212::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esp_raw_0x212_212* Esp_raw_0x212_212::New(::google::protobuf::Arena* arena) const {
  Esp_raw_0x212_212* n = new Esp_raw_0x212_212;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esp_raw_0x212_212::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Esp_raw_0x212_212)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&esp_vxwwheelrawfr_, 0, reinterpret_cast<char*>(&esp_vxwwheelflvalid_) -
      reinterpret_cast<char*>(&esp_vxwwheelrawfr_) + sizeof(esp_vxwwheelflvalid_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&checksum_0x212_, 0, reinterpret_cast<char*>(&esp_vxwwheelrawfl_) -
      reinterpret_cast<char*>(&checksum_0x212_) + sizeof(esp_vxwwheelrawfl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esp_raw_0x212_212::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Esp_raw_0x212_212)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double esp_vxwwheelrawfr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_esp_vxwwheelrawfr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &esp_vxwwheelrawfr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double esp_vxwwheelrawrl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_esp_vxwwheelrawrl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &esp_vxwwheelrawrl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double esp_vxwwheelrawrr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_esp_vxwwheelrawrr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &esp_vxwwheelrawrr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x212 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_rolling_counter_0x212();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x212_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelrrvalidType esp_vxwwheelrrvalid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_IsValid(value)) {
            set_esp_vxwwheelrrvalid(static_cast< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrrvalidType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelrlvalidType esp_vxwwheelrlvalid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_IsValid(value)) {
            set_esp_vxwwheelrlvalid(static_cast< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrlvalidType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelfrvalidType esp_vxwwheelfrvalid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_IsValid(value)) {
            set_esp_vxwwheelfrvalid(static_cast< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelfrvalidType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelflvalidType esp_vxwwheelflvalid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelflvalidType_IsValid(value)) {
            set_esp_vxwwheelflvalid(static_cast< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelflvalidType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x212 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_checksum_0x212();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x212_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double esp_vxwwheelrawfl = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_esp_vxwwheelrawfl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &esp_vxwwheelrawfl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Esp_raw_0x212_212)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Esp_raw_0x212_212)
  return false;
#undef DO_
}

void Esp_raw_0x212_212::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Esp_raw_0x212_212)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double esp_vxwwheelrawfr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->esp_vxwwheelrawfr(), output);
  }

  // optional double esp_vxwwheelrawrl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->esp_vxwwheelrawrl(), output);
  }

  // optional double esp_vxwwheelrawrr = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->esp_vxwwheelrawrr(), output);
  }

  // optional int32 rolling_counter_0x212 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rolling_counter_0x212(), output);
  }

  // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelrrvalidType esp_vxwwheelrrvalid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->esp_vxwwheelrrvalid(), output);
  }

  // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelrlvalidType esp_vxwwheelrlvalid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->esp_vxwwheelrlvalid(), output);
  }

  // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelfrvalidType esp_vxwwheelfrvalid = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->esp_vxwwheelfrvalid(), output);
  }

  // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelflvalidType esp_vxwwheelflvalid = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->esp_vxwwheelflvalid(), output);
  }

  // optional int32 checksum_0x212 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->checksum_0x212(), output);
  }

  // optional double esp_vxwwheelrawfl = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->esp_vxwwheelrawfl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Esp_raw_0x212_212)
}

::google::protobuf::uint8* Esp_raw_0x212_212::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Esp_raw_0x212_212)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double esp_vxwwheelrawfr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->esp_vxwwheelrawfr(), target);
  }

  // optional double esp_vxwwheelrawrl = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->esp_vxwwheelrawrl(), target);
  }

  // optional double esp_vxwwheelrawrr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->esp_vxwwheelrawrr(), target);
  }

  // optional int32 rolling_counter_0x212 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rolling_counter_0x212(), target);
  }

  // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelrrvalidType esp_vxwwheelrrvalid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->esp_vxwwheelrrvalid(), target);
  }

  // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelrlvalidType esp_vxwwheelrlvalid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->esp_vxwwheelrlvalid(), target);
  }

  // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelfrvalidType esp_vxwwheelfrvalid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->esp_vxwwheelfrvalid(), target);
  }

  // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelflvalidType esp_vxwwheelflvalid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->esp_vxwwheelflvalid(), target);
  }

  // optional int32 checksum_0x212 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->checksum_0x212(), target);
  }

  // optional double esp_vxwwheelrawfl = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->esp_vxwwheelrawfl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Esp_raw_0x212_212)
  return target;
}

size_t Esp_raw_0x212_212::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Esp_raw_0x212_212)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double esp_vxwwheelrawfr = 1;
    if (has_esp_vxwwheelrawfr()) {
      total_size += 1 + 8;
    }

    // optional double esp_vxwwheelrawrl = 2;
    if (has_esp_vxwwheelrawrl()) {
      total_size += 1 + 8;
    }

    // optional double esp_vxwwheelrawrr = 3;
    if (has_esp_vxwwheelrawrr()) {
      total_size += 1 + 8;
    }

    // optional int32 rolling_counter_0x212 = 4;
    if (has_rolling_counter_0x212()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x212());
    }

    // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelrrvalidType esp_vxwwheelrrvalid = 5;
    if (has_esp_vxwwheelrrvalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_vxwwheelrrvalid());
    }

    // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelrlvalidType esp_vxwwheelrlvalid = 6;
    if (has_esp_vxwwheelrlvalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_vxwwheelrlvalid());
    }

    // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelfrvalidType esp_vxwwheelfrvalid = 7;
    if (has_esp_vxwwheelfrvalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_vxwwheelfrvalid());
    }

    // optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelflvalidType esp_vxwwheelflvalid = 8;
    if (has_esp_vxwwheelflvalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_vxwwheelflvalid());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 checksum_0x212 = 9;
    if (has_checksum_0x212()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x212());
    }

    // optional double esp_vxwwheelrawfl = 10;
    if (has_esp_vxwwheelrawfl()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esp_raw_0x212_212::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Esp_raw_0x212_212)
  GOOGLE_DCHECK_NE(&from, this);
  const Esp_raw_0x212_212* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esp_raw_0x212_212>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Esp_raw_0x212_212)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Esp_raw_0x212_212)
    MergeFrom(*source);
  }
}

void Esp_raw_0x212_212::MergeFrom(const Esp_raw_0x212_212& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Esp_raw_0x212_212)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      esp_vxwwheelrawfr_ = from.esp_vxwwheelrawfr_;
    }
    if (cached_has_bits & 0x00000002u) {
      esp_vxwwheelrawrl_ = from.esp_vxwwheelrawrl_;
    }
    if (cached_has_bits & 0x00000004u) {
      esp_vxwwheelrawrr_ = from.esp_vxwwheelrawrr_;
    }
    if (cached_has_bits & 0x00000008u) {
      rolling_counter_0x212_ = from.rolling_counter_0x212_;
    }
    if (cached_has_bits & 0x00000010u) {
      esp_vxwwheelrrvalid_ = from.esp_vxwwheelrrvalid_;
    }
    if (cached_has_bits & 0x00000020u) {
      esp_vxwwheelrlvalid_ = from.esp_vxwwheelrlvalid_;
    }
    if (cached_has_bits & 0x00000040u) {
      esp_vxwwheelfrvalid_ = from.esp_vxwwheelfrvalid_;
    }
    if (cached_has_bits & 0x00000080u) {
      esp_vxwwheelflvalid_ = from.esp_vxwwheelflvalid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      checksum_0x212_ = from.checksum_0x212_;
    }
    if (cached_has_bits & 0x00000200u) {
      esp_vxwwheelrawfl_ = from.esp_vxwwheelrawfl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esp_raw_0x212_212::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Esp_raw_0x212_212)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esp_raw_0x212_212::CopyFrom(const Esp_raw_0x212_212& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Esp_raw_0x212_212)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esp_raw_0x212_212::IsInitialized() const {
  return true;
}

void Esp_raw_0x212_212::Swap(Esp_raw_0x212_212* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esp_raw_0x212_212::InternalSwap(Esp_raw_0x212_212* other) {
  std::swap(esp_vxwwheelrawfr_, other->esp_vxwwheelrawfr_);
  std::swap(esp_vxwwheelrawrl_, other->esp_vxwwheelrawrl_);
  std::swap(esp_vxwwheelrawrr_, other->esp_vxwwheelrawrr_);
  std::swap(rolling_counter_0x212_, other->rolling_counter_0x212_);
  std::swap(esp_vxwwheelrrvalid_, other->esp_vxwwheelrrvalid_);
  std::swap(esp_vxwwheelrlvalid_, other->esp_vxwwheelrlvalid_);
  std::swap(esp_vxwwheelfrvalid_, other->esp_vxwwheelfrvalid_);
  std::swap(esp_vxwwheelflvalid_, other->esp_vxwwheelflvalid_);
  std::swap(checksum_0x212_, other->checksum_0x212_);
  std::swap(esp_vxwwheelrawfl_, other->esp_vxwwheelrawfl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esp_raw_0x212_212::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esp_raw_0x212_212

// optional double esp_vxwwheelrawfr = 1;
bool Esp_raw_0x212_212::has_esp_vxwwheelrawfr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esp_raw_0x212_212::set_has_esp_vxwwheelrawfr() {
  _has_bits_[0] |= 0x00000001u;
}
void Esp_raw_0x212_212::clear_has_esp_vxwwheelrawfr() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esp_raw_0x212_212::clear_esp_vxwwheelrawfr() {
  esp_vxwwheelrawfr_ = 0;
  clear_has_esp_vxwwheelrawfr();
}
double Esp_raw_0x212_212::esp_vxwwheelrawfr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrawfr)
  return esp_vxwwheelrawfr_;
}
void Esp_raw_0x212_212::set_esp_vxwwheelrawfr(double value) {
  set_has_esp_vxwwheelrawfr();
  esp_vxwwheelrawfr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrawfr)
}

// optional double esp_vxwwheelrawrl = 2;
bool Esp_raw_0x212_212::has_esp_vxwwheelrawrl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esp_raw_0x212_212::set_has_esp_vxwwheelrawrl() {
  _has_bits_[0] |= 0x00000002u;
}
void Esp_raw_0x212_212::clear_has_esp_vxwwheelrawrl() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esp_raw_0x212_212::clear_esp_vxwwheelrawrl() {
  esp_vxwwheelrawrl_ = 0;
  clear_has_esp_vxwwheelrawrl();
}
double Esp_raw_0x212_212::esp_vxwwheelrawrl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrawrl)
  return esp_vxwwheelrawrl_;
}
void Esp_raw_0x212_212::set_esp_vxwwheelrawrl(double value) {
  set_has_esp_vxwwheelrawrl();
  esp_vxwwheelrawrl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrawrl)
}

// optional double esp_vxwwheelrawrr = 3;
bool Esp_raw_0x212_212::has_esp_vxwwheelrawrr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esp_raw_0x212_212::set_has_esp_vxwwheelrawrr() {
  _has_bits_[0] |= 0x00000004u;
}
void Esp_raw_0x212_212::clear_has_esp_vxwwheelrawrr() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esp_raw_0x212_212::clear_esp_vxwwheelrawrr() {
  esp_vxwwheelrawrr_ = 0;
  clear_has_esp_vxwwheelrawrr();
}
double Esp_raw_0x212_212::esp_vxwwheelrawrr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrawrr)
  return esp_vxwwheelrawrr_;
}
void Esp_raw_0x212_212::set_esp_vxwwheelrawrr(double value) {
  set_has_esp_vxwwheelrawrr();
  esp_vxwwheelrawrr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrawrr)
}

// optional int32 rolling_counter_0x212 = 4;
bool Esp_raw_0x212_212::has_rolling_counter_0x212() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esp_raw_0x212_212::set_has_rolling_counter_0x212() {
  _has_bits_[0] |= 0x00000008u;
}
void Esp_raw_0x212_212::clear_has_rolling_counter_0x212() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esp_raw_0x212_212::clear_rolling_counter_0x212() {
  rolling_counter_0x212_ = 0;
  clear_has_rolling_counter_0x212();
}
::google::protobuf::int32 Esp_raw_0x212_212::rolling_counter_0x212() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.rolling_counter_0x212)
  return rolling_counter_0x212_;
}
void Esp_raw_0x212_212::set_rolling_counter_0x212(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x212();
  rolling_counter_0x212_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.rolling_counter_0x212)
}

// optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelrrvalidType esp_vxwwheelrrvalid = 5;
bool Esp_raw_0x212_212::has_esp_vxwwheelrrvalid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esp_raw_0x212_212::set_has_esp_vxwwheelrrvalid() {
  _has_bits_[0] |= 0x00000010u;
}
void Esp_raw_0x212_212::clear_has_esp_vxwwheelrrvalid() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esp_raw_0x212_212::clear_esp_vxwwheelrrvalid() {
  esp_vxwwheelrrvalid_ = 0;
  clear_has_esp_vxwwheelrrvalid();
}
::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrrvalidType Esp_raw_0x212_212::esp_vxwwheelrrvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrrvalid)
  return static_cast< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrrvalidType >(esp_vxwwheelrrvalid_);
}
void Esp_raw_0x212_212::set_esp_vxwwheelrrvalid(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrrvalidType value) {
  assert(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrrvalidType_IsValid(value));
  set_has_esp_vxwwheelrrvalid();
  esp_vxwwheelrrvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrrvalid)
}

// optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelrlvalidType esp_vxwwheelrlvalid = 6;
bool Esp_raw_0x212_212::has_esp_vxwwheelrlvalid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Esp_raw_0x212_212::set_has_esp_vxwwheelrlvalid() {
  _has_bits_[0] |= 0x00000020u;
}
void Esp_raw_0x212_212::clear_has_esp_vxwwheelrlvalid() {
  _has_bits_[0] &= ~0x00000020u;
}
void Esp_raw_0x212_212::clear_esp_vxwwheelrlvalid() {
  esp_vxwwheelrlvalid_ = 0;
  clear_has_esp_vxwwheelrlvalid();
}
::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrlvalidType Esp_raw_0x212_212::esp_vxwwheelrlvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrlvalid)
  return static_cast< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrlvalidType >(esp_vxwwheelrlvalid_);
}
void Esp_raw_0x212_212::set_esp_vxwwheelrlvalid(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrlvalidType value) {
  assert(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelrlvalidType_IsValid(value));
  set_has_esp_vxwwheelrlvalid();
  esp_vxwwheelrlvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrlvalid)
}

// optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelfrvalidType esp_vxwwheelfrvalid = 7;
bool Esp_raw_0x212_212::has_esp_vxwwheelfrvalid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Esp_raw_0x212_212::set_has_esp_vxwwheelfrvalid() {
  _has_bits_[0] |= 0x00000040u;
}
void Esp_raw_0x212_212::clear_has_esp_vxwwheelfrvalid() {
  _has_bits_[0] &= ~0x00000040u;
}
void Esp_raw_0x212_212::clear_esp_vxwwheelfrvalid() {
  esp_vxwwheelfrvalid_ = 0;
  clear_has_esp_vxwwheelfrvalid();
}
::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelfrvalidType Esp_raw_0x212_212::esp_vxwwheelfrvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelfrvalid)
  return static_cast< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelfrvalidType >(esp_vxwwheelfrvalid_);
}
void Esp_raw_0x212_212::set_esp_vxwwheelfrvalid(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelfrvalidType value) {
  assert(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelfrvalidType_IsValid(value));
  set_has_esp_vxwwheelfrvalid();
  esp_vxwwheelfrvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelfrvalid)
}

// optional .jmc_auto.canbus.Esp_raw_0x212_212.Esp_vxwwheelflvalidType esp_vxwwheelflvalid = 8;
bool Esp_raw_0x212_212::has_esp_vxwwheelflvalid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Esp_raw_0x212_212::set_has_esp_vxwwheelflvalid() {
  _has_bits_[0] |= 0x00000080u;
}
void Esp_raw_0x212_212::clear_has_esp_vxwwheelflvalid() {
  _has_bits_[0] &= ~0x00000080u;
}
void Esp_raw_0x212_212::clear_esp_vxwwheelflvalid() {
  esp_vxwwheelflvalid_ = 0;
  clear_has_esp_vxwwheelflvalid();
}
::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelflvalidType Esp_raw_0x212_212::esp_vxwwheelflvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelflvalid)
  return static_cast< ::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelflvalidType >(esp_vxwwheelflvalid_);
}
void Esp_raw_0x212_212::set_esp_vxwwheelflvalid(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelflvalidType value) {
  assert(::jmc_auto::canbus::Esp_raw_0x212_212_Esp_vxwwheelflvalidType_IsValid(value));
  set_has_esp_vxwwheelflvalid();
  esp_vxwwheelflvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelflvalid)
}

// optional int32 checksum_0x212 = 9;
bool Esp_raw_0x212_212::has_checksum_0x212() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Esp_raw_0x212_212::set_has_checksum_0x212() {
  _has_bits_[0] |= 0x00000100u;
}
void Esp_raw_0x212_212::clear_has_checksum_0x212() {
  _has_bits_[0] &= ~0x00000100u;
}
void Esp_raw_0x212_212::clear_checksum_0x212() {
  checksum_0x212_ = 0;
  clear_has_checksum_0x212();
}
::google::protobuf::int32 Esp_raw_0x212_212::checksum_0x212() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.checksum_0x212)
  return checksum_0x212_;
}
void Esp_raw_0x212_212::set_checksum_0x212(::google::protobuf::int32 value) {
  set_has_checksum_0x212();
  checksum_0x212_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.checksum_0x212)
}

// optional double esp_vxwwheelrawfl = 10;
bool Esp_raw_0x212_212::has_esp_vxwwheelrawfl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Esp_raw_0x212_212::set_has_esp_vxwwheelrawfl() {
  _has_bits_[0] |= 0x00000200u;
}
void Esp_raw_0x212_212::clear_has_esp_vxwwheelrawfl() {
  _has_bits_[0] &= ~0x00000200u;
}
void Esp_raw_0x212_212::clear_esp_vxwwheelrawfl() {
  esp_vxwwheelrawfl_ = 0;
  clear_has_esp_vxwwheelrawfl();
}
double Esp_raw_0x212_212::esp_vxwwheelrawfl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrawfl)
  return esp_vxwwheelrawfl_;
}
void Esp_raw_0x212_212::set_esp_vxwwheelrawfl(double value) {
  set_has_esp_vxwwheelrawfl();
  esp_vxwwheelrawfl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_raw_0x212_212.esp_vxwwheelrawfl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gw_bcm_door_0x310_310::kBcmDoorstsrearriFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmDoorlockstsrearleFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmDoorlockstsfrntriFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmDoorlockstsfrntleFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmAntitheftstsFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmLoadsensitivityFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmLockunlockfeedbackFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmDoorlockststrunkFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmDoorststrunkFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmTrunkdoorpreunlockstsFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmDoorstsrearleFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmFrontwiperstsFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmEnginehoodstsFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmPlgDriverswFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmWindowscmdFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmRearwiperstsFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmDoorstsfrntriFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmRollingCounter0X310FieldNumber;
const int Gw_bcm_door_0x310_310::kBcmTurnindicatorstsFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmChecksum0X310FieldNumber;
const int Gw_bcm_door_0x310_310::kBcmDoorstsfrntleFieldNumber;
const int Gw_bcm_door_0x310_310::kBcmDoorlockstsrearriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gw_bcm_door_0x310_310::Gw_bcm_door_0x310_310()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gw_bcm_door_0x310_310)
}
Gw_bcm_door_0x310_310::Gw_bcm_door_0x310_310(const Gw_bcm_door_0x310_310& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bcm_doorstsrearri_, &from.bcm_doorstsrearri_,
    reinterpret_cast<char*>(&bcm_doorlockstsrearri_) -
    reinterpret_cast<char*>(&bcm_doorstsrearri_) + sizeof(bcm_doorlockstsrearri_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gw_bcm_door_0x310_310)
}

void Gw_bcm_door_0x310_310::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bcm_doorstsrearri_, 0, reinterpret_cast<char*>(&bcm_doorlockstsrearri_) -
    reinterpret_cast<char*>(&bcm_doorstsrearri_) + sizeof(bcm_doorlockstsrearri_));
}

Gw_bcm_door_0x310_310::~Gw_bcm_door_0x310_310() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gw_bcm_door_0x310_310)
  SharedDtor();
}

void Gw_bcm_door_0x310_310::SharedDtor() {
}

void Gw_bcm_door_0x310_310::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gw_bcm_door_0x310_310::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gw_bcm_door_0x310_310& Gw_bcm_door_0x310_310::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gw_bcm_door_0x310_310* Gw_bcm_door_0x310_310::New(::google::protobuf::Arena* arena) const {
  Gw_bcm_door_0x310_310* n = new Gw_bcm_door_0x310_310;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gw_bcm_door_0x310_310::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gw_bcm_door_0x310_310)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&bcm_doorstsrearri_, 0, reinterpret_cast<char*>(&bcm_doorlockststrunk_) -
      reinterpret_cast<char*>(&bcm_doorstsrearri_) + sizeof(bcm_doorlockststrunk_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&bcm_doorststrunk_, 0, reinterpret_cast<char*>(&bcm_rearwipersts_) -
      reinterpret_cast<char*>(&bcm_doorststrunk_) + sizeof(bcm_rearwipersts_));
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ::memset(&bcm_doorstsfrntri_, 0, reinterpret_cast<char*>(&bcm_doorlockstsrearri_) -
      reinterpret_cast<char*>(&bcm_doorstsfrntri_) + sizeof(bcm_doorlockstsrearri_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gw_bcm_door_0x310_310::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gw_bcm_door_0x310_310)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsrearriType bcm_doorstsrearri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_IsValid(value)) {
            set_bcm_doorstsrearri(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearriType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsrearleType bcm_doorlockstsrearle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_IsValid(value)) {
            set_bcm_doorlockstsrearle(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsfrntriType bcm_doorlockstsfrntri = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_IsValid(value)) {
            set_bcm_doorlockstsfrntri(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsfrntleType bcm_doorlockstsfrntle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_IsValid(value)) {
            set_bcm_doorlockstsfrntle(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_antitheftstsType bcm_antitheftsts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_antitheftstsType_IsValid(value)) {
            set_bcm_antitheftsts(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_antitheftstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_loadsensitivityType bcm_loadsensitivity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_IsValid(value)) {
            set_bcm_loadsensitivity(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_loadsensitivityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_lockunlockfeedbackType bcm_lockunlockfeedback = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_IsValid(value)) {
            set_bcm_lockunlockfeedback(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockststrunkType bcm_doorlockststrunk = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_IsValid(value)) {
            set_bcm_doorlockststrunk(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorststrunkType bcm_doorststrunk = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorststrunkType_IsValid(value)) {
            set_bcm_doorststrunk(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorststrunkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_trunkdoorpreunlockstsType bcm_trunkdoorpreunlocksts = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_IsValid(value)) {
            set_bcm_trunkdoorpreunlocksts(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsrearleType bcm_doorstsrearle = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_IsValid(value)) {
            set_bcm_doorstsrearle(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_frontwiperstsType bcm_frontwipersts = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_IsValid(value)) {
            set_bcm_frontwipersts(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_frontwiperstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_enginehoodstsType bcm_enginehoodsts = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_IsValid(value)) {
            set_bcm_enginehoodsts(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_enginehoodstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_plg_driverswType bcm_plg_driversw = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_plg_driverswType_IsValid(value)) {
            set_bcm_plg_driversw(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_plg_driverswType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_windowscmdType bcm_windowscmd = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_windowscmdType_IsValid(value)) {
            set_bcm_windowscmd(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_windowscmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_rearwiperstsType bcm_rearwipersts = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_IsValid(value)) {
            set_bcm_rearwipersts(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_rearwiperstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsfrntriType bcm_doorstsfrntri = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_IsValid(value)) {
            set_bcm_doorstsfrntri(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bcm_rolling_counter_0x310 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_bcm_rolling_counter_0x310();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bcm_rolling_counter_0x310_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_turnindicatorstsType bcm_turnindicatorsts = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_IsValid(value)) {
            set_bcm_turnindicatorsts(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bcm_checksum_0x310 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_bcm_checksum_0x310();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bcm_checksum_0x310_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsfrntleType bcm_doorstsfrntle = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_IsValid(value)) {
            set_bcm_doorstsfrntle(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsrearriType bcm_doorlockstsrearri = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_IsValid(value)) {
            set_bcm_doorlockstsrearri(static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gw_bcm_door_0x310_310)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gw_bcm_door_0x310_310)
  return false;
#undef DO_
}

void Gw_bcm_door_0x310_310::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gw_bcm_door_0x310_310)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsrearriType bcm_doorstsrearri = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->bcm_doorstsrearri(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsrearleType bcm_doorlockstsrearle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->bcm_doorlockstsrearle(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsfrntriType bcm_doorlockstsfrntri = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->bcm_doorlockstsfrntri(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsfrntleType bcm_doorlockstsfrntle = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->bcm_doorlockstsfrntle(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_antitheftstsType bcm_antitheftsts = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->bcm_antitheftsts(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_loadsensitivityType bcm_loadsensitivity = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->bcm_loadsensitivity(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_lockunlockfeedbackType bcm_lockunlockfeedback = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->bcm_lockunlockfeedback(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockststrunkType bcm_doorlockststrunk = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->bcm_doorlockststrunk(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorststrunkType bcm_doorststrunk = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->bcm_doorststrunk(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_trunkdoorpreunlockstsType bcm_trunkdoorpreunlocksts = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->bcm_trunkdoorpreunlocksts(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsrearleType bcm_doorstsrearle = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->bcm_doorstsrearle(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_frontwiperstsType bcm_frontwipersts = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->bcm_frontwipersts(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_enginehoodstsType bcm_enginehoodsts = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->bcm_enginehoodsts(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_plg_driverswType bcm_plg_driversw = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->bcm_plg_driversw(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_windowscmdType bcm_windowscmd = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->bcm_windowscmd(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_rearwiperstsType bcm_rearwipersts = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->bcm_rearwipersts(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsfrntriType bcm_doorstsfrntri = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->bcm_doorstsfrntri(), output);
  }

  // optional int32 bcm_rolling_counter_0x310 = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->bcm_rolling_counter_0x310(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_turnindicatorstsType bcm_turnindicatorsts = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->bcm_turnindicatorsts(), output);
  }

  // optional int32 bcm_checksum_0x310 = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->bcm_checksum_0x310(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsfrntleType bcm_doorstsfrntle = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->bcm_doorstsfrntle(), output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsrearriType bcm_doorlockstsrearri = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->bcm_doorlockstsrearri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gw_bcm_door_0x310_310)
}

::google::protobuf::uint8* Gw_bcm_door_0x310_310::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gw_bcm_door_0x310_310)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsrearriType bcm_doorstsrearri = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->bcm_doorstsrearri(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsrearleType bcm_doorlockstsrearle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->bcm_doorlockstsrearle(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsfrntriType bcm_doorlockstsfrntri = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->bcm_doorlockstsfrntri(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsfrntleType bcm_doorlockstsfrntle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->bcm_doorlockstsfrntle(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_antitheftstsType bcm_antitheftsts = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->bcm_antitheftsts(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_loadsensitivityType bcm_loadsensitivity = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->bcm_loadsensitivity(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_lockunlockfeedbackType bcm_lockunlockfeedback = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->bcm_lockunlockfeedback(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockststrunkType bcm_doorlockststrunk = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->bcm_doorlockststrunk(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorststrunkType bcm_doorststrunk = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->bcm_doorststrunk(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_trunkdoorpreunlockstsType bcm_trunkdoorpreunlocksts = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->bcm_trunkdoorpreunlocksts(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsrearleType bcm_doorstsrearle = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->bcm_doorstsrearle(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_frontwiperstsType bcm_frontwipersts = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->bcm_frontwipersts(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_enginehoodstsType bcm_enginehoodsts = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->bcm_enginehoodsts(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_plg_driverswType bcm_plg_driversw = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->bcm_plg_driversw(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_windowscmdType bcm_windowscmd = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->bcm_windowscmd(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_rearwiperstsType bcm_rearwipersts = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->bcm_rearwipersts(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsfrntriType bcm_doorstsfrntri = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->bcm_doorstsfrntri(), target);
  }

  // optional int32 bcm_rolling_counter_0x310 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->bcm_rolling_counter_0x310(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_turnindicatorstsType bcm_turnindicatorsts = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->bcm_turnindicatorsts(), target);
  }

  // optional int32 bcm_checksum_0x310 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->bcm_checksum_0x310(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsfrntleType bcm_doorstsfrntle = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->bcm_doorstsfrntle(), target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsrearriType bcm_doorlockstsrearri = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->bcm_doorlockstsrearri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gw_bcm_door_0x310_310)
  return target;
}

size_t Gw_bcm_door_0x310_310::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gw_bcm_door_0x310_310)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsrearriType bcm_doorstsrearri = 1;
    if (has_bcm_doorstsrearri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_doorstsrearri());
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsrearleType bcm_doorlockstsrearle = 2;
    if (has_bcm_doorlockstsrearle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_doorlockstsrearle());
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsfrntriType bcm_doorlockstsfrntri = 3;
    if (has_bcm_doorlockstsfrntri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_doorlockstsfrntri());
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsfrntleType bcm_doorlockstsfrntle = 4;
    if (has_bcm_doorlockstsfrntle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_doorlockstsfrntle());
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_antitheftstsType bcm_antitheftsts = 5;
    if (has_bcm_antitheftsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_antitheftsts());
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_loadsensitivityType bcm_loadsensitivity = 6;
    if (has_bcm_loadsensitivity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_loadsensitivity());
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_lockunlockfeedbackType bcm_lockunlockfeedback = 7;
    if (has_bcm_lockunlockfeedback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_lockunlockfeedback());
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockststrunkType bcm_doorlockststrunk = 8;
    if (has_bcm_doorlockststrunk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_doorlockststrunk());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorststrunkType bcm_doorststrunk = 9;
    if (has_bcm_doorststrunk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_doorststrunk());
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_trunkdoorpreunlockstsType bcm_trunkdoorpreunlocksts = 10;
    if (has_bcm_trunkdoorpreunlocksts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_trunkdoorpreunlocksts());
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsrearleType bcm_doorstsrearle = 11;
    if (has_bcm_doorstsrearle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_doorstsrearle());
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_frontwiperstsType bcm_frontwipersts = 12;
    if (has_bcm_frontwipersts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_frontwipersts());
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_enginehoodstsType bcm_enginehoodsts = 13;
    if (has_bcm_enginehoodsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_enginehoodsts());
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_plg_driverswType bcm_plg_driversw = 14;
    if (has_bcm_plg_driversw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_plg_driversw());
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_windowscmdType bcm_windowscmd = 15;
    if (has_bcm_windowscmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_windowscmd());
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_rearwiperstsType bcm_rearwipersts = 16;
    if (has_bcm_rearwipersts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_rearwipersts());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsfrntriType bcm_doorstsfrntri = 17;
    if (has_bcm_doorstsfrntri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_doorstsfrntri());
    }

    // optional int32 bcm_rolling_counter_0x310 = 18;
    if (has_bcm_rolling_counter_0x310()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bcm_rolling_counter_0x310());
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_turnindicatorstsType bcm_turnindicatorsts = 19;
    if (has_bcm_turnindicatorsts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_turnindicatorsts());
    }

    // optional int32 bcm_checksum_0x310 = 20;
    if (has_bcm_checksum_0x310()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bcm_checksum_0x310());
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsfrntleType bcm_doorstsfrntle = 21;
    if (has_bcm_doorstsfrntle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_doorstsfrntle());
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsrearriType bcm_doorlockstsrearri = 22;
    if (has_bcm_doorlockstsrearri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_doorlockstsrearri());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gw_bcm_door_0x310_310::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gw_bcm_door_0x310_310)
  GOOGLE_DCHECK_NE(&from, this);
  const Gw_bcm_door_0x310_310* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gw_bcm_door_0x310_310>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gw_bcm_door_0x310_310)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gw_bcm_door_0x310_310)
    MergeFrom(*source);
  }
}

void Gw_bcm_door_0x310_310::MergeFrom(const Gw_bcm_door_0x310_310& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gw_bcm_door_0x310_310)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      bcm_doorstsrearri_ = from.bcm_doorstsrearri_;
    }
    if (cached_has_bits & 0x00000002u) {
      bcm_doorlockstsrearle_ = from.bcm_doorlockstsrearle_;
    }
    if (cached_has_bits & 0x00000004u) {
      bcm_doorlockstsfrntri_ = from.bcm_doorlockstsfrntri_;
    }
    if (cached_has_bits & 0x00000008u) {
      bcm_doorlockstsfrntle_ = from.bcm_doorlockstsfrntle_;
    }
    if (cached_has_bits & 0x00000010u) {
      bcm_antitheftsts_ = from.bcm_antitheftsts_;
    }
    if (cached_has_bits & 0x00000020u) {
      bcm_loadsensitivity_ = from.bcm_loadsensitivity_;
    }
    if (cached_has_bits & 0x00000040u) {
      bcm_lockunlockfeedback_ = from.bcm_lockunlockfeedback_;
    }
    if (cached_has_bits & 0x00000080u) {
      bcm_doorlockststrunk_ = from.bcm_doorlockststrunk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      bcm_doorststrunk_ = from.bcm_doorststrunk_;
    }
    if (cached_has_bits & 0x00000200u) {
      bcm_trunkdoorpreunlocksts_ = from.bcm_trunkdoorpreunlocksts_;
    }
    if (cached_has_bits & 0x00000400u) {
      bcm_doorstsrearle_ = from.bcm_doorstsrearle_;
    }
    if (cached_has_bits & 0x00000800u) {
      bcm_frontwipersts_ = from.bcm_frontwipersts_;
    }
    if (cached_has_bits & 0x00001000u) {
      bcm_enginehoodsts_ = from.bcm_enginehoodsts_;
    }
    if (cached_has_bits & 0x00002000u) {
      bcm_plg_driversw_ = from.bcm_plg_driversw_;
    }
    if (cached_has_bits & 0x00004000u) {
      bcm_windowscmd_ = from.bcm_windowscmd_;
    }
    if (cached_has_bits & 0x00008000u) {
      bcm_rearwipersts_ = from.bcm_rearwipersts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      bcm_doorstsfrntri_ = from.bcm_doorstsfrntri_;
    }
    if (cached_has_bits & 0x00020000u) {
      bcm_rolling_counter_0x310_ = from.bcm_rolling_counter_0x310_;
    }
    if (cached_has_bits & 0x00040000u) {
      bcm_turnindicatorsts_ = from.bcm_turnindicatorsts_;
    }
    if (cached_has_bits & 0x00080000u) {
      bcm_checksum_0x310_ = from.bcm_checksum_0x310_;
    }
    if (cached_has_bits & 0x00100000u) {
      bcm_doorstsfrntle_ = from.bcm_doorstsfrntle_;
    }
    if (cached_has_bits & 0x00200000u) {
      bcm_doorlockstsrearri_ = from.bcm_doorlockstsrearri_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gw_bcm_door_0x310_310::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gw_bcm_door_0x310_310)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gw_bcm_door_0x310_310::CopyFrom(const Gw_bcm_door_0x310_310& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gw_bcm_door_0x310_310)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gw_bcm_door_0x310_310::IsInitialized() const {
  return true;
}

void Gw_bcm_door_0x310_310::Swap(Gw_bcm_door_0x310_310* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gw_bcm_door_0x310_310::InternalSwap(Gw_bcm_door_0x310_310* other) {
  std::swap(bcm_doorstsrearri_, other->bcm_doorstsrearri_);
  std::swap(bcm_doorlockstsrearle_, other->bcm_doorlockstsrearle_);
  std::swap(bcm_doorlockstsfrntri_, other->bcm_doorlockstsfrntri_);
  std::swap(bcm_doorlockstsfrntle_, other->bcm_doorlockstsfrntle_);
  std::swap(bcm_antitheftsts_, other->bcm_antitheftsts_);
  std::swap(bcm_loadsensitivity_, other->bcm_loadsensitivity_);
  std::swap(bcm_lockunlockfeedback_, other->bcm_lockunlockfeedback_);
  std::swap(bcm_doorlockststrunk_, other->bcm_doorlockststrunk_);
  std::swap(bcm_doorststrunk_, other->bcm_doorststrunk_);
  std::swap(bcm_trunkdoorpreunlocksts_, other->bcm_trunkdoorpreunlocksts_);
  std::swap(bcm_doorstsrearle_, other->bcm_doorstsrearle_);
  std::swap(bcm_frontwipersts_, other->bcm_frontwipersts_);
  std::swap(bcm_enginehoodsts_, other->bcm_enginehoodsts_);
  std::swap(bcm_plg_driversw_, other->bcm_plg_driversw_);
  std::swap(bcm_windowscmd_, other->bcm_windowscmd_);
  std::swap(bcm_rearwipersts_, other->bcm_rearwipersts_);
  std::swap(bcm_doorstsfrntri_, other->bcm_doorstsfrntri_);
  std::swap(bcm_rolling_counter_0x310_, other->bcm_rolling_counter_0x310_);
  std::swap(bcm_turnindicatorsts_, other->bcm_turnindicatorsts_);
  std::swap(bcm_checksum_0x310_, other->bcm_checksum_0x310_);
  std::swap(bcm_doorstsfrntle_, other->bcm_doorstsfrntle_);
  std::swap(bcm_doorlockstsrearri_, other->bcm_doorlockstsrearri_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gw_bcm_door_0x310_310::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gw_bcm_door_0x310_310

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsrearriType bcm_doorstsrearri = 1;
bool Gw_bcm_door_0x310_310::has_bcm_doorstsrearri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_doorstsrearri() {
  _has_bits_[0] |= 0x00000001u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_doorstsrearri() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gw_bcm_door_0x310_310::clear_bcm_doorstsrearri() {
  bcm_doorstsrearri_ = 0;
  clear_has_bcm_doorstsrearri();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearriType Gw_bcm_door_0x310_310::bcm_doorstsrearri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorstsrearri)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearriType >(bcm_doorstsrearri_);
}
void Gw_bcm_door_0x310_310::set_bcm_doorstsrearri(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearriType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearriType_IsValid(value));
  set_has_bcm_doorstsrearri();
  bcm_doorstsrearri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorstsrearri)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsrearleType bcm_doorlockstsrearle = 2;
bool Gw_bcm_door_0x310_310::has_bcm_doorlockstsrearle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_doorlockstsrearle() {
  _has_bits_[0] |= 0x00000002u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_doorlockstsrearle() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gw_bcm_door_0x310_310::clear_bcm_doorlockstsrearle() {
  bcm_doorlockstsrearle_ = 0;
  clear_has_bcm_doorlockstsrearle();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType Gw_bcm_door_0x310_310::bcm_doorlockstsrearle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockstsrearle)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType >(bcm_doorlockstsrearle_);
}
void Gw_bcm_door_0x310_310::set_bcm_doorlockstsrearle(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearleType_IsValid(value));
  set_has_bcm_doorlockstsrearle();
  bcm_doorlockstsrearle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockstsrearle)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsfrntriType bcm_doorlockstsfrntri = 3;
bool Gw_bcm_door_0x310_310::has_bcm_doorlockstsfrntri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_doorlockstsfrntri() {
  _has_bits_[0] |= 0x00000004u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_doorlockstsfrntri() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gw_bcm_door_0x310_310::clear_bcm_doorlockstsfrntri() {
  bcm_doorlockstsfrntri_ = 0;
  clear_has_bcm_doorlockstsfrntri();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType Gw_bcm_door_0x310_310::bcm_doorlockstsfrntri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockstsfrntri)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType >(bcm_doorlockstsfrntri_);
}
void Gw_bcm_door_0x310_310::set_bcm_doorlockstsfrntri(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntriType_IsValid(value));
  set_has_bcm_doorlockstsfrntri();
  bcm_doorlockstsfrntri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockstsfrntri)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsfrntleType bcm_doorlockstsfrntle = 4;
bool Gw_bcm_door_0x310_310::has_bcm_doorlockstsfrntle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_doorlockstsfrntle() {
  _has_bits_[0] |= 0x00000008u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_doorlockstsfrntle() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gw_bcm_door_0x310_310::clear_bcm_doorlockstsfrntle() {
  bcm_doorlockstsfrntle_ = 0;
  clear_has_bcm_doorlockstsfrntle();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType Gw_bcm_door_0x310_310::bcm_doorlockstsfrntle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockstsfrntle)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType >(bcm_doorlockstsfrntle_);
}
void Gw_bcm_door_0x310_310::set_bcm_doorlockstsfrntle(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsfrntleType_IsValid(value));
  set_has_bcm_doorlockstsfrntle();
  bcm_doorlockstsfrntle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockstsfrntle)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_antitheftstsType bcm_antitheftsts = 5;
bool Gw_bcm_door_0x310_310::has_bcm_antitheftsts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_antitheftsts() {
  _has_bits_[0] |= 0x00000010u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_antitheftsts() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gw_bcm_door_0x310_310::clear_bcm_antitheftsts() {
  bcm_antitheftsts_ = 0;
  clear_has_bcm_antitheftsts();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_antitheftstsType Gw_bcm_door_0x310_310::bcm_antitheftsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_antitheftsts)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_antitheftstsType >(bcm_antitheftsts_);
}
void Gw_bcm_door_0x310_310::set_bcm_antitheftsts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_antitheftstsType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_antitheftstsType_IsValid(value));
  set_has_bcm_antitheftsts();
  bcm_antitheftsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_antitheftsts)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_loadsensitivityType bcm_loadsensitivity = 6;
bool Gw_bcm_door_0x310_310::has_bcm_loadsensitivity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_loadsensitivity() {
  _has_bits_[0] |= 0x00000020u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_loadsensitivity() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gw_bcm_door_0x310_310::clear_bcm_loadsensitivity() {
  bcm_loadsensitivity_ = 0;
  clear_has_bcm_loadsensitivity();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_loadsensitivityType Gw_bcm_door_0x310_310::bcm_loadsensitivity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_loadsensitivity)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_loadsensitivityType >(bcm_loadsensitivity_);
}
void Gw_bcm_door_0x310_310::set_bcm_loadsensitivity(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_loadsensitivityType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_loadsensitivityType_IsValid(value));
  set_has_bcm_loadsensitivity();
  bcm_loadsensitivity_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_loadsensitivity)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_lockunlockfeedbackType bcm_lockunlockfeedback = 7;
bool Gw_bcm_door_0x310_310::has_bcm_lockunlockfeedback() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_lockunlockfeedback() {
  _has_bits_[0] |= 0x00000040u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_lockunlockfeedback() {
  _has_bits_[0] &= ~0x00000040u;
}
void Gw_bcm_door_0x310_310::clear_bcm_lockunlockfeedback() {
  bcm_lockunlockfeedback_ = 0;
  clear_has_bcm_lockunlockfeedback();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType Gw_bcm_door_0x310_310::bcm_lockunlockfeedback() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_lockunlockfeedback)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType >(bcm_lockunlockfeedback_);
}
void Gw_bcm_door_0x310_310::set_bcm_lockunlockfeedback(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_lockunlockfeedbackType_IsValid(value));
  set_has_bcm_lockunlockfeedback();
  bcm_lockunlockfeedback_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_lockunlockfeedback)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockststrunkType bcm_doorlockststrunk = 8;
bool Gw_bcm_door_0x310_310::has_bcm_doorlockststrunk() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_doorlockststrunk() {
  _has_bits_[0] |= 0x00000080u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_doorlockststrunk() {
  _has_bits_[0] &= ~0x00000080u;
}
void Gw_bcm_door_0x310_310::clear_bcm_doorlockststrunk() {
  bcm_doorlockststrunk_ = 0;
  clear_has_bcm_doorlockststrunk();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType Gw_bcm_door_0x310_310::bcm_doorlockststrunk() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockststrunk)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType >(bcm_doorlockststrunk_);
}
void Gw_bcm_door_0x310_310::set_bcm_doorlockststrunk(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockststrunkType_IsValid(value));
  set_has_bcm_doorlockststrunk();
  bcm_doorlockststrunk_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockststrunk)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorststrunkType bcm_doorststrunk = 9;
bool Gw_bcm_door_0x310_310::has_bcm_doorststrunk() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_doorststrunk() {
  _has_bits_[0] |= 0x00000100u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_doorststrunk() {
  _has_bits_[0] &= ~0x00000100u;
}
void Gw_bcm_door_0x310_310::clear_bcm_doorststrunk() {
  bcm_doorststrunk_ = 0;
  clear_has_bcm_doorststrunk();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorststrunkType Gw_bcm_door_0x310_310::bcm_doorststrunk() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorststrunk)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorststrunkType >(bcm_doorststrunk_);
}
void Gw_bcm_door_0x310_310::set_bcm_doorststrunk(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorststrunkType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorststrunkType_IsValid(value));
  set_has_bcm_doorststrunk();
  bcm_doorststrunk_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorststrunk)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_trunkdoorpreunlockstsType bcm_trunkdoorpreunlocksts = 10;
bool Gw_bcm_door_0x310_310::has_bcm_trunkdoorpreunlocksts() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_trunkdoorpreunlocksts() {
  _has_bits_[0] |= 0x00000200u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_trunkdoorpreunlocksts() {
  _has_bits_[0] &= ~0x00000200u;
}
void Gw_bcm_door_0x310_310::clear_bcm_trunkdoorpreunlocksts() {
  bcm_trunkdoorpreunlocksts_ = 0;
  clear_has_bcm_trunkdoorpreunlocksts();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType Gw_bcm_door_0x310_310::bcm_trunkdoorpreunlocksts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_trunkdoorpreunlocksts)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType >(bcm_trunkdoorpreunlocksts_);
}
void Gw_bcm_door_0x310_310::set_bcm_trunkdoorpreunlocksts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_trunkdoorpreunlockstsType_IsValid(value));
  set_has_bcm_trunkdoorpreunlocksts();
  bcm_trunkdoorpreunlocksts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_trunkdoorpreunlocksts)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsrearleType bcm_doorstsrearle = 11;
bool Gw_bcm_door_0x310_310::has_bcm_doorstsrearle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_doorstsrearle() {
  _has_bits_[0] |= 0x00000400u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_doorstsrearle() {
  _has_bits_[0] &= ~0x00000400u;
}
void Gw_bcm_door_0x310_310::clear_bcm_doorstsrearle() {
  bcm_doorstsrearle_ = 0;
  clear_has_bcm_doorstsrearle();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearleType Gw_bcm_door_0x310_310::bcm_doorstsrearle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorstsrearle)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearleType >(bcm_doorstsrearle_);
}
void Gw_bcm_door_0x310_310::set_bcm_doorstsrearle(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearleType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsrearleType_IsValid(value));
  set_has_bcm_doorstsrearle();
  bcm_doorstsrearle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorstsrearle)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_frontwiperstsType bcm_frontwipersts = 12;
bool Gw_bcm_door_0x310_310::has_bcm_frontwipersts() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_frontwipersts() {
  _has_bits_[0] |= 0x00000800u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_frontwipersts() {
  _has_bits_[0] &= ~0x00000800u;
}
void Gw_bcm_door_0x310_310::clear_bcm_frontwipersts() {
  bcm_frontwipersts_ = 0;
  clear_has_bcm_frontwipersts();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_frontwiperstsType Gw_bcm_door_0x310_310::bcm_frontwipersts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_frontwipersts)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_frontwiperstsType >(bcm_frontwipersts_);
}
void Gw_bcm_door_0x310_310::set_bcm_frontwipersts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_frontwiperstsType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_frontwiperstsType_IsValid(value));
  set_has_bcm_frontwipersts();
  bcm_frontwipersts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_frontwipersts)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_enginehoodstsType bcm_enginehoodsts = 13;
bool Gw_bcm_door_0x310_310::has_bcm_enginehoodsts() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_enginehoodsts() {
  _has_bits_[0] |= 0x00001000u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_enginehoodsts() {
  _has_bits_[0] &= ~0x00001000u;
}
void Gw_bcm_door_0x310_310::clear_bcm_enginehoodsts() {
  bcm_enginehoodsts_ = 0;
  clear_has_bcm_enginehoodsts();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_enginehoodstsType Gw_bcm_door_0x310_310::bcm_enginehoodsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_enginehoodsts)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_enginehoodstsType >(bcm_enginehoodsts_);
}
void Gw_bcm_door_0x310_310::set_bcm_enginehoodsts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_enginehoodstsType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_enginehoodstsType_IsValid(value));
  set_has_bcm_enginehoodsts();
  bcm_enginehoodsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_enginehoodsts)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_plg_driverswType bcm_plg_driversw = 14;
bool Gw_bcm_door_0x310_310::has_bcm_plg_driversw() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_plg_driversw() {
  _has_bits_[0] |= 0x00002000u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_plg_driversw() {
  _has_bits_[0] &= ~0x00002000u;
}
void Gw_bcm_door_0x310_310::clear_bcm_plg_driversw() {
  bcm_plg_driversw_ = 0;
  clear_has_bcm_plg_driversw();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_plg_driverswType Gw_bcm_door_0x310_310::bcm_plg_driversw() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_plg_driversw)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_plg_driverswType >(bcm_plg_driversw_);
}
void Gw_bcm_door_0x310_310::set_bcm_plg_driversw(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_plg_driverswType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_plg_driverswType_IsValid(value));
  set_has_bcm_plg_driversw();
  bcm_plg_driversw_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_plg_driversw)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_windowscmdType bcm_windowscmd = 15;
bool Gw_bcm_door_0x310_310::has_bcm_windowscmd() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_windowscmd() {
  _has_bits_[0] |= 0x00004000u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_windowscmd() {
  _has_bits_[0] &= ~0x00004000u;
}
void Gw_bcm_door_0x310_310::clear_bcm_windowscmd() {
  bcm_windowscmd_ = 0;
  clear_has_bcm_windowscmd();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_windowscmdType Gw_bcm_door_0x310_310::bcm_windowscmd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_windowscmd)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_windowscmdType >(bcm_windowscmd_);
}
void Gw_bcm_door_0x310_310::set_bcm_windowscmd(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_windowscmdType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_windowscmdType_IsValid(value));
  set_has_bcm_windowscmd();
  bcm_windowscmd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_windowscmd)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_rearwiperstsType bcm_rearwipersts = 16;
bool Gw_bcm_door_0x310_310::has_bcm_rearwipersts() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_rearwipersts() {
  _has_bits_[0] |= 0x00008000u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_rearwipersts() {
  _has_bits_[0] &= ~0x00008000u;
}
void Gw_bcm_door_0x310_310::clear_bcm_rearwipersts() {
  bcm_rearwipersts_ = 0;
  clear_has_bcm_rearwipersts();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_rearwiperstsType Gw_bcm_door_0x310_310::bcm_rearwipersts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_rearwipersts)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_rearwiperstsType >(bcm_rearwipersts_);
}
void Gw_bcm_door_0x310_310::set_bcm_rearwipersts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_rearwiperstsType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_rearwiperstsType_IsValid(value));
  set_has_bcm_rearwipersts();
  bcm_rearwipersts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_rearwipersts)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsfrntriType bcm_doorstsfrntri = 17;
bool Gw_bcm_door_0x310_310::has_bcm_doorstsfrntri() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_doorstsfrntri() {
  _has_bits_[0] |= 0x00010000u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_doorstsfrntri() {
  _has_bits_[0] &= ~0x00010000u;
}
void Gw_bcm_door_0x310_310::clear_bcm_doorstsfrntri() {
  bcm_doorstsfrntri_ = 0;
  clear_has_bcm_doorstsfrntri();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType Gw_bcm_door_0x310_310::bcm_doorstsfrntri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorstsfrntri)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType >(bcm_doorstsfrntri_);
}
void Gw_bcm_door_0x310_310::set_bcm_doorstsfrntri(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntriType_IsValid(value));
  set_has_bcm_doorstsfrntri();
  bcm_doorstsfrntri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorstsfrntri)
}

// optional int32 bcm_rolling_counter_0x310 = 18;
bool Gw_bcm_door_0x310_310::has_bcm_rolling_counter_0x310() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_rolling_counter_0x310() {
  _has_bits_[0] |= 0x00020000u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_rolling_counter_0x310() {
  _has_bits_[0] &= ~0x00020000u;
}
void Gw_bcm_door_0x310_310::clear_bcm_rolling_counter_0x310() {
  bcm_rolling_counter_0x310_ = 0;
  clear_has_bcm_rolling_counter_0x310();
}
::google::protobuf::int32 Gw_bcm_door_0x310_310::bcm_rolling_counter_0x310() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_rolling_counter_0x310)
  return bcm_rolling_counter_0x310_;
}
void Gw_bcm_door_0x310_310::set_bcm_rolling_counter_0x310(::google::protobuf::int32 value) {
  set_has_bcm_rolling_counter_0x310();
  bcm_rolling_counter_0x310_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_rolling_counter_0x310)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_turnindicatorstsType bcm_turnindicatorsts = 19;
bool Gw_bcm_door_0x310_310::has_bcm_turnindicatorsts() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_turnindicatorsts() {
  _has_bits_[0] |= 0x00040000u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_turnindicatorsts() {
  _has_bits_[0] &= ~0x00040000u;
}
void Gw_bcm_door_0x310_310::clear_bcm_turnindicatorsts() {
  bcm_turnindicatorsts_ = 0;
  clear_has_bcm_turnindicatorsts();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType Gw_bcm_door_0x310_310::bcm_turnindicatorsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_turnindicatorsts)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType >(bcm_turnindicatorsts_);
}
void Gw_bcm_door_0x310_310::set_bcm_turnindicatorsts(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_turnindicatorstsType_IsValid(value));
  set_has_bcm_turnindicatorsts();
  bcm_turnindicatorsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_turnindicatorsts)
}

// optional int32 bcm_checksum_0x310 = 20;
bool Gw_bcm_door_0x310_310::has_bcm_checksum_0x310() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_checksum_0x310() {
  _has_bits_[0] |= 0x00080000u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_checksum_0x310() {
  _has_bits_[0] &= ~0x00080000u;
}
void Gw_bcm_door_0x310_310::clear_bcm_checksum_0x310() {
  bcm_checksum_0x310_ = 0;
  clear_has_bcm_checksum_0x310();
}
::google::protobuf::int32 Gw_bcm_door_0x310_310::bcm_checksum_0x310() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_checksum_0x310)
  return bcm_checksum_0x310_;
}
void Gw_bcm_door_0x310_310::set_bcm_checksum_0x310(::google::protobuf::int32 value) {
  set_has_bcm_checksum_0x310();
  bcm_checksum_0x310_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_checksum_0x310)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorstsfrntleType bcm_doorstsfrntle = 21;
bool Gw_bcm_door_0x310_310::has_bcm_doorstsfrntle() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_doorstsfrntle() {
  _has_bits_[0] |= 0x00100000u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_doorstsfrntle() {
  _has_bits_[0] &= ~0x00100000u;
}
void Gw_bcm_door_0x310_310::clear_bcm_doorstsfrntle() {
  bcm_doorstsfrntle_ = 0;
  clear_has_bcm_doorstsfrntle();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType Gw_bcm_door_0x310_310::bcm_doorstsfrntle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorstsfrntle)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType >(bcm_doorstsfrntle_);
}
void Gw_bcm_door_0x310_310::set_bcm_doorstsfrntle(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorstsfrntleType_IsValid(value));
  set_has_bcm_doorstsfrntle();
  bcm_doorstsfrntle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorstsfrntle)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310.Bcm_doorlockstsrearriType bcm_doorlockstsrearri = 22;
bool Gw_bcm_door_0x310_310::has_bcm_doorlockstsrearri() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Gw_bcm_door_0x310_310::set_has_bcm_doorlockstsrearri() {
  _has_bits_[0] |= 0x00200000u;
}
void Gw_bcm_door_0x310_310::clear_has_bcm_doorlockstsrearri() {
  _has_bits_[0] &= ~0x00200000u;
}
void Gw_bcm_door_0x310_310::clear_bcm_doorlockstsrearri() {
  bcm_doorlockstsrearri_ = 0;
  clear_has_bcm_doorlockstsrearri();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType Gw_bcm_door_0x310_310::bcm_doorlockstsrearri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockstsrearri)
  return static_cast< ::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType >(bcm_doorlockstsrearri_);
}
void Gw_bcm_door_0x310_310::set_bcm_doorlockstsrearri(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType value) {
  assert(::jmc_auto::canbus::Gw_bcm_door_0x310_310_Bcm_doorlockstsrearriType_IsValid(value));
  set_has_bcm_doorlockstsrearri();
  bcm_doorlockstsrearri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_bcm_door_0x310_310.bcm_doorlockstsrearri)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pam_0x270_270::kPamEspTargetGearRequestFieldNumber;
const int Pam_0x270_270::kPamBrakefunctionmodeFieldNumber;
const int Pam_0x270_270::kStopstartinhibitApaFieldNumber;
const int Pam_0x270_270::kPamApafFieldNumber;
const int Pam_0x270_270::kPamCmdepsstsFieldNumber;
const int Pam_0x270_270::kPamStsFieldNumber;
const int Pam_0x270_270::kPamBrakemodestsFieldNumber;
const int Pam_0x270_270::kPamFailurebrakemodeFieldNumber;
const int Pam_0x270_270::kPamEspSpeedTargetFieldNumber;
const int Pam_0x270_270::kPamEspStopDistanceFieldNumber;
const int Pam_0x270_270::kRollingCounter0X270FieldNumber;
const int Pam_0x270_270::kChecksum0X270FieldNumber;
const int Pam_0x270_270::kPamTrgtepsstrgwhlangFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pam_0x270_270::Pam_0x270_270()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Pam_0x270_270)
}
Pam_0x270_270::Pam_0x270_270(const Pam_0x270_270& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pam_esp_target_gear_request_, &from.pam_esp_target_gear_request_,
    reinterpret_cast<char*>(&pam_trgtepsstrgwhlang_) -
    reinterpret_cast<char*>(&pam_esp_target_gear_request_) + sizeof(pam_trgtepsstrgwhlang_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Pam_0x270_270)
}

void Pam_0x270_270::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pam_esp_target_gear_request_, 0, reinterpret_cast<char*>(&pam_trgtepsstrgwhlang_) -
    reinterpret_cast<char*>(&pam_esp_target_gear_request_) + sizeof(pam_trgtepsstrgwhlang_));
}

Pam_0x270_270::~Pam_0x270_270() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Pam_0x270_270)
  SharedDtor();
}

void Pam_0x270_270::SharedDtor() {
}

void Pam_0x270_270::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pam_0x270_270::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pam_0x270_270& Pam_0x270_270::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pam_0x270_270* Pam_0x270_270::New(::google::protobuf::Arena* arena) const {
  Pam_0x270_270* n = new Pam_0x270_270;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pam_0x270_270::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Pam_0x270_270)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&pam_esp_target_gear_request_, 0, reinterpret_cast<char*>(&pam_failurebrakemode_) -
      reinterpret_cast<char*>(&pam_esp_target_gear_request_) + sizeof(pam_failurebrakemode_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&pam_esp_speed_target_, 0, reinterpret_cast<char*>(&pam_trgtepsstrgwhlang_) -
      reinterpret_cast<char*>(&pam_esp_speed_target_) + sizeof(pam_trgtepsstrgwhlang_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pam_0x270_270::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Pam_0x270_270)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Pam_0x270_270.Pam_esp_target_gear_requestType pam_esp_target_gear_request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x270_270_Pam_esp_target_gear_requestType_IsValid(value)) {
            set_pam_esp_target_gear_request(static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_esp_target_gear_requestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x270_270.Pam_brakefunctionmodeType pam_brakefunctionmode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x270_270_Pam_brakefunctionmodeType_IsValid(value)) {
            set_pam_brakefunctionmode(static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_brakefunctionmodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x270_270.Stopstartinhibit_apaType stopstartinhibit_apa = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x270_270_Stopstartinhibit_apaType_IsValid(value)) {
            set_stopstartinhibit_apa(static_cast< ::jmc_auto::canbus::Pam_0x270_270_Stopstartinhibit_apaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x270_270.Pam_apafType pam_apaf = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x270_270_Pam_apafType_IsValid(value)) {
            set_pam_apaf(static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_apafType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x270_270.Pam_cmdepsstsType pam_cmdepssts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x270_270_Pam_cmdepsstsType_IsValid(value)) {
            set_pam_cmdepssts(static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_cmdepsstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x270_270.Pam_stsType pam_sts = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x270_270_Pam_stsType_IsValid(value)) {
            set_pam_sts(static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_stsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x270_270.Pam_brakemodestsType pam_brakemodests = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x270_270_Pam_brakemodestsType_IsValid(value)) {
            set_pam_brakemodests(static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_brakemodestsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x270_270.Pam_failurebrakemodeType pam_failurebrakemode = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x270_270_Pam_failurebrakemodeType_IsValid(value)) {
            set_pam_failurebrakemode(static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_failurebrakemodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pam_esp_speed_target = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_pam_esp_speed_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pam_esp_speed_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pam_esp_stop_distance = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_pam_esp_stop_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pam_esp_stop_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x270 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_rolling_counter_0x270();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x270_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x270 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_checksum_0x270();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x270_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pam_trgtepsstrgwhlang = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_pam_trgtepsstrgwhlang();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pam_trgtepsstrgwhlang_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Pam_0x270_270)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Pam_0x270_270)
  return false;
#undef DO_
}

void Pam_0x270_270::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Pam_0x270_270)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_esp_target_gear_requestType pam_esp_target_gear_request = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pam_esp_target_gear_request(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_brakefunctionmodeType pam_brakefunctionmode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pam_brakefunctionmode(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x270_270.Stopstartinhibit_apaType stopstartinhibit_apa = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->stopstartinhibit_apa(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_apafType pam_apaf = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->pam_apaf(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_cmdepsstsType pam_cmdepssts = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->pam_cmdepssts(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_stsType pam_sts = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->pam_sts(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_brakemodestsType pam_brakemodests = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->pam_brakemodests(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_failurebrakemodeType pam_failurebrakemode = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->pam_failurebrakemode(), output);
  }

  // optional float pam_esp_speed_target = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->pam_esp_speed_target(), output);
  }

  // optional int32 pam_esp_stop_distance = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pam_esp_stop_distance(), output);
  }

  // optional int32 rolling_counter_0x270 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->rolling_counter_0x270(), output);
  }

  // optional int32 checksum_0x270 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->checksum_0x270(), output);
  }

  // optional double pam_trgtepsstrgwhlang = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->pam_trgtepsstrgwhlang(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Pam_0x270_270)
}

::google::protobuf::uint8* Pam_0x270_270::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Pam_0x270_270)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_esp_target_gear_requestType pam_esp_target_gear_request = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pam_esp_target_gear_request(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_brakefunctionmodeType pam_brakefunctionmode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pam_brakefunctionmode(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x270_270.Stopstartinhibit_apaType stopstartinhibit_apa = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->stopstartinhibit_apa(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_apafType pam_apaf = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->pam_apaf(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_cmdepsstsType pam_cmdepssts = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->pam_cmdepssts(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_stsType pam_sts = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->pam_sts(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_brakemodestsType pam_brakemodests = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->pam_brakemodests(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x270_270.Pam_failurebrakemodeType pam_failurebrakemode = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->pam_failurebrakemode(), target);
  }

  // optional float pam_esp_speed_target = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->pam_esp_speed_target(), target);
  }

  // optional int32 pam_esp_stop_distance = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pam_esp_stop_distance(), target);
  }

  // optional int32 rolling_counter_0x270 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->rolling_counter_0x270(), target);
  }

  // optional int32 checksum_0x270 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->checksum_0x270(), target);
  }

  // optional double pam_trgtepsstrgwhlang = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->pam_trgtepsstrgwhlang(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Pam_0x270_270)
  return target;
}

size_t Pam_0x270_270::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Pam_0x270_270)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Pam_0x270_270.Pam_esp_target_gear_requestType pam_esp_target_gear_request = 1;
    if (has_pam_esp_target_gear_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_esp_target_gear_request());
    }

    // optional .jmc_auto.canbus.Pam_0x270_270.Pam_brakefunctionmodeType pam_brakefunctionmode = 2;
    if (has_pam_brakefunctionmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_brakefunctionmode());
    }

    // optional .jmc_auto.canbus.Pam_0x270_270.Stopstartinhibit_apaType stopstartinhibit_apa = 3;
    if (has_stopstartinhibit_apa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stopstartinhibit_apa());
    }

    // optional .jmc_auto.canbus.Pam_0x270_270.Pam_apafType pam_apaf = 4;
    if (has_pam_apaf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_apaf());
    }

    // optional .jmc_auto.canbus.Pam_0x270_270.Pam_cmdepsstsType pam_cmdepssts = 5;
    if (has_pam_cmdepssts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_cmdepssts());
    }

    // optional .jmc_auto.canbus.Pam_0x270_270.Pam_stsType pam_sts = 6;
    if (has_pam_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_sts());
    }

    // optional .jmc_auto.canbus.Pam_0x270_270.Pam_brakemodestsType pam_brakemodests = 7;
    if (has_pam_brakemodests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_brakemodests());
    }

    // optional .jmc_auto.canbus.Pam_0x270_270.Pam_failurebrakemodeType pam_failurebrakemode = 8;
    if (has_pam_failurebrakemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_failurebrakemode());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional float pam_esp_speed_target = 9;
    if (has_pam_esp_speed_target()) {
      total_size += 1 + 4;
    }

    // optional int32 pam_esp_stop_distance = 10;
    if (has_pam_esp_stop_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pam_esp_stop_distance());
    }

    // optional int32 rolling_counter_0x270 = 11;
    if (has_rolling_counter_0x270()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x270());
    }

    // optional int32 checksum_0x270 = 12;
    if (has_checksum_0x270()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x270());
    }

    // optional double pam_trgtepsstrgwhlang = 13;
    if (has_pam_trgtepsstrgwhlang()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pam_0x270_270::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Pam_0x270_270)
  GOOGLE_DCHECK_NE(&from, this);
  const Pam_0x270_270* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pam_0x270_270>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Pam_0x270_270)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Pam_0x270_270)
    MergeFrom(*source);
  }
}

void Pam_0x270_270::MergeFrom(const Pam_0x270_270& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Pam_0x270_270)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      pam_esp_target_gear_request_ = from.pam_esp_target_gear_request_;
    }
    if (cached_has_bits & 0x00000002u) {
      pam_brakefunctionmode_ = from.pam_brakefunctionmode_;
    }
    if (cached_has_bits & 0x00000004u) {
      stopstartinhibit_apa_ = from.stopstartinhibit_apa_;
    }
    if (cached_has_bits & 0x00000008u) {
      pam_apaf_ = from.pam_apaf_;
    }
    if (cached_has_bits & 0x00000010u) {
      pam_cmdepssts_ = from.pam_cmdepssts_;
    }
    if (cached_has_bits & 0x00000020u) {
      pam_sts_ = from.pam_sts_;
    }
    if (cached_has_bits & 0x00000040u) {
      pam_brakemodests_ = from.pam_brakemodests_;
    }
    if (cached_has_bits & 0x00000080u) {
      pam_failurebrakemode_ = from.pam_failurebrakemode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      pam_esp_speed_target_ = from.pam_esp_speed_target_;
    }
    if (cached_has_bits & 0x00000200u) {
      pam_esp_stop_distance_ = from.pam_esp_stop_distance_;
    }
    if (cached_has_bits & 0x00000400u) {
      rolling_counter_0x270_ = from.rolling_counter_0x270_;
    }
    if (cached_has_bits & 0x00000800u) {
      checksum_0x270_ = from.checksum_0x270_;
    }
    if (cached_has_bits & 0x00001000u) {
      pam_trgtepsstrgwhlang_ = from.pam_trgtepsstrgwhlang_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pam_0x270_270::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Pam_0x270_270)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pam_0x270_270::CopyFrom(const Pam_0x270_270& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Pam_0x270_270)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pam_0x270_270::IsInitialized() const {
  return true;
}

void Pam_0x270_270::Swap(Pam_0x270_270* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pam_0x270_270::InternalSwap(Pam_0x270_270* other) {
  std::swap(pam_esp_target_gear_request_, other->pam_esp_target_gear_request_);
  std::swap(pam_brakefunctionmode_, other->pam_brakefunctionmode_);
  std::swap(stopstartinhibit_apa_, other->stopstartinhibit_apa_);
  std::swap(pam_apaf_, other->pam_apaf_);
  std::swap(pam_cmdepssts_, other->pam_cmdepssts_);
  std::swap(pam_sts_, other->pam_sts_);
  std::swap(pam_brakemodests_, other->pam_brakemodests_);
  std::swap(pam_failurebrakemode_, other->pam_failurebrakemode_);
  std::swap(pam_esp_speed_target_, other->pam_esp_speed_target_);
  std::swap(pam_esp_stop_distance_, other->pam_esp_stop_distance_);
  std::swap(rolling_counter_0x270_, other->rolling_counter_0x270_);
  std::swap(checksum_0x270_, other->checksum_0x270_);
  std::swap(pam_trgtepsstrgwhlang_, other->pam_trgtepsstrgwhlang_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pam_0x270_270::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pam_0x270_270

// optional .jmc_auto.canbus.Pam_0x270_270.Pam_esp_target_gear_requestType pam_esp_target_gear_request = 1;
bool Pam_0x270_270::has_pam_esp_target_gear_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Pam_0x270_270::set_has_pam_esp_target_gear_request() {
  _has_bits_[0] |= 0x00000001u;
}
void Pam_0x270_270::clear_has_pam_esp_target_gear_request() {
  _has_bits_[0] &= ~0x00000001u;
}
void Pam_0x270_270::clear_pam_esp_target_gear_request() {
  pam_esp_target_gear_request_ = 0;
  clear_has_pam_esp_target_gear_request();
}
::jmc_auto::canbus::Pam_0x270_270_Pam_esp_target_gear_requestType Pam_0x270_270::pam_esp_target_gear_request() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_esp_target_gear_request)
  return static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_esp_target_gear_requestType >(pam_esp_target_gear_request_);
}
void Pam_0x270_270::set_pam_esp_target_gear_request(::jmc_auto::canbus::Pam_0x270_270_Pam_esp_target_gear_requestType value) {
  assert(::jmc_auto::canbus::Pam_0x270_270_Pam_esp_target_gear_requestType_IsValid(value));
  set_has_pam_esp_target_gear_request();
  pam_esp_target_gear_request_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_esp_target_gear_request)
}

// optional .jmc_auto.canbus.Pam_0x270_270.Pam_brakefunctionmodeType pam_brakefunctionmode = 2;
bool Pam_0x270_270::has_pam_brakefunctionmode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Pam_0x270_270::set_has_pam_brakefunctionmode() {
  _has_bits_[0] |= 0x00000002u;
}
void Pam_0x270_270::clear_has_pam_brakefunctionmode() {
  _has_bits_[0] &= ~0x00000002u;
}
void Pam_0x270_270::clear_pam_brakefunctionmode() {
  pam_brakefunctionmode_ = 0;
  clear_has_pam_brakefunctionmode();
}
::jmc_auto::canbus::Pam_0x270_270_Pam_brakefunctionmodeType Pam_0x270_270::pam_brakefunctionmode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_brakefunctionmode)
  return static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_brakefunctionmodeType >(pam_brakefunctionmode_);
}
void Pam_0x270_270::set_pam_brakefunctionmode(::jmc_auto::canbus::Pam_0x270_270_Pam_brakefunctionmodeType value) {
  assert(::jmc_auto::canbus::Pam_0x270_270_Pam_brakefunctionmodeType_IsValid(value));
  set_has_pam_brakefunctionmode();
  pam_brakefunctionmode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_brakefunctionmode)
}

// optional .jmc_auto.canbus.Pam_0x270_270.Stopstartinhibit_apaType stopstartinhibit_apa = 3;
bool Pam_0x270_270::has_stopstartinhibit_apa() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Pam_0x270_270::set_has_stopstartinhibit_apa() {
  _has_bits_[0] |= 0x00000004u;
}
void Pam_0x270_270::clear_has_stopstartinhibit_apa() {
  _has_bits_[0] &= ~0x00000004u;
}
void Pam_0x270_270::clear_stopstartinhibit_apa() {
  stopstartinhibit_apa_ = 0;
  clear_has_stopstartinhibit_apa();
}
::jmc_auto::canbus::Pam_0x270_270_Stopstartinhibit_apaType Pam_0x270_270::stopstartinhibit_apa() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.stopstartinhibit_apa)
  return static_cast< ::jmc_auto::canbus::Pam_0x270_270_Stopstartinhibit_apaType >(stopstartinhibit_apa_);
}
void Pam_0x270_270::set_stopstartinhibit_apa(::jmc_auto::canbus::Pam_0x270_270_Stopstartinhibit_apaType value) {
  assert(::jmc_auto::canbus::Pam_0x270_270_Stopstartinhibit_apaType_IsValid(value));
  set_has_stopstartinhibit_apa();
  stopstartinhibit_apa_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.stopstartinhibit_apa)
}

// optional .jmc_auto.canbus.Pam_0x270_270.Pam_apafType pam_apaf = 4;
bool Pam_0x270_270::has_pam_apaf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Pam_0x270_270::set_has_pam_apaf() {
  _has_bits_[0] |= 0x00000008u;
}
void Pam_0x270_270::clear_has_pam_apaf() {
  _has_bits_[0] &= ~0x00000008u;
}
void Pam_0x270_270::clear_pam_apaf() {
  pam_apaf_ = 0;
  clear_has_pam_apaf();
}
::jmc_auto::canbus::Pam_0x270_270_Pam_apafType Pam_0x270_270::pam_apaf() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_apaf)
  return static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_apafType >(pam_apaf_);
}
void Pam_0x270_270::set_pam_apaf(::jmc_auto::canbus::Pam_0x270_270_Pam_apafType value) {
  assert(::jmc_auto::canbus::Pam_0x270_270_Pam_apafType_IsValid(value));
  set_has_pam_apaf();
  pam_apaf_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_apaf)
}

// optional .jmc_auto.canbus.Pam_0x270_270.Pam_cmdepsstsType pam_cmdepssts = 5;
bool Pam_0x270_270::has_pam_cmdepssts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Pam_0x270_270::set_has_pam_cmdepssts() {
  _has_bits_[0] |= 0x00000010u;
}
void Pam_0x270_270::clear_has_pam_cmdepssts() {
  _has_bits_[0] &= ~0x00000010u;
}
void Pam_0x270_270::clear_pam_cmdepssts() {
  pam_cmdepssts_ = 0;
  clear_has_pam_cmdepssts();
}
::jmc_auto::canbus::Pam_0x270_270_Pam_cmdepsstsType Pam_0x270_270::pam_cmdepssts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_cmdepssts)
  return static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_cmdepsstsType >(pam_cmdepssts_);
}
void Pam_0x270_270::set_pam_cmdepssts(::jmc_auto::canbus::Pam_0x270_270_Pam_cmdepsstsType value) {
  assert(::jmc_auto::canbus::Pam_0x270_270_Pam_cmdepsstsType_IsValid(value));
  set_has_pam_cmdepssts();
  pam_cmdepssts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_cmdepssts)
}

// optional .jmc_auto.canbus.Pam_0x270_270.Pam_stsType pam_sts = 6;
bool Pam_0x270_270::has_pam_sts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Pam_0x270_270::set_has_pam_sts() {
  _has_bits_[0] |= 0x00000020u;
}
void Pam_0x270_270::clear_has_pam_sts() {
  _has_bits_[0] &= ~0x00000020u;
}
void Pam_0x270_270::clear_pam_sts() {
  pam_sts_ = 0;
  clear_has_pam_sts();
}
::jmc_auto::canbus::Pam_0x270_270_Pam_stsType Pam_0x270_270::pam_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_sts)
  return static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_stsType >(pam_sts_);
}
void Pam_0x270_270::set_pam_sts(::jmc_auto::canbus::Pam_0x270_270_Pam_stsType value) {
  assert(::jmc_auto::canbus::Pam_0x270_270_Pam_stsType_IsValid(value));
  set_has_pam_sts();
  pam_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_sts)
}

// optional .jmc_auto.canbus.Pam_0x270_270.Pam_brakemodestsType pam_brakemodests = 7;
bool Pam_0x270_270::has_pam_brakemodests() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Pam_0x270_270::set_has_pam_brakemodests() {
  _has_bits_[0] |= 0x00000040u;
}
void Pam_0x270_270::clear_has_pam_brakemodests() {
  _has_bits_[0] &= ~0x00000040u;
}
void Pam_0x270_270::clear_pam_brakemodests() {
  pam_brakemodests_ = 0;
  clear_has_pam_brakemodests();
}
::jmc_auto::canbus::Pam_0x270_270_Pam_brakemodestsType Pam_0x270_270::pam_brakemodests() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_brakemodests)
  return static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_brakemodestsType >(pam_brakemodests_);
}
void Pam_0x270_270::set_pam_brakemodests(::jmc_auto::canbus::Pam_0x270_270_Pam_brakemodestsType value) {
  assert(::jmc_auto::canbus::Pam_0x270_270_Pam_brakemodestsType_IsValid(value));
  set_has_pam_brakemodests();
  pam_brakemodests_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_brakemodests)
}

// optional .jmc_auto.canbus.Pam_0x270_270.Pam_failurebrakemodeType pam_failurebrakemode = 8;
bool Pam_0x270_270::has_pam_failurebrakemode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Pam_0x270_270::set_has_pam_failurebrakemode() {
  _has_bits_[0] |= 0x00000080u;
}
void Pam_0x270_270::clear_has_pam_failurebrakemode() {
  _has_bits_[0] &= ~0x00000080u;
}
void Pam_0x270_270::clear_pam_failurebrakemode() {
  pam_failurebrakemode_ = 0;
  clear_has_pam_failurebrakemode();
}
::jmc_auto::canbus::Pam_0x270_270_Pam_failurebrakemodeType Pam_0x270_270::pam_failurebrakemode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_failurebrakemode)
  return static_cast< ::jmc_auto::canbus::Pam_0x270_270_Pam_failurebrakemodeType >(pam_failurebrakemode_);
}
void Pam_0x270_270::set_pam_failurebrakemode(::jmc_auto::canbus::Pam_0x270_270_Pam_failurebrakemodeType value) {
  assert(::jmc_auto::canbus::Pam_0x270_270_Pam_failurebrakemodeType_IsValid(value));
  set_has_pam_failurebrakemode();
  pam_failurebrakemode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_failurebrakemode)
}

// optional float pam_esp_speed_target = 9;
bool Pam_0x270_270::has_pam_esp_speed_target() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Pam_0x270_270::set_has_pam_esp_speed_target() {
  _has_bits_[0] |= 0x00000100u;
}
void Pam_0x270_270::clear_has_pam_esp_speed_target() {
  _has_bits_[0] &= ~0x00000100u;
}
void Pam_0x270_270::clear_pam_esp_speed_target() {
  pam_esp_speed_target_ = 0;
  clear_has_pam_esp_speed_target();
}
float Pam_0x270_270::pam_esp_speed_target() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_esp_speed_target)
  return pam_esp_speed_target_;
}
void Pam_0x270_270::set_pam_esp_speed_target(float value) {
  set_has_pam_esp_speed_target();
  pam_esp_speed_target_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_esp_speed_target)
}

// optional int32 pam_esp_stop_distance = 10;
bool Pam_0x270_270::has_pam_esp_stop_distance() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Pam_0x270_270::set_has_pam_esp_stop_distance() {
  _has_bits_[0] |= 0x00000200u;
}
void Pam_0x270_270::clear_has_pam_esp_stop_distance() {
  _has_bits_[0] &= ~0x00000200u;
}
void Pam_0x270_270::clear_pam_esp_stop_distance() {
  pam_esp_stop_distance_ = 0;
  clear_has_pam_esp_stop_distance();
}
::google::protobuf::int32 Pam_0x270_270::pam_esp_stop_distance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_esp_stop_distance)
  return pam_esp_stop_distance_;
}
void Pam_0x270_270::set_pam_esp_stop_distance(::google::protobuf::int32 value) {
  set_has_pam_esp_stop_distance();
  pam_esp_stop_distance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_esp_stop_distance)
}

// optional int32 rolling_counter_0x270 = 11;
bool Pam_0x270_270::has_rolling_counter_0x270() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Pam_0x270_270::set_has_rolling_counter_0x270() {
  _has_bits_[0] |= 0x00000400u;
}
void Pam_0x270_270::clear_has_rolling_counter_0x270() {
  _has_bits_[0] &= ~0x00000400u;
}
void Pam_0x270_270::clear_rolling_counter_0x270() {
  rolling_counter_0x270_ = 0;
  clear_has_rolling_counter_0x270();
}
::google::protobuf::int32 Pam_0x270_270::rolling_counter_0x270() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.rolling_counter_0x270)
  return rolling_counter_0x270_;
}
void Pam_0x270_270::set_rolling_counter_0x270(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x270();
  rolling_counter_0x270_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.rolling_counter_0x270)
}

// optional int32 checksum_0x270 = 12;
bool Pam_0x270_270::has_checksum_0x270() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Pam_0x270_270::set_has_checksum_0x270() {
  _has_bits_[0] |= 0x00000800u;
}
void Pam_0x270_270::clear_has_checksum_0x270() {
  _has_bits_[0] &= ~0x00000800u;
}
void Pam_0x270_270::clear_checksum_0x270() {
  checksum_0x270_ = 0;
  clear_has_checksum_0x270();
}
::google::protobuf::int32 Pam_0x270_270::checksum_0x270() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.checksum_0x270)
  return checksum_0x270_;
}
void Pam_0x270_270::set_checksum_0x270(::google::protobuf::int32 value) {
  set_has_checksum_0x270();
  checksum_0x270_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.checksum_0x270)
}

// optional double pam_trgtepsstrgwhlang = 13;
bool Pam_0x270_270::has_pam_trgtepsstrgwhlang() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Pam_0x270_270::set_has_pam_trgtepsstrgwhlang() {
  _has_bits_[0] |= 0x00001000u;
}
void Pam_0x270_270::clear_has_pam_trgtepsstrgwhlang() {
  _has_bits_[0] &= ~0x00001000u;
}
void Pam_0x270_270::clear_pam_trgtepsstrgwhlang() {
  pam_trgtepsstrgwhlang_ = 0;
  clear_has_pam_trgtepsstrgwhlang();
}
double Pam_0x270_270::pam_trgtepsstrgwhlang() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x270_270.pam_trgtepsstrgwhlang)
  return pam_trgtepsstrgwhlang_;
}
void Pam_0x270_270::set_pam_trgtepsstrgwhlang(double value) {
  set_has_pam_trgtepsstrgwhlang();
  pam_trgtepsstrgwhlang_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x270_270.pam_trgtepsstrgwhlang)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pam_0x271_271::kPamInfodisplayreqFieldNumber;
const int Pam_0x271_271::kPamObjectstsflmFieldNumber;
const int Pam_0x271_271::kPamObjectstsflcFieldNumber;
const int Pam_0x271_271::kPamObjectstsfrcFieldNumber;
const int Pam_0x271_271::kPamObjectstsfrmFieldNumber;
const int Pam_0x271_271::kPamObjectstsrlmFieldNumber;
const int Pam_0x271_271::kPamObjectstsrlcFieldNumber;
const int Pam_0x271_271::kPamObjectstsrrcFieldNumber;
const int Pam_0x271_271::kPamObjectstsrrmFieldNumber;
const int Pam_0x271_271::kPamChimecmdsoundstatusFieldNumber;
const int Pam_0x271_271::kPamRearsystemworkstsFieldNumber;
const int Pam_0x271_271::kPamFrontsystemworkstsFieldNumber;
const int Pam_0x271_271::kPamParkingbarstsFieldNumber;
const int Pam_0x271_271::kPamChimecmdsoundcadenceFieldNumber;
const int Pam_0x271_271::kPamParkingbarpercentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pam_0x271_271::Pam_0x271_271()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Pam_0x271_271)
}
Pam_0x271_271::Pam_0x271_271(const Pam_0x271_271& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pam_infodisplayreq_, &from.pam_infodisplayreq_,
    reinterpret_cast<char*>(&pam_parkingbarpercent_) -
    reinterpret_cast<char*>(&pam_infodisplayreq_) + sizeof(pam_parkingbarpercent_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Pam_0x271_271)
}

void Pam_0x271_271::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pam_infodisplayreq_, 0, reinterpret_cast<char*>(&pam_parkingbarpercent_) -
    reinterpret_cast<char*>(&pam_infodisplayreq_) + sizeof(pam_parkingbarpercent_));
}

Pam_0x271_271::~Pam_0x271_271() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Pam_0x271_271)
  SharedDtor();
}

void Pam_0x271_271::SharedDtor() {
}

void Pam_0x271_271::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pam_0x271_271::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pam_0x271_271& Pam_0x271_271::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pam_0x271_271* Pam_0x271_271::New(::google::protobuf::Arena* arena) const {
  Pam_0x271_271* n = new Pam_0x271_271;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pam_0x271_271::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Pam_0x271_271)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&pam_infodisplayreq_, 0, reinterpret_cast<char*>(&pam_objectstsrrc_) -
      reinterpret_cast<char*>(&pam_infodisplayreq_) + sizeof(pam_objectstsrrc_));
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ::memset(&pam_objectstsrrm_, 0, reinterpret_cast<char*>(&pam_parkingbarpercent_) -
      reinterpret_cast<char*>(&pam_objectstsrrm_) + sizeof(pam_parkingbarpercent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pam_0x271_271::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Pam_0x271_271)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Pam_0x271_271.Pam_infodisplayreqType pam_infodisplayreq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x271_271_Pam_infodisplayreqType_IsValid(value)) {
            set_pam_infodisplayreq(static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_infodisplayreqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsflmType pam_objectstsflm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflmType_IsValid(value)) {
            set_pam_objectstsflm(static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsflcType pam_objectstsflc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflcType_IsValid(value)) {
            set_pam_objectstsflc(static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflcType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsfrcType pam_objectstsfrc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrcType_IsValid(value)) {
            set_pam_objectstsfrc(static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrcType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsfrmType pam_objectstsfrm = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrmType_IsValid(value)) {
            set_pam_objectstsfrm(static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrlmType pam_objectstsrlm = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlmType_IsValid(value)) {
            set_pam_objectstsrlm(static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrlcType pam_objectstsrlc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlcType_IsValid(value)) {
            set_pam_objectstsrlc(static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlcType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrrcType pam_objectstsrrc = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrcType_IsValid(value)) {
            set_pam_objectstsrrc(static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrcType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrrmType pam_objectstsrrm = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrmType_IsValid(value)) {
            set_pam_objectstsrrm(static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x271_271.Pam_chimecmdsoundstatusType pam_chimecmdsoundstatus = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundstatusType_IsValid(value)) {
            set_pam_chimecmdsoundstatus(static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x271_271.Pam_rearsystemworkstsType pam_rearsystemworksts = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x271_271_Pam_rearsystemworkstsType_IsValid(value)) {
            set_pam_rearsystemworksts(static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_rearsystemworkstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x271_271.Pam_frontsystemworkstsType pam_frontsystemworksts = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x271_271_Pam_frontsystemworkstsType_IsValid(value)) {
            set_pam_frontsystemworksts(static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_frontsystemworkstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x271_271.Pam_parkingbarstsType pam_parkingbarsts = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarstsType_IsValid(value)) {
            set_pam_parkingbarsts(static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x271_271.Pam_chimecmdsoundcadenceType pam_chimecmdsoundcadence = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundcadenceType_IsValid(value)) {
            set_pam_chimecmdsoundcadence(static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundcadenceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x271_271.Pam_parkingbarpercentType pam_parkingbarpercent = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarpercentType_IsValid(value)) {
            set_pam_parkingbarpercent(static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarpercentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Pam_0x271_271)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Pam_0x271_271)
  return false;
#undef DO_
}

void Pam_0x271_271::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Pam_0x271_271)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_infodisplayreqType pam_infodisplayreq = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pam_infodisplayreq(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsflmType pam_objectstsflm = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pam_objectstsflm(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsflcType pam_objectstsflc = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->pam_objectstsflc(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsfrcType pam_objectstsfrc = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->pam_objectstsfrc(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsfrmType pam_objectstsfrm = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->pam_objectstsfrm(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrlmType pam_objectstsrlm = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->pam_objectstsrlm(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrlcType pam_objectstsrlc = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->pam_objectstsrlc(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrrcType pam_objectstsrrc = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->pam_objectstsrrc(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrrmType pam_objectstsrrm = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->pam_objectstsrrm(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_chimecmdsoundstatusType pam_chimecmdsoundstatus = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->pam_chimecmdsoundstatus(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_rearsystemworkstsType pam_rearsystemworksts = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->pam_rearsystemworksts(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_frontsystemworkstsType pam_frontsystemworksts = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->pam_frontsystemworksts(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_parkingbarstsType pam_parkingbarsts = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->pam_parkingbarsts(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_chimecmdsoundcadenceType pam_chimecmdsoundcadence = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->pam_chimecmdsoundcadence(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_parkingbarpercentType pam_parkingbarpercent = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->pam_parkingbarpercent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Pam_0x271_271)
}

::google::protobuf::uint8* Pam_0x271_271::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Pam_0x271_271)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_infodisplayreqType pam_infodisplayreq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pam_infodisplayreq(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsflmType pam_objectstsflm = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pam_objectstsflm(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsflcType pam_objectstsflc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->pam_objectstsflc(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsfrcType pam_objectstsfrc = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->pam_objectstsfrc(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsfrmType pam_objectstsfrm = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->pam_objectstsfrm(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrlmType pam_objectstsrlm = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->pam_objectstsrlm(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrlcType pam_objectstsrlc = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->pam_objectstsrlc(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrrcType pam_objectstsrrc = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->pam_objectstsrrc(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrrmType pam_objectstsrrm = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->pam_objectstsrrm(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_chimecmdsoundstatusType pam_chimecmdsoundstatus = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->pam_chimecmdsoundstatus(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_rearsystemworkstsType pam_rearsystemworksts = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->pam_rearsystemworksts(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_frontsystemworkstsType pam_frontsystemworksts = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->pam_frontsystemworksts(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_parkingbarstsType pam_parkingbarsts = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->pam_parkingbarsts(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_chimecmdsoundcadenceType pam_chimecmdsoundcadence = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->pam_chimecmdsoundcadence(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271.Pam_parkingbarpercentType pam_parkingbarpercent = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->pam_parkingbarpercent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Pam_0x271_271)
  return target;
}

size_t Pam_0x271_271::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Pam_0x271_271)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Pam_0x271_271.Pam_infodisplayreqType pam_infodisplayreq = 1;
    if (has_pam_infodisplayreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_infodisplayreq());
    }

    // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsflmType pam_objectstsflm = 2;
    if (has_pam_objectstsflm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_objectstsflm());
    }

    // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsflcType pam_objectstsflc = 3;
    if (has_pam_objectstsflc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_objectstsflc());
    }

    // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsfrcType pam_objectstsfrc = 4;
    if (has_pam_objectstsfrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_objectstsfrc());
    }

    // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsfrmType pam_objectstsfrm = 5;
    if (has_pam_objectstsfrm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_objectstsfrm());
    }

    // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrlmType pam_objectstsrlm = 6;
    if (has_pam_objectstsrlm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_objectstsrlm());
    }

    // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrlcType pam_objectstsrlc = 7;
    if (has_pam_objectstsrlc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_objectstsrlc());
    }

    // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrrcType pam_objectstsrrc = 8;
    if (has_pam_objectstsrrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_objectstsrrc());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrrmType pam_objectstsrrm = 9;
    if (has_pam_objectstsrrm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_objectstsrrm());
    }

    // optional .jmc_auto.canbus.Pam_0x271_271.Pam_chimecmdsoundstatusType pam_chimecmdsoundstatus = 10;
    if (has_pam_chimecmdsoundstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_chimecmdsoundstatus());
    }

    // optional .jmc_auto.canbus.Pam_0x271_271.Pam_rearsystemworkstsType pam_rearsystemworksts = 11;
    if (has_pam_rearsystemworksts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_rearsystemworksts());
    }

    // optional .jmc_auto.canbus.Pam_0x271_271.Pam_frontsystemworkstsType pam_frontsystemworksts = 12;
    if (has_pam_frontsystemworksts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_frontsystemworksts());
    }

    // optional .jmc_auto.canbus.Pam_0x271_271.Pam_parkingbarstsType pam_parkingbarsts = 13;
    if (has_pam_parkingbarsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_parkingbarsts());
    }

    // optional .jmc_auto.canbus.Pam_0x271_271.Pam_chimecmdsoundcadenceType pam_chimecmdsoundcadence = 14;
    if (has_pam_chimecmdsoundcadence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_chimecmdsoundcadence());
    }

    // optional .jmc_auto.canbus.Pam_0x271_271.Pam_parkingbarpercentType pam_parkingbarpercent = 15;
    if (has_pam_parkingbarpercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pam_parkingbarpercent());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pam_0x271_271::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Pam_0x271_271)
  GOOGLE_DCHECK_NE(&from, this);
  const Pam_0x271_271* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pam_0x271_271>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Pam_0x271_271)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Pam_0x271_271)
    MergeFrom(*source);
  }
}

void Pam_0x271_271::MergeFrom(const Pam_0x271_271& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Pam_0x271_271)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      pam_infodisplayreq_ = from.pam_infodisplayreq_;
    }
    if (cached_has_bits & 0x00000002u) {
      pam_objectstsflm_ = from.pam_objectstsflm_;
    }
    if (cached_has_bits & 0x00000004u) {
      pam_objectstsflc_ = from.pam_objectstsflc_;
    }
    if (cached_has_bits & 0x00000008u) {
      pam_objectstsfrc_ = from.pam_objectstsfrc_;
    }
    if (cached_has_bits & 0x00000010u) {
      pam_objectstsfrm_ = from.pam_objectstsfrm_;
    }
    if (cached_has_bits & 0x00000020u) {
      pam_objectstsrlm_ = from.pam_objectstsrlm_;
    }
    if (cached_has_bits & 0x00000040u) {
      pam_objectstsrlc_ = from.pam_objectstsrlc_;
    }
    if (cached_has_bits & 0x00000080u) {
      pam_objectstsrrc_ = from.pam_objectstsrrc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      pam_objectstsrrm_ = from.pam_objectstsrrm_;
    }
    if (cached_has_bits & 0x00000200u) {
      pam_chimecmdsoundstatus_ = from.pam_chimecmdsoundstatus_;
    }
    if (cached_has_bits & 0x00000400u) {
      pam_rearsystemworksts_ = from.pam_rearsystemworksts_;
    }
    if (cached_has_bits & 0x00000800u) {
      pam_frontsystemworksts_ = from.pam_frontsystemworksts_;
    }
    if (cached_has_bits & 0x00001000u) {
      pam_parkingbarsts_ = from.pam_parkingbarsts_;
    }
    if (cached_has_bits & 0x00002000u) {
      pam_chimecmdsoundcadence_ = from.pam_chimecmdsoundcadence_;
    }
    if (cached_has_bits & 0x00004000u) {
      pam_parkingbarpercent_ = from.pam_parkingbarpercent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pam_0x271_271::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Pam_0x271_271)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pam_0x271_271::CopyFrom(const Pam_0x271_271& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Pam_0x271_271)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pam_0x271_271::IsInitialized() const {
  return true;
}

void Pam_0x271_271::Swap(Pam_0x271_271* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pam_0x271_271::InternalSwap(Pam_0x271_271* other) {
  std::swap(pam_infodisplayreq_, other->pam_infodisplayreq_);
  std::swap(pam_objectstsflm_, other->pam_objectstsflm_);
  std::swap(pam_objectstsflc_, other->pam_objectstsflc_);
  std::swap(pam_objectstsfrc_, other->pam_objectstsfrc_);
  std::swap(pam_objectstsfrm_, other->pam_objectstsfrm_);
  std::swap(pam_objectstsrlm_, other->pam_objectstsrlm_);
  std::swap(pam_objectstsrlc_, other->pam_objectstsrlc_);
  std::swap(pam_objectstsrrc_, other->pam_objectstsrrc_);
  std::swap(pam_objectstsrrm_, other->pam_objectstsrrm_);
  std::swap(pam_chimecmdsoundstatus_, other->pam_chimecmdsoundstatus_);
  std::swap(pam_rearsystemworksts_, other->pam_rearsystemworksts_);
  std::swap(pam_frontsystemworksts_, other->pam_frontsystemworksts_);
  std::swap(pam_parkingbarsts_, other->pam_parkingbarsts_);
  std::swap(pam_chimecmdsoundcadence_, other->pam_chimecmdsoundcadence_);
  std::swap(pam_parkingbarpercent_, other->pam_parkingbarpercent_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pam_0x271_271::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pam_0x271_271

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_infodisplayreqType pam_infodisplayreq = 1;
bool Pam_0x271_271::has_pam_infodisplayreq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Pam_0x271_271::set_has_pam_infodisplayreq() {
  _has_bits_[0] |= 0x00000001u;
}
void Pam_0x271_271::clear_has_pam_infodisplayreq() {
  _has_bits_[0] &= ~0x00000001u;
}
void Pam_0x271_271::clear_pam_infodisplayreq() {
  pam_infodisplayreq_ = 0;
  clear_has_pam_infodisplayreq();
}
::jmc_auto::canbus::Pam_0x271_271_Pam_infodisplayreqType Pam_0x271_271::pam_infodisplayreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_infodisplayreq)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_infodisplayreqType >(pam_infodisplayreq_);
}
void Pam_0x271_271::set_pam_infodisplayreq(::jmc_auto::canbus::Pam_0x271_271_Pam_infodisplayreqType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_infodisplayreqType_IsValid(value));
  set_has_pam_infodisplayreq();
  pam_infodisplayreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_infodisplayreq)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsflmType pam_objectstsflm = 2;
bool Pam_0x271_271::has_pam_objectstsflm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Pam_0x271_271::set_has_pam_objectstsflm() {
  _has_bits_[0] |= 0x00000002u;
}
void Pam_0x271_271::clear_has_pam_objectstsflm() {
  _has_bits_[0] &= ~0x00000002u;
}
void Pam_0x271_271::clear_pam_objectstsflm() {
  pam_objectstsflm_ = 0;
  clear_has_pam_objectstsflm();
}
::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflmType Pam_0x271_271::pam_objectstsflm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_objectstsflm)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflmType >(pam_objectstsflm_);
}
void Pam_0x271_271::set_pam_objectstsflm(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflmType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflmType_IsValid(value));
  set_has_pam_objectstsflm();
  pam_objectstsflm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_objectstsflm)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsflcType pam_objectstsflc = 3;
bool Pam_0x271_271::has_pam_objectstsflc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Pam_0x271_271::set_has_pam_objectstsflc() {
  _has_bits_[0] |= 0x00000004u;
}
void Pam_0x271_271::clear_has_pam_objectstsflc() {
  _has_bits_[0] &= ~0x00000004u;
}
void Pam_0x271_271::clear_pam_objectstsflc() {
  pam_objectstsflc_ = 0;
  clear_has_pam_objectstsflc();
}
::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflcType Pam_0x271_271::pam_objectstsflc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_objectstsflc)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflcType >(pam_objectstsflc_);
}
void Pam_0x271_271::set_pam_objectstsflc(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflcType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsflcType_IsValid(value));
  set_has_pam_objectstsflc();
  pam_objectstsflc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_objectstsflc)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsfrcType pam_objectstsfrc = 4;
bool Pam_0x271_271::has_pam_objectstsfrc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Pam_0x271_271::set_has_pam_objectstsfrc() {
  _has_bits_[0] |= 0x00000008u;
}
void Pam_0x271_271::clear_has_pam_objectstsfrc() {
  _has_bits_[0] &= ~0x00000008u;
}
void Pam_0x271_271::clear_pam_objectstsfrc() {
  pam_objectstsfrc_ = 0;
  clear_has_pam_objectstsfrc();
}
::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrcType Pam_0x271_271::pam_objectstsfrc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_objectstsfrc)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrcType >(pam_objectstsfrc_);
}
void Pam_0x271_271::set_pam_objectstsfrc(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrcType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrcType_IsValid(value));
  set_has_pam_objectstsfrc();
  pam_objectstsfrc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_objectstsfrc)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsfrmType pam_objectstsfrm = 5;
bool Pam_0x271_271::has_pam_objectstsfrm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Pam_0x271_271::set_has_pam_objectstsfrm() {
  _has_bits_[0] |= 0x00000010u;
}
void Pam_0x271_271::clear_has_pam_objectstsfrm() {
  _has_bits_[0] &= ~0x00000010u;
}
void Pam_0x271_271::clear_pam_objectstsfrm() {
  pam_objectstsfrm_ = 0;
  clear_has_pam_objectstsfrm();
}
::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrmType Pam_0x271_271::pam_objectstsfrm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_objectstsfrm)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrmType >(pam_objectstsfrm_);
}
void Pam_0x271_271::set_pam_objectstsfrm(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrmType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsfrmType_IsValid(value));
  set_has_pam_objectstsfrm();
  pam_objectstsfrm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_objectstsfrm)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrlmType pam_objectstsrlm = 6;
bool Pam_0x271_271::has_pam_objectstsrlm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Pam_0x271_271::set_has_pam_objectstsrlm() {
  _has_bits_[0] |= 0x00000020u;
}
void Pam_0x271_271::clear_has_pam_objectstsrlm() {
  _has_bits_[0] &= ~0x00000020u;
}
void Pam_0x271_271::clear_pam_objectstsrlm() {
  pam_objectstsrlm_ = 0;
  clear_has_pam_objectstsrlm();
}
::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlmType Pam_0x271_271::pam_objectstsrlm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_objectstsrlm)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlmType >(pam_objectstsrlm_);
}
void Pam_0x271_271::set_pam_objectstsrlm(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlmType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlmType_IsValid(value));
  set_has_pam_objectstsrlm();
  pam_objectstsrlm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_objectstsrlm)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrlcType pam_objectstsrlc = 7;
bool Pam_0x271_271::has_pam_objectstsrlc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Pam_0x271_271::set_has_pam_objectstsrlc() {
  _has_bits_[0] |= 0x00000040u;
}
void Pam_0x271_271::clear_has_pam_objectstsrlc() {
  _has_bits_[0] &= ~0x00000040u;
}
void Pam_0x271_271::clear_pam_objectstsrlc() {
  pam_objectstsrlc_ = 0;
  clear_has_pam_objectstsrlc();
}
::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlcType Pam_0x271_271::pam_objectstsrlc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_objectstsrlc)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlcType >(pam_objectstsrlc_);
}
void Pam_0x271_271::set_pam_objectstsrlc(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlcType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrlcType_IsValid(value));
  set_has_pam_objectstsrlc();
  pam_objectstsrlc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_objectstsrlc)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrrcType pam_objectstsrrc = 8;
bool Pam_0x271_271::has_pam_objectstsrrc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Pam_0x271_271::set_has_pam_objectstsrrc() {
  _has_bits_[0] |= 0x00000080u;
}
void Pam_0x271_271::clear_has_pam_objectstsrrc() {
  _has_bits_[0] &= ~0x00000080u;
}
void Pam_0x271_271::clear_pam_objectstsrrc() {
  pam_objectstsrrc_ = 0;
  clear_has_pam_objectstsrrc();
}
::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrcType Pam_0x271_271::pam_objectstsrrc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_objectstsrrc)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrcType >(pam_objectstsrrc_);
}
void Pam_0x271_271::set_pam_objectstsrrc(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrcType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrcType_IsValid(value));
  set_has_pam_objectstsrrc();
  pam_objectstsrrc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_objectstsrrc)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_objectstsrrmType pam_objectstsrrm = 9;
bool Pam_0x271_271::has_pam_objectstsrrm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Pam_0x271_271::set_has_pam_objectstsrrm() {
  _has_bits_[0] |= 0x00000100u;
}
void Pam_0x271_271::clear_has_pam_objectstsrrm() {
  _has_bits_[0] &= ~0x00000100u;
}
void Pam_0x271_271::clear_pam_objectstsrrm() {
  pam_objectstsrrm_ = 0;
  clear_has_pam_objectstsrrm();
}
::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrmType Pam_0x271_271::pam_objectstsrrm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_objectstsrrm)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrmType >(pam_objectstsrrm_);
}
void Pam_0x271_271::set_pam_objectstsrrm(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrmType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_objectstsrrmType_IsValid(value));
  set_has_pam_objectstsrrm();
  pam_objectstsrrm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_objectstsrrm)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_chimecmdsoundstatusType pam_chimecmdsoundstatus = 10;
bool Pam_0x271_271::has_pam_chimecmdsoundstatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Pam_0x271_271::set_has_pam_chimecmdsoundstatus() {
  _has_bits_[0] |= 0x00000200u;
}
void Pam_0x271_271::clear_has_pam_chimecmdsoundstatus() {
  _has_bits_[0] &= ~0x00000200u;
}
void Pam_0x271_271::clear_pam_chimecmdsoundstatus() {
  pam_chimecmdsoundstatus_ = 0;
  clear_has_pam_chimecmdsoundstatus();
}
::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundstatusType Pam_0x271_271::pam_chimecmdsoundstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_chimecmdsoundstatus)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundstatusType >(pam_chimecmdsoundstatus_);
}
void Pam_0x271_271::set_pam_chimecmdsoundstatus(::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundstatusType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundstatusType_IsValid(value));
  set_has_pam_chimecmdsoundstatus();
  pam_chimecmdsoundstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_chimecmdsoundstatus)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_rearsystemworkstsType pam_rearsystemworksts = 11;
bool Pam_0x271_271::has_pam_rearsystemworksts() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Pam_0x271_271::set_has_pam_rearsystemworksts() {
  _has_bits_[0] |= 0x00000400u;
}
void Pam_0x271_271::clear_has_pam_rearsystemworksts() {
  _has_bits_[0] &= ~0x00000400u;
}
void Pam_0x271_271::clear_pam_rearsystemworksts() {
  pam_rearsystemworksts_ = 0;
  clear_has_pam_rearsystemworksts();
}
::jmc_auto::canbus::Pam_0x271_271_Pam_rearsystemworkstsType Pam_0x271_271::pam_rearsystemworksts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_rearsystemworksts)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_rearsystemworkstsType >(pam_rearsystemworksts_);
}
void Pam_0x271_271::set_pam_rearsystemworksts(::jmc_auto::canbus::Pam_0x271_271_Pam_rearsystemworkstsType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_rearsystemworkstsType_IsValid(value));
  set_has_pam_rearsystemworksts();
  pam_rearsystemworksts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_rearsystemworksts)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_frontsystemworkstsType pam_frontsystemworksts = 12;
bool Pam_0x271_271::has_pam_frontsystemworksts() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Pam_0x271_271::set_has_pam_frontsystemworksts() {
  _has_bits_[0] |= 0x00000800u;
}
void Pam_0x271_271::clear_has_pam_frontsystemworksts() {
  _has_bits_[0] &= ~0x00000800u;
}
void Pam_0x271_271::clear_pam_frontsystemworksts() {
  pam_frontsystemworksts_ = 0;
  clear_has_pam_frontsystemworksts();
}
::jmc_auto::canbus::Pam_0x271_271_Pam_frontsystemworkstsType Pam_0x271_271::pam_frontsystemworksts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_frontsystemworksts)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_frontsystemworkstsType >(pam_frontsystemworksts_);
}
void Pam_0x271_271::set_pam_frontsystemworksts(::jmc_auto::canbus::Pam_0x271_271_Pam_frontsystemworkstsType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_frontsystemworkstsType_IsValid(value));
  set_has_pam_frontsystemworksts();
  pam_frontsystemworksts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_frontsystemworksts)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_parkingbarstsType pam_parkingbarsts = 13;
bool Pam_0x271_271::has_pam_parkingbarsts() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Pam_0x271_271::set_has_pam_parkingbarsts() {
  _has_bits_[0] |= 0x00001000u;
}
void Pam_0x271_271::clear_has_pam_parkingbarsts() {
  _has_bits_[0] &= ~0x00001000u;
}
void Pam_0x271_271::clear_pam_parkingbarsts() {
  pam_parkingbarsts_ = 0;
  clear_has_pam_parkingbarsts();
}
::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarstsType Pam_0x271_271::pam_parkingbarsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_parkingbarsts)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarstsType >(pam_parkingbarsts_);
}
void Pam_0x271_271::set_pam_parkingbarsts(::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarstsType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarstsType_IsValid(value));
  set_has_pam_parkingbarsts();
  pam_parkingbarsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_parkingbarsts)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_chimecmdsoundcadenceType pam_chimecmdsoundcadence = 14;
bool Pam_0x271_271::has_pam_chimecmdsoundcadence() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Pam_0x271_271::set_has_pam_chimecmdsoundcadence() {
  _has_bits_[0] |= 0x00002000u;
}
void Pam_0x271_271::clear_has_pam_chimecmdsoundcadence() {
  _has_bits_[0] &= ~0x00002000u;
}
void Pam_0x271_271::clear_pam_chimecmdsoundcadence() {
  pam_chimecmdsoundcadence_ = 0;
  clear_has_pam_chimecmdsoundcadence();
}
::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundcadenceType Pam_0x271_271::pam_chimecmdsoundcadence() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_chimecmdsoundcadence)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundcadenceType >(pam_chimecmdsoundcadence_);
}
void Pam_0x271_271::set_pam_chimecmdsoundcadence(::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundcadenceType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_chimecmdsoundcadenceType_IsValid(value));
  set_has_pam_chimecmdsoundcadence();
  pam_chimecmdsoundcadence_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_chimecmdsoundcadence)
}

// optional .jmc_auto.canbus.Pam_0x271_271.Pam_parkingbarpercentType pam_parkingbarpercent = 15;
bool Pam_0x271_271::has_pam_parkingbarpercent() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Pam_0x271_271::set_has_pam_parkingbarpercent() {
  _has_bits_[0] |= 0x00004000u;
}
void Pam_0x271_271::clear_has_pam_parkingbarpercent() {
  _has_bits_[0] &= ~0x00004000u;
}
void Pam_0x271_271::clear_pam_parkingbarpercent() {
  pam_parkingbarpercent_ = 0;
  clear_has_pam_parkingbarpercent();
}
::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarpercentType Pam_0x271_271::pam_parkingbarpercent() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x271_271.pam_parkingbarpercent)
  return static_cast< ::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarpercentType >(pam_parkingbarpercent_);
}
void Pam_0x271_271::set_pam_parkingbarpercent(::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarpercentType value) {
  assert(::jmc_auto::canbus::Pam_0x271_271_Pam_parkingbarpercentType_IsValid(value));
  set_has_pam_parkingbarpercent();
  pam_parkingbarpercent_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x271_271.pam_parkingbarpercent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pam_0x272_272::kApaParkslotStateFieldNumber;
const int Pam_0x272_272::kSdgObjectstsFrsFieldNumber;
const int Pam_0x272_272::kSdgObjectstsrlsFieldNumber;
const int Pam_0x272_272::kApaSelectedsideFieldNumber;
const int Pam_0x272_272::kSdgObjectstsrrsFieldNumber;
const int Pam_0x272_272::kSdgObjectstsfrsRrsFieldNumber;
const int Pam_0x272_272::kApaQuitIndicationFieldNumber;
const int Pam_0x272_272::kApaRecoverIntIndicationFieldNumber;
const int Pam_0x272_272::kSdgObjectstsflsRlsFieldNumber;
const int Pam_0x272_272::kApaIndicationFieldNumber;
const int Pam_0x272_272::kSdgObjectstsflsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pam_0x272_272::Pam_0x272_272()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Pam_0x272_272)
}
Pam_0x272_272::Pam_0x272_272(const Pam_0x272_272& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&apa_parkslot_state_, &from.apa_parkslot_state_,
    reinterpret_cast<char*>(&sdg_objectstsfls_) -
    reinterpret_cast<char*>(&apa_parkslot_state_) + sizeof(sdg_objectstsfls_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Pam_0x272_272)
}

void Pam_0x272_272::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&apa_parkslot_state_, 0, reinterpret_cast<char*>(&sdg_objectstsfls_) -
    reinterpret_cast<char*>(&apa_parkslot_state_) + sizeof(sdg_objectstsfls_));
}

Pam_0x272_272::~Pam_0x272_272() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Pam_0x272_272)
  SharedDtor();
}

void Pam_0x272_272::SharedDtor() {
}

void Pam_0x272_272::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pam_0x272_272::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pam_0x272_272& Pam_0x272_272::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pam_0x272_272* Pam_0x272_272::New(::google::protobuf::Arena* arena) const {
  Pam_0x272_272* n = new Pam_0x272_272;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pam_0x272_272::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Pam_0x272_272)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&apa_parkslot_state_, 0, reinterpret_cast<char*>(&apa_recover_int_indication_) -
      reinterpret_cast<char*>(&apa_parkslot_state_) + sizeof(apa_recover_int_indication_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&sdg_objectstsfls_rls_, 0, reinterpret_cast<char*>(&sdg_objectstsfls_) -
      reinterpret_cast<char*>(&sdg_objectstsfls_rls_) + sizeof(sdg_objectstsfls_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pam_0x272_272::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Pam_0x272_272)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Pam_0x272_272.Apa_parkslot_stateType apa_parkslot_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x272_272_Apa_parkslot_stateType_IsValid(value)) {
            set_apa_parkslot_state(static_cast< ::jmc_auto::canbus::Pam_0x272_272_Apa_parkslot_stateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectsts_frsType sdg_objectsts_frs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x272_272_Sdg_objectsts_frsType_IsValid(value)) {
            set_sdg_objectsts_frs(static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectsts_frsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsrlsType sdg_objectstsrls = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrlsType_IsValid(value)) {
            set_sdg_objectstsrls(static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrlsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x272_272.Apa_selectedsideType apa_selectedside = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x272_272_Apa_selectedsideType_IsValid(value)) {
            set_apa_selectedside(static_cast< ::jmc_auto::canbus::Pam_0x272_272_Apa_selectedsideType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsrrsType sdg_objectstsrrs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrrsType_IsValid(value)) {
            set_sdg_objectstsrrs(static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrrsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsfrs_rrsType sdg_objectstsfrs_rrs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfrs_rrsType_IsValid(value)) {
            set_sdg_objectstsfrs_rrs(static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfrs_rrsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x272_272.Apa_quit_indicationType apa_quit_indication = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x272_272_Apa_quit_indicationType_IsValid(value)) {
            set_apa_quit_indication(static_cast< ::jmc_auto::canbus::Pam_0x272_272_Apa_quit_indicationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x272_272.Apa_recover_int_indicationType apa_recover_int_indication = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x272_272_Apa_recover_int_indicationType_IsValid(value)) {
            set_apa_recover_int_indication(static_cast< ::jmc_auto::canbus::Pam_0x272_272_Apa_recover_int_indicationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsfls_rlsType sdg_objectstsfls_rls = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfls_rlsType_IsValid(value)) {
            set_sdg_objectstsfls_rls(static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfls_rlsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x272_272.Apa_indicationType apa_indication = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x272_272_Apa_indicationType_IsValid(value)) {
            set_apa_indication(static_cast< ::jmc_auto::canbus::Pam_0x272_272_Apa_indicationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsflsType sdg_objectstsfls = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsflsType_IsValid(value)) {
            set_sdg_objectstsfls(static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsflsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Pam_0x272_272)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Pam_0x272_272)
  return false;
#undef DO_
}

void Pam_0x272_272::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Pam_0x272_272)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Pam_0x272_272.Apa_parkslot_stateType apa_parkslot_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->apa_parkslot_state(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectsts_frsType sdg_objectsts_frs = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sdg_objectsts_frs(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsrlsType sdg_objectstsrls = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sdg_objectstsrls(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Apa_selectedsideType apa_selectedside = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->apa_selectedside(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsrrsType sdg_objectstsrrs = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sdg_objectstsrrs(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsfrs_rrsType sdg_objectstsfrs_rrs = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->sdg_objectstsfrs_rrs(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Apa_quit_indicationType apa_quit_indication = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->apa_quit_indication(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Apa_recover_int_indicationType apa_recover_int_indication = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->apa_recover_int_indication(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsfls_rlsType sdg_objectstsfls_rls = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->sdg_objectstsfls_rls(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Apa_indicationType apa_indication = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->apa_indication(), output);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsflsType sdg_objectstsfls = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->sdg_objectstsfls(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Pam_0x272_272)
}

::google::protobuf::uint8* Pam_0x272_272::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Pam_0x272_272)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Pam_0x272_272.Apa_parkslot_stateType apa_parkslot_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->apa_parkslot_state(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectsts_frsType sdg_objectsts_frs = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sdg_objectsts_frs(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsrlsType sdg_objectstsrls = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sdg_objectstsrls(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Apa_selectedsideType apa_selectedside = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->apa_selectedside(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsrrsType sdg_objectstsrrs = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sdg_objectstsrrs(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsfrs_rrsType sdg_objectstsfrs_rrs = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->sdg_objectstsfrs_rrs(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Apa_quit_indicationType apa_quit_indication = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->apa_quit_indication(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Apa_recover_int_indicationType apa_recover_int_indication = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->apa_recover_int_indication(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsfls_rlsType sdg_objectstsfls_rls = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->sdg_objectstsfls_rls(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Apa_indicationType apa_indication = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->apa_indication(), target);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsflsType sdg_objectstsfls = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->sdg_objectstsfls(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Pam_0x272_272)
  return target;
}

size_t Pam_0x272_272::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Pam_0x272_272)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Pam_0x272_272.Apa_parkslot_stateType apa_parkslot_state = 1;
    if (has_apa_parkslot_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->apa_parkslot_state());
    }

    // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectsts_frsType sdg_objectsts_frs = 2;
    if (has_sdg_objectsts_frs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sdg_objectsts_frs());
    }

    // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsrlsType sdg_objectstsrls = 3;
    if (has_sdg_objectstsrls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sdg_objectstsrls());
    }

    // optional .jmc_auto.canbus.Pam_0x272_272.Apa_selectedsideType apa_selectedside = 4;
    if (has_apa_selectedside()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->apa_selectedside());
    }

    // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsrrsType sdg_objectstsrrs = 5;
    if (has_sdg_objectstsrrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sdg_objectstsrrs());
    }

    // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsfrs_rrsType sdg_objectstsfrs_rrs = 6;
    if (has_sdg_objectstsfrs_rrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sdg_objectstsfrs_rrs());
    }

    // optional .jmc_auto.canbus.Pam_0x272_272.Apa_quit_indicationType apa_quit_indication = 7;
    if (has_apa_quit_indication()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->apa_quit_indication());
    }

    // optional .jmc_auto.canbus.Pam_0x272_272.Apa_recover_int_indicationType apa_recover_int_indication = 8;
    if (has_apa_recover_int_indication()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->apa_recover_int_indication());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsfls_rlsType sdg_objectstsfls_rls = 9;
    if (has_sdg_objectstsfls_rls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sdg_objectstsfls_rls());
    }

    // optional .jmc_auto.canbus.Pam_0x272_272.Apa_indicationType apa_indication = 10;
    if (has_apa_indication()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->apa_indication());
    }

    // optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsflsType sdg_objectstsfls = 11;
    if (has_sdg_objectstsfls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sdg_objectstsfls());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pam_0x272_272::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Pam_0x272_272)
  GOOGLE_DCHECK_NE(&from, this);
  const Pam_0x272_272* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pam_0x272_272>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Pam_0x272_272)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Pam_0x272_272)
    MergeFrom(*source);
  }
}

void Pam_0x272_272::MergeFrom(const Pam_0x272_272& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Pam_0x272_272)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      apa_parkslot_state_ = from.apa_parkslot_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      sdg_objectsts_frs_ = from.sdg_objectsts_frs_;
    }
    if (cached_has_bits & 0x00000004u) {
      sdg_objectstsrls_ = from.sdg_objectstsrls_;
    }
    if (cached_has_bits & 0x00000008u) {
      apa_selectedside_ = from.apa_selectedside_;
    }
    if (cached_has_bits & 0x00000010u) {
      sdg_objectstsrrs_ = from.sdg_objectstsrrs_;
    }
    if (cached_has_bits & 0x00000020u) {
      sdg_objectstsfrs_rrs_ = from.sdg_objectstsfrs_rrs_;
    }
    if (cached_has_bits & 0x00000040u) {
      apa_quit_indication_ = from.apa_quit_indication_;
    }
    if (cached_has_bits & 0x00000080u) {
      apa_recover_int_indication_ = from.apa_recover_int_indication_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      sdg_objectstsfls_rls_ = from.sdg_objectstsfls_rls_;
    }
    if (cached_has_bits & 0x00000200u) {
      apa_indication_ = from.apa_indication_;
    }
    if (cached_has_bits & 0x00000400u) {
      sdg_objectstsfls_ = from.sdg_objectstsfls_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pam_0x272_272::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Pam_0x272_272)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pam_0x272_272::CopyFrom(const Pam_0x272_272& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Pam_0x272_272)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pam_0x272_272::IsInitialized() const {
  return true;
}

void Pam_0x272_272::Swap(Pam_0x272_272* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pam_0x272_272::InternalSwap(Pam_0x272_272* other) {
  std::swap(apa_parkslot_state_, other->apa_parkslot_state_);
  std::swap(sdg_objectsts_frs_, other->sdg_objectsts_frs_);
  std::swap(sdg_objectstsrls_, other->sdg_objectstsrls_);
  std::swap(apa_selectedside_, other->apa_selectedside_);
  std::swap(sdg_objectstsrrs_, other->sdg_objectstsrrs_);
  std::swap(sdg_objectstsfrs_rrs_, other->sdg_objectstsfrs_rrs_);
  std::swap(apa_quit_indication_, other->apa_quit_indication_);
  std::swap(apa_recover_int_indication_, other->apa_recover_int_indication_);
  std::swap(sdg_objectstsfls_rls_, other->sdg_objectstsfls_rls_);
  std::swap(apa_indication_, other->apa_indication_);
  std::swap(sdg_objectstsfls_, other->sdg_objectstsfls_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pam_0x272_272::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pam_0x272_272

// optional .jmc_auto.canbus.Pam_0x272_272.Apa_parkslot_stateType apa_parkslot_state = 1;
bool Pam_0x272_272::has_apa_parkslot_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Pam_0x272_272::set_has_apa_parkslot_state() {
  _has_bits_[0] |= 0x00000001u;
}
void Pam_0x272_272::clear_has_apa_parkslot_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void Pam_0x272_272::clear_apa_parkslot_state() {
  apa_parkslot_state_ = 0;
  clear_has_apa_parkslot_state();
}
::jmc_auto::canbus::Pam_0x272_272_Apa_parkslot_stateType Pam_0x272_272::apa_parkslot_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.apa_parkslot_state)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Apa_parkslot_stateType >(apa_parkslot_state_);
}
void Pam_0x272_272::set_apa_parkslot_state(::jmc_auto::canbus::Pam_0x272_272_Apa_parkslot_stateType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Apa_parkslot_stateType_IsValid(value));
  set_has_apa_parkslot_state();
  apa_parkslot_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.apa_parkslot_state)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectsts_frsType sdg_objectsts_frs = 2;
bool Pam_0x272_272::has_sdg_objectsts_frs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Pam_0x272_272::set_has_sdg_objectsts_frs() {
  _has_bits_[0] |= 0x00000002u;
}
void Pam_0x272_272::clear_has_sdg_objectsts_frs() {
  _has_bits_[0] &= ~0x00000002u;
}
void Pam_0x272_272::clear_sdg_objectsts_frs() {
  sdg_objectsts_frs_ = 0;
  clear_has_sdg_objectsts_frs();
}
::jmc_auto::canbus::Pam_0x272_272_Sdg_objectsts_frsType Pam_0x272_272::sdg_objectsts_frs() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.sdg_objectsts_frs)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectsts_frsType >(sdg_objectsts_frs_);
}
void Pam_0x272_272::set_sdg_objectsts_frs(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectsts_frsType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectsts_frsType_IsValid(value));
  set_has_sdg_objectsts_frs();
  sdg_objectsts_frs_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.sdg_objectsts_frs)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsrlsType sdg_objectstsrls = 3;
bool Pam_0x272_272::has_sdg_objectstsrls() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Pam_0x272_272::set_has_sdg_objectstsrls() {
  _has_bits_[0] |= 0x00000004u;
}
void Pam_0x272_272::clear_has_sdg_objectstsrls() {
  _has_bits_[0] &= ~0x00000004u;
}
void Pam_0x272_272::clear_sdg_objectstsrls() {
  sdg_objectstsrls_ = 0;
  clear_has_sdg_objectstsrls();
}
::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrlsType Pam_0x272_272::sdg_objectstsrls() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsrls)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrlsType >(sdg_objectstsrls_);
}
void Pam_0x272_272::set_sdg_objectstsrls(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrlsType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrlsType_IsValid(value));
  set_has_sdg_objectstsrls();
  sdg_objectstsrls_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsrls)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Apa_selectedsideType apa_selectedside = 4;
bool Pam_0x272_272::has_apa_selectedside() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Pam_0x272_272::set_has_apa_selectedside() {
  _has_bits_[0] |= 0x00000008u;
}
void Pam_0x272_272::clear_has_apa_selectedside() {
  _has_bits_[0] &= ~0x00000008u;
}
void Pam_0x272_272::clear_apa_selectedside() {
  apa_selectedside_ = 0;
  clear_has_apa_selectedside();
}
::jmc_auto::canbus::Pam_0x272_272_Apa_selectedsideType Pam_0x272_272::apa_selectedside() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.apa_selectedside)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Apa_selectedsideType >(apa_selectedside_);
}
void Pam_0x272_272::set_apa_selectedside(::jmc_auto::canbus::Pam_0x272_272_Apa_selectedsideType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Apa_selectedsideType_IsValid(value));
  set_has_apa_selectedside();
  apa_selectedside_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.apa_selectedside)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsrrsType sdg_objectstsrrs = 5;
bool Pam_0x272_272::has_sdg_objectstsrrs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Pam_0x272_272::set_has_sdg_objectstsrrs() {
  _has_bits_[0] |= 0x00000010u;
}
void Pam_0x272_272::clear_has_sdg_objectstsrrs() {
  _has_bits_[0] &= ~0x00000010u;
}
void Pam_0x272_272::clear_sdg_objectstsrrs() {
  sdg_objectstsrrs_ = 0;
  clear_has_sdg_objectstsrrs();
}
::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrrsType Pam_0x272_272::sdg_objectstsrrs() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsrrs)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrrsType >(sdg_objectstsrrs_);
}
void Pam_0x272_272::set_sdg_objectstsrrs(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrrsType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsrrsType_IsValid(value));
  set_has_sdg_objectstsrrs();
  sdg_objectstsrrs_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsrrs)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsfrs_rrsType sdg_objectstsfrs_rrs = 6;
bool Pam_0x272_272::has_sdg_objectstsfrs_rrs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Pam_0x272_272::set_has_sdg_objectstsfrs_rrs() {
  _has_bits_[0] |= 0x00000020u;
}
void Pam_0x272_272::clear_has_sdg_objectstsfrs_rrs() {
  _has_bits_[0] &= ~0x00000020u;
}
void Pam_0x272_272::clear_sdg_objectstsfrs_rrs() {
  sdg_objectstsfrs_rrs_ = 0;
  clear_has_sdg_objectstsfrs_rrs();
}
::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfrs_rrsType Pam_0x272_272::sdg_objectstsfrs_rrs() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsfrs_rrs)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfrs_rrsType >(sdg_objectstsfrs_rrs_);
}
void Pam_0x272_272::set_sdg_objectstsfrs_rrs(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfrs_rrsType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfrs_rrsType_IsValid(value));
  set_has_sdg_objectstsfrs_rrs();
  sdg_objectstsfrs_rrs_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsfrs_rrs)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Apa_quit_indicationType apa_quit_indication = 7;
bool Pam_0x272_272::has_apa_quit_indication() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Pam_0x272_272::set_has_apa_quit_indication() {
  _has_bits_[0] |= 0x00000040u;
}
void Pam_0x272_272::clear_has_apa_quit_indication() {
  _has_bits_[0] &= ~0x00000040u;
}
void Pam_0x272_272::clear_apa_quit_indication() {
  apa_quit_indication_ = 0;
  clear_has_apa_quit_indication();
}
::jmc_auto::canbus::Pam_0x272_272_Apa_quit_indicationType Pam_0x272_272::apa_quit_indication() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.apa_quit_indication)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Apa_quit_indicationType >(apa_quit_indication_);
}
void Pam_0x272_272::set_apa_quit_indication(::jmc_auto::canbus::Pam_0x272_272_Apa_quit_indicationType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Apa_quit_indicationType_IsValid(value));
  set_has_apa_quit_indication();
  apa_quit_indication_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.apa_quit_indication)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Apa_recover_int_indicationType apa_recover_int_indication = 8;
bool Pam_0x272_272::has_apa_recover_int_indication() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Pam_0x272_272::set_has_apa_recover_int_indication() {
  _has_bits_[0] |= 0x00000080u;
}
void Pam_0x272_272::clear_has_apa_recover_int_indication() {
  _has_bits_[0] &= ~0x00000080u;
}
void Pam_0x272_272::clear_apa_recover_int_indication() {
  apa_recover_int_indication_ = 0;
  clear_has_apa_recover_int_indication();
}
::jmc_auto::canbus::Pam_0x272_272_Apa_recover_int_indicationType Pam_0x272_272::apa_recover_int_indication() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.apa_recover_int_indication)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Apa_recover_int_indicationType >(apa_recover_int_indication_);
}
void Pam_0x272_272::set_apa_recover_int_indication(::jmc_auto::canbus::Pam_0x272_272_Apa_recover_int_indicationType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Apa_recover_int_indicationType_IsValid(value));
  set_has_apa_recover_int_indication();
  apa_recover_int_indication_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.apa_recover_int_indication)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsfls_rlsType sdg_objectstsfls_rls = 9;
bool Pam_0x272_272::has_sdg_objectstsfls_rls() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Pam_0x272_272::set_has_sdg_objectstsfls_rls() {
  _has_bits_[0] |= 0x00000100u;
}
void Pam_0x272_272::clear_has_sdg_objectstsfls_rls() {
  _has_bits_[0] &= ~0x00000100u;
}
void Pam_0x272_272::clear_sdg_objectstsfls_rls() {
  sdg_objectstsfls_rls_ = 0;
  clear_has_sdg_objectstsfls_rls();
}
::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfls_rlsType Pam_0x272_272::sdg_objectstsfls_rls() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsfls_rls)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfls_rlsType >(sdg_objectstsfls_rls_);
}
void Pam_0x272_272::set_sdg_objectstsfls_rls(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfls_rlsType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsfls_rlsType_IsValid(value));
  set_has_sdg_objectstsfls_rls();
  sdg_objectstsfls_rls_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsfls_rls)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Apa_indicationType apa_indication = 10;
bool Pam_0x272_272::has_apa_indication() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Pam_0x272_272::set_has_apa_indication() {
  _has_bits_[0] |= 0x00000200u;
}
void Pam_0x272_272::clear_has_apa_indication() {
  _has_bits_[0] &= ~0x00000200u;
}
void Pam_0x272_272::clear_apa_indication() {
  apa_indication_ = 0;
  clear_has_apa_indication();
}
::jmc_auto::canbus::Pam_0x272_272_Apa_indicationType Pam_0x272_272::apa_indication() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.apa_indication)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Apa_indicationType >(apa_indication_);
}
void Pam_0x272_272::set_apa_indication(::jmc_auto::canbus::Pam_0x272_272_Apa_indicationType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Apa_indicationType_IsValid(value));
  set_has_apa_indication();
  apa_indication_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.apa_indication)
}

// optional .jmc_auto.canbus.Pam_0x272_272.Sdg_objectstsflsType sdg_objectstsfls = 11;
bool Pam_0x272_272::has_sdg_objectstsfls() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Pam_0x272_272::set_has_sdg_objectstsfls() {
  _has_bits_[0] |= 0x00000400u;
}
void Pam_0x272_272::clear_has_sdg_objectstsfls() {
  _has_bits_[0] &= ~0x00000400u;
}
void Pam_0x272_272::clear_sdg_objectstsfls() {
  sdg_objectstsfls_ = 0;
  clear_has_sdg_objectstsfls();
}
::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsflsType Pam_0x272_272::sdg_objectstsfls() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsfls)
  return static_cast< ::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsflsType >(sdg_objectstsfls_);
}
void Pam_0x272_272::set_sdg_objectstsfls(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsflsType value) {
  assert(::jmc_auto::canbus::Pam_0x272_272_Sdg_objectstsflsType_IsValid(value));
  set_has_sdg_objectstsfls();
  sdg_objectstsfls_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Pam_0x272_272.sdg_objectstsfls)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mrr_0x238_238::kAccTgtaxlowercomftbandFieldNumber;
const int Mrr_0x238_238::kAccTgtaxupperlimFieldNumber;
const int Mrr_0x238_238::kAccTgtaxlowerlimFieldNumber;
const int Mrr_0x238_238::kAccTgtaxFieldNumber;
const int Mrr_0x238_238::kRollingCounter0X238FieldNumber;
const int Mrr_0x238_238::kChecksum0X238FieldNumber;
const int Mrr_0x238_238::kAccTgtaxuppercomftbandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mrr_0x238_238::Mrr_0x238_238()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Mrr_0x238_238)
}
Mrr_0x238_238::Mrr_0x238_238(const Mrr_0x238_238& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc_tgtaxlowercomftband_, &from.acc_tgtaxlowercomftband_,
    reinterpret_cast<char*>(&acc_tgtaxuppercomftband_) -
    reinterpret_cast<char*>(&acc_tgtaxlowercomftband_) + sizeof(acc_tgtaxuppercomftband_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Mrr_0x238_238)
}

void Mrr_0x238_238::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&acc_tgtaxlowercomftband_, 0, reinterpret_cast<char*>(&acc_tgtaxuppercomftband_) -
    reinterpret_cast<char*>(&acc_tgtaxlowercomftband_) + sizeof(acc_tgtaxuppercomftband_));
}

Mrr_0x238_238::~Mrr_0x238_238() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Mrr_0x238_238)
  SharedDtor();
}

void Mrr_0x238_238::SharedDtor() {
}

void Mrr_0x238_238::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mrr_0x238_238::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mrr_0x238_238& Mrr_0x238_238::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mrr_0x238_238* Mrr_0x238_238::New(::google::protobuf::Arena* arena) const {
  Mrr_0x238_238* n = new Mrr_0x238_238;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mrr_0x238_238::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Mrr_0x238_238)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&acc_tgtaxlowercomftband_, 0, reinterpret_cast<char*>(&acc_tgtaxuppercomftband_) -
      reinterpret_cast<char*>(&acc_tgtaxlowercomftband_) + sizeof(acc_tgtaxuppercomftband_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Mrr_0x238_238::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Mrr_0x238_238)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double acc_tgtaxlowercomftband = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_acc_tgtaxlowercomftband();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_tgtaxlowercomftband_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_tgtaxupperlim = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_acc_tgtaxupperlim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_tgtaxupperlim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_tgtaxlowerlim = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_acc_tgtaxlowerlim();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_tgtaxlowerlim_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_tgtax = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_acc_tgtax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_tgtax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x238 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_rolling_counter_0x238();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x238_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x238 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_checksum_0x238();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x238_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_tgtaxuppercomftband = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_acc_tgtaxuppercomftband();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_tgtaxuppercomftband_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Mrr_0x238_238)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Mrr_0x238_238)
  return false;
#undef DO_
}

void Mrr_0x238_238::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Mrr_0x238_238)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double acc_tgtaxlowercomftband = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->acc_tgtaxlowercomftband(), output);
  }

  // optional double acc_tgtaxupperlim = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->acc_tgtaxupperlim(), output);
  }

  // optional double acc_tgtaxlowerlim = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->acc_tgtaxlowerlim(), output);
  }

  // optional double acc_tgtax = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->acc_tgtax(), output);
  }

  // optional int32 rolling_counter_0x238 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rolling_counter_0x238(), output);
  }

  // optional int32 checksum_0x238 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->checksum_0x238(), output);
  }

  // optional double acc_tgtaxuppercomftband = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->acc_tgtaxuppercomftband(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Mrr_0x238_238)
}

::google::protobuf::uint8* Mrr_0x238_238::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Mrr_0x238_238)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double acc_tgtaxlowercomftband = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->acc_tgtaxlowercomftband(), target);
  }

  // optional double acc_tgtaxupperlim = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->acc_tgtaxupperlim(), target);
  }

  // optional double acc_tgtaxlowerlim = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->acc_tgtaxlowerlim(), target);
  }

  // optional double acc_tgtax = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->acc_tgtax(), target);
  }

  // optional int32 rolling_counter_0x238 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rolling_counter_0x238(), target);
  }

  // optional int32 checksum_0x238 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->checksum_0x238(), target);
  }

  // optional double acc_tgtaxuppercomftband = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->acc_tgtaxuppercomftband(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Mrr_0x238_238)
  return target;
}

size_t Mrr_0x238_238::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Mrr_0x238_238)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional double acc_tgtaxlowercomftband = 1;
    if (has_acc_tgtaxlowercomftband()) {
      total_size += 1 + 8;
    }

    // optional double acc_tgtaxupperlim = 2;
    if (has_acc_tgtaxupperlim()) {
      total_size += 1 + 8;
    }

    // optional double acc_tgtaxlowerlim = 3;
    if (has_acc_tgtaxlowerlim()) {
      total_size += 1 + 8;
    }

    // optional double acc_tgtax = 4;
    if (has_acc_tgtax()) {
      total_size += 1 + 8;
    }

    // optional int32 rolling_counter_0x238 = 5;
    if (has_rolling_counter_0x238()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x238());
    }

    // optional int32 checksum_0x238 = 6;
    if (has_checksum_0x238()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x238());
    }

    // optional double acc_tgtaxuppercomftband = 7;
    if (has_acc_tgtaxuppercomftband()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mrr_0x238_238::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Mrr_0x238_238)
  GOOGLE_DCHECK_NE(&from, this);
  const Mrr_0x238_238* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mrr_0x238_238>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Mrr_0x238_238)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Mrr_0x238_238)
    MergeFrom(*source);
  }
}

void Mrr_0x238_238::MergeFrom(const Mrr_0x238_238& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Mrr_0x238_238)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      acc_tgtaxlowercomftband_ = from.acc_tgtaxlowercomftband_;
    }
    if (cached_has_bits & 0x00000002u) {
      acc_tgtaxupperlim_ = from.acc_tgtaxupperlim_;
    }
    if (cached_has_bits & 0x00000004u) {
      acc_tgtaxlowerlim_ = from.acc_tgtaxlowerlim_;
    }
    if (cached_has_bits & 0x00000008u) {
      acc_tgtax_ = from.acc_tgtax_;
    }
    if (cached_has_bits & 0x00000010u) {
      rolling_counter_0x238_ = from.rolling_counter_0x238_;
    }
    if (cached_has_bits & 0x00000020u) {
      checksum_0x238_ = from.checksum_0x238_;
    }
    if (cached_has_bits & 0x00000040u) {
      acc_tgtaxuppercomftband_ = from.acc_tgtaxuppercomftband_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Mrr_0x238_238::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Mrr_0x238_238)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mrr_0x238_238::CopyFrom(const Mrr_0x238_238& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Mrr_0x238_238)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mrr_0x238_238::IsInitialized() const {
  return true;
}

void Mrr_0x238_238::Swap(Mrr_0x238_238* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mrr_0x238_238::InternalSwap(Mrr_0x238_238* other) {
  std::swap(acc_tgtaxlowercomftband_, other->acc_tgtaxlowercomftband_);
  std::swap(acc_tgtaxupperlim_, other->acc_tgtaxupperlim_);
  std::swap(acc_tgtaxlowerlim_, other->acc_tgtaxlowerlim_);
  std::swap(acc_tgtax_, other->acc_tgtax_);
  std::swap(rolling_counter_0x238_, other->rolling_counter_0x238_);
  std::swap(checksum_0x238_, other->checksum_0x238_);
  std::swap(acc_tgtaxuppercomftband_, other->acc_tgtaxuppercomftband_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mrr_0x238_238::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mrr_0x238_238

// optional double acc_tgtaxlowercomftband = 1;
bool Mrr_0x238_238::has_acc_tgtaxlowercomftband() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Mrr_0x238_238::set_has_acc_tgtaxlowercomftband() {
  _has_bits_[0] |= 0x00000001u;
}
void Mrr_0x238_238::clear_has_acc_tgtaxlowercomftband() {
  _has_bits_[0] &= ~0x00000001u;
}
void Mrr_0x238_238::clear_acc_tgtaxlowercomftband() {
  acc_tgtaxlowercomftband_ = 0;
  clear_has_acc_tgtaxlowercomftband();
}
double Mrr_0x238_238::acc_tgtaxlowercomftband() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x238_238.acc_tgtaxlowercomftband)
  return acc_tgtaxlowercomftband_;
}
void Mrr_0x238_238::set_acc_tgtaxlowercomftband(double value) {
  set_has_acc_tgtaxlowercomftband();
  acc_tgtaxlowercomftband_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x238_238.acc_tgtaxlowercomftband)
}

// optional double acc_tgtaxupperlim = 2;
bool Mrr_0x238_238::has_acc_tgtaxupperlim() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Mrr_0x238_238::set_has_acc_tgtaxupperlim() {
  _has_bits_[0] |= 0x00000002u;
}
void Mrr_0x238_238::clear_has_acc_tgtaxupperlim() {
  _has_bits_[0] &= ~0x00000002u;
}
void Mrr_0x238_238::clear_acc_tgtaxupperlim() {
  acc_tgtaxupperlim_ = 0;
  clear_has_acc_tgtaxupperlim();
}
double Mrr_0x238_238::acc_tgtaxupperlim() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x238_238.acc_tgtaxupperlim)
  return acc_tgtaxupperlim_;
}
void Mrr_0x238_238::set_acc_tgtaxupperlim(double value) {
  set_has_acc_tgtaxupperlim();
  acc_tgtaxupperlim_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x238_238.acc_tgtaxupperlim)
}

// optional double acc_tgtaxlowerlim = 3;
bool Mrr_0x238_238::has_acc_tgtaxlowerlim() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Mrr_0x238_238::set_has_acc_tgtaxlowerlim() {
  _has_bits_[0] |= 0x00000004u;
}
void Mrr_0x238_238::clear_has_acc_tgtaxlowerlim() {
  _has_bits_[0] &= ~0x00000004u;
}
void Mrr_0x238_238::clear_acc_tgtaxlowerlim() {
  acc_tgtaxlowerlim_ = 0;
  clear_has_acc_tgtaxlowerlim();
}
double Mrr_0x238_238::acc_tgtaxlowerlim() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x238_238.acc_tgtaxlowerlim)
  return acc_tgtaxlowerlim_;
}
void Mrr_0x238_238::set_acc_tgtaxlowerlim(double value) {
  set_has_acc_tgtaxlowerlim();
  acc_tgtaxlowerlim_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x238_238.acc_tgtaxlowerlim)
}

// optional double acc_tgtax = 4;
bool Mrr_0x238_238::has_acc_tgtax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Mrr_0x238_238::set_has_acc_tgtax() {
  _has_bits_[0] |= 0x00000008u;
}
void Mrr_0x238_238::clear_has_acc_tgtax() {
  _has_bits_[0] &= ~0x00000008u;
}
void Mrr_0x238_238::clear_acc_tgtax() {
  acc_tgtax_ = 0;
  clear_has_acc_tgtax();
}
double Mrr_0x238_238::acc_tgtax() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x238_238.acc_tgtax)
  return acc_tgtax_;
}
void Mrr_0x238_238::set_acc_tgtax(double value) {
  set_has_acc_tgtax();
  acc_tgtax_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x238_238.acc_tgtax)
}

// optional int32 rolling_counter_0x238 = 5;
bool Mrr_0x238_238::has_rolling_counter_0x238() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Mrr_0x238_238::set_has_rolling_counter_0x238() {
  _has_bits_[0] |= 0x00000010u;
}
void Mrr_0x238_238::clear_has_rolling_counter_0x238() {
  _has_bits_[0] &= ~0x00000010u;
}
void Mrr_0x238_238::clear_rolling_counter_0x238() {
  rolling_counter_0x238_ = 0;
  clear_has_rolling_counter_0x238();
}
::google::protobuf::int32 Mrr_0x238_238::rolling_counter_0x238() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x238_238.rolling_counter_0x238)
  return rolling_counter_0x238_;
}
void Mrr_0x238_238::set_rolling_counter_0x238(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x238();
  rolling_counter_0x238_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x238_238.rolling_counter_0x238)
}

// optional int32 checksum_0x238 = 6;
bool Mrr_0x238_238::has_checksum_0x238() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Mrr_0x238_238::set_has_checksum_0x238() {
  _has_bits_[0] |= 0x00000020u;
}
void Mrr_0x238_238::clear_has_checksum_0x238() {
  _has_bits_[0] &= ~0x00000020u;
}
void Mrr_0x238_238::clear_checksum_0x238() {
  checksum_0x238_ = 0;
  clear_has_checksum_0x238();
}
::google::protobuf::int32 Mrr_0x238_238::checksum_0x238() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x238_238.checksum_0x238)
  return checksum_0x238_;
}
void Mrr_0x238_238::set_checksum_0x238(::google::protobuf::int32 value) {
  set_has_checksum_0x238();
  checksum_0x238_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x238_238.checksum_0x238)
}

// optional double acc_tgtaxuppercomftband = 7;
bool Mrr_0x238_238::has_acc_tgtaxuppercomftband() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Mrr_0x238_238::set_has_acc_tgtaxuppercomftband() {
  _has_bits_[0] |= 0x00000040u;
}
void Mrr_0x238_238::clear_has_acc_tgtaxuppercomftband() {
  _has_bits_[0] &= ~0x00000040u;
}
void Mrr_0x238_238::clear_acc_tgtaxuppercomftband() {
  acc_tgtaxuppercomftband_ = 0;
  clear_has_acc_tgtaxuppercomftband();
}
double Mrr_0x238_238::acc_tgtaxuppercomftband() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x238_238.acc_tgtaxuppercomftband)
  return acc_tgtaxuppercomftband_;
}
void Mrr_0x238_238::set_acc_tgtaxuppercomftband(double value) {
  set_has_acc_tgtaxuppercomftband();
  acc_tgtaxuppercomftband_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x238_238.acc_tgtaxuppercomftband)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mrr_0x239_239::kAccUppercomftbandreqFieldNumber;
const int Mrr_0x239_239::kAccBrakepreferredFieldNumber;
const int Mrr_0x239_239::kEbaReqFieldNumber;
const int Mrr_0x239_239::kAebReqFieldNumber;
const int Mrr_0x239_239::kAccStandstillreqFieldNumber;
const int Mrr_0x239_239::kAccDriveoffFieldNumber;
const int Mrr_0x239_239::kAwbLevelFieldNumber;
const int Mrr_0x239_239::kAbpReqFieldNumber;
const int Mrr_0x239_239::kAwbReqFieldNumber;
const int Mrr_0x239_239::kAbaReqFieldNumber;
const int Mrr_0x239_239::kAebTgtaxFieldNumber;
const int Mrr_0x239_239::kAccStateFieldNumber;
const int Mrr_0x239_239::kRollingCounter0X239FieldNumber;
const int Mrr_0x239_239::kChecksum0X239FieldNumber;
const int Mrr_0x239_239::kShutdownmodeFieldNumber;
const int Mrr_0x239_239::kAbaLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mrr_0x239_239::Mrr_0x239_239()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Mrr_0x239_239)
}
Mrr_0x239_239::Mrr_0x239_239(const Mrr_0x239_239& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc_uppercomftbandreq_, &from.acc_uppercomftbandreq_,
    reinterpret_cast<char*>(&aba_level_) -
    reinterpret_cast<char*>(&acc_uppercomftbandreq_) + sizeof(aba_level_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Mrr_0x239_239)
}

void Mrr_0x239_239::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&acc_uppercomftbandreq_, 0, reinterpret_cast<char*>(&aba_level_) -
    reinterpret_cast<char*>(&acc_uppercomftbandreq_) + sizeof(aba_level_));
}

Mrr_0x239_239::~Mrr_0x239_239() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Mrr_0x239_239)
  SharedDtor();
}

void Mrr_0x239_239::SharedDtor() {
}

void Mrr_0x239_239::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mrr_0x239_239::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mrr_0x239_239& Mrr_0x239_239::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mrr_0x239_239* Mrr_0x239_239::New(::google::protobuf::Arena* arena) const {
  Mrr_0x239_239* n = new Mrr_0x239_239;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mrr_0x239_239::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Mrr_0x239_239)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&acc_uppercomftbandreq_, 0, reinterpret_cast<char*>(&abp_req_) -
      reinterpret_cast<char*>(&acc_uppercomftbandreq_) + sizeof(abp_req_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&awb_req_, 0, reinterpret_cast<char*>(&aba_level_) -
      reinterpret_cast<char*>(&awb_req_) + sizeof(aba_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Mrr_0x239_239::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Mrr_0x239_239)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_uppercomftbandreqType acc_uppercomftbandreq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x239_239_Acc_uppercomftbandreqType_IsValid(value)) {
            set_acc_uppercomftbandreq(static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Acc_uppercomftbandreqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_brakepreferredType acc_brakepreferred = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x239_239_Acc_brakepreferredType_IsValid(value)) {
            set_acc_brakepreferred(static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Acc_brakepreferredType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x239_239.Eba_reqType eba_req = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x239_239_Eba_reqType_IsValid(value)) {
            set_eba_req(static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Eba_reqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x239_239.Aeb_reqType aeb_req = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x239_239_Aeb_reqType_IsValid(value)) {
            set_aeb_req(static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Aeb_reqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_standstillreqType acc_standstillreq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x239_239_Acc_standstillreqType_IsValid(value)) {
            set_acc_standstillreq(static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Acc_standstillreqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_driveoffType acc_driveoff = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x239_239_Acc_driveoffType_IsValid(value)) {
            set_acc_driveoff(static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Acc_driveoffType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x239_239.Awb_levelType awb_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x239_239_Awb_levelType_IsValid(value)) {
            set_awb_level(static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Awb_levelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x239_239.Abp_reqType abp_req = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x239_239_Abp_reqType_IsValid(value)) {
            set_abp_req(static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Abp_reqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x239_239.Awb_reqType awb_req = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x239_239_Awb_reqType_IsValid(value)) {
            set_awb_req(static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Awb_reqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x239_239.Aba_reqType aba_req = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x239_239_Aba_reqType_IsValid(value)) {
            set_aba_req(static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Aba_reqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double aeb_tgtax = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_aeb_tgtax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aeb_tgtax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_stateType acc_state = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x239_239_Acc_stateType_IsValid(value)) {
            set_acc_state(static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Acc_stateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x239 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_rolling_counter_0x239();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x239_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x239 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_checksum_0x239();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x239_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x239_239.ShutdownmodeType shutdownmode = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x239_239_ShutdownmodeType_IsValid(value)) {
            set_shutdownmode(static_cast< ::jmc_auto::canbus::Mrr_0x239_239_ShutdownmodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x239_239.Aba_levelType aba_level = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x239_239_Aba_levelType_IsValid(value)) {
            set_aba_level(static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Aba_levelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Mrr_0x239_239)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Mrr_0x239_239)
  return false;
#undef DO_
}

void Mrr_0x239_239::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Mrr_0x239_239)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_uppercomftbandreqType acc_uppercomftbandreq = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->acc_uppercomftbandreq(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_brakepreferredType acc_brakepreferred = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->acc_brakepreferred(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Eba_reqType eba_req = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->eba_req(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Aeb_reqType aeb_req = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->aeb_req(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_standstillreqType acc_standstillreq = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->acc_standstillreq(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_driveoffType acc_driveoff = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->acc_driveoff(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Awb_levelType awb_level = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->awb_level(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Abp_reqType abp_req = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->abp_req(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Awb_reqType awb_req = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->awb_req(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Aba_reqType aba_req = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->aba_req(), output);
  }

  // optional double aeb_tgtax = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->aeb_tgtax(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_stateType acc_state = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->acc_state(), output);
  }

  // optional int32 rolling_counter_0x239 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->rolling_counter_0x239(), output);
  }

  // optional int32 checksum_0x239 = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->checksum_0x239(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.ShutdownmodeType shutdownmode = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->shutdownmode(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Aba_levelType aba_level = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->aba_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Mrr_0x239_239)
}

::google::protobuf::uint8* Mrr_0x239_239::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Mrr_0x239_239)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_uppercomftbandreqType acc_uppercomftbandreq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->acc_uppercomftbandreq(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_brakepreferredType acc_brakepreferred = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->acc_brakepreferred(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Eba_reqType eba_req = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->eba_req(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Aeb_reqType aeb_req = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->aeb_req(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_standstillreqType acc_standstillreq = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->acc_standstillreq(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_driveoffType acc_driveoff = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->acc_driveoff(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Awb_levelType awb_level = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->awb_level(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Abp_reqType abp_req = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->abp_req(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Awb_reqType awb_req = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->awb_req(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Aba_reqType aba_req = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->aba_req(), target);
  }

  // optional double aeb_tgtax = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->aeb_tgtax(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_stateType acc_state = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->acc_state(), target);
  }

  // optional int32 rolling_counter_0x239 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->rolling_counter_0x239(), target);
  }

  // optional int32 checksum_0x239 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->checksum_0x239(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.ShutdownmodeType shutdownmode = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->shutdownmode(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239.Aba_levelType aba_level = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->aba_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Mrr_0x239_239)
  return target;
}

size_t Mrr_0x239_239::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Mrr_0x239_239)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_uppercomftbandreqType acc_uppercomftbandreq = 1;
    if (has_acc_uppercomftbandreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->acc_uppercomftbandreq());
    }

    // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_brakepreferredType acc_brakepreferred = 2;
    if (has_acc_brakepreferred()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->acc_brakepreferred());
    }

    // optional .jmc_auto.canbus.Mrr_0x239_239.Eba_reqType eba_req = 3;
    if (has_eba_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eba_req());
    }

    // optional .jmc_auto.canbus.Mrr_0x239_239.Aeb_reqType aeb_req = 4;
    if (has_aeb_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->aeb_req());
    }

    // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_standstillreqType acc_standstillreq = 5;
    if (has_acc_standstillreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->acc_standstillreq());
    }

    // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_driveoffType acc_driveoff = 6;
    if (has_acc_driveoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->acc_driveoff());
    }

    // optional .jmc_auto.canbus.Mrr_0x239_239.Awb_levelType awb_level = 7;
    if (has_awb_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->awb_level());
    }

    // optional .jmc_auto.canbus.Mrr_0x239_239.Abp_reqType abp_req = 8;
    if (has_abp_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->abp_req());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .jmc_auto.canbus.Mrr_0x239_239.Awb_reqType awb_req = 9;
    if (has_awb_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->awb_req());
    }

    // optional .jmc_auto.canbus.Mrr_0x239_239.Aba_reqType aba_req = 10;
    if (has_aba_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->aba_req());
    }

    // optional double aeb_tgtax = 11;
    if (has_aeb_tgtax()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Mrr_0x239_239.Acc_stateType acc_state = 12;
    if (has_acc_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->acc_state());
    }

    // optional int32 rolling_counter_0x239 = 13;
    if (has_rolling_counter_0x239()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x239());
    }

    // optional int32 checksum_0x239 = 14;
    if (has_checksum_0x239()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x239());
    }

    // optional .jmc_auto.canbus.Mrr_0x239_239.ShutdownmodeType shutdownmode = 15;
    if (has_shutdownmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shutdownmode());
    }

    // optional .jmc_auto.canbus.Mrr_0x239_239.Aba_levelType aba_level = 16;
    if (has_aba_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->aba_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mrr_0x239_239::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Mrr_0x239_239)
  GOOGLE_DCHECK_NE(&from, this);
  const Mrr_0x239_239* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mrr_0x239_239>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Mrr_0x239_239)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Mrr_0x239_239)
    MergeFrom(*source);
  }
}

void Mrr_0x239_239::MergeFrom(const Mrr_0x239_239& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Mrr_0x239_239)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      acc_uppercomftbandreq_ = from.acc_uppercomftbandreq_;
    }
    if (cached_has_bits & 0x00000002u) {
      acc_brakepreferred_ = from.acc_brakepreferred_;
    }
    if (cached_has_bits & 0x00000004u) {
      eba_req_ = from.eba_req_;
    }
    if (cached_has_bits & 0x00000008u) {
      aeb_req_ = from.aeb_req_;
    }
    if (cached_has_bits & 0x00000010u) {
      acc_standstillreq_ = from.acc_standstillreq_;
    }
    if (cached_has_bits & 0x00000020u) {
      acc_driveoff_ = from.acc_driveoff_;
    }
    if (cached_has_bits & 0x00000040u) {
      awb_level_ = from.awb_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      abp_req_ = from.abp_req_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      awb_req_ = from.awb_req_;
    }
    if (cached_has_bits & 0x00000200u) {
      aba_req_ = from.aba_req_;
    }
    if (cached_has_bits & 0x00000400u) {
      aeb_tgtax_ = from.aeb_tgtax_;
    }
    if (cached_has_bits & 0x00000800u) {
      acc_state_ = from.acc_state_;
    }
    if (cached_has_bits & 0x00001000u) {
      rolling_counter_0x239_ = from.rolling_counter_0x239_;
    }
    if (cached_has_bits & 0x00002000u) {
      checksum_0x239_ = from.checksum_0x239_;
    }
    if (cached_has_bits & 0x00004000u) {
      shutdownmode_ = from.shutdownmode_;
    }
    if (cached_has_bits & 0x00008000u) {
      aba_level_ = from.aba_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Mrr_0x239_239::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Mrr_0x239_239)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mrr_0x239_239::CopyFrom(const Mrr_0x239_239& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Mrr_0x239_239)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mrr_0x239_239::IsInitialized() const {
  return true;
}

void Mrr_0x239_239::Swap(Mrr_0x239_239* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mrr_0x239_239::InternalSwap(Mrr_0x239_239* other) {
  std::swap(acc_uppercomftbandreq_, other->acc_uppercomftbandreq_);
  std::swap(acc_brakepreferred_, other->acc_brakepreferred_);
  std::swap(eba_req_, other->eba_req_);
  std::swap(aeb_req_, other->aeb_req_);
  std::swap(acc_standstillreq_, other->acc_standstillreq_);
  std::swap(acc_driveoff_, other->acc_driveoff_);
  std::swap(awb_level_, other->awb_level_);
  std::swap(abp_req_, other->abp_req_);
  std::swap(awb_req_, other->awb_req_);
  std::swap(aba_req_, other->aba_req_);
  std::swap(aeb_tgtax_, other->aeb_tgtax_);
  std::swap(acc_state_, other->acc_state_);
  std::swap(rolling_counter_0x239_, other->rolling_counter_0x239_);
  std::swap(checksum_0x239_, other->checksum_0x239_);
  std::swap(shutdownmode_, other->shutdownmode_);
  std::swap(aba_level_, other->aba_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mrr_0x239_239::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mrr_0x239_239

// optional .jmc_auto.canbus.Mrr_0x239_239.Acc_uppercomftbandreqType acc_uppercomftbandreq = 1;
bool Mrr_0x239_239::has_acc_uppercomftbandreq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Mrr_0x239_239::set_has_acc_uppercomftbandreq() {
  _has_bits_[0] |= 0x00000001u;
}
void Mrr_0x239_239::clear_has_acc_uppercomftbandreq() {
  _has_bits_[0] &= ~0x00000001u;
}
void Mrr_0x239_239::clear_acc_uppercomftbandreq() {
  acc_uppercomftbandreq_ = 0;
  clear_has_acc_uppercomftbandreq();
}
::jmc_auto::canbus::Mrr_0x239_239_Acc_uppercomftbandreqType Mrr_0x239_239::acc_uppercomftbandreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.acc_uppercomftbandreq)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Acc_uppercomftbandreqType >(acc_uppercomftbandreq_);
}
void Mrr_0x239_239::set_acc_uppercomftbandreq(::jmc_auto::canbus::Mrr_0x239_239_Acc_uppercomftbandreqType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Acc_uppercomftbandreqType_IsValid(value));
  set_has_acc_uppercomftbandreq();
  acc_uppercomftbandreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.acc_uppercomftbandreq)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Acc_brakepreferredType acc_brakepreferred = 2;
bool Mrr_0x239_239::has_acc_brakepreferred() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Mrr_0x239_239::set_has_acc_brakepreferred() {
  _has_bits_[0] |= 0x00000002u;
}
void Mrr_0x239_239::clear_has_acc_brakepreferred() {
  _has_bits_[0] &= ~0x00000002u;
}
void Mrr_0x239_239::clear_acc_brakepreferred() {
  acc_brakepreferred_ = 0;
  clear_has_acc_brakepreferred();
}
::jmc_auto::canbus::Mrr_0x239_239_Acc_brakepreferredType Mrr_0x239_239::acc_brakepreferred() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.acc_brakepreferred)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Acc_brakepreferredType >(acc_brakepreferred_);
}
void Mrr_0x239_239::set_acc_brakepreferred(::jmc_auto::canbus::Mrr_0x239_239_Acc_brakepreferredType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Acc_brakepreferredType_IsValid(value));
  set_has_acc_brakepreferred();
  acc_brakepreferred_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.acc_brakepreferred)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Eba_reqType eba_req = 3;
bool Mrr_0x239_239::has_eba_req() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Mrr_0x239_239::set_has_eba_req() {
  _has_bits_[0] |= 0x00000004u;
}
void Mrr_0x239_239::clear_has_eba_req() {
  _has_bits_[0] &= ~0x00000004u;
}
void Mrr_0x239_239::clear_eba_req() {
  eba_req_ = 0;
  clear_has_eba_req();
}
::jmc_auto::canbus::Mrr_0x239_239_Eba_reqType Mrr_0x239_239::eba_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.eba_req)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Eba_reqType >(eba_req_);
}
void Mrr_0x239_239::set_eba_req(::jmc_auto::canbus::Mrr_0x239_239_Eba_reqType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Eba_reqType_IsValid(value));
  set_has_eba_req();
  eba_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.eba_req)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Aeb_reqType aeb_req = 4;
bool Mrr_0x239_239::has_aeb_req() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Mrr_0x239_239::set_has_aeb_req() {
  _has_bits_[0] |= 0x00000008u;
}
void Mrr_0x239_239::clear_has_aeb_req() {
  _has_bits_[0] &= ~0x00000008u;
}
void Mrr_0x239_239::clear_aeb_req() {
  aeb_req_ = 0;
  clear_has_aeb_req();
}
::jmc_auto::canbus::Mrr_0x239_239_Aeb_reqType Mrr_0x239_239::aeb_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.aeb_req)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Aeb_reqType >(aeb_req_);
}
void Mrr_0x239_239::set_aeb_req(::jmc_auto::canbus::Mrr_0x239_239_Aeb_reqType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Aeb_reqType_IsValid(value));
  set_has_aeb_req();
  aeb_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.aeb_req)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Acc_standstillreqType acc_standstillreq = 5;
bool Mrr_0x239_239::has_acc_standstillreq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Mrr_0x239_239::set_has_acc_standstillreq() {
  _has_bits_[0] |= 0x00000010u;
}
void Mrr_0x239_239::clear_has_acc_standstillreq() {
  _has_bits_[0] &= ~0x00000010u;
}
void Mrr_0x239_239::clear_acc_standstillreq() {
  acc_standstillreq_ = 0;
  clear_has_acc_standstillreq();
}
::jmc_auto::canbus::Mrr_0x239_239_Acc_standstillreqType Mrr_0x239_239::acc_standstillreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.acc_standstillreq)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Acc_standstillreqType >(acc_standstillreq_);
}
void Mrr_0x239_239::set_acc_standstillreq(::jmc_auto::canbus::Mrr_0x239_239_Acc_standstillreqType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Acc_standstillreqType_IsValid(value));
  set_has_acc_standstillreq();
  acc_standstillreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.acc_standstillreq)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Acc_driveoffType acc_driveoff = 6;
bool Mrr_0x239_239::has_acc_driveoff() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Mrr_0x239_239::set_has_acc_driveoff() {
  _has_bits_[0] |= 0x00000020u;
}
void Mrr_0x239_239::clear_has_acc_driveoff() {
  _has_bits_[0] &= ~0x00000020u;
}
void Mrr_0x239_239::clear_acc_driveoff() {
  acc_driveoff_ = 0;
  clear_has_acc_driveoff();
}
::jmc_auto::canbus::Mrr_0x239_239_Acc_driveoffType Mrr_0x239_239::acc_driveoff() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.acc_driveoff)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Acc_driveoffType >(acc_driveoff_);
}
void Mrr_0x239_239::set_acc_driveoff(::jmc_auto::canbus::Mrr_0x239_239_Acc_driveoffType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Acc_driveoffType_IsValid(value));
  set_has_acc_driveoff();
  acc_driveoff_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.acc_driveoff)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Awb_levelType awb_level = 7;
bool Mrr_0x239_239::has_awb_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Mrr_0x239_239::set_has_awb_level() {
  _has_bits_[0] |= 0x00000040u;
}
void Mrr_0x239_239::clear_has_awb_level() {
  _has_bits_[0] &= ~0x00000040u;
}
void Mrr_0x239_239::clear_awb_level() {
  awb_level_ = 0;
  clear_has_awb_level();
}
::jmc_auto::canbus::Mrr_0x239_239_Awb_levelType Mrr_0x239_239::awb_level() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.awb_level)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Awb_levelType >(awb_level_);
}
void Mrr_0x239_239::set_awb_level(::jmc_auto::canbus::Mrr_0x239_239_Awb_levelType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Awb_levelType_IsValid(value));
  set_has_awb_level();
  awb_level_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.awb_level)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Abp_reqType abp_req = 8;
bool Mrr_0x239_239::has_abp_req() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Mrr_0x239_239::set_has_abp_req() {
  _has_bits_[0] |= 0x00000080u;
}
void Mrr_0x239_239::clear_has_abp_req() {
  _has_bits_[0] &= ~0x00000080u;
}
void Mrr_0x239_239::clear_abp_req() {
  abp_req_ = 0;
  clear_has_abp_req();
}
::jmc_auto::canbus::Mrr_0x239_239_Abp_reqType Mrr_0x239_239::abp_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.abp_req)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Abp_reqType >(abp_req_);
}
void Mrr_0x239_239::set_abp_req(::jmc_auto::canbus::Mrr_0x239_239_Abp_reqType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Abp_reqType_IsValid(value));
  set_has_abp_req();
  abp_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.abp_req)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Awb_reqType awb_req = 9;
bool Mrr_0x239_239::has_awb_req() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Mrr_0x239_239::set_has_awb_req() {
  _has_bits_[0] |= 0x00000100u;
}
void Mrr_0x239_239::clear_has_awb_req() {
  _has_bits_[0] &= ~0x00000100u;
}
void Mrr_0x239_239::clear_awb_req() {
  awb_req_ = 0;
  clear_has_awb_req();
}
::jmc_auto::canbus::Mrr_0x239_239_Awb_reqType Mrr_0x239_239::awb_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.awb_req)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Awb_reqType >(awb_req_);
}
void Mrr_0x239_239::set_awb_req(::jmc_auto::canbus::Mrr_0x239_239_Awb_reqType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Awb_reqType_IsValid(value));
  set_has_awb_req();
  awb_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.awb_req)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Aba_reqType aba_req = 10;
bool Mrr_0x239_239::has_aba_req() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Mrr_0x239_239::set_has_aba_req() {
  _has_bits_[0] |= 0x00000200u;
}
void Mrr_0x239_239::clear_has_aba_req() {
  _has_bits_[0] &= ~0x00000200u;
}
void Mrr_0x239_239::clear_aba_req() {
  aba_req_ = 0;
  clear_has_aba_req();
}
::jmc_auto::canbus::Mrr_0x239_239_Aba_reqType Mrr_0x239_239::aba_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.aba_req)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Aba_reqType >(aba_req_);
}
void Mrr_0x239_239::set_aba_req(::jmc_auto::canbus::Mrr_0x239_239_Aba_reqType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Aba_reqType_IsValid(value));
  set_has_aba_req();
  aba_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.aba_req)
}

// optional double aeb_tgtax = 11;
bool Mrr_0x239_239::has_aeb_tgtax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Mrr_0x239_239::set_has_aeb_tgtax() {
  _has_bits_[0] |= 0x00000400u;
}
void Mrr_0x239_239::clear_has_aeb_tgtax() {
  _has_bits_[0] &= ~0x00000400u;
}
void Mrr_0x239_239::clear_aeb_tgtax() {
  aeb_tgtax_ = 0;
  clear_has_aeb_tgtax();
}
double Mrr_0x239_239::aeb_tgtax() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.aeb_tgtax)
  return aeb_tgtax_;
}
void Mrr_0x239_239::set_aeb_tgtax(double value) {
  set_has_aeb_tgtax();
  aeb_tgtax_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.aeb_tgtax)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Acc_stateType acc_state = 12;
bool Mrr_0x239_239::has_acc_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Mrr_0x239_239::set_has_acc_state() {
  _has_bits_[0] |= 0x00000800u;
}
void Mrr_0x239_239::clear_has_acc_state() {
  _has_bits_[0] &= ~0x00000800u;
}
void Mrr_0x239_239::clear_acc_state() {
  acc_state_ = 0;
  clear_has_acc_state();
}
::jmc_auto::canbus::Mrr_0x239_239_Acc_stateType Mrr_0x239_239::acc_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.acc_state)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Acc_stateType >(acc_state_);
}
void Mrr_0x239_239::set_acc_state(::jmc_auto::canbus::Mrr_0x239_239_Acc_stateType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Acc_stateType_IsValid(value));
  set_has_acc_state();
  acc_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.acc_state)
}

// optional int32 rolling_counter_0x239 = 13;
bool Mrr_0x239_239::has_rolling_counter_0x239() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Mrr_0x239_239::set_has_rolling_counter_0x239() {
  _has_bits_[0] |= 0x00001000u;
}
void Mrr_0x239_239::clear_has_rolling_counter_0x239() {
  _has_bits_[0] &= ~0x00001000u;
}
void Mrr_0x239_239::clear_rolling_counter_0x239() {
  rolling_counter_0x239_ = 0;
  clear_has_rolling_counter_0x239();
}
::google::protobuf::int32 Mrr_0x239_239::rolling_counter_0x239() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.rolling_counter_0x239)
  return rolling_counter_0x239_;
}
void Mrr_0x239_239::set_rolling_counter_0x239(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x239();
  rolling_counter_0x239_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.rolling_counter_0x239)
}

// optional int32 checksum_0x239 = 14;
bool Mrr_0x239_239::has_checksum_0x239() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Mrr_0x239_239::set_has_checksum_0x239() {
  _has_bits_[0] |= 0x00002000u;
}
void Mrr_0x239_239::clear_has_checksum_0x239() {
  _has_bits_[0] &= ~0x00002000u;
}
void Mrr_0x239_239::clear_checksum_0x239() {
  checksum_0x239_ = 0;
  clear_has_checksum_0x239();
}
::google::protobuf::int32 Mrr_0x239_239::checksum_0x239() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.checksum_0x239)
  return checksum_0x239_;
}
void Mrr_0x239_239::set_checksum_0x239(::google::protobuf::int32 value) {
  set_has_checksum_0x239();
  checksum_0x239_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.checksum_0x239)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.ShutdownmodeType shutdownmode = 15;
bool Mrr_0x239_239::has_shutdownmode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Mrr_0x239_239::set_has_shutdownmode() {
  _has_bits_[0] |= 0x00004000u;
}
void Mrr_0x239_239::clear_has_shutdownmode() {
  _has_bits_[0] &= ~0x00004000u;
}
void Mrr_0x239_239::clear_shutdownmode() {
  shutdownmode_ = 0;
  clear_has_shutdownmode();
}
::jmc_auto::canbus::Mrr_0x239_239_ShutdownmodeType Mrr_0x239_239::shutdownmode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.shutdownmode)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_ShutdownmodeType >(shutdownmode_);
}
void Mrr_0x239_239::set_shutdownmode(::jmc_auto::canbus::Mrr_0x239_239_ShutdownmodeType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_ShutdownmodeType_IsValid(value));
  set_has_shutdownmode();
  shutdownmode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.shutdownmode)
}

// optional .jmc_auto.canbus.Mrr_0x239_239.Aba_levelType aba_level = 16;
bool Mrr_0x239_239::has_aba_level() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Mrr_0x239_239::set_has_aba_level() {
  _has_bits_[0] |= 0x00008000u;
}
void Mrr_0x239_239::clear_has_aba_level() {
  _has_bits_[0] &= ~0x00008000u;
}
void Mrr_0x239_239::clear_aba_level() {
  aba_level_ = 0;
  clear_has_aba_level();
}
::jmc_auto::canbus::Mrr_0x239_239_Aba_levelType Mrr_0x239_239::aba_level() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x239_239.aba_level)
  return static_cast< ::jmc_auto::canbus::Mrr_0x239_239_Aba_levelType >(aba_level_);
}
void Mrr_0x239_239::set_aba_level(::jmc_auto::canbus::Mrr_0x239_239_Aba_levelType value) {
  assert(::jmc_auto::canbus::Mrr_0x239_239_Aba_levelType_IsValid(value));
  set_has_aba_level();
  aba_level_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x239_239.aba_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esp_direction_0x235_235::kEspWhlmilgrearreFieldNumber;
const int Esp_direction_0x235_235::kEspFrwheeldrivedirstatusFieldNumber;
const int Esp_direction_0x235_235::kEspFlwheeldrivedirstatusFieldNumber;
const int Esp_direction_0x235_235::kEspRrwheeldrivedirstatusFieldNumber;
const int Esp_direction_0x235_235::kEspRlwheeldrivedirstatusFieldNumber;
const int Esp_direction_0x235_235::kEspRrwheeldrivedirectionFieldNumber;
const int Esp_direction_0x235_235::kEspRlwheeldrivedirectionFieldNumber;
const int Esp_direction_0x235_235::kEspFrwheeldrivedirectionFieldNumber;
const int Esp_direction_0x235_235::kEspFlwheeldrivedirectionFieldNumber;
const int Esp_direction_0x235_235::kRollingCounter0X235FieldNumber;
const int Esp_direction_0x235_235::kEspWhlmilgrearlestatusFieldNumber;
const int Esp_direction_0x235_235::kEspWhlmilgrearristatusFieldNumber;
const int Esp_direction_0x235_235::kEspVehiclestandstillFieldNumber;
const int Esp_direction_0x235_235::kChecksum0X235FieldNumber;
const int Esp_direction_0x235_235::kEspWhlmilgrearleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esp_direction_0x235_235::Esp_direction_0x235_235()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Esp_direction_0x235_235)
}
Esp_direction_0x235_235::Esp_direction_0x235_235(const Esp_direction_0x235_235& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&esp_whlmilgrearre_, &from.esp_whlmilgrearre_,
    reinterpret_cast<char*>(&esp_whlmilgrearle_) -
    reinterpret_cast<char*>(&esp_whlmilgrearre_) + sizeof(esp_whlmilgrearle_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Esp_direction_0x235_235)
}

void Esp_direction_0x235_235::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&esp_whlmilgrearre_, 0, reinterpret_cast<char*>(&esp_whlmilgrearle_) -
    reinterpret_cast<char*>(&esp_whlmilgrearre_) + sizeof(esp_whlmilgrearle_));
}

Esp_direction_0x235_235::~Esp_direction_0x235_235() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Esp_direction_0x235_235)
  SharedDtor();
}

void Esp_direction_0x235_235::SharedDtor() {
}

void Esp_direction_0x235_235::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esp_direction_0x235_235::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esp_direction_0x235_235& Esp_direction_0x235_235::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esp_direction_0x235_235* Esp_direction_0x235_235::New(::google::protobuf::Arena* arena) const {
  Esp_direction_0x235_235* n = new Esp_direction_0x235_235;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esp_direction_0x235_235::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Esp_direction_0x235_235)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&esp_whlmilgrearre_, 0, reinterpret_cast<char*>(&esp_frwheeldrivedirection_) -
      reinterpret_cast<char*>(&esp_whlmilgrearre_) + sizeof(esp_frwheeldrivedirection_));
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ::memset(&esp_flwheeldrivedirection_, 0, reinterpret_cast<char*>(&esp_whlmilgrearle_) -
      reinterpret_cast<char*>(&esp_flwheeldrivedirection_) + sizeof(esp_whlmilgrearle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esp_direction_0x235_235::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Esp_direction_0x235_235)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 esp_whlmilgrearre = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_esp_whlmilgrearre();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_whlmilgrearre_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_frwheeldrivedirstatusType esp_frwheeldrivedirstatus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_IsValid(value)) {
            set_esp_frwheeldrivedirstatus(static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_flwheeldrivedirstatusType esp_flwheeldrivedirstatus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_IsValid(value)) {
            set_esp_flwheeldrivedirstatus(static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rrwheeldrivedirstatusType esp_rrwheeldrivedirstatus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_IsValid(value)) {
            set_esp_rrwheeldrivedirstatus(static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rlwheeldrivedirstatusType esp_rlwheeldrivedirstatus = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_IsValid(value)) {
            set_esp_rlwheeldrivedirstatus(static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rrwheeldrivedirectionType esp_rrwheeldrivedirection = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_IsValid(value)) {
            set_esp_rrwheeldrivedirection(static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rlwheeldrivedirectionType esp_rlwheeldrivedirection = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_IsValid(value)) {
            set_esp_rlwheeldrivedirection(static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_frwheeldrivedirectionType esp_frwheeldrivedirection = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_IsValid(value)) {
            set_esp_frwheeldrivedirection(static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_flwheeldrivedirectionType esp_flwheeldrivedirection = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_IsValid(value)) {
            set_esp_flwheeldrivedirection(static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x235 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_rolling_counter_0x235();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x235_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_whlmilgrearlestatusType esp_whlmilgrearlestatus = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_IsValid(value)) {
            set_esp_whlmilgrearlestatus(static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearlestatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_whlmilgrearristatusType esp_whlmilgrearristatus = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearristatusType_IsValid(value)) {
            set_esp_whlmilgrearristatus(static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearristatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_vehiclestandstillType esp_vehiclestandstill = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_direction_0x235_235_Esp_vehiclestandstillType_IsValid(value)) {
            set_esp_vehiclestandstill(static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_vehiclestandstillType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x235 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_checksum_0x235();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x235_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 esp_whlmilgrearle = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_esp_whlmilgrearle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_whlmilgrearle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Esp_direction_0x235_235)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Esp_direction_0x235_235)
  return false;
#undef DO_
}

void Esp_direction_0x235_235::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Esp_direction_0x235_235)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 esp_whlmilgrearre = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->esp_whlmilgrearre(), output);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_frwheeldrivedirstatusType esp_frwheeldrivedirstatus = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->esp_frwheeldrivedirstatus(), output);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_flwheeldrivedirstatusType esp_flwheeldrivedirstatus = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->esp_flwheeldrivedirstatus(), output);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rrwheeldrivedirstatusType esp_rrwheeldrivedirstatus = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->esp_rrwheeldrivedirstatus(), output);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rlwheeldrivedirstatusType esp_rlwheeldrivedirstatus = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->esp_rlwheeldrivedirstatus(), output);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rrwheeldrivedirectionType esp_rrwheeldrivedirection = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->esp_rrwheeldrivedirection(), output);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rlwheeldrivedirectionType esp_rlwheeldrivedirection = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->esp_rlwheeldrivedirection(), output);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_frwheeldrivedirectionType esp_frwheeldrivedirection = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->esp_frwheeldrivedirection(), output);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_flwheeldrivedirectionType esp_flwheeldrivedirection = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->esp_flwheeldrivedirection(), output);
  }

  // optional int32 rolling_counter_0x235 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->rolling_counter_0x235(), output);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_whlmilgrearlestatusType esp_whlmilgrearlestatus = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->esp_whlmilgrearlestatus(), output);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_whlmilgrearristatusType esp_whlmilgrearristatus = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->esp_whlmilgrearristatus(), output);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_vehiclestandstillType esp_vehiclestandstill = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->esp_vehiclestandstill(), output);
  }

  // optional int32 checksum_0x235 = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->checksum_0x235(), output);
  }

  // optional int32 esp_whlmilgrearle = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->esp_whlmilgrearle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Esp_direction_0x235_235)
}

::google::protobuf::uint8* Esp_direction_0x235_235::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Esp_direction_0x235_235)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 esp_whlmilgrearre = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->esp_whlmilgrearre(), target);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_frwheeldrivedirstatusType esp_frwheeldrivedirstatus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->esp_frwheeldrivedirstatus(), target);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_flwheeldrivedirstatusType esp_flwheeldrivedirstatus = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->esp_flwheeldrivedirstatus(), target);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rrwheeldrivedirstatusType esp_rrwheeldrivedirstatus = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->esp_rrwheeldrivedirstatus(), target);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rlwheeldrivedirstatusType esp_rlwheeldrivedirstatus = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->esp_rlwheeldrivedirstatus(), target);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rrwheeldrivedirectionType esp_rrwheeldrivedirection = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->esp_rrwheeldrivedirection(), target);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rlwheeldrivedirectionType esp_rlwheeldrivedirection = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->esp_rlwheeldrivedirection(), target);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_frwheeldrivedirectionType esp_frwheeldrivedirection = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->esp_frwheeldrivedirection(), target);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_flwheeldrivedirectionType esp_flwheeldrivedirection = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->esp_flwheeldrivedirection(), target);
  }

  // optional int32 rolling_counter_0x235 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->rolling_counter_0x235(), target);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_whlmilgrearlestatusType esp_whlmilgrearlestatus = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->esp_whlmilgrearlestatus(), target);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_whlmilgrearristatusType esp_whlmilgrearristatus = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->esp_whlmilgrearristatus(), target);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_vehiclestandstillType esp_vehiclestandstill = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->esp_vehiclestandstill(), target);
  }

  // optional int32 checksum_0x235 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->checksum_0x235(), target);
  }

  // optional int32 esp_whlmilgrearle = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->esp_whlmilgrearle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Esp_direction_0x235_235)
  return target;
}

size_t Esp_direction_0x235_235::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Esp_direction_0x235_235)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 esp_whlmilgrearre = 1;
    if (has_esp_whlmilgrearre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_whlmilgrearre());
    }

    // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_frwheeldrivedirstatusType esp_frwheeldrivedirstatus = 2;
    if (has_esp_frwheeldrivedirstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_frwheeldrivedirstatus());
    }

    // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_flwheeldrivedirstatusType esp_flwheeldrivedirstatus = 3;
    if (has_esp_flwheeldrivedirstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_flwheeldrivedirstatus());
    }

    // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rrwheeldrivedirstatusType esp_rrwheeldrivedirstatus = 4;
    if (has_esp_rrwheeldrivedirstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_rrwheeldrivedirstatus());
    }

    // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rlwheeldrivedirstatusType esp_rlwheeldrivedirstatus = 5;
    if (has_esp_rlwheeldrivedirstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_rlwheeldrivedirstatus());
    }

    // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rrwheeldrivedirectionType esp_rrwheeldrivedirection = 6;
    if (has_esp_rrwheeldrivedirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_rrwheeldrivedirection());
    }

    // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rlwheeldrivedirectionType esp_rlwheeldrivedirection = 7;
    if (has_esp_rlwheeldrivedirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_rlwheeldrivedirection());
    }

    // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_frwheeldrivedirectionType esp_frwheeldrivedirection = 8;
    if (has_esp_frwheeldrivedirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_frwheeldrivedirection());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_flwheeldrivedirectionType esp_flwheeldrivedirection = 9;
    if (has_esp_flwheeldrivedirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_flwheeldrivedirection());
    }

    // optional int32 rolling_counter_0x235 = 10;
    if (has_rolling_counter_0x235()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x235());
    }

    // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_whlmilgrearlestatusType esp_whlmilgrearlestatus = 11;
    if (has_esp_whlmilgrearlestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_whlmilgrearlestatus());
    }

    // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_whlmilgrearristatusType esp_whlmilgrearristatus = 12;
    if (has_esp_whlmilgrearristatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_whlmilgrearristatus());
    }

    // optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_vehiclestandstillType esp_vehiclestandstill = 13;
    if (has_esp_vehiclestandstill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_vehiclestandstill());
    }

    // optional int32 checksum_0x235 = 14;
    if (has_checksum_0x235()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x235());
    }

    // optional int32 esp_whlmilgrearle = 15;
    if (has_esp_whlmilgrearle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_whlmilgrearle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esp_direction_0x235_235::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Esp_direction_0x235_235)
  GOOGLE_DCHECK_NE(&from, this);
  const Esp_direction_0x235_235* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esp_direction_0x235_235>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Esp_direction_0x235_235)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Esp_direction_0x235_235)
    MergeFrom(*source);
  }
}

void Esp_direction_0x235_235::MergeFrom(const Esp_direction_0x235_235& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Esp_direction_0x235_235)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      esp_whlmilgrearre_ = from.esp_whlmilgrearre_;
    }
    if (cached_has_bits & 0x00000002u) {
      esp_frwheeldrivedirstatus_ = from.esp_frwheeldrivedirstatus_;
    }
    if (cached_has_bits & 0x00000004u) {
      esp_flwheeldrivedirstatus_ = from.esp_flwheeldrivedirstatus_;
    }
    if (cached_has_bits & 0x00000008u) {
      esp_rrwheeldrivedirstatus_ = from.esp_rrwheeldrivedirstatus_;
    }
    if (cached_has_bits & 0x00000010u) {
      esp_rlwheeldrivedirstatus_ = from.esp_rlwheeldrivedirstatus_;
    }
    if (cached_has_bits & 0x00000020u) {
      esp_rrwheeldrivedirection_ = from.esp_rrwheeldrivedirection_;
    }
    if (cached_has_bits & 0x00000040u) {
      esp_rlwheeldrivedirection_ = from.esp_rlwheeldrivedirection_;
    }
    if (cached_has_bits & 0x00000080u) {
      esp_frwheeldrivedirection_ = from.esp_frwheeldrivedirection_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      esp_flwheeldrivedirection_ = from.esp_flwheeldrivedirection_;
    }
    if (cached_has_bits & 0x00000200u) {
      rolling_counter_0x235_ = from.rolling_counter_0x235_;
    }
    if (cached_has_bits & 0x00000400u) {
      esp_whlmilgrearlestatus_ = from.esp_whlmilgrearlestatus_;
    }
    if (cached_has_bits & 0x00000800u) {
      esp_whlmilgrearristatus_ = from.esp_whlmilgrearristatus_;
    }
    if (cached_has_bits & 0x00001000u) {
      esp_vehiclestandstill_ = from.esp_vehiclestandstill_;
    }
    if (cached_has_bits & 0x00002000u) {
      checksum_0x235_ = from.checksum_0x235_;
    }
    if (cached_has_bits & 0x00004000u) {
      esp_whlmilgrearle_ = from.esp_whlmilgrearle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esp_direction_0x235_235::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Esp_direction_0x235_235)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esp_direction_0x235_235::CopyFrom(const Esp_direction_0x235_235& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Esp_direction_0x235_235)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esp_direction_0x235_235::IsInitialized() const {
  return true;
}

void Esp_direction_0x235_235::Swap(Esp_direction_0x235_235* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esp_direction_0x235_235::InternalSwap(Esp_direction_0x235_235* other) {
  std::swap(esp_whlmilgrearre_, other->esp_whlmilgrearre_);
  std::swap(esp_frwheeldrivedirstatus_, other->esp_frwheeldrivedirstatus_);
  std::swap(esp_flwheeldrivedirstatus_, other->esp_flwheeldrivedirstatus_);
  std::swap(esp_rrwheeldrivedirstatus_, other->esp_rrwheeldrivedirstatus_);
  std::swap(esp_rlwheeldrivedirstatus_, other->esp_rlwheeldrivedirstatus_);
  std::swap(esp_rrwheeldrivedirection_, other->esp_rrwheeldrivedirection_);
  std::swap(esp_rlwheeldrivedirection_, other->esp_rlwheeldrivedirection_);
  std::swap(esp_frwheeldrivedirection_, other->esp_frwheeldrivedirection_);
  std::swap(esp_flwheeldrivedirection_, other->esp_flwheeldrivedirection_);
  std::swap(rolling_counter_0x235_, other->rolling_counter_0x235_);
  std::swap(esp_whlmilgrearlestatus_, other->esp_whlmilgrearlestatus_);
  std::swap(esp_whlmilgrearristatus_, other->esp_whlmilgrearristatus_);
  std::swap(esp_vehiclestandstill_, other->esp_vehiclestandstill_);
  std::swap(checksum_0x235_, other->checksum_0x235_);
  std::swap(esp_whlmilgrearle_, other->esp_whlmilgrearle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esp_direction_0x235_235::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esp_direction_0x235_235

// optional int32 esp_whlmilgrearre = 1;
bool Esp_direction_0x235_235::has_esp_whlmilgrearre() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esp_direction_0x235_235::set_has_esp_whlmilgrearre() {
  _has_bits_[0] |= 0x00000001u;
}
void Esp_direction_0x235_235::clear_has_esp_whlmilgrearre() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esp_direction_0x235_235::clear_esp_whlmilgrearre() {
  esp_whlmilgrearre_ = 0;
  clear_has_esp_whlmilgrearre();
}
::google::protobuf::int32 Esp_direction_0x235_235::esp_whlmilgrearre() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_whlmilgrearre)
  return esp_whlmilgrearre_;
}
void Esp_direction_0x235_235::set_esp_whlmilgrearre(::google::protobuf::int32 value) {
  set_has_esp_whlmilgrearre();
  esp_whlmilgrearre_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_whlmilgrearre)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_frwheeldrivedirstatusType esp_frwheeldrivedirstatus = 2;
bool Esp_direction_0x235_235::has_esp_frwheeldrivedirstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esp_direction_0x235_235::set_has_esp_frwheeldrivedirstatus() {
  _has_bits_[0] |= 0x00000002u;
}
void Esp_direction_0x235_235::clear_has_esp_frwheeldrivedirstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esp_direction_0x235_235::clear_esp_frwheeldrivedirstatus() {
  esp_frwheeldrivedirstatus_ = 0;
  clear_has_esp_frwheeldrivedirstatus();
}
::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType Esp_direction_0x235_235::esp_frwheeldrivedirstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_frwheeldrivedirstatus)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType >(esp_frwheeldrivedirstatus_);
}
void Esp_direction_0x235_235::set_esp_frwheeldrivedirstatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirstatusType_IsValid(value));
  set_has_esp_frwheeldrivedirstatus();
  esp_frwheeldrivedirstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_frwheeldrivedirstatus)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_flwheeldrivedirstatusType esp_flwheeldrivedirstatus = 3;
bool Esp_direction_0x235_235::has_esp_flwheeldrivedirstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esp_direction_0x235_235::set_has_esp_flwheeldrivedirstatus() {
  _has_bits_[0] |= 0x00000004u;
}
void Esp_direction_0x235_235::clear_has_esp_flwheeldrivedirstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esp_direction_0x235_235::clear_esp_flwheeldrivedirstatus() {
  esp_flwheeldrivedirstatus_ = 0;
  clear_has_esp_flwheeldrivedirstatus();
}
::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType Esp_direction_0x235_235::esp_flwheeldrivedirstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_flwheeldrivedirstatus)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType >(esp_flwheeldrivedirstatus_);
}
void Esp_direction_0x235_235::set_esp_flwheeldrivedirstatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirstatusType_IsValid(value));
  set_has_esp_flwheeldrivedirstatus();
  esp_flwheeldrivedirstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_flwheeldrivedirstatus)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rrwheeldrivedirstatusType esp_rrwheeldrivedirstatus = 4;
bool Esp_direction_0x235_235::has_esp_rrwheeldrivedirstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esp_direction_0x235_235::set_has_esp_rrwheeldrivedirstatus() {
  _has_bits_[0] |= 0x00000008u;
}
void Esp_direction_0x235_235::clear_has_esp_rrwheeldrivedirstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esp_direction_0x235_235::clear_esp_rrwheeldrivedirstatus() {
  esp_rrwheeldrivedirstatus_ = 0;
  clear_has_esp_rrwheeldrivedirstatus();
}
::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType Esp_direction_0x235_235::esp_rrwheeldrivedirstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_rrwheeldrivedirstatus)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType >(esp_rrwheeldrivedirstatus_);
}
void Esp_direction_0x235_235::set_esp_rrwheeldrivedirstatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirstatusType_IsValid(value));
  set_has_esp_rrwheeldrivedirstatus();
  esp_rrwheeldrivedirstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_rrwheeldrivedirstatus)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rlwheeldrivedirstatusType esp_rlwheeldrivedirstatus = 5;
bool Esp_direction_0x235_235::has_esp_rlwheeldrivedirstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esp_direction_0x235_235::set_has_esp_rlwheeldrivedirstatus() {
  _has_bits_[0] |= 0x00000010u;
}
void Esp_direction_0x235_235::clear_has_esp_rlwheeldrivedirstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esp_direction_0x235_235::clear_esp_rlwheeldrivedirstatus() {
  esp_rlwheeldrivedirstatus_ = 0;
  clear_has_esp_rlwheeldrivedirstatus();
}
::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType Esp_direction_0x235_235::esp_rlwheeldrivedirstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_rlwheeldrivedirstatus)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType >(esp_rlwheeldrivedirstatus_);
}
void Esp_direction_0x235_235::set_esp_rlwheeldrivedirstatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirstatusType_IsValid(value));
  set_has_esp_rlwheeldrivedirstatus();
  esp_rlwheeldrivedirstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_rlwheeldrivedirstatus)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rrwheeldrivedirectionType esp_rrwheeldrivedirection = 6;
bool Esp_direction_0x235_235::has_esp_rrwheeldrivedirection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Esp_direction_0x235_235::set_has_esp_rrwheeldrivedirection() {
  _has_bits_[0] |= 0x00000020u;
}
void Esp_direction_0x235_235::clear_has_esp_rrwheeldrivedirection() {
  _has_bits_[0] &= ~0x00000020u;
}
void Esp_direction_0x235_235::clear_esp_rrwheeldrivedirection() {
  esp_rrwheeldrivedirection_ = 0;
  clear_has_esp_rrwheeldrivedirection();
}
::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType Esp_direction_0x235_235::esp_rrwheeldrivedirection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_rrwheeldrivedirection)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType >(esp_rrwheeldrivedirection_);
}
void Esp_direction_0x235_235::set_esp_rrwheeldrivedirection(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rrwheeldrivedirectionType_IsValid(value));
  set_has_esp_rrwheeldrivedirection();
  esp_rrwheeldrivedirection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_rrwheeldrivedirection)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_rlwheeldrivedirectionType esp_rlwheeldrivedirection = 7;
bool Esp_direction_0x235_235::has_esp_rlwheeldrivedirection() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Esp_direction_0x235_235::set_has_esp_rlwheeldrivedirection() {
  _has_bits_[0] |= 0x00000040u;
}
void Esp_direction_0x235_235::clear_has_esp_rlwheeldrivedirection() {
  _has_bits_[0] &= ~0x00000040u;
}
void Esp_direction_0x235_235::clear_esp_rlwheeldrivedirection() {
  esp_rlwheeldrivedirection_ = 0;
  clear_has_esp_rlwheeldrivedirection();
}
::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType Esp_direction_0x235_235::esp_rlwheeldrivedirection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_rlwheeldrivedirection)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType >(esp_rlwheeldrivedirection_);
}
void Esp_direction_0x235_235::set_esp_rlwheeldrivedirection(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_rlwheeldrivedirectionType_IsValid(value));
  set_has_esp_rlwheeldrivedirection();
  esp_rlwheeldrivedirection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_rlwheeldrivedirection)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_frwheeldrivedirectionType esp_frwheeldrivedirection = 8;
bool Esp_direction_0x235_235::has_esp_frwheeldrivedirection() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Esp_direction_0x235_235::set_has_esp_frwheeldrivedirection() {
  _has_bits_[0] |= 0x00000080u;
}
void Esp_direction_0x235_235::clear_has_esp_frwheeldrivedirection() {
  _has_bits_[0] &= ~0x00000080u;
}
void Esp_direction_0x235_235::clear_esp_frwheeldrivedirection() {
  esp_frwheeldrivedirection_ = 0;
  clear_has_esp_frwheeldrivedirection();
}
::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirectionType Esp_direction_0x235_235::esp_frwheeldrivedirection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_frwheeldrivedirection)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirectionType >(esp_frwheeldrivedirection_);
}
void Esp_direction_0x235_235::set_esp_frwheeldrivedirection(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirectionType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_frwheeldrivedirectionType_IsValid(value));
  set_has_esp_frwheeldrivedirection();
  esp_frwheeldrivedirection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_frwheeldrivedirection)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_flwheeldrivedirectionType esp_flwheeldrivedirection = 9;
bool Esp_direction_0x235_235::has_esp_flwheeldrivedirection() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Esp_direction_0x235_235::set_has_esp_flwheeldrivedirection() {
  _has_bits_[0] |= 0x00000100u;
}
void Esp_direction_0x235_235::clear_has_esp_flwheeldrivedirection() {
  _has_bits_[0] &= ~0x00000100u;
}
void Esp_direction_0x235_235::clear_esp_flwheeldrivedirection() {
  esp_flwheeldrivedirection_ = 0;
  clear_has_esp_flwheeldrivedirection();
}
::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirectionType Esp_direction_0x235_235::esp_flwheeldrivedirection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_flwheeldrivedirection)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirectionType >(esp_flwheeldrivedirection_);
}
void Esp_direction_0x235_235::set_esp_flwheeldrivedirection(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirectionType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_flwheeldrivedirectionType_IsValid(value));
  set_has_esp_flwheeldrivedirection();
  esp_flwheeldrivedirection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_flwheeldrivedirection)
}

// optional int32 rolling_counter_0x235 = 10;
bool Esp_direction_0x235_235::has_rolling_counter_0x235() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Esp_direction_0x235_235::set_has_rolling_counter_0x235() {
  _has_bits_[0] |= 0x00000200u;
}
void Esp_direction_0x235_235::clear_has_rolling_counter_0x235() {
  _has_bits_[0] &= ~0x00000200u;
}
void Esp_direction_0x235_235::clear_rolling_counter_0x235() {
  rolling_counter_0x235_ = 0;
  clear_has_rolling_counter_0x235();
}
::google::protobuf::int32 Esp_direction_0x235_235::rolling_counter_0x235() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.rolling_counter_0x235)
  return rolling_counter_0x235_;
}
void Esp_direction_0x235_235::set_rolling_counter_0x235(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x235();
  rolling_counter_0x235_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.rolling_counter_0x235)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_whlmilgrearlestatusType esp_whlmilgrearlestatus = 11;
bool Esp_direction_0x235_235::has_esp_whlmilgrearlestatus() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Esp_direction_0x235_235::set_has_esp_whlmilgrearlestatus() {
  _has_bits_[0] |= 0x00000400u;
}
void Esp_direction_0x235_235::clear_has_esp_whlmilgrearlestatus() {
  _has_bits_[0] &= ~0x00000400u;
}
void Esp_direction_0x235_235::clear_esp_whlmilgrearlestatus() {
  esp_whlmilgrearlestatus_ = 0;
  clear_has_esp_whlmilgrearlestatus();
}
::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearlestatusType Esp_direction_0x235_235::esp_whlmilgrearlestatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_whlmilgrearlestatus)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearlestatusType >(esp_whlmilgrearlestatus_);
}
void Esp_direction_0x235_235::set_esp_whlmilgrearlestatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearlestatusType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearlestatusType_IsValid(value));
  set_has_esp_whlmilgrearlestatus();
  esp_whlmilgrearlestatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_whlmilgrearlestatus)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_whlmilgrearristatusType esp_whlmilgrearristatus = 12;
bool Esp_direction_0x235_235::has_esp_whlmilgrearristatus() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Esp_direction_0x235_235::set_has_esp_whlmilgrearristatus() {
  _has_bits_[0] |= 0x00000800u;
}
void Esp_direction_0x235_235::clear_has_esp_whlmilgrearristatus() {
  _has_bits_[0] &= ~0x00000800u;
}
void Esp_direction_0x235_235::clear_esp_whlmilgrearristatus() {
  esp_whlmilgrearristatus_ = 0;
  clear_has_esp_whlmilgrearristatus();
}
::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearristatusType Esp_direction_0x235_235::esp_whlmilgrearristatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_whlmilgrearristatus)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearristatusType >(esp_whlmilgrearristatus_);
}
void Esp_direction_0x235_235::set_esp_whlmilgrearristatus(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearristatusType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_whlmilgrearristatusType_IsValid(value));
  set_has_esp_whlmilgrearristatus();
  esp_whlmilgrearristatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_whlmilgrearristatus)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235.Esp_vehiclestandstillType esp_vehiclestandstill = 13;
bool Esp_direction_0x235_235::has_esp_vehiclestandstill() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Esp_direction_0x235_235::set_has_esp_vehiclestandstill() {
  _has_bits_[0] |= 0x00001000u;
}
void Esp_direction_0x235_235::clear_has_esp_vehiclestandstill() {
  _has_bits_[0] &= ~0x00001000u;
}
void Esp_direction_0x235_235::clear_esp_vehiclestandstill() {
  esp_vehiclestandstill_ = 0;
  clear_has_esp_vehiclestandstill();
}
::jmc_auto::canbus::Esp_direction_0x235_235_Esp_vehiclestandstillType Esp_direction_0x235_235::esp_vehiclestandstill() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_vehiclestandstill)
  return static_cast< ::jmc_auto::canbus::Esp_direction_0x235_235_Esp_vehiclestandstillType >(esp_vehiclestandstill_);
}
void Esp_direction_0x235_235::set_esp_vehiclestandstill(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_vehiclestandstillType value) {
  assert(::jmc_auto::canbus::Esp_direction_0x235_235_Esp_vehiclestandstillType_IsValid(value));
  set_has_esp_vehiclestandstill();
  esp_vehiclestandstill_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_vehiclestandstill)
}

// optional int32 checksum_0x235 = 14;
bool Esp_direction_0x235_235::has_checksum_0x235() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Esp_direction_0x235_235::set_has_checksum_0x235() {
  _has_bits_[0] |= 0x00002000u;
}
void Esp_direction_0x235_235::clear_has_checksum_0x235() {
  _has_bits_[0] &= ~0x00002000u;
}
void Esp_direction_0x235_235::clear_checksum_0x235() {
  checksum_0x235_ = 0;
  clear_has_checksum_0x235();
}
::google::protobuf::int32 Esp_direction_0x235_235::checksum_0x235() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.checksum_0x235)
  return checksum_0x235_;
}
void Esp_direction_0x235_235::set_checksum_0x235(::google::protobuf::int32 value) {
  set_has_checksum_0x235();
  checksum_0x235_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.checksum_0x235)
}

// optional int32 esp_whlmilgrearle = 15;
bool Esp_direction_0x235_235::has_esp_whlmilgrearle() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Esp_direction_0x235_235::set_has_esp_whlmilgrearle() {
  _has_bits_[0] |= 0x00004000u;
}
void Esp_direction_0x235_235::clear_has_esp_whlmilgrearle() {
  _has_bits_[0] &= ~0x00004000u;
}
void Esp_direction_0x235_235::clear_esp_whlmilgrearle() {
  esp_whlmilgrearle_ = 0;
  clear_has_esp_whlmilgrearle();
}
::google::protobuf::int32 Esp_direction_0x235_235::esp_whlmilgrearle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_direction_0x235_235.esp_whlmilgrearle)
  return esp_whlmilgrearle_;
}
void Esp_direction_0x235_235::set_esp_whlmilgrearle(::google::protobuf::int32 value) {
  set_has_esp_whlmilgrearle();
  esp_whlmilgrearle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_direction_0x235_235.esp_whlmilgrearle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esp_advanced_0x234_234::kEspVdcactiveFieldNumber;
const int Esp_advanced_0x234_234::kEspEbdactiveFieldNumber;
const int Esp_advanced_0x234_234::kEspEcdtempoffFieldNumber;
const int Esp_advanced_0x234_234::kEspNobrakeforceFieldNumber;
const int Esp_advanced_0x234_234::kEspBrkfrictqtotatwhlvaildFieldNumber;
const int Esp_advanced_0x234_234::kEspAebdecavailableFieldNumber;
const int Esp_advanced_0x234_234::kEspAebdecactiveFieldNumber;
const int Esp_advanced_0x234_234::kEspPrefillavailableFieldNumber;
const int Esp_advanced_0x234_234::kEspPrefillactiveFieldNumber;
const int Esp_advanced_0x234_234::kEspAbaavailableFieldNumber;
const int Esp_advanced_0x234_234::kEspAbaactiveFieldNumber;
const int Esp_advanced_0x234_234::kEspCddavailableFieldNumber;
const int Esp_advanced_0x234_234::kEspDtcactiveFieldNumber;
const int Esp_advanced_0x234_234::kEspAwbavailableFieldNumber;
const int Esp_advanced_0x234_234::kEspAwbactiveFieldNumber;
const int Esp_advanced_0x234_234::kEspBrkfrictqtotatwhlFieldNumber;
const int Esp_advanced_0x234_234::kEspVlcerrorFieldNumber;
const int Esp_advanced_0x234_234::kEspCdderrorFieldNumber;
const int Esp_advanced_0x234_234::kRollingCounter0X234FieldNumber;
const int Esp_advanced_0x234_234::kChecksum0X234FieldNumber;
const int Esp_advanced_0x234_234::kEspCddactiveFieldNumber;
const int Esp_advanced_0x234_234::kEspCddApactiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esp_advanced_0x234_234::Esp_advanced_0x234_234()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Esp_advanced_0x234_234)
}
Esp_advanced_0x234_234::Esp_advanced_0x234_234(const Esp_advanced_0x234_234& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&esp_vdcactive_, &from.esp_vdcactive_,
    reinterpret_cast<char*>(&esp_cdd_apactive_) -
    reinterpret_cast<char*>(&esp_vdcactive_) + sizeof(esp_cdd_apactive_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Esp_advanced_0x234_234)
}

void Esp_advanced_0x234_234::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&esp_vdcactive_, 0, reinterpret_cast<char*>(&esp_cdd_apactive_) -
    reinterpret_cast<char*>(&esp_vdcactive_) + sizeof(esp_cdd_apactive_));
}

Esp_advanced_0x234_234::~Esp_advanced_0x234_234() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Esp_advanced_0x234_234)
  SharedDtor();
}

void Esp_advanced_0x234_234::SharedDtor() {
}

void Esp_advanced_0x234_234::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esp_advanced_0x234_234::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esp_advanced_0x234_234& Esp_advanced_0x234_234::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esp_advanced_0x234_234* Esp_advanced_0x234_234::New(::google::protobuf::Arena* arena) const {
  Esp_advanced_0x234_234* n = new Esp_advanced_0x234_234;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esp_advanced_0x234_234::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Esp_advanced_0x234_234)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&esp_vdcactive_, 0, reinterpret_cast<char*>(&esp_prefillavailable_) -
      reinterpret_cast<char*>(&esp_vdcactive_) + sizeof(esp_prefillavailable_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&esp_prefillactive_, 0, reinterpret_cast<char*>(&esp_brkfrictqtotatwhl_) -
      reinterpret_cast<char*>(&esp_prefillactive_) + sizeof(esp_brkfrictqtotatwhl_));
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ::memset(&esp_vlcerror_, 0, reinterpret_cast<char*>(&esp_cdd_apactive_) -
      reinterpret_cast<char*>(&esp_vlcerror_) + sizeof(esp_cdd_apactive_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esp_advanced_0x234_234::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Esp_advanced_0x234_234)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_vdcactiveType esp_vdcactive = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vdcactiveType_IsValid(value)) {
            set_esp_vdcactive(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vdcactiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_ebdactiveType esp_ebdactive = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ebdactiveType_IsValid(value)) {
            set_esp_ebdactive(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ebdactiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_ecdtempoffType esp_ecdtempoff = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ecdtempoffType_IsValid(value)) {
            set_esp_ecdtempoff(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ecdtempoffType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_nobrakeforceType esp_nobrakeforce = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_nobrakeforceType_IsValid(value)) {
            set_esp_nobrakeforce(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_nobrakeforceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_brkfrictqtotatwhlvaildType esp_brkfrictqtotatwhlvaild = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_IsValid(value)) {
            set_esp_brkfrictqtotatwhlvaild(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_aebdecavailableType esp_aebdecavailable = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecavailableType_IsValid(value)) {
            set_esp_aebdecavailable(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecavailableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_aebdecactiveType esp_aebdecactive = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecactiveType_IsValid(value)) {
            set_esp_aebdecactive(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecactiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_prefillavailableType esp_prefillavailable = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillavailableType_IsValid(value)) {
            set_esp_prefillavailable(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillavailableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_prefillactiveType esp_prefillactive = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillactiveType_IsValid(value)) {
            set_esp_prefillactive(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillactiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_abaavailableType esp_abaavailable = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaavailableType_IsValid(value)) {
            set_esp_abaavailable(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaavailableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_abaactiveType esp_abaactive = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaactiveType_IsValid(value)) {
            set_esp_abaactive(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaactiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cddavailableType esp_cddavailable = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddavailableType_IsValid(value)) {
            set_esp_cddavailable(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddavailableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_dtcactiveType esp_dtcactive = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_dtcactiveType_IsValid(value)) {
            set_esp_dtcactive(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_dtcactiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_awbavailableType esp_awbavailable = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbavailableType_IsValid(value)) {
            set_esp_awbavailable(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbavailableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_awbactiveType esp_awbactive = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbactiveType_IsValid(value)) {
            set_esp_awbactive(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbactiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 esp_brkfrictqtotatwhl = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_esp_brkfrictqtotatwhl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_brkfrictqtotatwhl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_vlcerrorType esp_vlcerror = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vlcerrorType_IsValid(value)) {
            set_esp_vlcerror(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vlcerrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cdderrorType esp_cdderror = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdderrorType_IsValid(value)) {
            set_esp_cdderror(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdderrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x234 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_rolling_counter_0x234();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x234_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x234 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_checksum_0x234();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x234_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cddactiveType esp_cddactive = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddactiveType_IsValid(value)) {
            set_esp_cddactive(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddactiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cdd_apactiveType esp_cdd_apactive = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdd_apactiveType_IsValid(value)) {
            set_esp_cdd_apactive(static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdd_apactiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Esp_advanced_0x234_234)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Esp_advanced_0x234_234)
  return false;
#undef DO_
}

void Esp_advanced_0x234_234::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Esp_advanced_0x234_234)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_vdcactiveType esp_vdcactive = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->esp_vdcactive(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_ebdactiveType esp_ebdactive = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->esp_ebdactive(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_ecdtempoffType esp_ecdtempoff = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->esp_ecdtempoff(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_nobrakeforceType esp_nobrakeforce = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->esp_nobrakeforce(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_brkfrictqtotatwhlvaildType esp_brkfrictqtotatwhlvaild = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->esp_brkfrictqtotatwhlvaild(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_aebdecavailableType esp_aebdecavailable = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->esp_aebdecavailable(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_aebdecactiveType esp_aebdecactive = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->esp_aebdecactive(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_prefillavailableType esp_prefillavailable = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->esp_prefillavailable(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_prefillactiveType esp_prefillactive = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->esp_prefillactive(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_abaavailableType esp_abaavailable = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->esp_abaavailable(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_abaactiveType esp_abaactive = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->esp_abaactive(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cddavailableType esp_cddavailable = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->esp_cddavailable(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_dtcactiveType esp_dtcactive = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->esp_dtcactive(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_awbavailableType esp_awbavailable = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->esp_awbavailable(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_awbactiveType esp_awbactive = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->esp_awbactive(), output);
  }

  // optional int32 esp_brkfrictqtotatwhl = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->esp_brkfrictqtotatwhl(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_vlcerrorType esp_vlcerror = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->esp_vlcerror(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cdderrorType esp_cdderror = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->esp_cdderror(), output);
  }

  // optional int32 rolling_counter_0x234 = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->rolling_counter_0x234(), output);
  }

  // optional int32 checksum_0x234 = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->checksum_0x234(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cddactiveType esp_cddactive = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->esp_cddactive(), output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cdd_apactiveType esp_cdd_apactive = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->esp_cdd_apactive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Esp_advanced_0x234_234)
}

::google::protobuf::uint8* Esp_advanced_0x234_234::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Esp_advanced_0x234_234)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_vdcactiveType esp_vdcactive = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->esp_vdcactive(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_ebdactiveType esp_ebdactive = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->esp_ebdactive(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_ecdtempoffType esp_ecdtempoff = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->esp_ecdtempoff(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_nobrakeforceType esp_nobrakeforce = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->esp_nobrakeforce(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_brkfrictqtotatwhlvaildType esp_brkfrictqtotatwhlvaild = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->esp_brkfrictqtotatwhlvaild(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_aebdecavailableType esp_aebdecavailable = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->esp_aebdecavailable(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_aebdecactiveType esp_aebdecactive = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->esp_aebdecactive(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_prefillavailableType esp_prefillavailable = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->esp_prefillavailable(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_prefillactiveType esp_prefillactive = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->esp_prefillactive(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_abaavailableType esp_abaavailable = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->esp_abaavailable(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_abaactiveType esp_abaactive = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->esp_abaactive(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cddavailableType esp_cddavailable = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->esp_cddavailable(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_dtcactiveType esp_dtcactive = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->esp_dtcactive(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_awbavailableType esp_awbavailable = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->esp_awbavailable(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_awbactiveType esp_awbactive = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->esp_awbactive(), target);
  }

  // optional int32 esp_brkfrictqtotatwhl = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->esp_brkfrictqtotatwhl(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_vlcerrorType esp_vlcerror = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->esp_vlcerror(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cdderrorType esp_cdderror = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->esp_cdderror(), target);
  }

  // optional int32 rolling_counter_0x234 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->rolling_counter_0x234(), target);
  }

  // optional int32 checksum_0x234 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->checksum_0x234(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cddactiveType esp_cddactive = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->esp_cddactive(), target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cdd_apactiveType esp_cdd_apactive = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->esp_cdd_apactive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Esp_advanced_0x234_234)
  return target;
}

size_t Esp_advanced_0x234_234::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Esp_advanced_0x234_234)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_vdcactiveType esp_vdcactive = 1;
    if (has_esp_vdcactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_vdcactive());
    }

    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_ebdactiveType esp_ebdactive = 2;
    if (has_esp_ebdactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_ebdactive());
    }

    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_ecdtempoffType esp_ecdtempoff = 3;
    if (has_esp_ecdtempoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_ecdtempoff());
    }

    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_nobrakeforceType esp_nobrakeforce = 4;
    if (has_esp_nobrakeforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_nobrakeforce());
    }

    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_brkfrictqtotatwhlvaildType esp_brkfrictqtotatwhlvaild = 5;
    if (has_esp_brkfrictqtotatwhlvaild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_brkfrictqtotatwhlvaild());
    }

    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_aebdecavailableType esp_aebdecavailable = 6;
    if (has_esp_aebdecavailable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_aebdecavailable());
    }

    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_aebdecactiveType esp_aebdecactive = 7;
    if (has_esp_aebdecactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_aebdecactive());
    }

    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_prefillavailableType esp_prefillavailable = 8;
    if (has_esp_prefillavailable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_prefillavailable());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_prefillactiveType esp_prefillactive = 9;
    if (has_esp_prefillactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_prefillactive());
    }

    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_abaavailableType esp_abaavailable = 10;
    if (has_esp_abaavailable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_abaavailable());
    }

    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_abaactiveType esp_abaactive = 11;
    if (has_esp_abaactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_abaactive());
    }

    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cddavailableType esp_cddavailable = 12;
    if (has_esp_cddavailable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_cddavailable());
    }

    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_dtcactiveType esp_dtcactive = 13;
    if (has_esp_dtcactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_dtcactive());
    }

    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_awbavailableType esp_awbavailable = 14;
    if (has_esp_awbavailable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_awbavailable());
    }

    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_awbactiveType esp_awbactive = 15;
    if (has_esp_awbactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_awbactive());
    }

    // optional int32 esp_brkfrictqtotatwhl = 16;
    if (has_esp_brkfrictqtotatwhl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_brkfrictqtotatwhl());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_vlcerrorType esp_vlcerror = 17;
    if (has_esp_vlcerror()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_vlcerror());
    }

    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cdderrorType esp_cdderror = 18;
    if (has_esp_cdderror()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_cdderror());
    }

    // optional int32 rolling_counter_0x234 = 19;
    if (has_rolling_counter_0x234()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x234());
    }

    // optional int32 checksum_0x234 = 20;
    if (has_checksum_0x234()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x234());
    }

    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cddactiveType esp_cddactive = 21;
    if (has_esp_cddactive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_cddactive());
    }

    // optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cdd_apactiveType esp_cdd_apactive = 22;
    if (has_esp_cdd_apactive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_cdd_apactive());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esp_advanced_0x234_234::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Esp_advanced_0x234_234)
  GOOGLE_DCHECK_NE(&from, this);
  const Esp_advanced_0x234_234* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esp_advanced_0x234_234>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Esp_advanced_0x234_234)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Esp_advanced_0x234_234)
    MergeFrom(*source);
  }
}

void Esp_advanced_0x234_234::MergeFrom(const Esp_advanced_0x234_234& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Esp_advanced_0x234_234)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      esp_vdcactive_ = from.esp_vdcactive_;
    }
    if (cached_has_bits & 0x00000002u) {
      esp_ebdactive_ = from.esp_ebdactive_;
    }
    if (cached_has_bits & 0x00000004u) {
      esp_ecdtempoff_ = from.esp_ecdtempoff_;
    }
    if (cached_has_bits & 0x00000008u) {
      esp_nobrakeforce_ = from.esp_nobrakeforce_;
    }
    if (cached_has_bits & 0x00000010u) {
      esp_brkfrictqtotatwhlvaild_ = from.esp_brkfrictqtotatwhlvaild_;
    }
    if (cached_has_bits & 0x00000020u) {
      esp_aebdecavailable_ = from.esp_aebdecavailable_;
    }
    if (cached_has_bits & 0x00000040u) {
      esp_aebdecactive_ = from.esp_aebdecactive_;
    }
    if (cached_has_bits & 0x00000080u) {
      esp_prefillavailable_ = from.esp_prefillavailable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      esp_prefillactive_ = from.esp_prefillactive_;
    }
    if (cached_has_bits & 0x00000200u) {
      esp_abaavailable_ = from.esp_abaavailable_;
    }
    if (cached_has_bits & 0x00000400u) {
      esp_abaactive_ = from.esp_abaactive_;
    }
    if (cached_has_bits & 0x00000800u) {
      esp_cddavailable_ = from.esp_cddavailable_;
    }
    if (cached_has_bits & 0x00001000u) {
      esp_dtcactive_ = from.esp_dtcactive_;
    }
    if (cached_has_bits & 0x00002000u) {
      esp_awbavailable_ = from.esp_awbavailable_;
    }
    if (cached_has_bits & 0x00004000u) {
      esp_awbactive_ = from.esp_awbactive_;
    }
    if (cached_has_bits & 0x00008000u) {
      esp_brkfrictqtotatwhl_ = from.esp_brkfrictqtotatwhl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      esp_vlcerror_ = from.esp_vlcerror_;
    }
    if (cached_has_bits & 0x00020000u) {
      esp_cdderror_ = from.esp_cdderror_;
    }
    if (cached_has_bits & 0x00040000u) {
      rolling_counter_0x234_ = from.rolling_counter_0x234_;
    }
    if (cached_has_bits & 0x00080000u) {
      checksum_0x234_ = from.checksum_0x234_;
    }
    if (cached_has_bits & 0x00100000u) {
      esp_cddactive_ = from.esp_cddactive_;
    }
    if (cached_has_bits & 0x00200000u) {
      esp_cdd_apactive_ = from.esp_cdd_apactive_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esp_advanced_0x234_234::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Esp_advanced_0x234_234)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esp_advanced_0x234_234::CopyFrom(const Esp_advanced_0x234_234& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Esp_advanced_0x234_234)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esp_advanced_0x234_234::IsInitialized() const {
  return true;
}

void Esp_advanced_0x234_234::Swap(Esp_advanced_0x234_234* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esp_advanced_0x234_234::InternalSwap(Esp_advanced_0x234_234* other) {
  std::swap(esp_vdcactive_, other->esp_vdcactive_);
  std::swap(esp_ebdactive_, other->esp_ebdactive_);
  std::swap(esp_ecdtempoff_, other->esp_ecdtempoff_);
  std::swap(esp_nobrakeforce_, other->esp_nobrakeforce_);
  std::swap(esp_brkfrictqtotatwhlvaild_, other->esp_brkfrictqtotatwhlvaild_);
  std::swap(esp_aebdecavailable_, other->esp_aebdecavailable_);
  std::swap(esp_aebdecactive_, other->esp_aebdecactive_);
  std::swap(esp_prefillavailable_, other->esp_prefillavailable_);
  std::swap(esp_prefillactive_, other->esp_prefillactive_);
  std::swap(esp_abaavailable_, other->esp_abaavailable_);
  std::swap(esp_abaactive_, other->esp_abaactive_);
  std::swap(esp_cddavailable_, other->esp_cddavailable_);
  std::swap(esp_dtcactive_, other->esp_dtcactive_);
  std::swap(esp_awbavailable_, other->esp_awbavailable_);
  std::swap(esp_awbactive_, other->esp_awbactive_);
  std::swap(esp_brkfrictqtotatwhl_, other->esp_brkfrictqtotatwhl_);
  std::swap(esp_vlcerror_, other->esp_vlcerror_);
  std::swap(esp_cdderror_, other->esp_cdderror_);
  std::swap(rolling_counter_0x234_, other->rolling_counter_0x234_);
  std::swap(checksum_0x234_, other->checksum_0x234_);
  std::swap(esp_cddactive_, other->esp_cddactive_);
  std::swap(esp_cdd_apactive_, other->esp_cdd_apactive_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esp_advanced_0x234_234::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esp_advanced_0x234_234

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_vdcactiveType esp_vdcactive = 1;
bool Esp_advanced_0x234_234::has_esp_vdcactive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_vdcactive() {
  _has_bits_[0] |= 0x00000001u;
}
void Esp_advanced_0x234_234::clear_has_esp_vdcactive() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esp_advanced_0x234_234::clear_esp_vdcactive() {
  esp_vdcactive_ = 0;
  clear_has_esp_vdcactive();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vdcactiveType Esp_advanced_0x234_234::esp_vdcactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_vdcactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vdcactiveType >(esp_vdcactive_);
}
void Esp_advanced_0x234_234::set_esp_vdcactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vdcactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vdcactiveType_IsValid(value));
  set_has_esp_vdcactive();
  esp_vdcactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_vdcactive)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_ebdactiveType esp_ebdactive = 2;
bool Esp_advanced_0x234_234::has_esp_ebdactive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_ebdactive() {
  _has_bits_[0] |= 0x00000002u;
}
void Esp_advanced_0x234_234::clear_has_esp_ebdactive() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esp_advanced_0x234_234::clear_esp_ebdactive() {
  esp_ebdactive_ = 0;
  clear_has_esp_ebdactive();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ebdactiveType Esp_advanced_0x234_234::esp_ebdactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_ebdactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ebdactiveType >(esp_ebdactive_);
}
void Esp_advanced_0x234_234::set_esp_ebdactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ebdactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ebdactiveType_IsValid(value));
  set_has_esp_ebdactive();
  esp_ebdactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_ebdactive)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_ecdtempoffType esp_ecdtempoff = 3;
bool Esp_advanced_0x234_234::has_esp_ecdtempoff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_ecdtempoff() {
  _has_bits_[0] |= 0x00000004u;
}
void Esp_advanced_0x234_234::clear_has_esp_ecdtempoff() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esp_advanced_0x234_234::clear_esp_ecdtempoff() {
  esp_ecdtempoff_ = 0;
  clear_has_esp_ecdtempoff();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ecdtempoffType Esp_advanced_0x234_234::esp_ecdtempoff() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_ecdtempoff)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ecdtempoffType >(esp_ecdtempoff_);
}
void Esp_advanced_0x234_234::set_esp_ecdtempoff(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ecdtempoffType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_ecdtempoffType_IsValid(value));
  set_has_esp_ecdtempoff();
  esp_ecdtempoff_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_ecdtempoff)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_nobrakeforceType esp_nobrakeforce = 4;
bool Esp_advanced_0x234_234::has_esp_nobrakeforce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_nobrakeforce() {
  _has_bits_[0] |= 0x00000008u;
}
void Esp_advanced_0x234_234::clear_has_esp_nobrakeforce() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esp_advanced_0x234_234::clear_esp_nobrakeforce() {
  esp_nobrakeforce_ = 0;
  clear_has_esp_nobrakeforce();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_nobrakeforceType Esp_advanced_0x234_234::esp_nobrakeforce() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_nobrakeforce)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_nobrakeforceType >(esp_nobrakeforce_);
}
void Esp_advanced_0x234_234::set_esp_nobrakeforce(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_nobrakeforceType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_nobrakeforceType_IsValid(value));
  set_has_esp_nobrakeforce();
  esp_nobrakeforce_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_nobrakeforce)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_brkfrictqtotatwhlvaildType esp_brkfrictqtotatwhlvaild = 5;
bool Esp_advanced_0x234_234::has_esp_brkfrictqtotatwhlvaild() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_brkfrictqtotatwhlvaild() {
  _has_bits_[0] |= 0x00000010u;
}
void Esp_advanced_0x234_234::clear_has_esp_brkfrictqtotatwhlvaild() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esp_advanced_0x234_234::clear_esp_brkfrictqtotatwhlvaild() {
  esp_brkfrictqtotatwhlvaild_ = 0;
  clear_has_esp_brkfrictqtotatwhlvaild();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType Esp_advanced_0x234_234::esp_brkfrictqtotatwhlvaild() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_brkfrictqtotatwhlvaild)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType >(esp_brkfrictqtotatwhlvaild_);
}
void Esp_advanced_0x234_234::set_esp_brkfrictqtotatwhlvaild(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_brkfrictqtotatwhlvaildType_IsValid(value));
  set_has_esp_brkfrictqtotatwhlvaild();
  esp_brkfrictqtotatwhlvaild_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_brkfrictqtotatwhlvaild)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_aebdecavailableType esp_aebdecavailable = 6;
bool Esp_advanced_0x234_234::has_esp_aebdecavailable() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_aebdecavailable() {
  _has_bits_[0] |= 0x00000020u;
}
void Esp_advanced_0x234_234::clear_has_esp_aebdecavailable() {
  _has_bits_[0] &= ~0x00000020u;
}
void Esp_advanced_0x234_234::clear_esp_aebdecavailable() {
  esp_aebdecavailable_ = 0;
  clear_has_esp_aebdecavailable();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecavailableType Esp_advanced_0x234_234::esp_aebdecavailable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_aebdecavailable)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecavailableType >(esp_aebdecavailable_);
}
void Esp_advanced_0x234_234::set_esp_aebdecavailable(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecavailableType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecavailableType_IsValid(value));
  set_has_esp_aebdecavailable();
  esp_aebdecavailable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_aebdecavailable)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_aebdecactiveType esp_aebdecactive = 7;
bool Esp_advanced_0x234_234::has_esp_aebdecactive() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_aebdecactive() {
  _has_bits_[0] |= 0x00000040u;
}
void Esp_advanced_0x234_234::clear_has_esp_aebdecactive() {
  _has_bits_[0] &= ~0x00000040u;
}
void Esp_advanced_0x234_234::clear_esp_aebdecactive() {
  esp_aebdecactive_ = 0;
  clear_has_esp_aebdecactive();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecactiveType Esp_advanced_0x234_234::esp_aebdecactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_aebdecactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecactiveType >(esp_aebdecactive_);
}
void Esp_advanced_0x234_234::set_esp_aebdecactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_aebdecactiveType_IsValid(value));
  set_has_esp_aebdecactive();
  esp_aebdecactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_aebdecactive)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_prefillavailableType esp_prefillavailable = 8;
bool Esp_advanced_0x234_234::has_esp_prefillavailable() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_prefillavailable() {
  _has_bits_[0] |= 0x00000080u;
}
void Esp_advanced_0x234_234::clear_has_esp_prefillavailable() {
  _has_bits_[0] &= ~0x00000080u;
}
void Esp_advanced_0x234_234::clear_esp_prefillavailable() {
  esp_prefillavailable_ = 0;
  clear_has_esp_prefillavailable();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillavailableType Esp_advanced_0x234_234::esp_prefillavailable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_prefillavailable)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillavailableType >(esp_prefillavailable_);
}
void Esp_advanced_0x234_234::set_esp_prefillavailable(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillavailableType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillavailableType_IsValid(value));
  set_has_esp_prefillavailable();
  esp_prefillavailable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_prefillavailable)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_prefillactiveType esp_prefillactive = 9;
bool Esp_advanced_0x234_234::has_esp_prefillactive() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_prefillactive() {
  _has_bits_[0] |= 0x00000100u;
}
void Esp_advanced_0x234_234::clear_has_esp_prefillactive() {
  _has_bits_[0] &= ~0x00000100u;
}
void Esp_advanced_0x234_234::clear_esp_prefillactive() {
  esp_prefillactive_ = 0;
  clear_has_esp_prefillactive();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillactiveType Esp_advanced_0x234_234::esp_prefillactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_prefillactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillactiveType >(esp_prefillactive_);
}
void Esp_advanced_0x234_234::set_esp_prefillactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_prefillactiveType_IsValid(value));
  set_has_esp_prefillactive();
  esp_prefillactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_prefillactive)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_abaavailableType esp_abaavailable = 10;
bool Esp_advanced_0x234_234::has_esp_abaavailable() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_abaavailable() {
  _has_bits_[0] |= 0x00000200u;
}
void Esp_advanced_0x234_234::clear_has_esp_abaavailable() {
  _has_bits_[0] &= ~0x00000200u;
}
void Esp_advanced_0x234_234::clear_esp_abaavailable() {
  esp_abaavailable_ = 0;
  clear_has_esp_abaavailable();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaavailableType Esp_advanced_0x234_234::esp_abaavailable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_abaavailable)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaavailableType >(esp_abaavailable_);
}
void Esp_advanced_0x234_234::set_esp_abaavailable(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaavailableType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaavailableType_IsValid(value));
  set_has_esp_abaavailable();
  esp_abaavailable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_abaavailable)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_abaactiveType esp_abaactive = 11;
bool Esp_advanced_0x234_234::has_esp_abaactive() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_abaactive() {
  _has_bits_[0] |= 0x00000400u;
}
void Esp_advanced_0x234_234::clear_has_esp_abaactive() {
  _has_bits_[0] &= ~0x00000400u;
}
void Esp_advanced_0x234_234::clear_esp_abaactive() {
  esp_abaactive_ = 0;
  clear_has_esp_abaactive();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaactiveType Esp_advanced_0x234_234::esp_abaactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_abaactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaactiveType >(esp_abaactive_);
}
void Esp_advanced_0x234_234::set_esp_abaactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_abaactiveType_IsValid(value));
  set_has_esp_abaactive();
  esp_abaactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_abaactive)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cddavailableType esp_cddavailable = 12;
bool Esp_advanced_0x234_234::has_esp_cddavailable() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_cddavailable() {
  _has_bits_[0] |= 0x00000800u;
}
void Esp_advanced_0x234_234::clear_has_esp_cddavailable() {
  _has_bits_[0] &= ~0x00000800u;
}
void Esp_advanced_0x234_234::clear_esp_cddavailable() {
  esp_cddavailable_ = 0;
  clear_has_esp_cddavailable();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddavailableType Esp_advanced_0x234_234::esp_cddavailable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_cddavailable)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddavailableType >(esp_cddavailable_);
}
void Esp_advanced_0x234_234::set_esp_cddavailable(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddavailableType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddavailableType_IsValid(value));
  set_has_esp_cddavailable();
  esp_cddavailable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_cddavailable)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_dtcactiveType esp_dtcactive = 13;
bool Esp_advanced_0x234_234::has_esp_dtcactive() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_dtcactive() {
  _has_bits_[0] |= 0x00001000u;
}
void Esp_advanced_0x234_234::clear_has_esp_dtcactive() {
  _has_bits_[0] &= ~0x00001000u;
}
void Esp_advanced_0x234_234::clear_esp_dtcactive() {
  esp_dtcactive_ = 0;
  clear_has_esp_dtcactive();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_dtcactiveType Esp_advanced_0x234_234::esp_dtcactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_dtcactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_dtcactiveType >(esp_dtcactive_);
}
void Esp_advanced_0x234_234::set_esp_dtcactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_dtcactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_dtcactiveType_IsValid(value));
  set_has_esp_dtcactive();
  esp_dtcactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_dtcactive)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_awbavailableType esp_awbavailable = 14;
bool Esp_advanced_0x234_234::has_esp_awbavailable() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_awbavailable() {
  _has_bits_[0] |= 0x00002000u;
}
void Esp_advanced_0x234_234::clear_has_esp_awbavailable() {
  _has_bits_[0] &= ~0x00002000u;
}
void Esp_advanced_0x234_234::clear_esp_awbavailable() {
  esp_awbavailable_ = 0;
  clear_has_esp_awbavailable();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbavailableType Esp_advanced_0x234_234::esp_awbavailable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_awbavailable)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbavailableType >(esp_awbavailable_);
}
void Esp_advanced_0x234_234::set_esp_awbavailable(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbavailableType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbavailableType_IsValid(value));
  set_has_esp_awbavailable();
  esp_awbavailable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_awbavailable)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_awbactiveType esp_awbactive = 15;
bool Esp_advanced_0x234_234::has_esp_awbactive() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_awbactive() {
  _has_bits_[0] |= 0x00004000u;
}
void Esp_advanced_0x234_234::clear_has_esp_awbactive() {
  _has_bits_[0] &= ~0x00004000u;
}
void Esp_advanced_0x234_234::clear_esp_awbactive() {
  esp_awbactive_ = 0;
  clear_has_esp_awbactive();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbactiveType Esp_advanced_0x234_234::esp_awbactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_awbactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbactiveType >(esp_awbactive_);
}
void Esp_advanced_0x234_234::set_esp_awbactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_awbactiveType_IsValid(value));
  set_has_esp_awbactive();
  esp_awbactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_awbactive)
}

// optional int32 esp_brkfrictqtotatwhl = 16;
bool Esp_advanced_0x234_234::has_esp_brkfrictqtotatwhl() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_brkfrictqtotatwhl() {
  _has_bits_[0] |= 0x00008000u;
}
void Esp_advanced_0x234_234::clear_has_esp_brkfrictqtotatwhl() {
  _has_bits_[0] &= ~0x00008000u;
}
void Esp_advanced_0x234_234::clear_esp_brkfrictqtotatwhl() {
  esp_brkfrictqtotatwhl_ = 0;
  clear_has_esp_brkfrictqtotatwhl();
}
::google::protobuf::int32 Esp_advanced_0x234_234::esp_brkfrictqtotatwhl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_brkfrictqtotatwhl)
  return esp_brkfrictqtotatwhl_;
}
void Esp_advanced_0x234_234::set_esp_brkfrictqtotatwhl(::google::protobuf::int32 value) {
  set_has_esp_brkfrictqtotatwhl();
  esp_brkfrictqtotatwhl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_brkfrictqtotatwhl)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_vlcerrorType esp_vlcerror = 17;
bool Esp_advanced_0x234_234::has_esp_vlcerror() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_vlcerror() {
  _has_bits_[0] |= 0x00010000u;
}
void Esp_advanced_0x234_234::clear_has_esp_vlcerror() {
  _has_bits_[0] &= ~0x00010000u;
}
void Esp_advanced_0x234_234::clear_esp_vlcerror() {
  esp_vlcerror_ = 0;
  clear_has_esp_vlcerror();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vlcerrorType Esp_advanced_0x234_234::esp_vlcerror() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_vlcerror)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vlcerrorType >(esp_vlcerror_);
}
void Esp_advanced_0x234_234::set_esp_vlcerror(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vlcerrorType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_vlcerrorType_IsValid(value));
  set_has_esp_vlcerror();
  esp_vlcerror_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_vlcerror)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cdderrorType esp_cdderror = 18;
bool Esp_advanced_0x234_234::has_esp_cdderror() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_cdderror() {
  _has_bits_[0] |= 0x00020000u;
}
void Esp_advanced_0x234_234::clear_has_esp_cdderror() {
  _has_bits_[0] &= ~0x00020000u;
}
void Esp_advanced_0x234_234::clear_esp_cdderror() {
  esp_cdderror_ = 0;
  clear_has_esp_cdderror();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdderrorType Esp_advanced_0x234_234::esp_cdderror() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_cdderror)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdderrorType >(esp_cdderror_);
}
void Esp_advanced_0x234_234::set_esp_cdderror(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdderrorType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdderrorType_IsValid(value));
  set_has_esp_cdderror();
  esp_cdderror_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_cdderror)
}

// optional int32 rolling_counter_0x234 = 19;
bool Esp_advanced_0x234_234::has_rolling_counter_0x234() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Esp_advanced_0x234_234::set_has_rolling_counter_0x234() {
  _has_bits_[0] |= 0x00040000u;
}
void Esp_advanced_0x234_234::clear_has_rolling_counter_0x234() {
  _has_bits_[0] &= ~0x00040000u;
}
void Esp_advanced_0x234_234::clear_rolling_counter_0x234() {
  rolling_counter_0x234_ = 0;
  clear_has_rolling_counter_0x234();
}
::google::protobuf::int32 Esp_advanced_0x234_234::rolling_counter_0x234() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.rolling_counter_0x234)
  return rolling_counter_0x234_;
}
void Esp_advanced_0x234_234::set_rolling_counter_0x234(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x234();
  rolling_counter_0x234_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.rolling_counter_0x234)
}

// optional int32 checksum_0x234 = 20;
bool Esp_advanced_0x234_234::has_checksum_0x234() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Esp_advanced_0x234_234::set_has_checksum_0x234() {
  _has_bits_[0] |= 0x00080000u;
}
void Esp_advanced_0x234_234::clear_has_checksum_0x234() {
  _has_bits_[0] &= ~0x00080000u;
}
void Esp_advanced_0x234_234::clear_checksum_0x234() {
  checksum_0x234_ = 0;
  clear_has_checksum_0x234();
}
::google::protobuf::int32 Esp_advanced_0x234_234::checksum_0x234() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.checksum_0x234)
  return checksum_0x234_;
}
void Esp_advanced_0x234_234::set_checksum_0x234(::google::protobuf::int32 value) {
  set_has_checksum_0x234();
  checksum_0x234_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.checksum_0x234)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cddactiveType esp_cddactive = 21;
bool Esp_advanced_0x234_234::has_esp_cddactive() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_cddactive() {
  _has_bits_[0] |= 0x00100000u;
}
void Esp_advanced_0x234_234::clear_has_esp_cddactive() {
  _has_bits_[0] &= ~0x00100000u;
}
void Esp_advanced_0x234_234::clear_esp_cddactive() {
  esp_cddactive_ = 0;
  clear_has_esp_cddactive();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddactiveType Esp_advanced_0x234_234::esp_cddactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_cddactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddactiveType >(esp_cddactive_);
}
void Esp_advanced_0x234_234::set_esp_cddactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cddactiveType_IsValid(value));
  set_has_esp_cddactive();
  esp_cddactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_cddactive)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234.Esp_cdd_apactiveType esp_cdd_apactive = 22;
bool Esp_advanced_0x234_234::has_esp_cdd_apactive() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Esp_advanced_0x234_234::set_has_esp_cdd_apactive() {
  _has_bits_[0] |= 0x00200000u;
}
void Esp_advanced_0x234_234::clear_has_esp_cdd_apactive() {
  _has_bits_[0] &= ~0x00200000u;
}
void Esp_advanced_0x234_234::clear_esp_cdd_apactive() {
  esp_cdd_apactive_ = 0;
  clear_has_esp_cdd_apactive();
}
::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdd_apactiveType Esp_advanced_0x234_234::esp_cdd_apactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_advanced_0x234_234.esp_cdd_apactive)
  return static_cast< ::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdd_apactiveType >(esp_cdd_apactive_);
}
void Esp_advanced_0x234_234::set_esp_cdd_apactive(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdd_apactiveType value) {
  assert(::jmc_auto::canbus::Esp_advanced_0x234_234_Esp_cdd_apactiveType_IsValid(value));
  set_has_esp_cdd_apactive();
  esp_cdd_apactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_advanced_0x234_234.esp_cdd_apactive)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Eps_advanced_0x176_176::kEpsLkaresponsetorqueFieldNumber;
const int Eps_advanced_0x176_176::kEpsTosionbartorquevalidFieldNumber;
const int Eps_advanced_0x176_176::kEpsLkaresponsetorquevalidFieldNumber;
const int Eps_advanced_0x176_176::kEpsLdwcontrolstatusFieldNumber;
const int Eps_advanced_0x176_176::kEpsPamSteeringstsReservedFieldNumber;
const int Eps_advanced_0x176_176::kEpsLkacontrolstatusFieldNumber;
const int Eps_advanced_0x176_176::kEpsEpspaminhFieldNumber;
const int Eps_advanced_0x176_176::kRollingCounter0X176FieldNumber;
const int Eps_advanced_0x176_176::kEpsEpspamstsFieldNumber;
const int Eps_advanced_0x176_176::kChecksum0X176FieldNumber;
const int Eps_advanced_0x176_176::kEpsTorsionbartorqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Eps_advanced_0x176_176::Eps_advanced_0x176_176()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Eps_advanced_0x176_176)
}
Eps_advanced_0x176_176::Eps_advanced_0x176_176(const Eps_advanced_0x176_176& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eps_lkaresponsetorque_, &from.eps_lkaresponsetorque_,
    reinterpret_cast<char*>(&checksum_0x176_) -
    reinterpret_cast<char*>(&eps_lkaresponsetorque_) + sizeof(checksum_0x176_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Eps_advanced_0x176_176)
}

void Eps_advanced_0x176_176::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&eps_lkaresponsetorque_, 0, reinterpret_cast<char*>(&checksum_0x176_) -
    reinterpret_cast<char*>(&eps_lkaresponsetorque_) + sizeof(checksum_0x176_));
}

Eps_advanced_0x176_176::~Eps_advanced_0x176_176() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Eps_advanced_0x176_176)
  SharedDtor();
}

void Eps_advanced_0x176_176::SharedDtor() {
}

void Eps_advanced_0x176_176::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Eps_advanced_0x176_176::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Eps_advanced_0x176_176& Eps_advanced_0x176_176::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Eps_advanced_0x176_176* Eps_advanced_0x176_176::New(::google::protobuf::Arena* arena) const {
  Eps_advanced_0x176_176* n = new Eps_advanced_0x176_176;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Eps_advanced_0x176_176::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Eps_advanced_0x176_176)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&eps_lkaresponsetorque_, 0, reinterpret_cast<char*>(&rolling_counter_0x176_) -
      reinterpret_cast<char*>(&eps_lkaresponsetorque_) + sizeof(rolling_counter_0x176_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&eps_epspamsts_, 0, reinterpret_cast<char*>(&checksum_0x176_) -
      reinterpret_cast<char*>(&eps_epspamsts_) + sizeof(checksum_0x176_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Eps_advanced_0x176_176::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Eps_advanced_0x176_176)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double eps_lkaresponsetorque = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_eps_lkaresponsetorque();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eps_lkaresponsetorque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_tosionbartorquevalidType eps_tosionbartorquevalid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_IsValid(value)) {
            set_eps_tosionbartorquevalid(static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_tosionbartorquevalidType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_lkaresponsetorquevalidType eps_lkaresponsetorquevalid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_IsValid(value)) {
            set_eps_lkaresponsetorquevalid(static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_ldwcontrolstatusType eps_ldwcontrolstatus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_IsValid(value)) {
            set_eps_ldwcontrolstatus(static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_ldwcontrolstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_pam_steeringsts_reservedType eps_pam_steeringsts_reserved = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_IsValid(value)) {
            set_eps_pam_steeringsts_reserved(static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_lkacontrolstatusType eps_lkacontrolstatus = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkacontrolstatusType_IsValid(value)) {
            set_eps_lkacontrolstatus(static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkacontrolstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eps_epspaminh = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_eps_epspaminh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eps_epspaminh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x176 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_rolling_counter_0x176();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x176_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_epspamstsType eps_epspamsts = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspamstsType_IsValid(value)) {
            set_eps_epspamsts(static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspamstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x176 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_checksum_0x176();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x176_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double eps_torsionbartorque = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_eps_torsionbartorque();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eps_torsionbartorque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Eps_advanced_0x176_176)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Eps_advanced_0x176_176)
  return false;
#undef DO_
}

void Eps_advanced_0x176_176::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Eps_advanced_0x176_176)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double eps_lkaresponsetorque = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->eps_lkaresponsetorque(), output);
  }

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_tosionbartorquevalidType eps_tosionbartorquevalid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eps_tosionbartorquevalid(), output);
  }

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_lkaresponsetorquevalidType eps_lkaresponsetorquevalid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->eps_lkaresponsetorquevalid(), output);
  }

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_ldwcontrolstatusType eps_ldwcontrolstatus = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->eps_ldwcontrolstatus(), output);
  }

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_pam_steeringsts_reservedType eps_pam_steeringsts_reserved = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->eps_pam_steeringsts_reserved(), output);
  }

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_lkacontrolstatusType eps_lkacontrolstatus = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->eps_lkacontrolstatus(), output);
  }

  // optional int32 eps_epspaminh = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->eps_epspaminh(), output);
  }

  // optional int32 rolling_counter_0x176 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rolling_counter_0x176(), output);
  }

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_epspamstsType eps_epspamsts = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->eps_epspamsts(), output);
  }

  // optional int32 checksum_0x176 = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->checksum_0x176(), output);
  }

  // optional double eps_torsionbartorque = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->eps_torsionbartorque(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Eps_advanced_0x176_176)
}

::google::protobuf::uint8* Eps_advanced_0x176_176::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Eps_advanced_0x176_176)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double eps_lkaresponsetorque = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->eps_lkaresponsetorque(), target);
  }

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_tosionbartorquevalidType eps_tosionbartorquevalid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eps_tosionbartorquevalid(), target);
  }

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_lkaresponsetorquevalidType eps_lkaresponsetorquevalid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->eps_lkaresponsetorquevalid(), target);
  }

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_ldwcontrolstatusType eps_ldwcontrolstatus = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->eps_ldwcontrolstatus(), target);
  }

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_pam_steeringsts_reservedType eps_pam_steeringsts_reserved = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->eps_pam_steeringsts_reserved(), target);
  }

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_lkacontrolstatusType eps_lkacontrolstatus = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->eps_lkacontrolstatus(), target);
  }

  // optional int32 eps_epspaminh = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->eps_epspaminh(), target);
  }

  // optional int32 rolling_counter_0x176 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rolling_counter_0x176(), target);
  }

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_epspamstsType eps_epspamsts = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->eps_epspamsts(), target);
  }

  // optional int32 checksum_0x176 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->checksum_0x176(), target);
  }

  // optional double eps_torsionbartorque = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->eps_torsionbartorque(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Eps_advanced_0x176_176)
  return target;
}

size_t Eps_advanced_0x176_176::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Eps_advanced_0x176_176)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double eps_lkaresponsetorque = 1;
    if (has_eps_lkaresponsetorque()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_tosionbartorquevalidType eps_tosionbartorquevalid = 2;
    if (has_eps_tosionbartorquevalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_tosionbartorquevalid());
    }

    // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_lkaresponsetorquevalidType eps_lkaresponsetorquevalid = 3;
    if (has_eps_lkaresponsetorquevalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_lkaresponsetorquevalid());
    }

    // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_ldwcontrolstatusType eps_ldwcontrolstatus = 4;
    if (has_eps_ldwcontrolstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_ldwcontrolstatus());
    }

    // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_pam_steeringsts_reservedType eps_pam_steeringsts_reserved = 5;
    if (has_eps_pam_steeringsts_reserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_pam_steeringsts_reserved());
    }

    // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_lkacontrolstatusType eps_lkacontrolstatus = 6;
    if (has_eps_lkacontrolstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_lkacontrolstatus());
    }

    // optional int32 eps_epspaminh = 7;
    if (has_eps_epspaminh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eps_epspaminh());
    }

    // optional int32 rolling_counter_0x176 = 8;
    if (has_rolling_counter_0x176()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x176());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_epspamstsType eps_epspamsts = 9;
    if (has_eps_epspamsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_epspamsts());
    }

    // optional double eps_torsionbartorque = 11;
    if (has_eps_torsionbartorque()) {
      total_size += 1 + 8;
    }

    // optional int32 checksum_0x176 = 10;
    if (has_checksum_0x176()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x176());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Eps_advanced_0x176_176::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Eps_advanced_0x176_176)
  GOOGLE_DCHECK_NE(&from, this);
  const Eps_advanced_0x176_176* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Eps_advanced_0x176_176>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Eps_advanced_0x176_176)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Eps_advanced_0x176_176)
    MergeFrom(*source);
  }
}

void Eps_advanced_0x176_176::MergeFrom(const Eps_advanced_0x176_176& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Eps_advanced_0x176_176)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      eps_lkaresponsetorque_ = from.eps_lkaresponsetorque_;
    }
    if (cached_has_bits & 0x00000002u) {
      eps_tosionbartorquevalid_ = from.eps_tosionbartorquevalid_;
    }
    if (cached_has_bits & 0x00000004u) {
      eps_lkaresponsetorquevalid_ = from.eps_lkaresponsetorquevalid_;
    }
    if (cached_has_bits & 0x00000008u) {
      eps_ldwcontrolstatus_ = from.eps_ldwcontrolstatus_;
    }
    if (cached_has_bits & 0x00000010u) {
      eps_pam_steeringsts_reserved_ = from.eps_pam_steeringsts_reserved_;
    }
    if (cached_has_bits & 0x00000020u) {
      eps_lkacontrolstatus_ = from.eps_lkacontrolstatus_;
    }
    if (cached_has_bits & 0x00000040u) {
      eps_epspaminh_ = from.eps_epspaminh_;
    }
    if (cached_has_bits & 0x00000080u) {
      rolling_counter_0x176_ = from.rolling_counter_0x176_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      eps_epspamsts_ = from.eps_epspamsts_;
    }
    if (cached_has_bits & 0x00000200u) {
      eps_torsionbartorque_ = from.eps_torsionbartorque_;
    }
    if (cached_has_bits & 0x00000400u) {
      checksum_0x176_ = from.checksum_0x176_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Eps_advanced_0x176_176::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Eps_advanced_0x176_176)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Eps_advanced_0x176_176::CopyFrom(const Eps_advanced_0x176_176& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Eps_advanced_0x176_176)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Eps_advanced_0x176_176::IsInitialized() const {
  return true;
}

void Eps_advanced_0x176_176::Swap(Eps_advanced_0x176_176* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Eps_advanced_0x176_176::InternalSwap(Eps_advanced_0x176_176* other) {
  std::swap(eps_lkaresponsetorque_, other->eps_lkaresponsetorque_);
  std::swap(eps_tosionbartorquevalid_, other->eps_tosionbartorquevalid_);
  std::swap(eps_lkaresponsetorquevalid_, other->eps_lkaresponsetorquevalid_);
  std::swap(eps_ldwcontrolstatus_, other->eps_ldwcontrolstatus_);
  std::swap(eps_pam_steeringsts_reserved_, other->eps_pam_steeringsts_reserved_);
  std::swap(eps_lkacontrolstatus_, other->eps_lkacontrolstatus_);
  std::swap(eps_epspaminh_, other->eps_epspaminh_);
  std::swap(rolling_counter_0x176_, other->rolling_counter_0x176_);
  std::swap(eps_epspamsts_, other->eps_epspamsts_);
  std::swap(eps_torsionbartorque_, other->eps_torsionbartorque_);
  std::swap(checksum_0x176_, other->checksum_0x176_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Eps_advanced_0x176_176::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Eps_advanced_0x176_176

// optional double eps_lkaresponsetorque = 1;
bool Eps_advanced_0x176_176::has_eps_lkaresponsetorque() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Eps_advanced_0x176_176::set_has_eps_lkaresponsetorque() {
  _has_bits_[0] |= 0x00000001u;
}
void Eps_advanced_0x176_176::clear_has_eps_lkaresponsetorque() {
  _has_bits_[0] &= ~0x00000001u;
}
void Eps_advanced_0x176_176::clear_eps_lkaresponsetorque() {
  eps_lkaresponsetorque_ = 0;
  clear_has_eps_lkaresponsetorque();
}
double Eps_advanced_0x176_176::eps_lkaresponsetorque() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_lkaresponsetorque)
  return eps_lkaresponsetorque_;
}
void Eps_advanced_0x176_176::set_eps_lkaresponsetorque(double value) {
  set_has_eps_lkaresponsetorque();
  eps_lkaresponsetorque_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_lkaresponsetorque)
}

// optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_tosionbartorquevalidType eps_tosionbartorquevalid = 2;
bool Eps_advanced_0x176_176::has_eps_tosionbartorquevalid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Eps_advanced_0x176_176::set_has_eps_tosionbartorquevalid() {
  _has_bits_[0] |= 0x00000002u;
}
void Eps_advanced_0x176_176::clear_has_eps_tosionbartorquevalid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Eps_advanced_0x176_176::clear_eps_tosionbartorquevalid() {
  eps_tosionbartorquevalid_ = 0;
  clear_has_eps_tosionbartorquevalid();
}
::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_tosionbartorquevalidType Eps_advanced_0x176_176::eps_tosionbartorquevalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_tosionbartorquevalid)
  return static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_tosionbartorquevalidType >(eps_tosionbartorquevalid_);
}
void Eps_advanced_0x176_176::set_eps_tosionbartorquevalid(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_tosionbartorquevalidType value) {
  assert(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_tosionbartorquevalidType_IsValid(value));
  set_has_eps_tosionbartorquevalid();
  eps_tosionbartorquevalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_tosionbartorquevalid)
}

// optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_lkaresponsetorquevalidType eps_lkaresponsetorquevalid = 3;
bool Eps_advanced_0x176_176::has_eps_lkaresponsetorquevalid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Eps_advanced_0x176_176::set_has_eps_lkaresponsetorquevalid() {
  _has_bits_[0] |= 0x00000004u;
}
void Eps_advanced_0x176_176::clear_has_eps_lkaresponsetorquevalid() {
  _has_bits_[0] &= ~0x00000004u;
}
void Eps_advanced_0x176_176::clear_eps_lkaresponsetorquevalid() {
  eps_lkaresponsetorquevalid_ = 0;
  clear_has_eps_lkaresponsetorquevalid();
}
::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType Eps_advanced_0x176_176::eps_lkaresponsetorquevalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_lkaresponsetorquevalid)
  return static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType >(eps_lkaresponsetorquevalid_);
}
void Eps_advanced_0x176_176::set_eps_lkaresponsetorquevalid(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType value) {
  assert(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkaresponsetorquevalidType_IsValid(value));
  set_has_eps_lkaresponsetorquevalid();
  eps_lkaresponsetorquevalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_lkaresponsetorquevalid)
}

// optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_ldwcontrolstatusType eps_ldwcontrolstatus = 4;
bool Eps_advanced_0x176_176::has_eps_ldwcontrolstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Eps_advanced_0x176_176::set_has_eps_ldwcontrolstatus() {
  _has_bits_[0] |= 0x00000008u;
}
void Eps_advanced_0x176_176::clear_has_eps_ldwcontrolstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
void Eps_advanced_0x176_176::clear_eps_ldwcontrolstatus() {
  eps_ldwcontrolstatus_ = 0;
  clear_has_eps_ldwcontrolstatus();
}
::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_ldwcontrolstatusType Eps_advanced_0x176_176::eps_ldwcontrolstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_ldwcontrolstatus)
  return static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_ldwcontrolstatusType >(eps_ldwcontrolstatus_);
}
void Eps_advanced_0x176_176::set_eps_ldwcontrolstatus(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_ldwcontrolstatusType value) {
  assert(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_ldwcontrolstatusType_IsValid(value));
  set_has_eps_ldwcontrolstatus();
  eps_ldwcontrolstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_ldwcontrolstatus)
}

// optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_pam_steeringsts_reservedType eps_pam_steeringsts_reserved = 5;
bool Eps_advanced_0x176_176::has_eps_pam_steeringsts_reserved() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Eps_advanced_0x176_176::set_has_eps_pam_steeringsts_reserved() {
  _has_bits_[0] |= 0x00000010u;
}
void Eps_advanced_0x176_176::clear_has_eps_pam_steeringsts_reserved() {
  _has_bits_[0] &= ~0x00000010u;
}
void Eps_advanced_0x176_176::clear_eps_pam_steeringsts_reserved() {
  eps_pam_steeringsts_reserved_ = 0;
  clear_has_eps_pam_steeringsts_reserved();
}
::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType Eps_advanced_0x176_176::eps_pam_steeringsts_reserved() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_pam_steeringsts_reserved)
  return static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType >(eps_pam_steeringsts_reserved_);
}
void Eps_advanced_0x176_176::set_eps_pam_steeringsts_reserved(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType value) {
  assert(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_pam_steeringsts_reservedType_IsValid(value));
  set_has_eps_pam_steeringsts_reserved();
  eps_pam_steeringsts_reserved_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_pam_steeringsts_reserved)
}

// optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_lkacontrolstatusType eps_lkacontrolstatus = 6;
bool Eps_advanced_0x176_176::has_eps_lkacontrolstatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Eps_advanced_0x176_176::set_has_eps_lkacontrolstatus() {
  _has_bits_[0] |= 0x00000020u;
}
void Eps_advanced_0x176_176::clear_has_eps_lkacontrolstatus() {
  _has_bits_[0] &= ~0x00000020u;
}
void Eps_advanced_0x176_176::clear_eps_lkacontrolstatus() {
  eps_lkacontrolstatus_ = 0;
  clear_has_eps_lkacontrolstatus();
}
::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkacontrolstatusType Eps_advanced_0x176_176::eps_lkacontrolstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_lkacontrolstatus)
  return static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkacontrolstatusType >(eps_lkacontrolstatus_);
}
void Eps_advanced_0x176_176::set_eps_lkacontrolstatus(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkacontrolstatusType value) {
  assert(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_lkacontrolstatusType_IsValid(value));
  set_has_eps_lkacontrolstatus();
  eps_lkacontrolstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_lkacontrolstatus)
}

// optional int32 eps_epspaminh = 7;
bool Eps_advanced_0x176_176::has_eps_epspaminh() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Eps_advanced_0x176_176::set_has_eps_epspaminh() {
  _has_bits_[0] |= 0x00000040u;
}
void Eps_advanced_0x176_176::clear_has_eps_epspaminh() {
  _has_bits_[0] &= ~0x00000040u;
}
void Eps_advanced_0x176_176::clear_eps_epspaminh() {
  eps_epspaminh_ = 0;
  clear_has_eps_epspaminh();
}
::google::protobuf::int32 Eps_advanced_0x176_176::eps_epspaminh() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_epspaminh)
  return eps_epspaminh_;
}
void Eps_advanced_0x176_176::set_eps_epspaminh(::google::protobuf::int32 value) {
  set_has_eps_epspaminh();
  eps_epspaminh_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_epspaminh)
}

// optional int32 rolling_counter_0x176 = 8;
bool Eps_advanced_0x176_176::has_rolling_counter_0x176() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Eps_advanced_0x176_176::set_has_rolling_counter_0x176() {
  _has_bits_[0] |= 0x00000080u;
}
void Eps_advanced_0x176_176::clear_has_rolling_counter_0x176() {
  _has_bits_[0] &= ~0x00000080u;
}
void Eps_advanced_0x176_176::clear_rolling_counter_0x176() {
  rolling_counter_0x176_ = 0;
  clear_has_rolling_counter_0x176();
}
::google::protobuf::int32 Eps_advanced_0x176_176::rolling_counter_0x176() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.rolling_counter_0x176)
  return rolling_counter_0x176_;
}
void Eps_advanced_0x176_176::set_rolling_counter_0x176(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x176();
  rolling_counter_0x176_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.rolling_counter_0x176)
}

// optional .jmc_auto.canbus.Eps_advanced_0x176_176.Eps_epspamstsType eps_epspamsts = 9;
bool Eps_advanced_0x176_176::has_eps_epspamsts() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Eps_advanced_0x176_176::set_has_eps_epspamsts() {
  _has_bits_[0] |= 0x00000100u;
}
void Eps_advanced_0x176_176::clear_has_eps_epspamsts() {
  _has_bits_[0] &= ~0x00000100u;
}
void Eps_advanced_0x176_176::clear_eps_epspamsts() {
  eps_epspamsts_ = 0;
  clear_has_eps_epspamsts();
}
::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspamstsType Eps_advanced_0x176_176::eps_epspamsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_epspamsts)
  return static_cast< ::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspamstsType >(eps_epspamsts_);
}
void Eps_advanced_0x176_176::set_eps_epspamsts(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspamstsType value) {
  assert(::jmc_auto::canbus::Eps_advanced_0x176_176_Eps_epspamstsType_IsValid(value));
  set_has_eps_epspamsts();
  eps_epspamsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_epspamsts)
}

// optional int32 checksum_0x176 = 10;
bool Eps_advanced_0x176_176::has_checksum_0x176() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Eps_advanced_0x176_176::set_has_checksum_0x176() {
  _has_bits_[0] |= 0x00000400u;
}
void Eps_advanced_0x176_176::clear_has_checksum_0x176() {
  _has_bits_[0] &= ~0x00000400u;
}
void Eps_advanced_0x176_176::clear_checksum_0x176() {
  checksum_0x176_ = 0;
  clear_has_checksum_0x176();
}
::google::protobuf::int32 Eps_advanced_0x176_176::checksum_0x176() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.checksum_0x176)
  return checksum_0x176_;
}
void Eps_advanced_0x176_176::set_checksum_0x176(::google::protobuf::int32 value) {
  set_has_checksum_0x176();
  checksum_0x176_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.checksum_0x176)
}

// optional double eps_torsionbartorque = 11;
bool Eps_advanced_0x176_176::has_eps_torsionbartorque() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Eps_advanced_0x176_176::set_has_eps_torsionbartorque() {
  _has_bits_[0] |= 0x00000200u;
}
void Eps_advanced_0x176_176::clear_has_eps_torsionbartorque() {
  _has_bits_[0] &= ~0x00000200u;
}
void Eps_advanced_0x176_176::clear_eps_torsionbartorque() {
  eps_torsionbartorque_ = 0;
  clear_has_eps_torsionbartorque();
}
double Eps_advanced_0x176_176::eps_torsionbartorque() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_advanced_0x176_176.eps_torsionbartorque)
  return eps_torsionbartorque_;
}
void Eps_advanced_0x176_176::set_eps_torsionbartorque(double value) {
  set_has_eps_torsionbartorque();
  eps_torsionbartorque_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_advanced_0x176_176.eps_torsionbartorque)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esp_whlpulse_0x236_236::kEspWheelpulseFrFieldNumber;
const int Esp_whlpulse_0x236_236::kEspWheelpulseRlFieldNumber;
const int Esp_whlpulse_0x236_236::kEspWheelpulseRrFieldNumber;
const int Esp_whlpulse_0x236_236::kRollingcounterEsp0X236FieldNumber;
const int Esp_whlpulse_0x236_236::kEspWheelpulseRrValidFieldNumber;
const int Esp_whlpulse_0x236_236::kEspWheelpulseRlValidFieldNumber;
const int Esp_whlpulse_0x236_236::kEspWheelpulseFrValidFieldNumber;
const int Esp_whlpulse_0x236_236::kEspWheelpulseFlValidFieldNumber;
const int Esp_whlpulse_0x236_236::kChecksumEsp0X236FieldNumber;
const int Esp_whlpulse_0x236_236::kEspWheelpulseFlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esp_whlpulse_0x236_236::Esp_whlpulse_0x236_236()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Esp_whlpulse_0x236_236)
}
Esp_whlpulse_0x236_236::Esp_whlpulse_0x236_236(const Esp_whlpulse_0x236_236& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&esp_wheelpulse_fr_, &from.esp_wheelpulse_fr_,
    reinterpret_cast<char*>(&esp_wheelpulse_fl_) -
    reinterpret_cast<char*>(&esp_wheelpulse_fr_) + sizeof(esp_wheelpulse_fl_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Esp_whlpulse_0x236_236)
}

void Esp_whlpulse_0x236_236::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&esp_wheelpulse_fr_, 0, reinterpret_cast<char*>(&esp_wheelpulse_fl_) -
    reinterpret_cast<char*>(&esp_wheelpulse_fr_) + sizeof(esp_wheelpulse_fl_));
}

Esp_whlpulse_0x236_236::~Esp_whlpulse_0x236_236() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Esp_whlpulse_0x236_236)
  SharedDtor();
}

void Esp_whlpulse_0x236_236::SharedDtor() {
}

void Esp_whlpulse_0x236_236::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esp_whlpulse_0x236_236::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esp_whlpulse_0x236_236& Esp_whlpulse_0x236_236::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esp_whlpulse_0x236_236* Esp_whlpulse_0x236_236::New(::google::protobuf::Arena* arena) const {
  Esp_whlpulse_0x236_236* n = new Esp_whlpulse_0x236_236;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esp_whlpulse_0x236_236::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Esp_whlpulse_0x236_236)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&esp_wheelpulse_fr_, 0, reinterpret_cast<char*>(&esp_wheelpulse_fl_valid_) -
      reinterpret_cast<char*>(&esp_wheelpulse_fr_) + sizeof(esp_wheelpulse_fl_valid_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&checksum_esp_0x236_, 0, reinterpret_cast<char*>(&esp_wheelpulse_fl_) -
      reinterpret_cast<char*>(&checksum_esp_0x236_) + sizeof(esp_wheelpulse_fl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esp_whlpulse_0x236_236::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Esp_whlpulse_0x236_236)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 esp_wheelpulse_fr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_esp_wheelpulse_fr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_wheelpulse_fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 esp_wheelpulse_rl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_esp_wheelpulse_rl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_wheelpulse_rl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 esp_wheelpulse_rr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_esp_wheelpulse_rr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_wheelpulse_rr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rollingcounter_esp_0x236 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_rollingcounter_esp_0x236();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rollingcounter_esp_0x236_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_rr_validType esp_wheelpulse_rr_valid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_IsValid(value)) {
            set_esp_wheelpulse_rr_valid(static_cast< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_rl_validType esp_wheelpulse_rl_valid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_IsValid(value)) {
            set_esp_wheelpulse_rl_valid(static_cast< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_fr_validType esp_wheelpulse_fr_valid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_IsValid(value)) {
            set_esp_wheelpulse_fr_valid(static_cast< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_fl_validType esp_wheelpulse_fl_valid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_IsValid(value)) {
            set_esp_wheelpulse_fl_valid(static_cast< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_esp_0x236 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_checksum_esp_0x236();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_esp_0x236_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 esp_wheelpulse_fl = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_esp_wheelpulse_fl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_wheelpulse_fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Esp_whlpulse_0x236_236)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Esp_whlpulse_0x236_236)
  return false;
#undef DO_
}

void Esp_whlpulse_0x236_236::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Esp_whlpulse_0x236_236)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 esp_wheelpulse_fr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->esp_wheelpulse_fr(), output);
  }

  // optional int32 esp_wheelpulse_rl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->esp_wheelpulse_rl(), output);
  }

  // optional int32 esp_wheelpulse_rr = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->esp_wheelpulse_rr(), output);
  }

  // optional int32 rollingcounter_esp_0x236 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rollingcounter_esp_0x236(), output);
  }

  // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_rr_validType esp_wheelpulse_rr_valid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->esp_wheelpulse_rr_valid(), output);
  }

  // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_rl_validType esp_wheelpulse_rl_valid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->esp_wheelpulse_rl_valid(), output);
  }

  // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_fr_validType esp_wheelpulse_fr_valid = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->esp_wheelpulse_fr_valid(), output);
  }

  // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_fl_validType esp_wheelpulse_fl_valid = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->esp_wheelpulse_fl_valid(), output);
  }

  // optional int32 checksum_esp_0x236 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->checksum_esp_0x236(), output);
  }

  // optional int32 esp_wheelpulse_fl = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->esp_wheelpulse_fl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Esp_whlpulse_0x236_236)
}

::google::protobuf::uint8* Esp_whlpulse_0x236_236::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Esp_whlpulse_0x236_236)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 esp_wheelpulse_fr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->esp_wheelpulse_fr(), target);
  }

  // optional int32 esp_wheelpulse_rl = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->esp_wheelpulse_rl(), target);
  }

  // optional int32 esp_wheelpulse_rr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->esp_wheelpulse_rr(), target);
  }

  // optional int32 rollingcounter_esp_0x236 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rollingcounter_esp_0x236(), target);
  }

  // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_rr_validType esp_wheelpulse_rr_valid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->esp_wheelpulse_rr_valid(), target);
  }

  // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_rl_validType esp_wheelpulse_rl_valid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->esp_wheelpulse_rl_valid(), target);
  }

  // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_fr_validType esp_wheelpulse_fr_valid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->esp_wheelpulse_fr_valid(), target);
  }

  // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_fl_validType esp_wheelpulse_fl_valid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->esp_wheelpulse_fl_valid(), target);
  }

  // optional int32 checksum_esp_0x236 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->checksum_esp_0x236(), target);
  }

  // optional int32 esp_wheelpulse_fl = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->esp_wheelpulse_fl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Esp_whlpulse_0x236_236)
  return target;
}

size_t Esp_whlpulse_0x236_236::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Esp_whlpulse_0x236_236)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 esp_wheelpulse_fr = 1;
    if (has_esp_wheelpulse_fr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_wheelpulse_fr());
    }

    // optional int32 esp_wheelpulse_rl = 2;
    if (has_esp_wheelpulse_rl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_wheelpulse_rl());
    }

    // optional int32 esp_wheelpulse_rr = 3;
    if (has_esp_wheelpulse_rr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_wheelpulse_rr());
    }

    // optional int32 rollingcounter_esp_0x236 = 4;
    if (has_rollingcounter_esp_0x236()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rollingcounter_esp_0x236());
    }

    // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_rr_validType esp_wheelpulse_rr_valid = 5;
    if (has_esp_wheelpulse_rr_valid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_wheelpulse_rr_valid());
    }

    // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_rl_validType esp_wheelpulse_rl_valid = 6;
    if (has_esp_wheelpulse_rl_valid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_wheelpulse_rl_valid());
    }

    // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_fr_validType esp_wheelpulse_fr_valid = 7;
    if (has_esp_wheelpulse_fr_valid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_wheelpulse_fr_valid());
    }

    // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_fl_validType esp_wheelpulse_fl_valid = 8;
    if (has_esp_wheelpulse_fl_valid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_wheelpulse_fl_valid());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 checksum_esp_0x236 = 9;
    if (has_checksum_esp_0x236()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_esp_0x236());
    }

    // optional int32 esp_wheelpulse_fl = 10;
    if (has_esp_wheelpulse_fl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_wheelpulse_fl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esp_whlpulse_0x236_236::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Esp_whlpulse_0x236_236)
  GOOGLE_DCHECK_NE(&from, this);
  const Esp_whlpulse_0x236_236* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esp_whlpulse_0x236_236>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Esp_whlpulse_0x236_236)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Esp_whlpulse_0x236_236)
    MergeFrom(*source);
  }
}

void Esp_whlpulse_0x236_236::MergeFrom(const Esp_whlpulse_0x236_236& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Esp_whlpulse_0x236_236)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      esp_wheelpulse_fr_ = from.esp_wheelpulse_fr_;
    }
    if (cached_has_bits & 0x00000002u) {
      esp_wheelpulse_rl_ = from.esp_wheelpulse_rl_;
    }
    if (cached_has_bits & 0x00000004u) {
      esp_wheelpulse_rr_ = from.esp_wheelpulse_rr_;
    }
    if (cached_has_bits & 0x00000008u) {
      rollingcounter_esp_0x236_ = from.rollingcounter_esp_0x236_;
    }
    if (cached_has_bits & 0x00000010u) {
      esp_wheelpulse_rr_valid_ = from.esp_wheelpulse_rr_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      esp_wheelpulse_rl_valid_ = from.esp_wheelpulse_rl_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      esp_wheelpulse_fr_valid_ = from.esp_wheelpulse_fr_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      esp_wheelpulse_fl_valid_ = from.esp_wheelpulse_fl_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      checksum_esp_0x236_ = from.checksum_esp_0x236_;
    }
    if (cached_has_bits & 0x00000200u) {
      esp_wheelpulse_fl_ = from.esp_wheelpulse_fl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esp_whlpulse_0x236_236::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Esp_whlpulse_0x236_236)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esp_whlpulse_0x236_236::CopyFrom(const Esp_whlpulse_0x236_236& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Esp_whlpulse_0x236_236)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esp_whlpulse_0x236_236::IsInitialized() const {
  return true;
}

void Esp_whlpulse_0x236_236::Swap(Esp_whlpulse_0x236_236* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esp_whlpulse_0x236_236::InternalSwap(Esp_whlpulse_0x236_236* other) {
  std::swap(esp_wheelpulse_fr_, other->esp_wheelpulse_fr_);
  std::swap(esp_wheelpulse_rl_, other->esp_wheelpulse_rl_);
  std::swap(esp_wheelpulse_rr_, other->esp_wheelpulse_rr_);
  std::swap(rollingcounter_esp_0x236_, other->rollingcounter_esp_0x236_);
  std::swap(esp_wheelpulse_rr_valid_, other->esp_wheelpulse_rr_valid_);
  std::swap(esp_wheelpulse_rl_valid_, other->esp_wheelpulse_rl_valid_);
  std::swap(esp_wheelpulse_fr_valid_, other->esp_wheelpulse_fr_valid_);
  std::swap(esp_wheelpulse_fl_valid_, other->esp_wheelpulse_fl_valid_);
  std::swap(checksum_esp_0x236_, other->checksum_esp_0x236_);
  std::swap(esp_wheelpulse_fl_, other->esp_wheelpulse_fl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esp_whlpulse_0x236_236::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esp_whlpulse_0x236_236

// optional int32 esp_wheelpulse_fr = 1;
bool Esp_whlpulse_0x236_236::has_esp_wheelpulse_fr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esp_whlpulse_0x236_236::set_has_esp_wheelpulse_fr() {
  _has_bits_[0] |= 0x00000001u;
}
void Esp_whlpulse_0x236_236::clear_has_esp_wheelpulse_fr() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esp_whlpulse_0x236_236::clear_esp_wheelpulse_fr() {
  esp_wheelpulse_fr_ = 0;
  clear_has_esp_wheelpulse_fr();
}
::google::protobuf::int32 Esp_whlpulse_0x236_236::esp_wheelpulse_fr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_fr)
  return esp_wheelpulse_fr_;
}
void Esp_whlpulse_0x236_236::set_esp_wheelpulse_fr(::google::protobuf::int32 value) {
  set_has_esp_wheelpulse_fr();
  esp_wheelpulse_fr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_fr)
}

// optional int32 esp_wheelpulse_rl = 2;
bool Esp_whlpulse_0x236_236::has_esp_wheelpulse_rl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esp_whlpulse_0x236_236::set_has_esp_wheelpulse_rl() {
  _has_bits_[0] |= 0x00000002u;
}
void Esp_whlpulse_0x236_236::clear_has_esp_wheelpulse_rl() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esp_whlpulse_0x236_236::clear_esp_wheelpulse_rl() {
  esp_wheelpulse_rl_ = 0;
  clear_has_esp_wheelpulse_rl();
}
::google::protobuf::int32 Esp_whlpulse_0x236_236::esp_wheelpulse_rl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_rl)
  return esp_wheelpulse_rl_;
}
void Esp_whlpulse_0x236_236::set_esp_wheelpulse_rl(::google::protobuf::int32 value) {
  set_has_esp_wheelpulse_rl();
  esp_wheelpulse_rl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_rl)
}

// optional int32 esp_wheelpulse_rr = 3;
bool Esp_whlpulse_0x236_236::has_esp_wheelpulse_rr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esp_whlpulse_0x236_236::set_has_esp_wheelpulse_rr() {
  _has_bits_[0] |= 0x00000004u;
}
void Esp_whlpulse_0x236_236::clear_has_esp_wheelpulse_rr() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esp_whlpulse_0x236_236::clear_esp_wheelpulse_rr() {
  esp_wheelpulse_rr_ = 0;
  clear_has_esp_wheelpulse_rr();
}
::google::protobuf::int32 Esp_whlpulse_0x236_236::esp_wheelpulse_rr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_rr)
  return esp_wheelpulse_rr_;
}
void Esp_whlpulse_0x236_236::set_esp_wheelpulse_rr(::google::protobuf::int32 value) {
  set_has_esp_wheelpulse_rr();
  esp_wheelpulse_rr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_rr)
}

// optional int32 rollingcounter_esp_0x236 = 4;
bool Esp_whlpulse_0x236_236::has_rollingcounter_esp_0x236() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esp_whlpulse_0x236_236::set_has_rollingcounter_esp_0x236() {
  _has_bits_[0] |= 0x00000008u;
}
void Esp_whlpulse_0x236_236::clear_has_rollingcounter_esp_0x236() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esp_whlpulse_0x236_236::clear_rollingcounter_esp_0x236() {
  rollingcounter_esp_0x236_ = 0;
  clear_has_rollingcounter_esp_0x236();
}
::google::protobuf::int32 Esp_whlpulse_0x236_236::rollingcounter_esp_0x236() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.rollingcounter_esp_0x236)
  return rollingcounter_esp_0x236_;
}
void Esp_whlpulse_0x236_236::set_rollingcounter_esp_0x236(::google::protobuf::int32 value) {
  set_has_rollingcounter_esp_0x236();
  rollingcounter_esp_0x236_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.rollingcounter_esp_0x236)
}

// optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_rr_validType esp_wheelpulse_rr_valid = 5;
bool Esp_whlpulse_0x236_236::has_esp_wheelpulse_rr_valid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esp_whlpulse_0x236_236::set_has_esp_wheelpulse_rr_valid() {
  _has_bits_[0] |= 0x00000010u;
}
void Esp_whlpulse_0x236_236::clear_has_esp_wheelpulse_rr_valid() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esp_whlpulse_0x236_236::clear_esp_wheelpulse_rr_valid() {
  esp_wheelpulse_rr_valid_ = 0;
  clear_has_esp_wheelpulse_rr_valid();
}
::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType Esp_whlpulse_0x236_236::esp_wheelpulse_rr_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_rr_valid)
  return static_cast< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType >(esp_wheelpulse_rr_valid_);
}
void Esp_whlpulse_0x236_236::set_esp_wheelpulse_rr_valid(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType value) {
  assert(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rr_validType_IsValid(value));
  set_has_esp_wheelpulse_rr_valid();
  esp_wheelpulse_rr_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_rr_valid)
}

// optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_rl_validType esp_wheelpulse_rl_valid = 6;
bool Esp_whlpulse_0x236_236::has_esp_wheelpulse_rl_valid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Esp_whlpulse_0x236_236::set_has_esp_wheelpulse_rl_valid() {
  _has_bits_[0] |= 0x00000020u;
}
void Esp_whlpulse_0x236_236::clear_has_esp_wheelpulse_rl_valid() {
  _has_bits_[0] &= ~0x00000020u;
}
void Esp_whlpulse_0x236_236::clear_esp_wheelpulse_rl_valid() {
  esp_wheelpulse_rl_valid_ = 0;
  clear_has_esp_wheelpulse_rl_valid();
}
::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType Esp_whlpulse_0x236_236::esp_wheelpulse_rl_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_rl_valid)
  return static_cast< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType >(esp_wheelpulse_rl_valid_);
}
void Esp_whlpulse_0x236_236::set_esp_wheelpulse_rl_valid(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType value) {
  assert(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_rl_validType_IsValid(value));
  set_has_esp_wheelpulse_rl_valid();
  esp_wheelpulse_rl_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_rl_valid)
}

// optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_fr_validType esp_wheelpulse_fr_valid = 7;
bool Esp_whlpulse_0x236_236::has_esp_wheelpulse_fr_valid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Esp_whlpulse_0x236_236::set_has_esp_wheelpulse_fr_valid() {
  _has_bits_[0] |= 0x00000040u;
}
void Esp_whlpulse_0x236_236::clear_has_esp_wheelpulse_fr_valid() {
  _has_bits_[0] &= ~0x00000040u;
}
void Esp_whlpulse_0x236_236::clear_esp_wheelpulse_fr_valid() {
  esp_wheelpulse_fr_valid_ = 0;
  clear_has_esp_wheelpulse_fr_valid();
}
::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType Esp_whlpulse_0x236_236::esp_wheelpulse_fr_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_fr_valid)
  return static_cast< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType >(esp_wheelpulse_fr_valid_);
}
void Esp_whlpulse_0x236_236::set_esp_wheelpulse_fr_valid(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType value) {
  assert(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fr_validType_IsValid(value));
  set_has_esp_wheelpulse_fr_valid();
  esp_wheelpulse_fr_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_fr_valid)
}

// optional .jmc_auto.canbus.Esp_whlpulse_0x236_236.Esp_wheelpulse_fl_validType esp_wheelpulse_fl_valid = 8;
bool Esp_whlpulse_0x236_236::has_esp_wheelpulse_fl_valid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Esp_whlpulse_0x236_236::set_has_esp_wheelpulse_fl_valid() {
  _has_bits_[0] |= 0x00000080u;
}
void Esp_whlpulse_0x236_236::clear_has_esp_wheelpulse_fl_valid() {
  _has_bits_[0] &= ~0x00000080u;
}
void Esp_whlpulse_0x236_236::clear_esp_wheelpulse_fl_valid() {
  esp_wheelpulse_fl_valid_ = 0;
  clear_has_esp_wheelpulse_fl_valid();
}
::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType Esp_whlpulse_0x236_236::esp_wheelpulse_fl_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_fl_valid)
  return static_cast< ::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType >(esp_wheelpulse_fl_valid_);
}
void Esp_whlpulse_0x236_236::set_esp_wheelpulse_fl_valid(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType value) {
  assert(::jmc_auto::canbus::Esp_whlpulse_0x236_236_Esp_wheelpulse_fl_validType_IsValid(value));
  set_has_esp_wheelpulse_fl_valid();
  esp_wheelpulse_fl_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_fl_valid)
}

// optional int32 checksum_esp_0x236 = 9;
bool Esp_whlpulse_0x236_236::has_checksum_esp_0x236() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Esp_whlpulse_0x236_236::set_has_checksum_esp_0x236() {
  _has_bits_[0] |= 0x00000100u;
}
void Esp_whlpulse_0x236_236::clear_has_checksum_esp_0x236() {
  _has_bits_[0] &= ~0x00000100u;
}
void Esp_whlpulse_0x236_236::clear_checksum_esp_0x236() {
  checksum_esp_0x236_ = 0;
  clear_has_checksum_esp_0x236();
}
::google::protobuf::int32 Esp_whlpulse_0x236_236::checksum_esp_0x236() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.checksum_esp_0x236)
  return checksum_esp_0x236_;
}
void Esp_whlpulse_0x236_236::set_checksum_esp_0x236(::google::protobuf::int32 value) {
  set_has_checksum_esp_0x236();
  checksum_esp_0x236_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.checksum_esp_0x236)
}

// optional int32 esp_wheelpulse_fl = 10;
bool Esp_whlpulse_0x236_236::has_esp_wheelpulse_fl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Esp_whlpulse_0x236_236::set_has_esp_wheelpulse_fl() {
  _has_bits_[0] |= 0x00000200u;
}
void Esp_whlpulse_0x236_236::clear_has_esp_wheelpulse_fl() {
  _has_bits_[0] &= ~0x00000200u;
}
void Esp_whlpulse_0x236_236::clear_esp_wheelpulse_fl() {
  esp_wheelpulse_fl_ = 0;
  clear_has_esp_wheelpulse_fl();
}
::google::protobuf::int32 Esp_whlpulse_0x236_236::esp_wheelpulse_fl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_fl)
  return esp_wheelpulse_fl_;
}
void Esp_whlpulse_0x236_236::set_esp_wheelpulse_fl(::google::protobuf::int32 value) {
  set_has_esp_wheelpulse_fl();
  esp_wheelpulse_fl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_whlpulse_0x236_236.esp_wheelpulse_fl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ipm_rightline_0x490_490::kIpmRightlineDyFieldNumber;
const int Ipm_rightline_0x490_490::kIpmRightlineDxLookheadFieldNumber;
const int Ipm_rightline_0x490_490::kIpmRightlineHorCurveFieldNumber;
const int Ipm_rightline_0x490_490::kIpmRightlineYawangleFieldNumber;
const int Ipm_rightline_0x490_490::kIpmRightlineDxStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ipm_rightline_0x490_490::Ipm_rightline_0x490_490()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Ipm_rightline_0x490_490)
}
Ipm_rightline_0x490_490::Ipm_rightline_0x490_490(const Ipm_rightline_0x490_490& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ipm_rightline_dy_, &from.ipm_rightline_dy_,
    reinterpret_cast<char*>(&ipm_rightline_dx_start_) -
    reinterpret_cast<char*>(&ipm_rightline_dy_) + sizeof(ipm_rightline_dx_start_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Ipm_rightline_0x490_490)
}

void Ipm_rightline_0x490_490::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ipm_rightline_dy_, 0, reinterpret_cast<char*>(&ipm_rightline_dx_start_) -
    reinterpret_cast<char*>(&ipm_rightline_dy_) + sizeof(ipm_rightline_dx_start_));
}

Ipm_rightline_0x490_490::~Ipm_rightline_0x490_490() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Ipm_rightline_0x490_490)
  SharedDtor();
}

void Ipm_rightline_0x490_490::SharedDtor() {
}

void Ipm_rightline_0x490_490::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ipm_rightline_0x490_490::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ipm_rightline_0x490_490& Ipm_rightline_0x490_490::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ipm_rightline_0x490_490* Ipm_rightline_0x490_490::New(::google::protobuf::Arena* arena) const {
  Ipm_rightline_0x490_490* n = new Ipm_rightline_0x490_490;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ipm_rightline_0x490_490::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Ipm_rightline_0x490_490)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&ipm_rightline_dy_, 0, reinterpret_cast<char*>(&ipm_rightline_dx_start_) -
      reinterpret_cast<char*>(&ipm_rightline_dy_) + sizeof(ipm_rightline_dx_start_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ipm_rightline_0x490_490::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Ipm_rightline_0x490_490)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ipm_rightline_dy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_ipm_rightline_dy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipm_rightline_dy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipm_rightline_dx_lookhead = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_ipm_rightline_dx_lookhead();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipm_rightline_dx_lookhead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipm_rightline_hor_curve = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_ipm_rightline_hor_curve();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipm_rightline_hor_curve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipm_rightline_yawangle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_ipm_rightline_yawangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipm_rightline_yawangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipm_rightline_dx_start = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_ipm_rightline_dx_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipm_rightline_dx_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Ipm_rightline_0x490_490)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Ipm_rightline_0x490_490)
  return false;
#undef DO_
}

void Ipm_rightline_0x490_490::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Ipm_rightline_0x490_490)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ipm_rightline_dy = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ipm_rightline_dy(), output);
  }

  // optional double ipm_rightline_dx_lookhead = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ipm_rightline_dx_lookhead(), output);
  }

  // optional double ipm_rightline_hor_curve = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ipm_rightline_hor_curve(), output);
  }

  // optional double ipm_rightline_yawangle = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ipm_rightline_yawangle(), output);
  }

  // optional double ipm_rightline_dx_start = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ipm_rightline_dx_start(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Ipm_rightline_0x490_490)
}

::google::protobuf::uint8* Ipm_rightline_0x490_490::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Ipm_rightline_0x490_490)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ipm_rightline_dy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ipm_rightline_dy(), target);
  }

  // optional double ipm_rightline_dx_lookhead = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ipm_rightline_dx_lookhead(), target);
  }

  // optional double ipm_rightline_hor_curve = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ipm_rightline_hor_curve(), target);
  }

  // optional double ipm_rightline_yawangle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ipm_rightline_yawangle(), target);
  }

  // optional double ipm_rightline_dx_start = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ipm_rightline_dx_start(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Ipm_rightline_0x490_490)
  return target;
}

size_t Ipm_rightline_0x490_490::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Ipm_rightline_0x490_490)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional double ipm_rightline_dy = 1;
    if (has_ipm_rightline_dy()) {
      total_size += 1 + 8;
    }

    // optional double ipm_rightline_dx_lookhead = 2;
    if (has_ipm_rightline_dx_lookhead()) {
      total_size += 1 + 8;
    }

    // optional double ipm_rightline_hor_curve = 3;
    if (has_ipm_rightline_hor_curve()) {
      total_size += 1 + 8;
    }

    // optional double ipm_rightline_yawangle = 4;
    if (has_ipm_rightline_yawangle()) {
      total_size += 1 + 8;
    }

    // optional double ipm_rightline_dx_start = 5;
    if (has_ipm_rightline_dx_start()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ipm_rightline_0x490_490::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Ipm_rightline_0x490_490)
  GOOGLE_DCHECK_NE(&from, this);
  const Ipm_rightline_0x490_490* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ipm_rightline_0x490_490>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Ipm_rightline_0x490_490)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Ipm_rightline_0x490_490)
    MergeFrom(*source);
  }
}

void Ipm_rightline_0x490_490::MergeFrom(const Ipm_rightline_0x490_490& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Ipm_rightline_0x490_490)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      ipm_rightline_dy_ = from.ipm_rightline_dy_;
    }
    if (cached_has_bits & 0x00000002u) {
      ipm_rightline_dx_lookhead_ = from.ipm_rightline_dx_lookhead_;
    }
    if (cached_has_bits & 0x00000004u) {
      ipm_rightline_hor_curve_ = from.ipm_rightline_hor_curve_;
    }
    if (cached_has_bits & 0x00000008u) {
      ipm_rightline_yawangle_ = from.ipm_rightline_yawangle_;
    }
    if (cached_has_bits & 0x00000010u) {
      ipm_rightline_dx_start_ = from.ipm_rightline_dx_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ipm_rightline_0x490_490::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Ipm_rightline_0x490_490)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ipm_rightline_0x490_490::CopyFrom(const Ipm_rightline_0x490_490& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Ipm_rightline_0x490_490)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ipm_rightline_0x490_490::IsInitialized() const {
  return true;
}

void Ipm_rightline_0x490_490::Swap(Ipm_rightline_0x490_490* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ipm_rightline_0x490_490::InternalSwap(Ipm_rightline_0x490_490* other) {
  std::swap(ipm_rightline_dy_, other->ipm_rightline_dy_);
  std::swap(ipm_rightline_dx_lookhead_, other->ipm_rightline_dx_lookhead_);
  std::swap(ipm_rightline_hor_curve_, other->ipm_rightline_hor_curve_);
  std::swap(ipm_rightline_yawangle_, other->ipm_rightline_yawangle_);
  std::swap(ipm_rightline_dx_start_, other->ipm_rightline_dx_start_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ipm_rightline_0x490_490::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ipm_rightline_0x490_490

// optional double ipm_rightline_dy = 1;
bool Ipm_rightline_0x490_490::has_ipm_rightline_dy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ipm_rightline_0x490_490::set_has_ipm_rightline_dy() {
  _has_bits_[0] |= 0x00000001u;
}
void Ipm_rightline_0x490_490::clear_has_ipm_rightline_dy() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ipm_rightline_0x490_490::clear_ipm_rightline_dy() {
  ipm_rightline_dy_ = 0;
  clear_has_ipm_rightline_dy();
}
double Ipm_rightline_0x490_490::ipm_rightline_dy() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_dy)
  return ipm_rightline_dy_;
}
void Ipm_rightline_0x490_490::set_ipm_rightline_dy(double value) {
  set_has_ipm_rightline_dy();
  ipm_rightline_dy_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_dy)
}

// optional double ipm_rightline_dx_lookhead = 2;
bool Ipm_rightline_0x490_490::has_ipm_rightline_dx_lookhead() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ipm_rightline_0x490_490::set_has_ipm_rightline_dx_lookhead() {
  _has_bits_[0] |= 0x00000002u;
}
void Ipm_rightline_0x490_490::clear_has_ipm_rightline_dx_lookhead() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ipm_rightline_0x490_490::clear_ipm_rightline_dx_lookhead() {
  ipm_rightline_dx_lookhead_ = 0;
  clear_has_ipm_rightline_dx_lookhead();
}
double Ipm_rightline_0x490_490::ipm_rightline_dx_lookhead() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_dx_lookhead)
  return ipm_rightline_dx_lookhead_;
}
void Ipm_rightline_0x490_490::set_ipm_rightline_dx_lookhead(double value) {
  set_has_ipm_rightline_dx_lookhead();
  ipm_rightline_dx_lookhead_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_dx_lookhead)
}

// optional double ipm_rightline_hor_curve = 3;
bool Ipm_rightline_0x490_490::has_ipm_rightline_hor_curve() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ipm_rightline_0x490_490::set_has_ipm_rightline_hor_curve() {
  _has_bits_[0] |= 0x00000004u;
}
void Ipm_rightline_0x490_490::clear_has_ipm_rightline_hor_curve() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ipm_rightline_0x490_490::clear_ipm_rightline_hor_curve() {
  ipm_rightline_hor_curve_ = 0;
  clear_has_ipm_rightline_hor_curve();
}
double Ipm_rightline_0x490_490::ipm_rightline_hor_curve() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_hor_curve)
  return ipm_rightline_hor_curve_;
}
void Ipm_rightline_0x490_490::set_ipm_rightline_hor_curve(double value) {
  set_has_ipm_rightline_hor_curve();
  ipm_rightline_hor_curve_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_hor_curve)
}

// optional double ipm_rightline_yawangle = 4;
bool Ipm_rightline_0x490_490::has_ipm_rightline_yawangle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Ipm_rightline_0x490_490::set_has_ipm_rightline_yawangle() {
  _has_bits_[0] |= 0x00000008u;
}
void Ipm_rightline_0x490_490::clear_has_ipm_rightline_yawangle() {
  _has_bits_[0] &= ~0x00000008u;
}
void Ipm_rightline_0x490_490::clear_ipm_rightline_yawangle() {
  ipm_rightline_yawangle_ = 0;
  clear_has_ipm_rightline_yawangle();
}
double Ipm_rightline_0x490_490::ipm_rightline_yawangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_yawangle)
  return ipm_rightline_yawangle_;
}
void Ipm_rightline_0x490_490::set_ipm_rightline_yawangle(double value) {
  set_has_ipm_rightline_yawangle();
  ipm_rightline_yawangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_yawangle)
}

// optional double ipm_rightline_dx_start = 5;
bool Ipm_rightline_0x490_490::has_ipm_rightline_dx_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Ipm_rightline_0x490_490::set_has_ipm_rightline_dx_start() {
  _has_bits_[0] |= 0x00000010u;
}
void Ipm_rightline_0x490_490::clear_has_ipm_rightline_dx_start() {
  _has_bits_[0] &= ~0x00000010u;
}
void Ipm_rightline_0x490_490::clear_ipm_rightline_dx_start() {
  ipm_rightline_dx_start_ = 0;
  clear_has_ipm_rightline_dx_start();
}
double Ipm_rightline_0x490_490::ipm_rightline_dx_start() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_dx_start)
  return ipm_rightline_dx_start_;
}
void Ipm_rightline_0x490_490::set_ipm_rightline_dx_start(double value) {
  set_has_ipm_rightline_dx_start();
  ipm_rightline_dx_start_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_rightline_0x490_490.ipm_rightline_dx_start)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sas_sensor_0x175_175::kSasRawSteerwheelangleFieldNumber;
const int Sas_sensor_0x175_175::kSasSteerwheelrotspdFieldNumber;
const int Sas_sensor_0x175_175::kSasTrimmingstsFieldNumber;
const int Sas_sensor_0x175_175::kSasSteerwheelrotspdstatusFieldNumber;
const int Sas_sensor_0x175_175::kRollingCounter0X175FieldNumber;
const int Sas_sensor_0x175_175::kSasSasstscalFieldNumber;
const int Sas_sensor_0x175_175::kSasRawSasstssnsrFieldNumber;
const int Sas_sensor_0x175_175::kSasSasstssnsrFieldNumber;
const int Sas_sensor_0x175_175::kChecksum0X175FieldNumber;
const int Sas_sensor_0x175_175::kSasSteerwheelangleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sas_sensor_0x175_175::Sas_sensor_0x175_175()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Sas_sensor_0x175_175)
}
Sas_sensor_0x175_175::Sas_sensor_0x175_175(const Sas_sensor_0x175_175& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sas_raw_steerwheelangle_, &from.sas_raw_steerwheelangle_,
    reinterpret_cast<char*>(&checksum_0x175_) -
    reinterpret_cast<char*>(&sas_raw_steerwheelangle_) + sizeof(checksum_0x175_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Sas_sensor_0x175_175)
}

void Sas_sensor_0x175_175::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sas_raw_steerwheelangle_, 0, reinterpret_cast<char*>(&checksum_0x175_) -
    reinterpret_cast<char*>(&sas_raw_steerwheelangle_) + sizeof(checksum_0x175_));
}

Sas_sensor_0x175_175::~Sas_sensor_0x175_175() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Sas_sensor_0x175_175)
  SharedDtor();
}

void Sas_sensor_0x175_175::SharedDtor() {
}

void Sas_sensor_0x175_175::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sas_sensor_0x175_175::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sas_sensor_0x175_175& Sas_sensor_0x175_175::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sas_sensor_0x175_175* Sas_sensor_0x175_175::New(::google::protobuf::Arena* arena) const {
  Sas_sensor_0x175_175* n = new Sas_sensor_0x175_175;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sas_sensor_0x175_175::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Sas_sensor_0x175_175)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&sas_raw_steerwheelangle_, 0, reinterpret_cast<char*>(&sas_sasstssnsr_) -
      reinterpret_cast<char*>(&sas_raw_steerwheelangle_) + sizeof(sas_sasstssnsr_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&sas_steerwheelangle_, 0, reinterpret_cast<char*>(&checksum_0x175_) -
      reinterpret_cast<char*>(&sas_steerwheelangle_) + sizeof(checksum_0x175_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sas_sensor_0x175_175::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Sas_sensor_0x175_175)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double sas_raw_steerwheelangle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_sas_raw_steerwheelangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sas_raw_steerwheelangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sas_steerwheelrotspd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_sas_steerwheelrotspd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sas_steerwheelrotspd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_trimmingstsType sas_trimmingsts = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_trimmingstsType_IsValid(value)) {
            set_sas_trimmingsts(static_cast< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_trimmingstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_steerwheelrotspdstatusType sas_steerwheelrotspdstatus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_IsValid(value)) {
            set_sas_steerwheelrotspdstatus(static_cast< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x175 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_rolling_counter_0x175();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x175_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_sasstscalType sas_sasstscal = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstscalType_IsValid(value)) {
            set_sas_sasstscal(static_cast< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstscalType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_raw_sasstssnsrType sas_raw_sasstssnsr = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_IsValid(value)) {
            set_sas_raw_sasstssnsr(static_cast< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_raw_sasstssnsrType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_sasstssnsrType sas_sasstssnsr = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstssnsrType_IsValid(value)) {
            set_sas_sasstssnsr(static_cast< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstssnsrType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x175 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_checksum_0x175();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x175_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sas_steerwheelangle = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_sas_steerwheelangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sas_steerwheelangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Sas_sensor_0x175_175)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Sas_sensor_0x175_175)
  return false;
#undef DO_
}

void Sas_sensor_0x175_175::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Sas_sensor_0x175_175)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double sas_raw_steerwheelangle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->sas_raw_steerwheelangle(), output);
  }

  // optional double sas_steerwheelrotspd = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sas_steerwheelrotspd(), output);
  }

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_trimmingstsType sas_trimmingsts = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sas_trimmingsts(), output);
  }

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_steerwheelrotspdstatusType sas_steerwheelrotspdstatus = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sas_steerwheelrotspdstatus(), output);
  }

  // optional int32 rolling_counter_0x175 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rolling_counter_0x175(), output);
  }

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_sasstscalType sas_sasstscal = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->sas_sasstscal(), output);
  }

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_raw_sasstssnsrType sas_raw_sasstssnsr = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->sas_raw_sasstssnsr(), output);
  }

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_sasstssnsrType sas_sasstssnsr = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->sas_sasstssnsr(), output);
  }

  // optional int32 checksum_0x175 = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->checksum_0x175(), output);
  }

  // optional double sas_steerwheelangle = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->sas_steerwheelangle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Sas_sensor_0x175_175)
}

::google::protobuf::uint8* Sas_sensor_0x175_175::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Sas_sensor_0x175_175)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double sas_raw_steerwheelangle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->sas_raw_steerwheelangle(), target);
  }

  // optional double sas_steerwheelrotspd = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sas_steerwheelrotspd(), target);
  }

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_trimmingstsType sas_trimmingsts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sas_trimmingsts(), target);
  }

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_steerwheelrotspdstatusType sas_steerwheelrotspdstatus = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->sas_steerwheelrotspdstatus(), target);
  }

  // optional int32 rolling_counter_0x175 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rolling_counter_0x175(), target);
  }

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_sasstscalType sas_sasstscal = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->sas_sasstscal(), target);
  }

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_raw_sasstssnsrType sas_raw_sasstssnsr = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->sas_raw_sasstssnsr(), target);
  }

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_sasstssnsrType sas_sasstssnsr = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->sas_sasstssnsr(), target);
  }

  // optional int32 checksum_0x175 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->checksum_0x175(), target);
  }

  // optional double sas_steerwheelangle = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->sas_steerwheelangle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Sas_sensor_0x175_175)
  return target;
}

size_t Sas_sensor_0x175_175::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Sas_sensor_0x175_175)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double sas_raw_steerwheelangle = 1;
    if (has_sas_raw_steerwheelangle()) {
      total_size += 1 + 8;
    }

    // optional double sas_steerwheelrotspd = 2;
    if (has_sas_steerwheelrotspd()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_trimmingstsType sas_trimmingsts = 3;
    if (has_sas_trimmingsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sas_trimmingsts());
    }

    // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_steerwheelrotspdstatusType sas_steerwheelrotspdstatus = 4;
    if (has_sas_steerwheelrotspdstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sas_steerwheelrotspdstatus());
    }

    // optional int32 rolling_counter_0x175 = 5;
    if (has_rolling_counter_0x175()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x175());
    }

    // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_sasstscalType sas_sasstscal = 6;
    if (has_sas_sasstscal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sas_sasstscal());
    }

    // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_raw_sasstssnsrType sas_raw_sasstssnsr = 7;
    if (has_sas_raw_sasstssnsr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sas_raw_sasstssnsr());
    }

    // optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_sasstssnsrType sas_sasstssnsr = 8;
    if (has_sas_sasstssnsr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sas_sasstssnsr());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional double sas_steerwheelangle = 10;
    if (has_sas_steerwheelangle()) {
      total_size += 1 + 8;
    }

    // optional int32 checksum_0x175 = 9;
    if (has_checksum_0x175()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x175());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sas_sensor_0x175_175::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Sas_sensor_0x175_175)
  GOOGLE_DCHECK_NE(&from, this);
  const Sas_sensor_0x175_175* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sas_sensor_0x175_175>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Sas_sensor_0x175_175)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Sas_sensor_0x175_175)
    MergeFrom(*source);
  }
}

void Sas_sensor_0x175_175::MergeFrom(const Sas_sensor_0x175_175& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Sas_sensor_0x175_175)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      sas_raw_steerwheelangle_ = from.sas_raw_steerwheelangle_;
    }
    if (cached_has_bits & 0x00000002u) {
      sas_steerwheelrotspd_ = from.sas_steerwheelrotspd_;
    }
    if (cached_has_bits & 0x00000004u) {
      sas_trimmingsts_ = from.sas_trimmingsts_;
    }
    if (cached_has_bits & 0x00000008u) {
      sas_steerwheelrotspdstatus_ = from.sas_steerwheelrotspdstatus_;
    }
    if (cached_has_bits & 0x00000010u) {
      rolling_counter_0x175_ = from.rolling_counter_0x175_;
    }
    if (cached_has_bits & 0x00000020u) {
      sas_sasstscal_ = from.sas_sasstscal_;
    }
    if (cached_has_bits & 0x00000040u) {
      sas_raw_sasstssnsr_ = from.sas_raw_sasstssnsr_;
    }
    if (cached_has_bits & 0x00000080u) {
      sas_sasstssnsr_ = from.sas_sasstssnsr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      sas_steerwheelangle_ = from.sas_steerwheelangle_;
    }
    if (cached_has_bits & 0x00000200u) {
      checksum_0x175_ = from.checksum_0x175_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sas_sensor_0x175_175::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Sas_sensor_0x175_175)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sas_sensor_0x175_175::CopyFrom(const Sas_sensor_0x175_175& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Sas_sensor_0x175_175)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sas_sensor_0x175_175::IsInitialized() const {
  return true;
}

void Sas_sensor_0x175_175::Swap(Sas_sensor_0x175_175* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sas_sensor_0x175_175::InternalSwap(Sas_sensor_0x175_175* other) {
  std::swap(sas_raw_steerwheelangle_, other->sas_raw_steerwheelangle_);
  std::swap(sas_steerwheelrotspd_, other->sas_steerwheelrotspd_);
  std::swap(sas_trimmingsts_, other->sas_trimmingsts_);
  std::swap(sas_steerwheelrotspdstatus_, other->sas_steerwheelrotspdstatus_);
  std::swap(rolling_counter_0x175_, other->rolling_counter_0x175_);
  std::swap(sas_sasstscal_, other->sas_sasstscal_);
  std::swap(sas_raw_sasstssnsr_, other->sas_raw_sasstssnsr_);
  std::swap(sas_sasstssnsr_, other->sas_sasstssnsr_);
  std::swap(sas_steerwheelangle_, other->sas_steerwheelangle_);
  std::swap(checksum_0x175_, other->checksum_0x175_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sas_sensor_0x175_175::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sas_sensor_0x175_175

// optional double sas_raw_steerwheelangle = 1;
bool Sas_sensor_0x175_175::has_sas_raw_steerwheelangle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Sas_sensor_0x175_175::set_has_sas_raw_steerwheelangle() {
  _has_bits_[0] |= 0x00000001u;
}
void Sas_sensor_0x175_175::clear_has_sas_raw_steerwheelangle() {
  _has_bits_[0] &= ~0x00000001u;
}
void Sas_sensor_0x175_175::clear_sas_raw_steerwheelangle() {
  sas_raw_steerwheelangle_ = 0;
  clear_has_sas_raw_steerwheelangle();
}
double Sas_sensor_0x175_175::sas_raw_steerwheelangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.sas_raw_steerwheelangle)
  return sas_raw_steerwheelangle_;
}
void Sas_sensor_0x175_175::set_sas_raw_steerwheelangle(double value) {
  set_has_sas_raw_steerwheelangle();
  sas_raw_steerwheelangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.sas_raw_steerwheelangle)
}

// optional double sas_steerwheelrotspd = 2;
bool Sas_sensor_0x175_175::has_sas_steerwheelrotspd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Sas_sensor_0x175_175::set_has_sas_steerwheelrotspd() {
  _has_bits_[0] |= 0x00000002u;
}
void Sas_sensor_0x175_175::clear_has_sas_steerwheelrotspd() {
  _has_bits_[0] &= ~0x00000002u;
}
void Sas_sensor_0x175_175::clear_sas_steerwheelrotspd() {
  sas_steerwheelrotspd_ = 0;
  clear_has_sas_steerwheelrotspd();
}
double Sas_sensor_0x175_175::sas_steerwheelrotspd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.sas_steerwheelrotspd)
  return sas_steerwheelrotspd_;
}
void Sas_sensor_0x175_175::set_sas_steerwheelrotspd(double value) {
  set_has_sas_steerwheelrotspd();
  sas_steerwheelrotspd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.sas_steerwheelrotspd)
}

// optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_trimmingstsType sas_trimmingsts = 3;
bool Sas_sensor_0x175_175::has_sas_trimmingsts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Sas_sensor_0x175_175::set_has_sas_trimmingsts() {
  _has_bits_[0] |= 0x00000004u;
}
void Sas_sensor_0x175_175::clear_has_sas_trimmingsts() {
  _has_bits_[0] &= ~0x00000004u;
}
void Sas_sensor_0x175_175::clear_sas_trimmingsts() {
  sas_trimmingsts_ = 0;
  clear_has_sas_trimmingsts();
}
::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_trimmingstsType Sas_sensor_0x175_175::sas_trimmingsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.sas_trimmingsts)
  return static_cast< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_trimmingstsType >(sas_trimmingsts_);
}
void Sas_sensor_0x175_175::set_sas_trimmingsts(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_trimmingstsType value) {
  assert(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_trimmingstsType_IsValid(value));
  set_has_sas_trimmingsts();
  sas_trimmingsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.sas_trimmingsts)
}

// optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_steerwheelrotspdstatusType sas_steerwheelrotspdstatus = 4;
bool Sas_sensor_0x175_175::has_sas_steerwheelrotspdstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Sas_sensor_0x175_175::set_has_sas_steerwheelrotspdstatus() {
  _has_bits_[0] |= 0x00000008u;
}
void Sas_sensor_0x175_175::clear_has_sas_steerwheelrotspdstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
void Sas_sensor_0x175_175::clear_sas_steerwheelrotspdstatus() {
  sas_steerwheelrotspdstatus_ = 0;
  clear_has_sas_steerwheelrotspdstatus();
}
::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType Sas_sensor_0x175_175::sas_steerwheelrotspdstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.sas_steerwheelrotspdstatus)
  return static_cast< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType >(sas_steerwheelrotspdstatus_);
}
void Sas_sensor_0x175_175::set_sas_steerwheelrotspdstatus(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType value) {
  assert(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_steerwheelrotspdstatusType_IsValid(value));
  set_has_sas_steerwheelrotspdstatus();
  sas_steerwheelrotspdstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.sas_steerwheelrotspdstatus)
}

// optional int32 rolling_counter_0x175 = 5;
bool Sas_sensor_0x175_175::has_rolling_counter_0x175() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Sas_sensor_0x175_175::set_has_rolling_counter_0x175() {
  _has_bits_[0] |= 0x00000010u;
}
void Sas_sensor_0x175_175::clear_has_rolling_counter_0x175() {
  _has_bits_[0] &= ~0x00000010u;
}
void Sas_sensor_0x175_175::clear_rolling_counter_0x175() {
  rolling_counter_0x175_ = 0;
  clear_has_rolling_counter_0x175();
}
::google::protobuf::int32 Sas_sensor_0x175_175::rolling_counter_0x175() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.rolling_counter_0x175)
  return rolling_counter_0x175_;
}
void Sas_sensor_0x175_175::set_rolling_counter_0x175(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x175();
  rolling_counter_0x175_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.rolling_counter_0x175)
}

// optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_sasstscalType sas_sasstscal = 6;
bool Sas_sensor_0x175_175::has_sas_sasstscal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Sas_sensor_0x175_175::set_has_sas_sasstscal() {
  _has_bits_[0] |= 0x00000020u;
}
void Sas_sensor_0x175_175::clear_has_sas_sasstscal() {
  _has_bits_[0] &= ~0x00000020u;
}
void Sas_sensor_0x175_175::clear_sas_sasstscal() {
  sas_sasstscal_ = 0;
  clear_has_sas_sasstscal();
}
::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstscalType Sas_sensor_0x175_175::sas_sasstscal() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.sas_sasstscal)
  return static_cast< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstscalType >(sas_sasstscal_);
}
void Sas_sensor_0x175_175::set_sas_sasstscal(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstscalType value) {
  assert(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstscalType_IsValid(value));
  set_has_sas_sasstscal();
  sas_sasstscal_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.sas_sasstscal)
}

// optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_raw_sasstssnsrType sas_raw_sasstssnsr = 7;
bool Sas_sensor_0x175_175::has_sas_raw_sasstssnsr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Sas_sensor_0x175_175::set_has_sas_raw_sasstssnsr() {
  _has_bits_[0] |= 0x00000040u;
}
void Sas_sensor_0x175_175::clear_has_sas_raw_sasstssnsr() {
  _has_bits_[0] &= ~0x00000040u;
}
void Sas_sensor_0x175_175::clear_sas_raw_sasstssnsr() {
  sas_raw_sasstssnsr_ = 0;
  clear_has_sas_raw_sasstssnsr();
}
::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_raw_sasstssnsrType Sas_sensor_0x175_175::sas_raw_sasstssnsr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.sas_raw_sasstssnsr)
  return static_cast< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_raw_sasstssnsrType >(sas_raw_sasstssnsr_);
}
void Sas_sensor_0x175_175::set_sas_raw_sasstssnsr(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_raw_sasstssnsrType value) {
  assert(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_raw_sasstssnsrType_IsValid(value));
  set_has_sas_raw_sasstssnsr();
  sas_raw_sasstssnsr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.sas_raw_sasstssnsr)
}

// optional .jmc_auto.canbus.Sas_sensor_0x175_175.Sas_sasstssnsrType sas_sasstssnsr = 8;
bool Sas_sensor_0x175_175::has_sas_sasstssnsr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Sas_sensor_0x175_175::set_has_sas_sasstssnsr() {
  _has_bits_[0] |= 0x00000080u;
}
void Sas_sensor_0x175_175::clear_has_sas_sasstssnsr() {
  _has_bits_[0] &= ~0x00000080u;
}
void Sas_sensor_0x175_175::clear_sas_sasstssnsr() {
  sas_sasstssnsr_ = 0;
  clear_has_sas_sasstssnsr();
}
::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstssnsrType Sas_sensor_0x175_175::sas_sasstssnsr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.sas_sasstssnsr)
  return static_cast< ::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstssnsrType >(sas_sasstssnsr_);
}
void Sas_sensor_0x175_175::set_sas_sasstssnsr(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstssnsrType value) {
  assert(::jmc_auto::canbus::Sas_sensor_0x175_175_Sas_sasstssnsrType_IsValid(value));
  set_has_sas_sasstssnsr();
  sas_sasstssnsr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.sas_sasstssnsr)
}

// optional int32 checksum_0x175 = 9;
bool Sas_sensor_0x175_175::has_checksum_0x175() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Sas_sensor_0x175_175::set_has_checksum_0x175() {
  _has_bits_[0] |= 0x00000200u;
}
void Sas_sensor_0x175_175::clear_has_checksum_0x175() {
  _has_bits_[0] &= ~0x00000200u;
}
void Sas_sensor_0x175_175::clear_checksum_0x175() {
  checksum_0x175_ = 0;
  clear_has_checksum_0x175();
}
::google::protobuf::int32 Sas_sensor_0x175_175::checksum_0x175() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.checksum_0x175)
  return checksum_0x175_;
}
void Sas_sensor_0x175_175::set_checksum_0x175(::google::protobuf::int32 value) {
  set_has_checksum_0x175();
  checksum_0x175_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.checksum_0x175)
}

// optional double sas_steerwheelangle = 10;
bool Sas_sensor_0x175_175::has_sas_steerwheelangle() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Sas_sensor_0x175_175::set_has_sas_steerwheelangle() {
  _has_bits_[0] |= 0x00000100u;
}
void Sas_sensor_0x175_175::clear_has_sas_steerwheelangle() {
  _has_bits_[0] &= ~0x00000100u;
}
void Sas_sensor_0x175_175::clear_sas_steerwheelangle() {
  sas_steerwheelangle_ = 0;
  clear_has_sas_steerwheelangle();
}
double Sas_sensor_0x175_175::sas_steerwheelangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sas_sensor_0x175_175.sas_steerwheelangle)
  return sas_steerwheelangle_;
}
void Sas_sensor_0x175_175::set_sas_steerwheelangle(double value) {
  set_has_sas_steerwheelangle();
  sas_steerwheelangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sas_sensor_0x175_175.sas_steerwheelangle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gw_body_0x321_321::kBcmOutsidetempdigFieldNumber;
const int Gw_body_0x321_321::kBcmOutsidetempFieldNumber;
const int Gw_body_0x321_321::kBcmDrivingModeReqBcmFieldNumber;
const int Gw_body_0x321_321::kBcmPowermodeFieldNumber;
const int Gw_body_0x321_321::kBcmFrntfoglmpstsFieldNumber;
const int Gw_body_0x321_321::kBcmLowbeamstsFieldNumber;
const int Gw_body_0x321_321::kBcmHighbeamstsFieldNumber;
const int Gw_body_0x321_321::kBcmSsEnablestsFieldNumber;
const int Gw_body_0x321_321::kBcmReardefStatusFieldNumber;
const int Gw_body_0x321_321::kBcmBrakefluidstsFieldNumber;
const int Gw_body_0x321_321::kBcmAutolampstsFieldNumber;
const int Gw_body_0x321_321::kBcmPoslmpstsFieldNumber;
const int Gw_body_0x321_321::kBcmBgllumlvlsettingFieldNumber;
const int Gw_body_0x321_321::kBcmReverseGearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gw_body_0x321_321::Gw_body_0x321_321()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gw_body_0x321_321)
}
Gw_body_0x321_321::Gw_body_0x321_321(const Gw_body_0x321_321& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bcm_outsidetemp_, &from.bcm_outsidetemp_,
    reinterpret_cast<char*>(&bcm_reverse_gear_) -
    reinterpret_cast<char*>(&bcm_outsidetemp_) + sizeof(bcm_reverse_gear_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gw_body_0x321_321)
}

void Gw_body_0x321_321::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bcm_outsidetemp_, 0, reinterpret_cast<char*>(&bcm_reverse_gear_) -
    reinterpret_cast<char*>(&bcm_outsidetemp_) + sizeof(bcm_reverse_gear_));
}

Gw_body_0x321_321::~Gw_body_0x321_321() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gw_body_0x321_321)
  SharedDtor();
}

void Gw_body_0x321_321::SharedDtor() {
}

void Gw_body_0x321_321::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gw_body_0x321_321::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gw_body_0x321_321& Gw_body_0x321_321::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gw_body_0x321_321* Gw_body_0x321_321::New(::google::protobuf::Arena* arena) const {
  Gw_body_0x321_321* n = new Gw_body_0x321_321;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gw_body_0x321_321::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gw_body_0x321_321)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&bcm_outsidetemp_, 0, reinterpret_cast<char*>(&bcm_ss_enablests_) -
      reinterpret_cast<char*>(&bcm_outsidetemp_) + sizeof(bcm_ss_enablests_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&bcm_reardef_status_, 0, reinterpret_cast<char*>(&bcm_reverse_gear_) -
      reinterpret_cast<char*>(&bcm_reardef_status_) + sizeof(bcm_reverse_gear_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gw_body_0x321_321::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gw_body_0x321_321)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_outsidetempdigType bcm_outsidetempdig = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_body_0x321_321_Bcm_outsidetempdigType_IsValid(value)) {
            set_bcm_outsidetempdig(static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_outsidetempdigType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double bcm_outsidetemp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_bcm_outsidetemp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bcm_outsidetemp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_driving_mode_req_bcmType bcm_driving_mode_req_bcm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_IsValid(value)) {
            set_bcm_driving_mode_req_bcm(static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_driving_mode_req_bcmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_powermodeType bcm_powermode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_body_0x321_321_Bcm_powermodeType_IsValid(value)) {
            set_bcm_powermode(static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_powermodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_frntfoglmpstsType bcm_frntfoglmpsts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_body_0x321_321_Bcm_frntfoglmpstsType_IsValid(value)) {
            set_bcm_frntfoglmpsts(static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_frntfoglmpstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_lowbeamstsType bcm_lowbeamsts = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_body_0x321_321_Bcm_lowbeamstsType_IsValid(value)) {
            set_bcm_lowbeamsts(static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_lowbeamstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_highbeamstsType bcm_highbeamsts = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_body_0x321_321_Bcm_highbeamstsType_IsValid(value)) {
            set_bcm_highbeamsts(static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_highbeamstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_ss_enablestsType bcm_ss_enablests = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_body_0x321_321_Bcm_ss_enablestsType_IsValid(value)) {
            set_bcm_ss_enablests(static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_ss_enablestsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_reardef_statusType bcm_reardef_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reardef_statusType_IsValid(value)) {
            set_bcm_reardef_status(static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reardef_statusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_brakefluidstsType bcm_brakefluidsts = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_body_0x321_321_Bcm_brakefluidstsType_IsValid(value)) {
            set_bcm_brakefluidsts(static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_brakefluidstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_autolampstsType bcm_autolampsts = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_body_0x321_321_Bcm_autolampstsType_IsValid(value)) {
            set_bcm_autolampsts(static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_autolampstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_poslmpstsType bcm_poslmpsts = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_body_0x321_321_Bcm_poslmpstsType_IsValid(value)) {
            set_bcm_poslmpsts(static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_poslmpstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_bgllumlvlsettingType bcm_bgllumlvlsetting = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_body_0x321_321_Bcm_bgllumlvlsettingType_IsValid(value)) {
            set_bcm_bgllumlvlsetting(static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_bgllumlvlsettingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_reverse_gearType bcm_reverse_gear = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reverse_gearType_IsValid(value)) {
            set_bcm_reverse_gear(static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reverse_gearType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gw_body_0x321_321)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gw_body_0x321_321)
  return false;
#undef DO_
}

void Gw_body_0x321_321::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gw_body_0x321_321)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_outsidetempdigType bcm_outsidetempdig = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->bcm_outsidetempdig(), output);
  }

  // optional double bcm_outsidetemp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->bcm_outsidetemp(), output);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_driving_mode_req_bcmType bcm_driving_mode_req_bcm = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->bcm_driving_mode_req_bcm(), output);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_powermodeType bcm_powermode = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->bcm_powermode(), output);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_frntfoglmpstsType bcm_frntfoglmpsts = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->bcm_frntfoglmpsts(), output);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_lowbeamstsType bcm_lowbeamsts = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->bcm_lowbeamsts(), output);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_highbeamstsType bcm_highbeamsts = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->bcm_highbeamsts(), output);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_ss_enablestsType bcm_ss_enablests = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->bcm_ss_enablests(), output);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_reardef_statusType bcm_reardef_status = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->bcm_reardef_status(), output);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_brakefluidstsType bcm_brakefluidsts = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->bcm_brakefluidsts(), output);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_autolampstsType bcm_autolampsts = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->bcm_autolampsts(), output);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_poslmpstsType bcm_poslmpsts = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->bcm_poslmpsts(), output);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_bgllumlvlsettingType bcm_bgllumlvlsetting = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->bcm_bgllumlvlsetting(), output);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_reverse_gearType bcm_reverse_gear = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->bcm_reverse_gear(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gw_body_0x321_321)
}

::google::protobuf::uint8* Gw_body_0x321_321::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gw_body_0x321_321)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_outsidetempdigType bcm_outsidetempdig = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->bcm_outsidetempdig(), target);
  }

  // optional double bcm_outsidetemp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->bcm_outsidetemp(), target);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_driving_mode_req_bcmType bcm_driving_mode_req_bcm = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->bcm_driving_mode_req_bcm(), target);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_powermodeType bcm_powermode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->bcm_powermode(), target);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_frntfoglmpstsType bcm_frntfoglmpsts = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->bcm_frntfoglmpsts(), target);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_lowbeamstsType bcm_lowbeamsts = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->bcm_lowbeamsts(), target);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_highbeamstsType bcm_highbeamsts = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->bcm_highbeamsts(), target);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_ss_enablestsType bcm_ss_enablests = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->bcm_ss_enablests(), target);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_reardef_statusType bcm_reardef_status = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->bcm_reardef_status(), target);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_brakefluidstsType bcm_brakefluidsts = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->bcm_brakefluidsts(), target);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_autolampstsType bcm_autolampsts = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->bcm_autolampsts(), target);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_poslmpstsType bcm_poslmpsts = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->bcm_poslmpsts(), target);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_bgllumlvlsettingType bcm_bgllumlvlsetting = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->bcm_bgllumlvlsetting(), target);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_reverse_gearType bcm_reverse_gear = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->bcm_reverse_gear(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gw_body_0x321_321)
  return target;
}

size_t Gw_body_0x321_321::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gw_body_0x321_321)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double bcm_outsidetemp = 2;
    if (has_bcm_outsidetemp()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_outsidetempdigType bcm_outsidetempdig = 1;
    if (has_bcm_outsidetempdig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_outsidetempdig());
    }

    // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_driving_mode_req_bcmType bcm_driving_mode_req_bcm = 3;
    if (has_bcm_driving_mode_req_bcm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_driving_mode_req_bcm());
    }

    // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_powermodeType bcm_powermode = 4;
    if (has_bcm_powermode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_powermode());
    }

    // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_frntfoglmpstsType bcm_frntfoglmpsts = 5;
    if (has_bcm_frntfoglmpsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_frntfoglmpsts());
    }

    // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_lowbeamstsType bcm_lowbeamsts = 6;
    if (has_bcm_lowbeamsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_lowbeamsts());
    }

    // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_highbeamstsType bcm_highbeamsts = 7;
    if (has_bcm_highbeamsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_highbeamsts());
    }

    // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_ss_enablestsType bcm_ss_enablests = 8;
    if (has_bcm_ss_enablests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_ss_enablests());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_reardef_statusType bcm_reardef_status = 9;
    if (has_bcm_reardef_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_reardef_status());
    }

    // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_brakefluidstsType bcm_brakefluidsts = 10;
    if (has_bcm_brakefluidsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_brakefluidsts());
    }

    // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_autolampstsType bcm_autolampsts = 11;
    if (has_bcm_autolampsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_autolampsts());
    }

    // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_poslmpstsType bcm_poslmpsts = 12;
    if (has_bcm_poslmpsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_poslmpsts());
    }

    // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_bgllumlvlsettingType bcm_bgllumlvlsetting = 13;
    if (has_bcm_bgllumlvlsetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_bgllumlvlsetting());
    }

    // optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_reverse_gearType bcm_reverse_gear = 14;
    if (has_bcm_reverse_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bcm_reverse_gear());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gw_body_0x321_321::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gw_body_0x321_321)
  GOOGLE_DCHECK_NE(&from, this);
  const Gw_body_0x321_321* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gw_body_0x321_321>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gw_body_0x321_321)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gw_body_0x321_321)
    MergeFrom(*source);
  }
}

void Gw_body_0x321_321::MergeFrom(const Gw_body_0x321_321& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gw_body_0x321_321)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      bcm_outsidetemp_ = from.bcm_outsidetemp_;
    }
    if (cached_has_bits & 0x00000002u) {
      bcm_outsidetempdig_ = from.bcm_outsidetempdig_;
    }
    if (cached_has_bits & 0x00000004u) {
      bcm_driving_mode_req_bcm_ = from.bcm_driving_mode_req_bcm_;
    }
    if (cached_has_bits & 0x00000008u) {
      bcm_powermode_ = from.bcm_powermode_;
    }
    if (cached_has_bits & 0x00000010u) {
      bcm_frntfoglmpsts_ = from.bcm_frntfoglmpsts_;
    }
    if (cached_has_bits & 0x00000020u) {
      bcm_lowbeamsts_ = from.bcm_lowbeamsts_;
    }
    if (cached_has_bits & 0x00000040u) {
      bcm_highbeamsts_ = from.bcm_highbeamsts_;
    }
    if (cached_has_bits & 0x00000080u) {
      bcm_ss_enablests_ = from.bcm_ss_enablests_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      bcm_reardef_status_ = from.bcm_reardef_status_;
    }
    if (cached_has_bits & 0x00000200u) {
      bcm_brakefluidsts_ = from.bcm_brakefluidsts_;
    }
    if (cached_has_bits & 0x00000400u) {
      bcm_autolampsts_ = from.bcm_autolampsts_;
    }
    if (cached_has_bits & 0x00000800u) {
      bcm_poslmpsts_ = from.bcm_poslmpsts_;
    }
    if (cached_has_bits & 0x00001000u) {
      bcm_bgllumlvlsetting_ = from.bcm_bgllumlvlsetting_;
    }
    if (cached_has_bits & 0x00002000u) {
      bcm_reverse_gear_ = from.bcm_reverse_gear_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gw_body_0x321_321::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gw_body_0x321_321)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gw_body_0x321_321::CopyFrom(const Gw_body_0x321_321& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gw_body_0x321_321)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gw_body_0x321_321::IsInitialized() const {
  return true;
}

void Gw_body_0x321_321::Swap(Gw_body_0x321_321* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gw_body_0x321_321::InternalSwap(Gw_body_0x321_321* other) {
  std::swap(bcm_outsidetemp_, other->bcm_outsidetemp_);
  std::swap(bcm_outsidetempdig_, other->bcm_outsidetempdig_);
  std::swap(bcm_driving_mode_req_bcm_, other->bcm_driving_mode_req_bcm_);
  std::swap(bcm_powermode_, other->bcm_powermode_);
  std::swap(bcm_frntfoglmpsts_, other->bcm_frntfoglmpsts_);
  std::swap(bcm_lowbeamsts_, other->bcm_lowbeamsts_);
  std::swap(bcm_highbeamsts_, other->bcm_highbeamsts_);
  std::swap(bcm_ss_enablests_, other->bcm_ss_enablests_);
  std::swap(bcm_reardef_status_, other->bcm_reardef_status_);
  std::swap(bcm_brakefluidsts_, other->bcm_brakefluidsts_);
  std::swap(bcm_autolampsts_, other->bcm_autolampsts_);
  std::swap(bcm_poslmpsts_, other->bcm_poslmpsts_);
  std::swap(bcm_bgllumlvlsetting_, other->bcm_bgllumlvlsetting_);
  std::swap(bcm_reverse_gear_, other->bcm_reverse_gear_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gw_body_0x321_321::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gw_body_0x321_321

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_outsidetempdigType bcm_outsidetempdig = 1;
bool Gw_body_0x321_321::has_bcm_outsidetempdig() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gw_body_0x321_321::set_has_bcm_outsidetempdig() {
  _has_bits_[0] |= 0x00000002u;
}
void Gw_body_0x321_321::clear_has_bcm_outsidetempdig() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gw_body_0x321_321::clear_bcm_outsidetempdig() {
  bcm_outsidetempdig_ = 0;
  clear_has_bcm_outsidetempdig();
}
::jmc_auto::canbus::Gw_body_0x321_321_Bcm_outsidetempdigType Gw_body_0x321_321::bcm_outsidetempdig() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_outsidetempdig)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_outsidetempdigType >(bcm_outsidetempdig_);
}
void Gw_body_0x321_321::set_bcm_outsidetempdig(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_outsidetempdigType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_outsidetempdigType_IsValid(value));
  set_has_bcm_outsidetempdig();
  bcm_outsidetempdig_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_outsidetempdig)
}

// optional double bcm_outsidetemp = 2;
bool Gw_body_0x321_321::has_bcm_outsidetemp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gw_body_0x321_321::set_has_bcm_outsidetemp() {
  _has_bits_[0] |= 0x00000001u;
}
void Gw_body_0x321_321::clear_has_bcm_outsidetemp() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gw_body_0x321_321::clear_bcm_outsidetemp() {
  bcm_outsidetemp_ = 0;
  clear_has_bcm_outsidetemp();
}
double Gw_body_0x321_321::bcm_outsidetemp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_outsidetemp)
  return bcm_outsidetemp_;
}
void Gw_body_0x321_321::set_bcm_outsidetemp(double value) {
  set_has_bcm_outsidetemp();
  bcm_outsidetemp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_outsidetemp)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_driving_mode_req_bcmType bcm_driving_mode_req_bcm = 3;
bool Gw_body_0x321_321::has_bcm_driving_mode_req_bcm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gw_body_0x321_321::set_has_bcm_driving_mode_req_bcm() {
  _has_bits_[0] |= 0x00000004u;
}
void Gw_body_0x321_321::clear_has_bcm_driving_mode_req_bcm() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gw_body_0x321_321::clear_bcm_driving_mode_req_bcm() {
  bcm_driving_mode_req_bcm_ = 0;
  clear_has_bcm_driving_mode_req_bcm();
}
::jmc_auto::canbus::Gw_body_0x321_321_Bcm_driving_mode_req_bcmType Gw_body_0x321_321::bcm_driving_mode_req_bcm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_driving_mode_req_bcm)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_driving_mode_req_bcmType >(bcm_driving_mode_req_bcm_);
}
void Gw_body_0x321_321::set_bcm_driving_mode_req_bcm(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_driving_mode_req_bcmType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_driving_mode_req_bcmType_IsValid(value));
  set_has_bcm_driving_mode_req_bcm();
  bcm_driving_mode_req_bcm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_driving_mode_req_bcm)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_powermodeType bcm_powermode = 4;
bool Gw_body_0x321_321::has_bcm_powermode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gw_body_0x321_321::set_has_bcm_powermode() {
  _has_bits_[0] |= 0x00000008u;
}
void Gw_body_0x321_321::clear_has_bcm_powermode() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gw_body_0x321_321::clear_bcm_powermode() {
  bcm_powermode_ = 0;
  clear_has_bcm_powermode();
}
::jmc_auto::canbus::Gw_body_0x321_321_Bcm_powermodeType Gw_body_0x321_321::bcm_powermode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_powermode)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_powermodeType >(bcm_powermode_);
}
void Gw_body_0x321_321::set_bcm_powermode(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_powermodeType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_powermodeType_IsValid(value));
  set_has_bcm_powermode();
  bcm_powermode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_powermode)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_frntfoglmpstsType bcm_frntfoglmpsts = 5;
bool Gw_body_0x321_321::has_bcm_frntfoglmpsts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gw_body_0x321_321::set_has_bcm_frntfoglmpsts() {
  _has_bits_[0] |= 0x00000010u;
}
void Gw_body_0x321_321::clear_has_bcm_frntfoglmpsts() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gw_body_0x321_321::clear_bcm_frntfoglmpsts() {
  bcm_frntfoglmpsts_ = 0;
  clear_has_bcm_frntfoglmpsts();
}
::jmc_auto::canbus::Gw_body_0x321_321_Bcm_frntfoglmpstsType Gw_body_0x321_321::bcm_frntfoglmpsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_frntfoglmpsts)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_frntfoglmpstsType >(bcm_frntfoglmpsts_);
}
void Gw_body_0x321_321::set_bcm_frntfoglmpsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_frntfoglmpstsType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_frntfoglmpstsType_IsValid(value));
  set_has_bcm_frntfoglmpsts();
  bcm_frntfoglmpsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_frntfoglmpsts)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_lowbeamstsType bcm_lowbeamsts = 6;
bool Gw_body_0x321_321::has_bcm_lowbeamsts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gw_body_0x321_321::set_has_bcm_lowbeamsts() {
  _has_bits_[0] |= 0x00000020u;
}
void Gw_body_0x321_321::clear_has_bcm_lowbeamsts() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gw_body_0x321_321::clear_bcm_lowbeamsts() {
  bcm_lowbeamsts_ = 0;
  clear_has_bcm_lowbeamsts();
}
::jmc_auto::canbus::Gw_body_0x321_321_Bcm_lowbeamstsType Gw_body_0x321_321::bcm_lowbeamsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_lowbeamsts)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_lowbeamstsType >(bcm_lowbeamsts_);
}
void Gw_body_0x321_321::set_bcm_lowbeamsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_lowbeamstsType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_lowbeamstsType_IsValid(value));
  set_has_bcm_lowbeamsts();
  bcm_lowbeamsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_lowbeamsts)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_highbeamstsType bcm_highbeamsts = 7;
bool Gw_body_0x321_321::has_bcm_highbeamsts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Gw_body_0x321_321::set_has_bcm_highbeamsts() {
  _has_bits_[0] |= 0x00000040u;
}
void Gw_body_0x321_321::clear_has_bcm_highbeamsts() {
  _has_bits_[0] &= ~0x00000040u;
}
void Gw_body_0x321_321::clear_bcm_highbeamsts() {
  bcm_highbeamsts_ = 0;
  clear_has_bcm_highbeamsts();
}
::jmc_auto::canbus::Gw_body_0x321_321_Bcm_highbeamstsType Gw_body_0x321_321::bcm_highbeamsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_highbeamsts)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_highbeamstsType >(bcm_highbeamsts_);
}
void Gw_body_0x321_321::set_bcm_highbeamsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_highbeamstsType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_highbeamstsType_IsValid(value));
  set_has_bcm_highbeamsts();
  bcm_highbeamsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_highbeamsts)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_ss_enablestsType bcm_ss_enablests = 8;
bool Gw_body_0x321_321::has_bcm_ss_enablests() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Gw_body_0x321_321::set_has_bcm_ss_enablests() {
  _has_bits_[0] |= 0x00000080u;
}
void Gw_body_0x321_321::clear_has_bcm_ss_enablests() {
  _has_bits_[0] &= ~0x00000080u;
}
void Gw_body_0x321_321::clear_bcm_ss_enablests() {
  bcm_ss_enablests_ = 0;
  clear_has_bcm_ss_enablests();
}
::jmc_auto::canbus::Gw_body_0x321_321_Bcm_ss_enablestsType Gw_body_0x321_321::bcm_ss_enablests() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_ss_enablests)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_ss_enablestsType >(bcm_ss_enablests_);
}
void Gw_body_0x321_321::set_bcm_ss_enablests(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_ss_enablestsType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_ss_enablestsType_IsValid(value));
  set_has_bcm_ss_enablests();
  bcm_ss_enablests_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_ss_enablests)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_reardef_statusType bcm_reardef_status = 9;
bool Gw_body_0x321_321::has_bcm_reardef_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Gw_body_0x321_321::set_has_bcm_reardef_status() {
  _has_bits_[0] |= 0x00000100u;
}
void Gw_body_0x321_321::clear_has_bcm_reardef_status() {
  _has_bits_[0] &= ~0x00000100u;
}
void Gw_body_0x321_321::clear_bcm_reardef_status() {
  bcm_reardef_status_ = 0;
  clear_has_bcm_reardef_status();
}
::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reardef_statusType Gw_body_0x321_321::bcm_reardef_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_reardef_status)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reardef_statusType >(bcm_reardef_status_);
}
void Gw_body_0x321_321::set_bcm_reardef_status(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reardef_statusType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reardef_statusType_IsValid(value));
  set_has_bcm_reardef_status();
  bcm_reardef_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_reardef_status)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_brakefluidstsType bcm_brakefluidsts = 10;
bool Gw_body_0x321_321::has_bcm_brakefluidsts() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Gw_body_0x321_321::set_has_bcm_brakefluidsts() {
  _has_bits_[0] |= 0x00000200u;
}
void Gw_body_0x321_321::clear_has_bcm_brakefluidsts() {
  _has_bits_[0] &= ~0x00000200u;
}
void Gw_body_0x321_321::clear_bcm_brakefluidsts() {
  bcm_brakefluidsts_ = 0;
  clear_has_bcm_brakefluidsts();
}
::jmc_auto::canbus::Gw_body_0x321_321_Bcm_brakefluidstsType Gw_body_0x321_321::bcm_brakefluidsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_brakefluidsts)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_brakefluidstsType >(bcm_brakefluidsts_);
}
void Gw_body_0x321_321::set_bcm_brakefluidsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_brakefluidstsType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_brakefluidstsType_IsValid(value));
  set_has_bcm_brakefluidsts();
  bcm_brakefluidsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_brakefluidsts)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_autolampstsType bcm_autolampsts = 11;
bool Gw_body_0x321_321::has_bcm_autolampsts() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Gw_body_0x321_321::set_has_bcm_autolampsts() {
  _has_bits_[0] |= 0x00000400u;
}
void Gw_body_0x321_321::clear_has_bcm_autolampsts() {
  _has_bits_[0] &= ~0x00000400u;
}
void Gw_body_0x321_321::clear_bcm_autolampsts() {
  bcm_autolampsts_ = 0;
  clear_has_bcm_autolampsts();
}
::jmc_auto::canbus::Gw_body_0x321_321_Bcm_autolampstsType Gw_body_0x321_321::bcm_autolampsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_autolampsts)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_autolampstsType >(bcm_autolampsts_);
}
void Gw_body_0x321_321::set_bcm_autolampsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_autolampstsType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_autolampstsType_IsValid(value));
  set_has_bcm_autolampsts();
  bcm_autolampsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_autolampsts)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_poslmpstsType bcm_poslmpsts = 12;
bool Gw_body_0x321_321::has_bcm_poslmpsts() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Gw_body_0x321_321::set_has_bcm_poslmpsts() {
  _has_bits_[0] |= 0x00000800u;
}
void Gw_body_0x321_321::clear_has_bcm_poslmpsts() {
  _has_bits_[0] &= ~0x00000800u;
}
void Gw_body_0x321_321::clear_bcm_poslmpsts() {
  bcm_poslmpsts_ = 0;
  clear_has_bcm_poslmpsts();
}
::jmc_auto::canbus::Gw_body_0x321_321_Bcm_poslmpstsType Gw_body_0x321_321::bcm_poslmpsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_poslmpsts)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_poslmpstsType >(bcm_poslmpsts_);
}
void Gw_body_0x321_321::set_bcm_poslmpsts(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_poslmpstsType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_poslmpstsType_IsValid(value));
  set_has_bcm_poslmpsts();
  bcm_poslmpsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_poslmpsts)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_bgllumlvlsettingType bcm_bgllumlvlsetting = 13;
bool Gw_body_0x321_321::has_bcm_bgllumlvlsetting() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Gw_body_0x321_321::set_has_bcm_bgllumlvlsetting() {
  _has_bits_[0] |= 0x00001000u;
}
void Gw_body_0x321_321::clear_has_bcm_bgllumlvlsetting() {
  _has_bits_[0] &= ~0x00001000u;
}
void Gw_body_0x321_321::clear_bcm_bgllumlvlsetting() {
  bcm_bgllumlvlsetting_ = 0;
  clear_has_bcm_bgllumlvlsetting();
}
::jmc_auto::canbus::Gw_body_0x321_321_Bcm_bgllumlvlsettingType Gw_body_0x321_321::bcm_bgllumlvlsetting() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_bgllumlvlsetting)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_bgllumlvlsettingType >(bcm_bgllumlvlsetting_);
}
void Gw_body_0x321_321::set_bcm_bgllumlvlsetting(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_bgllumlvlsettingType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_bgllumlvlsettingType_IsValid(value));
  set_has_bcm_bgllumlvlsetting();
  bcm_bgllumlvlsetting_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_bgllumlvlsetting)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321.Bcm_reverse_gearType bcm_reverse_gear = 14;
bool Gw_body_0x321_321::has_bcm_reverse_gear() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Gw_body_0x321_321::set_has_bcm_reverse_gear() {
  _has_bits_[0] |= 0x00002000u;
}
void Gw_body_0x321_321::clear_has_bcm_reverse_gear() {
  _has_bits_[0] &= ~0x00002000u;
}
void Gw_body_0x321_321::clear_bcm_reverse_gear() {
  bcm_reverse_gear_ = 0;
  clear_has_bcm_reverse_gear();
}
::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reverse_gearType Gw_body_0x321_321::bcm_reverse_gear() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_body_0x321_321.bcm_reverse_gear)
  return static_cast< ::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reverse_gearType >(bcm_reverse_gear_);
}
void Gw_body_0x321_321::set_bcm_reverse_gear(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reverse_gearType value) {
  assert(::jmc_auto::canbus::Gw_body_0x321_321_Bcm_reverse_gearType_IsValid(value));
  set_has_bcm_reverse_gear();
  bcm_reverse_gear_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_body_0x321_321.bcm_reverse_gear)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ipm_leftline_0x278_278::kIpmLeftlineDyFieldNumber;
const int Ipm_leftline_0x278_278::kIpmLeftlineDxLookheadFieldNumber;
const int Ipm_leftline_0x278_278::kIpmLeftlineHorCurveFieldNumber;
const int Ipm_leftline_0x278_278::kIpmLeftlineYawangleFieldNumber;
const int Ipm_leftline_0x278_278::kIpmLedtlineDxStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ipm_leftline_0x278_278::Ipm_leftline_0x278_278()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Ipm_leftline_0x278_278)
}
Ipm_leftline_0x278_278::Ipm_leftline_0x278_278(const Ipm_leftline_0x278_278& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ipm_leftline_dy_, &from.ipm_leftline_dy_,
    reinterpret_cast<char*>(&ipm_ledtline_dx_start_) -
    reinterpret_cast<char*>(&ipm_leftline_dy_) + sizeof(ipm_ledtline_dx_start_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Ipm_leftline_0x278_278)
}

void Ipm_leftline_0x278_278::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ipm_leftline_dy_, 0, reinterpret_cast<char*>(&ipm_ledtline_dx_start_) -
    reinterpret_cast<char*>(&ipm_leftline_dy_) + sizeof(ipm_ledtline_dx_start_));
}

Ipm_leftline_0x278_278::~Ipm_leftline_0x278_278() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Ipm_leftline_0x278_278)
  SharedDtor();
}

void Ipm_leftline_0x278_278::SharedDtor() {
}

void Ipm_leftline_0x278_278::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ipm_leftline_0x278_278::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ipm_leftline_0x278_278& Ipm_leftline_0x278_278::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ipm_leftline_0x278_278* Ipm_leftline_0x278_278::New(::google::protobuf::Arena* arena) const {
  Ipm_leftline_0x278_278* n = new Ipm_leftline_0x278_278;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ipm_leftline_0x278_278::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Ipm_leftline_0x278_278)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&ipm_leftline_dy_, 0, reinterpret_cast<char*>(&ipm_ledtline_dx_start_) -
      reinterpret_cast<char*>(&ipm_leftline_dy_) + sizeof(ipm_ledtline_dx_start_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ipm_leftline_0x278_278::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Ipm_leftline_0x278_278)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ipm_leftline_dy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_ipm_leftline_dy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipm_leftline_dy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipm_leftline_dx_lookhead = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_ipm_leftline_dx_lookhead();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipm_leftline_dx_lookhead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipm_leftline_hor_curve = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_ipm_leftline_hor_curve();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipm_leftline_hor_curve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipm_leftline_yawangle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_ipm_leftline_yawangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipm_leftline_yawangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipm_ledtline_dx_start = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_ipm_ledtline_dx_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipm_ledtline_dx_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Ipm_leftline_0x278_278)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Ipm_leftline_0x278_278)
  return false;
#undef DO_
}

void Ipm_leftline_0x278_278::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Ipm_leftline_0x278_278)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ipm_leftline_dy = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ipm_leftline_dy(), output);
  }

  // optional double ipm_leftline_dx_lookhead = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ipm_leftline_dx_lookhead(), output);
  }

  // optional double ipm_leftline_hor_curve = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ipm_leftline_hor_curve(), output);
  }

  // optional double ipm_leftline_yawangle = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ipm_leftline_yawangle(), output);
  }

  // optional double ipm_ledtline_dx_start = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ipm_ledtline_dx_start(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Ipm_leftline_0x278_278)
}

::google::protobuf::uint8* Ipm_leftline_0x278_278::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Ipm_leftline_0x278_278)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ipm_leftline_dy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ipm_leftline_dy(), target);
  }

  // optional double ipm_leftline_dx_lookhead = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ipm_leftline_dx_lookhead(), target);
  }

  // optional double ipm_leftline_hor_curve = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ipm_leftline_hor_curve(), target);
  }

  // optional double ipm_leftline_yawangle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ipm_leftline_yawangle(), target);
  }

  // optional double ipm_ledtline_dx_start = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ipm_ledtline_dx_start(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Ipm_leftline_0x278_278)
  return target;
}

size_t Ipm_leftline_0x278_278::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Ipm_leftline_0x278_278)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional double ipm_leftline_dy = 1;
    if (has_ipm_leftline_dy()) {
      total_size += 1 + 8;
    }

    // optional double ipm_leftline_dx_lookhead = 2;
    if (has_ipm_leftline_dx_lookhead()) {
      total_size += 1 + 8;
    }

    // optional double ipm_leftline_hor_curve = 3;
    if (has_ipm_leftline_hor_curve()) {
      total_size += 1 + 8;
    }

    // optional double ipm_leftline_yawangle = 4;
    if (has_ipm_leftline_yawangle()) {
      total_size += 1 + 8;
    }

    // optional double ipm_ledtline_dx_start = 5;
    if (has_ipm_ledtline_dx_start()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ipm_leftline_0x278_278::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Ipm_leftline_0x278_278)
  GOOGLE_DCHECK_NE(&from, this);
  const Ipm_leftline_0x278_278* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ipm_leftline_0x278_278>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Ipm_leftline_0x278_278)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Ipm_leftline_0x278_278)
    MergeFrom(*source);
  }
}

void Ipm_leftline_0x278_278::MergeFrom(const Ipm_leftline_0x278_278& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Ipm_leftline_0x278_278)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      ipm_leftline_dy_ = from.ipm_leftline_dy_;
    }
    if (cached_has_bits & 0x00000002u) {
      ipm_leftline_dx_lookhead_ = from.ipm_leftline_dx_lookhead_;
    }
    if (cached_has_bits & 0x00000004u) {
      ipm_leftline_hor_curve_ = from.ipm_leftline_hor_curve_;
    }
    if (cached_has_bits & 0x00000008u) {
      ipm_leftline_yawangle_ = from.ipm_leftline_yawangle_;
    }
    if (cached_has_bits & 0x00000010u) {
      ipm_ledtline_dx_start_ = from.ipm_ledtline_dx_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ipm_leftline_0x278_278::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Ipm_leftline_0x278_278)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ipm_leftline_0x278_278::CopyFrom(const Ipm_leftline_0x278_278& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Ipm_leftline_0x278_278)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ipm_leftline_0x278_278::IsInitialized() const {
  return true;
}

void Ipm_leftline_0x278_278::Swap(Ipm_leftline_0x278_278* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ipm_leftline_0x278_278::InternalSwap(Ipm_leftline_0x278_278* other) {
  std::swap(ipm_leftline_dy_, other->ipm_leftline_dy_);
  std::swap(ipm_leftline_dx_lookhead_, other->ipm_leftline_dx_lookhead_);
  std::swap(ipm_leftline_hor_curve_, other->ipm_leftline_hor_curve_);
  std::swap(ipm_leftline_yawangle_, other->ipm_leftline_yawangle_);
  std::swap(ipm_ledtline_dx_start_, other->ipm_ledtline_dx_start_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ipm_leftline_0x278_278::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ipm_leftline_0x278_278

// optional double ipm_leftline_dy = 1;
bool Ipm_leftline_0x278_278::has_ipm_leftline_dy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ipm_leftline_0x278_278::set_has_ipm_leftline_dy() {
  _has_bits_[0] |= 0x00000001u;
}
void Ipm_leftline_0x278_278::clear_has_ipm_leftline_dy() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ipm_leftline_0x278_278::clear_ipm_leftline_dy() {
  ipm_leftline_dy_ = 0;
  clear_has_ipm_leftline_dy();
}
double Ipm_leftline_0x278_278::ipm_leftline_dy() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_leftline_dy)
  return ipm_leftline_dy_;
}
void Ipm_leftline_0x278_278::set_ipm_leftline_dy(double value) {
  set_has_ipm_leftline_dy();
  ipm_leftline_dy_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_leftline_dy)
}

// optional double ipm_leftline_dx_lookhead = 2;
bool Ipm_leftline_0x278_278::has_ipm_leftline_dx_lookhead() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ipm_leftline_0x278_278::set_has_ipm_leftline_dx_lookhead() {
  _has_bits_[0] |= 0x00000002u;
}
void Ipm_leftline_0x278_278::clear_has_ipm_leftline_dx_lookhead() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ipm_leftline_0x278_278::clear_ipm_leftline_dx_lookhead() {
  ipm_leftline_dx_lookhead_ = 0;
  clear_has_ipm_leftline_dx_lookhead();
}
double Ipm_leftline_0x278_278::ipm_leftline_dx_lookhead() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_leftline_dx_lookhead)
  return ipm_leftline_dx_lookhead_;
}
void Ipm_leftline_0x278_278::set_ipm_leftline_dx_lookhead(double value) {
  set_has_ipm_leftline_dx_lookhead();
  ipm_leftline_dx_lookhead_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_leftline_dx_lookhead)
}

// optional double ipm_leftline_hor_curve = 3;
bool Ipm_leftline_0x278_278::has_ipm_leftline_hor_curve() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ipm_leftline_0x278_278::set_has_ipm_leftline_hor_curve() {
  _has_bits_[0] |= 0x00000004u;
}
void Ipm_leftline_0x278_278::clear_has_ipm_leftline_hor_curve() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ipm_leftline_0x278_278::clear_ipm_leftline_hor_curve() {
  ipm_leftline_hor_curve_ = 0;
  clear_has_ipm_leftline_hor_curve();
}
double Ipm_leftline_0x278_278::ipm_leftline_hor_curve() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_leftline_hor_curve)
  return ipm_leftline_hor_curve_;
}
void Ipm_leftline_0x278_278::set_ipm_leftline_hor_curve(double value) {
  set_has_ipm_leftline_hor_curve();
  ipm_leftline_hor_curve_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_leftline_hor_curve)
}

// optional double ipm_leftline_yawangle = 4;
bool Ipm_leftline_0x278_278::has_ipm_leftline_yawangle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Ipm_leftline_0x278_278::set_has_ipm_leftline_yawangle() {
  _has_bits_[0] |= 0x00000008u;
}
void Ipm_leftline_0x278_278::clear_has_ipm_leftline_yawangle() {
  _has_bits_[0] &= ~0x00000008u;
}
void Ipm_leftline_0x278_278::clear_ipm_leftline_yawangle() {
  ipm_leftline_yawangle_ = 0;
  clear_has_ipm_leftline_yawangle();
}
double Ipm_leftline_0x278_278::ipm_leftline_yawangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_leftline_yawangle)
  return ipm_leftline_yawangle_;
}
void Ipm_leftline_0x278_278::set_ipm_leftline_yawangle(double value) {
  set_has_ipm_leftline_yawangle();
  ipm_leftline_yawangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_leftline_yawangle)
}

// optional double ipm_ledtline_dx_start = 5;
bool Ipm_leftline_0x278_278::has_ipm_ledtline_dx_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Ipm_leftline_0x278_278::set_has_ipm_ledtline_dx_start() {
  _has_bits_[0] |= 0x00000010u;
}
void Ipm_leftline_0x278_278::clear_has_ipm_ledtline_dx_start() {
  _has_bits_[0] &= ~0x00000010u;
}
void Ipm_leftline_0x278_278::clear_ipm_ledtline_dx_start() {
  ipm_ledtline_dx_start_ = 0;
  clear_has_ipm_ledtline_dx_start();
}
double Ipm_leftline_0x278_278::ipm_ledtline_dx_start() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_ledtline_dx_start)
  return ipm_ledtline_dx_start_;
}
void Ipm_leftline_0x278_278::set_ipm_ledtline_dx_start(double value) {
  set_has_ipm_ledtline_dx_start();
  ipm_ledtline_dx_start_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_leftline_0x278_278.ipm_ledtline_dx_start)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gw_ems_engstatus_0x142_142::kEmsIgnitiontimingFieldNumber;
const int Gw_ems_engstatus_0x142_142::kEmsSetlengidlespeedFieldNumber;
const int Gw_ems_engstatus_0x142_142::kEmsEngoperationstatusFieldNumber;
const int Gw_ems_engstatus_0x142_142::kEmsAircompressorstatusFieldNumber;
const int Gw_ems_engstatus_0x142_142::kEmsThrottleplatepositionerrorFieldNumber;
const int Gw_ems_engstatus_0x142_142::kEmsStartstopmessageFieldNumber;
const int Gw_ems_engstatus_0x142_142::kDcmEmsRollingcounter0X142FieldNumber;
const int Gw_ems_engstatus_0x142_142::kEmsIgnswtstsFieldNumber;
const int Gw_ems_engstatus_0x142_142::kDcmEmsChecksum0X142FieldNumber;
const int Gw_ems_engstatus_0x142_142::kEmsEngthrottlepositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gw_ems_engstatus_0x142_142::Gw_ems_engstatus_0x142_142()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
}
Gw_ems_engstatus_0x142_142::Gw_ems_engstatus_0x142_142(const Gw_ems_engstatus_0x142_142& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ems_setlengidlespeed_, &from.ems_setlengidlespeed_,
    reinterpret_cast<char*>(&ems_engthrottleposition_) -
    reinterpret_cast<char*>(&ems_setlengidlespeed_) + sizeof(ems_engthrottleposition_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
}

void Gw_ems_engstatus_0x142_142::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ems_setlengidlespeed_, 0, reinterpret_cast<char*>(&ems_engthrottleposition_) -
    reinterpret_cast<char*>(&ems_setlengidlespeed_) + sizeof(ems_engthrottleposition_));
}

Gw_ems_engstatus_0x142_142::~Gw_ems_engstatus_0x142_142() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
  SharedDtor();
}

void Gw_ems_engstatus_0x142_142::SharedDtor() {
}

void Gw_ems_engstatus_0x142_142::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gw_ems_engstatus_0x142_142::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gw_ems_engstatus_0x142_142& Gw_ems_engstatus_0x142_142::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gw_ems_engstatus_0x142_142* Gw_ems_engstatus_0x142_142::New(::google::protobuf::Arena* arena) const {
  Gw_ems_engstatus_0x142_142* n = new Gw_ems_engstatus_0x142_142;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gw_ems_engstatus_0x142_142::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&ems_setlengidlespeed_, 0, reinterpret_cast<char*>(&ems_ignswtsts_) -
      reinterpret_cast<char*>(&ems_setlengidlespeed_) + sizeof(ems_ignswtsts_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&dcm_ems_checksum_0x142_, 0, reinterpret_cast<char*>(&ems_engthrottleposition_) -
      reinterpret_cast<char*>(&dcm_ems_checksum_0x142_) + sizeof(ems_engthrottleposition_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gw_ems_engstatus_0x142_142::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ems_ignitiontiming = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ems_ignitiontiming();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ems_ignitiontiming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ems_setlengidlespeed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_ems_setlengidlespeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ems_setlengidlespeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_engoperationstatusType ems_engoperationstatus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_IsValid(value)) {
            set_ems_engoperationstatus(static_cast< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_aircompressorstatusType ems_aircompressorstatus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_IsValid(value)) {
            set_ems_aircompressorstatus(static_cast< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_throttleplatepositionerrorType ems_throttleplatepositionerror = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_IsValid(value)) {
            set_ems_throttleplatepositionerror(static_cast< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_startstopmessageType ems_startstopmessage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_IsValid(value)) {
            set_ems_startstopmessage(static_cast< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_startstopmessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dcm_ems_rollingcounter_0x142 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_dcm_ems_rollingcounter_0x142();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dcm_ems_rollingcounter_0x142_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_ignswtstsType ems_ignswtsts = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_IsValid(value)) {
            set_ems_ignswtsts(static_cast< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_ignswtstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dcm_ems_checksum_0x142 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_dcm_ems_checksum_0x142();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dcm_ems_checksum_0x142_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ems_engthrottleposition = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_ems_engthrottleposition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ems_engthrottleposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
  return false;
#undef DO_
}

void Gw_ems_engstatus_0x142_142::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ems_ignitiontiming = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ems_ignitiontiming(), output);
  }

  // optional double ems_setlengidlespeed = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ems_setlengidlespeed(), output);
  }

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_engoperationstatusType ems_engoperationstatus = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ems_engoperationstatus(), output);
  }

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_aircompressorstatusType ems_aircompressorstatus = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ems_aircompressorstatus(), output);
  }

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_throttleplatepositionerrorType ems_throttleplatepositionerror = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ems_throttleplatepositionerror(), output);
  }

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_startstopmessageType ems_startstopmessage = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->ems_startstopmessage(), output);
  }

  // optional int32 dcm_ems_rollingcounter_0x142 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dcm_ems_rollingcounter_0x142(), output);
  }

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_ignswtstsType ems_ignswtsts = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->ems_ignswtsts(), output);
  }

  // optional int32 dcm_ems_checksum_0x142 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dcm_ems_checksum_0x142(), output);
  }

  // optional double ems_engthrottleposition = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->ems_engthrottleposition(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
}

::google::protobuf::uint8* Gw_ems_engstatus_0x142_142::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ems_ignitiontiming = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ems_ignitiontiming(), target);
  }

  // optional double ems_setlengidlespeed = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ems_setlengidlespeed(), target);
  }

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_engoperationstatusType ems_engoperationstatus = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ems_engoperationstatus(), target);
  }

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_aircompressorstatusType ems_aircompressorstatus = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ems_aircompressorstatus(), target);
  }

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_throttleplatepositionerrorType ems_throttleplatepositionerror = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ems_throttleplatepositionerror(), target);
  }

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_startstopmessageType ems_startstopmessage = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->ems_startstopmessage(), target);
  }

  // optional int32 dcm_ems_rollingcounter_0x142 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dcm_ems_rollingcounter_0x142(), target);
  }

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_ignswtstsType ems_ignswtsts = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->ems_ignswtsts(), target);
  }

  // optional int32 dcm_ems_checksum_0x142 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dcm_ems_checksum_0x142(), target);
  }

  // optional double ems_engthrottleposition = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->ems_engthrottleposition(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
  return target;
}

size_t Gw_ems_engstatus_0x142_142::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double ems_setlengidlespeed = 2;
    if (has_ems_setlengidlespeed()) {
      total_size += 1 + 8;
    }

    // optional int32 ems_ignitiontiming = 1;
    if (has_ems_ignitiontiming()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ems_ignitiontiming());
    }

    // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_engoperationstatusType ems_engoperationstatus = 3;
    if (has_ems_engoperationstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ems_engoperationstatus());
    }

    // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_aircompressorstatusType ems_aircompressorstatus = 4;
    if (has_ems_aircompressorstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ems_aircompressorstatus());
    }

    // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_throttleplatepositionerrorType ems_throttleplatepositionerror = 5;
    if (has_ems_throttleplatepositionerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ems_throttleplatepositionerror());
    }

    // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_startstopmessageType ems_startstopmessage = 6;
    if (has_ems_startstopmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ems_startstopmessage());
    }

    // optional int32 dcm_ems_rollingcounter_0x142 = 7;
    if (has_dcm_ems_rollingcounter_0x142()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dcm_ems_rollingcounter_0x142());
    }

    // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_ignswtstsType ems_ignswtsts = 8;
    if (has_ems_ignswtsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ems_ignswtsts());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 dcm_ems_checksum_0x142 = 9;
    if (has_dcm_ems_checksum_0x142()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dcm_ems_checksum_0x142());
    }

    // optional double ems_engthrottleposition = 10;
    if (has_ems_engthrottleposition()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gw_ems_engstatus_0x142_142::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
  GOOGLE_DCHECK_NE(&from, this);
  const Gw_ems_engstatus_0x142_142* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gw_ems_engstatus_0x142_142>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
    MergeFrom(*source);
  }
}

void Gw_ems_engstatus_0x142_142::MergeFrom(const Gw_ems_engstatus_0x142_142& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      ems_setlengidlespeed_ = from.ems_setlengidlespeed_;
    }
    if (cached_has_bits & 0x00000002u) {
      ems_ignitiontiming_ = from.ems_ignitiontiming_;
    }
    if (cached_has_bits & 0x00000004u) {
      ems_engoperationstatus_ = from.ems_engoperationstatus_;
    }
    if (cached_has_bits & 0x00000008u) {
      ems_aircompressorstatus_ = from.ems_aircompressorstatus_;
    }
    if (cached_has_bits & 0x00000010u) {
      ems_throttleplatepositionerror_ = from.ems_throttleplatepositionerror_;
    }
    if (cached_has_bits & 0x00000020u) {
      ems_startstopmessage_ = from.ems_startstopmessage_;
    }
    if (cached_has_bits & 0x00000040u) {
      dcm_ems_rollingcounter_0x142_ = from.dcm_ems_rollingcounter_0x142_;
    }
    if (cached_has_bits & 0x00000080u) {
      ems_ignswtsts_ = from.ems_ignswtsts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      dcm_ems_checksum_0x142_ = from.dcm_ems_checksum_0x142_;
    }
    if (cached_has_bits & 0x00000200u) {
      ems_engthrottleposition_ = from.ems_engthrottleposition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gw_ems_engstatus_0x142_142::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gw_ems_engstatus_0x142_142::CopyFrom(const Gw_ems_engstatus_0x142_142& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gw_ems_engstatus_0x142_142)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gw_ems_engstatus_0x142_142::IsInitialized() const {
  return true;
}

void Gw_ems_engstatus_0x142_142::Swap(Gw_ems_engstatus_0x142_142* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gw_ems_engstatus_0x142_142::InternalSwap(Gw_ems_engstatus_0x142_142* other) {
  std::swap(ems_setlengidlespeed_, other->ems_setlengidlespeed_);
  std::swap(ems_ignitiontiming_, other->ems_ignitiontiming_);
  std::swap(ems_engoperationstatus_, other->ems_engoperationstatus_);
  std::swap(ems_aircompressorstatus_, other->ems_aircompressorstatus_);
  std::swap(ems_throttleplatepositionerror_, other->ems_throttleplatepositionerror_);
  std::swap(ems_startstopmessage_, other->ems_startstopmessage_);
  std::swap(dcm_ems_rollingcounter_0x142_, other->dcm_ems_rollingcounter_0x142_);
  std::swap(ems_ignswtsts_, other->ems_ignswtsts_);
  std::swap(dcm_ems_checksum_0x142_, other->dcm_ems_checksum_0x142_);
  std::swap(ems_engthrottleposition_, other->ems_engthrottleposition_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gw_ems_engstatus_0x142_142::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gw_ems_engstatus_0x142_142

// optional int32 ems_ignitiontiming = 1;
bool Gw_ems_engstatus_0x142_142::has_ems_ignitiontiming() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gw_ems_engstatus_0x142_142::set_has_ems_ignitiontiming() {
  _has_bits_[0] |= 0x00000002u;
}
void Gw_ems_engstatus_0x142_142::clear_has_ems_ignitiontiming() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gw_ems_engstatus_0x142_142::clear_ems_ignitiontiming() {
  ems_ignitiontiming_ = 0;
  clear_has_ems_ignitiontiming();
}
::google::protobuf::int32 Gw_ems_engstatus_0x142_142::ems_ignitiontiming() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_ignitiontiming)
  return ems_ignitiontiming_;
}
void Gw_ems_engstatus_0x142_142::set_ems_ignitiontiming(::google::protobuf::int32 value) {
  set_has_ems_ignitiontiming();
  ems_ignitiontiming_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_ignitiontiming)
}

// optional double ems_setlengidlespeed = 2;
bool Gw_ems_engstatus_0x142_142::has_ems_setlengidlespeed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gw_ems_engstatus_0x142_142::set_has_ems_setlengidlespeed() {
  _has_bits_[0] |= 0x00000001u;
}
void Gw_ems_engstatus_0x142_142::clear_has_ems_setlengidlespeed() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gw_ems_engstatus_0x142_142::clear_ems_setlengidlespeed() {
  ems_setlengidlespeed_ = 0;
  clear_has_ems_setlengidlespeed();
}
double Gw_ems_engstatus_0x142_142::ems_setlengidlespeed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_setlengidlespeed)
  return ems_setlengidlespeed_;
}
void Gw_ems_engstatus_0x142_142::set_ems_setlengidlespeed(double value) {
  set_has_ems_setlengidlespeed();
  ems_setlengidlespeed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_setlengidlespeed)
}

// optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_engoperationstatusType ems_engoperationstatus = 3;
bool Gw_ems_engstatus_0x142_142::has_ems_engoperationstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gw_ems_engstatus_0x142_142::set_has_ems_engoperationstatus() {
  _has_bits_[0] |= 0x00000004u;
}
void Gw_ems_engstatus_0x142_142::clear_has_ems_engoperationstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gw_ems_engstatus_0x142_142::clear_ems_engoperationstatus() {
  ems_engoperationstatus_ = 0;
  clear_has_ems_engoperationstatus();
}
::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType Gw_ems_engstatus_0x142_142::ems_engoperationstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_engoperationstatus)
  return static_cast< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType >(ems_engoperationstatus_);
}
void Gw_ems_engstatus_0x142_142::set_ems_engoperationstatus(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType value) {
  assert(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_engoperationstatusType_IsValid(value));
  set_has_ems_engoperationstatus();
  ems_engoperationstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_engoperationstatus)
}

// optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_aircompressorstatusType ems_aircompressorstatus = 4;
bool Gw_ems_engstatus_0x142_142::has_ems_aircompressorstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gw_ems_engstatus_0x142_142::set_has_ems_aircompressorstatus() {
  _has_bits_[0] |= 0x00000008u;
}
void Gw_ems_engstatus_0x142_142::clear_has_ems_aircompressorstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gw_ems_engstatus_0x142_142::clear_ems_aircompressorstatus() {
  ems_aircompressorstatus_ = 0;
  clear_has_ems_aircompressorstatus();
}
::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType Gw_ems_engstatus_0x142_142::ems_aircompressorstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_aircompressorstatus)
  return static_cast< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType >(ems_aircompressorstatus_);
}
void Gw_ems_engstatus_0x142_142::set_ems_aircompressorstatus(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType value) {
  assert(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_aircompressorstatusType_IsValid(value));
  set_has_ems_aircompressorstatus();
  ems_aircompressorstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_aircompressorstatus)
}

// optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_throttleplatepositionerrorType ems_throttleplatepositionerror = 5;
bool Gw_ems_engstatus_0x142_142::has_ems_throttleplatepositionerror() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gw_ems_engstatus_0x142_142::set_has_ems_throttleplatepositionerror() {
  _has_bits_[0] |= 0x00000010u;
}
void Gw_ems_engstatus_0x142_142::clear_has_ems_throttleplatepositionerror() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gw_ems_engstatus_0x142_142::clear_ems_throttleplatepositionerror() {
  ems_throttleplatepositionerror_ = 0;
  clear_has_ems_throttleplatepositionerror();
}
::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType Gw_ems_engstatus_0x142_142::ems_throttleplatepositionerror() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_throttleplatepositionerror)
  return static_cast< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType >(ems_throttleplatepositionerror_);
}
void Gw_ems_engstatus_0x142_142::set_ems_throttleplatepositionerror(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType value) {
  assert(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_throttleplatepositionerrorType_IsValid(value));
  set_has_ems_throttleplatepositionerror();
  ems_throttleplatepositionerror_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_throttleplatepositionerror)
}

// optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_startstopmessageType ems_startstopmessage = 6;
bool Gw_ems_engstatus_0x142_142::has_ems_startstopmessage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gw_ems_engstatus_0x142_142::set_has_ems_startstopmessage() {
  _has_bits_[0] |= 0x00000020u;
}
void Gw_ems_engstatus_0x142_142::clear_has_ems_startstopmessage() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gw_ems_engstatus_0x142_142::clear_ems_startstopmessage() {
  ems_startstopmessage_ = 0;
  clear_has_ems_startstopmessage();
}
::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_startstopmessageType Gw_ems_engstatus_0x142_142::ems_startstopmessage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_startstopmessage)
  return static_cast< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_startstopmessageType >(ems_startstopmessage_);
}
void Gw_ems_engstatus_0x142_142::set_ems_startstopmessage(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_startstopmessageType value) {
  assert(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_startstopmessageType_IsValid(value));
  set_has_ems_startstopmessage();
  ems_startstopmessage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_startstopmessage)
}

// optional int32 dcm_ems_rollingcounter_0x142 = 7;
bool Gw_ems_engstatus_0x142_142::has_dcm_ems_rollingcounter_0x142() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Gw_ems_engstatus_0x142_142::set_has_dcm_ems_rollingcounter_0x142() {
  _has_bits_[0] |= 0x00000040u;
}
void Gw_ems_engstatus_0x142_142::clear_has_dcm_ems_rollingcounter_0x142() {
  _has_bits_[0] &= ~0x00000040u;
}
void Gw_ems_engstatus_0x142_142::clear_dcm_ems_rollingcounter_0x142() {
  dcm_ems_rollingcounter_0x142_ = 0;
  clear_has_dcm_ems_rollingcounter_0x142();
}
::google::protobuf::int32 Gw_ems_engstatus_0x142_142::dcm_ems_rollingcounter_0x142() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.dcm_ems_rollingcounter_0x142)
  return dcm_ems_rollingcounter_0x142_;
}
void Gw_ems_engstatus_0x142_142::set_dcm_ems_rollingcounter_0x142(::google::protobuf::int32 value) {
  set_has_dcm_ems_rollingcounter_0x142();
  dcm_ems_rollingcounter_0x142_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.dcm_ems_rollingcounter_0x142)
}

// optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142.Ems_ignswtstsType ems_ignswtsts = 8;
bool Gw_ems_engstatus_0x142_142::has_ems_ignswtsts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Gw_ems_engstatus_0x142_142::set_has_ems_ignswtsts() {
  _has_bits_[0] |= 0x00000080u;
}
void Gw_ems_engstatus_0x142_142::clear_has_ems_ignswtsts() {
  _has_bits_[0] &= ~0x00000080u;
}
void Gw_ems_engstatus_0x142_142::clear_ems_ignswtsts() {
  ems_ignswtsts_ = 0;
  clear_has_ems_ignswtsts();
}
::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_ignswtstsType Gw_ems_engstatus_0x142_142::ems_ignswtsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_ignswtsts)
  return static_cast< ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_ignswtstsType >(ems_ignswtsts_);
}
void Gw_ems_engstatus_0x142_142::set_ems_ignswtsts(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_ignswtstsType value) {
  assert(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142_Ems_ignswtstsType_IsValid(value));
  set_has_ems_ignswtsts();
  ems_ignswtsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_ignswtsts)
}

// optional int32 dcm_ems_checksum_0x142 = 9;
bool Gw_ems_engstatus_0x142_142::has_dcm_ems_checksum_0x142() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Gw_ems_engstatus_0x142_142::set_has_dcm_ems_checksum_0x142() {
  _has_bits_[0] |= 0x00000100u;
}
void Gw_ems_engstatus_0x142_142::clear_has_dcm_ems_checksum_0x142() {
  _has_bits_[0] &= ~0x00000100u;
}
void Gw_ems_engstatus_0x142_142::clear_dcm_ems_checksum_0x142() {
  dcm_ems_checksum_0x142_ = 0;
  clear_has_dcm_ems_checksum_0x142();
}
::google::protobuf::int32 Gw_ems_engstatus_0x142_142::dcm_ems_checksum_0x142() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.dcm_ems_checksum_0x142)
  return dcm_ems_checksum_0x142_;
}
void Gw_ems_engstatus_0x142_142::set_dcm_ems_checksum_0x142(::google::protobuf::int32 value) {
  set_has_dcm_ems_checksum_0x142();
  dcm_ems_checksum_0x142_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.dcm_ems_checksum_0x142)
}

// optional double ems_engthrottleposition = 10;
bool Gw_ems_engstatus_0x142_142::has_ems_engthrottleposition() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Gw_ems_engstatus_0x142_142::set_has_ems_engthrottleposition() {
  _has_bits_[0] |= 0x00000200u;
}
void Gw_ems_engstatus_0x142_142::clear_has_ems_engthrottleposition() {
  _has_bits_[0] &= ~0x00000200u;
}
void Gw_ems_engstatus_0x142_142::clear_ems_engthrottleposition() {
  ems_engthrottleposition_ = 0;
  clear_has_ems_engthrottleposition();
}
double Gw_ems_engstatus_0x142_142::ems_engthrottleposition() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_engthrottleposition)
  return ems_engthrottleposition_;
}
void Gw_ems_engstatus_0x142_142::set_ems_engthrottleposition(double value) {
  set_has_ems_engthrottleposition();
  ems_engthrottleposition_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_engstatus_0x142_142.ems_engthrottleposition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gw_tbox_location_0x580_580::kTboxLongitudeFieldNumber;
const int Gw_tbox_location_0x580_580::kTboxLatidudeFieldNumber;
const int Gw_tbox_location_0x580_580::kTboxGpsUbFieldNumber;
const int Gw_tbox_location_0x580_580::kTboxLocationstsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gw_tbox_location_0x580_580::Gw_tbox_location_0x580_580()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gw_tbox_location_0x580_580)
}
Gw_tbox_location_0x580_580::Gw_tbox_location_0x580_580(const Gw_tbox_location_0x580_580& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tbox_longitude_, &from.tbox_longitude_,
    reinterpret_cast<char*>(&tbox_locationsts_) -
    reinterpret_cast<char*>(&tbox_longitude_) + sizeof(tbox_locationsts_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gw_tbox_location_0x580_580)
}

void Gw_tbox_location_0x580_580::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tbox_longitude_, 0, reinterpret_cast<char*>(&tbox_locationsts_) -
    reinterpret_cast<char*>(&tbox_longitude_) + sizeof(tbox_locationsts_));
}

Gw_tbox_location_0x580_580::~Gw_tbox_location_0x580_580() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gw_tbox_location_0x580_580)
  SharedDtor();
}

void Gw_tbox_location_0x580_580::SharedDtor() {
}

void Gw_tbox_location_0x580_580::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gw_tbox_location_0x580_580::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gw_tbox_location_0x580_580& Gw_tbox_location_0x580_580::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gw_tbox_location_0x580_580* Gw_tbox_location_0x580_580::New(::google::protobuf::Arena* arena) const {
  Gw_tbox_location_0x580_580* n = new Gw_tbox_location_0x580_580;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gw_tbox_location_0x580_580::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gw_tbox_location_0x580_580)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&tbox_longitude_, 0, reinterpret_cast<char*>(&tbox_locationsts_) -
      reinterpret_cast<char*>(&tbox_longitude_) + sizeof(tbox_locationsts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gw_tbox_location_0x580_580::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gw_tbox_location_0x580_580)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double tbox_longitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_tbox_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tbox_longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tbox_latidude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_tbox_latidude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tbox_latidude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tbox_location_0x580_580.Tbox_gps_ubType tbox_gps_ub = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_gps_ubType_IsValid(value)) {
            set_tbox_gps_ub(static_cast< ::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_gps_ubType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tbox_location_0x580_580.Tbox_locationstsType tbox_locationsts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_locationstsType_IsValid(value)) {
            set_tbox_locationsts(static_cast< ::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_locationstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gw_tbox_location_0x580_580)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gw_tbox_location_0x580_580)
  return false;
#undef DO_
}

void Gw_tbox_location_0x580_580::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gw_tbox_location_0x580_580)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double tbox_longitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->tbox_longitude(), output);
  }

  // optional double tbox_latidude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->tbox_latidude(), output);
  }

  // optional .jmc_auto.canbus.Gw_tbox_location_0x580_580.Tbox_gps_ubType tbox_gps_ub = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->tbox_gps_ub(), output);
  }

  // optional .jmc_auto.canbus.Gw_tbox_location_0x580_580.Tbox_locationstsType tbox_locationsts = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->tbox_locationsts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gw_tbox_location_0x580_580)
}

::google::protobuf::uint8* Gw_tbox_location_0x580_580::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gw_tbox_location_0x580_580)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double tbox_longitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->tbox_longitude(), target);
  }

  // optional double tbox_latidude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->tbox_latidude(), target);
  }

  // optional .jmc_auto.canbus.Gw_tbox_location_0x580_580.Tbox_gps_ubType tbox_gps_ub = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->tbox_gps_ub(), target);
  }

  // optional .jmc_auto.canbus.Gw_tbox_location_0x580_580.Tbox_locationstsType tbox_locationsts = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->tbox_locationsts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gw_tbox_location_0x580_580)
  return target;
}

size_t Gw_tbox_location_0x580_580::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gw_tbox_location_0x580_580)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double tbox_longitude = 1;
    if (has_tbox_longitude()) {
      total_size += 1 + 8;
    }

    // optional double tbox_latidude = 2;
    if (has_tbox_latidude()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Gw_tbox_location_0x580_580.Tbox_gps_ubType tbox_gps_ub = 3;
    if (has_tbox_gps_ub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tbox_gps_ub());
    }

    // optional .jmc_auto.canbus.Gw_tbox_location_0x580_580.Tbox_locationstsType tbox_locationsts = 4;
    if (has_tbox_locationsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tbox_locationsts());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gw_tbox_location_0x580_580::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gw_tbox_location_0x580_580)
  GOOGLE_DCHECK_NE(&from, this);
  const Gw_tbox_location_0x580_580* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gw_tbox_location_0x580_580>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gw_tbox_location_0x580_580)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gw_tbox_location_0x580_580)
    MergeFrom(*source);
  }
}

void Gw_tbox_location_0x580_580::MergeFrom(const Gw_tbox_location_0x580_580& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gw_tbox_location_0x580_580)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      tbox_longitude_ = from.tbox_longitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      tbox_latidude_ = from.tbox_latidude_;
    }
    if (cached_has_bits & 0x00000004u) {
      tbox_gps_ub_ = from.tbox_gps_ub_;
    }
    if (cached_has_bits & 0x00000008u) {
      tbox_locationsts_ = from.tbox_locationsts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gw_tbox_location_0x580_580::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gw_tbox_location_0x580_580)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gw_tbox_location_0x580_580::CopyFrom(const Gw_tbox_location_0x580_580& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gw_tbox_location_0x580_580)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gw_tbox_location_0x580_580::IsInitialized() const {
  return true;
}

void Gw_tbox_location_0x580_580::Swap(Gw_tbox_location_0x580_580* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gw_tbox_location_0x580_580::InternalSwap(Gw_tbox_location_0x580_580* other) {
  std::swap(tbox_longitude_, other->tbox_longitude_);
  std::swap(tbox_latidude_, other->tbox_latidude_);
  std::swap(tbox_gps_ub_, other->tbox_gps_ub_);
  std::swap(tbox_locationsts_, other->tbox_locationsts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gw_tbox_location_0x580_580::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gw_tbox_location_0x580_580

// optional double tbox_longitude = 1;
bool Gw_tbox_location_0x580_580::has_tbox_longitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gw_tbox_location_0x580_580::set_has_tbox_longitude() {
  _has_bits_[0] |= 0x00000001u;
}
void Gw_tbox_location_0x580_580::clear_has_tbox_longitude() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gw_tbox_location_0x580_580::clear_tbox_longitude() {
  tbox_longitude_ = 0;
  clear_has_tbox_longitude();
}
double Gw_tbox_location_0x580_580::tbox_longitude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tbox_location_0x580_580.tbox_longitude)
  return tbox_longitude_;
}
void Gw_tbox_location_0x580_580::set_tbox_longitude(double value) {
  set_has_tbox_longitude();
  tbox_longitude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tbox_location_0x580_580.tbox_longitude)
}

// optional double tbox_latidude = 2;
bool Gw_tbox_location_0x580_580::has_tbox_latidude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gw_tbox_location_0x580_580::set_has_tbox_latidude() {
  _has_bits_[0] |= 0x00000002u;
}
void Gw_tbox_location_0x580_580::clear_has_tbox_latidude() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gw_tbox_location_0x580_580::clear_tbox_latidude() {
  tbox_latidude_ = 0;
  clear_has_tbox_latidude();
}
double Gw_tbox_location_0x580_580::tbox_latidude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tbox_location_0x580_580.tbox_latidude)
  return tbox_latidude_;
}
void Gw_tbox_location_0x580_580::set_tbox_latidude(double value) {
  set_has_tbox_latidude();
  tbox_latidude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tbox_location_0x580_580.tbox_latidude)
}

// optional .jmc_auto.canbus.Gw_tbox_location_0x580_580.Tbox_gps_ubType tbox_gps_ub = 3;
bool Gw_tbox_location_0x580_580::has_tbox_gps_ub() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gw_tbox_location_0x580_580::set_has_tbox_gps_ub() {
  _has_bits_[0] |= 0x00000004u;
}
void Gw_tbox_location_0x580_580::clear_has_tbox_gps_ub() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gw_tbox_location_0x580_580::clear_tbox_gps_ub() {
  tbox_gps_ub_ = 0;
  clear_has_tbox_gps_ub();
}
::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_gps_ubType Gw_tbox_location_0x580_580::tbox_gps_ub() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tbox_location_0x580_580.tbox_gps_ub)
  return static_cast< ::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_gps_ubType >(tbox_gps_ub_);
}
void Gw_tbox_location_0x580_580::set_tbox_gps_ub(::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_gps_ubType value) {
  assert(::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_gps_ubType_IsValid(value));
  set_has_tbox_gps_ub();
  tbox_gps_ub_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tbox_location_0x580_580.tbox_gps_ub)
}

// optional .jmc_auto.canbus.Gw_tbox_location_0x580_580.Tbox_locationstsType tbox_locationsts = 4;
bool Gw_tbox_location_0x580_580::has_tbox_locationsts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gw_tbox_location_0x580_580::set_has_tbox_locationsts() {
  _has_bits_[0] |= 0x00000008u;
}
void Gw_tbox_location_0x580_580::clear_has_tbox_locationsts() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gw_tbox_location_0x580_580::clear_tbox_locationsts() {
  tbox_locationsts_ = 0;
  clear_has_tbox_locationsts();
}
::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_locationstsType Gw_tbox_location_0x580_580::tbox_locationsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tbox_location_0x580_580.tbox_locationsts)
  return static_cast< ::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_locationstsType >(tbox_locationsts_);
}
void Gw_tbox_location_0x580_580::set_tbox_locationsts(::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_locationstsType value) {
  assert(::jmc_auto::canbus::Gw_tbox_location_0x580_580_Tbox_locationstsType_IsValid(value));
  set_has_tbox_locationsts();
  tbox_locationsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tbox_location_0x580_580.tbox_locationsts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Srs_0x350_350::kSrsSbrSecondrowrightFieldNumber;
const int Srs_0x350_350::kSrsSbrSecondrowmidFieldNumber;
const int Srs_0x350_350::kSrsSbrSecondrowleftFieldNumber;
const int Srs_0x350_350::kSrsSbrPamsengerFieldNumber;
const int Srs_0x350_350::kRollingCounter0X350FieldNumber;
const int Srs_0x350_350::kSrsSbrDriverFieldNumber;
const int Srs_0x350_350::kChecksum0X350FieldNumber;
const int Srs_0x350_350::kSrsCrashoutputstsFieldNumber;
const int Srs_0x350_350::kSrsAirbagfailstsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Srs_0x350_350::Srs_0x350_350()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Srs_0x350_350)
}
Srs_0x350_350::Srs_0x350_350(const Srs_0x350_350& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&srs_sbr_secondrowright_, &from.srs_sbr_secondrowright_,
    reinterpret_cast<char*>(&srs_airbagfailsts_) -
    reinterpret_cast<char*>(&srs_sbr_secondrowright_) + sizeof(srs_airbagfailsts_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Srs_0x350_350)
}

void Srs_0x350_350::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&srs_sbr_secondrowright_, 0, reinterpret_cast<char*>(&srs_airbagfailsts_) -
    reinterpret_cast<char*>(&srs_sbr_secondrowright_) + sizeof(srs_airbagfailsts_));
}

Srs_0x350_350::~Srs_0x350_350() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Srs_0x350_350)
  SharedDtor();
}

void Srs_0x350_350::SharedDtor() {
}

void Srs_0x350_350::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Srs_0x350_350::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Srs_0x350_350& Srs_0x350_350::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Srs_0x350_350* Srs_0x350_350::New(::google::protobuf::Arena* arena) const {
  Srs_0x350_350* n = new Srs_0x350_350;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Srs_0x350_350::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Srs_0x350_350)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&srs_sbr_secondrowright_, 0, reinterpret_cast<char*>(&srs_crashoutputsts_) -
      reinterpret_cast<char*>(&srs_sbr_secondrowright_) + sizeof(srs_crashoutputsts_));
  }
  srs_airbagfailsts_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Srs_0x350_350::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Srs_0x350_350)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowrightType srs_sbr_secondrowright = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowrightType_IsValid(value)) {
            set_srs_sbr_secondrowright(static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowrightType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowmidType srs_sbr_secondrowmid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowmidType_IsValid(value)) {
            set_srs_sbr_secondrowmid(static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowmidType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowleftType srs_sbr_secondrowleft = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowleftType_IsValid(value)) {
            set_srs_sbr_secondrowleft(static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowleftType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_pamsengerType srs_sbr_pamsenger = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_pamsengerType_IsValid(value)) {
            set_srs_sbr_pamsenger(static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_pamsengerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x350 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_rolling_counter_0x350();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x350_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_driverType srs_sbr_driver = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_driverType_IsValid(value)) {
            set_srs_sbr_driver(static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_driverType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x350 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_checksum_0x350();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x350_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Srs_0x350_350.Srs_crashoutputstsType srs_crashoutputsts = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Srs_0x350_350_Srs_crashoutputstsType_IsValid(value)) {
            set_srs_crashoutputsts(static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_crashoutputstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Srs_0x350_350.Srs_airbagfailstsType srs_airbagfailsts = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Srs_0x350_350_Srs_airbagfailstsType_IsValid(value)) {
            set_srs_airbagfailsts(static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_airbagfailstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Srs_0x350_350)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Srs_0x350_350)
  return false;
#undef DO_
}

void Srs_0x350_350::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Srs_0x350_350)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowrightType srs_sbr_secondrowright = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->srs_sbr_secondrowright(), output);
  }

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowmidType srs_sbr_secondrowmid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->srs_sbr_secondrowmid(), output);
  }

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowleftType srs_sbr_secondrowleft = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->srs_sbr_secondrowleft(), output);
  }

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_pamsengerType srs_sbr_pamsenger = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->srs_sbr_pamsenger(), output);
  }

  // optional int32 rolling_counter_0x350 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rolling_counter_0x350(), output);
  }

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_driverType srs_sbr_driver = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->srs_sbr_driver(), output);
  }

  // optional int32 checksum_0x350 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->checksum_0x350(), output);
  }

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_crashoutputstsType srs_crashoutputsts = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->srs_crashoutputsts(), output);
  }

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_airbagfailstsType srs_airbagfailsts = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->srs_airbagfailsts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Srs_0x350_350)
}

::google::protobuf::uint8* Srs_0x350_350::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Srs_0x350_350)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowrightType srs_sbr_secondrowright = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->srs_sbr_secondrowright(), target);
  }

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowmidType srs_sbr_secondrowmid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->srs_sbr_secondrowmid(), target);
  }

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowleftType srs_sbr_secondrowleft = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->srs_sbr_secondrowleft(), target);
  }

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_pamsengerType srs_sbr_pamsenger = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->srs_sbr_pamsenger(), target);
  }

  // optional int32 rolling_counter_0x350 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rolling_counter_0x350(), target);
  }

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_driverType srs_sbr_driver = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->srs_sbr_driver(), target);
  }

  // optional int32 checksum_0x350 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->checksum_0x350(), target);
  }

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_crashoutputstsType srs_crashoutputsts = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->srs_crashoutputsts(), target);
  }

  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_airbagfailstsType srs_airbagfailsts = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->srs_airbagfailsts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Srs_0x350_350)
  return target;
}

size_t Srs_0x350_350::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Srs_0x350_350)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowrightType srs_sbr_secondrowright = 1;
    if (has_srs_sbr_secondrowright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->srs_sbr_secondrowright());
    }

    // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowmidType srs_sbr_secondrowmid = 2;
    if (has_srs_sbr_secondrowmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->srs_sbr_secondrowmid());
    }

    // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowleftType srs_sbr_secondrowleft = 3;
    if (has_srs_sbr_secondrowleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->srs_sbr_secondrowleft());
    }

    // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_pamsengerType srs_sbr_pamsenger = 4;
    if (has_srs_sbr_pamsenger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->srs_sbr_pamsenger());
    }

    // optional int32 rolling_counter_0x350 = 5;
    if (has_rolling_counter_0x350()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x350());
    }

    // optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_driverType srs_sbr_driver = 6;
    if (has_srs_sbr_driver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->srs_sbr_driver());
    }

    // optional int32 checksum_0x350 = 7;
    if (has_checksum_0x350()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x350());
    }

    // optional .jmc_auto.canbus.Srs_0x350_350.Srs_crashoutputstsType srs_crashoutputsts = 8;
    if (has_srs_crashoutputsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->srs_crashoutputsts());
    }

  }
  // optional .jmc_auto.canbus.Srs_0x350_350.Srs_airbagfailstsType srs_airbagfailsts = 9;
  if (has_srs_airbagfailsts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->srs_airbagfailsts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Srs_0x350_350::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Srs_0x350_350)
  GOOGLE_DCHECK_NE(&from, this);
  const Srs_0x350_350* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Srs_0x350_350>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Srs_0x350_350)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Srs_0x350_350)
    MergeFrom(*source);
  }
}

void Srs_0x350_350::MergeFrom(const Srs_0x350_350& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Srs_0x350_350)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      srs_sbr_secondrowright_ = from.srs_sbr_secondrowright_;
    }
    if (cached_has_bits & 0x00000002u) {
      srs_sbr_secondrowmid_ = from.srs_sbr_secondrowmid_;
    }
    if (cached_has_bits & 0x00000004u) {
      srs_sbr_secondrowleft_ = from.srs_sbr_secondrowleft_;
    }
    if (cached_has_bits & 0x00000008u) {
      srs_sbr_pamsenger_ = from.srs_sbr_pamsenger_;
    }
    if (cached_has_bits & 0x00000010u) {
      rolling_counter_0x350_ = from.rolling_counter_0x350_;
    }
    if (cached_has_bits & 0x00000020u) {
      srs_sbr_driver_ = from.srs_sbr_driver_;
    }
    if (cached_has_bits & 0x00000040u) {
      checksum_0x350_ = from.checksum_0x350_;
    }
    if (cached_has_bits & 0x00000080u) {
      srs_crashoutputsts_ = from.srs_crashoutputsts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_srs_airbagfailsts(from.srs_airbagfailsts());
  }
}

void Srs_0x350_350::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Srs_0x350_350)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Srs_0x350_350::CopyFrom(const Srs_0x350_350& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Srs_0x350_350)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Srs_0x350_350::IsInitialized() const {
  return true;
}

void Srs_0x350_350::Swap(Srs_0x350_350* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Srs_0x350_350::InternalSwap(Srs_0x350_350* other) {
  std::swap(srs_sbr_secondrowright_, other->srs_sbr_secondrowright_);
  std::swap(srs_sbr_secondrowmid_, other->srs_sbr_secondrowmid_);
  std::swap(srs_sbr_secondrowleft_, other->srs_sbr_secondrowleft_);
  std::swap(srs_sbr_pamsenger_, other->srs_sbr_pamsenger_);
  std::swap(rolling_counter_0x350_, other->rolling_counter_0x350_);
  std::swap(srs_sbr_driver_, other->srs_sbr_driver_);
  std::swap(checksum_0x350_, other->checksum_0x350_);
  std::swap(srs_crashoutputsts_, other->srs_crashoutputsts_);
  std::swap(srs_airbagfailsts_, other->srs_airbagfailsts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Srs_0x350_350::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Srs_0x350_350

// optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowrightType srs_sbr_secondrowright = 1;
bool Srs_0x350_350::has_srs_sbr_secondrowright() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Srs_0x350_350::set_has_srs_sbr_secondrowright() {
  _has_bits_[0] |= 0x00000001u;
}
void Srs_0x350_350::clear_has_srs_sbr_secondrowright() {
  _has_bits_[0] &= ~0x00000001u;
}
void Srs_0x350_350::clear_srs_sbr_secondrowright() {
  srs_sbr_secondrowright_ = 0;
  clear_has_srs_sbr_secondrowright();
}
::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowrightType Srs_0x350_350::srs_sbr_secondrowright() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.srs_sbr_secondrowright)
  return static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowrightType >(srs_sbr_secondrowright_);
}
void Srs_0x350_350::set_srs_sbr_secondrowright(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowrightType value) {
  assert(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowrightType_IsValid(value));
  set_has_srs_sbr_secondrowright();
  srs_sbr_secondrowright_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.srs_sbr_secondrowright)
}

// optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowmidType srs_sbr_secondrowmid = 2;
bool Srs_0x350_350::has_srs_sbr_secondrowmid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Srs_0x350_350::set_has_srs_sbr_secondrowmid() {
  _has_bits_[0] |= 0x00000002u;
}
void Srs_0x350_350::clear_has_srs_sbr_secondrowmid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Srs_0x350_350::clear_srs_sbr_secondrowmid() {
  srs_sbr_secondrowmid_ = 0;
  clear_has_srs_sbr_secondrowmid();
}
::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowmidType Srs_0x350_350::srs_sbr_secondrowmid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.srs_sbr_secondrowmid)
  return static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowmidType >(srs_sbr_secondrowmid_);
}
void Srs_0x350_350::set_srs_sbr_secondrowmid(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowmidType value) {
  assert(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowmidType_IsValid(value));
  set_has_srs_sbr_secondrowmid();
  srs_sbr_secondrowmid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.srs_sbr_secondrowmid)
}

// optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_secondrowleftType srs_sbr_secondrowleft = 3;
bool Srs_0x350_350::has_srs_sbr_secondrowleft() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Srs_0x350_350::set_has_srs_sbr_secondrowleft() {
  _has_bits_[0] |= 0x00000004u;
}
void Srs_0x350_350::clear_has_srs_sbr_secondrowleft() {
  _has_bits_[0] &= ~0x00000004u;
}
void Srs_0x350_350::clear_srs_sbr_secondrowleft() {
  srs_sbr_secondrowleft_ = 0;
  clear_has_srs_sbr_secondrowleft();
}
::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowleftType Srs_0x350_350::srs_sbr_secondrowleft() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.srs_sbr_secondrowleft)
  return static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowleftType >(srs_sbr_secondrowleft_);
}
void Srs_0x350_350::set_srs_sbr_secondrowleft(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowleftType value) {
  assert(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_secondrowleftType_IsValid(value));
  set_has_srs_sbr_secondrowleft();
  srs_sbr_secondrowleft_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.srs_sbr_secondrowleft)
}

// optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_pamsengerType srs_sbr_pamsenger = 4;
bool Srs_0x350_350::has_srs_sbr_pamsenger() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Srs_0x350_350::set_has_srs_sbr_pamsenger() {
  _has_bits_[0] |= 0x00000008u;
}
void Srs_0x350_350::clear_has_srs_sbr_pamsenger() {
  _has_bits_[0] &= ~0x00000008u;
}
void Srs_0x350_350::clear_srs_sbr_pamsenger() {
  srs_sbr_pamsenger_ = 0;
  clear_has_srs_sbr_pamsenger();
}
::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_pamsengerType Srs_0x350_350::srs_sbr_pamsenger() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.srs_sbr_pamsenger)
  return static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_pamsengerType >(srs_sbr_pamsenger_);
}
void Srs_0x350_350::set_srs_sbr_pamsenger(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_pamsengerType value) {
  assert(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_pamsengerType_IsValid(value));
  set_has_srs_sbr_pamsenger();
  srs_sbr_pamsenger_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.srs_sbr_pamsenger)
}

// optional int32 rolling_counter_0x350 = 5;
bool Srs_0x350_350::has_rolling_counter_0x350() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Srs_0x350_350::set_has_rolling_counter_0x350() {
  _has_bits_[0] |= 0x00000010u;
}
void Srs_0x350_350::clear_has_rolling_counter_0x350() {
  _has_bits_[0] &= ~0x00000010u;
}
void Srs_0x350_350::clear_rolling_counter_0x350() {
  rolling_counter_0x350_ = 0;
  clear_has_rolling_counter_0x350();
}
::google::protobuf::int32 Srs_0x350_350::rolling_counter_0x350() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.rolling_counter_0x350)
  return rolling_counter_0x350_;
}
void Srs_0x350_350::set_rolling_counter_0x350(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x350();
  rolling_counter_0x350_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.rolling_counter_0x350)
}

// optional .jmc_auto.canbus.Srs_0x350_350.Srs_sbr_driverType srs_sbr_driver = 6;
bool Srs_0x350_350::has_srs_sbr_driver() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Srs_0x350_350::set_has_srs_sbr_driver() {
  _has_bits_[0] |= 0x00000020u;
}
void Srs_0x350_350::clear_has_srs_sbr_driver() {
  _has_bits_[0] &= ~0x00000020u;
}
void Srs_0x350_350::clear_srs_sbr_driver() {
  srs_sbr_driver_ = 0;
  clear_has_srs_sbr_driver();
}
::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_driverType Srs_0x350_350::srs_sbr_driver() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.srs_sbr_driver)
  return static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_driverType >(srs_sbr_driver_);
}
void Srs_0x350_350::set_srs_sbr_driver(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_driverType value) {
  assert(::jmc_auto::canbus::Srs_0x350_350_Srs_sbr_driverType_IsValid(value));
  set_has_srs_sbr_driver();
  srs_sbr_driver_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.srs_sbr_driver)
}

// optional int32 checksum_0x350 = 7;
bool Srs_0x350_350::has_checksum_0x350() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Srs_0x350_350::set_has_checksum_0x350() {
  _has_bits_[0] |= 0x00000040u;
}
void Srs_0x350_350::clear_has_checksum_0x350() {
  _has_bits_[0] &= ~0x00000040u;
}
void Srs_0x350_350::clear_checksum_0x350() {
  checksum_0x350_ = 0;
  clear_has_checksum_0x350();
}
::google::protobuf::int32 Srs_0x350_350::checksum_0x350() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.checksum_0x350)
  return checksum_0x350_;
}
void Srs_0x350_350::set_checksum_0x350(::google::protobuf::int32 value) {
  set_has_checksum_0x350();
  checksum_0x350_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.checksum_0x350)
}

// optional .jmc_auto.canbus.Srs_0x350_350.Srs_crashoutputstsType srs_crashoutputsts = 8;
bool Srs_0x350_350::has_srs_crashoutputsts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Srs_0x350_350::set_has_srs_crashoutputsts() {
  _has_bits_[0] |= 0x00000080u;
}
void Srs_0x350_350::clear_has_srs_crashoutputsts() {
  _has_bits_[0] &= ~0x00000080u;
}
void Srs_0x350_350::clear_srs_crashoutputsts() {
  srs_crashoutputsts_ = 0;
  clear_has_srs_crashoutputsts();
}
::jmc_auto::canbus::Srs_0x350_350_Srs_crashoutputstsType Srs_0x350_350::srs_crashoutputsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.srs_crashoutputsts)
  return static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_crashoutputstsType >(srs_crashoutputsts_);
}
void Srs_0x350_350::set_srs_crashoutputsts(::jmc_auto::canbus::Srs_0x350_350_Srs_crashoutputstsType value) {
  assert(::jmc_auto::canbus::Srs_0x350_350_Srs_crashoutputstsType_IsValid(value));
  set_has_srs_crashoutputsts();
  srs_crashoutputsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.srs_crashoutputsts)
}

// optional .jmc_auto.canbus.Srs_0x350_350.Srs_airbagfailstsType srs_airbagfailsts = 9;
bool Srs_0x350_350::has_srs_airbagfailsts() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Srs_0x350_350::set_has_srs_airbagfailsts() {
  _has_bits_[0] |= 0x00000100u;
}
void Srs_0x350_350::clear_has_srs_airbagfailsts() {
  _has_bits_[0] &= ~0x00000100u;
}
void Srs_0x350_350::clear_srs_airbagfailsts() {
  srs_airbagfailsts_ = 0;
  clear_has_srs_airbagfailsts();
}
::jmc_auto::canbus::Srs_0x350_350_Srs_airbagfailstsType Srs_0x350_350::srs_airbagfailsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Srs_0x350_350.srs_airbagfailsts)
  return static_cast< ::jmc_auto::canbus::Srs_0x350_350_Srs_airbagfailstsType >(srs_airbagfailsts_);
}
void Srs_0x350_350::set_srs_airbagfailsts(::jmc_auto::canbus::Srs_0x350_350_Srs_airbagfailstsType value) {
  assert(::jmc_auto::canbus::Srs_0x350_350_Srs_airbagfailstsType_IsValid(value));
  set_has_srs_airbagfailsts();
  srs_airbagfailsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Srs_0x350_350.srs_airbagfailsts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ipm_0x245_245::kIpmLaneassitTorquereqstatusFieldNumber;
const int Ipm_0x245_245::kIpmLaneassitTorquevalidityFieldNumber;
const int Ipm_0x245_245::kIpmLaneassitSensitivityFieldNumber;
const int Ipm_0x245_245::kIpmLaneassitWarningaudioFieldNumber;
const int Ipm_0x245_245::kIpmLaneassitLeftvisualizationFieldNumber;
const int Ipm_0x245_245::kIpmLaneassitRightvisualizationFieldNumber;
const int Ipm_0x245_245::kIpmSlaspdlimitunitsFieldNumber;
const int Ipm_0x245_245::kIpmSlastateFieldNumber;
const int Ipm_0x245_245::kIpmLaneassitStatusFieldNumber;
const int Ipm_0x245_245::kIpmSlaspdlimitFieldNumber;
const int Ipm_0x245_245::kIpmHmaStatusFieldNumber;
const int Ipm_0x245_245::kIpmTjaicaStatusFieldNumber;
const int Ipm_0x245_245::kRollingCounter0X245FieldNumber;
const int Ipm_0x245_245::kIpmLdwwarningtypeFieldNumber;
const int Ipm_0x245_245::kIpmLaneassitHandsonreqFieldNumber;
const int Ipm_0x245_245::kIpmHmaHighbeamreqFieldNumber;
const int Ipm_0x245_245::kChecksum0X245FieldNumber;
const int Ipm_0x245_245::kIpmLaneassitTorquereqFieldNumber;
const int Ipm_0x245_245::kIpmLaneassittypeFieldNumber;
const int Ipm_0x245_245::kIpmLaneassitWarningvibrationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ipm_0x245_245::Ipm_0x245_245()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Ipm_0x245_245)
}
Ipm_0x245_245::Ipm_0x245_245(const Ipm_0x245_245& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ipm_laneassit_torquereqstatus_, &from.ipm_laneassit_torquereqstatus_,
    reinterpret_cast<char*>(&ipm_laneassit_warningvibration_) -
    reinterpret_cast<char*>(&ipm_laneassit_torquereqstatus_) + sizeof(ipm_laneassit_warningvibration_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Ipm_0x245_245)
}

void Ipm_0x245_245::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ipm_laneassit_torquereqstatus_, 0, reinterpret_cast<char*>(&ipm_laneassit_warningvibration_) -
    reinterpret_cast<char*>(&ipm_laneassit_torquereqstatus_) + sizeof(ipm_laneassit_warningvibration_));
}

Ipm_0x245_245::~Ipm_0x245_245() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Ipm_0x245_245)
  SharedDtor();
}

void Ipm_0x245_245::SharedDtor() {
}

void Ipm_0x245_245::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ipm_0x245_245::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ipm_0x245_245& Ipm_0x245_245::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ipm_0x245_245* Ipm_0x245_245::New(::google::protobuf::Arena* arena) const {
  Ipm_0x245_245* n = new Ipm_0x245_245;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ipm_0x245_245::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Ipm_0x245_245)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&ipm_laneassit_torquereqstatus_, 0, reinterpret_cast<char*>(&ipm_slastate_) -
      reinterpret_cast<char*>(&ipm_laneassit_torquereqstatus_) + sizeof(ipm_slastate_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&ipm_laneassit_status_, 0, reinterpret_cast<char*>(&ipm_hma_highbeamreq_) -
      reinterpret_cast<char*>(&ipm_laneassit_status_) + sizeof(ipm_hma_highbeamreq_));
  }
  if (_has_bits_[16 / 32] & 983040u) {
    ::memset(&ipm_laneassit_torquereq_, 0, reinterpret_cast<char*>(&ipm_laneassit_warningvibration_) -
      reinterpret_cast<char*>(&ipm_laneassit_torquereq_) + sizeof(ipm_laneassit_warningvibration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ipm_0x245_245::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Ipm_0x245_245)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_torquereqstatusType ipm_laneassit_torquereqstatus = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_IsValid(value)) {
            set_ipm_laneassit_torquereqstatus(static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquereqstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_torquevalidityType ipm_laneassit_torquevalidity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquevalidityType_IsValid(value)) {
            set_ipm_laneassit_torquevalidity(static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquevalidityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_sensitivityType ipm_laneassit_sensitivity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_sensitivityType_IsValid(value)) {
            set_ipm_laneassit_sensitivity(static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_sensitivityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_warningaudioType ipm_laneassit_warningaudio = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningaudioType_IsValid(value)) {
            set_ipm_laneassit_warningaudio(static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningaudioType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_leftvisualizationType ipm_laneassit_leftvisualization = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_IsValid(value)) {
            set_ipm_laneassit_leftvisualization(static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_leftvisualizationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_rightvisualizationType ipm_laneassit_rightvisualization = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_IsValid(value)) {
            set_ipm_laneassit_rightvisualization(static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_rightvisualizationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slaspdlimitunitsType ipm_slaspdlimitunits = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitunitsType_IsValid(value)) {
            set_ipm_slaspdlimitunits(static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitunitsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slastateType ipm_slastate = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ipm_0x245_245_Ipm_slastateType_IsValid(value)) {
            set_ipm_slastate(static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slastateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_statusType ipm_laneassit_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_statusType_IsValid(value)) {
            set_ipm_laneassit_status(static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_statusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slaspdlimitType ipm_slaspdlimit = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitType_IsValid(value)) {
            set_ipm_slaspdlimit(static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_hma_statusType ipm_hma_status = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_statusType_IsValid(value)) {
            set_ipm_hma_status(static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_statusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_tjaica_statusType ipm_tjaica_status = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ipm_0x245_245_Ipm_tjaica_statusType_IsValid(value)) {
            set_ipm_tjaica_status(static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_tjaica_statusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x245 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_rolling_counter_0x245();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x245_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_ldwwarningtypeType ipm_ldwwarningtype = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ipm_0x245_245_Ipm_ldwwarningtypeType_IsValid(value)) {
            set_ipm_ldwwarningtype(static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_ldwwarningtypeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_handsonreqType ipm_laneassit_handsonreq = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_handsonreqType_IsValid(value)) {
            set_ipm_laneassit_handsonreq(static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_handsonreqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_hma_highbeamreqType ipm_hma_highbeamreq = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_highbeamreqType_IsValid(value)) {
            set_ipm_hma_highbeamreq(static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_highbeamreqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x245 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_checksum_0x245();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x245_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ipm_laneassit_torquereq = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u)) {
          set_has_ipm_laneassit_torquereq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ipm_laneassit_torquereq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassittypeType ipm_laneassittype = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassittypeType_IsValid(value)) {
            set_ipm_laneassittype(static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassittypeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_warningvibrationType ipm_laneassit_warningvibration = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningvibrationType_IsValid(value)) {
            set_ipm_laneassit_warningvibration(static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningvibrationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Ipm_0x245_245)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Ipm_0x245_245)
  return false;
#undef DO_
}

void Ipm_0x245_245::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Ipm_0x245_245)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_torquereqstatusType ipm_laneassit_torquereqstatus = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ipm_laneassit_torquereqstatus(), output);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_torquevalidityType ipm_laneassit_torquevalidity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ipm_laneassit_torquevalidity(), output);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_sensitivityType ipm_laneassit_sensitivity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ipm_laneassit_sensitivity(), output);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_warningaudioType ipm_laneassit_warningaudio = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ipm_laneassit_warningaudio(), output);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_leftvisualizationType ipm_laneassit_leftvisualization = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ipm_laneassit_leftvisualization(), output);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_rightvisualizationType ipm_laneassit_rightvisualization = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->ipm_laneassit_rightvisualization(), output);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slaspdlimitunitsType ipm_slaspdlimitunits = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->ipm_slaspdlimitunits(), output);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slastateType ipm_slastate = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->ipm_slastate(), output);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_statusType ipm_laneassit_status = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->ipm_laneassit_status(), output);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slaspdlimitType ipm_slaspdlimit = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->ipm_slaspdlimit(), output);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_hma_statusType ipm_hma_status = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->ipm_hma_status(), output);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_tjaica_statusType ipm_tjaica_status = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->ipm_tjaica_status(), output);
  }

  // optional int32 rolling_counter_0x245 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->rolling_counter_0x245(), output);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_ldwwarningtypeType ipm_ldwwarningtype = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->ipm_ldwwarningtype(), output);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_handsonreqType ipm_laneassit_handsonreq = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->ipm_laneassit_handsonreq(), output);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_hma_highbeamreqType ipm_hma_highbeamreq = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->ipm_hma_highbeamreq(), output);
  }

  // optional int32 checksum_0x245 = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->checksum_0x245(), output);
  }

  // optional double ipm_laneassit_torquereq = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->ipm_laneassit_torquereq(), output);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassittypeType ipm_laneassittype = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->ipm_laneassittype(), output);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_warningvibrationType ipm_laneassit_warningvibration = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->ipm_laneassit_warningvibration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Ipm_0x245_245)
}

::google::protobuf::uint8* Ipm_0x245_245::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Ipm_0x245_245)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_torquereqstatusType ipm_laneassit_torquereqstatus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ipm_laneassit_torquereqstatus(), target);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_torquevalidityType ipm_laneassit_torquevalidity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ipm_laneassit_torquevalidity(), target);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_sensitivityType ipm_laneassit_sensitivity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ipm_laneassit_sensitivity(), target);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_warningaudioType ipm_laneassit_warningaudio = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ipm_laneassit_warningaudio(), target);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_leftvisualizationType ipm_laneassit_leftvisualization = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ipm_laneassit_leftvisualization(), target);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_rightvisualizationType ipm_laneassit_rightvisualization = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->ipm_laneassit_rightvisualization(), target);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slaspdlimitunitsType ipm_slaspdlimitunits = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->ipm_slaspdlimitunits(), target);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slastateType ipm_slastate = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->ipm_slastate(), target);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_statusType ipm_laneassit_status = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->ipm_laneassit_status(), target);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slaspdlimitType ipm_slaspdlimit = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->ipm_slaspdlimit(), target);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_hma_statusType ipm_hma_status = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->ipm_hma_status(), target);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_tjaica_statusType ipm_tjaica_status = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->ipm_tjaica_status(), target);
  }

  // optional int32 rolling_counter_0x245 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->rolling_counter_0x245(), target);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_ldwwarningtypeType ipm_ldwwarningtype = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->ipm_ldwwarningtype(), target);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_handsonreqType ipm_laneassit_handsonreq = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->ipm_laneassit_handsonreq(), target);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_hma_highbeamreqType ipm_hma_highbeamreq = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->ipm_hma_highbeamreq(), target);
  }

  // optional int32 checksum_0x245 = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->checksum_0x245(), target);
  }

  // optional double ipm_laneassit_torquereq = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->ipm_laneassit_torquereq(), target);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassittypeType ipm_laneassittype = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->ipm_laneassittype(), target);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_warningvibrationType ipm_laneassit_warningvibration = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->ipm_laneassit_warningvibration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Ipm_0x245_245)
  return target;
}

size_t Ipm_0x245_245::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Ipm_0x245_245)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_torquereqstatusType ipm_laneassit_torquereqstatus = 1;
    if (has_ipm_laneassit_torquereqstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ipm_laneassit_torquereqstatus());
    }

    // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_torquevalidityType ipm_laneassit_torquevalidity = 2;
    if (has_ipm_laneassit_torquevalidity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ipm_laneassit_torquevalidity());
    }

    // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_sensitivityType ipm_laneassit_sensitivity = 3;
    if (has_ipm_laneassit_sensitivity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ipm_laneassit_sensitivity());
    }

    // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_warningaudioType ipm_laneassit_warningaudio = 4;
    if (has_ipm_laneassit_warningaudio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ipm_laneassit_warningaudio());
    }

    // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_leftvisualizationType ipm_laneassit_leftvisualization = 5;
    if (has_ipm_laneassit_leftvisualization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ipm_laneassit_leftvisualization());
    }

    // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_rightvisualizationType ipm_laneassit_rightvisualization = 6;
    if (has_ipm_laneassit_rightvisualization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ipm_laneassit_rightvisualization());
    }

    // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slaspdlimitunitsType ipm_slaspdlimitunits = 7;
    if (has_ipm_slaspdlimitunits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ipm_slaspdlimitunits());
    }

    // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slastateType ipm_slastate = 8;
    if (has_ipm_slastate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ipm_slastate());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_statusType ipm_laneassit_status = 9;
    if (has_ipm_laneassit_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ipm_laneassit_status());
    }

    // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slaspdlimitType ipm_slaspdlimit = 10;
    if (has_ipm_slaspdlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ipm_slaspdlimit());
    }

    // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_hma_statusType ipm_hma_status = 11;
    if (has_ipm_hma_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ipm_hma_status());
    }

    // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_tjaica_statusType ipm_tjaica_status = 12;
    if (has_ipm_tjaica_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ipm_tjaica_status());
    }

    // optional int32 rolling_counter_0x245 = 13;
    if (has_rolling_counter_0x245()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x245());
    }

    // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_ldwwarningtypeType ipm_ldwwarningtype = 14;
    if (has_ipm_ldwwarningtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ipm_ldwwarningtype());
    }

    // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_handsonreqType ipm_laneassit_handsonreq = 15;
    if (has_ipm_laneassit_handsonreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ipm_laneassit_handsonreq());
    }

    // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_hma_highbeamreqType ipm_hma_highbeamreq = 16;
    if (has_ipm_hma_highbeamreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ipm_hma_highbeamreq());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional double ipm_laneassit_torquereq = 18;
    if (has_ipm_laneassit_torquereq()) {
      total_size += 2 + 8;
    }

    // optional int32 checksum_0x245 = 17;
    if (has_checksum_0x245()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x245());
    }

    // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassittypeType ipm_laneassittype = 19;
    if (has_ipm_laneassittype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ipm_laneassittype());
    }

    // optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_warningvibrationType ipm_laneassit_warningvibration = 20;
    if (has_ipm_laneassit_warningvibration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ipm_laneassit_warningvibration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ipm_0x245_245::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Ipm_0x245_245)
  GOOGLE_DCHECK_NE(&from, this);
  const Ipm_0x245_245* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ipm_0x245_245>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Ipm_0x245_245)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Ipm_0x245_245)
    MergeFrom(*source);
  }
}

void Ipm_0x245_245::MergeFrom(const Ipm_0x245_245& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Ipm_0x245_245)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      ipm_laneassit_torquereqstatus_ = from.ipm_laneassit_torquereqstatus_;
    }
    if (cached_has_bits & 0x00000002u) {
      ipm_laneassit_torquevalidity_ = from.ipm_laneassit_torquevalidity_;
    }
    if (cached_has_bits & 0x00000004u) {
      ipm_laneassit_sensitivity_ = from.ipm_laneassit_sensitivity_;
    }
    if (cached_has_bits & 0x00000008u) {
      ipm_laneassit_warningaudio_ = from.ipm_laneassit_warningaudio_;
    }
    if (cached_has_bits & 0x00000010u) {
      ipm_laneassit_leftvisualization_ = from.ipm_laneassit_leftvisualization_;
    }
    if (cached_has_bits & 0x00000020u) {
      ipm_laneassit_rightvisualization_ = from.ipm_laneassit_rightvisualization_;
    }
    if (cached_has_bits & 0x00000040u) {
      ipm_slaspdlimitunits_ = from.ipm_slaspdlimitunits_;
    }
    if (cached_has_bits & 0x00000080u) {
      ipm_slastate_ = from.ipm_slastate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      ipm_laneassit_status_ = from.ipm_laneassit_status_;
    }
    if (cached_has_bits & 0x00000200u) {
      ipm_slaspdlimit_ = from.ipm_slaspdlimit_;
    }
    if (cached_has_bits & 0x00000400u) {
      ipm_hma_status_ = from.ipm_hma_status_;
    }
    if (cached_has_bits & 0x00000800u) {
      ipm_tjaica_status_ = from.ipm_tjaica_status_;
    }
    if (cached_has_bits & 0x00001000u) {
      rolling_counter_0x245_ = from.rolling_counter_0x245_;
    }
    if (cached_has_bits & 0x00002000u) {
      ipm_ldwwarningtype_ = from.ipm_ldwwarningtype_;
    }
    if (cached_has_bits & 0x00004000u) {
      ipm_laneassit_handsonreq_ = from.ipm_laneassit_handsonreq_;
    }
    if (cached_has_bits & 0x00008000u) {
      ipm_hma_highbeamreq_ = from.ipm_hma_highbeamreq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      ipm_laneassit_torquereq_ = from.ipm_laneassit_torquereq_;
    }
    if (cached_has_bits & 0x00020000u) {
      checksum_0x245_ = from.checksum_0x245_;
    }
    if (cached_has_bits & 0x00040000u) {
      ipm_laneassittype_ = from.ipm_laneassittype_;
    }
    if (cached_has_bits & 0x00080000u) {
      ipm_laneassit_warningvibration_ = from.ipm_laneassit_warningvibration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ipm_0x245_245::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Ipm_0x245_245)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ipm_0x245_245::CopyFrom(const Ipm_0x245_245& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Ipm_0x245_245)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ipm_0x245_245::IsInitialized() const {
  return true;
}

void Ipm_0x245_245::Swap(Ipm_0x245_245* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ipm_0x245_245::InternalSwap(Ipm_0x245_245* other) {
  std::swap(ipm_laneassit_torquereqstatus_, other->ipm_laneassit_torquereqstatus_);
  std::swap(ipm_laneassit_torquevalidity_, other->ipm_laneassit_torquevalidity_);
  std::swap(ipm_laneassit_sensitivity_, other->ipm_laneassit_sensitivity_);
  std::swap(ipm_laneassit_warningaudio_, other->ipm_laneassit_warningaudio_);
  std::swap(ipm_laneassit_leftvisualization_, other->ipm_laneassit_leftvisualization_);
  std::swap(ipm_laneassit_rightvisualization_, other->ipm_laneassit_rightvisualization_);
  std::swap(ipm_slaspdlimitunits_, other->ipm_slaspdlimitunits_);
  std::swap(ipm_slastate_, other->ipm_slastate_);
  std::swap(ipm_laneassit_status_, other->ipm_laneassit_status_);
  std::swap(ipm_slaspdlimit_, other->ipm_slaspdlimit_);
  std::swap(ipm_hma_status_, other->ipm_hma_status_);
  std::swap(ipm_tjaica_status_, other->ipm_tjaica_status_);
  std::swap(rolling_counter_0x245_, other->rolling_counter_0x245_);
  std::swap(ipm_ldwwarningtype_, other->ipm_ldwwarningtype_);
  std::swap(ipm_laneassit_handsonreq_, other->ipm_laneassit_handsonreq_);
  std::swap(ipm_hma_highbeamreq_, other->ipm_hma_highbeamreq_);
  std::swap(ipm_laneassit_torquereq_, other->ipm_laneassit_torquereq_);
  std::swap(checksum_0x245_, other->checksum_0x245_);
  std::swap(ipm_laneassittype_, other->ipm_laneassittype_);
  std::swap(ipm_laneassit_warningvibration_, other->ipm_laneassit_warningvibration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ipm_0x245_245::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ipm_0x245_245

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_torquereqstatusType ipm_laneassit_torquereqstatus = 1;
bool Ipm_0x245_245::has_ipm_laneassit_torquereqstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ipm_0x245_245::set_has_ipm_laneassit_torquereqstatus() {
  _has_bits_[0] |= 0x00000001u;
}
void Ipm_0x245_245::clear_has_ipm_laneassit_torquereqstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ipm_0x245_245::clear_ipm_laneassit_torquereqstatus() {
  ipm_laneassit_torquereqstatus_ = 0;
  clear_has_ipm_laneassit_torquereqstatus();
}
::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquereqstatusType Ipm_0x245_245::ipm_laneassit_torquereqstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_torquereqstatus)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquereqstatusType >(ipm_laneassit_torquereqstatus_);
}
void Ipm_0x245_245::set_ipm_laneassit_torquereqstatus(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquereqstatusType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquereqstatusType_IsValid(value));
  set_has_ipm_laneassit_torquereqstatus();
  ipm_laneassit_torquereqstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_torquereqstatus)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_torquevalidityType ipm_laneassit_torquevalidity = 2;
bool Ipm_0x245_245::has_ipm_laneassit_torquevalidity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ipm_0x245_245::set_has_ipm_laneassit_torquevalidity() {
  _has_bits_[0] |= 0x00000002u;
}
void Ipm_0x245_245::clear_has_ipm_laneassit_torquevalidity() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ipm_0x245_245::clear_ipm_laneassit_torquevalidity() {
  ipm_laneassit_torquevalidity_ = 0;
  clear_has_ipm_laneassit_torquevalidity();
}
::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquevalidityType Ipm_0x245_245::ipm_laneassit_torquevalidity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_torquevalidity)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquevalidityType >(ipm_laneassit_torquevalidity_);
}
void Ipm_0x245_245::set_ipm_laneassit_torquevalidity(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquevalidityType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_torquevalidityType_IsValid(value));
  set_has_ipm_laneassit_torquevalidity();
  ipm_laneassit_torquevalidity_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_torquevalidity)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_sensitivityType ipm_laneassit_sensitivity = 3;
bool Ipm_0x245_245::has_ipm_laneassit_sensitivity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ipm_0x245_245::set_has_ipm_laneassit_sensitivity() {
  _has_bits_[0] |= 0x00000004u;
}
void Ipm_0x245_245::clear_has_ipm_laneassit_sensitivity() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ipm_0x245_245::clear_ipm_laneassit_sensitivity() {
  ipm_laneassit_sensitivity_ = 0;
  clear_has_ipm_laneassit_sensitivity();
}
::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_sensitivityType Ipm_0x245_245::ipm_laneassit_sensitivity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_sensitivity)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_sensitivityType >(ipm_laneassit_sensitivity_);
}
void Ipm_0x245_245::set_ipm_laneassit_sensitivity(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_sensitivityType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_sensitivityType_IsValid(value));
  set_has_ipm_laneassit_sensitivity();
  ipm_laneassit_sensitivity_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_sensitivity)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_warningaudioType ipm_laneassit_warningaudio = 4;
bool Ipm_0x245_245::has_ipm_laneassit_warningaudio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Ipm_0x245_245::set_has_ipm_laneassit_warningaudio() {
  _has_bits_[0] |= 0x00000008u;
}
void Ipm_0x245_245::clear_has_ipm_laneassit_warningaudio() {
  _has_bits_[0] &= ~0x00000008u;
}
void Ipm_0x245_245::clear_ipm_laneassit_warningaudio() {
  ipm_laneassit_warningaudio_ = 0;
  clear_has_ipm_laneassit_warningaudio();
}
::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningaudioType Ipm_0x245_245::ipm_laneassit_warningaudio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_warningaudio)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningaudioType >(ipm_laneassit_warningaudio_);
}
void Ipm_0x245_245::set_ipm_laneassit_warningaudio(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningaudioType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningaudioType_IsValid(value));
  set_has_ipm_laneassit_warningaudio();
  ipm_laneassit_warningaudio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_warningaudio)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_leftvisualizationType ipm_laneassit_leftvisualization = 5;
bool Ipm_0x245_245::has_ipm_laneassit_leftvisualization() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Ipm_0x245_245::set_has_ipm_laneassit_leftvisualization() {
  _has_bits_[0] |= 0x00000010u;
}
void Ipm_0x245_245::clear_has_ipm_laneassit_leftvisualization() {
  _has_bits_[0] &= ~0x00000010u;
}
void Ipm_0x245_245::clear_ipm_laneassit_leftvisualization() {
  ipm_laneassit_leftvisualization_ = 0;
  clear_has_ipm_laneassit_leftvisualization();
}
::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_leftvisualizationType Ipm_0x245_245::ipm_laneassit_leftvisualization() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_leftvisualization)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_leftvisualizationType >(ipm_laneassit_leftvisualization_);
}
void Ipm_0x245_245::set_ipm_laneassit_leftvisualization(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_leftvisualizationType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_leftvisualizationType_IsValid(value));
  set_has_ipm_laneassit_leftvisualization();
  ipm_laneassit_leftvisualization_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_leftvisualization)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_rightvisualizationType ipm_laneassit_rightvisualization = 6;
bool Ipm_0x245_245::has_ipm_laneassit_rightvisualization() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Ipm_0x245_245::set_has_ipm_laneassit_rightvisualization() {
  _has_bits_[0] |= 0x00000020u;
}
void Ipm_0x245_245::clear_has_ipm_laneassit_rightvisualization() {
  _has_bits_[0] &= ~0x00000020u;
}
void Ipm_0x245_245::clear_ipm_laneassit_rightvisualization() {
  ipm_laneassit_rightvisualization_ = 0;
  clear_has_ipm_laneassit_rightvisualization();
}
::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_rightvisualizationType Ipm_0x245_245::ipm_laneassit_rightvisualization() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_rightvisualization)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_rightvisualizationType >(ipm_laneassit_rightvisualization_);
}
void Ipm_0x245_245::set_ipm_laneassit_rightvisualization(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_rightvisualizationType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_rightvisualizationType_IsValid(value));
  set_has_ipm_laneassit_rightvisualization();
  ipm_laneassit_rightvisualization_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_rightvisualization)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slaspdlimitunitsType ipm_slaspdlimitunits = 7;
bool Ipm_0x245_245::has_ipm_slaspdlimitunits() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Ipm_0x245_245::set_has_ipm_slaspdlimitunits() {
  _has_bits_[0] |= 0x00000040u;
}
void Ipm_0x245_245::clear_has_ipm_slaspdlimitunits() {
  _has_bits_[0] &= ~0x00000040u;
}
void Ipm_0x245_245::clear_ipm_slaspdlimitunits() {
  ipm_slaspdlimitunits_ = 0;
  clear_has_ipm_slaspdlimitunits();
}
::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitunitsType Ipm_0x245_245::ipm_slaspdlimitunits() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_slaspdlimitunits)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitunitsType >(ipm_slaspdlimitunits_);
}
void Ipm_0x245_245::set_ipm_slaspdlimitunits(::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitunitsType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitunitsType_IsValid(value));
  set_has_ipm_slaspdlimitunits();
  ipm_slaspdlimitunits_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_slaspdlimitunits)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slastateType ipm_slastate = 8;
bool Ipm_0x245_245::has_ipm_slastate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Ipm_0x245_245::set_has_ipm_slastate() {
  _has_bits_[0] |= 0x00000080u;
}
void Ipm_0x245_245::clear_has_ipm_slastate() {
  _has_bits_[0] &= ~0x00000080u;
}
void Ipm_0x245_245::clear_ipm_slastate() {
  ipm_slastate_ = 0;
  clear_has_ipm_slastate();
}
::jmc_auto::canbus::Ipm_0x245_245_Ipm_slastateType Ipm_0x245_245::ipm_slastate() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_slastate)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slastateType >(ipm_slastate_);
}
void Ipm_0x245_245::set_ipm_slastate(::jmc_auto::canbus::Ipm_0x245_245_Ipm_slastateType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_slastateType_IsValid(value));
  set_has_ipm_slastate();
  ipm_slastate_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_slastate)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_statusType ipm_laneassit_status = 9;
bool Ipm_0x245_245::has_ipm_laneassit_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Ipm_0x245_245::set_has_ipm_laneassit_status() {
  _has_bits_[0] |= 0x00000100u;
}
void Ipm_0x245_245::clear_has_ipm_laneassit_status() {
  _has_bits_[0] &= ~0x00000100u;
}
void Ipm_0x245_245::clear_ipm_laneassit_status() {
  ipm_laneassit_status_ = 0;
  clear_has_ipm_laneassit_status();
}
::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_statusType Ipm_0x245_245::ipm_laneassit_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_status)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_statusType >(ipm_laneassit_status_);
}
void Ipm_0x245_245::set_ipm_laneassit_status(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_statusType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_statusType_IsValid(value));
  set_has_ipm_laneassit_status();
  ipm_laneassit_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_status)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_slaspdlimitType ipm_slaspdlimit = 10;
bool Ipm_0x245_245::has_ipm_slaspdlimit() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Ipm_0x245_245::set_has_ipm_slaspdlimit() {
  _has_bits_[0] |= 0x00000200u;
}
void Ipm_0x245_245::clear_has_ipm_slaspdlimit() {
  _has_bits_[0] &= ~0x00000200u;
}
void Ipm_0x245_245::clear_ipm_slaspdlimit() {
  ipm_slaspdlimit_ = 0;
  clear_has_ipm_slaspdlimit();
}
::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitType Ipm_0x245_245::ipm_slaspdlimit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_slaspdlimit)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitType >(ipm_slaspdlimit_);
}
void Ipm_0x245_245::set_ipm_slaspdlimit(::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_slaspdlimitType_IsValid(value));
  set_has_ipm_slaspdlimit();
  ipm_slaspdlimit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_slaspdlimit)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_hma_statusType ipm_hma_status = 11;
bool Ipm_0x245_245::has_ipm_hma_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Ipm_0x245_245::set_has_ipm_hma_status() {
  _has_bits_[0] |= 0x00000400u;
}
void Ipm_0x245_245::clear_has_ipm_hma_status() {
  _has_bits_[0] &= ~0x00000400u;
}
void Ipm_0x245_245::clear_ipm_hma_status() {
  ipm_hma_status_ = 0;
  clear_has_ipm_hma_status();
}
::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_statusType Ipm_0x245_245::ipm_hma_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_hma_status)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_statusType >(ipm_hma_status_);
}
void Ipm_0x245_245::set_ipm_hma_status(::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_statusType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_statusType_IsValid(value));
  set_has_ipm_hma_status();
  ipm_hma_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_hma_status)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_tjaica_statusType ipm_tjaica_status = 12;
bool Ipm_0x245_245::has_ipm_tjaica_status() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Ipm_0x245_245::set_has_ipm_tjaica_status() {
  _has_bits_[0] |= 0x00000800u;
}
void Ipm_0x245_245::clear_has_ipm_tjaica_status() {
  _has_bits_[0] &= ~0x00000800u;
}
void Ipm_0x245_245::clear_ipm_tjaica_status() {
  ipm_tjaica_status_ = 0;
  clear_has_ipm_tjaica_status();
}
::jmc_auto::canbus::Ipm_0x245_245_Ipm_tjaica_statusType Ipm_0x245_245::ipm_tjaica_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_tjaica_status)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_tjaica_statusType >(ipm_tjaica_status_);
}
void Ipm_0x245_245::set_ipm_tjaica_status(::jmc_auto::canbus::Ipm_0x245_245_Ipm_tjaica_statusType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_tjaica_statusType_IsValid(value));
  set_has_ipm_tjaica_status();
  ipm_tjaica_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_tjaica_status)
}

// optional int32 rolling_counter_0x245 = 13;
bool Ipm_0x245_245::has_rolling_counter_0x245() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Ipm_0x245_245::set_has_rolling_counter_0x245() {
  _has_bits_[0] |= 0x00001000u;
}
void Ipm_0x245_245::clear_has_rolling_counter_0x245() {
  _has_bits_[0] &= ~0x00001000u;
}
void Ipm_0x245_245::clear_rolling_counter_0x245() {
  rolling_counter_0x245_ = 0;
  clear_has_rolling_counter_0x245();
}
::google::protobuf::int32 Ipm_0x245_245::rolling_counter_0x245() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.rolling_counter_0x245)
  return rolling_counter_0x245_;
}
void Ipm_0x245_245::set_rolling_counter_0x245(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x245();
  rolling_counter_0x245_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.rolling_counter_0x245)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_ldwwarningtypeType ipm_ldwwarningtype = 14;
bool Ipm_0x245_245::has_ipm_ldwwarningtype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Ipm_0x245_245::set_has_ipm_ldwwarningtype() {
  _has_bits_[0] |= 0x00002000u;
}
void Ipm_0x245_245::clear_has_ipm_ldwwarningtype() {
  _has_bits_[0] &= ~0x00002000u;
}
void Ipm_0x245_245::clear_ipm_ldwwarningtype() {
  ipm_ldwwarningtype_ = 0;
  clear_has_ipm_ldwwarningtype();
}
::jmc_auto::canbus::Ipm_0x245_245_Ipm_ldwwarningtypeType Ipm_0x245_245::ipm_ldwwarningtype() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_ldwwarningtype)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_ldwwarningtypeType >(ipm_ldwwarningtype_);
}
void Ipm_0x245_245::set_ipm_ldwwarningtype(::jmc_auto::canbus::Ipm_0x245_245_Ipm_ldwwarningtypeType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_ldwwarningtypeType_IsValid(value));
  set_has_ipm_ldwwarningtype();
  ipm_ldwwarningtype_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_ldwwarningtype)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_handsonreqType ipm_laneassit_handsonreq = 15;
bool Ipm_0x245_245::has_ipm_laneassit_handsonreq() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Ipm_0x245_245::set_has_ipm_laneassit_handsonreq() {
  _has_bits_[0] |= 0x00004000u;
}
void Ipm_0x245_245::clear_has_ipm_laneassit_handsonreq() {
  _has_bits_[0] &= ~0x00004000u;
}
void Ipm_0x245_245::clear_ipm_laneassit_handsonreq() {
  ipm_laneassit_handsonreq_ = 0;
  clear_has_ipm_laneassit_handsonreq();
}
::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_handsonreqType Ipm_0x245_245::ipm_laneassit_handsonreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_handsonreq)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_handsonreqType >(ipm_laneassit_handsonreq_);
}
void Ipm_0x245_245::set_ipm_laneassit_handsonreq(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_handsonreqType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_handsonreqType_IsValid(value));
  set_has_ipm_laneassit_handsonreq();
  ipm_laneassit_handsonreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_handsonreq)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_hma_highbeamreqType ipm_hma_highbeamreq = 16;
bool Ipm_0x245_245::has_ipm_hma_highbeamreq() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Ipm_0x245_245::set_has_ipm_hma_highbeamreq() {
  _has_bits_[0] |= 0x00008000u;
}
void Ipm_0x245_245::clear_has_ipm_hma_highbeamreq() {
  _has_bits_[0] &= ~0x00008000u;
}
void Ipm_0x245_245::clear_ipm_hma_highbeamreq() {
  ipm_hma_highbeamreq_ = 0;
  clear_has_ipm_hma_highbeamreq();
}
::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_highbeamreqType Ipm_0x245_245::ipm_hma_highbeamreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_hma_highbeamreq)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_highbeamreqType >(ipm_hma_highbeamreq_);
}
void Ipm_0x245_245::set_ipm_hma_highbeamreq(::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_highbeamreqType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_hma_highbeamreqType_IsValid(value));
  set_has_ipm_hma_highbeamreq();
  ipm_hma_highbeamreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_hma_highbeamreq)
}

// optional int32 checksum_0x245 = 17;
bool Ipm_0x245_245::has_checksum_0x245() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Ipm_0x245_245::set_has_checksum_0x245() {
  _has_bits_[0] |= 0x00020000u;
}
void Ipm_0x245_245::clear_has_checksum_0x245() {
  _has_bits_[0] &= ~0x00020000u;
}
void Ipm_0x245_245::clear_checksum_0x245() {
  checksum_0x245_ = 0;
  clear_has_checksum_0x245();
}
::google::protobuf::int32 Ipm_0x245_245::checksum_0x245() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.checksum_0x245)
  return checksum_0x245_;
}
void Ipm_0x245_245::set_checksum_0x245(::google::protobuf::int32 value) {
  set_has_checksum_0x245();
  checksum_0x245_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.checksum_0x245)
}

// optional double ipm_laneassit_torquereq = 18;
bool Ipm_0x245_245::has_ipm_laneassit_torquereq() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Ipm_0x245_245::set_has_ipm_laneassit_torquereq() {
  _has_bits_[0] |= 0x00010000u;
}
void Ipm_0x245_245::clear_has_ipm_laneassit_torquereq() {
  _has_bits_[0] &= ~0x00010000u;
}
void Ipm_0x245_245::clear_ipm_laneassit_torquereq() {
  ipm_laneassit_torquereq_ = 0;
  clear_has_ipm_laneassit_torquereq();
}
double Ipm_0x245_245::ipm_laneassit_torquereq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_torquereq)
  return ipm_laneassit_torquereq_;
}
void Ipm_0x245_245::set_ipm_laneassit_torquereq(double value) {
  set_has_ipm_laneassit_torquereq();
  ipm_laneassit_torquereq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_torquereq)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassittypeType ipm_laneassittype = 19;
bool Ipm_0x245_245::has_ipm_laneassittype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Ipm_0x245_245::set_has_ipm_laneassittype() {
  _has_bits_[0] |= 0x00040000u;
}
void Ipm_0x245_245::clear_has_ipm_laneassittype() {
  _has_bits_[0] &= ~0x00040000u;
}
void Ipm_0x245_245::clear_ipm_laneassittype() {
  ipm_laneassittype_ = 0;
  clear_has_ipm_laneassittype();
}
::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassittypeType Ipm_0x245_245::ipm_laneassittype() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassittype)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassittypeType >(ipm_laneassittype_);
}
void Ipm_0x245_245::set_ipm_laneassittype(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassittypeType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassittypeType_IsValid(value));
  set_has_ipm_laneassittype();
  ipm_laneassittype_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassittype)
}

// optional .jmc_auto.canbus.Ipm_0x245_245.Ipm_laneassit_warningvibrationType ipm_laneassit_warningvibration = 20;
bool Ipm_0x245_245::has_ipm_laneassit_warningvibration() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Ipm_0x245_245::set_has_ipm_laneassit_warningvibration() {
  _has_bits_[0] |= 0x00080000u;
}
void Ipm_0x245_245::clear_has_ipm_laneassit_warningvibration() {
  _has_bits_[0] &= ~0x00080000u;
}
void Ipm_0x245_245::clear_ipm_laneassit_warningvibration() {
  ipm_laneassit_warningvibration_ = 0;
  clear_has_ipm_laneassit_warningvibration();
}
::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningvibrationType Ipm_0x245_245::ipm_laneassit_warningvibration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_warningvibration)
  return static_cast< ::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningvibrationType >(ipm_laneassit_warningvibration_);
}
void Ipm_0x245_245::set_ipm_laneassit_warningvibration(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningvibrationType value) {
  assert(::jmc_auto::canbus::Ipm_0x245_245_Ipm_laneassit_warningvibrationType_IsValid(value));
  set_has_ipm_laneassit_warningvibration();
  ipm_laneassit_warningvibration_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ipm_0x245_245.ipm_laneassit_warningvibration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gw_ems_tqwhl_0x111_111::kEmsIndicatedrealengtorqwhlFieldNumber;
const int Gw_ems_tqwhl_0x111_111::kEmsIndicatedaccmesgerrorFieldNumber;
const int Gw_ems_tqwhl_0x111_111::kEmsIndicateddriveroverrideFieldNumber;
const int Gw_ems_tqwhl_0x111_111::kEmsIndicateddriverreqtorqFieldNumber;
const int Gw_ems_tqwhl_0x111_111::kDcmEmsRollingcounter0X111FieldNumber;
const int Gw_ems_tqwhl_0x111_111::kDcmEmsChecksum0X111FieldNumber;
const int Gw_ems_tqwhl_0x111_111::kEmsIndicateddriverreqtorqwhlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gw_ems_tqwhl_0x111_111::Gw_ems_tqwhl_0x111_111()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
}
Gw_ems_tqwhl_0x111_111::Gw_ems_tqwhl_0x111_111(const Gw_ems_tqwhl_0x111_111& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ems_indicatedrealengtorqwhl_, &from.ems_indicatedrealengtorqwhl_,
    reinterpret_cast<char*>(&ems_indicateddriverreqtorqwhl_) -
    reinterpret_cast<char*>(&ems_indicatedrealengtorqwhl_) + sizeof(ems_indicateddriverreqtorqwhl_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
}

void Gw_ems_tqwhl_0x111_111::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ems_indicatedrealengtorqwhl_, 0, reinterpret_cast<char*>(&ems_indicateddriverreqtorqwhl_) -
    reinterpret_cast<char*>(&ems_indicatedrealengtorqwhl_) + sizeof(ems_indicateddriverreqtorqwhl_));
}

Gw_ems_tqwhl_0x111_111::~Gw_ems_tqwhl_0x111_111() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
  SharedDtor();
}

void Gw_ems_tqwhl_0x111_111::SharedDtor() {
}

void Gw_ems_tqwhl_0x111_111::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gw_ems_tqwhl_0x111_111::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gw_ems_tqwhl_0x111_111& Gw_ems_tqwhl_0x111_111::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gw_ems_tqwhl_0x111_111* Gw_ems_tqwhl_0x111_111::New(::google::protobuf::Arena* arena) const {
  Gw_ems_tqwhl_0x111_111* n = new Gw_ems_tqwhl_0x111_111;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gw_ems_tqwhl_0x111_111::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&ems_indicatedrealengtorqwhl_, 0, reinterpret_cast<char*>(&ems_indicateddriverreqtorqwhl_) -
      reinterpret_cast<char*>(&ems_indicatedrealengtorqwhl_) + sizeof(ems_indicateddriverreqtorqwhl_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gw_ems_tqwhl_0x111_111::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ems_indicatedrealengtorqwhl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ems_indicatedrealengtorqwhl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ems_indicatedrealengtorqwhl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.Ems_indicatedaccmesgerrorType ems_indicatedaccmesgerror = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_IsValid(value)) {
            set_ems_indicatedaccmesgerror(static_cast< ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.Ems_indicateddriveroverrideType ems_indicateddriveroverride = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_IsValid(value)) {
            set_ems_indicateddriveroverride(static_cast< ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ems_indicateddriverreqtorq = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_ems_indicateddriverreqtorq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ems_indicateddriverreqtorq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dcm_ems_rollingcounter_0x111 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_dcm_ems_rollingcounter_0x111();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dcm_ems_rollingcounter_0x111_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dcm_ems_checksum_0x111 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_dcm_ems_checksum_0x111();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dcm_ems_checksum_0x111_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ems_indicateddriverreqtorqwhl = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_ems_indicateddriverreqtorqwhl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ems_indicateddriverreqtorqwhl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
  return false;
#undef DO_
}

void Gw_ems_tqwhl_0x111_111::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ems_indicatedrealengtorqwhl = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ems_indicatedrealengtorqwhl(), output);
  }

  // optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.Ems_indicatedaccmesgerrorType ems_indicatedaccmesgerror = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ems_indicatedaccmesgerror(), output);
  }

  // optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.Ems_indicateddriveroverrideType ems_indicateddriveroverride = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ems_indicateddriveroverride(), output);
  }

  // optional double ems_indicateddriverreqtorq = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ems_indicateddriverreqtorq(), output);
  }

  // optional int32 dcm_ems_rollingcounter_0x111 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dcm_ems_rollingcounter_0x111(), output);
  }

  // optional int32 dcm_ems_checksum_0x111 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dcm_ems_checksum_0x111(), output);
  }

  // optional int32 ems_indicateddriverreqtorqwhl = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ems_indicateddriverreqtorqwhl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
}

::google::protobuf::uint8* Gw_ems_tqwhl_0x111_111::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ems_indicatedrealengtorqwhl = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ems_indicatedrealengtorqwhl(), target);
  }

  // optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.Ems_indicatedaccmesgerrorType ems_indicatedaccmesgerror = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ems_indicatedaccmesgerror(), target);
  }

  // optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.Ems_indicateddriveroverrideType ems_indicateddriveroverride = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ems_indicateddriveroverride(), target);
  }

  // optional double ems_indicateddriverreqtorq = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ems_indicateddriverreqtorq(), target);
  }

  // optional int32 dcm_ems_rollingcounter_0x111 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dcm_ems_rollingcounter_0x111(), target);
  }

  // optional int32 dcm_ems_checksum_0x111 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dcm_ems_checksum_0x111(), target);
  }

  // optional int32 ems_indicateddriverreqtorqwhl = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ems_indicateddriverreqtorqwhl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
  return target;
}

size_t Gw_ems_tqwhl_0x111_111::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 ems_indicatedrealengtorqwhl = 1;
    if (has_ems_indicatedrealengtorqwhl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ems_indicatedrealengtorqwhl());
    }

    // optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.Ems_indicatedaccmesgerrorType ems_indicatedaccmesgerror = 2;
    if (has_ems_indicatedaccmesgerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ems_indicatedaccmesgerror());
    }

    // optional double ems_indicateddriverreqtorq = 4;
    if (has_ems_indicateddriverreqtorq()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.Ems_indicateddriveroverrideType ems_indicateddriveroverride = 3;
    if (has_ems_indicateddriveroverride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ems_indicateddriveroverride());
    }

    // optional int32 dcm_ems_rollingcounter_0x111 = 5;
    if (has_dcm_ems_rollingcounter_0x111()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dcm_ems_rollingcounter_0x111());
    }

    // optional int32 dcm_ems_checksum_0x111 = 6;
    if (has_dcm_ems_checksum_0x111()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dcm_ems_checksum_0x111());
    }

    // optional int32 ems_indicateddriverreqtorqwhl = 7;
    if (has_ems_indicateddriverreqtorqwhl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ems_indicateddriverreqtorqwhl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gw_ems_tqwhl_0x111_111::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
  GOOGLE_DCHECK_NE(&from, this);
  const Gw_ems_tqwhl_0x111_111* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gw_ems_tqwhl_0x111_111>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
    MergeFrom(*source);
  }
}

void Gw_ems_tqwhl_0x111_111::MergeFrom(const Gw_ems_tqwhl_0x111_111& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      ems_indicatedrealengtorqwhl_ = from.ems_indicatedrealengtorqwhl_;
    }
    if (cached_has_bits & 0x00000002u) {
      ems_indicatedaccmesgerror_ = from.ems_indicatedaccmesgerror_;
    }
    if (cached_has_bits & 0x00000004u) {
      ems_indicateddriverreqtorq_ = from.ems_indicateddriverreqtorq_;
    }
    if (cached_has_bits & 0x00000008u) {
      ems_indicateddriveroverride_ = from.ems_indicateddriveroverride_;
    }
    if (cached_has_bits & 0x00000010u) {
      dcm_ems_rollingcounter_0x111_ = from.dcm_ems_rollingcounter_0x111_;
    }
    if (cached_has_bits & 0x00000020u) {
      dcm_ems_checksum_0x111_ = from.dcm_ems_checksum_0x111_;
    }
    if (cached_has_bits & 0x00000040u) {
      ems_indicateddriverreqtorqwhl_ = from.ems_indicateddriverreqtorqwhl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gw_ems_tqwhl_0x111_111::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gw_ems_tqwhl_0x111_111::CopyFrom(const Gw_ems_tqwhl_0x111_111& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gw_ems_tqwhl_0x111_111::IsInitialized() const {
  return true;
}

void Gw_ems_tqwhl_0x111_111::Swap(Gw_ems_tqwhl_0x111_111* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gw_ems_tqwhl_0x111_111::InternalSwap(Gw_ems_tqwhl_0x111_111* other) {
  std::swap(ems_indicatedrealengtorqwhl_, other->ems_indicatedrealengtorqwhl_);
  std::swap(ems_indicatedaccmesgerror_, other->ems_indicatedaccmesgerror_);
  std::swap(ems_indicateddriverreqtorq_, other->ems_indicateddriverreqtorq_);
  std::swap(ems_indicateddriveroverride_, other->ems_indicateddriveroverride_);
  std::swap(dcm_ems_rollingcounter_0x111_, other->dcm_ems_rollingcounter_0x111_);
  std::swap(dcm_ems_checksum_0x111_, other->dcm_ems_checksum_0x111_);
  std::swap(ems_indicateddriverreqtorqwhl_, other->ems_indicateddriverreqtorqwhl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gw_ems_tqwhl_0x111_111::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gw_ems_tqwhl_0x111_111

// optional int32 ems_indicatedrealengtorqwhl = 1;
bool Gw_ems_tqwhl_0x111_111::has_ems_indicatedrealengtorqwhl() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gw_ems_tqwhl_0x111_111::set_has_ems_indicatedrealengtorqwhl() {
  _has_bits_[0] |= 0x00000001u;
}
void Gw_ems_tqwhl_0x111_111::clear_has_ems_indicatedrealengtorqwhl() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gw_ems_tqwhl_0x111_111::clear_ems_indicatedrealengtorqwhl() {
  ems_indicatedrealengtorqwhl_ = 0;
  clear_has_ems_indicatedrealengtorqwhl();
}
::google::protobuf::int32 Gw_ems_tqwhl_0x111_111::ems_indicatedrealengtorqwhl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicatedrealengtorqwhl)
  return ems_indicatedrealengtorqwhl_;
}
void Gw_ems_tqwhl_0x111_111::set_ems_indicatedrealengtorqwhl(::google::protobuf::int32 value) {
  set_has_ems_indicatedrealengtorqwhl();
  ems_indicatedrealengtorqwhl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicatedrealengtorqwhl)
}

// optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.Ems_indicatedaccmesgerrorType ems_indicatedaccmesgerror = 2;
bool Gw_ems_tqwhl_0x111_111::has_ems_indicatedaccmesgerror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gw_ems_tqwhl_0x111_111::set_has_ems_indicatedaccmesgerror() {
  _has_bits_[0] |= 0x00000002u;
}
void Gw_ems_tqwhl_0x111_111::clear_has_ems_indicatedaccmesgerror() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gw_ems_tqwhl_0x111_111::clear_ems_indicatedaccmesgerror() {
  ems_indicatedaccmesgerror_ = 0;
  clear_has_ems_indicatedaccmesgerror();
}
::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType Gw_ems_tqwhl_0x111_111::ems_indicatedaccmesgerror() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicatedaccmesgerror)
  return static_cast< ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType >(ems_indicatedaccmesgerror_);
}
void Gw_ems_tqwhl_0x111_111::set_ems_indicatedaccmesgerror(::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType value) {
  assert(::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicatedaccmesgerrorType_IsValid(value));
  set_has_ems_indicatedaccmesgerror();
  ems_indicatedaccmesgerror_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicatedaccmesgerror)
}

// optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.Ems_indicateddriveroverrideType ems_indicateddriveroverride = 3;
bool Gw_ems_tqwhl_0x111_111::has_ems_indicateddriveroverride() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gw_ems_tqwhl_0x111_111::set_has_ems_indicateddriveroverride() {
  _has_bits_[0] |= 0x00000008u;
}
void Gw_ems_tqwhl_0x111_111::clear_has_ems_indicateddriveroverride() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gw_ems_tqwhl_0x111_111::clear_ems_indicateddriveroverride() {
  ems_indicateddriveroverride_ = 0;
  clear_has_ems_indicateddriveroverride();
}
::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType Gw_ems_tqwhl_0x111_111::ems_indicateddriveroverride() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicateddriveroverride)
  return static_cast< ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType >(ems_indicateddriveroverride_);
}
void Gw_ems_tqwhl_0x111_111::set_ems_indicateddriveroverride(::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType value) {
  assert(::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111_Ems_indicateddriveroverrideType_IsValid(value));
  set_has_ems_indicateddriveroverride();
  ems_indicateddriveroverride_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicateddriveroverride)
}

// optional double ems_indicateddriverreqtorq = 4;
bool Gw_ems_tqwhl_0x111_111::has_ems_indicateddriverreqtorq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gw_ems_tqwhl_0x111_111::set_has_ems_indicateddriverreqtorq() {
  _has_bits_[0] |= 0x00000004u;
}
void Gw_ems_tqwhl_0x111_111::clear_has_ems_indicateddriverreqtorq() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gw_ems_tqwhl_0x111_111::clear_ems_indicateddriverreqtorq() {
  ems_indicateddriverreqtorq_ = 0;
  clear_has_ems_indicateddriverreqtorq();
}
double Gw_ems_tqwhl_0x111_111::ems_indicateddriverreqtorq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicateddriverreqtorq)
  return ems_indicateddriverreqtorq_;
}
void Gw_ems_tqwhl_0x111_111::set_ems_indicateddriverreqtorq(double value) {
  set_has_ems_indicateddriverreqtorq();
  ems_indicateddriverreqtorq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicateddriverreqtorq)
}

// optional int32 dcm_ems_rollingcounter_0x111 = 5;
bool Gw_ems_tqwhl_0x111_111::has_dcm_ems_rollingcounter_0x111() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gw_ems_tqwhl_0x111_111::set_has_dcm_ems_rollingcounter_0x111() {
  _has_bits_[0] |= 0x00000010u;
}
void Gw_ems_tqwhl_0x111_111::clear_has_dcm_ems_rollingcounter_0x111() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gw_ems_tqwhl_0x111_111::clear_dcm_ems_rollingcounter_0x111() {
  dcm_ems_rollingcounter_0x111_ = 0;
  clear_has_dcm_ems_rollingcounter_0x111();
}
::google::protobuf::int32 Gw_ems_tqwhl_0x111_111::dcm_ems_rollingcounter_0x111() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.dcm_ems_rollingcounter_0x111)
  return dcm_ems_rollingcounter_0x111_;
}
void Gw_ems_tqwhl_0x111_111::set_dcm_ems_rollingcounter_0x111(::google::protobuf::int32 value) {
  set_has_dcm_ems_rollingcounter_0x111();
  dcm_ems_rollingcounter_0x111_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.dcm_ems_rollingcounter_0x111)
}

// optional int32 dcm_ems_checksum_0x111 = 6;
bool Gw_ems_tqwhl_0x111_111::has_dcm_ems_checksum_0x111() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gw_ems_tqwhl_0x111_111::set_has_dcm_ems_checksum_0x111() {
  _has_bits_[0] |= 0x00000020u;
}
void Gw_ems_tqwhl_0x111_111::clear_has_dcm_ems_checksum_0x111() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gw_ems_tqwhl_0x111_111::clear_dcm_ems_checksum_0x111() {
  dcm_ems_checksum_0x111_ = 0;
  clear_has_dcm_ems_checksum_0x111();
}
::google::protobuf::int32 Gw_ems_tqwhl_0x111_111::dcm_ems_checksum_0x111() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.dcm_ems_checksum_0x111)
  return dcm_ems_checksum_0x111_;
}
void Gw_ems_tqwhl_0x111_111::set_dcm_ems_checksum_0x111(::google::protobuf::int32 value) {
  set_has_dcm_ems_checksum_0x111();
  dcm_ems_checksum_0x111_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.dcm_ems_checksum_0x111)
}

// optional int32 ems_indicateddriverreqtorqwhl = 7;
bool Gw_ems_tqwhl_0x111_111::has_ems_indicateddriverreqtorqwhl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Gw_ems_tqwhl_0x111_111::set_has_ems_indicateddriverreqtorqwhl() {
  _has_bits_[0] |= 0x00000040u;
}
void Gw_ems_tqwhl_0x111_111::clear_has_ems_indicateddriverreqtorqwhl() {
  _has_bits_[0] &= ~0x00000040u;
}
void Gw_ems_tqwhl_0x111_111::clear_ems_indicateddriverreqtorqwhl() {
  ems_indicateddriverreqtorqwhl_ = 0;
  clear_has_ems_indicateddriverreqtorqwhl();
}
::google::protobuf::int32 Gw_ems_tqwhl_0x111_111::ems_indicateddriverreqtorqwhl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicateddriverreqtorqwhl)
  return ems_indicateddriverreqtorqwhl_;
}
void Gw_ems_tqwhl_0x111_111::set_ems_indicateddriverreqtorqwhl(::google::protobuf::int32 value) {
  set_has_ems_indicateddriverreqtorqwhl();
  ems_indicateddriverreqtorqwhl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tqwhl_0x111_111.ems_indicateddriverreqtorqwhl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gw_tcu_gearinfo_0x123_123::kTcuDisplaygearFieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuGearselectorreqFieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuTranspmotoparkreqinvalidFieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuGearshiftinprogressFieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuShiftleverposSbwmFieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuTargetgearreqFieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuAvailableFieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuDriverinterventionFieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuTrsmfaultflagFieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuStgearmodeFieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuDrivingModeReqFieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuEpblockreqFieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuHighresistanceFieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuDrivingmodechangeFaultFlagFieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuShiftlevertopreqinvalidFieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuStatusAlivecounter0X123FieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuTranspmotorparkreqFieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuShiftlevertopreqFieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuStatusChecksum0X123FieldNumber;
const int Gw_tcu_gearinfo_0x123_123::kTcuCurrentgearpositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gw_tcu_gearinfo_0x123_123::Gw_tcu_gearinfo_0x123_123()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
}
Gw_tcu_gearinfo_0x123_123::Gw_tcu_gearinfo_0x123_123(const Gw_tcu_gearinfo_0x123_123& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tcu_displaygear_, &from.tcu_displaygear_,
    reinterpret_cast<char*>(&tcu_currentgearposition_) -
    reinterpret_cast<char*>(&tcu_displaygear_) + sizeof(tcu_currentgearposition_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
}

void Gw_tcu_gearinfo_0x123_123::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tcu_displaygear_, 0, reinterpret_cast<char*>(&tcu_currentgearposition_) -
    reinterpret_cast<char*>(&tcu_displaygear_) + sizeof(tcu_currentgearposition_));
}

Gw_tcu_gearinfo_0x123_123::~Gw_tcu_gearinfo_0x123_123() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
  SharedDtor();
}

void Gw_tcu_gearinfo_0x123_123::SharedDtor() {
}

void Gw_tcu_gearinfo_0x123_123::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gw_tcu_gearinfo_0x123_123::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gw_tcu_gearinfo_0x123_123& Gw_tcu_gearinfo_0x123_123::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gw_tcu_gearinfo_0x123_123* Gw_tcu_gearinfo_0x123_123::New(::google::protobuf::Arena* arena) const {
  Gw_tcu_gearinfo_0x123_123* n = new Gw_tcu_gearinfo_0x123_123;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gw_tcu_gearinfo_0x123_123::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&tcu_displaygear_, 0, reinterpret_cast<char*>(&tcu_driverintervention_) -
      reinterpret_cast<char*>(&tcu_displaygear_) + sizeof(tcu_driverintervention_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&tcu_trsmfaultflag_, 0, reinterpret_cast<char*>(&tcu_status_alivecounter0x123_) -
      reinterpret_cast<char*>(&tcu_trsmfaultflag_) + sizeof(tcu_status_alivecounter0x123_));
  }
  if (_has_bits_[16 / 32] & 983040u) {
    ::memset(&tcu_transpmotorparkreq_, 0, reinterpret_cast<char*>(&tcu_currentgearposition_) -
      reinterpret_cast<char*>(&tcu_transpmotorparkreq_) + sizeof(tcu_currentgearposition_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gw_tcu_gearinfo_0x123_123::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_displaygearType tcu_displaygear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_IsValid(value)) {
            set_tcu_displaygear(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_gearselectorreqType tcu_gearselectorreq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_IsValid(value)) {
            set_tcu_gearselectorreq(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_transpmotoparkreqinvalidType tcu_transpmotoparkreqinvalid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_IsValid(value)) {
            set_tcu_transpmotoparkreqinvalid(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_gearshiftinprogressType tcu_gearshiftinprogress = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_IsValid(value)) {
            set_tcu_gearshiftinprogress(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftleverpos_sbwmType tcu_shiftleverpos_sbwm = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_IsValid(value)) {
            set_tcu_shiftleverpos_sbwm(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_targetgearreqType tcu_targetgearreq = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_IsValid(value)) {
            set_tcu_targetgearreq(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_availableType tcu_available = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_availableType_IsValid(value)) {
            set_tcu_available(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_availableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_driverinterventionType tcu_driverintervention = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_IsValid(value)) {
            set_tcu_driverintervention(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_trsmfaultflagType tcu_trsmfaultflag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_IsValid(value)) {
            set_tcu_trsmfaultflag(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_stgearmodeType tcu_stgearmode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_IsValid(value)) {
            set_tcu_stgearmode(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_driving_mode_reqType tcu_driving_mode_req = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_IsValid(value)) {
            set_tcu_driving_mode_req(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_epblockreqType tcu_epblockreq = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_IsValid(value)) {
            set_tcu_epblockreq(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_highresistanceType tcu_highresistance = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_IsValid(value)) {
            set_tcu_highresistance(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_drivingmodechange_fault_flagType tcu_drivingmodechange_fault_flag = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_IsValid(value)) {
            set_tcu_drivingmodechange_fault_flag(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftlevertopreqinvalidType tcu_shiftlevertopreqinvalid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_IsValid(value)) {
            set_tcu_shiftlevertopreqinvalid(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tcu_status_alivecounter0x123 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_tcu_status_alivecounter0x123();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcu_status_alivecounter0x123_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_transpmotorparkreqType tcu_transpmotorparkreq = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_IsValid(value)) {
            set_tcu_transpmotorparkreq(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftlevertopreqType tcu_shiftlevertopreq = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_IsValid(value)) {
            set_tcu_shiftlevertopreq(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tcu_status_checksum0x123 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_tcu_status_checksum0x123();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcu_status_checksum0x123_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_currentgearpositionType tcu_currentgearposition = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_IsValid(value)) {
            set_tcu_currentgearposition(static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
  return false;
#undef DO_
}

void Gw_tcu_gearinfo_0x123_123::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_displaygearType tcu_displaygear = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tcu_displaygear(), output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_gearselectorreqType tcu_gearselectorreq = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tcu_gearselectorreq(), output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_transpmotoparkreqinvalidType tcu_transpmotoparkreqinvalid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->tcu_transpmotoparkreqinvalid(), output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_gearshiftinprogressType tcu_gearshiftinprogress = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->tcu_gearshiftinprogress(), output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftleverpos_sbwmType tcu_shiftleverpos_sbwm = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->tcu_shiftleverpos_sbwm(), output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_targetgearreqType tcu_targetgearreq = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->tcu_targetgearreq(), output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_availableType tcu_available = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->tcu_available(), output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_driverinterventionType tcu_driverintervention = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->tcu_driverintervention(), output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_trsmfaultflagType tcu_trsmfaultflag = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->tcu_trsmfaultflag(), output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_stgearmodeType tcu_stgearmode = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->tcu_stgearmode(), output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_driving_mode_reqType tcu_driving_mode_req = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->tcu_driving_mode_req(), output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_epblockreqType tcu_epblockreq = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->tcu_epblockreq(), output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_highresistanceType tcu_highresistance = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->tcu_highresistance(), output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_drivingmodechange_fault_flagType tcu_drivingmodechange_fault_flag = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->tcu_drivingmodechange_fault_flag(), output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftlevertopreqinvalidType tcu_shiftlevertopreqinvalid = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->tcu_shiftlevertopreqinvalid(), output);
  }

  // optional int32 tcu_status_alivecounter0x123 = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->tcu_status_alivecounter0x123(), output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_transpmotorparkreqType tcu_transpmotorparkreq = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->tcu_transpmotorparkreq(), output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftlevertopreqType tcu_shiftlevertopreq = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->tcu_shiftlevertopreq(), output);
  }

  // optional int32 tcu_status_checksum0x123 = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->tcu_status_checksum0x123(), output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_currentgearpositionType tcu_currentgearposition = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->tcu_currentgearposition(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
}

::google::protobuf::uint8* Gw_tcu_gearinfo_0x123_123::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_displaygearType tcu_displaygear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->tcu_displaygear(), target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_gearselectorreqType tcu_gearselectorreq = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tcu_gearselectorreq(), target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_transpmotoparkreqinvalidType tcu_transpmotoparkreqinvalid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->tcu_transpmotoparkreqinvalid(), target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_gearshiftinprogressType tcu_gearshiftinprogress = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->tcu_gearshiftinprogress(), target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftleverpos_sbwmType tcu_shiftleverpos_sbwm = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->tcu_shiftleverpos_sbwm(), target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_targetgearreqType tcu_targetgearreq = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->tcu_targetgearreq(), target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_availableType tcu_available = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->tcu_available(), target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_driverinterventionType tcu_driverintervention = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->tcu_driverintervention(), target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_trsmfaultflagType tcu_trsmfaultflag = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->tcu_trsmfaultflag(), target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_stgearmodeType tcu_stgearmode = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->tcu_stgearmode(), target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_driving_mode_reqType tcu_driving_mode_req = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->tcu_driving_mode_req(), target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_epblockreqType tcu_epblockreq = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->tcu_epblockreq(), target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_highresistanceType tcu_highresistance = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->tcu_highresistance(), target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_drivingmodechange_fault_flagType tcu_drivingmodechange_fault_flag = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->tcu_drivingmodechange_fault_flag(), target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftlevertopreqinvalidType tcu_shiftlevertopreqinvalid = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->tcu_shiftlevertopreqinvalid(), target);
  }

  // optional int32 tcu_status_alivecounter0x123 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->tcu_status_alivecounter0x123(), target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_transpmotorparkreqType tcu_transpmotorparkreq = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->tcu_transpmotorparkreq(), target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftlevertopreqType tcu_shiftlevertopreq = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->tcu_shiftlevertopreq(), target);
  }

  // optional int32 tcu_status_checksum0x123 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->tcu_status_checksum0x123(), target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_currentgearpositionType tcu_currentgearposition = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->tcu_currentgearposition(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
  return target;
}

size_t Gw_tcu_gearinfo_0x123_123::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_displaygearType tcu_displaygear = 1;
    if (has_tcu_displaygear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_displaygear());
    }

    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_gearselectorreqType tcu_gearselectorreq = 2;
    if (has_tcu_gearselectorreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_gearselectorreq());
    }

    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_transpmotoparkreqinvalidType tcu_transpmotoparkreqinvalid = 3;
    if (has_tcu_transpmotoparkreqinvalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_transpmotoparkreqinvalid());
    }

    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_gearshiftinprogressType tcu_gearshiftinprogress = 4;
    if (has_tcu_gearshiftinprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_gearshiftinprogress());
    }

    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftleverpos_sbwmType tcu_shiftleverpos_sbwm = 5;
    if (has_tcu_shiftleverpos_sbwm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_shiftleverpos_sbwm());
    }

    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_targetgearreqType tcu_targetgearreq = 6;
    if (has_tcu_targetgearreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_targetgearreq());
    }

    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_availableType tcu_available = 7;
    if (has_tcu_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_available());
    }

    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_driverinterventionType tcu_driverintervention = 8;
    if (has_tcu_driverintervention()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_driverintervention());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_trsmfaultflagType tcu_trsmfaultflag = 9;
    if (has_tcu_trsmfaultflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_trsmfaultflag());
    }

    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_stgearmodeType tcu_stgearmode = 10;
    if (has_tcu_stgearmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_stgearmode());
    }

    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_driving_mode_reqType tcu_driving_mode_req = 11;
    if (has_tcu_driving_mode_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_driving_mode_req());
    }

    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_epblockreqType tcu_epblockreq = 12;
    if (has_tcu_epblockreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_epblockreq());
    }

    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_highresistanceType tcu_highresistance = 13;
    if (has_tcu_highresistance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_highresistance());
    }

    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_drivingmodechange_fault_flagType tcu_drivingmodechange_fault_flag = 14;
    if (has_tcu_drivingmodechange_fault_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_drivingmodechange_fault_flag());
    }

    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftlevertopreqinvalidType tcu_shiftlevertopreqinvalid = 15;
    if (has_tcu_shiftlevertopreqinvalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_shiftlevertopreqinvalid());
    }

    // optional int32 tcu_status_alivecounter0x123 = 16;
    if (has_tcu_status_alivecounter0x123()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tcu_status_alivecounter0x123());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_transpmotorparkreqType tcu_transpmotorparkreq = 17;
    if (has_tcu_transpmotorparkreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_transpmotorparkreq());
    }

    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftlevertopreqType tcu_shiftlevertopreq = 18;
    if (has_tcu_shiftlevertopreq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_shiftlevertopreq());
    }

    // optional int32 tcu_status_checksum0x123 = 19;
    if (has_tcu_status_checksum0x123()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tcu_status_checksum0x123());
    }

    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_currentgearpositionType tcu_currentgearposition = 20;
    if (has_tcu_currentgearposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tcu_currentgearposition());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gw_tcu_gearinfo_0x123_123::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
  GOOGLE_DCHECK_NE(&from, this);
  const Gw_tcu_gearinfo_0x123_123* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gw_tcu_gearinfo_0x123_123>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
    MergeFrom(*source);
  }
}

void Gw_tcu_gearinfo_0x123_123::MergeFrom(const Gw_tcu_gearinfo_0x123_123& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      tcu_displaygear_ = from.tcu_displaygear_;
    }
    if (cached_has_bits & 0x00000002u) {
      tcu_gearselectorreq_ = from.tcu_gearselectorreq_;
    }
    if (cached_has_bits & 0x00000004u) {
      tcu_transpmotoparkreqinvalid_ = from.tcu_transpmotoparkreqinvalid_;
    }
    if (cached_has_bits & 0x00000008u) {
      tcu_gearshiftinprogress_ = from.tcu_gearshiftinprogress_;
    }
    if (cached_has_bits & 0x00000010u) {
      tcu_shiftleverpos_sbwm_ = from.tcu_shiftleverpos_sbwm_;
    }
    if (cached_has_bits & 0x00000020u) {
      tcu_targetgearreq_ = from.tcu_targetgearreq_;
    }
    if (cached_has_bits & 0x00000040u) {
      tcu_available_ = from.tcu_available_;
    }
    if (cached_has_bits & 0x00000080u) {
      tcu_driverintervention_ = from.tcu_driverintervention_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      tcu_trsmfaultflag_ = from.tcu_trsmfaultflag_;
    }
    if (cached_has_bits & 0x00000200u) {
      tcu_stgearmode_ = from.tcu_stgearmode_;
    }
    if (cached_has_bits & 0x00000400u) {
      tcu_driving_mode_req_ = from.tcu_driving_mode_req_;
    }
    if (cached_has_bits & 0x00000800u) {
      tcu_epblockreq_ = from.tcu_epblockreq_;
    }
    if (cached_has_bits & 0x00001000u) {
      tcu_highresistance_ = from.tcu_highresistance_;
    }
    if (cached_has_bits & 0x00002000u) {
      tcu_drivingmodechange_fault_flag_ = from.tcu_drivingmodechange_fault_flag_;
    }
    if (cached_has_bits & 0x00004000u) {
      tcu_shiftlevertopreqinvalid_ = from.tcu_shiftlevertopreqinvalid_;
    }
    if (cached_has_bits & 0x00008000u) {
      tcu_status_alivecounter0x123_ = from.tcu_status_alivecounter0x123_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      tcu_transpmotorparkreq_ = from.tcu_transpmotorparkreq_;
    }
    if (cached_has_bits & 0x00020000u) {
      tcu_shiftlevertopreq_ = from.tcu_shiftlevertopreq_;
    }
    if (cached_has_bits & 0x00040000u) {
      tcu_status_checksum0x123_ = from.tcu_status_checksum0x123_;
    }
    if (cached_has_bits & 0x00080000u) {
      tcu_currentgearposition_ = from.tcu_currentgearposition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gw_tcu_gearinfo_0x123_123::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gw_tcu_gearinfo_0x123_123::CopyFrom(const Gw_tcu_gearinfo_0x123_123& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gw_tcu_gearinfo_0x123_123::IsInitialized() const {
  return true;
}

void Gw_tcu_gearinfo_0x123_123::Swap(Gw_tcu_gearinfo_0x123_123* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gw_tcu_gearinfo_0x123_123::InternalSwap(Gw_tcu_gearinfo_0x123_123* other) {
  std::swap(tcu_displaygear_, other->tcu_displaygear_);
  std::swap(tcu_gearselectorreq_, other->tcu_gearselectorreq_);
  std::swap(tcu_transpmotoparkreqinvalid_, other->tcu_transpmotoparkreqinvalid_);
  std::swap(tcu_gearshiftinprogress_, other->tcu_gearshiftinprogress_);
  std::swap(tcu_shiftleverpos_sbwm_, other->tcu_shiftleverpos_sbwm_);
  std::swap(tcu_targetgearreq_, other->tcu_targetgearreq_);
  std::swap(tcu_available_, other->tcu_available_);
  std::swap(tcu_driverintervention_, other->tcu_driverintervention_);
  std::swap(tcu_trsmfaultflag_, other->tcu_trsmfaultflag_);
  std::swap(tcu_stgearmode_, other->tcu_stgearmode_);
  std::swap(tcu_driving_mode_req_, other->tcu_driving_mode_req_);
  std::swap(tcu_epblockreq_, other->tcu_epblockreq_);
  std::swap(tcu_highresistance_, other->tcu_highresistance_);
  std::swap(tcu_drivingmodechange_fault_flag_, other->tcu_drivingmodechange_fault_flag_);
  std::swap(tcu_shiftlevertopreqinvalid_, other->tcu_shiftlevertopreqinvalid_);
  std::swap(tcu_status_alivecounter0x123_, other->tcu_status_alivecounter0x123_);
  std::swap(tcu_transpmotorparkreq_, other->tcu_transpmotorparkreq_);
  std::swap(tcu_shiftlevertopreq_, other->tcu_shiftlevertopreq_);
  std::swap(tcu_status_checksum0x123_, other->tcu_status_checksum0x123_);
  std::swap(tcu_currentgearposition_, other->tcu_currentgearposition_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gw_tcu_gearinfo_0x123_123::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gw_tcu_gearinfo_0x123_123

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_displaygearType tcu_displaygear = 1;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_displaygear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_displaygear() {
  _has_bits_[0] |= 0x00000001u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_displaygear() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_displaygear() {
  tcu_displaygear_ = 0;
  clear_has_tcu_displaygear();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType Gw_tcu_gearinfo_0x123_123::tcu_displaygear() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_displaygear)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType >(tcu_displaygear_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_displaygear(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_displaygearType_IsValid(value));
  set_has_tcu_displaygear();
  tcu_displaygear_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_displaygear)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_gearselectorreqType tcu_gearselectorreq = 2;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_gearselectorreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_gearselectorreq() {
  _has_bits_[0] |= 0x00000002u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_gearselectorreq() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_gearselectorreq() {
  tcu_gearselectorreq_ = 0;
  clear_has_tcu_gearselectorreq();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType Gw_tcu_gearinfo_0x123_123::tcu_gearselectorreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_gearselectorreq)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType >(tcu_gearselectorreq_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_gearselectorreq(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearselectorreqType_IsValid(value));
  set_has_tcu_gearselectorreq();
  tcu_gearselectorreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_gearselectorreq)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_transpmotoparkreqinvalidType tcu_transpmotoparkreqinvalid = 3;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_transpmotoparkreqinvalid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_transpmotoparkreqinvalid() {
  _has_bits_[0] |= 0x00000004u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_transpmotoparkreqinvalid() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_transpmotoparkreqinvalid() {
  tcu_transpmotoparkreqinvalid_ = 0;
  clear_has_tcu_transpmotoparkreqinvalid();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType Gw_tcu_gearinfo_0x123_123::tcu_transpmotoparkreqinvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_transpmotoparkreqinvalid)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType >(tcu_transpmotoparkreqinvalid_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_transpmotoparkreqinvalid(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotoparkreqinvalidType_IsValid(value));
  set_has_tcu_transpmotoparkreqinvalid();
  tcu_transpmotoparkreqinvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_transpmotoparkreqinvalid)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_gearshiftinprogressType tcu_gearshiftinprogress = 4;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_gearshiftinprogress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_gearshiftinprogress() {
  _has_bits_[0] |= 0x00000008u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_gearshiftinprogress() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_gearshiftinprogress() {
  tcu_gearshiftinprogress_ = 0;
  clear_has_tcu_gearshiftinprogress();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType Gw_tcu_gearinfo_0x123_123::tcu_gearshiftinprogress() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_gearshiftinprogress)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType >(tcu_gearshiftinprogress_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_gearshiftinprogress(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_gearshiftinprogressType_IsValid(value));
  set_has_tcu_gearshiftinprogress();
  tcu_gearshiftinprogress_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_gearshiftinprogress)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftleverpos_sbwmType tcu_shiftleverpos_sbwm = 5;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_shiftleverpos_sbwm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_shiftleverpos_sbwm() {
  _has_bits_[0] |= 0x00000010u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_shiftleverpos_sbwm() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_shiftleverpos_sbwm() {
  tcu_shiftleverpos_sbwm_ = 0;
  clear_has_tcu_shiftleverpos_sbwm();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType Gw_tcu_gearinfo_0x123_123::tcu_shiftleverpos_sbwm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_shiftleverpos_sbwm)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType >(tcu_shiftleverpos_sbwm_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_shiftleverpos_sbwm(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftleverpos_sbwmType_IsValid(value));
  set_has_tcu_shiftleverpos_sbwm();
  tcu_shiftleverpos_sbwm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_shiftleverpos_sbwm)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_targetgearreqType tcu_targetgearreq = 6;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_targetgearreq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_targetgearreq() {
  _has_bits_[0] |= 0x00000020u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_targetgearreq() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_targetgearreq() {
  tcu_targetgearreq_ = 0;
  clear_has_tcu_targetgearreq();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType Gw_tcu_gearinfo_0x123_123::tcu_targetgearreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_targetgearreq)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType >(tcu_targetgearreq_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_targetgearreq(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_targetgearreqType_IsValid(value));
  set_has_tcu_targetgearreq();
  tcu_targetgearreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_targetgearreq)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_availableType tcu_available = 7;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_available() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_available() {
  _has_bits_[0] |= 0x00000040u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_available() {
  _has_bits_[0] &= ~0x00000040u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_available() {
  tcu_available_ = 0;
  clear_has_tcu_available();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_availableType Gw_tcu_gearinfo_0x123_123::tcu_available() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_available)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_availableType >(tcu_available_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_available(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_availableType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_availableType_IsValid(value));
  set_has_tcu_available();
  tcu_available_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_available)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_driverinterventionType tcu_driverintervention = 8;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_driverintervention() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_driverintervention() {
  _has_bits_[0] |= 0x00000080u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_driverintervention() {
  _has_bits_[0] &= ~0x00000080u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_driverintervention() {
  tcu_driverintervention_ = 0;
  clear_has_tcu_driverintervention();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType Gw_tcu_gearinfo_0x123_123::tcu_driverintervention() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_driverintervention)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType >(tcu_driverintervention_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_driverintervention(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driverinterventionType_IsValid(value));
  set_has_tcu_driverintervention();
  tcu_driverintervention_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_driverintervention)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_trsmfaultflagType tcu_trsmfaultflag = 9;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_trsmfaultflag() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_trsmfaultflag() {
  _has_bits_[0] |= 0x00000100u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_trsmfaultflag() {
  _has_bits_[0] &= ~0x00000100u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_trsmfaultflag() {
  tcu_trsmfaultflag_ = 0;
  clear_has_tcu_trsmfaultflag();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType Gw_tcu_gearinfo_0x123_123::tcu_trsmfaultflag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_trsmfaultflag)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType >(tcu_trsmfaultflag_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_trsmfaultflag(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_trsmfaultflagType_IsValid(value));
  set_has_tcu_trsmfaultflag();
  tcu_trsmfaultflag_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_trsmfaultflag)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_stgearmodeType tcu_stgearmode = 10;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_stgearmode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_stgearmode() {
  _has_bits_[0] |= 0x00000200u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_stgearmode() {
  _has_bits_[0] &= ~0x00000200u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_stgearmode() {
  tcu_stgearmode_ = 0;
  clear_has_tcu_stgearmode();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType Gw_tcu_gearinfo_0x123_123::tcu_stgearmode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_stgearmode)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType >(tcu_stgearmode_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_stgearmode(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_stgearmodeType_IsValid(value));
  set_has_tcu_stgearmode();
  tcu_stgearmode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_stgearmode)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_driving_mode_reqType tcu_driving_mode_req = 11;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_driving_mode_req() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_driving_mode_req() {
  _has_bits_[0] |= 0x00000400u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_driving_mode_req() {
  _has_bits_[0] &= ~0x00000400u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_driving_mode_req() {
  tcu_driving_mode_req_ = 0;
  clear_has_tcu_driving_mode_req();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType Gw_tcu_gearinfo_0x123_123::tcu_driving_mode_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_driving_mode_req)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType >(tcu_driving_mode_req_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_driving_mode_req(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_driving_mode_reqType_IsValid(value));
  set_has_tcu_driving_mode_req();
  tcu_driving_mode_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_driving_mode_req)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_epblockreqType tcu_epblockreq = 12;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_epblockreq() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_epblockreq() {
  _has_bits_[0] |= 0x00000800u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_epblockreq() {
  _has_bits_[0] &= ~0x00000800u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_epblockreq() {
  tcu_epblockreq_ = 0;
  clear_has_tcu_epblockreq();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType Gw_tcu_gearinfo_0x123_123::tcu_epblockreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_epblockreq)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType >(tcu_epblockreq_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_epblockreq(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_epblockreqType_IsValid(value));
  set_has_tcu_epblockreq();
  tcu_epblockreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_epblockreq)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_highresistanceType tcu_highresistance = 13;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_highresistance() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_highresistance() {
  _has_bits_[0] |= 0x00001000u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_highresistance() {
  _has_bits_[0] &= ~0x00001000u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_highresistance() {
  tcu_highresistance_ = 0;
  clear_has_tcu_highresistance();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType Gw_tcu_gearinfo_0x123_123::tcu_highresistance() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_highresistance)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType >(tcu_highresistance_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_highresistance(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_highresistanceType_IsValid(value));
  set_has_tcu_highresistance();
  tcu_highresistance_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_highresistance)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_drivingmodechange_fault_flagType tcu_drivingmodechange_fault_flag = 14;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_drivingmodechange_fault_flag() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_drivingmodechange_fault_flag() {
  _has_bits_[0] |= 0x00002000u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_drivingmodechange_fault_flag() {
  _has_bits_[0] &= ~0x00002000u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_drivingmodechange_fault_flag() {
  tcu_drivingmodechange_fault_flag_ = 0;
  clear_has_tcu_drivingmodechange_fault_flag();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType Gw_tcu_gearinfo_0x123_123::tcu_drivingmodechange_fault_flag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_drivingmodechange_fault_flag)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType >(tcu_drivingmodechange_fault_flag_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_drivingmodechange_fault_flag(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_drivingmodechange_fault_flagType_IsValid(value));
  set_has_tcu_drivingmodechange_fault_flag();
  tcu_drivingmodechange_fault_flag_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_drivingmodechange_fault_flag)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftlevertopreqinvalidType tcu_shiftlevertopreqinvalid = 15;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_shiftlevertopreqinvalid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_shiftlevertopreqinvalid() {
  _has_bits_[0] |= 0x00004000u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_shiftlevertopreqinvalid() {
  _has_bits_[0] &= ~0x00004000u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_shiftlevertopreqinvalid() {
  tcu_shiftlevertopreqinvalid_ = 0;
  clear_has_tcu_shiftlevertopreqinvalid();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType Gw_tcu_gearinfo_0x123_123::tcu_shiftlevertopreqinvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_shiftlevertopreqinvalid)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType >(tcu_shiftlevertopreqinvalid_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_shiftlevertopreqinvalid(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqinvalidType_IsValid(value));
  set_has_tcu_shiftlevertopreqinvalid();
  tcu_shiftlevertopreqinvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_shiftlevertopreqinvalid)
}

// optional int32 tcu_status_alivecounter0x123 = 16;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_status_alivecounter0x123() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_status_alivecounter0x123() {
  _has_bits_[0] |= 0x00008000u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_status_alivecounter0x123() {
  _has_bits_[0] &= ~0x00008000u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_status_alivecounter0x123() {
  tcu_status_alivecounter0x123_ = 0;
  clear_has_tcu_status_alivecounter0x123();
}
::google::protobuf::int32 Gw_tcu_gearinfo_0x123_123::tcu_status_alivecounter0x123() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_status_alivecounter0x123)
  return tcu_status_alivecounter0x123_;
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_status_alivecounter0x123(::google::protobuf::int32 value) {
  set_has_tcu_status_alivecounter0x123();
  tcu_status_alivecounter0x123_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_status_alivecounter0x123)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_transpmotorparkreqType tcu_transpmotorparkreq = 17;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_transpmotorparkreq() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_transpmotorparkreq() {
  _has_bits_[0] |= 0x00010000u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_transpmotorparkreq() {
  _has_bits_[0] &= ~0x00010000u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_transpmotorparkreq() {
  tcu_transpmotorparkreq_ = 0;
  clear_has_tcu_transpmotorparkreq();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType Gw_tcu_gearinfo_0x123_123::tcu_transpmotorparkreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_transpmotorparkreq)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType >(tcu_transpmotorparkreq_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_transpmotorparkreq(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_transpmotorparkreqType_IsValid(value));
  set_has_tcu_transpmotorparkreq();
  tcu_transpmotorparkreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_transpmotorparkreq)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_shiftlevertopreqType tcu_shiftlevertopreq = 18;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_shiftlevertopreq() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_shiftlevertopreq() {
  _has_bits_[0] |= 0x00020000u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_shiftlevertopreq() {
  _has_bits_[0] &= ~0x00020000u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_shiftlevertopreq() {
  tcu_shiftlevertopreq_ = 0;
  clear_has_tcu_shiftlevertopreq();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType Gw_tcu_gearinfo_0x123_123::tcu_shiftlevertopreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_shiftlevertopreq)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType >(tcu_shiftlevertopreq_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_shiftlevertopreq(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_shiftlevertopreqType_IsValid(value));
  set_has_tcu_shiftlevertopreq();
  tcu_shiftlevertopreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_shiftlevertopreq)
}

// optional int32 tcu_status_checksum0x123 = 19;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_status_checksum0x123() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_status_checksum0x123() {
  _has_bits_[0] |= 0x00040000u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_status_checksum0x123() {
  _has_bits_[0] &= ~0x00040000u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_status_checksum0x123() {
  tcu_status_checksum0x123_ = 0;
  clear_has_tcu_status_checksum0x123();
}
::google::protobuf::int32 Gw_tcu_gearinfo_0x123_123::tcu_status_checksum0x123() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_status_checksum0x123)
  return tcu_status_checksum0x123_;
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_status_checksum0x123(::google::protobuf::int32 value) {
  set_has_tcu_status_checksum0x123();
  tcu_status_checksum0x123_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_status_checksum0x123)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.Tcu_currentgearpositionType tcu_currentgearposition = 20;
bool Gw_tcu_gearinfo_0x123_123::has_tcu_currentgearposition() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Gw_tcu_gearinfo_0x123_123::set_has_tcu_currentgearposition() {
  _has_bits_[0] |= 0x00080000u;
}
void Gw_tcu_gearinfo_0x123_123::clear_has_tcu_currentgearposition() {
  _has_bits_[0] &= ~0x00080000u;
}
void Gw_tcu_gearinfo_0x123_123::clear_tcu_currentgearposition() {
  tcu_currentgearposition_ = 0;
  clear_has_tcu_currentgearposition();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType Gw_tcu_gearinfo_0x123_123::tcu_currentgearposition() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_currentgearposition)
  return static_cast< ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType >(tcu_currentgearposition_);
}
void Gw_tcu_gearinfo_0x123_123::set_tcu_currentgearposition(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType value) {
  assert(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123_Tcu_currentgearpositionType_IsValid(value));
  set_has_tcu_currentgearposition();
  tcu_currentgearposition_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123.tcu_currentgearposition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esp_pressure_0x241_241::kEspTrfcasetqlmtdbyespFieldNumber;
const int Esp_pressure_0x241_241::kEspTrfcasemodreqdbyespFieldNumber;
const int Esp_pressure_0x241_241::kEspPresoffsetmastercylindervaliFieldNumber;
const int Esp_pressure_0x241_241::kEspPresoffsetmastercylinderFieldNumber;
const int Esp_pressure_0x241_241::kRollingCounter0X241FieldNumber;
const int Esp_pressure_0x241_241::kEspMasterCylinderPressureStaFieldNumber;
const int Esp_pressure_0x241_241::kChecksum0X241FieldNumber;
const int Esp_pressure_0x241_241::kEspMasterCylinderPressureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esp_pressure_0x241_241::Esp_pressure_0x241_241()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Esp_pressure_0x241_241)
}
Esp_pressure_0x241_241::Esp_pressure_0x241_241(const Esp_pressure_0x241_241& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&esp_trfcasetqlmtdbyesp_, &from.esp_trfcasetqlmtdbyesp_,
    reinterpret_cast<char*>(&checksum_0x241_) -
    reinterpret_cast<char*>(&esp_trfcasetqlmtdbyesp_) + sizeof(checksum_0x241_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Esp_pressure_0x241_241)
}

void Esp_pressure_0x241_241::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&esp_trfcasetqlmtdbyesp_, 0, reinterpret_cast<char*>(&checksum_0x241_) -
    reinterpret_cast<char*>(&esp_trfcasetqlmtdbyesp_) + sizeof(checksum_0x241_));
}

Esp_pressure_0x241_241::~Esp_pressure_0x241_241() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Esp_pressure_0x241_241)
  SharedDtor();
}

void Esp_pressure_0x241_241::SharedDtor() {
}

void Esp_pressure_0x241_241::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esp_pressure_0x241_241::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esp_pressure_0x241_241& Esp_pressure_0x241_241::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esp_pressure_0x241_241* Esp_pressure_0x241_241::New(::google::protobuf::Arena* arena) const {
  Esp_pressure_0x241_241* n = new Esp_pressure_0x241_241;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esp_pressure_0x241_241::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Esp_pressure_0x241_241)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&esp_trfcasetqlmtdbyesp_, 0, reinterpret_cast<char*>(&checksum_0x241_) -
      reinterpret_cast<char*>(&esp_trfcasetqlmtdbyesp_) + sizeof(checksum_0x241_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esp_pressure_0x241_241::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Esp_pressure_0x241_241)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 esp_trfcasetqlmtdbyesp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_esp_trfcasetqlmtdbyesp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_trfcasetqlmtdbyesp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_trfcasemodreqdbyespType esp_trfcasemodreqdbyesp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_IsValid(value)) {
            set_esp_trfcasemodreqdbyesp(static_cast< ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_presoffsetmastercylindervaliType esp_presoffsetmastercylindervali = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_IsValid(value)) {
            set_esp_presoffsetmastercylindervali(static_cast< ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 esp_presoffsetmastercylinder = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_esp_presoffsetmastercylinder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_presoffsetmastercylinder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x241 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_rolling_counter_0x241();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x241_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_master_cylinder_pressure_staType esp_master_cylinder_pressure_sta = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_IsValid(value)) {
            set_esp_master_cylinder_pressure_sta(static_cast< ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x241 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_checksum_0x241();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x241_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double esp_master_cylinder_pressure = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_esp_master_cylinder_pressure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &esp_master_cylinder_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Esp_pressure_0x241_241)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Esp_pressure_0x241_241)
  return false;
#undef DO_
}

void Esp_pressure_0x241_241::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Esp_pressure_0x241_241)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 esp_trfcasetqlmtdbyesp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->esp_trfcasetqlmtdbyesp(), output);
  }

  // optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_trfcasemodreqdbyespType esp_trfcasemodreqdbyesp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->esp_trfcasemodreqdbyesp(), output);
  }

  // optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_presoffsetmastercylindervaliType esp_presoffsetmastercylindervali = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->esp_presoffsetmastercylindervali(), output);
  }

  // optional int32 esp_presoffsetmastercylinder = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->esp_presoffsetmastercylinder(), output);
  }

  // optional int32 rolling_counter_0x241 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rolling_counter_0x241(), output);
  }

  // optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_master_cylinder_pressure_staType esp_master_cylinder_pressure_sta = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->esp_master_cylinder_pressure_sta(), output);
  }

  // optional int32 checksum_0x241 = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->checksum_0x241(), output);
  }

  // optional double esp_master_cylinder_pressure = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->esp_master_cylinder_pressure(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Esp_pressure_0x241_241)
}

::google::protobuf::uint8* Esp_pressure_0x241_241::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Esp_pressure_0x241_241)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 esp_trfcasetqlmtdbyesp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->esp_trfcasetqlmtdbyesp(), target);
  }

  // optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_trfcasemodreqdbyespType esp_trfcasemodreqdbyesp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->esp_trfcasemodreqdbyesp(), target);
  }

  // optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_presoffsetmastercylindervaliType esp_presoffsetmastercylindervali = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->esp_presoffsetmastercylindervali(), target);
  }

  // optional int32 esp_presoffsetmastercylinder = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->esp_presoffsetmastercylinder(), target);
  }

  // optional int32 rolling_counter_0x241 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rolling_counter_0x241(), target);
  }

  // optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_master_cylinder_pressure_staType esp_master_cylinder_pressure_sta = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->esp_master_cylinder_pressure_sta(), target);
  }

  // optional int32 checksum_0x241 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->checksum_0x241(), target);
  }

  // optional double esp_master_cylinder_pressure = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->esp_master_cylinder_pressure(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Esp_pressure_0x241_241)
  return target;
}

size_t Esp_pressure_0x241_241::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Esp_pressure_0x241_241)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 esp_trfcasetqlmtdbyesp = 1;
    if (has_esp_trfcasetqlmtdbyesp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_trfcasetqlmtdbyesp());
    }

    // optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_trfcasemodreqdbyespType esp_trfcasemodreqdbyesp = 2;
    if (has_esp_trfcasemodreqdbyesp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_trfcasemodreqdbyesp());
    }

    // optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_presoffsetmastercylindervaliType esp_presoffsetmastercylindervali = 3;
    if (has_esp_presoffsetmastercylindervali()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_presoffsetmastercylindervali());
    }

    // optional int32 esp_presoffsetmastercylinder = 4;
    if (has_esp_presoffsetmastercylinder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_presoffsetmastercylinder());
    }

    // optional int32 rolling_counter_0x241 = 5;
    if (has_rolling_counter_0x241()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x241());
    }

    // optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_master_cylinder_pressure_staType esp_master_cylinder_pressure_sta = 6;
    if (has_esp_master_cylinder_pressure_sta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_master_cylinder_pressure_sta());
    }

    // optional double esp_master_cylinder_pressure = 8;
    if (has_esp_master_cylinder_pressure()) {
      total_size += 1 + 8;
    }

    // optional int32 checksum_0x241 = 7;
    if (has_checksum_0x241()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x241());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esp_pressure_0x241_241::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Esp_pressure_0x241_241)
  GOOGLE_DCHECK_NE(&from, this);
  const Esp_pressure_0x241_241* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esp_pressure_0x241_241>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Esp_pressure_0x241_241)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Esp_pressure_0x241_241)
    MergeFrom(*source);
  }
}

void Esp_pressure_0x241_241::MergeFrom(const Esp_pressure_0x241_241& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Esp_pressure_0x241_241)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      esp_trfcasetqlmtdbyesp_ = from.esp_trfcasetqlmtdbyesp_;
    }
    if (cached_has_bits & 0x00000002u) {
      esp_trfcasemodreqdbyesp_ = from.esp_trfcasemodreqdbyesp_;
    }
    if (cached_has_bits & 0x00000004u) {
      esp_presoffsetmastercylindervali_ = from.esp_presoffsetmastercylindervali_;
    }
    if (cached_has_bits & 0x00000008u) {
      esp_presoffsetmastercylinder_ = from.esp_presoffsetmastercylinder_;
    }
    if (cached_has_bits & 0x00000010u) {
      rolling_counter_0x241_ = from.rolling_counter_0x241_;
    }
    if (cached_has_bits & 0x00000020u) {
      esp_master_cylinder_pressure_sta_ = from.esp_master_cylinder_pressure_sta_;
    }
    if (cached_has_bits & 0x00000040u) {
      esp_master_cylinder_pressure_ = from.esp_master_cylinder_pressure_;
    }
    if (cached_has_bits & 0x00000080u) {
      checksum_0x241_ = from.checksum_0x241_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esp_pressure_0x241_241::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Esp_pressure_0x241_241)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esp_pressure_0x241_241::CopyFrom(const Esp_pressure_0x241_241& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Esp_pressure_0x241_241)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esp_pressure_0x241_241::IsInitialized() const {
  return true;
}

void Esp_pressure_0x241_241::Swap(Esp_pressure_0x241_241* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esp_pressure_0x241_241::InternalSwap(Esp_pressure_0x241_241* other) {
  std::swap(esp_trfcasetqlmtdbyesp_, other->esp_trfcasetqlmtdbyesp_);
  std::swap(esp_trfcasemodreqdbyesp_, other->esp_trfcasemodreqdbyesp_);
  std::swap(esp_presoffsetmastercylindervali_, other->esp_presoffsetmastercylindervali_);
  std::swap(esp_presoffsetmastercylinder_, other->esp_presoffsetmastercylinder_);
  std::swap(rolling_counter_0x241_, other->rolling_counter_0x241_);
  std::swap(esp_master_cylinder_pressure_sta_, other->esp_master_cylinder_pressure_sta_);
  std::swap(esp_master_cylinder_pressure_, other->esp_master_cylinder_pressure_);
  std::swap(checksum_0x241_, other->checksum_0x241_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esp_pressure_0x241_241::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esp_pressure_0x241_241

// optional int32 esp_trfcasetqlmtdbyesp = 1;
bool Esp_pressure_0x241_241::has_esp_trfcasetqlmtdbyesp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esp_pressure_0x241_241::set_has_esp_trfcasetqlmtdbyesp() {
  _has_bits_[0] |= 0x00000001u;
}
void Esp_pressure_0x241_241::clear_has_esp_trfcasetqlmtdbyesp() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esp_pressure_0x241_241::clear_esp_trfcasetqlmtdbyesp() {
  esp_trfcasetqlmtdbyesp_ = 0;
  clear_has_esp_trfcasetqlmtdbyesp();
}
::google::protobuf::int32 Esp_pressure_0x241_241::esp_trfcasetqlmtdbyesp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_pressure_0x241_241.esp_trfcasetqlmtdbyesp)
  return esp_trfcasetqlmtdbyesp_;
}
void Esp_pressure_0x241_241::set_esp_trfcasetqlmtdbyesp(::google::protobuf::int32 value) {
  set_has_esp_trfcasetqlmtdbyesp();
  esp_trfcasetqlmtdbyesp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_pressure_0x241_241.esp_trfcasetqlmtdbyesp)
}

// optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_trfcasemodreqdbyespType esp_trfcasemodreqdbyesp = 2;
bool Esp_pressure_0x241_241::has_esp_trfcasemodreqdbyesp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esp_pressure_0x241_241::set_has_esp_trfcasemodreqdbyesp() {
  _has_bits_[0] |= 0x00000002u;
}
void Esp_pressure_0x241_241::clear_has_esp_trfcasemodreqdbyesp() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esp_pressure_0x241_241::clear_esp_trfcasemodreqdbyesp() {
  esp_trfcasemodreqdbyesp_ = 0;
  clear_has_esp_trfcasemodreqdbyesp();
}
::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType Esp_pressure_0x241_241::esp_trfcasemodreqdbyesp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_pressure_0x241_241.esp_trfcasemodreqdbyesp)
  return static_cast< ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType >(esp_trfcasemodreqdbyesp_);
}
void Esp_pressure_0x241_241::set_esp_trfcasemodreqdbyesp(::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType value) {
  assert(::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_trfcasemodreqdbyespType_IsValid(value));
  set_has_esp_trfcasemodreqdbyesp();
  esp_trfcasemodreqdbyesp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_pressure_0x241_241.esp_trfcasemodreqdbyesp)
}

// optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_presoffsetmastercylindervaliType esp_presoffsetmastercylindervali = 3;
bool Esp_pressure_0x241_241::has_esp_presoffsetmastercylindervali() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esp_pressure_0x241_241::set_has_esp_presoffsetmastercylindervali() {
  _has_bits_[0] |= 0x00000004u;
}
void Esp_pressure_0x241_241::clear_has_esp_presoffsetmastercylindervali() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esp_pressure_0x241_241::clear_esp_presoffsetmastercylindervali() {
  esp_presoffsetmastercylindervali_ = 0;
  clear_has_esp_presoffsetmastercylindervali();
}
::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType Esp_pressure_0x241_241::esp_presoffsetmastercylindervali() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_pressure_0x241_241.esp_presoffsetmastercylindervali)
  return static_cast< ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType >(esp_presoffsetmastercylindervali_);
}
void Esp_pressure_0x241_241::set_esp_presoffsetmastercylindervali(::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType value) {
  assert(::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_presoffsetmastercylindervaliType_IsValid(value));
  set_has_esp_presoffsetmastercylindervali();
  esp_presoffsetmastercylindervali_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_pressure_0x241_241.esp_presoffsetmastercylindervali)
}

// optional int32 esp_presoffsetmastercylinder = 4;
bool Esp_pressure_0x241_241::has_esp_presoffsetmastercylinder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esp_pressure_0x241_241::set_has_esp_presoffsetmastercylinder() {
  _has_bits_[0] |= 0x00000008u;
}
void Esp_pressure_0x241_241::clear_has_esp_presoffsetmastercylinder() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esp_pressure_0x241_241::clear_esp_presoffsetmastercylinder() {
  esp_presoffsetmastercylinder_ = 0;
  clear_has_esp_presoffsetmastercylinder();
}
::google::protobuf::int32 Esp_pressure_0x241_241::esp_presoffsetmastercylinder() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_pressure_0x241_241.esp_presoffsetmastercylinder)
  return esp_presoffsetmastercylinder_;
}
void Esp_pressure_0x241_241::set_esp_presoffsetmastercylinder(::google::protobuf::int32 value) {
  set_has_esp_presoffsetmastercylinder();
  esp_presoffsetmastercylinder_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_pressure_0x241_241.esp_presoffsetmastercylinder)
}

// optional int32 rolling_counter_0x241 = 5;
bool Esp_pressure_0x241_241::has_rolling_counter_0x241() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esp_pressure_0x241_241::set_has_rolling_counter_0x241() {
  _has_bits_[0] |= 0x00000010u;
}
void Esp_pressure_0x241_241::clear_has_rolling_counter_0x241() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esp_pressure_0x241_241::clear_rolling_counter_0x241() {
  rolling_counter_0x241_ = 0;
  clear_has_rolling_counter_0x241();
}
::google::protobuf::int32 Esp_pressure_0x241_241::rolling_counter_0x241() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_pressure_0x241_241.rolling_counter_0x241)
  return rolling_counter_0x241_;
}
void Esp_pressure_0x241_241::set_rolling_counter_0x241(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x241();
  rolling_counter_0x241_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_pressure_0x241_241.rolling_counter_0x241)
}

// optional .jmc_auto.canbus.Esp_pressure_0x241_241.Esp_master_cylinder_pressure_staType esp_master_cylinder_pressure_sta = 6;
bool Esp_pressure_0x241_241::has_esp_master_cylinder_pressure_sta() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Esp_pressure_0x241_241::set_has_esp_master_cylinder_pressure_sta() {
  _has_bits_[0] |= 0x00000020u;
}
void Esp_pressure_0x241_241::clear_has_esp_master_cylinder_pressure_sta() {
  _has_bits_[0] &= ~0x00000020u;
}
void Esp_pressure_0x241_241::clear_esp_master_cylinder_pressure_sta() {
  esp_master_cylinder_pressure_sta_ = 0;
  clear_has_esp_master_cylinder_pressure_sta();
}
::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType Esp_pressure_0x241_241::esp_master_cylinder_pressure_sta() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_pressure_0x241_241.esp_master_cylinder_pressure_sta)
  return static_cast< ::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType >(esp_master_cylinder_pressure_sta_);
}
void Esp_pressure_0x241_241::set_esp_master_cylinder_pressure_sta(::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType value) {
  assert(::jmc_auto::canbus::Esp_pressure_0x241_241_Esp_master_cylinder_pressure_staType_IsValid(value));
  set_has_esp_master_cylinder_pressure_sta();
  esp_master_cylinder_pressure_sta_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_pressure_0x241_241.esp_master_cylinder_pressure_sta)
}

// optional int32 checksum_0x241 = 7;
bool Esp_pressure_0x241_241::has_checksum_0x241() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Esp_pressure_0x241_241::set_has_checksum_0x241() {
  _has_bits_[0] |= 0x00000080u;
}
void Esp_pressure_0x241_241::clear_has_checksum_0x241() {
  _has_bits_[0] &= ~0x00000080u;
}
void Esp_pressure_0x241_241::clear_checksum_0x241() {
  checksum_0x241_ = 0;
  clear_has_checksum_0x241();
}
::google::protobuf::int32 Esp_pressure_0x241_241::checksum_0x241() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_pressure_0x241_241.checksum_0x241)
  return checksum_0x241_;
}
void Esp_pressure_0x241_241::set_checksum_0x241(::google::protobuf::int32 value) {
  set_has_checksum_0x241();
  checksum_0x241_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_pressure_0x241_241.checksum_0x241)
}

// optional double esp_master_cylinder_pressure = 8;
bool Esp_pressure_0x241_241::has_esp_master_cylinder_pressure() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Esp_pressure_0x241_241::set_has_esp_master_cylinder_pressure() {
  _has_bits_[0] |= 0x00000040u;
}
void Esp_pressure_0x241_241::clear_has_esp_master_cylinder_pressure() {
  _has_bits_[0] &= ~0x00000040u;
}
void Esp_pressure_0x241_241::clear_esp_master_cylinder_pressure() {
  esp_master_cylinder_pressure_ = 0;
  clear_has_esp_master_cylinder_pressure();
}
double Esp_pressure_0x241_241::esp_master_cylinder_pressure() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_pressure_0x241_241.esp_master_cylinder_pressure)
  return esp_master_cylinder_pressure_;
}
void Esp_pressure_0x241_241::set_esp_master_cylinder_pressure(double value) {
  set_has_esp_master_cylinder_pressure();
  esp_master_cylinder_pressure_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_pressure_0x241_241.esp_master_cylinder_pressure)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esp_status_0x243_243::kEspHhcavailableFieldNumber;
const int Esp_status_0x243_243::kEspHhcactiveFieldNumber;
const int Esp_status_0x243_243::kEspHdcactiveFieldNumber;
const int Esp_status_0x243_243::kEspLdmblcBlrequestcontrollerFieldNumber;
const int Esp_status_0x243_243::kEspCdpavailableFieldNumber;
const int Esp_status_0x243_243::kEspCdpactiveFieldNumber;
const int Esp_status_0x243_243::kEspEpbwarningmessage3FieldNumber;
const int Esp_status_0x243_243::kEspEpbwarningmessage2FieldNumber;
const int Esp_status_0x243_243::kEspEpbwarningmessage1FieldNumber;
const int Esp_status_0x243_243::kEspAvhwarningmessageFieldNumber;
const int Esp_status_0x243_243::kEspAvhactiveFieldNumber;
const int Esp_status_0x243_243::kEspAvhstandbyFieldNumber;
const int Esp_status_0x243_243::kEspAvhavabliableFieldNumber;
const int Esp_status_0x243_243::kEspVdcflgfltFieldNumber;
const int Esp_status_0x243_243::kEspTcsflgfltFieldNumber;
const int Esp_status_0x243_243::kEspTcsctrlactvFieldNumber;
const int Esp_status_0x243_243::kEspEspctrlactvFieldNumber;
const int Esp_status_0x243_243::kEspDrivingModeReqFieldNumber;
const int Esp_status_0x243_243::kEspEspinfolampFieldNumber;
const int Esp_status_0x243_243::kEspEspenablestsFieldNumber;
const int Esp_status_0x243_243::kEspGearshiftprevnFieldNumber;
const int Esp_status_0x243_243::kEspEpbstatusFieldNumber;
const int Esp_status_0x243_243::kRollingcounter0X243FieldNumber;
const int Esp_status_0x243_243::kRollerbenchmodestsFieldNumber;
const int Esp_status_0x243_243::kChecksum0X243FieldNumber;
const int Esp_status_0x243_243::kEspEpberrorstatusFieldNumber;
const int Esp_status_0x243_243::kEspCcswitchoffFieldNumber;
const int Esp_status_0x243_243::kEspHdcavailableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esp_status_0x243_243::Esp_status_0x243_243()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Esp_status_0x243_243)
}
Esp_status_0x243_243::Esp_status_0x243_243(const Esp_status_0x243_243& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&esp_hhcavailable_, &from.esp_hhcavailable_,
    reinterpret_cast<char*>(&esp_hdcavailable_) -
    reinterpret_cast<char*>(&esp_hhcavailable_) + sizeof(esp_hdcavailable_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Esp_status_0x243_243)
}

void Esp_status_0x243_243::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&esp_hhcavailable_, 0, reinterpret_cast<char*>(&esp_hdcavailable_) -
    reinterpret_cast<char*>(&esp_hhcavailable_) + sizeof(esp_hdcavailable_));
}

Esp_status_0x243_243::~Esp_status_0x243_243() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Esp_status_0x243_243)
  SharedDtor();
}

void Esp_status_0x243_243::SharedDtor() {
}

void Esp_status_0x243_243::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esp_status_0x243_243::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esp_status_0x243_243& Esp_status_0x243_243::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esp_status_0x243_243* Esp_status_0x243_243::New(::google::protobuf::Arena* arena) const {
  Esp_status_0x243_243* n = new Esp_status_0x243_243;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esp_status_0x243_243::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Esp_status_0x243_243)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&esp_hhcavailable_, 0, reinterpret_cast<char*>(&esp_epbwarningmessage2_) -
      reinterpret_cast<char*>(&esp_hhcavailable_) + sizeof(esp_epbwarningmessage2_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&esp_epbwarningmessage1_, 0, reinterpret_cast<char*>(&esp_tcsctrlactv_) -
      reinterpret_cast<char*>(&esp_epbwarningmessage1_) + sizeof(esp_tcsctrlactv_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&esp_espctrlactv_, 0, reinterpret_cast<char*>(&rollerbenchmodests_) -
      reinterpret_cast<char*>(&esp_espctrlactv_) + sizeof(rollerbenchmodests_));
  }
  if (_has_bits_[24 / 32] & 251658240u) {
    ::memset(&checksum_0x243_, 0, reinterpret_cast<char*>(&esp_hdcavailable_) -
      reinterpret_cast<char*>(&checksum_0x243_) + sizeof(esp_hdcavailable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esp_status_0x243_243::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Esp_status_0x243_243)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hhcavailableType esp_hhcavailable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcavailableType_IsValid(value)) {
            set_esp_hhcavailable(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcavailableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hhcactiveType esp_hhcactive = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcactiveType_IsValid(value)) {
            set_esp_hhcactive(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcactiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hdcactiveType esp_hdcactive = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcactiveType_IsValid(value)) {
            set_esp_hdcactive(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcactiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_ldmblc_blrequestcontrollerType esp_ldmblc_blrequestcontroller = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_IsValid(value)) {
            set_esp_ldmblc_blrequestcontroller(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_cdpavailableType esp_cdpavailable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpavailableType_IsValid(value)) {
            set_esp_cdpavailable(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpavailableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_cdpactiveType esp_cdpactive = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpactiveType_IsValid(value)) {
            set_esp_cdpactive(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpactiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage3Type esp_epbwarningmessage3 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage3Type_IsValid(value)) {
            set_esp_epbwarningmessage3(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage3Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage2Type esp_epbwarningmessage2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage2Type_IsValid(value)) {
            set_esp_epbwarningmessage2(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage2Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage1Type esp_epbwarningmessage1 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage1Type_IsValid(value)) {
            set_esp_epbwarningmessage1(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage1Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhwarningmessageType esp_avhwarningmessage = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhwarningmessageType_IsValid(value)) {
            set_esp_avhwarningmessage(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhwarningmessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhactiveType esp_avhactive = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhactiveType_IsValid(value)) {
            set_esp_avhactive(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhactiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhstandbyType esp_avhstandby = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhstandbyType_IsValid(value)) {
            set_esp_avhstandby(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhstandbyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhavabliableType esp_avhavabliable = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhavabliableType_IsValid(value)) {
            set_esp_avhavabliable(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhavabliableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_vdcflgfltType esp_vdcflgflt = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_vdcflgfltType_IsValid(value)) {
            set_esp_vdcflgflt(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_vdcflgfltType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_tcsflgfltType esp_tcsflgflt = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsflgfltType_IsValid(value)) {
            set_esp_tcsflgflt(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsflgfltType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_tcsctrlactvType esp_tcsctrlactv = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsctrlactvType_IsValid(value)) {
            set_esp_tcsctrlactv(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsctrlactvType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espctrlactvType esp_espctrlactv = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_espctrlactvType_IsValid(value)) {
            set_esp_espctrlactv(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espctrlactvType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_driving_mode_reqType esp_driving_mode_req = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_driving_mode_reqType_IsValid(value)) {
            set_esp_driving_mode_req(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_driving_mode_reqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espinfolampType esp_espinfolamp = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_espinfolampType_IsValid(value)) {
            set_esp_espinfolamp(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espinfolampType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espenablestsType esp_espenablests = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_espenablestsType_IsValid(value)) {
            set_esp_espenablests(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espenablestsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_gearshiftprevnType esp_gearshiftprevn = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_gearshiftprevnType_IsValid(value)) {
            set_esp_gearshiftprevn(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_gearshiftprevnType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbstatusType esp_epbstatus = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbstatusType_IsValid(value)) {
            set_esp_epbstatus(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rollingcounter_0x243 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_rollingcounter_0x243();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rollingcounter_0x243_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.RollerbenchmodestsType rollerbenchmodests = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_RollerbenchmodestsType_IsValid(value)) {
            set_rollerbenchmodests(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_RollerbenchmodestsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x243 = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_checksum_0x243();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x243_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epberrorstatusType esp_epberrorstatus = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_epberrorstatusType_IsValid(value)) {
            set_esp_epberrorstatus(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epberrorstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(26, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_ccswitchoffType esp_ccswitchoff = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_ccswitchoffType_IsValid(value)) {
            set_esp_ccswitchoff(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_ccswitchoffType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(27, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hdcavailableType esp_hdcavailable = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcavailableType_IsValid(value)) {
            set_esp_hdcavailable(static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcavailableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(28, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Esp_status_0x243_243)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Esp_status_0x243_243)
  return false;
#undef DO_
}

void Esp_status_0x243_243::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Esp_status_0x243_243)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hhcavailableType esp_hhcavailable = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->esp_hhcavailable(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hhcactiveType esp_hhcactive = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->esp_hhcactive(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hdcactiveType esp_hdcactive = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->esp_hdcactive(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_ldmblc_blrequestcontrollerType esp_ldmblc_blrequestcontroller = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->esp_ldmblc_blrequestcontroller(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_cdpavailableType esp_cdpavailable = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->esp_cdpavailable(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_cdpactiveType esp_cdpactive = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->esp_cdpactive(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage3Type esp_epbwarningmessage3 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->esp_epbwarningmessage3(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage2Type esp_epbwarningmessage2 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->esp_epbwarningmessage2(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage1Type esp_epbwarningmessage1 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->esp_epbwarningmessage1(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhwarningmessageType esp_avhwarningmessage = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->esp_avhwarningmessage(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhactiveType esp_avhactive = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->esp_avhactive(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhstandbyType esp_avhstandby = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->esp_avhstandby(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhavabliableType esp_avhavabliable = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->esp_avhavabliable(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_vdcflgfltType esp_vdcflgflt = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->esp_vdcflgflt(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_tcsflgfltType esp_tcsflgflt = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->esp_tcsflgflt(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_tcsctrlactvType esp_tcsctrlactv = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->esp_tcsctrlactv(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espctrlactvType esp_espctrlactv = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->esp_espctrlactv(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_driving_mode_reqType esp_driving_mode_req = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->esp_driving_mode_req(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espinfolampType esp_espinfolamp = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->esp_espinfolamp(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espenablestsType esp_espenablests = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->esp_espenablests(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_gearshiftprevnType esp_gearshiftprevn = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->esp_gearshiftprevn(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbstatusType esp_epbstatus = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->esp_epbstatus(), output);
  }

  // optional int32 rollingcounter_0x243 = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->rollingcounter_0x243(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.RollerbenchmodestsType rollerbenchmodests = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->rollerbenchmodests(), output);
  }

  // optional int32 checksum_0x243 = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->checksum_0x243(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epberrorstatusType esp_epberrorstatus = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      26, this->esp_epberrorstatus(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_ccswitchoffType esp_ccswitchoff = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->esp_ccswitchoff(), output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hdcavailableType esp_hdcavailable = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->esp_hdcavailable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Esp_status_0x243_243)
}

::google::protobuf::uint8* Esp_status_0x243_243::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Esp_status_0x243_243)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hhcavailableType esp_hhcavailable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->esp_hhcavailable(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hhcactiveType esp_hhcactive = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->esp_hhcactive(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hdcactiveType esp_hdcactive = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->esp_hdcactive(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_ldmblc_blrequestcontrollerType esp_ldmblc_blrequestcontroller = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->esp_ldmblc_blrequestcontroller(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_cdpavailableType esp_cdpavailable = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->esp_cdpavailable(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_cdpactiveType esp_cdpactive = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->esp_cdpactive(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage3Type esp_epbwarningmessage3 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->esp_epbwarningmessage3(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage2Type esp_epbwarningmessage2 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->esp_epbwarningmessage2(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage1Type esp_epbwarningmessage1 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->esp_epbwarningmessage1(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhwarningmessageType esp_avhwarningmessage = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->esp_avhwarningmessage(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhactiveType esp_avhactive = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->esp_avhactive(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhstandbyType esp_avhstandby = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->esp_avhstandby(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhavabliableType esp_avhavabliable = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->esp_avhavabliable(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_vdcflgfltType esp_vdcflgflt = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->esp_vdcflgflt(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_tcsflgfltType esp_tcsflgflt = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->esp_tcsflgflt(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_tcsctrlactvType esp_tcsctrlactv = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->esp_tcsctrlactv(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espctrlactvType esp_espctrlactv = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->esp_espctrlactv(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_driving_mode_reqType esp_driving_mode_req = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->esp_driving_mode_req(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espinfolampType esp_espinfolamp = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->esp_espinfolamp(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espenablestsType esp_espenablests = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->esp_espenablests(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_gearshiftprevnType esp_gearshiftprevn = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->esp_gearshiftprevn(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbstatusType esp_epbstatus = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->esp_epbstatus(), target);
  }

  // optional int32 rollingcounter_0x243 = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->rollingcounter_0x243(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.RollerbenchmodestsType rollerbenchmodests = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->rollerbenchmodests(), target);
  }

  // optional int32 checksum_0x243 = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->checksum_0x243(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epberrorstatusType esp_epberrorstatus = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      26, this->esp_epberrorstatus(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_ccswitchoffType esp_ccswitchoff = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      27, this->esp_ccswitchoff(), target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hdcavailableType esp_hdcavailable = 28;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->esp_hdcavailable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Esp_status_0x243_243)
  return target;
}

size_t Esp_status_0x243_243::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Esp_status_0x243_243)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hhcavailableType esp_hhcavailable = 1;
    if (has_esp_hhcavailable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_hhcavailable());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hhcactiveType esp_hhcactive = 2;
    if (has_esp_hhcactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_hhcactive());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hdcactiveType esp_hdcactive = 3;
    if (has_esp_hdcactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_hdcactive());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_ldmblc_blrequestcontrollerType esp_ldmblc_blrequestcontroller = 4;
    if (has_esp_ldmblc_blrequestcontroller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_ldmblc_blrequestcontroller());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_cdpavailableType esp_cdpavailable = 5;
    if (has_esp_cdpavailable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_cdpavailable());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_cdpactiveType esp_cdpactive = 6;
    if (has_esp_cdpactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_cdpactive());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage3Type esp_epbwarningmessage3 = 7;
    if (has_esp_epbwarningmessage3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_epbwarningmessage3());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage2Type esp_epbwarningmessage2 = 8;
    if (has_esp_epbwarningmessage2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_epbwarningmessage2());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage1Type esp_epbwarningmessage1 = 9;
    if (has_esp_epbwarningmessage1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_epbwarningmessage1());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhwarningmessageType esp_avhwarningmessage = 10;
    if (has_esp_avhwarningmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_avhwarningmessage());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhactiveType esp_avhactive = 11;
    if (has_esp_avhactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_avhactive());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhstandbyType esp_avhstandby = 12;
    if (has_esp_avhstandby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_avhstandby());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhavabliableType esp_avhavabliable = 13;
    if (has_esp_avhavabliable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_avhavabliable());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_vdcflgfltType esp_vdcflgflt = 14;
    if (has_esp_vdcflgflt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_vdcflgflt());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_tcsflgfltType esp_tcsflgflt = 15;
    if (has_esp_tcsflgflt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_tcsflgflt());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_tcsctrlactvType esp_tcsctrlactv = 16;
    if (has_esp_tcsctrlactv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_tcsctrlactv());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espctrlactvType esp_espctrlactv = 17;
    if (has_esp_espctrlactv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_espctrlactv());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_driving_mode_reqType esp_driving_mode_req = 18;
    if (has_esp_driving_mode_req()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_driving_mode_req());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espinfolampType esp_espinfolamp = 19;
    if (has_esp_espinfolamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_espinfolamp());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espenablestsType esp_espenablests = 20;
    if (has_esp_espenablests()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_espenablests());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_gearshiftprevnType esp_gearshiftprevn = 21;
    if (has_esp_gearshiftprevn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_gearshiftprevn());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbstatusType esp_epbstatus = 22;
    if (has_esp_epbstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_epbstatus());
    }

    // optional int32 rollingcounter_0x243 = 23;
    if (has_rollingcounter_0x243()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rollingcounter_0x243());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.RollerbenchmodestsType rollerbenchmodests = 24;
    if (has_rollerbenchmodests()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rollerbenchmodests());
    }

  }
  if (_has_bits_[24 / 32] & 251658240u) {
    // optional int32 checksum_0x243 = 25;
    if (has_checksum_0x243()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x243());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epberrorstatusType esp_epberrorstatus = 26;
    if (has_esp_epberrorstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_epberrorstatus());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_ccswitchoffType esp_ccswitchoff = 27;
    if (has_esp_ccswitchoff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_ccswitchoff());
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hdcavailableType esp_hdcavailable = 28;
    if (has_esp_hdcavailable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_hdcavailable());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esp_status_0x243_243::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Esp_status_0x243_243)
  GOOGLE_DCHECK_NE(&from, this);
  const Esp_status_0x243_243* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esp_status_0x243_243>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Esp_status_0x243_243)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Esp_status_0x243_243)
    MergeFrom(*source);
  }
}

void Esp_status_0x243_243::MergeFrom(const Esp_status_0x243_243& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Esp_status_0x243_243)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      esp_hhcavailable_ = from.esp_hhcavailable_;
    }
    if (cached_has_bits & 0x00000002u) {
      esp_hhcactive_ = from.esp_hhcactive_;
    }
    if (cached_has_bits & 0x00000004u) {
      esp_hdcactive_ = from.esp_hdcactive_;
    }
    if (cached_has_bits & 0x00000008u) {
      esp_ldmblc_blrequestcontroller_ = from.esp_ldmblc_blrequestcontroller_;
    }
    if (cached_has_bits & 0x00000010u) {
      esp_cdpavailable_ = from.esp_cdpavailable_;
    }
    if (cached_has_bits & 0x00000020u) {
      esp_cdpactive_ = from.esp_cdpactive_;
    }
    if (cached_has_bits & 0x00000040u) {
      esp_epbwarningmessage3_ = from.esp_epbwarningmessage3_;
    }
    if (cached_has_bits & 0x00000080u) {
      esp_epbwarningmessage2_ = from.esp_epbwarningmessage2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      esp_epbwarningmessage1_ = from.esp_epbwarningmessage1_;
    }
    if (cached_has_bits & 0x00000200u) {
      esp_avhwarningmessage_ = from.esp_avhwarningmessage_;
    }
    if (cached_has_bits & 0x00000400u) {
      esp_avhactive_ = from.esp_avhactive_;
    }
    if (cached_has_bits & 0x00000800u) {
      esp_avhstandby_ = from.esp_avhstandby_;
    }
    if (cached_has_bits & 0x00001000u) {
      esp_avhavabliable_ = from.esp_avhavabliable_;
    }
    if (cached_has_bits & 0x00002000u) {
      esp_vdcflgflt_ = from.esp_vdcflgflt_;
    }
    if (cached_has_bits & 0x00004000u) {
      esp_tcsflgflt_ = from.esp_tcsflgflt_;
    }
    if (cached_has_bits & 0x00008000u) {
      esp_tcsctrlactv_ = from.esp_tcsctrlactv_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      esp_espctrlactv_ = from.esp_espctrlactv_;
    }
    if (cached_has_bits & 0x00020000u) {
      esp_driving_mode_req_ = from.esp_driving_mode_req_;
    }
    if (cached_has_bits & 0x00040000u) {
      esp_espinfolamp_ = from.esp_espinfolamp_;
    }
    if (cached_has_bits & 0x00080000u) {
      esp_espenablests_ = from.esp_espenablests_;
    }
    if (cached_has_bits & 0x00100000u) {
      esp_gearshiftprevn_ = from.esp_gearshiftprevn_;
    }
    if (cached_has_bits & 0x00200000u) {
      esp_epbstatus_ = from.esp_epbstatus_;
    }
    if (cached_has_bits & 0x00400000u) {
      rollingcounter_0x243_ = from.rollingcounter_0x243_;
    }
    if (cached_has_bits & 0x00800000u) {
      rollerbenchmodests_ = from.rollerbenchmodests_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 251658240u) {
    if (cached_has_bits & 0x01000000u) {
      checksum_0x243_ = from.checksum_0x243_;
    }
    if (cached_has_bits & 0x02000000u) {
      esp_epberrorstatus_ = from.esp_epberrorstatus_;
    }
    if (cached_has_bits & 0x04000000u) {
      esp_ccswitchoff_ = from.esp_ccswitchoff_;
    }
    if (cached_has_bits & 0x08000000u) {
      esp_hdcavailable_ = from.esp_hdcavailable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esp_status_0x243_243::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Esp_status_0x243_243)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esp_status_0x243_243::CopyFrom(const Esp_status_0x243_243& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Esp_status_0x243_243)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esp_status_0x243_243::IsInitialized() const {
  return true;
}

void Esp_status_0x243_243::Swap(Esp_status_0x243_243* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esp_status_0x243_243::InternalSwap(Esp_status_0x243_243* other) {
  std::swap(esp_hhcavailable_, other->esp_hhcavailable_);
  std::swap(esp_hhcactive_, other->esp_hhcactive_);
  std::swap(esp_hdcactive_, other->esp_hdcactive_);
  std::swap(esp_ldmblc_blrequestcontroller_, other->esp_ldmblc_blrequestcontroller_);
  std::swap(esp_cdpavailable_, other->esp_cdpavailable_);
  std::swap(esp_cdpactive_, other->esp_cdpactive_);
  std::swap(esp_epbwarningmessage3_, other->esp_epbwarningmessage3_);
  std::swap(esp_epbwarningmessage2_, other->esp_epbwarningmessage2_);
  std::swap(esp_epbwarningmessage1_, other->esp_epbwarningmessage1_);
  std::swap(esp_avhwarningmessage_, other->esp_avhwarningmessage_);
  std::swap(esp_avhactive_, other->esp_avhactive_);
  std::swap(esp_avhstandby_, other->esp_avhstandby_);
  std::swap(esp_avhavabliable_, other->esp_avhavabliable_);
  std::swap(esp_vdcflgflt_, other->esp_vdcflgflt_);
  std::swap(esp_tcsflgflt_, other->esp_tcsflgflt_);
  std::swap(esp_tcsctrlactv_, other->esp_tcsctrlactv_);
  std::swap(esp_espctrlactv_, other->esp_espctrlactv_);
  std::swap(esp_driving_mode_req_, other->esp_driving_mode_req_);
  std::swap(esp_espinfolamp_, other->esp_espinfolamp_);
  std::swap(esp_espenablests_, other->esp_espenablests_);
  std::swap(esp_gearshiftprevn_, other->esp_gearshiftprevn_);
  std::swap(esp_epbstatus_, other->esp_epbstatus_);
  std::swap(rollingcounter_0x243_, other->rollingcounter_0x243_);
  std::swap(rollerbenchmodests_, other->rollerbenchmodests_);
  std::swap(checksum_0x243_, other->checksum_0x243_);
  std::swap(esp_epberrorstatus_, other->esp_epberrorstatus_);
  std::swap(esp_ccswitchoff_, other->esp_ccswitchoff_);
  std::swap(esp_hdcavailable_, other->esp_hdcavailable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esp_status_0x243_243::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esp_status_0x243_243

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hhcavailableType esp_hhcavailable = 1;
bool Esp_status_0x243_243::has_esp_hhcavailable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esp_status_0x243_243::set_has_esp_hhcavailable() {
  _has_bits_[0] |= 0x00000001u;
}
void Esp_status_0x243_243::clear_has_esp_hhcavailable() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esp_status_0x243_243::clear_esp_hhcavailable() {
  esp_hhcavailable_ = 0;
  clear_has_esp_hhcavailable();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcavailableType Esp_status_0x243_243::esp_hhcavailable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_hhcavailable)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcavailableType >(esp_hhcavailable_);
}
void Esp_status_0x243_243::set_esp_hhcavailable(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcavailableType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcavailableType_IsValid(value));
  set_has_esp_hhcavailable();
  esp_hhcavailable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_hhcavailable)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hhcactiveType esp_hhcactive = 2;
bool Esp_status_0x243_243::has_esp_hhcactive() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esp_status_0x243_243::set_has_esp_hhcactive() {
  _has_bits_[0] |= 0x00000002u;
}
void Esp_status_0x243_243::clear_has_esp_hhcactive() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esp_status_0x243_243::clear_esp_hhcactive() {
  esp_hhcactive_ = 0;
  clear_has_esp_hhcactive();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcactiveType Esp_status_0x243_243::esp_hhcactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_hhcactive)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcactiveType >(esp_hhcactive_);
}
void Esp_status_0x243_243::set_esp_hhcactive(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcactiveType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hhcactiveType_IsValid(value));
  set_has_esp_hhcactive();
  esp_hhcactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_hhcactive)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hdcactiveType esp_hdcactive = 3;
bool Esp_status_0x243_243::has_esp_hdcactive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esp_status_0x243_243::set_has_esp_hdcactive() {
  _has_bits_[0] |= 0x00000004u;
}
void Esp_status_0x243_243::clear_has_esp_hdcactive() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esp_status_0x243_243::clear_esp_hdcactive() {
  esp_hdcactive_ = 0;
  clear_has_esp_hdcactive();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcactiveType Esp_status_0x243_243::esp_hdcactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_hdcactive)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcactiveType >(esp_hdcactive_);
}
void Esp_status_0x243_243::set_esp_hdcactive(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcactiveType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcactiveType_IsValid(value));
  set_has_esp_hdcactive();
  esp_hdcactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_hdcactive)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_ldmblc_blrequestcontrollerType esp_ldmblc_blrequestcontroller = 4;
bool Esp_status_0x243_243::has_esp_ldmblc_blrequestcontroller() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esp_status_0x243_243::set_has_esp_ldmblc_blrequestcontroller() {
  _has_bits_[0] |= 0x00000008u;
}
void Esp_status_0x243_243::clear_has_esp_ldmblc_blrequestcontroller() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esp_status_0x243_243::clear_esp_ldmblc_blrequestcontroller() {
  esp_ldmblc_blrequestcontroller_ = 0;
  clear_has_esp_ldmblc_blrequestcontroller();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType Esp_status_0x243_243::esp_ldmblc_blrequestcontroller() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_ldmblc_blrequestcontroller)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType >(esp_ldmblc_blrequestcontroller_);
}
void Esp_status_0x243_243::set_esp_ldmblc_blrequestcontroller(::jmc_auto::canbus::Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_ldmblc_blrequestcontrollerType_IsValid(value));
  set_has_esp_ldmblc_blrequestcontroller();
  esp_ldmblc_blrequestcontroller_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_ldmblc_blrequestcontroller)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_cdpavailableType esp_cdpavailable = 5;
bool Esp_status_0x243_243::has_esp_cdpavailable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esp_status_0x243_243::set_has_esp_cdpavailable() {
  _has_bits_[0] |= 0x00000010u;
}
void Esp_status_0x243_243::clear_has_esp_cdpavailable() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esp_status_0x243_243::clear_esp_cdpavailable() {
  esp_cdpavailable_ = 0;
  clear_has_esp_cdpavailable();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpavailableType Esp_status_0x243_243::esp_cdpavailable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_cdpavailable)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpavailableType >(esp_cdpavailable_);
}
void Esp_status_0x243_243::set_esp_cdpavailable(::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpavailableType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpavailableType_IsValid(value));
  set_has_esp_cdpavailable();
  esp_cdpavailable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_cdpavailable)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_cdpactiveType esp_cdpactive = 6;
bool Esp_status_0x243_243::has_esp_cdpactive() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Esp_status_0x243_243::set_has_esp_cdpactive() {
  _has_bits_[0] |= 0x00000020u;
}
void Esp_status_0x243_243::clear_has_esp_cdpactive() {
  _has_bits_[0] &= ~0x00000020u;
}
void Esp_status_0x243_243::clear_esp_cdpactive() {
  esp_cdpactive_ = 0;
  clear_has_esp_cdpactive();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpactiveType Esp_status_0x243_243::esp_cdpactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_cdpactive)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpactiveType >(esp_cdpactive_);
}
void Esp_status_0x243_243::set_esp_cdpactive(::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpactiveType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_cdpactiveType_IsValid(value));
  set_has_esp_cdpactive();
  esp_cdpactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_cdpactive)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage3Type esp_epbwarningmessage3 = 7;
bool Esp_status_0x243_243::has_esp_epbwarningmessage3() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Esp_status_0x243_243::set_has_esp_epbwarningmessage3() {
  _has_bits_[0] |= 0x00000040u;
}
void Esp_status_0x243_243::clear_has_esp_epbwarningmessage3() {
  _has_bits_[0] &= ~0x00000040u;
}
void Esp_status_0x243_243::clear_esp_epbwarningmessage3() {
  esp_epbwarningmessage3_ = 0;
  clear_has_esp_epbwarningmessage3();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage3Type Esp_status_0x243_243::esp_epbwarningmessage3() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_epbwarningmessage3)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage3Type >(esp_epbwarningmessage3_);
}
void Esp_status_0x243_243::set_esp_epbwarningmessage3(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage3Type value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage3Type_IsValid(value));
  set_has_esp_epbwarningmessage3();
  esp_epbwarningmessage3_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_epbwarningmessage3)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage2Type esp_epbwarningmessage2 = 8;
bool Esp_status_0x243_243::has_esp_epbwarningmessage2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Esp_status_0x243_243::set_has_esp_epbwarningmessage2() {
  _has_bits_[0] |= 0x00000080u;
}
void Esp_status_0x243_243::clear_has_esp_epbwarningmessage2() {
  _has_bits_[0] &= ~0x00000080u;
}
void Esp_status_0x243_243::clear_esp_epbwarningmessage2() {
  esp_epbwarningmessage2_ = 0;
  clear_has_esp_epbwarningmessage2();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage2Type Esp_status_0x243_243::esp_epbwarningmessage2() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_epbwarningmessage2)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage2Type >(esp_epbwarningmessage2_);
}
void Esp_status_0x243_243::set_esp_epbwarningmessage2(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage2Type value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage2Type_IsValid(value));
  set_has_esp_epbwarningmessage2();
  esp_epbwarningmessage2_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_epbwarningmessage2)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbwarningmessage1Type esp_epbwarningmessage1 = 9;
bool Esp_status_0x243_243::has_esp_epbwarningmessage1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Esp_status_0x243_243::set_has_esp_epbwarningmessage1() {
  _has_bits_[0] |= 0x00000100u;
}
void Esp_status_0x243_243::clear_has_esp_epbwarningmessage1() {
  _has_bits_[0] &= ~0x00000100u;
}
void Esp_status_0x243_243::clear_esp_epbwarningmessage1() {
  esp_epbwarningmessage1_ = 0;
  clear_has_esp_epbwarningmessage1();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage1Type Esp_status_0x243_243::esp_epbwarningmessage1() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_epbwarningmessage1)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage1Type >(esp_epbwarningmessage1_);
}
void Esp_status_0x243_243::set_esp_epbwarningmessage1(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage1Type value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbwarningmessage1Type_IsValid(value));
  set_has_esp_epbwarningmessage1();
  esp_epbwarningmessage1_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_epbwarningmessage1)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhwarningmessageType esp_avhwarningmessage = 10;
bool Esp_status_0x243_243::has_esp_avhwarningmessage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Esp_status_0x243_243::set_has_esp_avhwarningmessage() {
  _has_bits_[0] |= 0x00000200u;
}
void Esp_status_0x243_243::clear_has_esp_avhwarningmessage() {
  _has_bits_[0] &= ~0x00000200u;
}
void Esp_status_0x243_243::clear_esp_avhwarningmessage() {
  esp_avhwarningmessage_ = 0;
  clear_has_esp_avhwarningmessage();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhwarningmessageType Esp_status_0x243_243::esp_avhwarningmessage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_avhwarningmessage)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhwarningmessageType >(esp_avhwarningmessage_);
}
void Esp_status_0x243_243::set_esp_avhwarningmessage(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhwarningmessageType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhwarningmessageType_IsValid(value));
  set_has_esp_avhwarningmessage();
  esp_avhwarningmessage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_avhwarningmessage)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhactiveType esp_avhactive = 11;
bool Esp_status_0x243_243::has_esp_avhactive() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Esp_status_0x243_243::set_has_esp_avhactive() {
  _has_bits_[0] |= 0x00000400u;
}
void Esp_status_0x243_243::clear_has_esp_avhactive() {
  _has_bits_[0] &= ~0x00000400u;
}
void Esp_status_0x243_243::clear_esp_avhactive() {
  esp_avhactive_ = 0;
  clear_has_esp_avhactive();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhactiveType Esp_status_0x243_243::esp_avhactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_avhactive)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhactiveType >(esp_avhactive_);
}
void Esp_status_0x243_243::set_esp_avhactive(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhactiveType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhactiveType_IsValid(value));
  set_has_esp_avhactive();
  esp_avhactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_avhactive)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhstandbyType esp_avhstandby = 12;
bool Esp_status_0x243_243::has_esp_avhstandby() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Esp_status_0x243_243::set_has_esp_avhstandby() {
  _has_bits_[0] |= 0x00000800u;
}
void Esp_status_0x243_243::clear_has_esp_avhstandby() {
  _has_bits_[0] &= ~0x00000800u;
}
void Esp_status_0x243_243::clear_esp_avhstandby() {
  esp_avhstandby_ = 0;
  clear_has_esp_avhstandby();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhstandbyType Esp_status_0x243_243::esp_avhstandby() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_avhstandby)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhstandbyType >(esp_avhstandby_);
}
void Esp_status_0x243_243::set_esp_avhstandby(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhstandbyType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhstandbyType_IsValid(value));
  set_has_esp_avhstandby();
  esp_avhstandby_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_avhstandby)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_avhavabliableType esp_avhavabliable = 13;
bool Esp_status_0x243_243::has_esp_avhavabliable() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Esp_status_0x243_243::set_has_esp_avhavabliable() {
  _has_bits_[0] |= 0x00001000u;
}
void Esp_status_0x243_243::clear_has_esp_avhavabliable() {
  _has_bits_[0] &= ~0x00001000u;
}
void Esp_status_0x243_243::clear_esp_avhavabliable() {
  esp_avhavabliable_ = 0;
  clear_has_esp_avhavabliable();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhavabliableType Esp_status_0x243_243::esp_avhavabliable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_avhavabliable)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhavabliableType >(esp_avhavabliable_);
}
void Esp_status_0x243_243::set_esp_avhavabliable(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhavabliableType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_avhavabliableType_IsValid(value));
  set_has_esp_avhavabliable();
  esp_avhavabliable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_avhavabliable)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_vdcflgfltType esp_vdcflgflt = 14;
bool Esp_status_0x243_243::has_esp_vdcflgflt() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Esp_status_0x243_243::set_has_esp_vdcflgflt() {
  _has_bits_[0] |= 0x00002000u;
}
void Esp_status_0x243_243::clear_has_esp_vdcflgflt() {
  _has_bits_[0] &= ~0x00002000u;
}
void Esp_status_0x243_243::clear_esp_vdcflgflt() {
  esp_vdcflgflt_ = 0;
  clear_has_esp_vdcflgflt();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_vdcflgfltType Esp_status_0x243_243::esp_vdcflgflt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_vdcflgflt)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_vdcflgfltType >(esp_vdcflgflt_);
}
void Esp_status_0x243_243::set_esp_vdcflgflt(::jmc_auto::canbus::Esp_status_0x243_243_Esp_vdcflgfltType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_vdcflgfltType_IsValid(value));
  set_has_esp_vdcflgflt();
  esp_vdcflgflt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_vdcflgflt)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_tcsflgfltType esp_tcsflgflt = 15;
bool Esp_status_0x243_243::has_esp_tcsflgflt() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Esp_status_0x243_243::set_has_esp_tcsflgflt() {
  _has_bits_[0] |= 0x00004000u;
}
void Esp_status_0x243_243::clear_has_esp_tcsflgflt() {
  _has_bits_[0] &= ~0x00004000u;
}
void Esp_status_0x243_243::clear_esp_tcsflgflt() {
  esp_tcsflgflt_ = 0;
  clear_has_esp_tcsflgflt();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsflgfltType Esp_status_0x243_243::esp_tcsflgflt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_tcsflgflt)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsflgfltType >(esp_tcsflgflt_);
}
void Esp_status_0x243_243::set_esp_tcsflgflt(::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsflgfltType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsflgfltType_IsValid(value));
  set_has_esp_tcsflgflt();
  esp_tcsflgflt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_tcsflgflt)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_tcsctrlactvType esp_tcsctrlactv = 16;
bool Esp_status_0x243_243::has_esp_tcsctrlactv() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Esp_status_0x243_243::set_has_esp_tcsctrlactv() {
  _has_bits_[0] |= 0x00008000u;
}
void Esp_status_0x243_243::clear_has_esp_tcsctrlactv() {
  _has_bits_[0] &= ~0x00008000u;
}
void Esp_status_0x243_243::clear_esp_tcsctrlactv() {
  esp_tcsctrlactv_ = 0;
  clear_has_esp_tcsctrlactv();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsctrlactvType Esp_status_0x243_243::esp_tcsctrlactv() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_tcsctrlactv)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsctrlactvType >(esp_tcsctrlactv_);
}
void Esp_status_0x243_243::set_esp_tcsctrlactv(::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsctrlactvType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_tcsctrlactvType_IsValid(value));
  set_has_esp_tcsctrlactv();
  esp_tcsctrlactv_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_tcsctrlactv)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espctrlactvType esp_espctrlactv = 17;
bool Esp_status_0x243_243::has_esp_espctrlactv() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Esp_status_0x243_243::set_has_esp_espctrlactv() {
  _has_bits_[0] |= 0x00010000u;
}
void Esp_status_0x243_243::clear_has_esp_espctrlactv() {
  _has_bits_[0] &= ~0x00010000u;
}
void Esp_status_0x243_243::clear_esp_espctrlactv() {
  esp_espctrlactv_ = 0;
  clear_has_esp_espctrlactv();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_espctrlactvType Esp_status_0x243_243::esp_espctrlactv() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_espctrlactv)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espctrlactvType >(esp_espctrlactv_);
}
void Esp_status_0x243_243::set_esp_espctrlactv(::jmc_auto::canbus::Esp_status_0x243_243_Esp_espctrlactvType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_espctrlactvType_IsValid(value));
  set_has_esp_espctrlactv();
  esp_espctrlactv_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_espctrlactv)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_driving_mode_reqType esp_driving_mode_req = 18;
bool Esp_status_0x243_243::has_esp_driving_mode_req() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Esp_status_0x243_243::set_has_esp_driving_mode_req() {
  _has_bits_[0] |= 0x00020000u;
}
void Esp_status_0x243_243::clear_has_esp_driving_mode_req() {
  _has_bits_[0] &= ~0x00020000u;
}
void Esp_status_0x243_243::clear_esp_driving_mode_req() {
  esp_driving_mode_req_ = 0;
  clear_has_esp_driving_mode_req();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_driving_mode_reqType Esp_status_0x243_243::esp_driving_mode_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_driving_mode_req)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_driving_mode_reqType >(esp_driving_mode_req_);
}
void Esp_status_0x243_243::set_esp_driving_mode_req(::jmc_auto::canbus::Esp_status_0x243_243_Esp_driving_mode_reqType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_driving_mode_reqType_IsValid(value));
  set_has_esp_driving_mode_req();
  esp_driving_mode_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_driving_mode_req)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espinfolampType esp_espinfolamp = 19;
bool Esp_status_0x243_243::has_esp_espinfolamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Esp_status_0x243_243::set_has_esp_espinfolamp() {
  _has_bits_[0] |= 0x00040000u;
}
void Esp_status_0x243_243::clear_has_esp_espinfolamp() {
  _has_bits_[0] &= ~0x00040000u;
}
void Esp_status_0x243_243::clear_esp_espinfolamp() {
  esp_espinfolamp_ = 0;
  clear_has_esp_espinfolamp();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_espinfolampType Esp_status_0x243_243::esp_espinfolamp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_espinfolamp)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espinfolampType >(esp_espinfolamp_);
}
void Esp_status_0x243_243::set_esp_espinfolamp(::jmc_auto::canbus::Esp_status_0x243_243_Esp_espinfolampType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_espinfolampType_IsValid(value));
  set_has_esp_espinfolamp();
  esp_espinfolamp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_espinfolamp)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_espenablestsType esp_espenablests = 20;
bool Esp_status_0x243_243::has_esp_espenablests() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Esp_status_0x243_243::set_has_esp_espenablests() {
  _has_bits_[0] |= 0x00080000u;
}
void Esp_status_0x243_243::clear_has_esp_espenablests() {
  _has_bits_[0] &= ~0x00080000u;
}
void Esp_status_0x243_243::clear_esp_espenablests() {
  esp_espenablests_ = 0;
  clear_has_esp_espenablests();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_espenablestsType Esp_status_0x243_243::esp_espenablests() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_espenablests)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_espenablestsType >(esp_espenablests_);
}
void Esp_status_0x243_243::set_esp_espenablests(::jmc_auto::canbus::Esp_status_0x243_243_Esp_espenablestsType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_espenablestsType_IsValid(value));
  set_has_esp_espenablests();
  esp_espenablests_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_espenablests)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_gearshiftprevnType esp_gearshiftprevn = 21;
bool Esp_status_0x243_243::has_esp_gearshiftprevn() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Esp_status_0x243_243::set_has_esp_gearshiftprevn() {
  _has_bits_[0] |= 0x00100000u;
}
void Esp_status_0x243_243::clear_has_esp_gearshiftprevn() {
  _has_bits_[0] &= ~0x00100000u;
}
void Esp_status_0x243_243::clear_esp_gearshiftprevn() {
  esp_gearshiftprevn_ = 0;
  clear_has_esp_gearshiftprevn();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_gearshiftprevnType Esp_status_0x243_243::esp_gearshiftprevn() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_gearshiftprevn)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_gearshiftprevnType >(esp_gearshiftprevn_);
}
void Esp_status_0x243_243::set_esp_gearshiftprevn(::jmc_auto::canbus::Esp_status_0x243_243_Esp_gearshiftprevnType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_gearshiftprevnType_IsValid(value));
  set_has_esp_gearshiftprevn();
  esp_gearshiftprevn_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_gearshiftprevn)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epbstatusType esp_epbstatus = 22;
bool Esp_status_0x243_243::has_esp_epbstatus() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Esp_status_0x243_243::set_has_esp_epbstatus() {
  _has_bits_[0] |= 0x00200000u;
}
void Esp_status_0x243_243::clear_has_esp_epbstatus() {
  _has_bits_[0] &= ~0x00200000u;
}
void Esp_status_0x243_243::clear_esp_epbstatus() {
  esp_epbstatus_ = 0;
  clear_has_esp_epbstatus();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbstatusType Esp_status_0x243_243::esp_epbstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_epbstatus)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbstatusType >(esp_epbstatus_);
}
void Esp_status_0x243_243::set_esp_epbstatus(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbstatusType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epbstatusType_IsValid(value));
  set_has_esp_epbstatus();
  esp_epbstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_epbstatus)
}

// optional int32 rollingcounter_0x243 = 23;
bool Esp_status_0x243_243::has_rollingcounter_0x243() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Esp_status_0x243_243::set_has_rollingcounter_0x243() {
  _has_bits_[0] |= 0x00400000u;
}
void Esp_status_0x243_243::clear_has_rollingcounter_0x243() {
  _has_bits_[0] &= ~0x00400000u;
}
void Esp_status_0x243_243::clear_rollingcounter_0x243() {
  rollingcounter_0x243_ = 0;
  clear_has_rollingcounter_0x243();
}
::google::protobuf::int32 Esp_status_0x243_243::rollingcounter_0x243() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.rollingcounter_0x243)
  return rollingcounter_0x243_;
}
void Esp_status_0x243_243::set_rollingcounter_0x243(::google::protobuf::int32 value) {
  set_has_rollingcounter_0x243();
  rollingcounter_0x243_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.rollingcounter_0x243)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.RollerbenchmodestsType rollerbenchmodests = 24;
bool Esp_status_0x243_243::has_rollerbenchmodests() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Esp_status_0x243_243::set_has_rollerbenchmodests() {
  _has_bits_[0] |= 0x00800000u;
}
void Esp_status_0x243_243::clear_has_rollerbenchmodests() {
  _has_bits_[0] &= ~0x00800000u;
}
void Esp_status_0x243_243::clear_rollerbenchmodests() {
  rollerbenchmodests_ = 0;
  clear_has_rollerbenchmodests();
}
::jmc_auto::canbus::Esp_status_0x243_243_RollerbenchmodestsType Esp_status_0x243_243::rollerbenchmodests() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.rollerbenchmodests)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_RollerbenchmodestsType >(rollerbenchmodests_);
}
void Esp_status_0x243_243::set_rollerbenchmodests(::jmc_auto::canbus::Esp_status_0x243_243_RollerbenchmodestsType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_RollerbenchmodestsType_IsValid(value));
  set_has_rollerbenchmodests();
  rollerbenchmodests_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.rollerbenchmodests)
}

// optional int32 checksum_0x243 = 25;
bool Esp_status_0x243_243::has_checksum_0x243() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Esp_status_0x243_243::set_has_checksum_0x243() {
  _has_bits_[0] |= 0x01000000u;
}
void Esp_status_0x243_243::clear_has_checksum_0x243() {
  _has_bits_[0] &= ~0x01000000u;
}
void Esp_status_0x243_243::clear_checksum_0x243() {
  checksum_0x243_ = 0;
  clear_has_checksum_0x243();
}
::google::protobuf::int32 Esp_status_0x243_243::checksum_0x243() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.checksum_0x243)
  return checksum_0x243_;
}
void Esp_status_0x243_243::set_checksum_0x243(::google::protobuf::int32 value) {
  set_has_checksum_0x243();
  checksum_0x243_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.checksum_0x243)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_epberrorstatusType esp_epberrorstatus = 26;
bool Esp_status_0x243_243::has_esp_epberrorstatus() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Esp_status_0x243_243::set_has_esp_epberrorstatus() {
  _has_bits_[0] |= 0x02000000u;
}
void Esp_status_0x243_243::clear_has_esp_epberrorstatus() {
  _has_bits_[0] &= ~0x02000000u;
}
void Esp_status_0x243_243::clear_esp_epberrorstatus() {
  esp_epberrorstatus_ = 0;
  clear_has_esp_epberrorstatus();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_epberrorstatusType Esp_status_0x243_243::esp_epberrorstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_epberrorstatus)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_epberrorstatusType >(esp_epberrorstatus_);
}
void Esp_status_0x243_243::set_esp_epberrorstatus(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epberrorstatusType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_epberrorstatusType_IsValid(value));
  set_has_esp_epberrorstatus();
  esp_epberrorstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_epberrorstatus)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_ccswitchoffType esp_ccswitchoff = 27;
bool Esp_status_0x243_243::has_esp_ccswitchoff() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void Esp_status_0x243_243::set_has_esp_ccswitchoff() {
  _has_bits_[0] |= 0x04000000u;
}
void Esp_status_0x243_243::clear_has_esp_ccswitchoff() {
  _has_bits_[0] &= ~0x04000000u;
}
void Esp_status_0x243_243::clear_esp_ccswitchoff() {
  esp_ccswitchoff_ = 0;
  clear_has_esp_ccswitchoff();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_ccswitchoffType Esp_status_0x243_243::esp_ccswitchoff() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_ccswitchoff)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_ccswitchoffType >(esp_ccswitchoff_);
}
void Esp_status_0x243_243::set_esp_ccswitchoff(::jmc_auto::canbus::Esp_status_0x243_243_Esp_ccswitchoffType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_ccswitchoffType_IsValid(value));
  set_has_esp_ccswitchoff();
  esp_ccswitchoff_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_ccswitchoff)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243.Esp_hdcavailableType esp_hdcavailable = 28;
bool Esp_status_0x243_243::has_esp_hdcavailable() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void Esp_status_0x243_243::set_has_esp_hdcavailable() {
  _has_bits_[0] |= 0x08000000u;
}
void Esp_status_0x243_243::clear_has_esp_hdcavailable() {
  _has_bits_[0] &= ~0x08000000u;
}
void Esp_status_0x243_243::clear_esp_hdcavailable() {
  esp_hdcavailable_ = 0;
  clear_has_esp_hdcavailable();
}
::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcavailableType Esp_status_0x243_243::esp_hdcavailable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_status_0x243_243.esp_hdcavailable)
  return static_cast< ::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcavailableType >(esp_hdcavailable_);
}
void Esp_status_0x243_243::set_esp_hdcavailable(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcavailableType value) {
  assert(::jmc_auto::canbus::Esp_status_0x243_243_Esp_hdcavailableType_IsValid(value));
  set_has_esp_hdcavailable();
  esp_hdcavailable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_status_0x243_243.esp_hdcavailable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esp_axay_0x242_242::kEspAlatFieldNumber;
const int Esp_axay_0x242_242::kEspYawrateFieldNumber;
const int Esp_axay_0x242_242::kRollingCounter0X242FieldNumber;
const int Esp_axay_0x242_242::kEspYawratestatusFieldNumber;
const int Esp_axay_0x242_242::kEspAlatstatusFieldNumber;
const int Esp_axay_0x242_242::kEspAlgtstatusFieldNumber;
const int Esp_axay_0x242_242::kChecksum0X242FieldNumber;
const int Esp_axay_0x242_242::kEspAlgtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esp_axay_0x242_242::Esp_axay_0x242_242()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Esp_axay_0x242_242)
}
Esp_axay_0x242_242::Esp_axay_0x242_242(const Esp_axay_0x242_242& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&esp_alat_, &from.esp_alat_,
    reinterpret_cast<char*>(&checksum_0x242_) -
    reinterpret_cast<char*>(&esp_alat_) + sizeof(checksum_0x242_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Esp_axay_0x242_242)
}

void Esp_axay_0x242_242::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&esp_alat_, 0, reinterpret_cast<char*>(&checksum_0x242_) -
    reinterpret_cast<char*>(&esp_alat_) + sizeof(checksum_0x242_));
}

Esp_axay_0x242_242::~Esp_axay_0x242_242() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Esp_axay_0x242_242)
  SharedDtor();
}

void Esp_axay_0x242_242::SharedDtor() {
}

void Esp_axay_0x242_242::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esp_axay_0x242_242::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esp_axay_0x242_242& Esp_axay_0x242_242::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esp_axay_0x242_242* Esp_axay_0x242_242::New(::google::protobuf::Arena* arena) const {
  Esp_axay_0x242_242* n = new Esp_axay_0x242_242;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esp_axay_0x242_242::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Esp_axay_0x242_242)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&esp_alat_, 0, reinterpret_cast<char*>(&checksum_0x242_) -
      reinterpret_cast<char*>(&esp_alat_) + sizeof(checksum_0x242_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esp_axay_0x242_242::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Esp_axay_0x242_242)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double esp_alat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_esp_alat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &esp_alat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double esp_yawrate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_esp_yawrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &esp_yawrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x242 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_rolling_counter_0x242();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x242_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_yawratestatusType esp_yawratestatus = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_axay_0x242_242_Esp_yawratestatusType_IsValid(value)) {
            set_esp_yawratestatus(static_cast< ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_yawratestatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_alatstatusType esp_alatstatus = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_axay_0x242_242_Esp_alatstatusType_IsValid(value)) {
            set_esp_alatstatus(static_cast< ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_alatstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_algtstatusType esp_algtstatus = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_axay_0x242_242_Esp_algtstatusType_IsValid(value)) {
            set_esp_algtstatus(static_cast< ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_algtstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x242 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_checksum_0x242();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x242_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double esp_algt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_esp_algt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &esp_algt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Esp_axay_0x242_242)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Esp_axay_0x242_242)
  return false;
#undef DO_
}

void Esp_axay_0x242_242::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Esp_axay_0x242_242)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double esp_alat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->esp_alat(), output);
  }

  // optional double esp_yawrate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->esp_yawrate(), output);
  }

  // optional int32 rolling_counter_0x242 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rolling_counter_0x242(), output);
  }

  // optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_yawratestatusType esp_yawratestatus = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->esp_yawratestatus(), output);
  }

  // optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_alatstatusType esp_alatstatus = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->esp_alatstatus(), output);
  }

  // optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_algtstatusType esp_algtstatus = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->esp_algtstatus(), output);
  }

  // optional int32 checksum_0x242 = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->checksum_0x242(), output);
  }

  // optional double esp_algt = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->esp_algt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Esp_axay_0x242_242)
}

::google::protobuf::uint8* Esp_axay_0x242_242::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Esp_axay_0x242_242)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double esp_alat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->esp_alat(), target);
  }

  // optional double esp_yawrate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->esp_yawrate(), target);
  }

  // optional int32 rolling_counter_0x242 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rolling_counter_0x242(), target);
  }

  // optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_yawratestatusType esp_yawratestatus = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->esp_yawratestatus(), target);
  }

  // optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_alatstatusType esp_alatstatus = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->esp_alatstatus(), target);
  }

  // optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_algtstatusType esp_algtstatus = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->esp_algtstatus(), target);
  }

  // optional int32 checksum_0x242 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->checksum_0x242(), target);
  }

  // optional double esp_algt = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->esp_algt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Esp_axay_0x242_242)
  return target;
}

size_t Esp_axay_0x242_242::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Esp_axay_0x242_242)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double esp_alat = 1;
    if (has_esp_alat()) {
      total_size += 1 + 8;
    }

    // optional double esp_yawrate = 2;
    if (has_esp_yawrate()) {
      total_size += 1 + 8;
    }

    // optional int32 rolling_counter_0x242 = 3;
    if (has_rolling_counter_0x242()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x242());
    }

    // optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_yawratestatusType esp_yawratestatus = 4;
    if (has_esp_yawratestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_yawratestatus());
    }

    // optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_alatstatusType esp_alatstatus = 5;
    if (has_esp_alatstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_alatstatus());
    }

    // optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_algtstatusType esp_algtstatus = 6;
    if (has_esp_algtstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_algtstatus());
    }

    // optional double esp_algt = 8;
    if (has_esp_algt()) {
      total_size += 1 + 8;
    }

    // optional int32 checksum_0x242 = 7;
    if (has_checksum_0x242()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x242());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esp_axay_0x242_242::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Esp_axay_0x242_242)
  GOOGLE_DCHECK_NE(&from, this);
  const Esp_axay_0x242_242* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esp_axay_0x242_242>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Esp_axay_0x242_242)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Esp_axay_0x242_242)
    MergeFrom(*source);
  }
}

void Esp_axay_0x242_242::MergeFrom(const Esp_axay_0x242_242& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Esp_axay_0x242_242)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      esp_alat_ = from.esp_alat_;
    }
    if (cached_has_bits & 0x00000002u) {
      esp_yawrate_ = from.esp_yawrate_;
    }
    if (cached_has_bits & 0x00000004u) {
      rolling_counter_0x242_ = from.rolling_counter_0x242_;
    }
    if (cached_has_bits & 0x00000008u) {
      esp_yawratestatus_ = from.esp_yawratestatus_;
    }
    if (cached_has_bits & 0x00000010u) {
      esp_alatstatus_ = from.esp_alatstatus_;
    }
    if (cached_has_bits & 0x00000020u) {
      esp_algtstatus_ = from.esp_algtstatus_;
    }
    if (cached_has_bits & 0x00000040u) {
      esp_algt_ = from.esp_algt_;
    }
    if (cached_has_bits & 0x00000080u) {
      checksum_0x242_ = from.checksum_0x242_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esp_axay_0x242_242::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Esp_axay_0x242_242)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esp_axay_0x242_242::CopyFrom(const Esp_axay_0x242_242& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Esp_axay_0x242_242)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esp_axay_0x242_242::IsInitialized() const {
  return true;
}

void Esp_axay_0x242_242::Swap(Esp_axay_0x242_242* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esp_axay_0x242_242::InternalSwap(Esp_axay_0x242_242* other) {
  std::swap(esp_alat_, other->esp_alat_);
  std::swap(esp_yawrate_, other->esp_yawrate_);
  std::swap(rolling_counter_0x242_, other->rolling_counter_0x242_);
  std::swap(esp_yawratestatus_, other->esp_yawratestatus_);
  std::swap(esp_alatstatus_, other->esp_alatstatus_);
  std::swap(esp_algtstatus_, other->esp_algtstatus_);
  std::swap(esp_algt_, other->esp_algt_);
  std::swap(checksum_0x242_, other->checksum_0x242_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esp_axay_0x242_242::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esp_axay_0x242_242

// optional double esp_alat = 1;
bool Esp_axay_0x242_242::has_esp_alat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esp_axay_0x242_242::set_has_esp_alat() {
  _has_bits_[0] |= 0x00000001u;
}
void Esp_axay_0x242_242::clear_has_esp_alat() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esp_axay_0x242_242::clear_esp_alat() {
  esp_alat_ = 0;
  clear_has_esp_alat();
}
double Esp_axay_0x242_242::esp_alat() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_axay_0x242_242.esp_alat)
  return esp_alat_;
}
void Esp_axay_0x242_242::set_esp_alat(double value) {
  set_has_esp_alat();
  esp_alat_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_axay_0x242_242.esp_alat)
}

// optional double esp_yawrate = 2;
bool Esp_axay_0x242_242::has_esp_yawrate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esp_axay_0x242_242::set_has_esp_yawrate() {
  _has_bits_[0] |= 0x00000002u;
}
void Esp_axay_0x242_242::clear_has_esp_yawrate() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esp_axay_0x242_242::clear_esp_yawrate() {
  esp_yawrate_ = 0;
  clear_has_esp_yawrate();
}
double Esp_axay_0x242_242::esp_yawrate() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_axay_0x242_242.esp_yawrate)
  return esp_yawrate_;
}
void Esp_axay_0x242_242::set_esp_yawrate(double value) {
  set_has_esp_yawrate();
  esp_yawrate_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_axay_0x242_242.esp_yawrate)
}

// optional int32 rolling_counter_0x242 = 3;
bool Esp_axay_0x242_242::has_rolling_counter_0x242() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esp_axay_0x242_242::set_has_rolling_counter_0x242() {
  _has_bits_[0] |= 0x00000004u;
}
void Esp_axay_0x242_242::clear_has_rolling_counter_0x242() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esp_axay_0x242_242::clear_rolling_counter_0x242() {
  rolling_counter_0x242_ = 0;
  clear_has_rolling_counter_0x242();
}
::google::protobuf::int32 Esp_axay_0x242_242::rolling_counter_0x242() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_axay_0x242_242.rolling_counter_0x242)
  return rolling_counter_0x242_;
}
void Esp_axay_0x242_242::set_rolling_counter_0x242(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x242();
  rolling_counter_0x242_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_axay_0x242_242.rolling_counter_0x242)
}

// optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_yawratestatusType esp_yawratestatus = 4;
bool Esp_axay_0x242_242::has_esp_yawratestatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esp_axay_0x242_242::set_has_esp_yawratestatus() {
  _has_bits_[0] |= 0x00000008u;
}
void Esp_axay_0x242_242::clear_has_esp_yawratestatus() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esp_axay_0x242_242::clear_esp_yawratestatus() {
  esp_yawratestatus_ = 0;
  clear_has_esp_yawratestatus();
}
::jmc_auto::canbus::Esp_axay_0x242_242_Esp_yawratestatusType Esp_axay_0x242_242::esp_yawratestatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_axay_0x242_242.esp_yawratestatus)
  return static_cast< ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_yawratestatusType >(esp_yawratestatus_);
}
void Esp_axay_0x242_242::set_esp_yawratestatus(::jmc_auto::canbus::Esp_axay_0x242_242_Esp_yawratestatusType value) {
  assert(::jmc_auto::canbus::Esp_axay_0x242_242_Esp_yawratestatusType_IsValid(value));
  set_has_esp_yawratestatus();
  esp_yawratestatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_axay_0x242_242.esp_yawratestatus)
}

// optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_alatstatusType esp_alatstatus = 5;
bool Esp_axay_0x242_242::has_esp_alatstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esp_axay_0x242_242::set_has_esp_alatstatus() {
  _has_bits_[0] |= 0x00000010u;
}
void Esp_axay_0x242_242::clear_has_esp_alatstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esp_axay_0x242_242::clear_esp_alatstatus() {
  esp_alatstatus_ = 0;
  clear_has_esp_alatstatus();
}
::jmc_auto::canbus::Esp_axay_0x242_242_Esp_alatstatusType Esp_axay_0x242_242::esp_alatstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_axay_0x242_242.esp_alatstatus)
  return static_cast< ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_alatstatusType >(esp_alatstatus_);
}
void Esp_axay_0x242_242::set_esp_alatstatus(::jmc_auto::canbus::Esp_axay_0x242_242_Esp_alatstatusType value) {
  assert(::jmc_auto::canbus::Esp_axay_0x242_242_Esp_alatstatusType_IsValid(value));
  set_has_esp_alatstatus();
  esp_alatstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_axay_0x242_242.esp_alatstatus)
}

// optional .jmc_auto.canbus.Esp_axay_0x242_242.Esp_algtstatusType esp_algtstatus = 6;
bool Esp_axay_0x242_242::has_esp_algtstatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Esp_axay_0x242_242::set_has_esp_algtstatus() {
  _has_bits_[0] |= 0x00000020u;
}
void Esp_axay_0x242_242::clear_has_esp_algtstatus() {
  _has_bits_[0] &= ~0x00000020u;
}
void Esp_axay_0x242_242::clear_esp_algtstatus() {
  esp_algtstatus_ = 0;
  clear_has_esp_algtstatus();
}
::jmc_auto::canbus::Esp_axay_0x242_242_Esp_algtstatusType Esp_axay_0x242_242::esp_algtstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_axay_0x242_242.esp_algtstatus)
  return static_cast< ::jmc_auto::canbus::Esp_axay_0x242_242_Esp_algtstatusType >(esp_algtstatus_);
}
void Esp_axay_0x242_242::set_esp_algtstatus(::jmc_auto::canbus::Esp_axay_0x242_242_Esp_algtstatusType value) {
  assert(::jmc_auto::canbus::Esp_axay_0x242_242_Esp_algtstatusType_IsValid(value));
  set_has_esp_algtstatus();
  esp_algtstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_axay_0x242_242.esp_algtstatus)
}

// optional int32 checksum_0x242 = 7;
bool Esp_axay_0x242_242::has_checksum_0x242() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Esp_axay_0x242_242::set_has_checksum_0x242() {
  _has_bits_[0] |= 0x00000080u;
}
void Esp_axay_0x242_242::clear_has_checksum_0x242() {
  _has_bits_[0] &= ~0x00000080u;
}
void Esp_axay_0x242_242::clear_checksum_0x242() {
  checksum_0x242_ = 0;
  clear_has_checksum_0x242();
}
::google::protobuf::int32 Esp_axay_0x242_242::checksum_0x242() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_axay_0x242_242.checksum_0x242)
  return checksum_0x242_;
}
void Esp_axay_0x242_242::set_checksum_0x242(::google::protobuf::int32 value) {
  set_has_checksum_0x242();
  checksum_0x242_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_axay_0x242_242.checksum_0x242)
}

// optional double esp_algt = 8;
bool Esp_axay_0x242_242::has_esp_algt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Esp_axay_0x242_242::set_has_esp_algt() {
  _has_bits_[0] |= 0x00000040u;
}
void Esp_axay_0x242_242::clear_has_esp_algt() {
  _has_bits_[0] &= ~0x00000040u;
}
void Esp_axay_0x242_242::clear_esp_algt() {
  esp_algt_ = 0;
  clear_has_esp_algt();
}
double Esp_axay_0x242_242::esp_algt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_axay_0x242_242.esp_algt)
  return esp_algt_;
}
void Esp_axay_0x242_242::set_esp_algt(double value) {
  set_has_esp_algt();
  esp_algt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_axay_0x242_242.esp_algt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gw_swm_mrr_0x31b_31b::kSwmAcctaugapsetplusFieldNumber;
const int Gw_swm_mrr_0x31b_31b::kSwmAccvsetminusFieldNumber;
const int Gw_swm_mrr_0x31b_31b::kSwmShiftpadrequpFieldNumber;
const int Gw_swm_mrr_0x31b_31b::kSwmAcclimphomestsFieldNumber;
const int Gw_swm_mrr_0x31b_31b::kSwmLaneassistswitchFieldNumber;
const int Gw_swm_mrr_0x31b_31b::kSwmAcctaugapsetminusFieldNumber;
const int Gw_swm_mrr_0x31b_31b::kSwmAccvsetplusFieldNumber;
const int Gw_swm_mrr_0x31b_31b::kSwmShiftpadfltFieldNumber;
const int Gw_swm_mrr_0x31b_31b::kSwmAccdeactivateFieldNumber;
const int Gw_swm_mrr_0x31b_31b::kSwmAccresumeFieldNumber;
const int Gw_swm_mrr_0x31b_31b::kSwmAccsetFieldNumber;
const int Gw_swm_mrr_0x31b_31b::kRollingCounter0X31BFieldNumber;
const int Gw_swm_mrr_0x31b_31b::kSwmAccenableswitchFieldNumber;
const int Gw_swm_mrr_0x31b_31b::kChecksum0X31BFieldNumber;
const int Gw_swm_mrr_0x31b_31b::kSwmAccresumeQtFieldNumber;
const int Gw_swm_mrr_0x31b_31b::kSwmTjaswitchFieldNumber;
const int Gw_swm_mrr_0x31b_31b::kSwmShiftpadreqdownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gw_swm_mrr_0x31b_31b::Gw_swm_mrr_0x31b_31b()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
}
Gw_swm_mrr_0x31b_31b::Gw_swm_mrr_0x31b_31b(const Gw_swm_mrr_0x31b_31b& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&swm_acctaugapsetplus_, &from.swm_acctaugapsetplus_,
    reinterpret_cast<char*>(&swm_shiftpadreqdown_) -
    reinterpret_cast<char*>(&swm_acctaugapsetplus_) + sizeof(swm_shiftpadreqdown_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
}

void Gw_swm_mrr_0x31b_31b::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&swm_acctaugapsetplus_, 0, reinterpret_cast<char*>(&swm_shiftpadreqdown_) -
    reinterpret_cast<char*>(&swm_acctaugapsetplus_) + sizeof(swm_shiftpadreqdown_));
}

Gw_swm_mrr_0x31b_31b::~Gw_swm_mrr_0x31b_31b() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
  SharedDtor();
}

void Gw_swm_mrr_0x31b_31b::SharedDtor() {
}

void Gw_swm_mrr_0x31b_31b::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gw_swm_mrr_0x31b_31b::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gw_swm_mrr_0x31b_31b& Gw_swm_mrr_0x31b_31b::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gw_swm_mrr_0x31b_31b* Gw_swm_mrr_0x31b_31b::New(::google::protobuf::Arena* arena) const {
  Gw_swm_mrr_0x31b_31b* n = new Gw_swm_mrr_0x31b_31b;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gw_swm_mrr_0x31b_31b::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&swm_acctaugapsetplus_, 0, reinterpret_cast<char*>(&swm_shiftpadflt_) -
      reinterpret_cast<char*>(&swm_acctaugapsetplus_) + sizeof(swm_shiftpadflt_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&swm_accdeactivate_, 0, reinterpret_cast<char*>(&swm_tjaswitch_) -
      reinterpret_cast<char*>(&swm_accdeactivate_) + sizeof(swm_tjaswitch_));
  }
  swm_shiftpadreqdown_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gw_swm_mrr_0x31b_31b::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acctaugapsetplusType swm_acctaugapsetplus = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_IsValid(value)) {
            set_swm_acctaugapsetplus(static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accvsetminusType swm_accvsetminus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_IsValid(value)) {
            set_swm_accvsetminus(static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadrequpType swm_shiftpadrequp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_IsValid(value)) {
            set_swm_shiftpadrequp(static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acclimphomestsType swm_acclimphomests = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_IsValid(value)) {
            set_swm_acclimphomests(static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_laneassistswitchType swm_laneassistswitch = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_IsValid(value)) {
            set_swm_laneassistswitch(static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acctaugapsetminusType swm_acctaugapsetminus = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_IsValid(value)) {
            set_swm_acctaugapsetminus(static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accvsetplusType swm_accvsetplus = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_IsValid(value)) {
            set_swm_accvsetplus(static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadfltType swm_shiftpadflt = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_IsValid(value)) {
            set_swm_shiftpadflt(static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accdeactivateType swm_accdeactivate = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_IsValid(value)) {
            set_swm_accdeactivate(static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accresumeType swm_accresume = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresumeType_IsValid(value)) {
            set_swm_accresume(static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresumeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accsetType swm_accset = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accsetType_IsValid(value)) {
            set_swm_accset(static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accsetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x31b = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_rolling_counter_0x31b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x31b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accenableswitchType swm_accenableswitch = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_IsValid(value)) {
            set_swm_accenableswitch(static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x31b = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_checksum_0x31b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x31b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accresume_qtType swm_accresume_qt = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_IsValid(value)) {
            set_swm_accresume_qt(static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_tjaswitchType swm_tjaswitch = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_IsValid(value)) {
            set_swm_tjaswitch(static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadreqdownType swm_shiftpadreqdown = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_IsValid(value)) {
            set_swm_shiftpadreqdown(static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
  return false;
#undef DO_
}

void Gw_swm_mrr_0x31b_31b::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acctaugapsetplusType swm_acctaugapsetplus = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->swm_acctaugapsetplus(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accvsetminusType swm_accvsetminus = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->swm_accvsetminus(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadrequpType swm_shiftpadrequp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->swm_shiftpadrequp(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acclimphomestsType swm_acclimphomests = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->swm_acclimphomests(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_laneassistswitchType swm_laneassistswitch = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->swm_laneassistswitch(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acctaugapsetminusType swm_acctaugapsetminus = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->swm_acctaugapsetminus(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accvsetplusType swm_accvsetplus = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->swm_accvsetplus(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadfltType swm_shiftpadflt = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->swm_shiftpadflt(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accdeactivateType swm_accdeactivate = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->swm_accdeactivate(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accresumeType swm_accresume = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->swm_accresume(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accsetType swm_accset = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->swm_accset(), output);
  }

  // optional int32 rolling_counter_0x31b = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->rolling_counter_0x31b(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accenableswitchType swm_accenableswitch = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->swm_accenableswitch(), output);
  }

  // optional int32 checksum_0x31b = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->checksum_0x31b(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accresume_qtType swm_accresume_qt = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->swm_accresume_qt(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_tjaswitchType swm_tjaswitch = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->swm_tjaswitch(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadreqdownType swm_shiftpadreqdown = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->swm_shiftpadreqdown(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
}

::google::protobuf::uint8* Gw_swm_mrr_0x31b_31b::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acctaugapsetplusType swm_acctaugapsetplus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->swm_acctaugapsetplus(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accvsetminusType swm_accvsetminus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->swm_accvsetminus(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadrequpType swm_shiftpadrequp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->swm_shiftpadrequp(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acclimphomestsType swm_acclimphomests = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->swm_acclimphomests(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_laneassistswitchType swm_laneassistswitch = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->swm_laneassistswitch(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acctaugapsetminusType swm_acctaugapsetminus = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->swm_acctaugapsetminus(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accvsetplusType swm_accvsetplus = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->swm_accvsetplus(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadfltType swm_shiftpadflt = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->swm_shiftpadflt(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accdeactivateType swm_accdeactivate = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->swm_accdeactivate(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accresumeType swm_accresume = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->swm_accresume(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accsetType swm_accset = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->swm_accset(), target);
  }

  // optional int32 rolling_counter_0x31b = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->rolling_counter_0x31b(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accenableswitchType swm_accenableswitch = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->swm_accenableswitch(), target);
  }

  // optional int32 checksum_0x31b = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->checksum_0x31b(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accresume_qtType swm_accresume_qt = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->swm_accresume_qt(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_tjaswitchType swm_tjaswitch = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->swm_tjaswitch(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadreqdownType swm_shiftpadreqdown = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->swm_shiftpadreqdown(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
  return target;
}

size_t Gw_swm_mrr_0x31b_31b::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acctaugapsetplusType swm_acctaugapsetplus = 1;
    if (has_swm_acctaugapsetplus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_acctaugapsetplus());
    }

    // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accvsetminusType swm_accvsetminus = 2;
    if (has_swm_accvsetminus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_accvsetminus());
    }

    // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadrequpType swm_shiftpadrequp = 3;
    if (has_swm_shiftpadrequp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_shiftpadrequp());
    }

    // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acclimphomestsType swm_acclimphomests = 4;
    if (has_swm_acclimphomests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_acclimphomests());
    }

    // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_laneassistswitchType swm_laneassistswitch = 5;
    if (has_swm_laneassistswitch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_laneassistswitch());
    }

    // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acctaugapsetminusType swm_acctaugapsetminus = 6;
    if (has_swm_acctaugapsetminus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_acctaugapsetminus());
    }

    // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accvsetplusType swm_accvsetplus = 7;
    if (has_swm_accvsetplus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_accvsetplus());
    }

    // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadfltType swm_shiftpadflt = 8;
    if (has_swm_shiftpadflt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_shiftpadflt());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accdeactivateType swm_accdeactivate = 9;
    if (has_swm_accdeactivate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_accdeactivate());
    }

    // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accresumeType swm_accresume = 10;
    if (has_swm_accresume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_accresume());
    }

    // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accsetType swm_accset = 11;
    if (has_swm_accset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_accset());
    }

    // optional int32 rolling_counter_0x31b = 12;
    if (has_rolling_counter_0x31b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x31b());
    }

    // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accenableswitchType swm_accenableswitch = 13;
    if (has_swm_accenableswitch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_accenableswitch());
    }

    // optional int32 checksum_0x31b = 14;
    if (has_checksum_0x31b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x31b());
    }

    // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accresume_qtType swm_accresume_qt = 15;
    if (has_swm_accresume_qt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_accresume_qt());
    }

    // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_tjaswitchType swm_tjaswitch = 16;
    if (has_swm_tjaswitch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_tjaswitch());
    }

  }
  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadreqdownType swm_shiftpadreqdown = 17;
  if (has_swm_shiftpadreqdown()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_shiftpadreqdown());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gw_swm_mrr_0x31b_31b::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
  GOOGLE_DCHECK_NE(&from, this);
  const Gw_swm_mrr_0x31b_31b* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gw_swm_mrr_0x31b_31b>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
    MergeFrom(*source);
  }
}

void Gw_swm_mrr_0x31b_31b::MergeFrom(const Gw_swm_mrr_0x31b_31b& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      swm_acctaugapsetplus_ = from.swm_acctaugapsetplus_;
    }
    if (cached_has_bits & 0x00000002u) {
      swm_accvsetminus_ = from.swm_accvsetminus_;
    }
    if (cached_has_bits & 0x00000004u) {
      swm_shiftpadrequp_ = from.swm_shiftpadrequp_;
    }
    if (cached_has_bits & 0x00000008u) {
      swm_acclimphomests_ = from.swm_acclimphomests_;
    }
    if (cached_has_bits & 0x00000010u) {
      swm_laneassistswitch_ = from.swm_laneassistswitch_;
    }
    if (cached_has_bits & 0x00000020u) {
      swm_acctaugapsetminus_ = from.swm_acctaugapsetminus_;
    }
    if (cached_has_bits & 0x00000040u) {
      swm_accvsetplus_ = from.swm_accvsetplus_;
    }
    if (cached_has_bits & 0x00000080u) {
      swm_shiftpadflt_ = from.swm_shiftpadflt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      swm_accdeactivate_ = from.swm_accdeactivate_;
    }
    if (cached_has_bits & 0x00000200u) {
      swm_accresume_ = from.swm_accresume_;
    }
    if (cached_has_bits & 0x00000400u) {
      swm_accset_ = from.swm_accset_;
    }
    if (cached_has_bits & 0x00000800u) {
      rolling_counter_0x31b_ = from.rolling_counter_0x31b_;
    }
    if (cached_has_bits & 0x00001000u) {
      swm_accenableswitch_ = from.swm_accenableswitch_;
    }
    if (cached_has_bits & 0x00002000u) {
      checksum_0x31b_ = from.checksum_0x31b_;
    }
    if (cached_has_bits & 0x00004000u) {
      swm_accresume_qt_ = from.swm_accresume_qt_;
    }
    if (cached_has_bits & 0x00008000u) {
      swm_tjaswitch_ = from.swm_tjaswitch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_swm_shiftpadreqdown(from.swm_shiftpadreqdown());
  }
}

void Gw_swm_mrr_0x31b_31b::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gw_swm_mrr_0x31b_31b::CopyFrom(const Gw_swm_mrr_0x31b_31b& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gw_swm_mrr_0x31b_31b::IsInitialized() const {
  return true;
}

void Gw_swm_mrr_0x31b_31b::Swap(Gw_swm_mrr_0x31b_31b* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gw_swm_mrr_0x31b_31b::InternalSwap(Gw_swm_mrr_0x31b_31b* other) {
  std::swap(swm_acctaugapsetplus_, other->swm_acctaugapsetplus_);
  std::swap(swm_accvsetminus_, other->swm_accvsetminus_);
  std::swap(swm_shiftpadrequp_, other->swm_shiftpadrequp_);
  std::swap(swm_acclimphomests_, other->swm_acclimphomests_);
  std::swap(swm_laneassistswitch_, other->swm_laneassistswitch_);
  std::swap(swm_acctaugapsetminus_, other->swm_acctaugapsetminus_);
  std::swap(swm_accvsetplus_, other->swm_accvsetplus_);
  std::swap(swm_shiftpadflt_, other->swm_shiftpadflt_);
  std::swap(swm_accdeactivate_, other->swm_accdeactivate_);
  std::swap(swm_accresume_, other->swm_accresume_);
  std::swap(swm_accset_, other->swm_accset_);
  std::swap(rolling_counter_0x31b_, other->rolling_counter_0x31b_);
  std::swap(swm_accenableswitch_, other->swm_accenableswitch_);
  std::swap(checksum_0x31b_, other->checksum_0x31b_);
  std::swap(swm_accresume_qt_, other->swm_accresume_qt_);
  std::swap(swm_tjaswitch_, other->swm_tjaswitch_);
  std::swap(swm_shiftpadreqdown_, other->swm_shiftpadreqdown_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gw_swm_mrr_0x31b_31b::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gw_swm_mrr_0x31b_31b

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acctaugapsetplusType swm_acctaugapsetplus = 1;
bool Gw_swm_mrr_0x31b_31b::has_swm_acctaugapsetplus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gw_swm_mrr_0x31b_31b::set_has_swm_acctaugapsetplus() {
  _has_bits_[0] |= 0x00000001u;
}
void Gw_swm_mrr_0x31b_31b::clear_has_swm_acctaugapsetplus() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gw_swm_mrr_0x31b_31b::clear_swm_acctaugapsetplus() {
  swm_acctaugapsetplus_ = 0;
  clear_has_swm_acctaugapsetplus();
}
::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType Gw_swm_mrr_0x31b_31b::swm_acctaugapsetplus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_acctaugapsetplus)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType >(swm_acctaugapsetplus_);
}
void Gw_swm_mrr_0x31b_31b::set_swm_acctaugapsetplus(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetplusType_IsValid(value));
  set_has_swm_acctaugapsetplus();
  swm_acctaugapsetplus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_acctaugapsetplus)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accvsetminusType swm_accvsetminus = 2;
bool Gw_swm_mrr_0x31b_31b::has_swm_accvsetminus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gw_swm_mrr_0x31b_31b::set_has_swm_accvsetminus() {
  _has_bits_[0] |= 0x00000002u;
}
void Gw_swm_mrr_0x31b_31b::clear_has_swm_accvsetminus() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gw_swm_mrr_0x31b_31b::clear_swm_accvsetminus() {
  swm_accvsetminus_ = 0;
  clear_has_swm_accvsetminus();
}
::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType Gw_swm_mrr_0x31b_31b::swm_accvsetminus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accvsetminus)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType >(swm_accvsetminus_);
}
void Gw_swm_mrr_0x31b_31b::set_swm_accvsetminus(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetminusType_IsValid(value));
  set_has_swm_accvsetminus();
  swm_accvsetminus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accvsetminus)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadrequpType swm_shiftpadrequp = 3;
bool Gw_swm_mrr_0x31b_31b::has_swm_shiftpadrequp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gw_swm_mrr_0x31b_31b::set_has_swm_shiftpadrequp() {
  _has_bits_[0] |= 0x00000004u;
}
void Gw_swm_mrr_0x31b_31b::clear_has_swm_shiftpadrequp() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gw_swm_mrr_0x31b_31b::clear_swm_shiftpadrequp() {
  swm_shiftpadrequp_ = 0;
  clear_has_swm_shiftpadrequp();
}
::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType Gw_swm_mrr_0x31b_31b::swm_shiftpadrequp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_shiftpadrequp)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType >(swm_shiftpadrequp_);
}
void Gw_swm_mrr_0x31b_31b::set_swm_shiftpadrequp(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadrequpType_IsValid(value));
  set_has_swm_shiftpadrequp();
  swm_shiftpadrequp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_shiftpadrequp)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acclimphomestsType swm_acclimphomests = 4;
bool Gw_swm_mrr_0x31b_31b::has_swm_acclimphomests() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gw_swm_mrr_0x31b_31b::set_has_swm_acclimphomests() {
  _has_bits_[0] |= 0x00000008u;
}
void Gw_swm_mrr_0x31b_31b::clear_has_swm_acclimphomests() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gw_swm_mrr_0x31b_31b::clear_swm_acclimphomests() {
  swm_acclimphomests_ = 0;
  clear_has_swm_acclimphomests();
}
::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType Gw_swm_mrr_0x31b_31b::swm_acclimphomests() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_acclimphomests)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType >(swm_acclimphomests_);
}
void Gw_swm_mrr_0x31b_31b::set_swm_acclimphomests(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acclimphomestsType_IsValid(value));
  set_has_swm_acclimphomests();
  swm_acclimphomests_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_acclimphomests)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_laneassistswitchType swm_laneassistswitch = 5;
bool Gw_swm_mrr_0x31b_31b::has_swm_laneassistswitch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gw_swm_mrr_0x31b_31b::set_has_swm_laneassistswitch() {
  _has_bits_[0] |= 0x00000010u;
}
void Gw_swm_mrr_0x31b_31b::clear_has_swm_laneassistswitch() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gw_swm_mrr_0x31b_31b::clear_swm_laneassistswitch() {
  swm_laneassistswitch_ = 0;
  clear_has_swm_laneassistswitch();
}
::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType Gw_swm_mrr_0x31b_31b::swm_laneassistswitch() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_laneassistswitch)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType >(swm_laneassistswitch_);
}
void Gw_swm_mrr_0x31b_31b::set_swm_laneassistswitch(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_laneassistswitchType_IsValid(value));
  set_has_swm_laneassistswitch();
  swm_laneassistswitch_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_laneassistswitch)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_acctaugapsetminusType swm_acctaugapsetminus = 6;
bool Gw_swm_mrr_0x31b_31b::has_swm_acctaugapsetminus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gw_swm_mrr_0x31b_31b::set_has_swm_acctaugapsetminus() {
  _has_bits_[0] |= 0x00000020u;
}
void Gw_swm_mrr_0x31b_31b::clear_has_swm_acctaugapsetminus() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gw_swm_mrr_0x31b_31b::clear_swm_acctaugapsetminus() {
  swm_acctaugapsetminus_ = 0;
  clear_has_swm_acctaugapsetminus();
}
::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType Gw_swm_mrr_0x31b_31b::swm_acctaugapsetminus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_acctaugapsetminus)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType >(swm_acctaugapsetminus_);
}
void Gw_swm_mrr_0x31b_31b::set_swm_acctaugapsetminus(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_acctaugapsetminusType_IsValid(value));
  set_has_swm_acctaugapsetminus();
  swm_acctaugapsetminus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_acctaugapsetminus)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accvsetplusType swm_accvsetplus = 7;
bool Gw_swm_mrr_0x31b_31b::has_swm_accvsetplus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Gw_swm_mrr_0x31b_31b::set_has_swm_accvsetplus() {
  _has_bits_[0] |= 0x00000040u;
}
void Gw_swm_mrr_0x31b_31b::clear_has_swm_accvsetplus() {
  _has_bits_[0] &= ~0x00000040u;
}
void Gw_swm_mrr_0x31b_31b::clear_swm_accvsetplus() {
  swm_accvsetplus_ = 0;
  clear_has_swm_accvsetplus();
}
::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType Gw_swm_mrr_0x31b_31b::swm_accvsetplus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accvsetplus)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType >(swm_accvsetplus_);
}
void Gw_swm_mrr_0x31b_31b::set_swm_accvsetplus(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accvsetplusType_IsValid(value));
  set_has_swm_accvsetplus();
  swm_accvsetplus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accvsetplus)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadfltType swm_shiftpadflt = 8;
bool Gw_swm_mrr_0x31b_31b::has_swm_shiftpadflt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Gw_swm_mrr_0x31b_31b::set_has_swm_shiftpadflt() {
  _has_bits_[0] |= 0x00000080u;
}
void Gw_swm_mrr_0x31b_31b::clear_has_swm_shiftpadflt() {
  _has_bits_[0] &= ~0x00000080u;
}
void Gw_swm_mrr_0x31b_31b::clear_swm_shiftpadflt() {
  swm_shiftpadflt_ = 0;
  clear_has_swm_shiftpadflt();
}
::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType Gw_swm_mrr_0x31b_31b::swm_shiftpadflt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_shiftpadflt)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType >(swm_shiftpadflt_);
}
void Gw_swm_mrr_0x31b_31b::set_swm_shiftpadflt(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadfltType_IsValid(value));
  set_has_swm_shiftpadflt();
  swm_shiftpadflt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_shiftpadflt)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accdeactivateType swm_accdeactivate = 9;
bool Gw_swm_mrr_0x31b_31b::has_swm_accdeactivate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Gw_swm_mrr_0x31b_31b::set_has_swm_accdeactivate() {
  _has_bits_[0] |= 0x00000100u;
}
void Gw_swm_mrr_0x31b_31b::clear_has_swm_accdeactivate() {
  _has_bits_[0] &= ~0x00000100u;
}
void Gw_swm_mrr_0x31b_31b::clear_swm_accdeactivate() {
  swm_accdeactivate_ = 0;
  clear_has_swm_accdeactivate();
}
::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType Gw_swm_mrr_0x31b_31b::swm_accdeactivate() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accdeactivate)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType >(swm_accdeactivate_);
}
void Gw_swm_mrr_0x31b_31b::set_swm_accdeactivate(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accdeactivateType_IsValid(value));
  set_has_swm_accdeactivate();
  swm_accdeactivate_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accdeactivate)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accresumeType swm_accresume = 10;
bool Gw_swm_mrr_0x31b_31b::has_swm_accresume() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Gw_swm_mrr_0x31b_31b::set_has_swm_accresume() {
  _has_bits_[0] |= 0x00000200u;
}
void Gw_swm_mrr_0x31b_31b::clear_has_swm_accresume() {
  _has_bits_[0] &= ~0x00000200u;
}
void Gw_swm_mrr_0x31b_31b::clear_swm_accresume() {
  swm_accresume_ = 0;
  clear_has_swm_accresume();
}
::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresumeType Gw_swm_mrr_0x31b_31b::swm_accresume() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accresume)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresumeType >(swm_accresume_);
}
void Gw_swm_mrr_0x31b_31b::set_swm_accresume(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresumeType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresumeType_IsValid(value));
  set_has_swm_accresume();
  swm_accresume_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accresume)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accsetType swm_accset = 11;
bool Gw_swm_mrr_0x31b_31b::has_swm_accset() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Gw_swm_mrr_0x31b_31b::set_has_swm_accset() {
  _has_bits_[0] |= 0x00000400u;
}
void Gw_swm_mrr_0x31b_31b::clear_has_swm_accset() {
  _has_bits_[0] &= ~0x00000400u;
}
void Gw_swm_mrr_0x31b_31b::clear_swm_accset() {
  swm_accset_ = 0;
  clear_has_swm_accset();
}
::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accsetType Gw_swm_mrr_0x31b_31b::swm_accset() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accset)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accsetType >(swm_accset_);
}
void Gw_swm_mrr_0x31b_31b::set_swm_accset(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accsetType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accsetType_IsValid(value));
  set_has_swm_accset();
  swm_accset_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accset)
}

// optional int32 rolling_counter_0x31b = 12;
bool Gw_swm_mrr_0x31b_31b::has_rolling_counter_0x31b() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Gw_swm_mrr_0x31b_31b::set_has_rolling_counter_0x31b() {
  _has_bits_[0] |= 0x00000800u;
}
void Gw_swm_mrr_0x31b_31b::clear_has_rolling_counter_0x31b() {
  _has_bits_[0] &= ~0x00000800u;
}
void Gw_swm_mrr_0x31b_31b::clear_rolling_counter_0x31b() {
  rolling_counter_0x31b_ = 0;
  clear_has_rolling_counter_0x31b();
}
::google::protobuf::int32 Gw_swm_mrr_0x31b_31b::rolling_counter_0x31b() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.rolling_counter_0x31b)
  return rolling_counter_0x31b_;
}
void Gw_swm_mrr_0x31b_31b::set_rolling_counter_0x31b(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x31b();
  rolling_counter_0x31b_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.rolling_counter_0x31b)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accenableswitchType swm_accenableswitch = 13;
bool Gw_swm_mrr_0x31b_31b::has_swm_accenableswitch() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Gw_swm_mrr_0x31b_31b::set_has_swm_accenableswitch() {
  _has_bits_[0] |= 0x00001000u;
}
void Gw_swm_mrr_0x31b_31b::clear_has_swm_accenableswitch() {
  _has_bits_[0] &= ~0x00001000u;
}
void Gw_swm_mrr_0x31b_31b::clear_swm_accenableswitch() {
  swm_accenableswitch_ = 0;
  clear_has_swm_accenableswitch();
}
::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType Gw_swm_mrr_0x31b_31b::swm_accenableswitch() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accenableswitch)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType >(swm_accenableswitch_);
}
void Gw_swm_mrr_0x31b_31b::set_swm_accenableswitch(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accenableswitchType_IsValid(value));
  set_has_swm_accenableswitch();
  swm_accenableswitch_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accenableswitch)
}

// optional int32 checksum_0x31b = 14;
bool Gw_swm_mrr_0x31b_31b::has_checksum_0x31b() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Gw_swm_mrr_0x31b_31b::set_has_checksum_0x31b() {
  _has_bits_[0] |= 0x00002000u;
}
void Gw_swm_mrr_0x31b_31b::clear_has_checksum_0x31b() {
  _has_bits_[0] &= ~0x00002000u;
}
void Gw_swm_mrr_0x31b_31b::clear_checksum_0x31b() {
  checksum_0x31b_ = 0;
  clear_has_checksum_0x31b();
}
::google::protobuf::int32 Gw_swm_mrr_0x31b_31b::checksum_0x31b() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.checksum_0x31b)
  return checksum_0x31b_;
}
void Gw_swm_mrr_0x31b_31b::set_checksum_0x31b(::google::protobuf::int32 value) {
  set_has_checksum_0x31b();
  checksum_0x31b_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.checksum_0x31b)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_accresume_qtType swm_accresume_qt = 15;
bool Gw_swm_mrr_0x31b_31b::has_swm_accresume_qt() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Gw_swm_mrr_0x31b_31b::set_has_swm_accresume_qt() {
  _has_bits_[0] |= 0x00004000u;
}
void Gw_swm_mrr_0x31b_31b::clear_has_swm_accresume_qt() {
  _has_bits_[0] &= ~0x00004000u;
}
void Gw_swm_mrr_0x31b_31b::clear_swm_accresume_qt() {
  swm_accresume_qt_ = 0;
  clear_has_swm_accresume_qt();
}
::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType Gw_swm_mrr_0x31b_31b::swm_accresume_qt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accresume_qt)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType >(swm_accresume_qt_);
}
void Gw_swm_mrr_0x31b_31b::set_swm_accresume_qt(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_accresume_qtType_IsValid(value));
  set_has_swm_accresume_qt();
  swm_accresume_qt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_accresume_qt)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_tjaswitchType swm_tjaswitch = 16;
bool Gw_swm_mrr_0x31b_31b::has_swm_tjaswitch() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Gw_swm_mrr_0x31b_31b::set_has_swm_tjaswitch() {
  _has_bits_[0] |= 0x00008000u;
}
void Gw_swm_mrr_0x31b_31b::clear_has_swm_tjaswitch() {
  _has_bits_[0] &= ~0x00008000u;
}
void Gw_swm_mrr_0x31b_31b::clear_swm_tjaswitch() {
  swm_tjaswitch_ = 0;
  clear_has_swm_tjaswitch();
}
::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType Gw_swm_mrr_0x31b_31b::swm_tjaswitch() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_tjaswitch)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType >(swm_tjaswitch_);
}
void Gw_swm_mrr_0x31b_31b::set_swm_tjaswitch(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_tjaswitchType_IsValid(value));
  set_has_swm_tjaswitch();
  swm_tjaswitch_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_tjaswitch)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.Swm_shiftpadreqdownType swm_shiftpadreqdown = 17;
bool Gw_swm_mrr_0x31b_31b::has_swm_shiftpadreqdown() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Gw_swm_mrr_0x31b_31b::set_has_swm_shiftpadreqdown() {
  _has_bits_[0] |= 0x00010000u;
}
void Gw_swm_mrr_0x31b_31b::clear_has_swm_shiftpadreqdown() {
  _has_bits_[0] &= ~0x00010000u;
}
void Gw_swm_mrr_0x31b_31b::clear_swm_shiftpadreqdown() {
  swm_shiftpadreqdown_ = 0;
  clear_has_swm_shiftpadreqdown();
}
::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType Gw_swm_mrr_0x31b_31b::swm_shiftpadreqdown() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_shiftpadreqdown)
  return static_cast< ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType >(swm_shiftpadreqdown_);
}
void Gw_swm_mrr_0x31b_31b::set_swm_shiftpadreqdown(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType value) {
  assert(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b_Swm_shiftpadreqdownType_IsValid(value));
  set_has_swm_shiftpadreqdown();
  swm_shiftpadreqdown_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_mrr_0x31b_31b.swm_shiftpadreqdown)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gw_swm_body_0x31a_31a::kSwmHighbeamFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmFrontwipingmodeFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmWipingintervalSensitvityFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmRearfoglightFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmFrontfoglightFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmWasherlimphomestsFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmRearwipingmodeFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmTurnindicationactFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmVolPlusFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmVolMinusFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmWechatFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmLamplimphomestsFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmHeadlampFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmNextSongFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmPreviousSongFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmPhoneFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmMuteFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmMenuRightFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmMenuLeftFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmMenuDownFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmMenuUpFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmFwasherstsFieldNumber;
const int Gw_swm_body_0x31a_31a::kRollingCounter0X31AFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmMenuReturnFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmMenuConfirmFieldNumber;
const int Gw_swm_body_0x31a_31a::kChecksum0X31AFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmRwasherstsFieldNumber;
const int Gw_swm_body_0x31a_31a::kSwmFlashlightstsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gw_swm_body_0x31a_31a::Gw_swm_body_0x31a_31a()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
}
Gw_swm_body_0x31a_31a::Gw_swm_body_0x31a_31a(const Gw_swm_body_0x31a_31a& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&swm_highbeam_, &from.swm_highbeam_,
    reinterpret_cast<char*>(&swm_flashlightsts_) -
    reinterpret_cast<char*>(&swm_highbeam_) + sizeof(swm_flashlightsts_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
}

void Gw_swm_body_0x31a_31a::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&swm_highbeam_, 0, reinterpret_cast<char*>(&swm_flashlightsts_) -
    reinterpret_cast<char*>(&swm_highbeam_) + sizeof(swm_flashlightsts_));
}

Gw_swm_body_0x31a_31a::~Gw_swm_body_0x31a_31a() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
  SharedDtor();
}

void Gw_swm_body_0x31a_31a::SharedDtor() {
}

void Gw_swm_body_0x31a_31a::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gw_swm_body_0x31a_31a::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gw_swm_body_0x31a_31a& Gw_swm_body_0x31a_31a::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gw_swm_body_0x31a_31a* Gw_swm_body_0x31a_31a::New(::google::protobuf::Arena* arena) const {
  Gw_swm_body_0x31a_31a* n = new Gw_swm_body_0x31a_31a;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gw_swm_body_0x31a_31a::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&swm_highbeam_, 0, reinterpret_cast<char*>(&swm_turnindicationact_) -
      reinterpret_cast<char*>(&swm_highbeam_) + sizeof(swm_turnindicationact_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&swm_vol_plus_, 0, reinterpret_cast<char*>(&swm_phone_) -
      reinterpret_cast<char*>(&swm_vol_plus_) + sizeof(swm_phone_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&swm_mute_, 0, reinterpret_cast<char*>(&swm_menu_return_) -
      reinterpret_cast<char*>(&swm_mute_) + sizeof(swm_menu_return_));
  }
  if (_has_bits_[24 / 32] & 251658240u) {
    ::memset(&swm_menu_confirm_, 0, reinterpret_cast<char*>(&swm_flashlightsts_) -
      reinterpret_cast<char*>(&swm_menu_confirm_) + sizeof(swm_flashlightsts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gw_swm_body_0x31a_31a::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_highbeamType swm_highbeam = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_highbeamType_IsValid(value)) {
            set_swm_highbeam(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_highbeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_frontwipingmodeType swm_frontwipingmode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_IsValid(value)) {
            set_swm_frontwipingmode(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_wipinginterval_sensitvityType swm_wipinginterval_sensitvity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_IsValid(value)) {
            set_swm_wipinginterval_sensitvity(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rearfoglightType swm_rearfoglight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearfoglightType_IsValid(value)) {
            set_swm_rearfoglight(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearfoglightType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_frontfoglightType swm_frontfoglight = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontfoglightType_IsValid(value)) {
            set_swm_frontfoglight(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontfoglightType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_washerlimphomestsType swm_washerlimphomests = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_IsValid(value)) {
            set_swm_washerlimphomests(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rearwipingmodeType swm_rearwipingmode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_IsValid(value)) {
            set_swm_rearwipingmode(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_turnindicationactType swm_turnindicationact = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_turnindicationactType_IsValid(value)) {
            set_swm_turnindicationact(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_turnindicationactType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_vol_plusType swm_vol_plus = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_plusType_IsValid(value)) {
            set_swm_vol_plus(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_plusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_vol_minusType swm_vol_minus = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_minusType_IsValid(value)) {
            set_swm_vol_minus(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_minusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_wechatType swm_wechat = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wechatType_IsValid(value)) {
            set_swm_wechat(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wechatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_lamplimphomestsType swm_lamplimphomests = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_IsValid(value)) {
            set_swm_lamplimphomests(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_headlampType swm_headlamp = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_headlampType_IsValid(value)) {
            set_swm_headlamp(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_headlampType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_next_songType swm_next_song = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_next_songType_IsValid(value)) {
            set_swm_next_song(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_next_songType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_previous_songType swm_previous_song = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_previous_songType_IsValid(value)) {
            set_swm_previous_song(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_previous_songType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_phoneType swm_phone = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_phoneType_IsValid(value)) {
            set_swm_phone(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_phoneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_muteType swm_mute = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_muteType_IsValid(value)) {
            set_swm_mute(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_muteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_rightType swm_menu_right = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_rightType_IsValid(value)) {
            set_swm_menu_right(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_rightType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_leftType swm_menu_left = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_leftType_IsValid(value)) {
            set_swm_menu_left(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_leftType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_downType swm_menu_down = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_downType_IsValid(value)) {
            set_swm_menu_down(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_downType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_upType swm_menu_up = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_upType_IsValid(value)) {
            set_swm_menu_up(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_upType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_fwasherstsType swm_fwashersts = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_fwasherstsType_IsValid(value)) {
            set_swm_fwashersts(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_fwasherstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x31a = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_rolling_counter_0x31a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x31a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_returnType swm_menu_return = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_returnType_IsValid(value)) {
            set_swm_menu_return(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_returnType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_confirmType swm_menu_confirm = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_confirmType_IsValid(value)) {
            set_swm_menu_confirm(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_confirmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(25, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x31a = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_checksum_0x31a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x31a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rwasherstsType swm_rwashersts = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rwasherstsType_IsValid(value)) {
            set_swm_rwashersts(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rwasherstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(27, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_flashlightstsType swm_flashlightsts = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_flashlightstsType_IsValid(value)) {
            set_swm_flashlightsts(static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_flashlightstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(28, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
  return false;
#undef DO_
}

void Gw_swm_body_0x31a_31a::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_highbeamType swm_highbeam = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->swm_highbeam(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_frontwipingmodeType swm_frontwipingmode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->swm_frontwipingmode(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_wipinginterval_sensitvityType swm_wipinginterval_sensitvity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->swm_wipinginterval_sensitvity(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rearfoglightType swm_rearfoglight = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->swm_rearfoglight(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_frontfoglightType swm_frontfoglight = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->swm_frontfoglight(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_washerlimphomestsType swm_washerlimphomests = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->swm_washerlimphomests(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rearwipingmodeType swm_rearwipingmode = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->swm_rearwipingmode(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_turnindicationactType swm_turnindicationact = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->swm_turnindicationact(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_vol_plusType swm_vol_plus = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->swm_vol_plus(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_vol_minusType swm_vol_minus = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->swm_vol_minus(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_wechatType swm_wechat = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->swm_wechat(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_lamplimphomestsType swm_lamplimphomests = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->swm_lamplimphomests(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_headlampType swm_headlamp = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->swm_headlamp(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_next_songType swm_next_song = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->swm_next_song(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_previous_songType swm_previous_song = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->swm_previous_song(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_phoneType swm_phone = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->swm_phone(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_muteType swm_mute = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->swm_mute(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_rightType swm_menu_right = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->swm_menu_right(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_leftType swm_menu_left = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->swm_menu_left(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_downType swm_menu_down = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->swm_menu_down(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_upType swm_menu_up = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->swm_menu_up(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_fwasherstsType swm_fwashersts = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->swm_fwashersts(), output);
  }

  // optional int32 rolling_counter_0x31a = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->rolling_counter_0x31a(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_returnType swm_menu_return = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->swm_menu_return(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_confirmType swm_menu_confirm = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->swm_menu_confirm(), output);
  }

  // optional int32 checksum_0x31a = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->checksum_0x31a(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rwasherstsType swm_rwashersts = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->swm_rwashersts(), output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_flashlightstsType swm_flashlightsts = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->swm_flashlightsts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
}

::google::protobuf::uint8* Gw_swm_body_0x31a_31a::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_highbeamType swm_highbeam = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->swm_highbeam(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_frontwipingmodeType swm_frontwipingmode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->swm_frontwipingmode(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_wipinginterval_sensitvityType swm_wipinginterval_sensitvity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->swm_wipinginterval_sensitvity(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rearfoglightType swm_rearfoglight = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->swm_rearfoglight(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_frontfoglightType swm_frontfoglight = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->swm_frontfoglight(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_washerlimphomestsType swm_washerlimphomests = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->swm_washerlimphomests(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rearwipingmodeType swm_rearwipingmode = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->swm_rearwipingmode(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_turnindicationactType swm_turnindicationact = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->swm_turnindicationact(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_vol_plusType swm_vol_plus = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->swm_vol_plus(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_vol_minusType swm_vol_minus = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->swm_vol_minus(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_wechatType swm_wechat = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->swm_wechat(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_lamplimphomestsType swm_lamplimphomests = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->swm_lamplimphomests(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_headlampType swm_headlamp = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->swm_headlamp(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_next_songType swm_next_song = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->swm_next_song(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_previous_songType swm_previous_song = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->swm_previous_song(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_phoneType swm_phone = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->swm_phone(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_muteType swm_mute = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->swm_mute(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_rightType swm_menu_right = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->swm_menu_right(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_leftType swm_menu_left = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->swm_menu_left(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_downType swm_menu_down = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->swm_menu_down(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_upType swm_menu_up = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->swm_menu_up(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_fwasherstsType swm_fwashersts = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->swm_fwashersts(), target);
  }

  // optional int32 rolling_counter_0x31a = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->rolling_counter_0x31a(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_returnType swm_menu_return = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->swm_menu_return(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_confirmType swm_menu_confirm = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->swm_menu_confirm(), target);
  }

  // optional int32 checksum_0x31a = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->checksum_0x31a(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rwasherstsType swm_rwashersts = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      27, this->swm_rwashersts(), target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_flashlightstsType swm_flashlightsts = 28;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->swm_flashlightsts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
  return target;
}

size_t Gw_swm_body_0x31a_31a::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_highbeamType swm_highbeam = 1;
    if (has_swm_highbeam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_highbeam());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_frontwipingmodeType swm_frontwipingmode = 2;
    if (has_swm_frontwipingmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_frontwipingmode());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_wipinginterval_sensitvityType swm_wipinginterval_sensitvity = 3;
    if (has_swm_wipinginterval_sensitvity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_wipinginterval_sensitvity());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rearfoglightType swm_rearfoglight = 4;
    if (has_swm_rearfoglight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_rearfoglight());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_frontfoglightType swm_frontfoglight = 5;
    if (has_swm_frontfoglight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_frontfoglight());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_washerlimphomestsType swm_washerlimphomests = 6;
    if (has_swm_washerlimphomests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_washerlimphomests());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rearwipingmodeType swm_rearwipingmode = 7;
    if (has_swm_rearwipingmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_rearwipingmode());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_turnindicationactType swm_turnindicationact = 8;
    if (has_swm_turnindicationact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_turnindicationact());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_vol_plusType swm_vol_plus = 9;
    if (has_swm_vol_plus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_vol_plus());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_vol_minusType swm_vol_minus = 10;
    if (has_swm_vol_minus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_vol_minus());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_wechatType swm_wechat = 11;
    if (has_swm_wechat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_wechat());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_lamplimphomestsType swm_lamplimphomests = 12;
    if (has_swm_lamplimphomests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_lamplimphomests());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_headlampType swm_headlamp = 13;
    if (has_swm_headlamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_headlamp());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_next_songType swm_next_song = 14;
    if (has_swm_next_song()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_next_song());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_previous_songType swm_previous_song = 15;
    if (has_swm_previous_song()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_previous_song());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_phoneType swm_phone = 16;
    if (has_swm_phone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_phone());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_muteType swm_mute = 17;
    if (has_swm_mute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_mute());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_rightType swm_menu_right = 18;
    if (has_swm_menu_right()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_menu_right());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_leftType swm_menu_left = 19;
    if (has_swm_menu_left()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_menu_left());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_downType swm_menu_down = 20;
    if (has_swm_menu_down()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_menu_down());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_upType swm_menu_up = 21;
    if (has_swm_menu_up()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_menu_up());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_fwasherstsType swm_fwashersts = 22;
    if (has_swm_fwashersts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_fwashersts());
    }

    // optional int32 rolling_counter_0x31a = 23;
    if (has_rolling_counter_0x31a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x31a());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_returnType swm_menu_return = 24;
    if (has_swm_menu_return()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_menu_return());
    }

  }
  if (_has_bits_[24 / 32] & 251658240u) {
    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_confirmType swm_menu_confirm = 25;
    if (has_swm_menu_confirm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_menu_confirm());
    }

    // optional int32 checksum_0x31a = 26;
    if (has_checksum_0x31a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x31a());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rwasherstsType swm_rwashersts = 27;
    if (has_swm_rwashersts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_rwashersts());
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_flashlightstsType swm_flashlightsts = 28;
    if (has_swm_flashlightsts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->swm_flashlightsts());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gw_swm_body_0x31a_31a::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
  GOOGLE_DCHECK_NE(&from, this);
  const Gw_swm_body_0x31a_31a* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gw_swm_body_0x31a_31a>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
    MergeFrom(*source);
  }
}

void Gw_swm_body_0x31a_31a::MergeFrom(const Gw_swm_body_0x31a_31a& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      swm_highbeam_ = from.swm_highbeam_;
    }
    if (cached_has_bits & 0x00000002u) {
      swm_frontwipingmode_ = from.swm_frontwipingmode_;
    }
    if (cached_has_bits & 0x00000004u) {
      swm_wipinginterval_sensitvity_ = from.swm_wipinginterval_sensitvity_;
    }
    if (cached_has_bits & 0x00000008u) {
      swm_rearfoglight_ = from.swm_rearfoglight_;
    }
    if (cached_has_bits & 0x00000010u) {
      swm_frontfoglight_ = from.swm_frontfoglight_;
    }
    if (cached_has_bits & 0x00000020u) {
      swm_washerlimphomests_ = from.swm_washerlimphomests_;
    }
    if (cached_has_bits & 0x00000040u) {
      swm_rearwipingmode_ = from.swm_rearwipingmode_;
    }
    if (cached_has_bits & 0x00000080u) {
      swm_turnindicationact_ = from.swm_turnindicationact_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      swm_vol_plus_ = from.swm_vol_plus_;
    }
    if (cached_has_bits & 0x00000200u) {
      swm_vol_minus_ = from.swm_vol_minus_;
    }
    if (cached_has_bits & 0x00000400u) {
      swm_wechat_ = from.swm_wechat_;
    }
    if (cached_has_bits & 0x00000800u) {
      swm_lamplimphomests_ = from.swm_lamplimphomests_;
    }
    if (cached_has_bits & 0x00001000u) {
      swm_headlamp_ = from.swm_headlamp_;
    }
    if (cached_has_bits & 0x00002000u) {
      swm_next_song_ = from.swm_next_song_;
    }
    if (cached_has_bits & 0x00004000u) {
      swm_previous_song_ = from.swm_previous_song_;
    }
    if (cached_has_bits & 0x00008000u) {
      swm_phone_ = from.swm_phone_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      swm_mute_ = from.swm_mute_;
    }
    if (cached_has_bits & 0x00020000u) {
      swm_menu_right_ = from.swm_menu_right_;
    }
    if (cached_has_bits & 0x00040000u) {
      swm_menu_left_ = from.swm_menu_left_;
    }
    if (cached_has_bits & 0x00080000u) {
      swm_menu_down_ = from.swm_menu_down_;
    }
    if (cached_has_bits & 0x00100000u) {
      swm_menu_up_ = from.swm_menu_up_;
    }
    if (cached_has_bits & 0x00200000u) {
      swm_fwashersts_ = from.swm_fwashersts_;
    }
    if (cached_has_bits & 0x00400000u) {
      rolling_counter_0x31a_ = from.rolling_counter_0x31a_;
    }
    if (cached_has_bits & 0x00800000u) {
      swm_menu_return_ = from.swm_menu_return_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 251658240u) {
    if (cached_has_bits & 0x01000000u) {
      swm_menu_confirm_ = from.swm_menu_confirm_;
    }
    if (cached_has_bits & 0x02000000u) {
      checksum_0x31a_ = from.checksum_0x31a_;
    }
    if (cached_has_bits & 0x04000000u) {
      swm_rwashersts_ = from.swm_rwashersts_;
    }
    if (cached_has_bits & 0x08000000u) {
      swm_flashlightsts_ = from.swm_flashlightsts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gw_swm_body_0x31a_31a::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gw_swm_body_0x31a_31a::CopyFrom(const Gw_swm_body_0x31a_31a& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gw_swm_body_0x31a_31a)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gw_swm_body_0x31a_31a::IsInitialized() const {
  return true;
}

void Gw_swm_body_0x31a_31a::Swap(Gw_swm_body_0x31a_31a* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gw_swm_body_0x31a_31a::InternalSwap(Gw_swm_body_0x31a_31a* other) {
  std::swap(swm_highbeam_, other->swm_highbeam_);
  std::swap(swm_frontwipingmode_, other->swm_frontwipingmode_);
  std::swap(swm_wipinginterval_sensitvity_, other->swm_wipinginterval_sensitvity_);
  std::swap(swm_rearfoglight_, other->swm_rearfoglight_);
  std::swap(swm_frontfoglight_, other->swm_frontfoglight_);
  std::swap(swm_washerlimphomests_, other->swm_washerlimphomests_);
  std::swap(swm_rearwipingmode_, other->swm_rearwipingmode_);
  std::swap(swm_turnindicationact_, other->swm_turnindicationact_);
  std::swap(swm_vol_plus_, other->swm_vol_plus_);
  std::swap(swm_vol_minus_, other->swm_vol_minus_);
  std::swap(swm_wechat_, other->swm_wechat_);
  std::swap(swm_lamplimphomests_, other->swm_lamplimphomests_);
  std::swap(swm_headlamp_, other->swm_headlamp_);
  std::swap(swm_next_song_, other->swm_next_song_);
  std::swap(swm_previous_song_, other->swm_previous_song_);
  std::swap(swm_phone_, other->swm_phone_);
  std::swap(swm_mute_, other->swm_mute_);
  std::swap(swm_menu_right_, other->swm_menu_right_);
  std::swap(swm_menu_left_, other->swm_menu_left_);
  std::swap(swm_menu_down_, other->swm_menu_down_);
  std::swap(swm_menu_up_, other->swm_menu_up_);
  std::swap(swm_fwashersts_, other->swm_fwashersts_);
  std::swap(rolling_counter_0x31a_, other->rolling_counter_0x31a_);
  std::swap(swm_menu_return_, other->swm_menu_return_);
  std::swap(swm_menu_confirm_, other->swm_menu_confirm_);
  std::swap(checksum_0x31a_, other->checksum_0x31a_);
  std::swap(swm_rwashersts_, other->swm_rwashersts_);
  std::swap(swm_flashlightsts_, other->swm_flashlightsts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gw_swm_body_0x31a_31a::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gw_swm_body_0x31a_31a

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_highbeamType swm_highbeam = 1;
bool Gw_swm_body_0x31a_31a::has_swm_highbeam() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_highbeam() {
  _has_bits_[0] |= 0x00000001u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_highbeam() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gw_swm_body_0x31a_31a::clear_swm_highbeam() {
  swm_highbeam_ = 0;
  clear_has_swm_highbeam();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_highbeamType Gw_swm_body_0x31a_31a::swm_highbeam() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_highbeam)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_highbeamType >(swm_highbeam_);
}
void Gw_swm_body_0x31a_31a::set_swm_highbeam(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_highbeamType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_highbeamType_IsValid(value));
  set_has_swm_highbeam();
  swm_highbeam_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_highbeam)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_frontwipingmodeType swm_frontwipingmode = 2;
bool Gw_swm_body_0x31a_31a::has_swm_frontwipingmode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_frontwipingmode() {
  _has_bits_[0] |= 0x00000002u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_frontwipingmode() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gw_swm_body_0x31a_31a::clear_swm_frontwipingmode() {
  swm_frontwipingmode_ = 0;
  clear_has_swm_frontwipingmode();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType Gw_swm_body_0x31a_31a::swm_frontwipingmode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_frontwipingmode)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType >(swm_frontwipingmode_);
}
void Gw_swm_body_0x31a_31a::set_swm_frontwipingmode(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontwipingmodeType_IsValid(value));
  set_has_swm_frontwipingmode();
  swm_frontwipingmode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_frontwipingmode)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_wipinginterval_sensitvityType swm_wipinginterval_sensitvity = 3;
bool Gw_swm_body_0x31a_31a::has_swm_wipinginterval_sensitvity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_wipinginterval_sensitvity() {
  _has_bits_[0] |= 0x00000004u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_wipinginterval_sensitvity() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gw_swm_body_0x31a_31a::clear_swm_wipinginterval_sensitvity() {
  swm_wipinginterval_sensitvity_ = 0;
  clear_has_swm_wipinginterval_sensitvity();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType Gw_swm_body_0x31a_31a::swm_wipinginterval_sensitvity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_wipinginterval_sensitvity)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType >(swm_wipinginterval_sensitvity_);
}
void Gw_swm_body_0x31a_31a::set_swm_wipinginterval_sensitvity(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wipinginterval_sensitvityType_IsValid(value));
  set_has_swm_wipinginterval_sensitvity();
  swm_wipinginterval_sensitvity_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_wipinginterval_sensitvity)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rearfoglightType swm_rearfoglight = 4;
bool Gw_swm_body_0x31a_31a::has_swm_rearfoglight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_rearfoglight() {
  _has_bits_[0] |= 0x00000008u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_rearfoglight() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gw_swm_body_0x31a_31a::clear_swm_rearfoglight() {
  swm_rearfoglight_ = 0;
  clear_has_swm_rearfoglight();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearfoglightType Gw_swm_body_0x31a_31a::swm_rearfoglight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_rearfoglight)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearfoglightType >(swm_rearfoglight_);
}
void Gw_swm_body_0x31a_31a::set_swm_rearfoglight(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearfoglightType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearfoglightType_IsValid(value));
  set_has_swm_rearfoglight();
  swm_rearfoglight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_rearfoglight)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_frontfoglightType swm_frontfoglight = 5;
bool Gw_swm_body_0x31a_31a::has_swm_frontfoglight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_frontfoglight() {
  _has_bits_[0] |= 0x00000010u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_frontfoglight() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gw_swm_body_0x31a_31a::clear_swm_frontfoglight() {
  swm_frontfoglight_ = 0;
  clear_has_swm_frontfoglight();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontfoglightType Gw_swm_body_0x31a_31a::swm_frontfoglight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_frontfoglight)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontfoglightType >(swm_frontfoglight_);
}
void Gw_swm_body_0x31a_31a::set_swm_frontfoglight(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontfoglightType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_frontfoglightType_IsValid(value));
  set_has_swm_frontfoglight();
  swm_frontfoglight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_frontfoglight)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_washerlimphomestsType swm_washerlimphomests = 6;
bool Gw_swm_body_0x31a_31a::has_swm_washerlimphomests() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_washerlimphomests() {
  _has_bits_[0] |= 0x00000020u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_washerlimphomests() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gw_swm_body_0x31a_31a::clear_swm_washerlimphomests() {
  swm_washerlimphomests_ = 0;
  clear_has_swm_washerlimphomests();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType Gw_swm_body_0x31a_31a::swm_washerlimphomests() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_washerlimphomests)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType >(swm_washerlimphomests_);
}
void Gw_swm_body_0x31a_31a::set_swm_washerlimphomests(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_washerlimphomestsType_IsValid(value));
  set_has_swm_washerlimphomests();
  swm_washerlimphomests_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_washerlimphomests)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rearwipingmodeType swm_rearwipingmode = 7;
bool Gw_swm_body_0x31a_31a::has_swm_rearwipingmode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_rearwipingmode() {
  _has_bits_[0] |= 0x00000040u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_rearwipingmode() {
  _has_bits_[0] &= ~0x00000040u;
}
void Gw_swm_body_0x31a_31a::clear_swm_rearwipingmode() {
  swm_rearwipingmode_ = 0;
  clear_has_swm_rearwipingmode();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType Gw_swm_body_0x31a_31a::swm_rearwipingmode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_rearwipingmode)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType >(swm_rearwipingmode_);
}
void Gw_swm_body_0x31a_31a::set_swm_rearwipingmode(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rearwipingmodeType_IsValid(value));
  set_has_swm_rearwipingmode();
  swm_rearwipingmode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_rearwipingmode)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_turnindicationactType swm_turnindicationact = 8;
bool Gw_swm_body_0x31a_31a::has_swm_turnindicationact() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_turnindicationact() {
  _has_bits_[0] |= 0x00000080u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_turnindicationact() {
  _has_bits_[0] &= ~0x00000080u;
}
void Gw_swm_body_0x31a_31a::clear_swm_turnindicationact() {
  swm_turnindicationact_ = 0;
  clear_has_swm_turnindicationact();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_turnindicationactType Gw_swm_body_0x31a_31a::swm_turnindicationact() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_turnindicationact)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_turnindicationactType >(swm_turnindicationact_);
}
void Gw_swm_body_0x31a_31a::set_swm_turnindicationact(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_turnindicationactType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_turnindicationactType_IsValid(value));
  set_has_swm_turnindicationact();
  swm_turnindicationact_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_turnindicationact)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_vol_plusType swm_vol_plus = 9;
bool Gw_swm_body_0x31a_31a::has_swm_vol_plus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_vol_plus() {
  _has_bits_[0] |= 0x00000100u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_vol_plus() {
  _has_bits_[0] &= ~0x00000100u;
}
void Gw_swm_body_0x31a_31a::clear_swm_vol_plus() {
  swm_vol_plus_ = 0;
  clear_has_swm_vol_plus();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_plusType Gw_swm_body_0x31a_31a::swm_vol_plus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_vol_plus)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_plusType >(swm_vol_plus_);
}
void Gw_swm_body_0x31a_31a::set_swm_vol_plus(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_plusType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_plusType_IsValid(value));
  set_has_swm_vol_plus();
  swm_vol_plus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_vol_plus)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_vol_minusType swm_vol_minus = 10;
bool Gw_swm_body_0x31a_31a::has_swm_vol_minus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_vol_minus() {
  _has_bits_[0] |= 0x00000200u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_vol_minus() {
  _has_bits_[0] &= ~0x00000200u;
}
void Gw_swm_body_0x31a_31a::clear_swm_vol_minus() {
  swm_vol_minus_ = 0;
  clear_has_swm_vol_minus();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_minusType Gw_swm_body_0x31a_31a::swm_vol_minus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_vol_minus)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_minusType >(swm_vol_minus_);
}
void Gw_swm_body_0x31a_31a::set_swm_vol_minus(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_minusType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_vol_minusType_IsValid(value));
  set_has_swm_vol_minus();
  swm_vol_minus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_vol_minus)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_wechatType swm_wechat = 11;
bool Gw_swm_body_0x31a_31a::has_swm_wechat() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_wechat() {
  _has_bits_[0] |= 0x00000400u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_wechat() {
  _has_bits_[0] &= ~0x00000400u;
}
void Gw_swm_body_0x31a_31a::clear_swm_wechat() {
  swm_wechat_ = 0;
  clear_has_swm_wechat();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wechatType Gw_swm_body_0x31a_31a::swm_wechat() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_wechat)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wechatType >(swm_wechat_);
}
void Gw_swm_body_0x31a_31a::set_swm_wechat(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wechatType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_wechatType_IsValid(value));
  set_has_swm_wechat();
  swm_wechat_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_wechat)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_lamplimphomestsType swm_lamplimphomests = 12;
bool Gw_swm_body_0x31a_31a::has_swm_lamplimphomests() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_lamplimphomests() {
  _has_bits_[0] |= 0x00000800u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_lamplimphomests() {
  _has_bits_[0] &= ~0x00000800u;
}
void Gw_swm_body_0x31a_31a::clear_swm_lamplimphomests() {
  swm_lamplimphomests_ = 0;
  clear_has_swm_lamplimphomests();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType Gw_swm_body_0x31a_31a::swm_lamplimphomests() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_lamplimphomests)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType >(swm_lamplimphomests_);
}
void Gw_swm_body_0x31a_31a::set_swm_lamplimphomests(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_lamplimphomestsType_IsValid(value));
  set_has_swm_lamplimphomests();
  swm_lamplimphomests_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_lamplimphomests)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_headlampType swm_headlamp = 13;
bool Gw_swm_body_0x31a_31a::has_swm_headlamp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_headlamp() {
  _has_bits_[0] |= 0x00001000u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_headlamp() {
  _has_bits_[0] &= ~0x00001000u;
}
void Gw_swm_body_0x31a_31a::clear_swm_headlamp() {
  swm_headlamp_ = 0;
  clear_has_swm_headlamp();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_headlampType Gw_swm_body_0x31a_31a::swm_headlamp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_headlamp)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_headlampType >(swm_headlamp_);
}
void Gw_swm_body_0x31a_31a::set_swm_headlamp(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_headlampType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_headlampType_IsValid(value));
  set_has_swm_headlamp();
  swm_headlamp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_headlamp)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_next_songType swm_next_song = 14;
bool Gw_swm_body_0x31a_31a::has_swm_next_song() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_next_song() {
  _has_bits_[0] |= 0x00002000u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_next_song() {
  _has_bits_[0] &= ~0x00002000u;
}
void Gw_swm_body_0x31a_31a::clear_swm_next_song() {
  swm_next_song_ = 0;
  clear_has_swm_next_song();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_next_songType Gw_swm_body_0x31a_31a::swm_next_song() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_next_song)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_next_songType >(swm_next_song_);
}
void Gw_swm_body_0x31a_31a::set_swm_next_song(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_next_songType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_next_songType_IsValid(value));
  set_has_swm_next_song();
  swm_next_song_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_next_song)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_previous_songType swm_previous_song = 15;
bool Gw_swm_body_0x31a_31a::has_swm_previous_song() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_previous_song() {
  _has_bits_[0] |= 0x00004000u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_previous_song() {
  _has_bits_[0] &= ~0x00004000u;
}
void Gw_swm_body_0x31a_31a::clear_swm_previous_song() {
  swm_previous_song_ = 0;
  clear_has_swm_previous_song();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_previous_songType Gw_swm_body_0x31a_31a::swm_previous_song() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_previous_song)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_previous_songType >(swm_previous_song_);
}
void Gw_swm_body_0x31a_31a::set_swm_previous_song(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_previous_songType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_previous_songType_IsValid(value));
  set_has_swm_previous_song();
  swm_previous_song_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_previous_song)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_phoneType swm_phone = 16;
bool Gw_swm_body_0x31a_31a::has_swm_phone() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_phone() {
  _has_bits_[0] |= 0x00008000u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_phone() {
  _has_bits_[0] &= ~0x00008000u;
}
void Gw_swm_body_0x31a_31a::clear_swm_phone() {
  swm_phone_ = 0;
  clear_has_swm_phone();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_phoneType Gw_swm_body_0x31a_31a::swm_phone() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_phone)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_phoneType >(swm_phone_);
}
void Gw_swm_body_0x31a_31a::set_swm_phone(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_phoneType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_phoneType_IsValid(value));
  set_has_swm_phone();
  swm_phone_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_phone)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_muteType swm_mute = 17;
bool Gw_swm_body_0x31a_31a::has_swm_mute() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_mute() {
  _has_bits_[0] |= 0x00010000u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_mute() {
  _has_bits_[0] &= ~0x00010000u;
}
void Gw_swm_body_0x31a_31a::clear_swm_mute() {
  swm_mute_ = 0;
  clear_has_swm_mute();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_muteType Gw_swm_body_0x31a_31a::swm_mute() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_mute)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_muteType >(swm_mute_);
}
void Gw_swm_body_0x31a_31a::set_swm_mute(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_muteType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_muteType_IsValid(value));
  set_has_swm_mute();
  swm_mute_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_mute)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_rightType swm_menu_right = 18;
bool Gw_swm_body_0x31a_31a::has_swm_menu_right() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_menu_right() {
  _has_bits_[0] |= 0x00020000u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_menu_right() {
  _has_bits_[0] &= ~0x00020000u;
}
void Gw_swm_body_0x31a_31a::clear_swm_menu_right() {
  swm_menu_right_ = 0;
  clear_has_swm_menu_right();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_rightType Gw_swm_body_0x31a_31a::swm_menu_right() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_right)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_rightType >(swm_menu_right_);
}
void Gw_swm_body_0x31a_31a::set_swm_menu_right(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_rightType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_rightType_IsValid(value));
  set_has_swm_menu_right();
  swm_menu_right_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_right)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_leftType swm_menu_left = 19;
bool Gw_swm_body_0x31a_31a::has_swm_menu_left() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_menu_left() {
  _has_bits_[0] |= 0x00040000u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_menu_left() {
  _has_bits_[0] &= ~0x00040000u;
}
void Gw_swm_body_0x31a_31a::clear_swm_menu_left() {
  swm_menu_left_ = 0;
  clear_has_swm_menu_left();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_leftType Gw_swm_body_0x31a_31a::swm_menu_left() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_left)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_leftType >(swm_menu_left_);
}
void Gw_swm_body_0x31a_31a::set_swm_menu_left(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_leftType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_leftType_IsValid(value));
  set_has_swm_menu_left();
  swm_menu_left_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_left)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_downType swm_menu_down = 20;
bool Gw_swm_body_0x31a_31a::has_swm_menu_down() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_menu_down() {
  _has_bits_[0] |= 0x00080000u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_menu_down() {
  _has_bits_[0] &= ~0x00080000u;
}
void Gw_swm_body_0x31a_31a::clear_swm_menu_down() {
  swm_menu_down_ = 0;
  clear_has_swm_menu_down();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_downType Gw_swm_body_0x31a_31a::swm_menu_down() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_down)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_downType >(swm_menu_down_);
}
void Gw_swm_body_0x31a_31a::set_swm_menu_down(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_downType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_downType_IsValid(value));
  set_has_swm_menu_down();
  swm_menu_down_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_down)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_upType swm_menu_up = 21;
bool Gw_swm_body_0x31a_31a::has_swm_menu_up() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_menu_up() {
  _has_bits_[0] |= 0x00100000u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_menu_up() {
  _has_bits_[0] &= ~0x00100000u;
}
void Gw_swm_body_0x31a_31a::clear_swm_menu_up() {
  swm_menu_up_ = 0;
  clear_has_swm_menu_up();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_upType Gw_swm_body_0x31a_31a::swm_menu_up() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_up)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_upType >(swm_menu_up_);
}
void Gw_swm_body_0x31a_31a::set_swm_menu_up(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_upType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_upType_IsValid(value));
  set_has_swm_menu_up();
  swm_menu_up_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_up)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_fwasherstsType swm_fwashersts = 22;
bool Gw_swm_body_0x31a_31a::has_swm_fwashersts() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_fwashersts() {
  _has_bits_[0] |= 0x00200000u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_fwashersts() {
  _has_bits_[0] &= ~0x00200000u;
}
void Gw_swm_body_0x31a_31a::clear_swm_fwashersts() {
  swm_fwashersts_ = 0;
  clear_has_swm_fwashersts();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_fwasherstsType Gw_swm_body_0x31a_31a::swm_fwashersts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_fwashersts)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_fwasherstsType >(swm_fwashersts_);
}
void Gw_swm_body_0x31a_31a::set_swm_fwashersts(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_fwasherstsType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_fwasherstsType_IsValid(value));
  set_has_swm_fwashersts();
  swm_fwashersts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_fwashersts)
}

// optional int32 rolling_counter_0x31a = 23;
bool Gw_swm_body_0x31a_31a::has_rolling_counter_0x31a() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_rolling_counter_0x31a() {
  _has_bits_[0] |= 0x00400000u;
}
void Gw_swm_body_0x31a_31a::clear_has_rolling_counter_0x31a() {
  _has_bits_[0] &= ~0x00400000u;
}
void Gw_swm_body_0x31a_31a::clear_rolling_counter_0x31a() {
  rolling_counter_0x31a_ = 0;
  clear_has_rolling_counter_0x31a();
}
::google::protobuf::int32 Gw_swm_body_0x31a_31a::rolling_counter_0x31a() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.rolling_counter_0x31a)
  return rolling_counter_0x31a_;
}
void Gw_swm_body_0x31a_31a::set_rolling_counter_0x31a(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x31a();
  rolling_counter_0x31a_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.rolling_counter_0x31a)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_returnType swm_menu_return = 24;
bool Gw_swm_body_0x31a_31a::has_swm_menu_return() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_menu_return() {
  _has_bits_[0] |= 0x00800000u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_menu_return() {
  _has_bits_[0] &= ~0x00800000u;
}
void Gw_swm_body_0x31a_31a::clear_swm_menu_return() {
  swm_menu_return_ = 0;
  clear_has_swm_menu_return();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_returnType Gw_swm_body_0x31a_31a::swm_menu_return() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_return)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_returnType >(swm_menu_return_);
}
void Gw_swm_body_0x31a_31a::set_swm_menu_return(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_returnType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_returnType_IsValid(value));
  set_has_swm_menu_return();
  swm_menu_return_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_return)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_menu_confirmType swm_menu_confirm = 25;
bool Gw_swm_body_0x31a_31a::has_swm_menu_confirm() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_menu_confirm() {
  _has_bits_[0] |= 0x01000000u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_menu_confirm() {
  _has_bits_[0] &= ~0x01000000u;
}
void Gw_swm_body_0x31a_31a::clear_swm_menu_confirm() {
  swm_menu_confirm_ = 0;
  clear_has_swm_menu_confirm();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_confirmType Gw_swm_body_0x31a_31a::swm_menu_confirm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_confirm)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_confirmType >(swm_menu_confirm_);
}
void Gw_swm_body_0x31a_31a::set_swm_menu_confirm(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_confirmType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_menu_confirmType_IsValid(value));
  set_has_swm_menu_confirm();
  swm_menu_confirm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_menu_confirm)
}

// optional int32 checksum_0x31a = 26;
bool Gw_swm_body_0x31a_31a::has_checksum_0x31a() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_checksum_0x31a() {
  _has_bits_[0] |= 0x02000000u;
}
void Gw_swm_body_0x31a_31a::clear_has_checksum_0x31a() {
  _has_bits_[0] &= ~0x02000000u;
}
void Gw_swm_body_0x31a_31a::clear_checksum_0x31a() {
  checksum_0x31a_ = 0;
  clear_has_checksum_0x31a();
}
::google::protobuf::int32 Gw_swm_body_0x31a_31a::checksum_0x31a() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.checksum_0x31a)
  return checksum_0x31a_;
}
void Gw_swm_body_0x31a_31a::set_checksum_0x31a(::google::protobuf::int32 value) {
  set_has_checksum_0x31a();
  checksum_0x31a_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.checksum_0x31a)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_rwasherstsType swm_rwashersts = 27;
bool Gw_swm_body_0x31a_31a::has_swm_rwashersts() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_rwashersts() {
  _has_bits_[0] |= 0x04000000u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_rwashersts() {
  _has_bits_[0] &= ~0x04000000u;
}
void Gw_swm_body_0x31a_31a::clear_swm_rwashersts() {
  swm_rwashersts_ = 0;
  clear_has_swm_rwashersts();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rwasherstsType Gw_swm_body_0x31a_31a::swm_rwashersts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_rwashersts)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rwasherstsType >(swm_rwashersts_);
}
void Gw_swm_body_0x31a_31a::set_swm_rwashersts(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rwasherstsType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_rwasherstsType_IsValid(value));
  set_has_swm_rwashersts();
  swm_rwashersts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_rwashersts)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a.Swm_flashlightstsType swm_flashlightsts = 28;
bool Gw_swm_body_0x31a_31a::has_swm_flashlightsts() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void Gw_swm_body_0x31a_31a::set_has_swm_flashlightsts() {
  _has_bits_[0] |= 0x08000000u;
}
void Gw_swm_body_0x31a_31a::clear_has_swm_flashlightsts() {
  _has_bits_[0] &= ~0x08000000u;
}
void Gw_swm_body_0x31a_31a::clear_swm_flashlightsts() {
  swm_flashlightsts_ = 0;
  clear_has_swm_flashlightsts();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_flashlightstsType Gw_swm_body_0x31a_31a::swm_flashlightsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_flashlightsts)
  return static_cast< ::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_flashlightstsType >(swm_flashlightsts_);
}
void Gw_swm_body_0x31a_31a::set_swm_flashlightsts(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_flashlightstsType value) {
  assert(::jmc_auto::canbus::Gw_swm_body_0x31a_31a_Swm_flashlightstsType_IsValid(value));
  set_has_swm_flashlightsts();
  swm_flashlightsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_swm_body_0x31a_31a.swm_flashlightsts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gw_ems_tq_0x101_101::kEmsIndicatedrealengtorqFieldNumber;
const int Gw_ems_tq_0x101_101::kEmsEngspeedFieldNumber;
const int Gw_ems_tq_0x101_101::kEmsEngspeederrorFieldNumber;
const int Gw_ems_tq_0x101_101::kEmsRngmodtorqcrsleadminFieldNumber;
const int Gw_ems_tq_0x101_101::kDcmEmsRollingcounter0X101FieldNumber;
const int Gw_ems_tq_0x101_101::kDcmEmsChecksum0X101FieldNumber;
const int Gw_ems_tq_0x101_101::kEmsRngmodtorqcrsleadmaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gw_ems_tq_0x101_101::Gw_ems_tq_0x101_101()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gw_ems_tq_0x101_101)
}
Gw_ems_tq_0x101_101::Gw_ems_tq_0x101_101(const Gw_ems_tq_0x101_101& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ems_indicatedrealengtorq_, &from.ems_indicatedrealengtorq_,
    reinterpret_cast<char*>(&dcm_ems_checksum_0x101_) -
    reinterpret_cast<char*>(&ems_indicatedrealengtorq_) + sizeof(dcm_ems_checksum_0x101_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gw_ems_tq_0x101_101)
}

void Gw_ems_tq_0x101_101::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ems_indicatedrealengtorq_, 0, reinterpret_cast<char*>(&dcm_ems_checksum_0x101_) -
    reinterpret_cast<char*>(&ems_indicatedrealengtorq_) + sizeof(dcm_ems_checksum_0x101_));
}

Gw_ems_tq_0x101_101::~Gw_ems_tq_0x101_101() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gw_ems_tq_0x101_101)
  SharedDtor();
}

void Gw_ems_tq_0x101_101::SharedDtor() {
}

void Gw_ems_tq_0x101_101::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gw_ems_tq_0x101_101::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gw_ems_tq_0x101_101& Gw_ems_tq_0x101_101::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gw_ems_tq_0x101_101* Gw_ems_tq_0x101_101::New(::google::protobuf::Arena* arena) const {
  Gw_ems_tq_0x101_101* n = new Gw_ems_tq_0x101_101;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gw_ems_tq_0x101_101::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gw_ems_tq_0x101_101)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&ems_indicatedrealengtorq_, 0, reinterpret_cast<char*>(&dcm_ems_checksum_0x101_) -
      reinterpret_cast<char*>(&ems_indicatedrealengtorq_) + sizeof(dcm_ems_checksum_0x101_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gw_ems_tq_0x101_101::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gw_ems_tq_0x101_101)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ems_indicatedrealengtorq = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_ems_indicatedrealengtorq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ems_indicatedrealengtorq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ems_engspeed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_ems_engspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ems_engspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_tq_0x101_101.Ems_engspeederrorType ems_engspeederror = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ems_tq_0x101_101_Ems_engspeederrorType_IsValid(value)) {
            set_ems_engspeederror(static_cast< ::jmc_auto::canbus::Gw_ems_tq_0x101_101_Ems_engspeederrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ems_rngmodtorqcrsleadmin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_ems_rngmodtorqcrsleadmin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ems_rngmodtorqcrsleadmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dcm_ems_rollingcounter_0x101 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_dcm_ems_rollingcounter_0x101();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dcm_ems_rollingcounter_0x101_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dcm_ems_checksum_0x101 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_dcm_ems_checksum_0x101();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dcm_ems_checksum_0x101_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ems_rngmodtorqcrsleadmax = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_ems_rngmodtorqcrsleadmax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ems_rngmodtorqcrsleadmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gw_ems_tq_0x101_101)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gw_ems_tq_0x101_101)
  return false;
#undef DO_
}

void Gw_ems_tq_0x101_101::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gw_ems_tq_0x101_101)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ems_indicatedrealengtorq = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ems_indicatedrealengtorq(), output);
  }

  // optional double ems_engspeed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ems_engspeed(), output);
  }

  // optional .jmc_auto.canbus.Gw_ems_tq_0x101_101.Ems_engspeederrorType ems_engspeederror = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ems_engspeederror(), output);
  }

  // optional double ems_rngmodtorqcrsleadmin = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ems_rngmodtorqcrsleadmin(), output);
  }

  // optional int32 dcm_ems_rollingcounter_0x101 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dcm_ems_rollingcounter_0x101(), output);
  }

  // optional int32 dcm_ems_checksum_0x101 = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dcm_ems_checksum_0x101(), output);
  }

  // optional double ems_rngmodtorqcrsleadmax = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ems_rngmodtorqcrsleadmax(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gw_ems_tq_0x101_101)
}

::google::protobuf::uint8* Gw_ems_tq_0x101_101::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gw_ems_tq_0x101_101)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ems_indicatedrealengtorq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ems_indicatedrealengtorq(), target);
  }

  // optional double ems_engspeed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ems_engspeed(), target);
  }

  // optional .jmc_auto.canbus.Gw_ems_tq_0x101_101.Ems_engspeederrorType ems_engspeederror = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ems_engspeederror(), target);
  }

  // optional double ems_rngmodtorqcrsleadmin = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ems_rngmodtorqcrsleadmin(), target);
  }

  // optional int32 dcm_ems_rollingcounter_0x101 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dcm_ems_rollingcounter_0x101(), target);
  }

  // optional int32 dcm_ems_checksum_0x101 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dcm_ems_checksum_0x101(), target);
  }

  // optional double ems_rngmodtorqcrsleadmax = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ems_rngmodtorqcrsleadmax(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gw_ems_tq_0x101_101)
  return target;
}

size_t Gw_ems_tq_0x101_101::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gw_ems_tq_0x101_101)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional double ems_indicatedrealengtorq = 1;
    if (has_ems_indicatedrealengtorq()) {
      total_size += 1 + 8;
    }

    // optional double ems_engspeed = 2;
    if (has_ems_engspeed()) {
      total_size += 1 + 8;
    }

    // optional double ems_rngmodtorqcrsleadmin = 4;
    if (has_ems_rngmodtorqcrsleadmin()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Gw_ems_tq_0x101_101.Ems_engspeederrorType ems_engspeederror = 3;
    if (has_ems_engspeederror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ems_engspeederror());
    }

    // optional int32 dcm_ems_rollingcounter_0x101 = 5;
    if (has_dcm_ems_rollingcounter_0x101()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dcm_ems_rollingcounter_0x101());
    }

    // optional double ems_rngmodtorqcrsleadmax = 7;
    if (has_ems_rngmodtorqcrsleadmax()) {
      total_size += 1 + 8;
    }

    // optional int32 dcm_ems_checksum_0x101 = 6;
    if (has_dcm_ems_checksum_0x101()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dcm_ems_checksum_0x101());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gw_ems_tq_0x101_101::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gw_ems_tq_0x101_101)
  GOOGLE_DCHECK_NE(&from, this);
  const Gw_ems_tq_0x101_101* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gw_ems_tq_0x101_101>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gw_ems_tq_0x101_101)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gw_ems_tq_0x101_101)
    MergeFrom(*source);
  }
}

void Gw_ems_tq_0x101_101::MergeFrom(const Gw_ems_tq_0x101_101& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gw_ems_tq_0x101_101)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      ems_indicatedrealengtorq_ = from.ems_indicatedrealengtorq_;
    }
    if (cached_has_bits & 0x00000002u) {
      ems_engspeed_ = from.ems_engspeed_;
    }
    if (cached_has_bits & 0x00000004u) {
      ems_rngmodtorqcrsleadmin_ = from.ems_rngmodtorqcrsleadmin_;
    }
    if (cached_has_bits & 0x00000008u) {
      ems_engspeederror_ = from.ems_engspeederror_;
    }
    if (cached_has_bits & 0x00000010u) {
      dcm_ems_rollingcounter_0x101_ = from.dcm_ems_rollingcounter_0x101_;
    }
    if (cached_has_bits & 0x00000020u) {
      ems_rngmodtorqcrsleadmax_ = from.ems_rngmodtorqcrsleadmax_;
    }
    if (cached_has_bits & 0x00000040u) {
      dcm_ems_checksum_0x101_ = from.dcm_ems_checksum_0x101_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gw_ems_tq_0x101_101::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gw_ems_tq_0x101_101)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gw_ems_tq_0x101_101::CopyFrom(const Gw_ems_tq_0x101_101& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gw_ems_tq_0x101_101)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gw_ems_tq_0x101_101::IsInitialized() const {
  return true;
}

void Gw_ems_tq_0x101_101::Swap(Gw_ems_tq_0x101_101* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gw_ems_tq_0x101_101::InternalSwap(Gw_ems_tq_0x101_101* other) {
  std::swap(ems_indicatedrealengtorq_, other->ems_indicatedrealengtorq_);
  std::swap(ems_engspeed_, other->ems_engspeed_);
  std::swap(ems_rngmodtorqcrsleadmin_, other->ems_rngmodtorqcrsleadmin_);
  std::swap(ems_engspeederror_, other->ems_engspeederror_);
  std::swap(dcm_ems_rollingcounter_0x101_, other->dcm_ems_rollingcounter_0x101_);
  std::swap(ems_rngmodtorqcrsleadmax_, other->ems_rngmodtorqcrsleadmax_);
  std::swap(dcm_ems_checksum_0x101_, other->dcm_ems_checksum_0x101_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gw_ems_tq_0x101_101::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gw_ems_tq_0x101_101

// optional double ems_indicatedrealengtorq = 1;
bool Gw_ems_tq_0x101_101::has_ems_indicatedrealengtorq() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gw_ems_tq_0x101_101::set_has_ems_indicatedrealengtorq() {
  _has_bits_[0] |= 0x00000001u;
}
void Gw_ems_tq_0x101_101::clear_has_ems_indicatedrealengtorq() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gw_ems_tq_0x101_101::clear_ems_indicatedrealengtorq() {
  ems_indicatedrealengtorq_ = 0;
  clear_has_ems_indicatedrealengtorq();
}
double Gw_ems_tq_0x101_101::ems_indicatedrealengtorq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_indicatedrealengtorq)
  return ems_indicatedrealengtorq_;
}
void Gw_ems_tq_0x101_101::set_ems_indicatedrealengtorq(double value) {
  set_has_ems_indicatedrealengtorq();
  ems_indicatedrealengtorq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_indicatedrealengtorq)
}

// optional double ems_engspeed = 2;
bool Gw_ems_tq_0x101_101::has_ems_engspeed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gw_ems_tq_0x101_101::set_has_ems_engspeed() {
  _has_bits_[0] |= 0x00000002u;
}
void Gw_ems_tq_0x101_101::clear_has_ems_engspeed() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gw_ems_tq_0x101_101::clear_ems_engspeed() {
  ems_engspeed_ = 0;
  clear_has_ems_engspeed();
}
double Gw_ems_tq_0x101_101::ems_engspeed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_engspeed)
  return ems_engspeed_;
}
void Gw_ems_tq_0x101_101::set_ems_engspeed(double value) {
  set_has_ems_engspeed();
  ems_engspeed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_engspeed)
}

// optional .jmc_auto.canbus.Gw_ems_tq_0x101_101.Ems_engspeederrorType ems_engspeederror = 3;
bool Gw_ems_tq_0x101_101::has_ems_engspeederror() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gw_ems_tq_0x101_101::set_has_ems_engspeederror() {
  _has_bits_[0] |= 0x00000008u;
}
void Gw_ems_tq_0x101_101::clear_has_ems_engspeederror() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gw_ems_tq_0x101_101::clear_ems_engspeederror() {
  ems_engspeederror_ = 0;
  clear_has_ems_engspeederror();
}
::jmc_auto::canbus::Gw_ems_tq_0x101_101_Ems_engspeederrorType Gw_ems_tq_0x101_101::ems_engspeederror() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_engspeederror)
  return static_cast< ::jmc_auto::canbus::Gw_ems_tq_0x101_101_Ems_engspeederrorType >(ems_engspeederror_);
}
void Gw_ems_tq_0x101_101::set_ems_engspeederror(::jmc_auto::canbus::Gw_ems_tq_0x101_101_Ems_engspeederrorType value) {
  assert(::jmc_auto::canbus::Gw_ems_tq_0x101_101_Ems_engspeederrorType_IsValid(value));
  set_has_ems_engspeederror();
  ems_engspeederror_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_engspeederror)
}

// optional double ems_rngmodtorqcrsleadmin = 4;
bool Gw_ems_tq_0x101_101::has_ems_rngmodtorqcrsleadmin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gw_ems_tq_0x101_101::set_has_ems_rngmodtorqcrsleadmin() {
  _has_bits_[0] |= 0x00000004u;
}
void Gw_ems_tq_0x101_101::clear_has_ems_rngmodtorqcrsleadmin() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gw_ems_tq_0x101_101::clear_ems_rngmodtorqcrsleadmin() {
  ems_rngmodtorqcrsleadmin_ = 0;
  clear_has_ems_rngmodtorqcrsleadmin();
}
double Gw_ems_tq_0x101_101::ems_rngmodtorqcrsleadmin() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_rngmodtorqcrsleadmin)
  return ems_rngmodtorqcrsleadmin_;
}
void Gw_ems_tq_0x101_101::set_ems_rngmodtorqcrsleadmin(double value) {
  set_has_ems_rngmodtorqcrsleadmin();
  ems_rngmodtorqcrsleadmin_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_rngmodtorqcrsleadmin)
}

// optional int32 dcm_ems_rollingcounter_0x101 = 5;
bool Gw_ems_tq_0x101_101::has_dcm_ems_rollingcounter_0x101() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gw_ems_tq_0x101_101::set_has_dcm_ems_rollingcounter_0x101() {
  _has_bits_[0] |= 0x00000010u;
}
void Gw_ems_tq_0x101_101::clear_has_dcm_ems_rollingcounter_0x101() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gw_ems_tq_0x101_101::clear_dcm_ems_rollingcounter_0x101() {
  dcm_ems_rollingcounter_0x101_ = 0;
  clear_has_dcm_ems_rollingcounter_0x101();
}
::google::protobuf::int32 Gw_ems_tq_0x101_101::dcm_ems_rollingcounter_0x101() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tq_0x101_101.dcm_ems_rollingcounter_0x101)
  return dcm_ems_rollingcounter_0x101_;
}
void Gw_ems_tq_0x101_101::set_dcm_ems_rollingcounter_0x101(::google::protobuf::int32 value) {
  set_has_dcm_ems_rollingcounter_0x101();
  dcm_ems_rollingcounter_0x101_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tq_0x101_101.dcm_ems_rollingcounter_0x101)
}

// optional int32 dcm_ems_checksum_0x101 = 6;
bool Gw_ems_tq_0x101_101::has_dcm_ems_checksum_0x101() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Gw_ems_tq_0x101_101::set_has_dcm_ems_checksum_0x101() {
  _has_bits_[0] |= 0x00000040u;
}
void Gw_ems_tq_0x101_101::clear_has_dcm_ems_checksum_0x101() {
  _has_bits_[0] &= ~0x00000040u;
}
void Gw_ems_tq_0x101_101::clear_dcm_ems_checksum_0x101() {
  dcm_ems_checksum_0x101_ = 0;
  clear_has_dcm_ems_checksum_0x101();
}
::google::protobuf::int32 Gw_ems_tq_0x101_101::dcm_ems_checksum_0x101() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tq_0x101_101.dcm_ems_checksum_0x101)
  return dcm_ems_checksum_0x101_;
}
void Gw_ems_tq_0x101_101::set_dcm_ems_checksum_0x101(::google::protobuf::int32 value) {
  set_has_dcm_ems_checksum_0x101();
  dcm_ems_checksum_0x101_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tq_0x101_101.dcm_ems_checksum_0x101)
}

// optional double ems_rngmodtorqcrsleadmax = 7;
bool Gw_ems_tq_0x101_101::has_ems_rngmodtorqcrsleadmax() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gw_ems_tq_0x101_101::set_has_ems_rngmodtorqcrsleadmax() {
  _has_bits_[0] |= 0x00000020u;
}
void Gw_ems_tq_0x101_101::clear_has_ems_rngmodtorqcrsleadmax() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gw_ems_tq_0x101_101::clear_ems_rngmodtorqcrsleadmax() {
  ems_rngmodtorqcrsleadmax_ = 0;
  clear_has_ems_rngmodtorqcrsleadmax();
}
double Gw_ems_tq_0x101_101::ems_rngmodtorqcrsleadmax() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_rngmodtorqcrsleadmax)
  return ems_rngmodtorqcrsleadmax_;
}
void Gw_ems_tq_0x101_101::set_ems_rngmodtorqcrsleadmax(double value) {
  set_has_ems_rngmodtorqcrsleadmax();
  ems_rngmodtorqcrsleadmax_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_tq_0x101_101.ems_rngmodtorqcrsleadmax)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esp_vlc_0x223_223::kEspVlcInternaltargetacceFieldNumber;
const int Esp_vlc_0x223_223::kEspApaGearboxenableFieldNumber;
const int Esp_vlc_0x223_223::kEspTargetGearRequestFieldNumber;
const int Esp_vlc_0x223_223::kEspVlcApactiveFieldNumber;
const int Esp_vlc_0x223_223::kEspPamLcFailurestsFieldNumber;
const int Esp_vlc_0x223_223::kEspPamLcStatusFieldNumber;
const int Esp_vlc_0x223_223::kRollingCounter0X223FieldNumber;
const int Esp_vlc_0x223_223::kEspVlcActiveFieldNumber;
const int Esp_vlc_0x223_223::kEspVlcAvailableFieldNumber;
const int Esp_vlc_0x223_223::kEspVlcapaAvailableFieldNumber;
const int Esp_vlc_0x223_223::kEspVlcengtorqreqactFieldNumber;
const int Esp_vlc_0x223_223::kChecksum0X223FieldNumber;
const int Esp_vlc_0x223_223::kEspVlcengtorqreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esp_vlc_0x223_223::Esp_vlc_0x223_223()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Esp_vlc_0x223_223)
}
Esp_vlc_0x223_223::Esp_vlc_0x223_223(const Esp_vlc_0x223_223& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&esp_vlc_internaltargetacce_, &from.esp_vlc_internaltargetacce_,
    reinterpret_cast<char*>(&esp_vlcengtorqreq_) -
    reinterpret_cast<char*>(&esp_vlc_internaltargetacce_) + sizeof(esp_vlcengtorqreq_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Esp_vlc_0x223_223)
}

void Esp_vlc_0x223_223::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&esp_vlc_internaltargetacce_, 0, reinterpret_cast<char*>(&esp_vlcengtorqreq_) -
    reinterpret_cast<char*>(&esp_vlc_internaltargetacce_) + sizeof(esp_vlcengtorqreq_));
}

Esp_vlc_0x223_223::~Esp_vlc_0x223_223() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Esp_vlc_0x223_223)
  SharedDtor();
}

void Esp_vlc_0x223_223::SharedDtor() {
}

void Esp_vlc_0x223_223::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esp_vlc_0x223_223::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esp_vlc_0x223_223& Esp_vlc_0x223_223::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esp_vlc_0x223_223* Esp_vlc_0x223_223::New(::google::protobuf::Arena* arena) const {
  Esp_vlc_0x223_223* n = new Esp_vlc_0x223_223;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esp_vlc_0x223_223::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Esp_vlc_0x223_223)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&esp_vlc_internaltargetacce_, 0, reinterpret_cast<char*>(&esp_vlc_active_) -
      reinterpret_cast<char*>(&esp_vlc_internaltargetacce_) + sizeof(esp_vlc_active_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&esp_vlc_available_, 0, reinterpret_cast<char*>(&esp_vlcengtorqreq_) -
      reinterpret_cast<char*>(&esp_vlc_available_) + sizeof(esp_vlcengtorqreq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esp_vlc_0x223_223::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Esp_vlc_0x223_223)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double esp_vlc_internaltargetacce = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_esp_vlc_internaltargetacce();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &esp_vlc_internaltargetacce_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_apa_gearboxenableType esp_apa_gearboxenable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_apa_gearboxenableType_IsValid(value)) {
            set_esp_apa_gearboxenable(static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_apa_gearboxenableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_target_gear_requestType esp_target_gear_request = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_target_gear_requestType_IsValid(value)) {
            set_esp_target_gear_request(static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_target_gear_requestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_apactiveType esp_vlc_apactive = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_apactiveType_IsValid(value)) {
            set_esp_vlc_apactive(static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_apactiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_pam_lc_failurestsType esp_pam_lc_failurests = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_IsValid(value)) {
            set_esp_pam_lc_failurests(static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_failurestsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_pam_lc_statusType esp_pam_lc_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_statusType_IsValid(value)) {
            set_esp_pam_lc_status(static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_statusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x223 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_rolling_counter_0x223();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x223_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_activeType esp_vlc_active = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_activeType_IsValid(value)) {
            set_esp_vlc_active(static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_activeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_availableType esp_vlc_available = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_availableType_IsValid(value)) {
            set_esp_vlc_available(static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_availableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlcapa_availableType esp_vlcapa_available = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcapa_availableType_IsValid(value)) {
            set_esp_vlcapa_available(static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcapa_availableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlcengtorqreqactType esp_vlcengtorqreqact = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_IsValid(value)) {
            set_esp_vlcengtorqreqact(static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcengtorqreqactType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x223 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_checksum_0x223();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x223_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 esp_vlcengtorqreq = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_esp_vlcengtorqreq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_vlcengtorqreq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Esp_vlc_0x223_223)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Esp_vlc_0x223_223)
  return false;
#undef DO_
}

void Esp_vlc_0x223_223::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Esp_vlc_0x223_223)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double esp_vlc_internaltargetacce = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->esp_vlc_internaltargetacce(), output);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_apa_gearboxenableType esp_apa_gearboxenable = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->esp_apa_gearboxenable(), output);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_target_gear_requestType esp_target_gear_request = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->esp_target_gear_request(), output);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_apactiveType esp_vlc_apactive = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->esp_vlc_apactive(), output);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_pam_lc_failurestsType esp_pam_lc_failurests = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->esp_pam_lc_failurests(), output);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_pam_lc_statusType esp_pam_lc_status = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->esp_pam_lc_status(), output);
  }

  // optional int32 rolling_counter_0x223 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rolling_counter_0x223(), output);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_activeType esp_vlc_active = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->esp_vlc_active(), output);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_availableType esp_vlc_available = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->esp_vlc_available(), output);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlcapa_availableType esp_vlcapa_available = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->esp_vlcapa_available(), output);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlcengtorqreqactType esp_vlcengtorqreqact = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->esp_vlcengtorqreqact(), output);
  }

  // optional int32 checksum_0x223 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->checksum_0x223(), output);
  }

  // optional int32 esp_vlcengtorqreq = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->esp_vlcengtorqreq(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Esp_vlc_0x223_223)
}

::google::protobuf::uint8* Esp_vlc_0x223_223::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Esp_vlc_0x223_223)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double esp_vlc_internaltargetacce = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->esp_vlc_internaltargetacce(), target);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_apa_gearboxenableType esp_apa_gearboxenable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->esp_apa_gearboxenable(), target);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_target_gear_requestType esp_target_gear_request = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->esp_target_gear_request(), target);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_apactiveType esp_vlc_apactive = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->esp_vlc_apactive(), target);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_pam_lc_failurestsType esp_pam_lc_failurests = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->esp_pam_lc_failurests(), target);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_pam_lc_statusType esp_pam_lc_status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->esp_pam_lc_status(), target);
  }

  // optional int32 rolling_counter_0x223 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rolling_counter_0x223(), target);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_activeType esp_vlc_active = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->esp_vlc_active(), target);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_availableType esp_vlc_available = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->esp_vlc_available(), target);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlcapa_availableType esp_vlcapa_available = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->esp_vlcapa_available(), target);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlcengtorqreqactType esp_vlcengtorqreqact = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->esp_vlcengtorqreqact(), target);
  }

  // optional int32 checksum_0x223 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->checksum_0x223(), target);
  }

  // optional int32 esp_vlcengtorqreq = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->esp_vlcengtorqreq(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Esp_vlc_0x223_223)
  return target;
}

size_t Esp_vlc_0x223_223::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Esp_vlc_0x223_223)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double esp_vlc_internaltargetacce = 1;
    if (has_esp_vlc_internaltargetacce()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_apa_gearboxenableType esp_apa_gearboxenable = 2;
    if (has_esp_apa_gearboxenable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_apa_gearboxenable());
    }

    // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_target_gear_requestType esp_target_gear_request = 3;
    if (has_esp_target_gear_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_target_gear_request());
    }

    // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_apactiveType esp_vlc_apactive = 4;
    if (has_esp_vlc_apactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_vlc_apactive());
    }

    // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_pam_lc_failurestsType esp_pam_lc_failurests = 5;
    if (has_esp_pam_lc_failurests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_pam_lc_failurests());
    }

    // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_pam_lc_statusType esp_pam_lc_status = 6;
    if (has_esp_pam_lc_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_pam_lc_status());
    }

    // optional int32 rolling_counter_0x223 = 7;
    if (has_rolling_counter_0x223()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x223());
    }

    // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_activeType esp_vlc_active = 8;
    if (has_esp_vlc_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_vlc_active());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_availableType esp_vlc_available = 9;
    if (has_esp_vlc_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_vlc_available());
    }

    // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlcapa_availableType esp_vlcapa_available = 10;
    if (has_esp_vlcapa_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_vlcapa_available());
    }

    // optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlcengtorqreqactType esp_vlcengtorqreqact = 11;
    if (has_esp_vlcengtorqreqact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_vlcengtorqreqact());
    }

    // optional int32 checksum_0x223 = 12;
    if (has_checksum_0x223()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x223());
    }

    // optional int32 esp_vlcengtorqreq = 13;
    if (has_esp_vlcengtorqreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_vlcengtorqreq());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esp_vlc_0x223_223::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Esp_vlc_0x223_223)
  GOOGLE_DCHECK_NE(&from, this);
  const Esp_vlc_0x223_223* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esp_vlc_0x223_223>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Esp_vlc_0x223_223)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Esp_vlc_0x223_223)
    MergeFrom(*source);
  }
}

void Esp_vlc_0x223_223::MergeFrom(const Esp_vlc_0x223_223& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Esp_vlc_0x223_223)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      esp_vlc_internaltargetacce_ = from.esp_vlc_internaltargetacce_;
    }
    if (cached_has_bits & 0x00000002u) {
      esp_apa_gearboxenable_ = from.esp_apa_gearboxenable_;
    }
    if (cached_has_bits & 0x00000004u) {
      esp_target_gear_request_ = from.esp_target_gear_request_;
    }
    if (cached_has_bits & 0x00000008u) {
      esp_vlc_apactive_ = from.esp_vlc_apactive_;
    }
    if (cached_has_bits & 0x00000010u) {
      esp_pam_lc_failurests_ = from.esp_pam_lc_failurests_;
    }
    if (cached_has_bits & 0x00000020u) {
      esp_pam_lc_status_ = from.esp_pam_lc_status_;
    }
    if (cached_has_bits & 0x00000040u) {
      rolling_counter_0x223_ = from.rolling_counter_0x223_;
    }
    if (cached_has_bits & 0x00000080u) {
      esp_vlc_active_ = from.esp_vlc_active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      esp_vlc_available_ = from.esp_vlc_available_;
    }
    if (cached_has_bits & 0x00000200u) {
      esp_vlcapa_available_ = from.esp_vlcapa_available_;
    }
    if (cached_has_bits & 0x00000400u) {
      esp_vlcengtorqreqact_ = from.esp_vlcengtorqreqact_;
    }
    if (cached_has_bits & 0x00000800u) {
      checksum_0x223_ = from.checksum_0x223_;
    }
    if (cached_has_bits & 0x00001000u) {
      esp_vlcengtorqreq_ = from.esp_vlcengtorqreq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esp_vlc_0x223_223::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Esp_vlc_0x223_223)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esp_vlc_0x223_223::CopyFrom(const Esp_vlc_0x223_223& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Esp_vlc_0x223_223)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esp_vlc_0x223_223::IsInitialized() const {
  return true;
}

void Esp_vlc_0x223_223::Swap(Esp_vlc_0x223_223* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esp_vlc_0x223_223::InternalSwap(Esp_vlc_0x223_223* other) {
  std::swap(esp_vlc_internaltargetacce_, other->esp_vlc_internaltargetacce_);
  std::swap(esp_apa_gearboxenable_, other->esp_apa_gearboxenable_);
  std::swap(esp_target_gear_request_, other->esp_target_gear_request_);
  std::swap(esp_vlc_apactive_, other->esp_vlc_apactive_);
  std::swap(esp_pam_lc_failurests_, other->esp_pam_lc_failurests_);
  std::swap(esp_pam_lc_status_, other->esp_pam_lc_status_);
  std::swap(rolling_counter_0x223_, other->rolling_counter_0x223_);
  std::swap(esp_vlc_active_, other->esp_vlc_active_);
  std::swap(esp_vlc_available_, other->esp_vlc_available_);
  std::swap(esp_vlcapa_available_, other->esp_vlcapa_available_);
  std::swap(esp_vlcengtorqreqact_, other->esp_vlcengtorqreqact_);
  std::swap(checksum_0x223_, other->checksum_0x223_);
  std::swap(esp_vlcengtorqreq_, other->esp_vlcengtorqreq_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esp_vlc_0x223_223::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esp_vlc_0x223_223

// optional double esp_vlc_internaltargetacce = 1;
bool Esp_vlc_0x223_223::has_esp_vlc_internaltargetacce() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esp_vlc_0x223_223::set_has_esp_vlc_internaltargetacce() {
  _has_bits_[0] |= 0x00000001u;
}
void Esp_vlc_0x223_223::clear_has_esp_vlc_internaltargetacce() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esp_vlc_0x223_223::clear_esp_vlc_internaltargetacce() {
  esp_vlc_internaltargetacce_ = 0;
  clear_has_esp_vlc_internaltargetacce();
}
double Esp_vlc_0x223_223::esp_vlc_internaltargetacce() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlc_internaltargetacce)
  return esp_vlc_internaltargetacce_;
}
void Esp_vlc_0x223_223::set_esp_vlc_internaltargetacce(double value) {
  set_has_esp_vlc_internaltargetacce();
  esp_vlc_internaltargetacce_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlc_internaltargetacce)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_apa_gearboxenableType esp_apa_gearboxenable = 2;
bool Esp_vlc_0x223_223::has_esp_apa_gearboxenable() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esp_vlc_0x223_223::set_has_esp_apa_gearboxenable() {
  _has_bits_[0] |= 0x00000002u;
}
void Esp_vlc_0x223_223::clear_has_esp_apa_gearboxenable() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esp_vlc_0x223_223::clear_esp_apa_gearboxenable() {
  esp_apa_gearboxenable_ = 0;
  clear_has_esp_apa_gearboxenable();
}
::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_apa_gearboxenableType Esp_vlc_0x223_223::esp_apa_gearboxenable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_apa_gearboxenable)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_apa_gearboxenableType >(esp_apa_gearboxenable_);
}
void Esp_vlc_0x223_223::set_esp_apa_gearboxenable(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_apa_gearboxenableType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_apa_gearboxenableType_IsValid(value));
  set_has_esp_apa_gearboxenable();
  esp_apa_gearboxenable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_apa_gearboxenable)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_target_gear_requestType esp_target_gear_request = 3;
bool Esp_vlc_0x223_223::has_esp_target_gear_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esp_vlc_0x223_223::set_has_esp_target_gear_request() {
  _has_bits_[0] |= 0x00000004u;
}
void Esp_vlc_0x223_223::clear_has_esp_target_gear_request() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esp_vlc_0x223_223::clear_esp_target_gear_request() {
  esp_target_gear_request_ = 0;
  clear_has_esp_target_gear_request();
}
::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_target_gear_requestType Esp_vlc_0x223_223::esp_target_gear_request() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_target_gear_request)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_target_gear_requestType >(esp_target_gear_request_);
}
void Esp_vlc_0x223_223::set_esp_target_gear_request(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_target_gear_requestType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_target_gear_requestType_IsValid(value));
  set_has_esp_target_gear_request();
  esp_target_gear_request_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_target_gear_request)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_apactiveType esp_vlc_apactive = 4;
bool Esp_vlc_0x223_223::has_esp_vlc_apactive() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esp_vlc_0x223_223::set_has_esp_vlc_apactive() {
  _has_bits_[0] |= 0x00000008u;
}
void Esp_vlc_0x223_223::clear_has_esp_vlc_apactive() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esp_vlc_0x223_223::clear_esp_vlc_apactive() {
  esp_vlc_apactive_ = 0;
  clear_has_esp_vlc_apactive();
}
::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_apactiveType Esp_vlc_0x223_223::esp_vlc_apactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlc_apactive)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_apactiveType >(esp_vlc_apactive_);
}
void Esp_vlc_0x223_223::set_esp_vlc_apactive(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_apactiveType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_apactiveType_IsValid(value));
  set_has_esp_vlc_apactive();
  esp_vlc_apactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlc_apactive)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_pam_lc_failurestsType esp_pam_lc_failurests = 5;
bool Esp_vlc_0x223_223::has_esp_pam_lc_failurests() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esp_vlc_0x223_223::set_has_esp_pam_lc_failurests() {
  _has_bits_[0] |= 0x00000010u;
}
void Esp_vlc_0x223_223::clear_has_esp_pam_lc_failurests() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esp_vlc_0x223_223::clear_esp_pam_lc_failurests() {
  esp_pam_lc_failurests_ = 0;
  clear_has_esp_pam_lc_failurests();
}
::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_failurestsType Esp_vlc_0x223_223::esp_pam_lc_failurests() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_pam_lc_failurests)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_failurestsType >(esp_pam_lc_failurests_);
}
void Esp_vlc_0x223_223::set_esp_pam_lc_failurests(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_failurestsType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_failurestsType_IsValid(value));
  set_has_esp_pam_lc_failurests();
  esp_pam_lc_failurests_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_pam_lc_failurests)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_pam_lc_statusType esp_pam_lc_status = 6;
bool Esp_vlc_0x223_223::has_esp_pam_lc_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Esp_vlc_0x223_223::set_has_esp_pam_lc_status() {
  _has_bits_[0] |= 0x00000020u;
}
void Esp_vlc_0x223_223::clear_has_esp_pam_lc_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void Esp_vlc_0x223_223::clear_esp_pam_lc_status() {
  esp_pam_lc_status_ = 0;
  clear_has_esp_pam_lc_status();
}
::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_statusType Esp_vlc_0x223_223::esp_pam_lc_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_pam_lc_status)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_statusType >(esp_pam_lc_status_);
}
void Esp_vlc_0x223_223::set_esp_pam_lc_status(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_statusType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_pam_lc_statusType_IsValid(value));
  set_has_esp_pam_lc_status();
  esp_pam_lc_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_pam_lc_status)
}

// optional int32 rolling_counter_0x223 = 7;
bool Esp_vlc_0x223_223::has_rolling_counter_0x223() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Esp_vlc_0x223_223::set_has_rolling_counter_0x223() {
  _has_bits_[0] |= 0x00000040u;
}
void Esp_vlc_0x223_223::clear_has_rolling_counter_0x223() {
  _has_bits_[0] &= ~0x00000040u;
}
void Esp_vlc_0x223_223::clear_rolling_counter_0x223() {
  rolling_counter_0x223_ = 0;
  clear_has_rolling_counter_0x223();
}
::google::protobuf::int32 Esp_vlc_0x223_223::rolling_counter_0x223() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.rolling_counter_0x223)
  return rolling_counter_0x223_;
}
void Esp_vlc_0x223_223::set_rolling_counter_0x223(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x223();
  rolling_counter_0x223_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.rolling_counter_0x223)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_activeType esp_vlc_active = 8;
bool Esp_vlc_0x223_223::has_esp_vlc_active() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Esp_vlc_0x223_223::set_has_esp_vlc_active() {
  _has_bits_[0] |= 0x00000080u;
}
void Esp_vlc_0x223_223::clear_has_esp_vlc_active() {
  _has_bits_[0] &= ~0x00000080u;
}
void Esp_vlc_0x223_223::clear_esp_vlc_active() {
  esp_vlc_active_ = 0;
  clear_has_esp_vlc_active();
}
::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_activeType Esp_vlc_0x223_223::esp_vlc_active() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlc_active)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_activeType >(esp_vlc_active_);
}
void Esp_vlc_0x223_223::set_esp_vlc_active(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_activeType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_activeType_IsValid(value));
  set_has_esp_vlc_active();
  esp_vlc_active_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlc_active)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlc_availableType esp_vlc_available = 9;
bool Esp_vlc_0x223_223::has_esp_vlc_available() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Esp_vlc_0x223_223::set_has_esp_vlc_available() {
  _has_bits_[0] |= 0x00000100u;
}
void Esp_vlc_0x223_223::clear_has_esp_vlc_available() {
  _has_bits_[0] &= ~0x00000100u;
}
void Esp_vlc_0x223_223::clear_esp_vlc_available() {
  esp_vlc_available_ = 0;
  clear_has_esp_vlc_available();
}
::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_availableType Esp_vlc_0x223_223::esp_vlc_available() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlc_available)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_availableType >(esp_vlc_available_);
}
void Esp_vlc_0x223_223::set_esp_vlc_available(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_availableType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlc_availableType_IsValid(value));
  set_has_esp_vlc_available();
  esp_vlc_available_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlc_available)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlcapa_availableType esp_vlcapa_available = 10;
bool Esp_vlc_0x223_223::has_esp_vlcapa_available() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Esp_vlc_0x223_223::set_has_esp_vlcapa_available() {
  _has_bits_[0] |= 0x00000200u;
}
void Esp_vlc_0x223_223::clear_has_esp_vlcapa_available() {
  _has_bits_[0] &= ~0x00000200u;
}
void Esp_vlc_0x223_223::clear_esp_vlcapa_available() {
  esp_vlcapa_available_ = 0;
  clear_has_esp_vlcapa_available();
}
::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcapa_availableType Esp_vlc_0x223_223::esp_vlcapa_available() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlcapa_available)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcapa_availableType >(esp_vlcapa_available_);
}
void Esp_vlc_0x223_223::set_esp_vlcapa_available(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcapa_availableType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcapa_availableType_IsValid(value));
  set_has_esp_vlcapa_available();
  esp_vlcapa_available_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlcapa_available)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223.Esp_vlcengtorqreqactType esp_vlcengtorqreqact = 11;
bool Esp_vlc_0x223_223::has_esp_vlcengtorqreqact() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Esp_vlc_0x223_223::set_has_esp_vlcengtorqreqact() {
  _has_bits_[0] |= 0x00000400u;
}
void Esp_vlc_0x223_223::clear_has_esp_vlcengtorqreqact() {
  _has_bits_[0] &= ~0x00000400u;
}
void Esp_vlc_0x223_223::clear_esp_vlcengtorqreqact() {
  esp_vlcengtorqreqact_ = 0;
  clear_has_esp_vlcengtorqreqact();
}
::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcengtorqreqactType Esp_vlc_0x223_223::esp_vlcengtorqreqact() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlcengtorqreqact)
  return static_cast< ::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcengtorqreqactType >(esp_vlcengtorqreqact_);
}
void Esp_vlc_0x223_223::set_esp_vlcengtorqreqact(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcengtorqreqactType value) {
  assert(::jmc_auto::canbus::Esp_vlc_0x223_223_Esp_vlcengtorqreqactType_IsValid(value));
  set_has_esp_vlcengtorqreqact();
  esp_vlcengtorqreqact_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlcengtorqreqact)
}

// optional int32 checksum_0x223 = 12;
bool Esp_vlc_0x223_223::has_checksum_0x223() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Esp_vlc_0x223_223::set_has_checksum_0x223() {
  _has_bits_[0] |= 0x00000800u;
}
void Esp_vlc_0x223_223::clear_has_checksum_0x223() {
  _has_bits_[0] &= ~0x00000800u;
}
void Esp_vlc_0x223_223::clear_checksum_0x223() {
  checksum_0x223_ = 0;
  clear_has_checksum_0x223();
}
::google::protobuf::int32 Esp_vlc_0x223_223::checksum_0x223() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.checksum_0x223)
  return checksum_0x223_;
}
void Esp_vlc_0x223_223::set_checksum_0x223(::google::protobuf::int32 value) {
  set_has_checksum_0x223();
  checksum_0x223_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.checksum_0x223)
}

// optional int32 esp_vlcengtorqreq = 13;
bool Esp_vlc_0x223_223::has_esp_vlcengtorqreq() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Esp_vlc_0x223_223::set_has_esp_vlcengtorqreq() {
  _has_bits_[0] |= 0x00001000u;
}
void Esp_vlc_0x223_223::clear_has_esp_vlcengtorqreq() {
  _has_bits_[0] &= ~0x00001000u;
}
void Esp_vlc_0x223_223::clear_esp_vlcengtorqreq() {
  esp_vlcengtorqreq_ = 0;
  clear_has_esp_vlcengtorqreq();
}
::google::protobuf::int32 Esp_vlc_0x223_223::esp_vlcengtorqreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlcengtorqreq)
  return esp_vlcengtorqreq_;
}
void Esp_vlc_0x223_223::set_esp_vlcengtorqreq(::google::protobuf::int32 value) {
  set_has_esp_vlcengtorqreq();
  esp_vlcengtorqreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_vlc_0x223_223.esp_vlcengtorqreq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gw_ems_whltq_0x107_107::kMinindicatedtorqwhlFieldNumber;
const int Gw_ems_whltq_0x107_107::kEmsAccrawpedalratioFieldNumber;
const int Gw_ems_whltq_0x107_107::kEmsAccpedalratioFieldNumber;
const int Gw_ems_whltq_0x107_107::kDcmEmsRollingcounter0X107FieldNumber;
const int Gw_ems_whltq_0x107_107::kEmsKickdownFieldNumber;
const int Gw_ems_whltq_0x107_107::kEmsAccpedalratioerrorFieldNumber;
const int Gw_ems_whltq_0x107_107::kEmsBrkpedalstasusFieldNumber;
const int Gw_ems_whltq_0x107_107::kDcmEmsChecksum0X107FieldNumber;
const int Gw_ems_whltq_0x107_107::kMaxindicatedtorqwhlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gw_ems_whltq_0x107_107::Gw_ems_whltq_0x107_107()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
}
Gw_ems_whltq_0x107_107::Gw_ems_whltq_0x107_107(const Gw_ems_whltq_0x107_107& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ems_accrawpedalratio_, &from.ems_accrawpedalratio_,
    reinterpret_cast<char*>(&maxindicatedtorqwhl_) -
    reinterpret_cast<char*>(&ems_accrawpedalratio_) + sizeof(maxindicatedtorqwhl_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
}

void Gw_ems_whltq_0x107_107::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ems_accrawpedalratio_, 0, reinterpret_cast<char*>(&maxindicatedtorqwhl_) -
    reinterpret_cast<char*>(&ems_accrawpedalratio_) + sizeof(maxindicatedtorqwhl_));
}

Gw_ems_whltq_0x107_107::~Gw_ems_whltq_0x107_107() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
  SharedDtor();
}

void Gw_ems_whltq_0x107_107::SharedDtor() {
}

void Gw_ems_whltq_0x107_107::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gw_ems_whltq_0x107_107::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gw_ems_whltq_0x107_107& Gw_ems_whltq_0x107_107::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gw_ems_whltq_0x107_107* Gw_ems_whltq_0x107_107::New(::google::protobuf::Arena* arena) const {
  Gw_ems_whltq_0x107_107* n = new Gw_ems_whltq_0x107_107;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gw_ems_whltq_0x107_107::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&ems_accrawpedalratio_, 0, reinterpret_cast<char*>(&dcm_ems_checksum_0x107_) -
      reinterpret_cast<char*>(&ems_accrawpedalratio_) + sizeof(dcm_ems_checksum_0x107_));
  }
  maxindicatedtorqwhl_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gw_ems_whltq_0x107_107::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 minindicatedtorqwhl = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_minindicatedtorqwhl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minindicatedtorqwhl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ems_accrawpedalratio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_ems_accrawpedalratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ems_accrawpedalratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ems_accpedalratio = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_ems_accpedalratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ems_accpedalratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dcm_ems_rollingcounter_0x107 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_dcm_ems_rollingcounter_0x107();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dcm_ems_rollingcounter_0x107_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_kickdownType ems_kickdown = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_kickdownType_IsValid(value)) {
            set_ems_kickdown(static_cast< ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_kickdownType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_accpedalratioerrorType ems_accpedalratioerror = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_IsValid(value)) {
            set_ems_accpedalratioerror(static_cast< ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_brkpedalstasusType ems_brkpedalstasus = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_IsValid(value)) {
            set_ems_brkpedalstasus(static_cast< ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dcm_ems_checksum_0x107 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_dcm_ems_checksum_0x107();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dcm_ems_checksum_0x107_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maxindicatedtorqwhl = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_maxindicatedtorqwhl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxindicatedtorqwhl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
  return false;
#undef DO_
}

void Gw_ems_whltq_0x107_107::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 minindicatedtorqwhl = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->minindicatedtorqwhl(), output);
  }

  // optional double ems_accrawpedalratio = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ems_accrawpedalratio(), output);
  }

  // optional double ems_accpedalratio = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ems_accpedalratio(), output);
  }

  // optional int32 dcm_ems_rollingcounter_0x107 = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dcm_ems_rollingcounter_0x107(), output);
  }

  // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_kickdownType ems_kickdown = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ems_kickdown(), output);
  }

  // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_accpedalratioerrorType ems_accpedalratioerror = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->ems_accpedalratioerror(), output);
  }

  // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_brkpedalstasusType ems_brkpedalstasus = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->ems_brkpedalstasus(), output);
  }

  // optional int32 dcm_ems_checksum_0x107 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dcm_ems_checksum_0x107(), output);
  }

  // optional int32 maxindicatedtorqwhl = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->maxindicatedtorqwhl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
}

::google::protobuf::uint8* Gw_ems_whltq_0x107_107::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 minindicatedtorqwhl = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->minindicatedtorqwhl(), target);
  }

  // optional double ems_accrawpedalratio = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ems_accrawpedalratio(), target);
  }

  // optional double ems_accpedalratio = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ems_accpedalratio(), target);
  }

  // optional int32 dcm_ems_rollingcounter_0x107 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dcm_ems_rollingcounter_0x107(), target);
  }

  // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_kickdownType ems_kickdown = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ems_kickdown(), target);
  }

  // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_accpedalratioerrorType ems_accpedalratioerror = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->ems_accpedalratioerror(), target);
  }

  // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_brkpedalstasusType ems_brkpedalstasus = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->ems_brkpedalstasus(), target);
  }

  // optional int32 dcm_ems_checksum_0x107 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dcm_ems_checksum_0x107(), target);
  }

  // optional int32 maxindicatedtorqwhl = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->maxindicatedtorqwhl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
  return target;
}

size_t Gw_ems_whltq_0x107_107::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double ems_accrawpedalratio = 2;
    if (has_ems_accrawpedalratio()) {
      total_size += 1 + 8;
    }

    // optional int32 minindicatedtorqwhl = 1;
    if (has_minindicatedtorqwhl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minindicatedtorqwhl());
    }

    // optional int32 dcm_ems_rollingcounter_0x107 = 4;
    if (has_dcm_ems_rollingcounter_0x107()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dcm_ems_rollingcounter_0x107());
    }

    // optional double ems_accpedalratio = 3;
    if (has_ems_accpedalratio()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_kickdownType ems_kickdown = 5;
    if (has_ems_kickdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ems_kickdown());
    }

    // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_accpedalratioerrorType ems_accpedalratioerror = 6;
    if (has_ems_accpedalratioerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ems_accpedalratioerror());
    }

    // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_brkpedalstasusType ems_brkpedalstasus = 7;
    if (has_ems_brkpedalstasus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ems_brkpedalstasus());
    }

    // optional int32 dcm_ems_checksum_0x107 = 8;
    if (has_dcm_ems_checksum_0x107()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dcm_ems_checksum_0x107());
    }

  }
  // optional int32 maxindicatedtorqwhl = 9;
  if (has_maxindicatedtorqwhl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxindicatedtorqwhl());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gw_ems_whltq_0x107_107::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
  GOOGLE_DCHECK_NE(&from, this);
  const Gw_ems_whltq_0x107_107* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gw_ems_whltq_0x107_107>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
    MergeFrom(*source);
  }
}

void Gw_ems_whltq_0x107_107::MergeFrom(const Gw_ems_whltq_0x107_107& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      ems_accrawpedalratio_ = from.ems_accrawpedalratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      minindicatedtorqwhl_ = from.minindicatedtorqwhl_;
    }
    if (cached_has_bits & 0x00000004u) {
      dcm_ems_rollingcounter_0x107_ = from.dcm_ems_rollingcounter_0x107_;
    }
    if (cached_has_bits & 0x00000008u) {
      ems_accpedalratio_ = from.ems_accpedalratio_;
    }
    if (cached_has_bits & 0x00000010u) {
      ems_kickdown_ = from.ems_kickdown_;
    }
    if (cached_has_bits & 0x00000020u) {
      ems_accpedalratioerror_ = from.ems_accpedalratioerror_;
    }
    if (cached_has_bits & 0x00000040u) {
      ems_brkpedalstasus_ = from.ems_brkpedalstasus_;
    }
    if (cached_has_bits & 0x00000080u) {
      dcm_ems_checksum_0x107_ = from.dcm_ems_checksum_0x107_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_maxindicatedtorqwhl(from.maxindicatedtorqwhl());
  }
}

void Gw_ems_whltq_0x107_107::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gw_ems_whltq_0x107_107::CopyFrom(const Gw_ems_whltq_0x107_107& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gw_ems_whltq_0x107_107)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gw_ems_whltq_0x107_107::IsInitialized() const {
  return true;
}

void Gw_ems_whltq_0x107_107::Swap(Gw_ems_whltq_0x107_107* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gw_ems_whltq_0x107_107::InternalSwap(Gw_ems_whltq_0x107_107* other) {
  std::swap(ems_accrawpedalratio_, other->ems_accrawpedalratio_);
  std::swap(minindicatedtorqwhl_, other->minindicatedtorqwhl_);
  std::swap(dcm_ems_rollingcounter_0x107_, other->dcm_ems_rollingcounter_0x107_);
  std::swap(ems_accpedalratio_, other->ems_accpedalratio_);
  std::swap(ems_kickdown_, other->ems_kickdown_);
  std::swap(ems_accpedalratioerror_, other->ems_accpedalratioerror_);
  std::swap(ems_brkpedalstasus_, other->ems_brkpedalstasus_);
  std::swap(dcm_ems_checksum_0x107_, other->dcm_ems_checksum_0x107_);
  std::swap(maxindicatedtorqwhl_, other->maxindicatedtorqwhl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gw_ems_whltq_0x107_107::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gw_ems_whltq_0x107_107

// optional int32 minindicatedtorqwhl = 1;
bool Gw_ems_whltq_0x107_107::has_minindicatedtorqwhl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gw_ems_whltq_0x107_107::set_has_minindicatedtorqwhl() {
  _has_bits_[0] |= 0x00000002u;
}
void Gw_ems_whltq_0x107_107::clear_has_minindicatedtorqwhl() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gw_ems_whltq_0x107_107::clear_minindicatedtorqwhl() {
  minindicatedtorqwhl_ = 0;
  clear_has_minindicatedtorqwhl();
}
::google::protobuf::int32 Gw_ems_whltq_0x107_107::minindicatedtorqwhl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.minindicatedtorqwhl)
  return minindicatedtorqwhl_;
}
void Gw_ems_whltq_0x107_107::set_minindicatedtorqwhl(::google::protobuf::int32 value) {
  set_has_minindicatedtorqwhl();
  minindicatedtorqwhl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.minindicatedtorqwhl)
}

// optional double ems_accrawpedalratio = 2;
bool Gw_ems_whltq_0x107_107::has_ems_accrawpedalratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gw_ems_whltq_0x107_107::set_has_ems_accrawpedalratio() {
  _has_bits_[0] |= 0x00000001u;
}
void Gw_ems_whltq_0x107_107::clear_has_ems_accrawpedalratio() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gw_ems_whltq_0x107_107::clear_ems_accrawpedalratio() {
  ems_accrawpedalratio_ = 0;
  clear_has_ems_accrawpedalratio();
}
double Gw_ems_whltq_0x107_107::ems_accrawpedalratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_accrawpedalratio)
  return ems_accrawpedalratio_;
}
void Gw_ems_whltq_0x107_107::set_ems_accrawpedalratio(double value) {
  set_has_ems_accrawpedalratio();
  ems_accrawpedalratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_accrawpedalratio)
}

// optional double ems_accpedalratio = 3;
bool Gw_ems_whltq_0x107_107::has_ems_accpedalratio() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gw_ems_whltq_0x107_107::set_has_ems_accpedalratio() {
  _has_bits_[0] |= 0x00000008u;
}
void Gw_ems_whltq_0x107_107::clear_has_ems_accpedalratio() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gw_ems_whltq_0x107_107::clear_ems_accpedalratio() {
  ems_accpedalratio_ = 0;
  clear_has_ems_accpedalratio();
}
double Gw_ems_whltq_0x107_107::ems_accpedalratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_accpedalratio)
  return ems_accpedalratio_;
}
void Gw_ems_whltq_0x107_107::set_ems_accpedalratio(double value) {
  set_has_ems_accpedalratio();
  ems_accpedalratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_accpedalratio)
}

// optional int32 dcm_ems_rollingcounter_0x107 = 4;
bool Gw_ems_whltq_0x107_107::has_dcm_ems_rollingcounter_0x107() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gw_ems_whltq_0x107_107::set_has_dcm_ems_rollingcounter_0x107() {
  _has_bits_[0] |= 0x00000004u;
}
void Gw_ems_whltq_0x107_107::clear_has_dcm_ems_rollingcounter_0x107() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gw_ems_whltq_0x107_107::clear_dcm_ems_rollingcounter_0x107() {
  dcm_ems_rollingcounter_0x107_ = 0;
  clear_has_dcm_ems_rollingcounter_0x107();
}
::google::protobuf::int32 Gw_ems_whltq_0x107_107::dcm_ems_rollingcounter_0x107() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.dcm_ems_rollingcounter_0x107)
  return dcm_ems_rollingcounter_0x107_;
}
void Gw_ems_whltq_0x107_107::set_dcm_ems_rollingcounter_0x107(::google::protobuf::int32 value) {
  set_has_dcm_ems_rollingcounter_0x107();
  dcm_ems_rollingcounter_0x107_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.dcm_ems_rollingcounter_0x107)
}

// optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_kickdownType ems_kickdown = 5;
bool Gw_ems_whltq_0x107_107::has_ems_kickdown() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gw_ems_whltq_0x107_107::set_has_ems_kickdown() {
  _has_bits_[0] |= 0x00000010u;
}
void Gw_ems_whltq_0x107_107::clear_has_ems_kickdown() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gw_ems_whltq_0x107_107::clear_ems_kickdown() {
  ems_kickdown_ = 0;
  clear_has_ems_kickdown();
}
::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_kickdownType Gw_ems_whltq_0x107_107::ems_kickdown() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_kickdown)
  return static_cast< ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_kickdownType >(ems_kickdown_);
}
void Gw_ems_whltq_0x107_107::set_ems_kickdown(::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_kickdownType value) {
  assert(::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_kickdownType_IsValid(value));
  set_has_ems_kickdown();
  ems_kickdown_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_kickdown)
}

// optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_accpedalratioerrorType ems_accpedalratioerror = 6;
bool Gw_ems_whltq_0x107_107::has_ems_accpedalratioerror() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gw_ems_whltq_0x107_107::set_has_ems_accpedalratioerror() {
  _has_bits_[0] |= 0x00000020u;
}
void Gw_ems_whltq_0x107_107::clear_has_ems_accpedalratioerror() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gw_ems_whltq_0x107_107::clear_ems_accpedalratioerror() {
  ems_accpedalratioerror_ = 0;
  clear_has_ems_accpedalratioerror();
}
::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType Gw_ems_whltq_0x107_107::ems_accpedalratioerror() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_accpedalratioerror)
  return static_cast< ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType >(ems_accpedalratioerror_);
}
void Gw_ems_whltq_0x107_107::set_ems_accpedalratioerror(::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType value) {
  assert(::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_accpedalratioerrorType_IsValid(value));
  set_has_ems_accpedalratioerror();
  ems_accpedalratioerror_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_accpedalratioerror)
}

// optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107.Ems_brkpedalstasusType ems_brkpedalstasus = 7;
bool Gw_ems_whltq_0x107_107::has_ems_brkpedalstasus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Gw_ems_whltq_0x107_107::set_has_ems_brkpedalstasus() {
  _has_bits_[0] |= 0x00000040u;
}
void Gw_ems_whltq_0x107_107::clear_has_ems_brkpedalstasus() {
  _has_bits_[0] &= ~0x00000040u;
}
void Gw_ems_whltq_0x107_107::clear_ems_brkpedalstasus() {
  ems_brkpedalstasus_ = 0;
  clear_has_ems_brkpedalstasus();
}
::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType Gw_ems_whltq_0x107_107::ems_brkpedalstasus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_brkpedalstasus)
  return static_cast< ::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType >(ems_brkpedalstasus_);
}
void Gw_ems_whltq_0x107_107::set_ems_brkpedalstasus(::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType value) {
  assert(::jmc_auto::canbus::Gw_ems_whltq_0x107_107_Ems_brkpedalstasusType_IsValid(value));
  set_has_ems_brkpedalstasus();
  ems_brkpedalstasus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.ems_brkpedalstasus)
}

// optional int32 dcm_ems_checksum_0x107 = 8;
bool Gw_ems_whltq_0x107_107::has_dcm_ems_checksum_0x107() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Gw_ems_whltq_0x107_107::set_has_dcm_ems_checksum_0x107() {
  _has_bits_[0] |= 0x00000080u;
}
void Gw_ems_whltq_0x107_107::clear_has_dcm_ems_checksum_0x107() {
  _has_bits_[0] &= ~0x00000080u;
}
void Gw_ems_whltq_0x107_107::clear_dcm_ems_checksum_0x107() {
  dcm_ems_checksum_0x107_ = 0;
  clear_has_dcm_ems_checksum_0x107();
}
::google::protobuf::int32 Gw_ems_whltq_0x107_107::dcm_ems_checksum_0x107() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.dcm_ems_checksum_0x107)
  return dcm_ems_checksum_0x107_;
}
void Gw_ems_whltq_0x107_107::set_dcm_ems_checksum_0x107(::google::protobuf::int32 value) {
  set_has_dcm_ems_checksum_0x107();
  dcm_ems_checksum_0x107_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.dcm_ems_checksum_0x107)
}

// optional int32 maxindicatedtorqwhl = 9;
bool Gw_ems_whltq_0x107_107::has_maxindicatedtorqwhl() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Gw_ems_whltq_0x107_107::set_has_maxindicatedtorqwhl() {
  _has_bits_[0] |= 0x00000100u;
}
void Gw_ems_whltq_0x107_107::clear_has_maxindicatedtorqwhl() {
  _has_bits_[0] &= ~0x00000100u;
}
void Gw_ems_whltq_0x107_107::clear_maxindicatedtorqwhl() {
  maxindicatedtorqwhl_ = 0;
  clear_has_maxindicatedtorqwhl();
}
::google::protobuf::int32 Gw_ems_whltq_0x107_107::maxindicatedtorqwhl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ems_whltq_0x107_107.maxindicatedtorqwhl)
  return maxindicatedtorqwhl_;
}
void Gw_ems_whltq_0x107_107::set_maxindicatedtorqwhl(::google::protobuf::int32 value) {
  set_has_maxindicatedtorqwhl();
  maxindicatedtorqwhl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ems_whltq_0x107_107.maxindicatedtorqwhl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Abs_sts_0x221_221::kAbsWhlmilgfrntriFieldNumber;
const int Abs_sts_0x221_221::kAbsVehspdlgtFieldNumber;
const int Abs_sts_0x221_221::kAbsVehspddirectionFieldNumber;
const int Abs_sts_0x221_221::kAbsEbdflgfltFieldNumber;
const int Abs_sts_0x221_221::kAbsAbsflgfltFieldNumber;
const int Abs_sts_0x221_221::kAbsAbsctrlactvFieldNumber;
const int Abs_sts_0x221_221::kRollingcounter0X221FieldNumber;
const int Abs_sts_0x221_221::kAbsWhlmilgfrntlestatusFieldNumber;
const int Abs_sts_0x221_221::kAbsWhlmilgfrntristatusFieldNumber;
const int Abs_sts_0x221_221::kAbsVehspdlgtstatusFieldNumber;
const int Abs_sts_0x221_221::kChecksum0X221FieldNumber;
const int Abs_sts_0x221_221::kAbsWhlmilgfrntleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Abs_sts_0x221_221::Abs_sts_0x221_221()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Abs_sts_0x221_221)
}
Abs_sts_0x221_221::Abs_sts_0x221_221(const Abs_sts_0x221_221& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&abs_vehspdlgt_, &from.abs_vehspdlgt_,
    reinterpret_cast<char*>(&abs_whlmilgfrntle_) -
    reinterpret_cast<char*>(&abs_vehspdlgt_) + sizeof(abs_whlmilgfrntle_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Abs_sts_0x221_221)
}

void Abs_sts_0x221_221::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&abs_vehspdlgt_, 0, reinterpret_cast<char*>(&abs_whlmilgfrntle_) -
    reinterpret_cast<char*>(&abs_vehspdlgt_) + sizeof(abs_whlmilgfrntle_));
}

Abs_sts_0x221_221::~Abs_sts_0x221_221() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Abs_sts_0x221_221)
  SharedDtor();
}

void Abs_sts_0x221_221::SharedDtor() {
}

void Abs_sts_0x221_221::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Abs_sts_0x221_221::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Abs_sts_0x221_221& Abs_sts_0x221_221::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Abs_sts_0x221_221* Abs_sts_0x221_221::New(::google::protobuf::Arena* arena) const {
  Abs_sts_0x221_221* n = new Abs_sts_0x221_221;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Abs_sts_0x221_221::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Abs_sts_0x221_221)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&abs_vehspdlgt_, 0, reinterpret_cast<char*>(&abs_whlmilgfrntlestatus_) -
      reinterpret_cast<char*>(&abs_vehspdlgt_) + sizeof(abs_whlmilgfrntlestatus_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&abs_whlmilgfrntristatus_, 0, reinterpret_cast<char*>(&abs_whlmilgfrntle_) -
      reinterpret_cast<char*>(&abs_whlmilgfrntristatus_) + sizeof(abs_whlmilgfrntle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Abs_sts_0x221_221::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Abs_sts_0x221_221)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 abs_whlmilgfrntri = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_abs_whlmilgfrntri();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abs_whlmilgfrntri_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double abs_vehspdlgt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_abs_vehspdlgt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &abs_vehspdlgt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_vehspddirectionType abs_vehspddirection = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspddirectionType_IsValid(value)) {
            set_abs_vehspddirection(static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspddirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_ebdflgfltType abs_ebdflgflt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Abs_sts_0x221_221_Abs_ebdflgfltType_IsValid(value)) {
            set_abs_ebdflgflt(static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_ebdflgfltType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_absflgfltType abs_absflgflt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absflgfltType_IsValid(value)) {
            set_abs_absflgflt(static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absflgfltType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_absctrlactvType abs_absctrlactv = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absctrlactvType_IsValid(value)) {
            set_abs_absctrlactv(static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absctrlactvType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rollingcounter_0x221 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_rollingcounter_0x221();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rollingcounter_0x221_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_whlmilgfrntlestatusType abs_whlmilgfrntlestatus = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_IsValid(value)) {
            set_abs_whlmilgfrntlestatus(static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_whlmilgfrntristatusType abs_whlmilgfrntristatus = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_IsValid(value)) {
            set_abs_whlmilgfrntristatus(static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntristatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_vehspdlgtstatusType abs_vehspdlgtstatus = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspdlgtstatusType_IsValid(value)) {
            set_abs_vehspdlgtstatus(static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspdlgtstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x221 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_checksum_0x221();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x221_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 abs_whlmilgfrntle = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_abs_whlmilgfrntle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abs_whlmilgfrntle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Abs_sts_0x221_221)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Abs_sts_0x221_221)
  return false;
#undef DO_
}

void Abs_sts_0x221_221::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Abs_sts_0x221_221)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 abs_whlmilgfrntri = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->abs_whlmilgfrntri(), output);
  }

  // optional double abs_vehspdlgt = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->abs_vehspdlgt(), output);
  }

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_vehspddirectionType abs_vehspddirection = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->abs_vehspddirection(), output);
  }

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_ebdflgfltType abs_ebdflgflt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->abs_ebdflgflt(), output);
  }

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_absflgfltType abs_absflgflt = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->abs_absflgflt(), output);
  }

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_absctrlactvType abs_absctrlactv = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->abs_absctrlactv(), output);
  }

  // optional int32 rollingcounter_0x221 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rollingcounter_0x221(), output);
  }

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_whlmilgfrntlestatusType abs_whlmilgfrntlestatus = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->abs_whlmilgfrntlestatus(), output);
  }

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_whlmilgfrntristatusType abs_whlmilgfrntristatus = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->abs_whlmilgfrntristatus(), output);
  }

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_vehspdlgtstatusType abs_vehspdlgtstatus = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->abs_vehspdlgtstatus(), output);
  }

  // optional int32 checksum_0x221 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->checksum_0x221(), output);
  }

  // optional int32 abs_whlmilgfrntle = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->abs_whlmilgfrntle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Abs_sts_0x221_221)
}

::google::protobuf::uint8* Abs_sts_0x221_221::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Abs_sts_0x221_221)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 abs_whlmilgfrntri = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->abs_whlmilgfrntri(), target);
  }

  // optional double abs_vehspdlgt = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->abs_vehspdlgt(), target);
  }

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_vehspddirectionType abs_vehspddirection = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->abs_vehspddirection(), target);
  }

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_ebdflgfltType abs_ebdflgflt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->abs_ebdflgflt(), target);
  }

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_absflgfltType abs_absflgflt = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->abs_absflgflt(), target);
  }

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_absctrlactvType abs_absctrlactv = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->abs_absctrlactv(), target);
  }

  // optional int32 rollingcounter_0x221 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rollingcounter_0x221(), target);
  }

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_whlmilgfrntlestatusType abs_whlmilgfrntlestatus = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->abs_whlmilgfrntlestatus(), target);
  }

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_whlmilgfrntristatusType abs_whlmilgfrntristatus = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->abs_whlmilgfrntristatus(), target);
  }

  // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_vehspdlgtstatusType abs_vehspdlgtstatus = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->abs_vehspdlgtstatus(), target);
  }

  // optional int32 checksum_0x221 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->checksum_0x221(), target);
  }

  // optional int32 abs_whlmilgfrntle = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->abs_whlmilgfrntle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Abs_sts_0x221_221)
  return target;
}

size_t Abs_sts_0x221_221::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Abs_sts_0x221_221)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double abs_vehspdlgt = 2;
    if (has_abs_vehspdlgt()) {
      total_size += 1 + 8;
    }

    // optional int32 abs_whlmilgfrntri = 1;
    if (has_abs_whlmilgfrntri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->abs_whlmilgfrntri());
    }

    // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_vehspddirectionType abs_vehspddirection = 3;
    if (has_abs_vehspddirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->abs_vehspddirection());
    }

    // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_ebdflgfltType abs_ebdflgflt = 4;
    if (has_abs_ebdflgflt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->abs_ebdflgflt());
    }

    // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_absflgfltType abs_absflgflt = 5;
    if (has_abs_absflgflt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->abs_absflgflt());
    }

    // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_absctrlactvType abs_absctrlactv = 6;
    if (has_abs_absctrlactv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->abs_absctrlactv());
    }

    // optional int32 rollingcounter_0x221 = 7;
    if (has_rollingcounter_0x221()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rollingcounter_0x221());
    }

    // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_whlmilgfrntlestatusType abs_whlmilgfrntlestatus = 8;
    if (has_abs_whlmilgfrntlestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->abs_whlmilgfrntlestatus());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_whlmilgfrntristatusType abs_whlmilgfrntristatus = 9;
    if (has_abs_whlmilgfrntristatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->abs_whlmilgfrntristatus());
    }

    // optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_vehspdlgtstatusType abs_vehspdlgtstatus = 10;
    if (has_abs_vehspdlgtstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->abs_vehspdlgtstatus());
    }

    // optional int32 checksum_0x221 = 11;
    if (has_checksum_0x221()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x221());
    }

    // optional int32 abs_whlmilgfrntle = 12;
    if (has_abs_whlmilgfrntle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->abs_whlmilgfrntle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Abs_sts_0x221_221::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Abs_sts_0x221_221)
  GOOGLE_DCHECK_NE(&from, this);
  const Abs_sts_0x221_221* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Abs_sts_0x221_221>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Abs_sts_0x221_221)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Abs_sts_0x221_221)
    MergeFrom(*source);
  }
}

void Abs_sts_0x221_221::MergeFrom(const Abs_sts_0x221_221& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Abs_sts_0x221_221)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      abs_vehspdlgt_ = from.abs_vehspdlgt_;
    }
    if (cached_has_bits & 0x00000002u) {
      abs_whlmilgfrntri_ = from.abs_whlmilgfrntri_;
    }
    if (cached_has_bits & 0x00000004u) {
      abs_vehspddirection_ = from.abs_vehspddirection_;
    }
    if (cached_has_bits & 0x00000008u) {
      abs_ebdflgflt_ = from.abs_ebdflgflt_;
    }
    if (cached_has_bits & 0x00000010u) {
      abs_absflgflt_ = from.abs_absflgflt_;
    }
    if (cached_has_bits & 0x00000020u) {
      abs_absctrlactv_ = from.abs_absctrlactv_;
    }
    if (cached_has_bits & 0x00000040u) {
      rollingcounter_0x221_ = from.rollingcounter_0x221_;
    }
    if (cached_has_bits & 0x00000080u) {
      abs_whlmilgfrntlestatus_ = from.abs_whlmilgfrntlestatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      abs_whlmilgfrntristatus_ = from.abs_whlmilgfrntristatus_;
    }
    if (cached_has_bits & 0x00000200u) {
      abs_vehspdlgtstatus_ = from.abs_vehspdlgtstatus_;
    }
    if (cached_has_bits & 0x00000400u) {
      checksum_0x221_ = from.checksum_0x221_;
    }
    if (cached_has_bits & 0x00000800u) {
      abs_whlmilgfrntle_ = from.abs_whlmilgfrntle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Abs_sts_0x221_221::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Abs_sts_0x221_221)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Abs_sts_0x221_221::CopyFrom(const Abs_sts_0x221_221& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Abs_sts_0x221_221)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Abs_sts_0x221_221::IsInitialized() const {
  return true;
}

void Abs_sts_0x221_221::Swap(Abs_sts_0x221_221* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Abs_sts_0x221_221::InternalSwap(Abs_sts_0x221_221* other) {
  std::swap(abs_vehspdlgt_, other->abs_vehspdlgt_);
  std::swap(abs_whlmilgfrntri_, other->abs_whlmilgfrntri_);
  std::swap(abs_vehspddirection_, other->abs_vehspddirection_);
  std::swap(abs_ebdflgflt_, other->abs_ebdflgflt_);
  std::swap(abs_absflgflt_, other->abs_absflgflt_);
  std::swap(abs_absctrlactv_, other->abs_absctrlactv_);
  std::swap(rollingcounter_0x221_, other->rollingcounter_0x221_);
  std::swap(abs_whlmilgfrntlestatus_, other->abs_whlmilgfrntlestatus_);
  std::swap(abs_whlmilgfrntristatus_, other->abs_whlmilgfrntristatus_);
  std::swap(abs_vehspdlgtstatus_, other->abs_vehspdlgtstatus_);
  std::swap(checksum_0x221_, other->checksum_0x221_);
  std::swap(abs_whlmilgfrntle_, other->abs_whlmilgfrntle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Abs_sts_0x221_221::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Abs_sts_0x221_221

// optional int32 abs_whlmilgfrntri = 1;
bool Abs_sts_0x221_221::has_abs_whlmilgfrntri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Abs_sts_0x221_221::set_has_abs_whlmilgfrntri() {
  _has_bits_[0] |= 0x00000002u;
}
void Abs_sts_0x221_221::clear_has_abs_whlmilgfrntri() {
  _has_bits_[0] &= ~0x00000002u;
}
void Abs_sts_0x221_221::clear_abs_whlmilgfrntri() {
  abs_whlmilgfrntri_ = 0;
  clear_has_abs_whlmilgfrntri();
}
::google::protobuf::int32 Abs_sts_0x221_221::abs_whlmilgfrntri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_whlmilgfrntri)
  return abs_whlmilgfrntri_;
}
void Abs_sts_0x221_221::set_abs_whlmilgfrntri(::google::protobuf::int32 value) {
  set_has_abs_whlmilgfrntri();
  abs_whlmilgfrntri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_whlmilgfrntri)
}

// optional double abs_vehspdlgt = 2;
bool Abs_sts_0x221_221::has_abs_vehspdlgt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Abs_sts_0x221_221::set_has_abs_vehspdlgt() {
  _has_bits_[0] |= 0x00000001u;
}
void Abs_sts_0x221_221::clear_has_abs_vehspdlgt() {
  _has_bits_[0] &= ~0x00000001u;
}
void Abs_sts_0x221_221::clear_abs_vehspdlgt() {
  abs_vehspdlgt_ = 0;
  clear_has_abs_vehspdlgt();
}
double Abs_sts_0x221_221::abs_vehspdlgt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_vehspdlgt)
  return abs_vehspdlgt_;
}
void Abs_sts_0x221_221::set_abs_vehspdlgt(double value) {
  set_has_abs_vehspdlgt();
  abs_vehspdlgt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_vehspdlgt)
}

// optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_vehspddirectionType abs_vehspddirection = 3;
bool Abs_sts_0x221_221::has_abs_vehspddirection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Abs_sts_0x221_221::set_has_abs_vehspddirection() {
  _has_bits_[0] |= 0x00000004u;
}
void Abs_sts_0x221_221::clear_has_abs_vehspddirection() {
  _has_bits_[0] &= ~0x00000004u;
}
void Abs_sts_0x221_221::clear_abs_vehspddirection() {
  abs_vehspddirection_ = 0;
  clear_has_abs_vehspddirection();
}
::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspddirectionType Abs_sts_0x221_221::abs_vehspddirection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_vehspddirection)
  return static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspddirectionType >(abs_vehspddirection_);
}
void Abs_sts_0x221_221::set_abs_vehspddirection(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspddirectionType value) {
  assert(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspddirectionType_IsValid(value));
  set_has_abs_vehspddirection();
  abs_vehspddirection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_vehspddirection)
}

// optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_ebdflgfltType abs_ebdflgflt = 4;
bool Abs_sts_0x221_221::has_abs_ebdflgflt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Abs_sts_0x221_221::set_has_abs_ebdflgflt() {
  _has_bits_[0] |= 0x00000008u;
}
void Abs_sts_0x221_221::clear_has_abs_ebdflgflt() {
  _has_bits_[0] &= ~0x00000008u;
}
void Abs_sts_0x221_221::clear_abs_ebdflgflt() {
  abs_ebdflgflt_ = 0;
  clear_has_abs_ebdflgflt();
}
::jmc_auto::canbus::Abs_sts_0x221_221_Abs_ebdflgfltType Abs_sts_0x221_221::abs_ebdflgflt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_ebdflgflt)
  return static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_ebdflgfltType >(abs_ebdflgflt_);
}
void Abs_sts_0x221_221::set_abs_ebdflgflt(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_ebdflgfltType value) {
  assert(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_ebdflgfltType_IsValid(value));
  set_has_abs_ebdflgflt();
  abs_ebdflgflt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_ebdflgflt)
}

// optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_absflgfltType abs_absflgflt = 5;
bool Abs_sts_0x221_221::has_abs_absflgflt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Abs_sts_0x221_221::set_has_abs_absflgflt() {
  _has_bits_[0] |= 0x00000010u;
}
void Abs_sts_0x221_221::clear_has_abs_absflgflt() {
  _has_bits_[0] &= ~0x00000010u;
}
void Abs_sts_0x221_221::clear_abs_absflgflt() {
  abs_absflgflt_ = 0;
  clear_has_abs_absflgflt();
}
::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absflgfltType Abs_sts_0x221_221::abs_absflgflt() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_absflgflt)
  return static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absflgfltType >(abs_absflgflt_);
}
void Abs_sts_0x221_221::set_abs_absflgflt(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absflgfltType value) {
  assert(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absflgfltType_IsValid(value));
  set_has_abs_absflgflt();
  abs_absflgflt_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_absflgflt)
}

// optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_absctrlactvType abs_absctrlactv = 6;
bool Abs_sts_0x221_221::has_abs_absctrlactv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Abs_sts_0x221_221::set_has_abs_absctrlactv() {
  _has_bits_[0] |= 0x00000020u;
}
void Abs_sts_0x221_221::clear_has_abs_absctrlactv() {
  _has_bits_[0] &= ~0x00000020u;
}
void Abs_sts_0x221_221::clear_abs_absctrlactv() {
  abs_absctrlactv_ = 0;
  clear_has_abs_absctrlactv();
}
::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absctrlactvType Abs_sts_0x221_221::abs_absctrlactv() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_absctrlactv)
  return static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absctrlactvType >(abs_absctrlactv_);
}
void Abs_sts_0x221_221::set_abs_absctrlactv(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absctrlactvType value) {
  assert(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_absctrlactvType_IsValid(value));
  set_has_abs_absctrlactv();
  abs_absctrlactv_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_absctrlactv)
}

// optional int32 rollingcounter_0x221 = 7;
bool Abs_sts_0x221_221::has_rollingcounter_0x221() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Abs_sts_0x221_221::set_has_rollingcounter_0x221() {
  _has_bits_[0] |= 0x00000040u;
}
void Abs_sts_0x221_221::clear_has_rollingcounter_0x221() {
  _has_bits_[0] &= ~0x00000040u;
}
void Abs_sts_0x221_221::clear_rollingcounter_0x221() {
  rollingcounter_0x221_ = 0;
  clear_has_rollingcounter_0x221();
}
::google::protobuf::int32 Abs_sts_0x221_221::rollingcounter_0x221() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.rollingcounter_0x221)
  return rollingcounter_0x221_;
}
void Abs_sts_0x221_221::set_rollingcounter_0x221(::google::protobuf::int32 value) {
  set_has_rollingcounter_0x221();
  rollingcounter_0x221_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.rollingcounter_0x221)
}

// optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_whlmilgfrntlestatusType abs_whlmilgfrntlestatus = 8;
bool Abs_sts_0x221_221::has_abs_whlmilgfrntlestatus() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Abs_sts_0x221_221::set_has_abs_whlmilgfrntlestatus() {
  _has_bits_[0] |= 0x00000080u;
}
void Abs_sts_0x221_221::clear_has_abs_whlmilgfrntlestatus() {
  _has_bits_[0] &= ~0x00000080u;
}
void Abs_sts_0x221_221::clear_abs_whlmilgfrntlestatus() {
  abs_whlmilgfrntlestatus_ = 0;
  clear_has_abs_whlmilgfrntlestatus();
}
::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType Abs_sts_0x221_221::abs_whlmilgfrntlestatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_whlmilgfrntlestatus)
  return static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType >(abs_whlmilgfrntlestatus_);
}
void Abs_sts_0x221_221::set_abs_whlmilgfrntlestatus(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType value) {
  assert(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntlestatusType_IsValid(value));
  set_has_abs_whlmilgfrntlestatus();
  abs_whlmilgfrntlestatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_whlmilgfrntlestatus)
}

// optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_whlmilgfrntristatusType abs_whlmilgfrntristatus = 9;
bool Abs_sts_0x221_221::has_abs_whlmilgfrntristatus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Abs_sts_0x221_221::set_has_abs_whlmilgfrntristatus() {
  _has_bits_[0] |= 0x00000100u;
}
void Abs_sts_0x221_221::clear_has_abs_whlmilgfrntristatus() {
  _has_bits_[0] &= ~0x00000100u;
}
void Abs_sts_0x221_221::clear_abs_whlmilgfrntristatus() {
  abs_whlmilgfrntristatus_ = 0;
  clear_has_abs_whlmilgfrntristatus();
}
::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntristatusType Abs_sts_0x221_221::abs_whlmilgfrntristatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_whlmilgfrntristatus)
  return static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntristatusType >(abs_whlmilgfrntristatus_);
}
void Abs_sts_0x221_221::set_abs_whlmilgfrntristatus(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntristatusType value) {
  assert(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_whlmilgfrntristatusType_IsValid(value));
  set_has_abs_whlmilgfrntristatus();
  abs_whlmilgfrntristatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_whlmilgfrntristatus)
}

// optional .jmc_auto.canbus.Abs_sts_0x221_221.Abs_vehspdlgtstatusType abs_vehspdlgtstatus = 10;
bool Abs_sts_0x221_221::has_abs_vehspdlgtstatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Abs_sts_0x221_221::set_has_abs_vehspdlgtstatus() {
  _has_bits_[0] |= 0x00000200u;
}
void Abs_sts_0x221_221::clear_has_abs_vehspdlgtstatus() {
  _has_bits_[0] &= ~0x00000200u;
}
void Abs_sts_0x221_221::clear_abs_vehspdlgtstatus() {
  abs_vehspdlgtstatus_ = 0;
  clear_has_abs_vehspdlgtstatus();
}
::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspdlgtstatusType Abs_sts_0x221_221::abs_vehspdlgtstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_vehspdlgtstatus)
  return static_cast< ::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspdlgtstatusType >(abs_vehspdlgtstatus_);
}
void Abs_sts_0x221_221::set_abs_vehspdlgtstatus(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspdlgtstatusType value) {
  assert(::jmc_auto::canbus::Abs_sts_0x221_221_Abs_vehspdlgtstatusType_IsValid(value));
  set_has_abs_vehspdlgtstatus();
  abs_vehspdlgtstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_vehspdlgtstatus)
}

// optional int32 checksum_0x221 = 11;
bool Abs_sts_0x221_221::has_checksum_0x221() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Abs_sts_0x221_221::set_has_checksum_0x221() {
  _has_bits_[0] |= 0x00000400u;
}
void Abs_sts_0x221_221::clear_has_checksum_0x221() {
  _has_bits_[0] &= ~0x00000400u;
}
void Abs_sts_0x221_221::clear_checksum_0x221() {
  checksum_0x221_ = 0;
  clear_has_checksum_0x221();
}
::google::protobuf::int32 Abs_sts_0x221_221::checksum_0x221() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.checksum_0x221)
  return checksum_0x221_;
}
void Abs_sts_0x221_221::set_checksum_0x221(::google::protobuf::int32 value) {
  set_has_checksum_0x221();
  checksum_0x221_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.checksum_0x221)
}

// optional int32 abs_whlmilgfrntle = 12;
bool Abs_sts_0x221_221::has_abs_whlmilgfrntle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Abs_sts_0x221_221::set_has_abs_whlmilgfrntle() {
  _has_bits_[0] |= 0x00000800u;
}
void Abs_sts_0x221_221::clear_has_abs_whlmilgfrntle() {
  _has_bits_[0] &= ~0x00000800u;
}
void Abs_sts_0x221_221::clear_abs_whlmilgfrntle() {
  abs_whlmilgfrntle_ = 0;
  clear_has_abs_whlmilgfrntle();
}
::google::protobuf::int32 Abs_sts_0x221_221::abs_whlmilgfrntle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Abs_sts_0x221_221.abs_whlmilgfrntle)
  return abs_whlmilgfrntle_;
}
void Abs_sts_0x221_221::set_abs_whlmilgfrntle(::google::protobuf::int32 value) {
  set_has_abs_whlmilgfrntle();
  abs_whlmilgfrntle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Abs_sts_0x221_221.abs_whlmilgfrntle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mrr_frobj_0x480_480::kMrrLObjectDyFieldNumber;
const int Mrr_frobj_0x480_480::kMrrLObj0XClassFieldNumber;
const int Mrr_frobj_0x480_480::kMrrRObjectDxFieldNumber;
const int Mrr_frobj_0x480_480::kMrrRObjectDyFieldNumber;
const int Mrr_frobj_0x480_480::kMrrRObj0XClassFieldNumber;
const int Mrr_frobj_0x480_480::kMrrLefttargrtdetectionFieldNumber;
const int Mrr_frobj_0x480_480::kMrrRighttargrtdetectionFieldNumber;
const int Mrr_frobj_0x480_480::kMrrLObjectDxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mrr_frobj_0x480_480::Mrr_frobj_0x480_480()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Mrr_frobj_0x480_480)
}
Mrr_frobj_0x480_480::Mrr_frobj_0x480_480(const Mrr_frobj_0x480_480& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mrr_l_object_dy_, &from.mrr_l_object_dy_,
    reinterpret_cast<char*>(&mrr_l_object_dx_) -
    reinterpret_cast<char*>(&mrr_l_object_dy_) + sizeof(mrr_l_object_dx_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Mrr_frobj_0x480_480)
}

void Mrr_frobj_0x480_480::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&mrr_l_object_dy_, 0, reinterpret_cast<char*>(&mrr_l_object_dx_) -
    reinterpret_cast<char*>(&mrr_l_object_dy_) + sizeof(mrr_l_object_dx_));
}

Mrr_frobj_0x480_480::~Mrr_frobj_0x480_480() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Mrr_frobj_0x480_480)
  SharedDtor();
}

void Mrr_frobj_0x480_480::SharedDtor() {
}

void Mrr_frobj_0x480_480::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mrr_frobj_0x480_480::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mrr_frobj_0x480_480& Mrr_frobj_0x480_480::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mrr_frobj_0x480_480* Mrr_frobj_0x480_480::New(::google::protobuf::Arena* arena) const {
  Mrr_frobj_0x480_480* n = new Mrr_frobj_0x480_480;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mrr_frobj_0x480_480::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Mrr_frobj_0x480_480)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&mrr_l_object_dy_, 0, reinterpret_cast<char*>(&mrr_l_object_dx_) -
      reinterpret_cast<char*>(&mrr_l_object_dy_) + sizeof(mrr_l_object_dx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Mrr_frobj_0x480_480::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Mrr_frobj_0x480_480)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double mrr_l_object_dy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_mrr_l_object_dy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mrr_l_object_dy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_l_obj_0x_classType mrr_l_obj_0x_class = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_IsValid(value)) {
            set_mrr_l_obj_0x_class(static_cast< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double mrr_r_object_dx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_mrr_r_object_dx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mrr_r_object_dx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double mrr_r_object_dy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_mrr_r_object_dy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mrr_r_object_dy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_r_obj_0x_classType mrr_r_obj_0x_class = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_IsValid(value)) {
            set_mrr_r_obj_0x_class(static_cast< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_lefttargrtdetectionType mrr_lefttargrtdetection = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_IsValid(value)) {
            set_mrr_lefttargrtdetection(static_cast< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_righttargrtdetectionType mrr_righttargrtdetection = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_IsValid(value)) {
            set_mrr_righttargrtdetection(static_cast< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double mrr_l_object_dx = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_mrr_l_object_dx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mrr_l_object_dx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Mrr_frobj_0x480_480)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Mrr_frobj_0x480_480)
  return false;
#undef DO_
}

void Mrr_frobj_0x480_480::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Mrr_frobj_0x480_480)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double mrr_l_object_dy = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mrr_l_object_dy(), output);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_l_obj_0x_classType mrr_l_obj_0x_class = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mrr_l_obj_0x_class(), output);
  }

  // optional double mrr_r_object_dx = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mrr_r_object_dx(), output);
  }

  // optional double mrr_r_object_dy = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->mrr_r_object_dy(), output);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_r_obj_0x_classType mrr_r_obj_0x_class = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mrr_r_obj_0x_class(), output);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_lefttargrtdetectionType mrr_lefttargrtdetection = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->mrr_lefttargrtdetection(), output);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_righttargrtdetectionType mrr_righttargrtdetection = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->mrr_righttargrtdetection(), output);
  }

  // optional double mrr_l_object_dx = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->mrr_l_object_dx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Mrr_frobj_0x480_480)
}

::google::protobuf::uint8* Mrr_frobj_0x480_480::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Mrr_frobj_0x480_480)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double mrr_l_object_dy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mrr_l_object_dy(), target);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_l_obj_0x_classType mrr_l_obj_0x_class = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mrr_l_obj_0x_class(), target);
  }

  // optional double mrr_r_object_dx = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mrr_r_object_dx(), target);
  }

  // optional double mrr_r_object_dy = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->mrr_r_object_dy(), target);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_r_obj_0x_classType mrr_r_obj_0x_class = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mrr_r_obj_0x_class(), target);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_lefttargrtdetectionType mrr_lefttargrtdetection = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->mrr_lefttargrtdetection(), target);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_righttargrtdetectionType mrr_righttargrtdetection = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->mrr_righttargrtdetection(), target);
  }

  // optional double mrr_l_object_dx = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->mrr_l_object_dx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Mrr_frobj_0x480_480)
  return target;
}

size_t Mrr_frobj_0x480_480::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Mrr_frobj_0x480_480)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double mrr_l_object_dy = 1;
    if (has_mrr_l_object_dy()) {
      total_size += 1 + 8;
    }

    // optional double mrr_r_object_dx = 3;
    if (has_mrr_r_object_dx()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_l_obj_0x_classType mrr_l_obj_0x_class = 2;
    if (has_mrr_l_obj_0x_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mrr_l_obj_0x_class());
    }

    // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_r_obj_0x_classType mrr_r_obj_0x_class = 5;
    if (has_mrr_r_obj_0x_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mrr_r_obj_0x_class());
    }

    // optional double mrr_r_object_dy = 4;
    if (has_mrr_r_object_dy()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_lefttargrtdetectionType mrr_lefttargrtdetection = 6;
    if (has_mrr_lefttargrtdetection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mrr_lefttargrtdetection());
    }

    // optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_righttargrtdetectionType mrr_righttargrtdetection = 7;
    if (has_mrr_righttargrtdetection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mrr_righttargrtdetection());
    }

    // optional double mrr_l_object_dx = 8;
    if (has_mrr_l_object_dx()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mrr_frobj_0x480_480::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Mrr_frobj_0x480_480)
  GOOGLE_DCHECK_NE(&from, this);
  const Mrr_frobj_0x480_480* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mrr_frobj_0x480_480>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Mrr_frobj_0x480_480)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Mrr_frobj_0x480_480)
    MergeFrom(*source);
  }
}

void Mrr_frobj_0x480_480::MergeFrom(const Mrr_frobj_0x480_480& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Mrr_frobj_0x480_480)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mrr_l_object_dy_ = from.mrr_l_object_dy_;
    }
    if (cached_has_bits & 0x00000002u) {
      mrr_r_object_dx_ = from.mrr_r_object_dx_;
    }
    if (cached_has_bits & 0x00000004u) {
      mrr_l_obj_0x_class_ = from.mrr_l_obj_0x_class_;
    }
    if (cached_has_bits & 0x00000008u) {
      mrr_r_obj_0x_class_ = from.mrr_r_obj_0x_class_;
    }
    if (cached_has_bits & 0x00000010u) {
      mrr_r_object_dy_ = from.mrr_r_object_dy_;
    }
    if (cached_has_bits & 0x00000020u) {
      mrr_lefttargrtdetection_ = from.mrr_lefttargrtdetection_;
    }
    if (cached_has_bits & 0x00000040u) {
      mrr_righttargrtdetection_ = from.mrr_righttargrtdetection_;
    }
    if (cached_has_bits & 0x00000080u) {
      mrr_l_object_dx_ = from.mrr_l_object_dx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Mrr_frobj_0x480_480::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Mrr_frobj_0x480_480)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mrr_frobj_0x480_480::CopyFrom(const Mrr_frobj_0x480_480& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Mrr_frobj_0x480_480)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mrr_frobj_0x480_480::IsInitialized() const {
  return true;
}

void Mrr_frobj_0x480_480::Swap(Mrr_frobj_0x480_480* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mrr_frobj_0x480_480::InternalSwap(Mrr_frobj_0x480_480* other) {
  std::swap(mrr_l_object_dy_, other->mrr_l_object_dy_);
  std::swap(mrr_r_object_dx_, other->mrr_r_object_dx_);
  std::swap(mrr_l_obj_0x_class_, other->mrr_l_obj_0x_class_);
  std::swap(mrr_r_obj_0x_class_, other->mrr_r_obj_0x_class_);
  std::swap(mrr_r_object_dy_, other->mrr_r_object_dy_);
  std::swap(mrr_lefttargrtdetection_, other->mrr_lefttargrtdetection_);
  std::swap(mrr_righttargrtdetection_, other->mrr_righttargrtdetection_);
  std::swap(mrr_l_object_dx_, other->mrr_l_object_dx_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mrr_frobj_0x480_480::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mrr_frobj_0x480_480

// optional double mrr_l_object_dy = 1;
bool Mrr_frobj_0x480_480::has_mrr_l_object_dy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Mrr_frobj_0x480_480::set_has_mrr_l_object_dy() {
  _has_bits_[0] |= 0x00000001u;
}
void Mrr_frobj_0x480_480::clear_has_mrr_l_object_dy() {
  _has_bits_[0] &= ~0x00000001u;
}
void Mrr_frobj_0x480_480::clear_mrr_l_object_dy() {
  mrr_l_object_dy_ = 0;
  clear_has_mrr_l_object_dy();
}
double Mrr_frobj_0x480_480::mrr_l_object_dy() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_l_object_dy)
  return mrr_l_object_dy_;
}
void Mrr_frobj_0x480_480::set_mrr_l_object_dy(double value) {
  set_has_mrr_l_object_dy();
  mrr_l_object_dy_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_l_object_dy)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_l_obj_0x_classType mrr_l_obj_0x_class = 2;
bool Mrr_frobj_0x480_480::has_mrr_l_obj_0x_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Mrr_frobj_0x480_480::set_has_mrr_l_obj_0x_class() {
  _has_bits_[0] |= 0x00000004u;
}
void Mrr_frobj_0x480_480::clear_has_mrr_l_obj_0x_class() {
  _has_bits_[0] &= ~0x00000004u;
}
void Mrr_frobj_0x480_480::clear_mrr_l_obj_0x_class() {
  mrr_l_obj_0x_class_ = 0;
  clear_has_mrr_l_obj_0x_class();
}
::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType Mrr_frobj_0x480_480::mrr_l_obj_0x_class() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_l_obj_0x_class)
  return static_cast< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType >(mrr_l_obj_0x_class_);
}
void Mrr_frobj_0x480_480::set_mrr_l_obj_0x_class(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType value) {
  assert(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_l_obj_0x_classType_IsValid(value));
  set_has_mrr_l_obj_0x_class();
  mrr_l_obj_0x_class_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_l_obj_0x_class)
}

// optional double mrr_r_object_dx = 3;
bool Mrr_frobj_0x480_480::has_mrr_r_object_dx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Mrr_frobj_0x480_480::set_has_mrr_r_object_dx() {
  _has_bits_[0] |= 0x00000002u;
}
void Mrr_frobj_0x480_480::clear_has_mrr_r_object_dx() {
  _has_bits_[0] &= ~0x00000002u;
}
void Mrr_frobj_0x480_480::clear_mrr_r_object_dx() {
  mrr_r_object_dx_ = 0;
  clear_has_mrr_r_object_dx();
}
double Mrr_frobj_0x480_480::mrr_r_object_dx() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_r_object_dx)
  return mrr_r_object_dx_;
}
void Mrr_frobj_0x480_480::set_mrr_r_object_dx(double value) {
  set_has_mrr_r_object_dx();
  mrr_r_object_dx_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_r_object_dx)
}

// optional double mrr_r_object_dy = 4;
bool Mrr_frobj_0x480_480::has_mrr_r_object_dy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Mrr_frobj_0x480_480::set_has_mrr_r_object_dy() {
  _has_bits_[0] |= 0x00000010u;
}
void Mrr_frobj_0x480_480::clear_has_mrr_r_object_dy() {
  _has_bits_[0] &= ~0x00000010u;
}
void Mrr_frobj_0x480_480::clear_mrr_r_object_dy() {
  mrr_r_object_dy_ = 0;
  clear_has_mrr_r_object_dy();
}
double Mrr_frobj_0x480_480::mrr_r_object_dy() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_r_object_dy)
  return mrr_r_object_dy_;
}
void Mrr_frobj_0x480_480::set_mrr_r_object_dy(double value) {
  set_has_mrr_r_object_dy();
  mrr_r_object_dy_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_r_object_dy)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_r_obj_0x_classType mrr_r_obj_0x_class = 5;
bool Mrr_frobj_0x480_480::has_mrr_r_obj_0x_class() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Mrr_frobj_0x480_480::set_has_mrr_r_obj_0x_class() {
  _has_bits_[0] |= 0x00000008u;
}
void Mrr_frobj_0x480_480::clear_has_mrr_r_obj_0x_class() {
  _has_bits_[0] &= ~0x00000008u;
}
void Mrr_frobj_0x480_480::clear_mrr_r_obj_0x_class() {
  mrr_r_obj_0x_class_ = 0;
  clear_has_mrr_r_obj_0x_class();
}
::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType Mrr_frobj_0x480_480::mrr_r_obj_0x_class() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_r_obj_0x_class)
  return static_cast< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType >(mrr_r_obj_0x_class_);
}
void Mrr_frobj_0x480_480::set_mrr_r_obj_0x_class(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType value) {
  assert(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_r_obj_0x_classType_IsValid(value));
  set_has_mrr_r_obj_0x_class();
  mrr_r_obj_0x_class_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_r_obj_0x_class)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_lefttargrtdetectionType mrr_lefttargrtdetection = 6;
bool Mrr_frobj_0x480_480::has_mrr_lefttargrtdetection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Mrr_frobj_0x480_480::set_has_mrr_lefttargrtdetection() {
  _has_bits_[0] |= 0x00000020u;
}
void Mrr_frobj_0x480_480::clear_has_mrr_lefttargrtdetection() {
  _has_bits_[0] &= ~0x00000020u;
}
void Mrr_frobj_0x480_480::clear_mrr_lefttargrtdetection() {
  mrr_lefttargrtdetection_ = 0;
  clear_has_mrr_lefttargrtdetection();
}
::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType Mrr_frobj_0x480_480::mrr_lefttargrtdetection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_lefttargrtdetection)
  return static_cast< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType >(mrr_lefttargrtdetection_);
}
void Mrr_frobj_0x480_480::set_mrr_lefttargrtdetection(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType value) {
  assert(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_lefttargrtdetectionType_IsValid(value));
  set_has_mrr_lefttargrtdetection();
  mrr_lefttargrtdetection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_lefttargrtdetection)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x480_480.Mrr_righttargrtdetectionType mrr_righttargrtdetection = 7;
bool Mrr_frobj_0x480_480::has_mrr_righttargrtdetection() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Mrr_frobj_0x480_480::set_has_mrr_righttargrtdetection() {
  _has_bits_[0] |= 0x00000040u;
}
void Mrr_frobj_0x480_480::clear_has_mrr_righttargrtdetection() {
  _has_bits_[0] &= ~0x00000040u;
}
void Mrr_frobj_0x480_480::clear_mrr_righttargrtdetection() {
  mrr_righttargrtdetection_ = 0;
  clear_has_mrr_righttargrtdetection();
}
::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType Mrr_frobj_0x480_480::mrr_righttargrtdetection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_righttargrtdetection)
  return static_cast< ::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType >(mrr_righttargrtdetection_);
}
void Mrr_frobj_0x480_480::set_mrr_righttargrtdetection(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType value) {
  assert(::jmc_auto::canbus::Mrr_frobj_0x480_480_Mrr_righttargrtdetectionType_IsValid(value));
  set_has_mrr_righttargrtdetection();
  mrr_righttargrtdetection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_righttargrtdetection)
}

// optional double mrr_l_object_dx = 8;
bool Mrr_frobj_0x480_480::has_mrr_l_object_dx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Mrr_frobj_0x480_480::set_has_mrr_l_object_dx() {
  _has_bits_[0] |= 0x00000080u;
}
void Mrr_frobj_0x480_480::clear_has_mrr_l_object_dx() {
  _has_bits_[0] &= ~0x00000080u;
}
void Mrr_frobj_0x480_480::clear_mrr_l_object_dx() {
  mrr_l_object_dx_ = 0;
  clear_has_mrr_l_object_dx();
}
double Mrr_frobj_0x480_480::mrr_l_object_dx() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_l_object_dx)
  return mrr_l_object_dx_;
}
void Mrr_frobj_0x480_480::set_mrr_l_object_dx(double value) {
  set_has_mrr_l_object_dx();
  mrr_l_object_dx_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x480_480.mrr_l_object_dx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mrr_0x246_246::kTaugapsetFieldNumber;
const int Mrr_0x246_246::kDxtarobjFieldNumber;
const int Mrr_0x246_246::kAcchmiModeFieldNumber;
const int Mrr_0x246_246::kAccfailinfoFieldNumber;
const int Mrr_0x246_246::kTakeoverreqFieldNumber;
const int Mrr_0x246_246::kMrrFcwSensitiveFieldNumber;
const int Mrr_0x246_246::kAebStateFieldNumber;
const int Mrr_0x246_246::kAccStartstopInforFieldNumber;
const int Mrr_0x246_246::kFcwPrewarningFieldNumber;
const int Mrr_0x246_246::kFcwLatentwarningFieldNumber;
const int Mrr_0x246_246::kFcwStateFieldNumber;
const int Mrr_0x246_246::kObjSpeedFieldNumber;
const int Mrr_0x246_246::kRollingCounter0X246FieldNumber;
const int Mrr_0x246_246::kTextinfoFieldNumber;
const int Mrr_0x246_246::kChecksum0X246FieldNumber;
const int Mrr_0x246_246::kVsetdisFieldNumber;
const int Mrr_0x246_246::kObjvalidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mrr_0x246_246::Mrr_0x246_246()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Mrr_0x246_246)
}
Mrr_0x246_246::Mrr_0x246_246(const Mrr_0x246_246& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&taugapset_, &from.taugapset_,
    reinterpret_cast<char*>(&vsetdis_) -
    reinterpret_cast<char*>(&taugapset_) + sizeof(vsetdis_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Mrr_0x246_246)
}

void Mrr_0x246_246::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&taugapset_, 0, reinterpret_cast<char*>(&objvalid_) -
    reinterpret_cast<char*>(&taugapset_) + sizeof(objvalid_));
  vsetdis_ = 511;
}

Mrr_0x246_246::~Mrr_0x246_246() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Mrr_0x246_246)
  SharedDtor();
}

void Mrr_0x246_246::SharedDtor() {
}

void Mrr_0x246_246::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mrr_0x246_246::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mrr_0x246_246& Mrr_0x246_246::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mrr_0x246_246* Mrr_0x246_246::New(::google::protobuf::Arena* arena) const {
  Mrr_0x246_246* n = new Mrr_0x246_246;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mrr_0x246_246::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Mrr_0x246_246)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&taugapset_, 0, reinterpret_cast<char*>(&acc_startstop_infor_) -
      reinterpret_cast<char*>(&taugapset_) + sizeof(acc_startstop_infor_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&fcw_prewarning_, 0, reinterpret_cast<char*>(&objvalid_) -
      reinterpret_cast<char*>(&fcw_prewarning_) + sizeof(objvalid_));
  }
  vsetdis_ = 511;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Mrr_0x246_246::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Mrr_0x246_246)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Mrr_0x246_246.TaugapsetType taugapset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x246_246_TaugapsetType_IsValid(value)) {
            set_taugapset(static_cast< ::jmc_auto::canbus::Mrr_0x246_246_TaugapsetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x246_246.DxtarobjType dxtarobj = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x246_246_DxtarobjType_IsValid(value)) {
            set_dxtarobj(static_cast< ::jmc_auto::canbus::Mrr_0x246_246_DxtarobjType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x246_246.Acchmi_modeType acchmi_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x246_246_Acchmi_modeType_IsValid(value)) {
            set_acchmi_mode(static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Acchmi_modeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x246_246.AccfailinfoType accfailinfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x246_246_AccfailinfoType_IsValid(value)) {
            set_accfailinfo(static_cast< ::jmc_auto::canbus::Mrr_0x246_246_AccfailinfoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x246_246.TakeoverreqType takeoverreq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x246_246_TakeoverreqType_IsValid(value)) {
            set_takeoverreq(static_cast< ::jmc_auto::canbus::Mrr_0x246_246_TakeoverreqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x246_246.Mrr_fcw_sensitiveType mrr_fcw_sensitive = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x246_246_Mrr_fcw_sensitiveType_IsValid(value)) {
            set_mrr_fcw_sensitive(static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Mrr_fcw_sensitiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x246_246.Aeb_stateType aeb_state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x246_246_Aeb_stateType_IsValid(value)) {
            set_aeb_state(static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Aeb_stateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x246_246.Acc_startstop_inforType acc_startstop_infor = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x246_246_Acc_startstop_inforType_IsValid(value)) {
            set_acc_startstop_infor(static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Acc_startstop_inforType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_prewarningType fcw_prewarning = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x246_246_Fcw_prewarningType_IsValid(value)) {
            set_fcw_prewarning(static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Fcw_prewarningType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_latentwarningType fcw_latentwarning = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x246_246_Fcw_latentwarningType_IsValid(value)) {
            set_fcw_latentwarning(static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Fcw_latentwarningType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_stateType fcw_state = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x246_246_Fcw_stateType_IsValid(value)) {
            set_fcw_state(static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Fcw_stateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obj_speed = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_obj_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x246 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_rolling_counter_0x246();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x246_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x246_246.TextinfoType textinfo = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x246_246_TextinfoType_IsValid(value)) {
            set_textinfo(static_cast< ::jmc_auto::canbus::Mrr_0x246_246_TextinfoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x246 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_checksum_0x246();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x246_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x246_246.VsetdisType vsetdis = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x246_246_VsetdisType_IsValid(value)) {
            set_vsetdis(static_cast< ::jmc_auto::canbus::Mrr_0x246_246_VsetdisType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x246_246.ObjvalidType objvalid = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_0x246_246_ObjvalidType_IsValid(value)) {
            set_objvalid(static_cast< ::jmc_auto::canbus::Mrr_0x246_246_ObjvalidType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Mrr_0x246_246)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Mrr_0x246_246)
  return false;
#undef DO_
}

void Mrr_0x246_246::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Mrr_0x246_246)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Mrr_0x246_246.TaugapsetType taugapset = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->taugapset(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.DxtarobjType dxtarobj = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dxtarobj(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.Acchmi_modeType acchmi_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->acchmi_mode(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.AccfailinfoType accfailinfo = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->accfailinfo(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.TakeoverreqType takeoverreq = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->takeoverreq(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.Mrr_fcw_sensitiveType mrr_fcw_sensitive = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->mrr_fcw_sensitive(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.Aeb_stateType aeb_state = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->aeb_state(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.Acc_startstop_inforType acc_startstop_infor = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->acc_startstop_infor(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_prewarningType fcw_prewarning = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->fcw_prewarning(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_latentwarningType fcw_latentwarning = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->fcw_latentwarning(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_stateType fcw_state = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->fcw_state(), output);
  }

  // optional int32 obj_speed = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->obj_speed(), output);
  }

  // optional int32 rolling_counter_0x246 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->rolling_counter_0x246(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.TextinfoType textinfo = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->textinfo(), output);
  }

  // optional int32 checksum_0x246 = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->checksum_0x246(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.VsetdisType vsetdis = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->vsetdis(), output);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.ObjvalidType objvalid = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->objvalid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Mrr_0x246_246)
}

::google::protobuf::uint8* Mrr_0x246_246::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Mrr_0x246_246)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Mrr_0x246_246.TaugapsetType taugapset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->taugapset(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.DxtarobjType dxtarobj = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dxtarobj(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.Acchmi_modeType acchmi_mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->acchmi_mode(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.AccfailinfoType accfailinfo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->accfailinfo(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.TakeoverreqType takeoverreq = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->takeoverreq(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.Mrr_fcw_sensitiveType mrr_fcw_sensitive = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->mrr_fcw_sensitive(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.Aeb_stateType aeb_state = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->aeb_state(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.Acc_startstop_inforType acc_startstop_infor = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->acc_startstop_infor(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_prewarningType fcw_prewarning = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->fcw_prewarning(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_latentwarningType fcw_latentwarning = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->fcw_latentwarning(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_stateType fcw_state = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->fcw_state(), target);
  }

  // optional int32 obj_speed = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->obj_speed(), target);
  }

  // optional int32 rolling_counter_0x246 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->rolling_counter_0x246(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.TextinfoType textinfo = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->textinfo(), target);
  }

  // optional int32 checksum_0x246 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->checksum_0x246(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.VsetdisType vsetdis = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->vsetdis(), target);
  }

  // optional .jmc_auto.canbus.Mrr_0x246_246.ObjvalidType objvalid = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->objvalid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Mrr_0x246_246)
  return target;
}

size_t Mrr_0x246_246::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Mrr_0x246_246)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Mrr_0x246_246.TaugapsetType taugapset = 1;
    if (has_taugapset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->taugapset());
    }

    // optional .jmc_auto.canbus.Mrr_0x246_246.DxtarobjType dxtarobj = 2;
    if (has_dxtarobj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dxtarobj());
    }

    // optional .jmc_auto.canbus.Mrr_0x246_246.Acchmi_modeType acchmi_mode = 3;
    if (has_acchmi_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->acchmi_mode());
    }

    // optional .jmc_auto.canbus.Mrr_0x246_246.AccfailinfoType accfailinfo = 4;
    if (has_accfailinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->accfailinfo());
    }

    // optional .jmc_auto.canbus.Mrr_0x246_246.TakeoverreqType takeoverreq = 5;
    if (has_takeoverreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->takeoverreq());
    }

    // optional .jmc_auto.canbus.Mrr_0x246_246.Mrr_fcw_sensitiveType mrr_fcw_sensitive = 6;
    if (has_mrr_fcw_sensitive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mrr_fcw_sensitive());
    }

    // optional .jmc_auto.canbus.Mrr_0x246_246.Aeb_stateType aeb_state = 7;
    if (has_aeb_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->aeb_state());
    }

    // optional .jmc_auto.canbus.Mrr_0x246_246.Acc_startstop_inforType acc_startstop_infor = 8;
    if (has_acc_startstop_infor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->acc_startstop_infor());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_prewarningType fcw_prewarning = 9;
    if (has_fcw_prewarning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fcw_prewarning());
    }

    // optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_latentwarningType fcw_latentwarning = 10;
    if (has_fcw_latentwarning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fcw_latentwarning());
    }

    // optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_stateType fcw_state = 11;
    if (has_fcw_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fcw_state());
    }

    // optional int32 obj_speed = 12;
    if (has_obj_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_speed());
    }

    // optional int32 rolling_counter_0x246 = 13;
    if (has_rolling_counter_0x246()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x246());
    }

    // optional .jmc_auto.canbus.Mrr_0x246_246.TextinfoType textinfo = 14;
    if (has_textinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->textinfo());
    }

    // optional int32 checksum_0x246 = 15;
    if (has_checksum_0x246()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x246());
    }

    // optional .jmc_auto.canbus.Mrr_0x246_246.ObjvalidType objvalid = 17;
    if (has_objvalid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->objvalid());
    }

  }
  // optional .jmc_auto.canbus.Mrr_0x246_246.VsetdisType vsetdis = 16;
  if (has_vsetdis()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->vsetdis());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mrr_0x246_246::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Mrr_0x246_246)
  GOOGLE_DCHECK_NE(&from, this);
  const Mrr_0x246_246* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mrr_0x246_246>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Mrr_0x246_246)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Mrr_0x246_246)
    MergeFrom(*source);
  }
}

void Mrr_0x246_246::MergeFrom(const Mrr_0x246_246& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Mrr_0x246_246)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      taugapset_ = from.taugapset_;
    }
    if (cached_has_bits & 0x00000002u) {
      dxtarobj_ = from.dxtarobj_;
    }
    if (cached_has_bits & 0x00000004u) {
      acchmi_mode_ = from.acchmi_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      accfailinfo_ = from.accfailinfo_;
    }
    if (cached_has_bits & 0x00000010u) {
      takeoverreq_ = from.takeoverreq_;
    }
    if (cached_has_bits & 0x00000020u) {
      mrr_fcw_sensitive_ = from.mrr_fcw_sensitive_;
    }
    if (cached_has_bits & 0x00000040u) {
      aeb_state_ = from.aeb_state_;
    }
    if (cached_has_bits & 0x00000080u) {
      acc_startstop_infor_ = from.acc_startstop_infor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      fcw_prewarning_ = from.fcw_prewarning_;
    }
    if (cached_has_bits & 0x00000200u) {
      fcw_latentwarning_ = from.fcw_latentwarning_;
    }
    if (cached_has_bits & 0x00000400u) {
      fcw_state_ = from.fcw_state_;
    }
    if (cached_has_bits & 0x00000800u) {
      obj_speed_ = from.obj_speed_;
    }
    if (cached_has_bits & 0x00001000u) {
      rolling_counter_0x246_ = from.rolling_counter_0x246_;
    }
    if (cached_has_bits & 0x00002000u) {
      textinfo_ = from.textinfo_;
    }
    if (cached_has_bits & 0x00004000u) {
      checksum_0x246_ = from.checksum_0x246_;
    }
    if (cached_has_bits & 0x00008000u) {
      objvalid_ = from.objvalid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_vsetdis(from.vsetdis());
  }
}

void Mrr_0x246_246::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Mrr_0x246_246)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mrr_0x246_246::CopyFrom(const Mrr_0x246_246& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Mrr_0x246_246)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mrr_0x246_246::IsInitialized() const {
  return true;
}

void Mrr_0x246_246::Swap(Mrr_0x246_246* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mrr_0x246_246::InternalSwap(Mrr_0x246_246* other) {
  std::swap(taugapset_, other->taugapset_);
  std::swap(dxtarobj_, other->dxtarobj_);
  std::swap(acchmi_mode_, other->acchmi_mode_);
  std::swap(accfailinfo_, other->accfailinfo_);
  std::swap(takeoverreq_, other->takeoverreq_);
  std::swap(mrr_fcw_sensitive_, other->mrr_fcw_sensitive_);
  std::swap(aeb_state_, other->aeb_state_);
  std::swap(acc_startstop_infor_, other->acc_startstop_infor_);
  std::swap(fcw_prewarning_, other->fcw_prewarning_);
  std::swap(fcw_latentwarning_, other->fcw_latentwarning_);
  std::swap(fcw_state_, other->fcw_state_);
  std::swap(obj_speed_, other->obj_speed_);
  std::swap(rolling_counter_0x246_, other->rolling_counter_0x246_);
  std::swap(textinfo_, other->textinfo_);
  std::swap(checksum_0x246_, other->checksum_0x246_);
  std::swap(objvalid_, other->objvalid_);
  std::swap(vsetdis_, other->vsetdis_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mrr_0x246_246::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mrr_0x246_246

// optional .jmc_auto.canbus.Mrr_0x246_246.TaugapsetType taugapset = 1;
bool Mrr_0x246_246::has_taugapset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Mrr_0x246_246::set_has_taugapset() {
  _has_bits_[0] |= 0x00000001u;
}
void Mrr_0x246_246::clear_has_taugapset() {
  _has_bits_[0] &= ~0x00000001u;
}
void Mrr_0x246_246::clear_taugapset() {
  taugapset_ = 0;
  clear_has_taugapset();
}
::jmc_auto::canbus::Mrr_0x246_246_TaugapsetType Mrr_0x246_246::taugapset() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.taugapset)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_TaugapsetType >(taugapset_);
}
void Mrr_0x246_246::set_taugapset(::jmc_auto::canbus::Mrr_0x246_246_TaugapsetType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_TaugapsetType_IsValid(value));
  set_has_taugapset();
  taugapset_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.taugapset)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.DxtarobjType dxtarobj = 2;
bool Mrr_0x246_246::has_dxtarobj() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Mrr_0x246_246::set_has_dxtarobj() {
  _has_bits_[0] |= 0x00000002u;
}
void Mrr_0x246_246::clear_has_dxtarobj() {
  _has_bits_[0] &= ~0x00000002u;
}
void Mrr_0x246_246::clear_dxtarobj() {
  dxtarobj_ = 0;
  clear_has_dxtarobj();
}
::jmc_auto::canbus::Mrr_0x246_246_DxtarobjType Mrr_0x246_246::dxtarobj() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.dxtarobj)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_DxtarobjType >(dxtarobj_);
}
void Mrr_0x246_246::set_dxtarobj(::jmc_auto::canbus::Mrr_0x246_246_DxtarobjType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_DxtarobjType_IsValid(value));
  set_has_dxtarobj();
  dxtarobj_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.dxtarobj)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.Acchmi_modeType acchmi_mode = 3;
bool Mrr_0x246_246::has_acchmi_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Mrr_0x246_246::set_has_acchmi_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void Mrr_0x246_246::clear_has_acchmi_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void Mrr_0x246_246::clear_acchmi_mode() {
  acchmi_mode_ = 0;
  clear_has_acchmi_mode();
}
::jmc_auto::canbus::Mrr_0x246_246_Acchmi_modeType Mrr_0x246_246::acchmi_mode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.acchmi_mode)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Acchmi_modeType >(acchmi_mode_);
}
void Mrr_0x246_246::set_acchmi_mode(::jmc_auto::canbus::Mrr_0x246_246_Acchmi_modeType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_Acchmi_modeType_IsValid(value));
  set_has_acchmi_mode();
  acchmi_mode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.acchmi_mode)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.AccfailinfoType accfailinfo = 4;
bool Mrr_0x246_246::has_accfailinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Mrr_0x246_246::set_has_accfailinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void Mrr_0x246_246::clear_has_accfailinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void Mrr_0x246_246::clear_accfailinfo() {
  accfailinfo_ = 0;
  clear_has_accfailinfo();
}
::jmc_auto::canbus::Mrr_0x246_246_AccfailinfoType Mrr_0x246_246::accfailinfo() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.accfailinfo)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_AccfailinfoType >(accfailinfo_);
}
void Mrr_0x246_246::set_accfailinfo(::jmc_auto::canbus::Mrr_0x246_246_AccfailinfoType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_AccfailinfoType_IsValid(value));
  set_has_accfailinfo();
  accfailinfo_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.accfailinfo)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.TakeoverreqType takeoverreq = 5;
bool Mrr_0x246_246::has_takeoverreq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Mrr_0x246_246::set_has_takeoverreq() {
  _has_bits_[0] |= 0x00000010u;
}
void Mrr_0x246_246::clear_has_takeoverreq() {
  _has_bits_[0] &= ~0x00000010u;
}
void Mrr_0x246_246::clear_takeoverreq() {
  takeoverreq_ = 0;
  clear_has_takeoverreq();
}
::jmc_auto::canbus::Mrr_0x246_246_TakeoverreqType Mrr_0x246_246::takeoverreq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.takeoverreq)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_TakeoverreqType >(takeoverreq_);
}
void Mrr_0x246_246::set_takeoverreq(::jmc_auto::canbus::Mrr_0x246_246_TakeoverreqType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_TakeoverreqType_IsValid(value));
  set_has_takeoverreq();
  takeoverreq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.takeoverreq)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.Mrr_fcw_sensitiveType mrr_fcw_sensitive = 6;
bool Mrr_0x246_246::has_mrr_fcw_sensitive() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Mrr_0x246_246::set_has_mrr_fcw_sensitive() {
  _has_bits_[0] |= 0x00000020u;
}
void Mrr_0x246_246::clear_has_mrr_fcw_sensitive() {
  _has_bits_[0] &= ~0x00000020u;
}
void Mrr_0x246_246::clear_mrr_fcw_sensitive() {
  mrr_fcw_sensitive_ = 0;
  clear_has_mrr_fcw_sensitive();
}
::jmc_auto::canbus::Mrr_0x246_246_Mrr_fcw_sensitiveType Mrr_0x246_246::mrr_fcw_sensitive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.mrr_fcw_sensitive)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Mrr_fcw_sensitiveType >(mrr_fcw_sensitive_);
}
void Mrr_0x246_246::set_mrr_fcw_sensitive(::jmc_auto::canbus::Mrr_0x246_246_Mrr_fcw_sensitiveType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_Mrr_fcw_sensitiveType_IsValid(value));
  set_has_mrr_fcw_sensitive();
  mrr_fcw_sensitive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.mrr_fcw_sensitive)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.Aeb_stateType aeb_state = 7;
bool Mrr_0x246_246::has_aeb_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Mrr_0x246_246::set_has_aeb_state() {
  _has_bits_[0] |= 0x00000040u;
}
void Mrr_0x246_246::clear_has_aeb_state() {
  _has_bits_[0] &= ~0x00000040u;
}
void Mrr_0x246_246::clear_aeb_state() {
  aeb_state_ = 0;
  clear_has_aeb_state();
}
::jmc_auto::canbus::Mrr_0x246_246_Aeb_stateType Mrr_0x246_246::aeb_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.aeb_state)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Aeb_stateType >(aeb_state_);
}
void Mrr_0x246_246::set_aeb_state(::jmc_auto::canbus::Mrr_0x246_246_Aeb_stateType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_Aeb_stateType_IsValid(value));
  set_has_aeb_state();
  aeb_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.aeb_state)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.Acc_startstop_inforType acc_startstop_infor = 8;
bool Mrr_0x246_246::has_acc_startstop_infor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Mrr_0x246_246::set_has_acc_startstop_infor() {
  _has_bits_[0] |= 0x00000080u;
}
void Mrr_0x246_246::clear_has_acc_startstop_infor() {
  _has_bits_[0] &= ~0x00000080u;
}
void Mrr_0x246_246::clear_acc_startstop_infor() {
  acc_startstop_infor_ = 0;
  clear_has_acc_startstop_infor();
}
::jmc_auto::canbus::Mrr_0x246_246_Acc_startstop_inforType Mrr_0x246_246::acc_startstop_infor() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.acc_startstop_infor)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Acc_startstop_inforType >(acc_startstop_infor_);
}
void Mrr_0x246_246::set_acc_startstop_infor(::jmc_auto::canbus::Mrr_0x246_246_Acc_startstop_inforType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_Acc_startstop_inforType_IsValid(value));
  set_has_acc_startstop_infor();
  acc_startstop_infor_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.acc_startstop_infor)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_prewarningType fcw_prewarning = 9;
bool Mrr_0x246_246::has_fcw_prewarning() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Mrr_0x246_246::set_has_fcw_prewarning() {
  _has_bits_[0] |= 0x00000100u;
}
void Mrr_0x246_246::clear_has_fcw_prewarning() {
  _has_bits_[0] &= ~0x00000100u;
}
void Mrr_0x246_246::clear_fcw_prewarning() {
  fcw_prewarning_ = 0;
  clear_has_fcw_prewarning();
}
::jmc_auto::canbus::Mrr_0x246_246_Fcw_prewarningType Mrr_0x246_246::fcw_prewarning() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.fcw_prewarning)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Fcw_prewarningType >(fcw_prewarning_);
}
void Mrr_0x246_246::set_fcw_prewarning(::jmc_auto::canbus::Mrr_0x246_246_Fcw_prewarningType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_Fcw_prewarningType_IsValid(value));
  set_has_fcw_prewarning();
  fcw_prewarning_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.fcw_prewarning)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_latentwarningType fcw_latentwarning = 10;
bool Mrr_0x246_246::has_fcw_latentwarning() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Mrr_0x246_246::set_has_fcw_latentwarning() {
  _has_bits_[0] |= 0x00000200u;
}
void Mrr_0x246_246::clear_has_fcw_latentwarning() {
  _has_bits_[0] &= ~0x00000200u;
}
void Mrr_0x246_246::clear_fcw_latentwarning() {
  fcw_latentwarning_ = 0;
  clear_has_fcw_latentwarning();
}
::jmc_auto::canbus::Mrr_0x246_246_Fcw_latentwarningType Mrr_0x246_246::fcw_latentwarning() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.fcw_latentwarning)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Fcw_latentwarningType >(fcw_latentwarning_);
}
void Mrr_0x246_246::set_fcw_latentwarning(::jmc_auto::canbus::Mrr_0x246_246_Fcw_latentwarningType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_Fcw_latentwarningType_IsValid(value));
  set_has_fcw_latentwarning();
  fcw_latentwarning_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.fcw_latentwarning)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.Fcw_stateType fcw_state = 11;
bool Mrr_0x246_246::has_fcw_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Mrr_0x246_246::set_has_fcw_state() {
  _has_bits_[0] |= 0x00000400u;
}
void Mrr_0x246_246::clear_has_fcw_state() {
  _has_bits_[0] &= ~0x00000400u;
}
void Mrr_0x246_246::clear_fcw_state() {
  fcw_state_ = 0;
  clear_has_fcw_state();
}
::jmc_auto::canbus::Mrr_0x246_246_Fcw_stateType Mrr_0x246_246::fcw_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.fcw_state)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_Fcw_stateType >(fcw_state_);
}
void Mrr_0x246_246::set_fcw_state(::jmc_auto::canbus::Mrr_0x246_246_Fcw_stateType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_Fcw_stateType_IsValid(value));
  set_has_fcw_state();
  fcw_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.fcw_state)
}

// optional int32 obj_speed = 12;
bool Mrr_0x246_246::has_obj_speed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Mrr_0x246_246::set_has_obj_speed() {
  _has_bits_[0] |= 0x00000800u;
}
void Mrr_0x246_246::clear_has_obj_speed() {
  _has_bits_[0] &= ~0x00000800u;
}
void Mrr_0x246_246::clear_obj_speed() {
  obj_speed_ = 0;
  clear_has_obj_speed();
}
::google::protobuf::int32 Mrr_0x246_246::obj_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.obj_speed)
  return obj_speed_;
}
void Mrr_0x246_246::set_obj_speed(::google::protobuf::int32 value) {
  set_has_obj_speed();
  obj_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.obj_speed)
}

// optional int32 rolling_counter_0x246 = 13;
bool Mrr_0x246_246::has_rolling_counter_0x246() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Mrr_0x246_246::set_has_rolling_counter_0x246() {
  _has_bits_[0] |= 0x00001000u;
}
void Mrr_0x246_246::clear_has_rolling_counter_0x246() {
  _has_bits_[0] &= ~0x00001000u;
}
void Mrr_0x246_246::clear_rolling_counter_0x246() {
  rolling_counter_0x246_ = 0;
  clear_has_rolling_counter_0x246();
}
::google::protobuf::int32 Mrr_0x246_246::rolling_counter_0x246() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.rolling_counter_0x246)
  return rolling_counter_0x246_;
}
void Mrr_0x246_246::set_rolling_counter_0x246(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x246();
  rolling_counter_0x246_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.rolling_counter_0x246)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.TextinfoType textinfo = 14;
bool Mrr_0x246_246::has_textinfo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Mrr_0x246_246::set_has_textinfo() {
  _has_bits_[0] |= 0x00002000u;
}
void Mrr_0x246_246::clear_has_textinfo() {
  _has_bits_[0] &= ~0x00002000u;
}
void Mrr_0x246_246::clear_textinfo() {
  textinfo_ = 0;
  clear_has_textinfo();
}
::jmc_auto::canbus::Mrr_0x246_246_TextinfoType Mrr_0x246_246::textinfo() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.textinfo)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_TextinfoType >(textinfo_);
}
void Mrr_0x246_246::set_textinfo(::jmc_auto::canbus::Mrr_0x246_246_TextinfoType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_TextinfoType_IsValid(value));
  set_has_textinfo();
  textinfo_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.textinfo)
}

// optional int32 checksum_0x246 = 15;
bool Mrr_0x246_246::has_checksum_0x246() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Mrr_0x246_246::set_has_checksum_0x246() {
  _has_bits_[0] |= 0x00004000u;
}
void Mrr_0x246_246::clear_has_checksum_0x246() {
  _has_bits_[0] &= ~0x00004000u;
}
void Mrr_0x246_246::clear_checksum_0x246() {
  checksum_0x246_ = 0;
  clear_has_checksum_0x246();
}
::google::protobuf::int32 Mrr_0x246_246::checksum_0x246() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.checksum_0x246)
  return checksum_0x246_;
}
void Mrr_0x246_246::set_checksum_0x246(::google::protobuf::int32 value) {
  set_has_checksum_0x246();
  checksum_0x246_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.checksum_0x246)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.VsetdisType vsetdis = 16;
bool Mrr_0x246_246::has_vsetdis() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Mrr_0x246_246::set_has_vsetdis() {
  _has_bits_[0] |= 0x00010000u;
}
void Mrr_0x246_246::clear_has_vsetdis() {
  _has_bits_[0] &= ~0x00010000u;
}
void Mrr_0x246_246::clear_vsetdis() {
  vsetdis_ = 511;
  clear_has_vsetdis();
}
::jmc_auto::canbus::Mrr_0x246_246_VsetdisType Mrr_0x246_246::vsetdis() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.vsetdis)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_VsetdisType >(vsetdis_);
}
void Mrr_0x246_246::set_vsetdis(::jmc_auto::canbus::Mrr_0x246_246_VsetdisType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_VsetdisType_IsValid(value));
  set_has_vsetdis();
  vsetdis_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.vsetdis)
}

// optional .jmc_auto.canbus.Mrr_0x246_246.ObjvalidType objvalid = 17;
bool Mrr_0x246_246::has_objvalid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Mrr_0x246_246::set_has_objvalid() {
  _has_bits_[0] |= 0x00008000u;
}
void Mrr_0x246_246::clear_has_objvalid() {
  _has_bits_[0] &= ~0x00008000u;
}
void Mrr_0x246_246::clear_objvalid() {
  objvalid_ = 0;
  clear_has_objvalid();
}
::jmc_auto::canbus::Mrr_0x246_246_ObjvalidType Mrr_0x246_246::objvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_0x246_246.objvalid)
  return static_cast< ::jmc_auto::canbus::Mrr_0x246_246_ObjvalidType >(objvalid_);
}
void Mrr_0x246_246::set_objvalid(::jmc_auto::canbus::Mrr_0x246_246_ObjvalidType value) {
  assert(::jmc_auto::canbus::Mrr_0x246_246_ObjvalidType_IsValid(value));
  set_has_objvalid();
  objvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_0x246_246.objvalid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gw_mp5_nav_0x533_533::kNavSpeedlimitunitsFieldNumber;
const int Gw_mp5_nav_0x533_533::kNavCurrroadtypeFieldNumber;
const int Gw_mp5_nav_0x533_533::kNavSpeedlimitFieldNumber;
const int Gw_mp5_nav_0x533_533::kMp5ApaactiveCmdFieldNumber;
const int Gw_mp5_nav_0x533_533::kMp5ApaConfirmbuttonFieldNumber;
const int Gw_mp5_nav_0x533_533::kMp5ApaFunctionSelectFieldNumber;
const int Gw_mp5_nav_0x533_533::kNavStsFieldNumber;
const int Gw_mp5_nav_0x533_533::kNavCountrycodeFieldNumber;
const int Gw_mp5_nav_0x533_533::kNavSpeedlimitstatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gw_mp5_nav_0x533_533::Gw_mp5_nav_0x533_533()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
}
Gw_mp5_nav_0x533_533::Gw_mp5_nav_0x533_533(const Gw_mp5_nav_0x533_533& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nav_speedlimitunits_, &from.nav_speedlimitunits_,
    reinterpret_cast<char*>(&nav_speedlimitstatus_) -
    reinterpret_cast<char*>(&nav_speedlimitunits_) + sizeof(nav_speedlimitstatus_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
}

void Gw_mp5_nav_0x533_533::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&nav_speedlimitunits_, 0, reinterpret_cast<char*>(&nav_speedlimitstatus_) -
    reinterpret_cast<char*>(&nav_speedlimitunits_) + sizeof(nav_speedlimitstatus_));
}

Gw_mp5_nav_0x533_533::~Gw_mp5_nav_0x533_533() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
  SharedDtor();
}

void Gw_mp5_nav_0x533_533::SharedDtor() {
}

void Gw_mp5_nav_0x533_533::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gw_mp5_nav_0x533_533::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gw_mp5_nav_0x533_533& Gw_mp5_nav_0x533_533::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gw_mp5_nav_0x533_533* Gw_mp5_nav_0x533_533::New(::google::protobuf::Arena* arena) const {
  Gw_mp5_nav_0x533_533* n = new Gw_mp5_nav_0x533_533;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gw_mp5_nav_0x533_533::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&nav_speedlimitunits_, 0, reinterpret_cast<char*>(&nav_countrycode_) -
      reinterpret_cast<char*>(&nav_speedlimitunits_) + sizeof(nav_countrycode_));
  }
  nav_speedlimitstatus_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gw_mp5_nav_0x533_533::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitunitsType nav_speedlimitunits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_IsValid(value)) {
            set_nav_speedlimitunits(static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_currroadtypeType nav_currroadtype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_currroadtypeType_IsValid(value)) {
            set_nav_currroadtype(static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_currroadtypeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitType nav_speedlimit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitType_IsValid(value)) {
            set_nav_speedlimit(static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apaactive_cmdType mp5_apaactive_cmd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_IsValid(value)) {
            set_mp5_apaactive_cmd(static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apa_confirmbuttonType mp5_apa_confirmbutton = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_IsValid(value)) {
            set_mp5_apa_confirmbutton(static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apa_function_selectType mp5_apa_function_select = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_IsValid(value)) {
            set_mp5_apa_function_select(static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_stsType nav_sts = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_stsType_IsValid(value)) {
            set_nav_sts(static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_stsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nav_countrycode = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_nav_countrycode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nav_countrycode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitstatusType nav_speedlimitstatus = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_IsValid(value)) {
            set_nav_speedlimitstatus(static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
  return false;
#undef DO_
}

void Gw_mp5_nav_0x533_533::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitunitsType nav_speedlimitunits = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->nav_speedlimitunits(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_currroadtypeType nav_currroadtype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->nav_currroadtype(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitType nav_speedlimit = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->nav_speedlimit(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apaactive_cmdType mp5_apaactive_cmd = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mp5_apaactive_cmd(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apa_confirmbuttonType mp5_apa_confirmbutton = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mp5_apa_confirmbutton(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apa_function_selectType mp5_apa_function_select = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->mp5_apa_function_select(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_stsType nav_sts = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->nav_sts(), output);
  }

  // optional int32 nav_countrycode = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nav_countrycode(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitstatusType nav_speedlimitstatus = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->nav_speedlimitstatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
}

::google::protobuf::uint8* Gw_mp5_nav_0x533_533::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitunitsType nav_speedlimitunits = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->nav_speedlimitunits(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_currroadtypeType nav_currroadtype = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->nav_currroadtype(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitType nav_speedlimit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->nav_speedlimit(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apaactive_cmdType mp5_apaactive_cmd = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mp5_apaactive_cmd(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apa_confirmbuttonType mp5_apa_confirmbutton = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mp5_apa_confirmbutton(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apa_function_selectType mp5_apa_function_select = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->mp5_apa_function_select(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_stsType nav_sts = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->nav_sts(), target);
  }

  // optional int32 nav_countrycode = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nav_countrycode(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitstatusType nav_speedlimitstatus = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->nav_speedlimitstatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
  return target;
}

size_t Gw_mp5_nav_0x533_533::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitunitsType nav_speedlimitunits = 1;
    if (has_nav_speedlimitunits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nav_speedlimitunits());
    }

    // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_currroadtypeType nav_currroadtype = 2;
    if (has_nav_currroadtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nav_currroadtype());
    }

    // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitType nav_speedlimit = 3;
    if (has_nav_speedlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nav_speedlimit());
    }

    // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apaactive_cmdType mp5_apaactive_cmd = 4;
    if (has_mp5_apaactive_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_apaactive_cmd());
    }

    // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apa_confirmbuttonType mp5_apa_confirmbutton = 5;
    if (has_mp5_apa_confirmbutton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_apa_confirmbutton());
    }

    // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apa_function_selectType mp5_apa_function_select = 6;
    if (has_mp5_apa_function_select()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_apa_function_select());
    }

    // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_stsType nav_sts = 7;
    if (has_nav_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->nav_sts());
    }

    // optional int32 nav_countrycode = 8;
    if (has_nav_countrycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nav_countrycode());
    }

  }
  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitstatusType nav_speedlimitstatus = 9;
  if (has_nav_speedlimitstatus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nav_speedlimitstatus());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gw_mp5_nav_0x533_533::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
  GOOGLE_DCHECK_NE(&from, this);
  const Gw_mp5_nav_0x533_533* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gw_mp5_nav_0x533_533>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
    MergeFrom(*source);
  }
}

void Gw_mp5_nav_0x533_533::MergeFrom(const Gw_mp5_nav_0x533_533& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      nav_speedlimitunits_ = from.nav_speedlimitunits_;
    }
    if (cached_has_bits & 0x00000002u) {
      nav_currroadtype_ = from.nav_currroadtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      nav_speedlimit_ = from.nav_speedlimit_;
    }
    if (cached_has_bits & 0x00000008u) {
      mp5_apaactive_cmd_ = from.mp5_apaactive_cmd_;
    }
    if (cached_has_bits & 0x00000010u) {
      mp5_apa_confirmbutton_ = from.mp5_apa_confirmbutton_;
    }
    if (cached_has_bits & 0x00000020u) {
      mp5_apa_function_select_ = from.mp5_apa_function_select_;
    }
    if (cached_has_bits & 0x00000040u) {
      nav_sts_ = from.nav_sts_;
    }
    if (cached_has_bits & 0x00000080u) {
      nav_countrycode_ = from.nav_countrycode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_nav_speedlimitstatus(from.nav_speedlimitstatus());
  }
}

void Gw_mp5_nav_0x533_533::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gw_mp5_nav_0x533_533::CopyFrom(const Gw_mp5_nav_0x533_533& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gw_mp5_nav_0x533_533)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gw_mp5_nav_0x533_533::IsInitialized() const {
  return true;
}

void Gw_mp5_nav_0x533_533::Swap(Gw_mp5_nav_0x533_533* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gw_mp5_nav_0x533_533::InternalSwap(Gw_mp5_nav_0x533_533* other) {
  std::swap(nav_speedlimitunits_, other->nav_speedlimitunits_);
  std::swap(nav_currroadtype_, other->nav_currroadtype_);
  std::swap(nav_speedlimit_, other->nav_speedlimit_);
  std::swap(mp5_apaactive_cmd_, other->mp5_apaactive_cmd_);
  std::swap(mp5_apa_confirmbutton_, other->mp5_apa_confirmbutton_);
  std::swap(mp5_apa_function_select_, other->mp5_apa_function_select_);
  std::swap(nav_sts_, other->nav_sts_);
  std::swap(nav_countrycode_, other->nav_countrycode_);
  std::swap(nav_speedlimitstatus_, other->nav_speedlimitstatus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gw_mp5_nav_0x533_533::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gw_mp5_nav_0x533_533

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitunitsType nav_speedlimitunits = 1;
bool Gw_mp5_nav_0x533_533::has_nav_speedlimitunits() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gw_mp5_nav_0x533_533::set_has_nav_speedlimitunits() {
  _has_bits_[0] |= 0x00000001u;
}
void Gw_mp5_nav_0x533_533::clear_has_nav_speedlimitunits() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gw_mp5_nav_0x533_533::clear_nav_speedlimitunits() {
  nav_speedlimitunits_ = 0;
  clear_has_nav_speedlimitunits();
}
::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType Gw_mp5_nav_0x533_533::nav_speedlimitunits() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_speedlimitunits)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType >(nav_speedlimitunits_);
}
void Gw_mp5_nav_0x533_533::set_nav_speedlimitunits(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType value) {
  assert(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitunitsType_IsValid(value));
  set_has_nav_speedlimitunits();
  nav_speedlimitunits_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_speedlimitunits)
}

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_currroadtypeType nav_currroadtype = 2;
bool Gw_mp5_nav_0x533_533::has_nav_currroadtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gw_mp5_nav_0x533_533::set_has_nav_currroadtype() {
  _has_bits_[0] |= 0x00000002u;
}
void Gw_mp5_nav_0x533_533::clear_has_nav_currroadtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gw_mp5_nav_0x533_533::clear_nav_currroadtype() {
  nav_currroadtype_ = 0;
  clear_has_nav_currroadtype();
}
::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_currroadtypeType Gw_mp5_nav_0x533_533::nav_currroadtype() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_currroadtype)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_currroadtypeType >(nav_currroadtype_);
}
void Gw_mp5_nav_0x533_533::set_nav_currroadtype(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_currroadtypeType value) {
  assert(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_currroadtypeType_IsValid(value));
  set_has_nav_currroadtype();
  nav_currroadtype_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_currroadtype)
}

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitType nav_speedlimit = 3;
bool Gw_mp5_nav_0x533_533::has_nav_speedlimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gw_mp5_nav_0x533_533::set_has_nav_speedlimit() {
  _has_bits_[0] |= 0x00000004u;
}
void Gw_mp5_nav_0x533_533::clear_has_nav_speedlimit() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gw_mp5_nav_0x533_533::clear_nav_speedlimit() {
  nav_speedlimit_ = 0;
  clear_has_nav_speedlimit();
}
::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitType Gw_mp5_nav_0x533_533::nav_speedlimit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_speedlimit)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitType >(nav_speedlimit_);
}
void Gw_mp5_nav_0x533_533::set_nav_speedlimit(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitType value) {
  assert(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitType_IsValid(value));
  set_has_nav_speedlimit();
  nav_speedlimit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_speedlimit)
}

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apaactive_cmdType mp5_apaactive_cmd = 4;
bool Gw_mp5_nav_0x533_533::has_mp5_apaactive_cmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gw_mp5_nav_0x533_533::set_has_mp5_apaactive_cmd() {
  _has_bits_[0] |= 0x00000008u;
}
void Gw_mp5_nav_0x533_533::clear_has_mp5_apaactive_cmd() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gw_mp5_nav_0x533_533::clear_mp5_apaactive_cmd() {
  mp5_apaactive_cmd_ = 0;
  clear_has_mp5_apaactive_cmd();
}
::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType Gw_mp5_nav_0x533_533::mp5_apaactive_cmd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.mp5_apaactive_cmd)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType >(mp5_apaactive_cmd_);
}
void Gw_mp5_nav_0x533_533::set_mp5_apaactive_cmd(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType value) {
  assert(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apaactive_cmdType_IsValid(value));
  set_has_mp5_apaactive_cmd();
  mp5_apaactive_cmd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.mp5_apaactive_cmd)
}

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apa_confirmbuttonType mp5_apa_confirmbutton = 5;
bool Gw_mp5_nav_0x533_533::has_mp5_apa_confirmbutton() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gw_mp5_nav_0x533_533::set_has_mp5_apa_confirmbutton() {
  _has_bits_[0] |= 0x00000010u;
}
void Gw_mp5_nav_0x533_533::clear_has_mp5_apa_confirmbutton() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gw_mp5_nav_0x533_533::clear_mp5_apa_confirmbutton() {
  mp5_apa_confirmbutton_ = 0;
  clear_has_mp5_apa_confirmbutton();
}
::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType Gw_mp5_nav_0x533_533::mp5_apa_confirmbutton() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.mp5_apa_confirmbutton)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType >(mp5_apa_confirmbutton_);
}
void Gw_mp5_nav_0x533_533::set_mp5_apa_confirmbutton(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType value) {
  assert(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_confirmbuttonType_IsValid(value));
  set_has_mp5_apa_confirmbutton();
  mp5_apa_confirmbutton_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.mp5_apa_confirmbutton)
}

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Mp5_apa_function_selectType mp5_apa_function_select = 6;
bool Gw_mp5_nav_0x533_533::has_mp5_apa_function_select() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gw_mp5_nav_0x533_533::set_has_mp5_apa_function_select() {
  _has_bits_[0] |= 0x00000020u;
}
void Gw_mp5_nav_0x533_533::clear_has_mp5_apa_function_select() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gw_mp5_nav_0x533_533::clear_mp5_apa_function_select() {
  mp5_apa_function_select_ = 0;
  clear_has_mp5_apa_function_select();
}
::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType Gw_mp5_nav_0x533_533::mp5_apa_function_select() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.mp5_apa_function_select)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType >(mp5_apa_function_select_);
}
void Gw_mp5_nav_0x533_533::set_mp5_apa_function_select(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType value) {
  assert(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Mp5_apa_function_selectType_IsValid(value));
  set_has_mp5_apa_function_select();
  mp5_apa_function_select_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.mp5_apa_function_select)
}

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_stsType nav_sts = 7;
bool Gw_mp5_nav_0x533_533::has_nav_sts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Gw_mp5_nav_0x533_533::set_has_nav_sts() {
  _has_bits_[0] |= 0x00000040u;
}
void Gw_mp5_nav_0x533_533::clear_has_nav_sts() {
  _has_bits_[0] &= ~0x00000040u;
}
void Gw_mp5_nav_0x533_533::clear_nav_sts() {
  nav_sts_ = 0;
  clear_has_nav_sts();
}
::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_stsType Gw_mp5_nav_0x533_533::nav_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_sts)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_stsType >(nav_sts_);
}
void Gw_mp5_nav_0x533_533::set_nav_sts(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_stsType value) {
  assert(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_stsType_IsValid(value));
  set_has_nav_sts();
  nav_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_sts)
}

// optional int32 nav_countrycode = 8;
bool Gw_mp5_nav_0x533_533::has_nav_countrycode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Gw_mp5_nav_0x533_533::set_has_nav_countrycode() {
  _has_bits_[0] |= 0x00000080u;
}
void Gw_mp5_nav_0x533_533::clear_has_nav_countrycode() {
  _has_bits_[0] &= ~0x00000080u;
}
void Gw_mp5_nav_0x533_533::clear_nav_countrycode() {
  nav_countrycode_ = 0;
  clear_has_nav_countrycode();
}
::google::protobuf::int32 Gw_mp5_nav_0x533_533::nav_countrycode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_countrycode)
  return nav_countrycode_;
}
void Gw_mp5_nav_0x533_533::set_nav_countrycode(::google::protobuf::int32 value) {
  set_has_nav_countrycode();
  nav_countrycode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_countrycode)
}

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533.Nav_speedlimitstatusType nav_speedlimitstatus = 9;
bool Gw_mp5_nav_0x533_533::has_nav_speedlimitstatus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Gw_mp5_nav_0x533_533::set_has_nav_speedlimitstatus() {
  _has_bits_[0] |= 0x00000100u;
}
void Gw_mp5_nav_0x533_533::clear_has_nav_speedlimitstatus() {
  _has_bits_[0] &= ~0x00000100u;
}
void Gw_mp5_nav_0x533_533::clear_nav_speedlimitstatus() {
  nav_speedlimitstatus_ = 0;
  clear_has_nav_speedlimitstatus();
}
::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType Gw_mp5_nav_0x533_533::nav_speedlimitstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_speedlimitstatus)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType >(nav_speedlimitstatus_);
}
void Gw_mp5_nav_0x533_533::set_nav_speedlimitstatus(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType value) {
  assert(::jmc_auto::canbus::Gw_mp5_nav_0x533_533_Nav_speedlimitstatusType_IsValid(value));
  set_has_nav_speedlimitstatus();
  nav_speedlimitstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_nav_0x533_533.nav_speedlimitstatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gw_mp5_0x530_530::kMp5FcwSensitiveFieldNumber;
const int Gw_mp5_0x530_530::kMp5IcmenushiftButtonFieldNumber;
const int Gw_mp5_0x530_530::kMp5AebOnOffFieldNumber;
const int Gw_mp5_0x530_530::kMp5FcwOnOffFieldNumber;
const int Gw_mp5_0x530_530::kMp5BsdswitchstsFieldNumber;
const int Gw_mp5_0x530_530::kMp5AfsSwtichstsFieldNumber;
const int Gw_mp5_0x530_530::kMp5LaneassittypereqFieldNumber;
const int Gw_mp5_0x530_530::kMp5IcmenuactiveButtonFieldNumber;
const int Gw_mp5_0x530_530::kMp5AlarmstatusFieldNumber;
const int Gw_mp5_0x530_530::kMp5AlarmornotFieldNumber;
const int Gw_mp5_0x530_530::kMp5PaakresetReqFieldNumber;
const int Gw_mp5_0x530_530::kMp5CtaActiveFieldNumber;
const int Gw_mp5_0x530_530::kMp5BsdlcaActiveFieldNumber;
const int Gw_mp5_0x530_530::kMp5TsrmenureqFieldNumber;
const int Gw_mp5_0x530_530::kMp5LdwwarningFieldNumber;
const int Gw_mp5_0x530_530::kMp5LdwsensitvityFieldNumber;
const int Gw_mp5_0x530_530::kMp5AvmAngleFieldNumber;
const int Gw_mp5_0x530_530::kMp5AvmRotationchangeFieldNumber;
const int Gw_mp5_0x530_530::kMp5IhcmenureqFieldNumber;
const int Gw_mp5_0x530_530::kMp5DoaActiveFieldNumber;
const int Gw_mp5_0x530_530::kMp5ApaAvailableStsFieldNumber;
const int Gw_mp5_0x530_530::kMp5TpmsautolocationsettingFieldNumber;
const int Gw_mp5_0x530_530::kMp5AvmRotationdirectionFieldNumber;
const int Gw_mp5_0x530_530::kMp5AvmButtonFieldNumber;
const int Gw_mp5_0x530_530::kMp5ViewChoiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gw_mp5_0x530_530::Gw_mp5_0x530_530()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gw_mp5_0x530_530)
}
Gw_mp5_0x530_530::Gw_mp5_0x530_530(const Gw_mp5_0x530_530& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mp5_fcw_sensitive_, &from.mp5_fcw_sensitive_,
    reinterpret_cast<char*>(&mp5_view_choice_) -
    reinterpret_cast<char*>(&mp5_fcw_sensitive_) + sizeof(mp5_view_choice_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gw_mp5_0x530_530)
}

void Gw_mp5_0x530_530::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&mp5_fcw_sensitive_, 0, reinterpret_cast<char*>(&mp5_view_choice_) -
    reinterpret_cast<char*>(&mp5_fcw_sensitive_) + sizeof(mp5_view_choice_));
}

Gw_mp5_0x530_530::~Gw_mp5_0x530_530() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gw_mp5_0x530_530)
  SharedDtor();
}

void Gw_mp5_0x530_530::SharedDtor() {
}

void Gw_mp5_0x530_530::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gw_mp5_0x530_530::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gw_mp5_0x530_530& Gw_mp5_0x530_530::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gw_mp5_0x530_530* Gw_mp5_0x530_530::New(::google::protobuf::Arena* arena) const {
  Gw_mp5_0x530_530* n = new Gw_mp5_0x530_530;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gw_mp5_0x530_530::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gw_mp5_0x530_530)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&mp5_fcw_sensitive_, 0, reinterpret_cast<char*>(&mp5_icmenuactive_button_) -
      reinterpret_cast<char*>(&mp5_fcw_sensitive_) + sizeof(mp5_icmenuactive_button_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&mp5_alarmstatus_, 0, reinterpret_cast<char*>(&mp5_ldwsensitvity_) -
      reinterpret_cast<char*>(&mp5_alarmstatus_) + sizeof(mp5_ldwsensitvity_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&mp5_avm_angle_, 0, reinterpret_cast<char*>(&mp5_avm_button_) -
      reinterpret_cast<char*>(&mp5_avm_angle_) + sizeof(mp5_avm_button_));
  }
  mp5_view_choice_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gw_mp5_0x530_530::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gw_mp5_0x530_530)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_fcw_sensitiveType mp5_fcw_sensitive = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_IsValid(value)) {
            set_mp5_fcw_sensitive(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_sensitiveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_icmenushift_buttonType mp5_icmenushift_button = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_IsValid(value)) {
            set_mp5_icmenushift_button(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenushift_buttonType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_aeb_on_offType mp5_aeb_on_off = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_aeb_on_offType_IsValid(value)) {
            set_mp5_aeb_on_off(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_aeb_on_offType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_fcw_on_offType mp5_fcw_on_off = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_on_offType_IsValid(value)) {
            set_mp5_fcw_on_off(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_on_offType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_bsdswitchstsType mp5_bsdswitchsts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdswitchstsType_IsValid(value)) {
            set_mp5_bsdswitchsts(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdswitchstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_afs_swtichstsType mp5_afs_swtichsts = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_afs_swtichstsType_IsValid(value)) {
            set_mp5_afs_swtichsts(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_afs_swtichstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_laneassittypereqType mp5_laneassittypereq = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_laneassittypereqType_IsValid(value)) {
            set_mp5_laneassittypereq(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_laneassittypereqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_icmenuactive_buttonType mp5_icmenuactive_button = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_IsValid(value)) {
            set_mp5_icmenuactive_button(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_alarmstatusType mp5_alarmstatus = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmstatusType_IsValid(value)) {
            set_mp5_alarmstatus(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmstatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_alarmornotType mp5_alarmornot = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmornotType_IsValid(value)) {
            set_mp5_alarmornot(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmornotType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_paakreset_reqType mp5_paakreset_req = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_paakreset_reqType_IsValid(value)) {
            set_mp5_paakreset_req(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_paakreset_reqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_cta_activeType mp5_cta_active = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_cta_activeType_IsValid(value)) {
            set_mp5_cta_active(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_cta_activeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_bsdlca_activeType mp5_bsdlca_active = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdlca_activeType_IsValid(value)) {
            set_mp5_bsdlca_active(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdlca_activeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_tsrmenureqType mp5_tsrmenureq = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tsrmenureqType_IsValid(value)) {
            set_mp5_tsrmenureq(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tsrmenureqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ldwwarningType mp5_ldwwarning = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwwarningType_IsValid(value)) {
            set_mp5_ldwwarning(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwwarningType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ldwsensitvityType mp5_ldwsensitvity = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwsensitvityType_IsValid(value)) {
            set_mp5_ldwsensitvity(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwsensitvityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_angleType mp5_avm_angle = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_angleType_IsValid(value)) {
            set_mp5_avm_angle(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_angleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mp5_avm_rotationchange = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_mp5_avm_rotationchange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp5_avm_rotationchange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ihcmenureqType mp5_ihcmenureq = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ihcmenureqType_IsValid(value)) {
            set_mp5_ihcmenureq(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ihcmenureqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_doa_activeType mp5_doa_active = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_doa_activeType_IsValid(value)) {
            set_mp5_doa_active(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_doa_activeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_apa_available_stsType mp5_apa_available_sts = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_apa_available_stsType_IsValid(value)) {
            set_mp5_apa_available_sts(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_apa_available_stsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_tpmsautolocationsettingType mp5_tpmsautolocationsetting = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_IsValid(value)) {
            set_mp5_tpmsautolocationsetting(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_rotationdirectionType mp5_avm_rotationdirection = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_IsValid(value)) {
            set_mp5_avm_rotationdirection(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_buttonType mp5_avm_button = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_buttonType_IsValid(value)) {
            set_mp5_avm_button(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_buttonType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_view_choiceType mp5_view_choice = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_view_choiceType_IsValid(value)) {
            set_mp5_view_choice(static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_view_choiceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(25, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gw_mp5_0x530_530)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gw_mp5_0x530_530)
  return false;
#undef DO_
}

void Gw_mp5_0x530_530::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gw_mp5_0x530_530)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_fcw_sensitiveType mp5_fcw_sensitive = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mp5_fcw_sensitive(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_icmenushift_buttonType mp5_icmenushift_button = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mp5_icmenushift_button(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_aeb_on_offType mp5_aeb_on_off = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mp5_aeb_on_off(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_fcw_on_offType mp5_fcw_on_off = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->mp5_fcw_on_off(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_bsdswitchstsType mp5_bsdswitchsts = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mp5_bsdswitchsts(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_afs_swtichstsType mp5_afs_swtichsts = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->mp5_afs_swtichsts(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_laneassittypereqType mp5_laneassittypereq = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->mp5_laneassittypereq(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_icmenuactive_buttonType mp5_icmenuactive_button = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->mp5_icmenuactive_button(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_alarmstatusType mp5_alarmstatus = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->mp5_alarmstatus(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_alarmornotType mp5_alarmornot = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->mp5_alarmornot(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_paakreset_reqType mp5_paakreset_req = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->mp5_paakreset_req(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_cta_activeType mp5_cta_active = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->mp5_cta_active(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_bsdlca_activeType mp5_bsdlca_active = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->mp5_bsdlca_active(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_tsrmenureqType mp5_tsrmenureq = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->mp5_tsrmenureq(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ldwwarningType mp5_ldwwarning = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->mp5_ldwwarning(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ldwsensitvityType mp5_ldwsensitvity = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->mp5_ldwsensitvity(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_angleType mp5_avm_angle = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->mp5_avm_angle(), output);
  }

  // optional int32 mp5_avm_rotationchange = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->mp5_avm_rotationchange(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ihcmenureqType mp5_ihcmenureq = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->mp5_ihcmenureq(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_doa_activeType mp5_doa_active = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->mp5_doa_active(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_apa_available_stsType mp5_apa_available_sts = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->mp5_apa_available_sts(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_tpmsautolocationsettingType mp5_tpmsautolocationsetting = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->mp5_tpmsautolocationsetting(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_rotationdirectionType mp5_avm_rotationdirection = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->mp5_avm_rotationdirection(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_buttonType mp5_avm_button = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->mp5_avm_button(), output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_view_choiceType mp5_view_choice = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->mp5_view_choice(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gw_mp5_0x530_530)
}

::google::protobuf::uint8* Gw_mp5_0x530_530::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gw_mp5_0x530_530)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_fcw_sensitiveType mp5_fcw_sensitive = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mp5_fcw_sensitive(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_icmenushift_buttonType mp5_icmenushift_button = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mp5_icmenushift_button(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_aeb_on_offType mp5_aeb_on_off = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mp5_aeb_on_off(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_fcw_on_offType mp5_fcw_on_off = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->mp5_fcw_on_off(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_bsdswitchstsType mp5_bsdswitchsts = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mp5_bsdswitchsts(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_afs_swtichstsType mp5_afs_swtichsts = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->mp5_afs_swtichsts(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_laneassittypereqType mp5_laneassittypereq = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->mp5_laneassittypereq(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_icmenuactive_buttonType mp5_icmenuactive_button = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->mp5_icmenuactive_button(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_alarmstatusType mp5_alarmstatus = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->mp5_alarmstatus(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_alarmornotType mp5_alarmornot = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->mp5_alarmornot(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_paakreset_reqType mp5_paakreset_req = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->mp5_paakreset_req(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_cta_activeType mp5_cta_active = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->mp5_cta_active(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_bsdlca_activeType mp5_bsdlca_active = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->mp5_bsdlca_active(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_tsrmenureqType mp5_tsrmenureq = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->mp5_tsrmenureq(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ldwwarningType mp5_ldwwarning = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->mp5_ldwwarning(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ldwsensitvityType mp5_ldwsensitvity = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->mp5_ldwsensitvity(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_angleType mp5_avm_angle = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->mp5_avm_angle(), target);
  }

  // optional int32 mp5_avm_rotationchange = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->mp5_avm_rotationchange(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ihcmenureqType mp5_ihcmenureq = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->mp5_ihcmenureq(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_doa_activeType mp5_doa_active = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->mp5_doa_active(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_apa_available_stsType mp5_apa_available_sts = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->mp5_apa_available_sts(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_tpmsautolocationsettingType mp5_tpmsautolocationsetting = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->mp5_tpmsautolocationsetting(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_rotationdirectionType mp5_avm_rotationdirection = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->mp5_avm_rotationdirection(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_buttonType mp5_avm_button = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->mp5_avm_button(), target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_view_choiceType mp5_view_choice = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->mp5_view_choice(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gw_mp5_0x530_530)
  return target;
}

size_t Gw_mp5_0x530_530::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gw_mp5_0x530_530)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_fcw_sensitiveType mp5_fcw_sensitive = 1;
    if (has_mp5_fcw_sensitive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_fcw_sensitive());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_icmenushift_buttonType mp5_icmenushift_button = 2;
    if (has_mp5_icmenushift_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_icmenushift_button());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_aeb_on_offType mp5_aeb_on_off = 3;
    if (has_mp5_aeb_on_off()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_aeb_on_off());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_fcw_on_offType mp5_fcw_on_off = 4;
    if (has_mp5_fcw_on_off()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_fcw_on_off());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_bsdswitchstsType mp5_bsdswitchsts = 5;
    if (has_mp5_bsdswitchsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_bsdswitchsts());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_afs_swtichstsType mp5_afs_swtichsts = 6;
    if (has_mp5_afs_swtichsts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_afs_swtichsts());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_laneassittypereqType mp5_laneassittypereq = 7;
    if (has_mp5_laneassittypereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_laneassittypereq());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_icmenuactive_buttonType mp5_icmenuactive_button = 8;
    if (has_mp5_icmenuactive_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_icmenuactive_button());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_alarmstatusType mp5_alarmstatus = 9;
    if (has_mp5_alarmstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_alarmstatus());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_alarmornotType mp5_alarmornot = 10;
    if (has_mp5_alarmornot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_alarmornot());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_paakreset_reqType mp5_paakreset_req = 11;
    if (has_mp5_paakreset_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_paakreset_req());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_cta_activeType mp5_cta_active = 12;
    if (has_mp5_cta_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_cta_active());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_bsdlca_activeType mp5_bsdlca_active = 13;
    if (has_mp5_bsdlca_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_bsdlca_active());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_tsrmenureqType mp5_tsrmenureq = 14;
    if (has_mp5_tsrmenureq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_tsrmenureq());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ldwwarningType mp5_ldwwarning = 15;
    if (has_mp5_ldwwarning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_ldwwarning());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ldwsensitvityType mp5_ldwsensitvity = 16;
    if (has_mp5_ldwsensitvity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_ldwsensitvity());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_angleType mp5_avm_angle = 17;
    if (has_mp5_avm_angle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_avm_angle());
    }

    // optional int32 mp5_avm_rotationchange = 18;
    if (has_mp5_avm_rotationchange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp5_avm_rotationchange());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ihcmenureqType mp5_ihcmenureq = 19;
    if (has_mp5_ihcmenureq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_ihcmenureq());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_doa_activeType mp5_doa_active = 20;
    if (has_mp5_doa_active()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_doa_active());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_apa_available_stsType mp5_apa_available_sts = 21;
    if (has_mp5_apa_available_sts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_apa_available_sts());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_tpmsautolocationsettingType mp5_tpmsautolocationsetting = 22;
    if (has_mp5_tpmsautolocationsetting()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_tpmsautolocationsetting());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_rotationdirectionType mp5_avm_rotationdirection = 23;
    if (has_mp5_avm_rotationdirection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_avm_rotationdirection());
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_buttonType mp5_avm_button = 24;
    if (has_mp5_avm_button()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_avm_button());
    }

  }
  // optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_view_choiceType mp5_view_choice = 25;
  if (has_mp5_view_choice()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mp5_view_choice());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gw_mp5_0x530_530::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gw_mp5_0x530_530)
  GOOGLE_DCHECK_NE(&from, this);
  const Gw_mp5_0x530_530* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gw_mp5_0x530_530>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gw_mp5_0x530_530)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gw_mp5_0x530_530)
    MergeFrom(*source);
  }
}

void Gw_mp5_0x530_530::MergeFrom(const Gw_mp5_0x530_530& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gw_mp5_0x530_530)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mp5_fcw_sensitive_ = from.mp5_fcw_sensitive_;
    }
    if (cached_has_bits & 0x00000002u) {
      mp5_icmenushift_button_ = from.mp5_icmenushift_button_;
    }
    if (cached_has_bits & 0x00000004u) {
      mp5_aeb_on_off_ = from.mp5_aeb_on_off_;
    }
    if (cached_has_bits & 0x00000008u) {
      mp5_fcw_on_off_ = from.mp5_fcw_on_off_;
    }
    if (cached_has_bits & 0x00000010u) {
      mp5_bsdswitchsts_ = from.mp5_bsdswitchsts_;
    }
    if (cached_has_bits & 0x00000020u) {
      mp5_afs_swtichsts_ = from.mp5_afs_swtichsts_;
    }
    if (cached_has_bits & 0x00000040u) {
      mp5_laneassittypereq_ = from.mp5_laneassittypereq_;
    }
    if (cached_has_bits & 0x00000080u) {
      mp5_icmenuactive_button_ = from.mp5_icmenuactive_button_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mp5_alarmstatus_ = from.mp5_alarmstatus_;
    }
    if (cached_has_bits & 0x00000200u) {
      mp5_alarmornot_ = from.mp5_alarmornot_;
    }
    if (cached_has_bits & 0x00000400u) {
      mp5_paakreset_req_ = from.mp5_paakreset_req_;
    }
    if (cached_has_bits & 0x00000800u) {
      mp5_cta_active_ = from.mp5_cta_active_;
    }
    if (cached_has_bits & 0x00001000u) {
      mp5_bsdlca_active_ = from.mp5_bsdlca_active_;
    }
    if (cached_has_bits & 0x00002000u) {
      mp5_tsrmenureq_ = from.mp5_tsrmenureq_;
    }
    if (cached_has_bits & 0x00004000u) {
      mp5_ldwwarning_ = from.mp5_ldwwarning_;
    }
    if (cached_has_bits & 0x00008000u) {
      mp5_ldwsensitvity_ = from.mp5_ldwsensitvity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mp5_avm_angle_ = from.mp5_avm_angle_;
    }
    if (cached_has_bits & 0x00020000u) {
      mp5_avm_rotationchange_ = from.mp5_avm_rotationchange_;
    }
    if (cached_has_bits & 0x00040000u) {
      mp5_ihcmenureq_ = from.mp5_ihcmenureq_;
    }
    if (cached_has_bits & 0x00080000u) {
      mp5_doa_active_ = from.mp5_doa_active_;
    }
    if (cached_has_bits & 0x00100000u) {
      mp5_apa_available_sts_ = from.mp5_apa_available_sts_;
    }
    if (cached_has_bits & 0x00200000u) {
      mp5_tpmsautolocationsetting_ = from.mp5_tpmsautolocationsetting_;
    }
    if (cached_has_bits & 0x00400000u) {
      mp5_avm_rotationdirection_ = from.mp5_avm_rotationdirection_;
    }
    if (cached_has_bits & 0x00800000u) {
      mp5_avm_button_ = from.mp5_avm_button_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    set_mp5_view_choice(from.mp5_view_choice());
  }
}

void Gw_mp5_0x530_530::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gw_mp5_0x530_530)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gw_mp5_0x530_530::CopyFrom(const Gw_mp5_0x530_530& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gw_mp5_0x530_530)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gw_mp5_0x530_530::IsInitialized() const {
  return true;
}

void Gw_mp5_0x530_530::Swap(Gw_mp5_0x530_530* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gw_mp5_0x530_530::InternalSwap(Gw_mp5_0x530_530* other) {
  std::swap(mp5_fcw_sensitive_, other->mp5_fcw_sensitive_);
  std::swap(mp5_icmenushift_button_, other->mp5_icmenushift_button_);
  std::swap(mp5_aeb_on_off_, other->mp5_aeb_on_off_);
  std::swap(mp5_fcw_on_off_, other->mp5_fcw_on_off_);
  std::swap(mp5_bsdswitchsts_, other->mp5_bsdswitchsts_);
  std::swap(mp5_afs_swtichsts_, other->mp5_afs_swtichsts_);
  std::swap(mp5_laneassittypereq_, other->mp5_laneassittypereq_);
  std::swap(mp5_icmenuactive_button_, other->mp5_icmenuactive_button_);
  std::swap(mp5_alarmstatus_, other->mp5_alarmstatus_);
  std::swap(mp5_alarmornot_, other->mp5_alarmornot_);
  std::swap(mp5_paakreset_req_, other->mp5_paakreset_req_);
  std::swap(mp5_cta_active_, other->mp5_cta_active_);
  std::swap(mp5_bsdlca_active_, other->mp5_bsdlca_active_);
  std::swap(mp5_tsrmenureq_, other->mp5_tsrmenureq_);
  std::swap(mp5_ldwwarning_, other->mp5_ldwwarning_);
  std::swap(mp5_ldwsensitvity_, other->mp5_ldwsensitvity_);
  std::swap(mp5_avm_angle_, other->mp5_avm_angle_);
  std::swap(mp5_avm_rotationchange_, other->mp5_avm_rotationchange_);
  std::swap(mp5_ihcmenureq_, other->mp5_ihcmenureq_);
  std::swap(mp5_doa_active_, other->mp5_doa_active_);
  std::swap(mp5_apa_available_sts_, other->mp5_apa_available_sts_);
  std::swap(mp5_tpmsautolocationsetting_, other->mp5_tpmsautolocationsetting_);
  std::swap(mp5_avm_rotationdirection_, other->mp5_avm_rotationdirection_);
  std::swap(mp5_avm_button_, other->mp5_avm_button_);
  std::swap(mp5_view_choice_, other->mp5_view_choice_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gw_mp5_0x530_530::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gw_mp5_0x530_530

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_fcw_sensitiveType mp5_fcw_sensitive = 1;
bool Gw_mp5_0x530_530::has_mp5_fcw_sensitive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_fcw_sensitive() {
  _has_bits_[0] |= 0x00000001u;
}
void Gw_mp5_0x530_530::clear_has_mp5_fcw_sensitive() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gw_mp5_0x530_530::clear_mp5_fcw_sensitive() {
  mp5_fcw_sensitive_ = 0;
  clear_has_mp5_fcw_sensitive();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_sensitiveType Gw_mp5_0x530_530::mp5_fcw_sensitive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_fcw_sensitive)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_sensitiveType >(mp5_fcw_sensitive_);
}
void Gw_mp5_0x530_530::set_mp5_fcw_sensitive(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_sensitiveType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_sensitiveType_IsValid(value));
  set_has_mp5_fcw_sensitive();
  mp5_fcw_sensitive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_fcw_sensitive)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_icmenushift_buttonType mp5_icmenushift_button = 2;
bool Gw_mp5_0x530_530::has_mp5_icmenushift_button() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_icmenushift_button() {
  _has_bits_[0] |= 0x00000002u;
}
void Gw_mp5_0x530_530::clear_has_mp5_icmenushift_button() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gw_mp5_0x530_530::clear_mp5_icmenushift_button() {
  mp5_icmenushift_button_ = 0;
  clear_has_mp5_icmenushift_button();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenushift_buttonType Gw_mp5_0x530_530::mp5_icmenushift_button() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_icmenushift_button)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenushift_buttonType >(mp5_icmenushift_button_);
}
void Gw_mp5_0x530_530::set_mp5_icmenushift_button(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenushift_buttonType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenushift_buttonType_IsValid(value));
  set_has_mp5_icmenushift_button();
  mp5_icmenushift_button_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_icmenushift_button)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_aeb_on_offType mp5_aeb_on_off = 3;
bool Gw_mp5_0x530_530::has_mp5_aeb_on_off() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_aeb_on_off() {
  _has_bits_[0] |= 0x00000004u;
}
void Gw_mp5_0x530_530::clear_has_mp5_aeb_on_off() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gw_mp5_0x530_530::clear_mp5_aeb_on_off() {
  mp5_aeb_on_off_ = 0;
  clear_has_mp5_aeb_on_off();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_aeb_on_offType Gw_mp5_0x530_530::mp5_aeb_on_off() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_aeb_on_off)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_aeb_on_offType >(mp5_aeb_on_off_);
}
void Gw_mp5_0x530_530::set_mp5_aeb_on_off(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_aeb_on_offType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_aeb_on_offType_IsValid(value));
  set_has_mp5_aeb_on_off();
  mp5_aeb_on_off_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_aeb_on_off)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_fcw_on_offType mp5_fcw_on_off = 4;
bool Gw_mp5_0x530_530::has_mp5_fcw_on_off() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_fcw_on_off() {
  _has_bits_[0] |= 0x00000008u;
}
void Gw_mp5_0x530_530::clear_has_mp5_fcw_on_off() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gw_mp5_0x530_530::clear_mp5_fcw_on_off() {
  mp5_fcw_on_off_ = 0;
  clear_has_mp5_fcw_on_off();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_on_offType Gw_mp5_0x530_530::mp5_fcw_on_off() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_fcw_on_off)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_on_offType >(mp5_fcw_on_off_);
}
void Gw_mp5_0x530_530::set_mp5_fcw_on_off(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_on_offType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_fcw_on_offType_IsValid(value));
  set_has_mp5_fcw_on_off();
  mp5_fcw_on_off_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_fcw_on_off)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_bsdswitchstsType mp5_bsdswitchsts = 5;
bool Gw_mp5_0x530_530::has_mp5_bsdswitchsts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_bsdswitchsts() {
  _has_bits_[0] |= 0x00000010u;
}
void Gw_mp5_0x530_530::clear_has_mp5_bsdswitchsts() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gw_mp5_0x530_530::clear_mp5_bsdswitchsts() {
  mp5_bsdswitchsts_ = 0;
  clear_has_mp5_bsdswitchsts();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdswitchstsType Gw_mp5_0x530_530::mp5_bsdswitchsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_bsdswitchsts)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdswitchstsType >(mp5_bsdswitchsts_);
}
void Gw_mp5_0x530_530::set_mp5_bsdswitchsts(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdswitchstsType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdswitchstsType_IsValid(value));
  set_has_mp5_bsdswitchsts();
  mp5_bsdswitchsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_bsdswitchsts)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_afs_swtichstsType mp5_afs_swtichsts = 6;
bool Gw_mp5_0x530_530::has_mp5_afs_swtichsts() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_afs_swtichsts() {
  _has_bits_[0] |= 0x00000020u;
}
void Gw_mp5_0x530_530::clear_has_mp5_afs_swtichsts() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gw_mp5_0x530_530::clear_mp5_afs_swtichsts() {
  mp5_afs_swtichsts_ = 0;
  clear_has_mp5_afs_swtichsts();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_afs_swtichstsType Gw_mp5_0x530_530::mp5_afs_swtichsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_afs_swtichsts)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_afs_swtichstsType >(mp5_afs_swtichsts_);
}
void Gw_mp5_0x530_530::set_mp5_afs_swtichsts(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_afs_swtichstsType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_afs_swtichstsType_IsValid(value));
  set_has_mp5_afs_swtichsts();
  mp5_afs_swtichsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_afs_swtichsts)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_laneassittypereqType mp5_laneassittypereq = 7;
bool Gw_mp5_0x530_530::has_mp5_laneassittypereq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_laneassittypereq() {
  _has_bits_[0] |= 0x00000040u;
}
void Gw_mp5_0x530_530::clear_has_mp5_laneassittypereq() {
  _has_bits_[0] &= ~0x00000040u;
}
void Gw_mp5_0x530_530::clear_mp5_laneassittypereq() {
  mp5_laneassittypereq_ = 0;
  clear_has_mp5_laneassittypereq();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_laneassittypereqType Gw_mp5_0x530_530::mp5_laneassittypereq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_laneassittypereq)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_laneassittypereqType >(mp5_laneassittypereq_);
}
void Gw_mp5_0x530_530::set_mp5_laneassittypereq(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_laneassittypereqType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_laneassittypereqType_IsValid(value));
  set_has_mp5_laneassittypereq();
  mp5_laneassittypereq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_laneassittypereq)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_icmenuactive_buttonType mp5_icmenuactive_button = 8;
bool Gw_mp5_0x530_530::has_mp5_icmenuactive_button() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_icmenuactive_button() {
  _has_bits_[0] |= 0x00000080u;
}
void Gw_mp5_0x530_530::clear_has_mp5_icmenuactive_button() {
  _has_bits_[0] &= ~0x00000080u;
}
void Gw_mp5_0x530_530::clear_mp5_icmenuactive_button() {
  mp5_icmenuactive_button_ = 0;
  clear_has_mp5_icmenuactive_button();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType Gw_mp5_0x530_530::mp5_icmenuactive_button() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_icmenuactive_button)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType >(mp5_icmenuactive_button_);
}
void Gw_mp5_0x530_530::set_mp5_icmenuactive_button(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_icmenuactive_buttonType_IsValid(value));
  set_has_mp5_icmenuactive_button();
  mp5_icmenuactive_button_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_icmenuactive_button)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_alarmstatusType mp5_alarmstatus = 9;
bool Gw_mp5_0x530_530::has_mp5_alarmstatus() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_alarmstatus() {
  _has_bits_[0] |= 0x00000100u;
}
void Gw_mp5_0x530_530::clear_has_mp5_alarmstatus() {
  _has_bits_[0] &= ~0x00000100u;
}
void Gw_mp5_0x530_530::clear_mp5_alarmstatus() {
  mp5_alarmstatus_ = 0;
  clear_has_mp5_alarmstatus();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmstatusType Gw_mp5_0x530_530::mp5_alarmstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_alarmstatus)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmstatusType >(mp5_alarmstatus_);
}
void Gw_mp5_0x530_530::set_mp5_alarmstatus(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmstatusType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmstatusType_IsValid(value));
  set_has_mp5_alarmstatus();
  mp5_alarmstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_alarmstatus)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_alarmornotType mp5_alarmornot = 10;
bool Gw_mp5_0x530_530::has_mp5_alarmornot() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_alarmornot() {
  _has_bits_[0] |= 0x00000200u;
}
void Gw_mp5_0x530_530::clear_has_mp5_alarmornot() {
  _has_bits_[0] &= ~0x00000200u;
}
void Gw_mp5_0x530_530::clear_mp5_alarmornot() {
  mp5_alarmornot_ = 0;
  clear_has_mp5_alarmornot();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmornotType Gw_mp5_0x530_530::mp5_alarmornot() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_alarmornot)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmornotType >(mp5_alarmornot_);
}
void Gw_mp5_0x530_530::set_mp5_alarmornot(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmornotType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_alarmornotType_IsValid(value));
  set_has_mp5_alarmornot();
  mp5_alarmornot_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_alarmornot)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_paakreset_reqType mp5_paakreset_req = 11;
bool Gw_mp5_0x530_530::has_mp5_paakreset_req() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_paakreset_req() {
  _has_bits_[0] |= 0x00000400u;
}
void Gw_mp5_0x530_530::clear_has_mp5_paakreset_req() {
  _has_bits_[0] &= ~0x00000400u;
}
void Gw_mp5_0x530_530::clear_mp5_paakreset_req() {
  mp5_paakreset_req_ = 0;
  clear_has_mp5_paakreset_req();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_paakreset_reqType Gw_mp5_0x530_530::mp5_paakreset_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_paakreset_req)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_paakreset_reqType >(mp5_paakreset_req_);
}
void Gw_mp5_0x530_530::set_mp5_paakreset_req(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_paakreset_reqType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_paakreset_reqType_IsValid(value));
  set_has_mp5_paakreset_req();
  mp5_paakreset_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_paakreset_req)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_cta_activeType mp5_cta_active = 12;
bool Gw_mp5_0x530_530::has_mp5_cta_active() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_cta_active() {
  _has_bits_[0] |= 0x00000800u;
}
void Gw_mp5_0x530_530::clear_has_mp5_cta_active() {
  _has_bits_[0] &= ~0x00000800u;
}
void Gw_mp5_0x530_530::clear_mp5_cta_active() {
  mp5_cta_active_ = 0;
  clear_has_mp5_cta_active();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_cta_activeType Gw_mp5_0x530_530::mp5_cta_active() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_cta_active)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_cta_activeType >(mp5_cta_active_);
}
void Gw_mp5_0x530_530::set_mp5_cta_active(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_cta_activeType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_cta_activeType_IsValid(value));
  set_has_mp5_cta_active();
  mp5_cta_active_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_cta_active)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_bsdlca_activeType mp5_bsdlca_active = 13;
bool Gw_mp5_0x530_530::has_mp5_bsdlca_active() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_bsdlca_active() {
  _has_bits_[0] |= 0x00001000u;
}
void Gw_mp5_0x530_530::clear_has_mp5_bsdlca_active() {
  _has_bits_[0] &= ~0x00001000u;
}
void Gw_mp5_0x530_530::clear_mp5_bsdlca_active() {
  mp5_bsdlca_active_ = 0;
  clear_has_mp5_bsdlca_active();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdlca_activeType Gw_mp5_0x530_530::mp5_bsdlca_active() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_bsdlca_active)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdlca_activeType >(mp5_bsdlca_active_);
}
void Gw_mp5_0x530_530::set_mp5_bsdlca_active(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdlca_activeType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_bsdlca_activeType_IsValid(value));
  set_has_mp5_bsdlca_active();
  mp5_bsdlca_active_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_bsdlca_active)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_tsrmenureqType mp5_tsrmenureq = 14;
bool Gw_mp5_0x530_530::has_mp5_tsrmenureq() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_tsrmenureq() {
  _has_bits_[0] |= 0x00002000u;
}
void Gw_mp5_0x530_530::clear_has_mp5_tsrmenureq() {
  _has_bits_[0] &= ~0x00002000u;
}
void Gw_mp5_0x530_530::clear_mp5_tsrmenureq() {
  mp5_tsrmenureq_ = 0;
  clear_has_mp5_tsrmenureq();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tsrmenureqType Gw_mp5_0x530_530::mp5_tsrmenureq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_tsrmenureq)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tsrmenureqType >(mp5_tsrmenureq_);
}
void Gw_mp5_0x530_530::set_mp5_tsrmenureq(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tsrmenureqType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tsrmenureqType_IsValid(value));
  set_has_mp5_tsrmenureq();
  mp5_tsrmenureq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_tsrmenureq)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ldwwarningType mp5_ldwwarning = 15;
bool Gw_mp5_0x530_530::has_mp5_ldwwarning() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_ldwwarning() {
  _has_bits_[0] |= 0x00004000u;
}
void Gw_mp5_0x530_530::clear_has_mp5_ldwwarning() {
  _has_bits_[0] &= ~0x00004000u;
}
void Gw_mp5_0x530_530::clear_mp5_ldwwarning() {
  mp5_ldwwarning_ = 0;
  clear_has_mp5_ldwwarning();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwwarningType Gw_mp5_0x530_530::mp5_ldwwarning() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_ldwwarning)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwwarningType >(mp5_ldwwarning_);
}
void Gw_mp5_0x530_530::set_mp5_ldwwarning(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwwarningType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwwarningType_IsValid(value));
  set_has_mp5_ldwwarning();
  mp5_ldwwarning_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_ldwwarning)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ldwsensitvityType mp5_ldwsensitvity = 16;
bool Gw_mp5_0x530_530::has_mp5_ldwsensitvity() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_ldwsensitvity() {
  _has_bits_[0] |= 0x00008000u;
}
void Gw_mp5_0x530_530::clear_has_mp5_ldwsensitvity() {
  _has_bits_[0] &= ~0x00008000u;
}
void Gw_mp5_0x530_530::clear_mp5_ldwsensitvity() {
  mp5_ldwsensitvity_ = 0;
  clear_has_mp5_ldwsensitvity();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwsensitvityType Gw_mp5_0x530_530::mp5_ldwsensitvity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_ldwsensitvity)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwsensitvityType >(mp5_ldwsensitvity_);
}
void Gw_mp5_0x530_530::set_mp5_ldwsensitvity(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwsensitvityType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ldwsensitvityType_IsValid(value));
  set_has_mp5_ldwsensitvity();
  mp5_ldwsensitvity_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_ldwsensitvity)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_angleType mp5_avm_angle = 17;
bool Gw_mp5_0x530_530::has_mp5_avm_angle() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_avm_angle() {
  _has_bits_[0] |= 0x00010000u;
}
void Gw_mp5_0x530_530::clear_has_mp5_avm_angle() {
  _has_bits_[0] &= ~0x00010000u;
}
void Gw_mp5_0x530_530::clear_mp5_avm_angle() {
  mp5_avm_angle_ = 0;
  clear_has_mp5_avm_angle();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_angleType Gw_mp5_0x530_530::mp5_avm_angle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_avm_angle)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_angleType >(mp5_avm_angle_);
}
void Gw_mp5_0x530_530::set_mp5_avm_angle(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_angleType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_angleType_IsValid(value));
  set_has_mp5_avm_angle();
  mp5_avm_angle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_avm_angle)
}

// optional int32 mp5_avm_rotationchange = 18;
bool Gw_mp5_0x530_530::has_mp5_avm_rotationchange() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_avm_rotationchange() {
  _has_bits_[0] |= 0x00020000u;
}
void Gw_mp5_0x530_530::clear_has_mp5_avm_rotationchange() {
  _has_bits_[0] &= ~0x00020000u;
}
void Gw_mp5_0x530_530::clear_mp5_avm_rotationchange() {
  mp5_avm_rotationchange_ = 0;
  clear_has_mp5_avm_rotationchange();
}
::google::protobuf::int32 Gw_mp5_0x530_530::mp5_avm_rotationchange() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_avm_rotationchange)
  return mp5_avm_rotationchange_;
}
void Gw_mp5_0x530_530::set_mp5_avm_rotationchange(::google::protobuf::int32 value) {
  set_has_mp5_avm_rotationchange();
  mp5_avm_rotationchange_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_avm_rotationchange)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_ihcmenureqType mp5_ihcmenureq = 19;
bool Gw_mp5_0x530_530::has_mp5_ihcmenureq() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_ihcmenureq() {
  _has_bits_[0] |= 0x00040000u;
}
void Gw_mp5_0x530_530::clear_has_mp5_ihcmenureq() {
  _has_bits_[0] &= ~0x00040000u;
}
void Gw_mp5_0x530_530::clear_mp5_ihcmenureq() {
  mp5_ihcmenureq_ = 0;
  clear_has_mp5_ihcmenureq();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ihcmenureqType Gw_mp5_0x530_530::mp5_ihcmenureq() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_ihcmenureq)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ihcmenureqType >(mp5_ihcmenureq_);
}
void Gw_mp5_0x530_530::set_mp5_ihcmenureq(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ihcmenureqType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_ihcmenureqType_IsValid(value));
  set_has_mp5_ihcmenureq();
  mp5_ihcmenureq_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_ihcmenureq)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_doa_activeType mp5_doa_active = 20;
bool Gw_mp5_0x530_530::has_mp5_doa_active() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_doa_active() {
  _has_bits_[0] |= 0x00080000u;
}
void Gw_mp5_0x530_530::clear_has_mp5_doa_active() {
  _has_bits_[0] &= ~0x00080000u;
}
void Gw_mp5_0x530_530::clear_mp5_doa_active() {
  mp5_doa_active_ = 0;
  clear_has_mp5_doa_active();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_doa_activeType Gw_mp5_0x530_530::mp5_doa_active() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_doa_active)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_doa_activeType >(mp5_doa_active_);
}
void Gw_mp5_0x530_530::set_mp5_doa_active(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_doa_activeType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_doa_activeType_IsValid(value));
  set_has_mp5_doa_active();
  mp5_doa_active_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_doa_active)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_apa_available_stsType mp5_apa_available_sts = 21;
bool Gw_mp5_0x530_530::has_mp5_apa_available_sts() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_apa_available_sts() {
  _has_bits_[0] |= 0x00100000u;
}
void Gw_mp5_0x530_530::clear_has_mp5_apa_available_sts() {
  _has_bits_[0] &= ~0x00100000u;
}
void Gw_mp5_0x530_530::clear_mp5_apa_available_sts() {
  mp5_apa_available_sts_ = 0;
  clear_has_mp5_apa_available_sts();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_apa_available_stsType Gw_mp5_0x530_530::mp5_apa_available_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_apa_available_sts)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_apa_available_stsType >(mp5_apa_available_sts_);
}
void Gw_mp5_0x530_530::set_mp5_apa_available_sts(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_apa_available_stsType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_apa_available_stsType_IsValid(value));
  set_has_mp5_apa_available_sts();
  mp5_apa_available_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_apa_available_sts)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_tpmsautolocationsettingType mp5_tpmsautolocationsetting = 22;
bool Gw_mp5_0x530_530::has_mp5_tpmsautolocationsetting() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_tpmsautolocationsetting() {
  _has_bits_[0] |= 0x00200000u;
}
void Gw_mp5_0x530_530::clear_has_mp5_tpmsautolocationsetting() {
  _has_bits_[0] &= ~0x00200000u;
}
void Gw_mp5_0x530_530::clear_mp5_tpmsautolocationsetting() {
  mp5_tpmsautolocationsetting_ = 0;
  clear_has_mp5_tpmsautolocationsetting();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType Gw_mp5_0x530_530::mp5_tpmsautolocationsetting() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_tpmsautolocationsetting)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType >(mp5_tpmsautolocationsetting_);
}
void Gw_mp5_0x530_530::set_mp5_tpmsautolocationsetting(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_tpmsautolocationsettingType_IsValid(value));
  set_has_mp5_tpmsautolocationsetting();
  mp5_tpmsautolocationsetting_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_tpmsautolocationsetting)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_rotationdirectionType mp5_avm_rotationdirection = 23;
bool Gw_mp5_0x530_530::has_mp5_avm_rotationdirection() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_avm_rotationdirection() {
  _has_bits_[0] |= 0x00400000u;
}
void Gw_mp5_0x530_530::clear_has_mp5_avm_rotationdirection() {
  _has_bits_[0] &= ~0x00400000u;
}
void Gw_mp5_0x530_530::clear_mp5_avm_rotationdirection() {
  mp5_avm_rotationdirection_ = 0;
  clear_has_mp5_avm_rotationdirection();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType Gw_mp5_0x530_530::mp5_avm_rotationdirection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_avm_rotationdirection)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType >(mp5_avm_rotationdirection_);
}
void Gw_mp5_0x530_530::set_mp5_avm_rotationdirection(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_rotationdirectionType_IsValid(value));
  set_has_mp5_avm_rotationdirection();
  mp5_avm_rotationdirection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_avm_rotationdirection)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_avm_buttonType mp5_avm_button = 24;
bool Gw_mp5_0x530_530::has_mp5_avm_button() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_avm_button() {
  _has_bits_[0] |= 0x00800000u;
}
void Gw_mp5_0x530_530::clear_has_mp5_avm_button() {
  _has_bits_[0] &= ~0x00800000u;
}
void Gw_mp5_0x530_530::clear_mp5_avm_button() {
  mp5_avm_button_ = 0;
  clear_has_mp5_avm_button();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_buttonType Gw_mp5_0x530_530::mp5_avm_button() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_avm_button)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_buttonType >(mp5_avm_button_);
}
void Gw_mp5_0x530_530::set_mp5_avm_button(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_buttonType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_avm_buttonType_IsValid(value));
  set_has_mp5_avm_button();
  mp5_avm_button_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_avm_button)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530.Mp5_view_choiceType mp5_view_choice = 25;
bool Gw_mp5_0x530_530::has_mp5_view_choice() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Gw_mp5_0x530_530::set_has_mp5_view_choice() {
  _has_bits_[0] |= 0x01000000u;
}
void Gw_mp5_0x530_530::clear_has_mp5_view_choice() {
  _has_bits_[0] &= ~0x01000000u;
}
void Gw_mp5_0x530_530::clear_mp5_view_choice() {
  mp5_view_choice_ = 0;
  clear_has_mp5_view_choice();
}
::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_view_choiceType Gw_mp5_0x530_530::mp5_view_choice() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_view_choice)
  return static_cast< ::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_view_choiceType >(mp5_view_choice_);
}
void Gw_mp5_0x530_530::set_mp5_view_choice(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_view_choiceType value) {
  assert(::jmc_auto::canbus::Gw_mp5_0x530_530_Mp5_view_choiceType_IsValid(value));
  set_has_mp5_view_choice();
  mp5_view_choice_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_mp5_0x530_530.mp5_view_choice)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mrr_frobj_0x279_279::kMrrFObjectDyFieldNumber;
const int Mrr_frobj_0x279_279::kMrrFObj0XClassFieldNumber;
const int Mrr_frobj_0x279_279::kMrrFfObjectDxFieldNumber;
const int Mrr_frobj_0x279_279::kMrrFfObjectDyFieldNumber;
const int Mrr_frobj_0x279_279::kMrrFfObj0XClassFieldNumber;
const int Mrr_frobj_0x279_279::kMrrFftargrtdetectionFieldNumber;
const int Mrr_frobj_0x279_279::kMrrPeddetectionFieldNumber;
const int Mrr_frobj_0x279_279::kMrrFObjectDxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mrr_frobj_0x279_279::Mrr_frobj_0x279_279()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Mrr_frobj_0x279_279)
}
Mrr_frobj_0x279_279::Mrr_frobj_0x279_279(const Mrr_frobj_0x279_279& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mrr_f_object_dy_, &from.mrr_f_object_dy_,
    reinterpret_cast<char*>(&mrr_f_object_dx_) -
    reinterpret_cast<char*>(&mrr_f_object_dy_) + sizeof(mrr_f_object_dx_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Mrr_frobj_0x279_279)
}

void Mrr_frobj_0x279_279::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&mrr_f_object_dy_, 0, reinterpret_cast<char*>(&mrr_f_object_dx_) -
    reinterpret_cast<char*>(&mrr_f_object_dy_) + sizeof(mrr_f_object_dx_));
}

Mrr_frobj_0x279_279::~Mrr_frobj_0x279_279() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Mrr_frobj_0x279_279)
  SharedDtor();
}

void Mrr_frobj_0x279_279::SharedDtor() {
}

void Mrr_frobj_0x279_279::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mrr_frobj_0x279_279::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mrr_frobj_0x279_279& Mrr_frobj_0x279_279::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Mrr_frobj_0x279_279* Mrr_frobj_0x279_279::New(::google::protobuf::Arena* arena) const {
  Mrr_frobj_0x279_279* n = new Mrr_frobj_0x279_279;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mrr_frobj_0x279_279::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Mrr_frobj_0x279_279)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&mrr_f_object_dy_, 0, reinterpret_cast<char*>(&mrr_f_object_dx_) -
      reinterpret_cast<char*>(&mrr_f_object_dy_) + sizeof(mrr_f_object_dx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Mrr_frobj_0x279_279::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Mrr_frobj_0x279_279)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double mrr_f_object_dy = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_mrr_f_object_dy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mrr_f_object_dy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_f_obj_0x_classType mrr_f_obj_0x_class = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_IsValid(value)) {
            set_mrr_f_obj_0x_class(static_cast< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double mrr_ff_object_dx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_mrr_ff_object_dx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mrr_ff_object_dx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double mrr_ff_object_dy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_mrr_ff_object_dy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mrr_ff_object_dy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_ff_obj_0x_classType mrr_ff_obj_0x_class = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_IsValid(value)) {
            set_mrr_ff_obj_0x_class(static_cast< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_fftargrtdetectionType mrr_fftargrtdetection = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_IsValid(value)) {
            set_mrr_fftargrtdetection(static_cast< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_peddetectionType mrr_peddetection = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_peddetectionType_IsValid(value)) {
            set_mrr_peddetection(static_cast< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_peddetectionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double mrr_f_object_dx = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_mrr_f_object_dx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mrr_f_object_dx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Mrr_frobj_0x279_279)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Mrr_frobj_0x279_279)
  return false;
#undef DO_
}

void Mrr_frobj_0x279_279::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Mrr_frobj_0x279_279)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double mrr_f_object_dy = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mrr_f_object_dy(), output);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_f_obj_0x_classType mrr_f_obj_0x_class = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mrr_f_obj_0x_class(), output);
  }

  // optional double mrr_ff_object_dx = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mrr_ff_object_dx(), output);
  }

  // optional double mrr_ff_object_dy = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->mrr_ff_object_dy(), output);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_ff_obj_0x_classType mrr_ff_obj_0x_class = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->mrr_ff_obj_0x_class(), output);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_fftargrtdetectionType mrr_fftargrtdetection = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->mrr_fftargrtdetection(), output);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_peddetectionType mrr_peddetection = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->mrr_peddetection(), output);
  }

  // optional double mrr_f_object_dx = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->mrr_f_object_dx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Mrr_frobj_0x279_279)
}

::google::protobuf::uint8* Mrr_frobj_0x279_279::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Mrr_frobj_0x279_279)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double mrr_f_object_dy = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mrr_f_object_dy(), target);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_f_obj_0x_classType mrr_f_obj_0x_class = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mrr_f_obj_0x_class(), target);
  }

  // optional double mrr_ff_object_dx = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mrr_ff_object_dx(), target);
  }

  // optional double mrr_ff_object_dy = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->mrr_ff_object_dy(), target);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_ff_obj_0x_classType mrr_ff_obj_0x_class = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->mrr_ff_obj_0x_class(), target);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_fftargrtdetectionType mrr_fftargrtdetection = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->mrr_fftargrtdetection(), target);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_peddetectionType mrr_peddetection = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->mrr_peddetection(), target);
  }

  // optional double mrr_f_object_dx = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->mrr_f_object_dx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Mrr_frobj_0x279_279)
  return target;
}

size_t Mrr_frobj_0x279_279::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Mrr_frobj_0x279_279)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double mrr_f_object_dy = 1;
    if (has_mrr_f_object_dy()) {
      total_size += 1 + 8;
    }

    // optional double mrr_ff_object_dx = 3;
    if (has_mrr_ff_object_dx()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_f_obj_0x_classType mrr_f_obj_0x_class = 2;
    if (has_mrr_f_obj_0x_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mrr_f_obj_0x_class());
    }

    // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_ff_obj_0x_classType mrr_ff_obj_0x_class = 5;
    if (has_mrr_ff_obj_0x_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mrr_ff_obj_0x_class());
    }

    // optional double mrr_ff_object_dy = 4;
    if (has_mrr_ff_object_dy()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_fftargrtdetectionType mrr_fftargrtdetection = 6;
    if (has_mrr_fftargrtdetection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mrr_fftargrtdetection());
    }

    // optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_peddetectionType mrr_peddetection = 7;
    if (has_mrr_peddetection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mrr_peddetection());
    }

    // optional double mrr_f_object_dx = 8;
    if (has_mrr_f_object_dx()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mrr_frobj_0x279_279::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Mrr_frobj_0x279_279)
  GOOGLE_DCHECK_NE(&from, this);
  const Mrr_frobj_0x279_279* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mrr_frobj_0x279_279>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Mrr_frobj_0x279_279)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Mrr_frobj_0x279_279)
    MergeFrom(*source);
  }
}

void Mrr_frobj_0x279_279::MergeFrom(const Mrr_frobj_0x279_279& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Mrr_frobj_0x279_279)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mrr_f_object_dy_ = from.mrr_f_object_dy_;
    }
    if (cached_has_bits & 0x00000002u) {
      mrr_ff_object_dx_ = from.mrr_ff_object_dx_;
    }
    if (cached_has_bits & 0x00000004u) {
      mrr_f_obj_0x_class_ = from.mrr_f_obj_0x_class_;
    }
    if (cached_has_bits & 0x00000008u) {
      mrr_ff_obj_0x_class_ = from.mrr_ff_obj_0x_class_;
    }
    if (cached_has_bits & 0x00000010u) {
      mrr_ff_object_dy_ = from.mrr_ff_object_dy_;
    }
    if (cached_has_bits & 0x00000020u) {
      mrr_fftargrtdetection_ = from.mrr_fftargrtdetection_;
    }
    if (cached_has_bits & 0x00000040u) {
      mrr_peddetection_ = from.mrr_peddetection_;
    }
    if (cached_has_bits & 0x00000080u) {
      mrr_f_object_dx_ = from.mrr_f_object_dx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Mrr_frobj_0x279_279::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Mrr_frobj_0x279_279)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mrr_frobj_0x279_279::CopyFrom(const Mrr_frobj_0x279_279& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Mrr_frobj_0x279_279)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mrr_frobj_0x279_279::IsInitialized() const {
  return true;
}

void Mrr_frobj_0x279_279::Swap(Mrr_frobj_0x279_279* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mrr_frobj_0x279_279::InternalSwap(Mrr_frobj_0x279_279* other) {
  std::swap(mrr_f_object_dy_, other->mrr_f_object_dy_);
  std::swap(mrr_ff_object_dx_, other->mrr_ff_object_dx_);
  std::swap(mrr_f_obj_0x_class_, other->mrr_f_obj_0x_class_);
  std::swap(mrr_ff_obj_0x_class_, other->mrr_ff_obj_0x_class_);
  std::swap(mrr_ff_object_dy_, other->mrr_ff_object_dy_);
  std::swap(mrr_fftargrtdetection_, other->mrr_fftargrtdetection_);
  std::swap(mrr_peddetection_, other->mrr_peddetection_);
  std::swap(mrr_f_object_dx_, other->mrr_f_object_dx_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mrr_frobj_0x279_279::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mrr_frobj_0x279_279

// optional double mrr_f_object_dy = 1;
bool Mrr_frobj_0x279_279::has_mrr_f_object_dy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Mrr_frobj_0x279_279::set_has_mrr_f_object_dy() {
  _has_bits_[0] |= 0x00000001u;
}
void Mrr_frobj_0x279_279::clear_has_mrr_f_object_dy() {
  _has_bits_[0] &= ~0x00000001u;
}
void Mrr_frobj_0x279_279::clear_mrr_f_object_dy() {
  mrr_f_object_dy_ = 0;
  clear_has_mrr_f_object_dy();
}
double Mrr_frobj_0x279_279::mrr_f_object_dy() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_f_object_dy)
  return mrr_f_object_dy_;
}
void Mrr_frobj_0x279_279::set_mrr_f_object_dy(double value) {
  set_has_mrr_f_object_dy();
  mrr_f_object_dy_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_f_object_dy)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_f_obj_0x_classType mrr_f_obj_0x_class = 2;
bool Mrr_frobj_0x279_279::has_mrr_f_obj_0x_class() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Mrr_frobj_0x279_279::set_has_mrr_f_obj_0x_class() {
  _has_bits_[0] |= 0x00000004u;
}
void Mrr_frobj_0x279_279::clear_has_mrr_f_obj_0x_class() {
  _has_bits_[0] &= ~0x00000004u;
}
void Mrr_frobj_0x279_279::clear_mrr_f_obj_0x_class() {
  mrr_f_obj_0x_class_ = 0;
  clear_has_mrr_f_obj_0x_class();
}
::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType Mrr_frobj_0x279_279::mrr_f_obj_0x_class() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_f_obj_0x_class)
  return static_cast< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType >(mrr_f_obj_0x_class_);
}
void Mrr_frobj_0x279_279::set_mrr_f_obj_0x_class(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType value) {
  assert(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_f_obj_0x_classType_IsValid(value));
  set_has_mrr_f_obj_0x_class();
  mrr_f_obj_0x_class_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_f_obj_0x_class)
}

// optional double mrr_ff_object_dx = 3;
bool Mrr_frobj_0x279_279::has_mrr_ff_object_dx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Mrr_frobj_0x279_279::set_has_mrr_ff_object_dx() {
  _has_bits_[0] |= 0x00000002u;
}
void Mrr_frobj_0x279_279::clear_has_mrr_ff_object_dx() {
  _has_bits_[0] &= ~0x00000002u;
}
void Mrr_frobj_0x279_279::clear_mrr_ff_object_dx() {
  mrr_ff_object_dx_ = 0;
  clear_has_mrr_ff_object_dx();
}
double Mrr_frobj_0x279_279::mrr_ff_object_dx() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_ff_object_dx)
  return mrr_ff_object_dx_;
}
void Mrr_frobj_0x279_279::set_mrr_ff_object_dx(double value) {
  set_has_mrr_ff_object_dx();
  mrr_ff_object_dx_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_ff_object_dx)
}

// optional double mrr_ff_object_dy = 4;
bool Mrr_frobj_0x279_279::has_mrr_ff_object_dy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Mrr_frobj_0x279_279::set_has_mrr_ff_object_dy() {
  _has_bits_[0] |= 0x00000010u;
}
void Mrr_frobj_0x279_279::clear_has_mrr_ff_object_dy() {
  _has_bits_[0] &= ~0x00000010u;
}
void Mrr_frobj_0x279_279::clear_mrr_ff_object_dy() {
  mrr_ff_object_dy_ = 0;
  clear_has_mrr_ff_object_dy();
}
double Mrr_frobj_0x279_279::mrr_ff_object_dy() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_ff_object_dy)
  return mrr_ff_object_dy_;
}
void Mrr_frobj_0x279_279::set_mrr_ff_object_dy(double value) {
  set_has_mrr_ff_object_dy();
  mrr_ff_object_dy_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_ff_object_dy)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_ff_obj_0x_classType mrr_ff_obj_0x_class = 5;
bool Mrr_frobj_0x279_279::has_mrr_ff_obj_0x_class() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Mrr_frobj_0x279_279::set_has_mrr_ff_obj_0x_class() {
  _has_bits_[0] |= 0x00000008u;
}
void Mrr_frobj_0x279_279::clear_has_mrr_ff_obj_0x_class() {
  _has_bits_[0] &= ~0x00000008u;
}
void Mrr_frobj_0x279_279::clear_mrr_ff_obj_0x_class() {
  mrr_ff_obj_0x_class_ = 0;
  clear_has_mrr_ff_obj_0x_class();
}
::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType Mrr_frobj_0x279_279::mrr_ff_obj_0x_class() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_ff_obj_0x_class)
  return static_cast< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType >(mrr_ff_obj_0x_class_);
}
void Mrr_frobj_0x279_279::set_mrr_ff_obj_0x_class(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType value) {
  assert(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_ff_obj_0x_classType_IsValid(value));
  set_has_mrr_ff_obj_0x_class();
  mrr_ff_obj_0x_class_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_ff_obj_0x_class)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_fftargrtdetectionType mrr_fftargrtdetection = 6;
bool Mrr_frobj_0x279_279::has_mrr_fftargrtdetection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Mrr_frobj_0x279_279::set_has_mrr_fftargrtdetection() {
  _has_bits_[0] |= 0x00000020u;
}
void Mrr_frobj_0x279_279::clear_has_mrr_fftargrtdetection() {
  _has_bits_[0] &= ~0x00000020u;
}
void Mrr_frobj_0x279_279::clear_mrr_fftargrtdetection() {
  mrr_fftargrtdetection_ = 0;
  clear_has_mrr_fftargrtdetection();
}
::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType Mrr_frobj_0x279_279::mrr_fftargrtdetection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_fftargrtdetection)
  return static_cast< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType >(mrr_fftargrtdetection_);
}
void Mrr_frobj_0x279_279::set_mrr_fftargrtdetection(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType value) {
  assert(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_fftargrtdetectionType_IsValid(value));
  set_has_mrr_fftargrtdetection();
  mrr_fftargrtdetection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_fftargrtdetection)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x279_279.Mrr_peddetectionType mrr_peddetection = 7;
bool Mrr_frobj_0x279_279::has_mrr_peddetection() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Mrr_frobj_0x279_279::set_has_mrr_peddetection() {
  _has_bits_[0] |= 0x00000040u;
}
void Mrr_frobj_0x279_279::clear_has_mrr_peddetection() {
  _has_bits_[0] &= ~0x00000040u;
}
void Mrr_frobj_0x279_279::clear_mrr_peddetection() {
  mrr_peddetection_ = 0;
  clear_has_mrr_peddetection();
}
::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_peddetectionType Mrr_frobj_0x279_279::mrr_peddetection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_peddetection)
  return static_cast< ::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_peddetectionType >(mrr_peddetection_);
}
void Mrr_frobj_0x279_279::set_mrr_peddetection(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_peddetectionType value) {
  assert(::jmc_auto::canbus::Mrr_frobj_0x279_279_Mrr_peddetectionType_IsValid(value));
  set_has_mrr_peddetection();
  mrr_peddetection_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_peddetection)
}

// optional double mrr_f_object_dx = 8;
bool Mrr_frobj_0x279_279::has_mrr_f_object_dx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Mrr_frobj_0x279_279::set_has_mrr_f_object_dx() {
  _has_bits_[0] |= 0x00000080u;
}
void Mrr_frobj_0x279_279::clear_has_mrr_f_object_dx() {
  _has_bits_[0] &= ~0x00000080u;
}
void Mrr_frobj_0x279_279::clear_mrr_f_object_dx() {
  mrr_f_object_dx_ = 0;
  clear_has_mrr_f_object_dx();
}
double Mrr_frobj_0x279_279::mrr_f_object_dx() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_f_object_dx)
  return mrr_f_object_dx_;
}
void Mrr_frobj_0x279_279::set_mrr_f_object_dx(double value) {
  set_has_mrr_f_object_dx();
  mrr_f_object_dx_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Mrr_frobj_0x279_279.mrr_f_object_dx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gw_ic_0x510_510::kIcAirbagtelltalebehaviorFieldNumber;
const int Gw_ic_0x510_510::kIcVehbrkpumpErrIcFieldNumber;
const int Gw_ic_0x510_510::kIcDisfailFieldNumber;
const int Gw_ic_0x510_510::kIcQdashaccfailFieldNumber;
const int Gw_ic_0x510_510::kIcVehspdHmiFieldNumber;
const int Gw_ic_0x510_510::kIcRollingCounter0X510FieldNumber;
const int Gw_ic_0x510_510::kIcChecksum0X510FieldNumber;
const int Gw_ic_0x510_510::kIcOdometermastervalueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gw_ic_0x510_510::Gw_ic_0x510_510()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gw_ic_0x510_510)
}
Gw_ic_0x510_510::Gw_ic_0x510_510(const Gw_ic_0x510_510& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ic_airbagtelltalebehavior_, &from.ic_airbagtelltalebehavior_,
    reinterpret_cast<char*>(&ic_checksum_0x510_) -
    reinterpret_cast<char*>(&ic_airbagtelltalebehavior_) + sizeof(ic_checksum_0x510_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gw_ic_0x510_510)
}

void Gw_ic_0x510_510::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ic_airbagtelltalebehavior_, 0, reinterpret_cast<char*>(&ic_checksum_0x510_) -
    reinterpret_cast<char*>(&ic_airbagtelltalebehavior_) + sizeof(ic_checksum_0x510_));
}

Gw_ic_0x510_510::~Gw_ic_0x510_510() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gw_ic_0x510_510)
  SharedDtor();
}

void Gw_ic_0x510_510::SharedDtor() {
}

void Gw_ic_0x510_510::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gw_ic_0x510_510::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gw_ic_0x510_510& Gw_ic_0x510_510::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gw_ic_0x510_510* Gw_ic_0x510_510::New(::google::protobuf::Arena* arena) const {
  Gw_ic_0x510_510* n = new Gw_ic_0x510_510;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gw_ic_0x510_510::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gw_ic_0x510_510)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&ic_airbagtelltalebehavior_, 0, reinterpret_cast<char*>(&ic_checksum_0x510_) -
      reinterpret_cast<char*>(&ic_airbagtelltalebehavior_) + sizeof(ic_checksum_0x510_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gw_ic_0x510_510::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gw_ic_0x510_510)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_airbagtelltalebehaviorType ic_airbagtelltalebehavior = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IsValid(value)) {
            set_ic_airbagtelltalebehavior(static_cast< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_vehbrkpump_err_icType ic_vehbrkpump_err_ic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_IsValid(value)) {
            set_ic_vehbrkpump_err_ic(static_cast< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_vehbrkpump_err_icType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_disfailType ic_disfail = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ic_0x510_510_Ic_disfailType_IsValid(value)) {
            set_ic_disfail(static_cast< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_disfailType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_qdashaccfailType ic_qdashaccfail = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ic_0x510_510_Ic_qdashaccfailType_IsValid(value)) {
            set_ic_qdashaccfail(static_cast< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_qdashaccfailType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ic_vehspd_hmi = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ic_vehspd_hmi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ic_vehspd_hmi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ic_rolling_counter_0x510 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ic_rolling_counter_0x510();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ic_rolling_counter_0x510_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ic_checksum_0x510 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_ic_checksum_0x510();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ic_checksum_0x510_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ic_odometermastervalue = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_ic_odometermastervalue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ic_odometermastervalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gw_ic_0x510_510)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gw_ic_0x510_510)
  return false;
#undef DO_
}

void Gw_ic_0x510_510::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gw_ic_0x510_510)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_airbagtelltalebehaviorType ic_airbagtelltalebehavior = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ic_airbagtelltalebehavior(), output);
  }

  // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_vehbrkpump_err_icType ic_vehbrkpump_err_ic = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ic_vehbrkpump_err_ic(), output);
  }

  // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_disfailType ic_disfail = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ic_disfail(), output);
  }

  // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_qdashaccfailType ic_qdashaccfail = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ic_qdashaccfail(), output);
  }

  // optional int32 ic_vehspd_hmi = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ic_vehspd_hmi(), output);
  }

  // optional int32 ic_rolling_counter_0x510 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ic_rolling_counter_0x510(), output);
  }

  // optional int32 ic_checksum_0x510 = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ic_checksum_0x510(), output);
  }

  // optional double ic_odometermastervalue = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ic_odometermastervalue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gw_ic_0x510_510)
}

::google::protobuf::uint8* Gw_ic_0x510_510::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gw_ic_0x510_510)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_airbagtelltalebehaviorType ic_airbagtelltalebehavior = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ic_airbagtelltalebehavior(), target);
  }

  // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_vehbrkpump_err_icType ic_vehbrkpump_err_ic = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ic_vehbrkpump_err_ic(), target);
  }

  // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_disfailType ic_disfail = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ic_disfail(), target);
  }

  // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_qdashaccfailType ic_qdashaccfail = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ic_qdashaccfail(), target);
  }

  // optional int32 ic_vehspd_hmi = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ic_vehspd_hmi(), target);
  }

  // optional int32 ic_rolling_counter_0x510 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ic_rolling_counter_0x510(), target);
  }

  // optional int32 ic_checksum_0x510 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ic_checksum_0x510(), target);
  }

  // optional double ic_odometermastervalue = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ic_odometermastervalue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gw_ic_0x510_510)
  return target;
}

size_t Gw_ic_0x510_510::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gw_ic_0x510_510)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_airbagtelltalebehaviorType ic_airbagtelltalebehavior = 1;
    if (has_ic_airbagtelltalebehavior()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ic_airbagtelltalebehavior());
    }

    // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_vehbrkpump_err_icType ic_vehbrkpump_err_ic = 2;
    if (has_ic_vehbrkpump_err_ic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ic_vehbrkpump_err_ic());
    }

    // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_disfailType ic_disfail = 3;
    if (has_ic_disfail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ic_disfail());
    }

    // optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_qdashaccfailType ic_qdashaccfail = 4;
    if (has_ic_qdashaccfail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ic_qdashaccfail());
    }

    // optional int32 ic_vehspd_hmi = 5;
    if (has_ic_vehspd_hmi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ic_vehspd_hmi());
    }

    // optional int32 ic_rolling_counter_0x510 = 6;
    if (has_ic_rolling_counter_0x510()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ic_rolling_counter_0x510());
    }

    // optional double ic_odometermastervalue = 8;
    if (has_ic_odometermastervalue()) {
      total_size += 1 + 8;
    }

    // optional int32 ic_checksum_0x510 = 7;
    if (has_ic_checksum_0x510()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ic_checksum_0x510());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gw_ic_0x510_510::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gw_ic_0x510_510)
  GOOGLE_DCHECK_NE(&from, this);
  const Gw_ic_0x510_510* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gw_ic_0x510_510>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gw_ic_0x510_510)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gw_ic_0x510_510)
    MergeFrom(*source);
  }
}

void Gw_ic_0x510_510::MergeFrom(const Gw_ic_0x510_510& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gw_ic_0x510_510)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      ic_airbagtelltalebehavior_ = from.ic_airbagtelltalebehavior_;
    }
    if (cached_has_bits & 0x00000002u) {
      ic_vehbrkpump_err_ic_ = from.ic_vehbrkpump_err_ic_;
    }
    if (cached_has_bits & 0x00000004u) {
      ic_disfail_ = from.ic_disfail_;
    }
    if (cached_has_bits & 0x00000008u) {
      ic_qdashaccfail_ = from.ic_qdashaccfail_;
    }
    if (cached_has_bits & 0x00000010u) {
      ic_vehspd_hmi_ = from.ic_vehspd_hmi_;
    }
    if (cached_has_bits & 0x00000020u) {
      ic_rolling_counter_0x510_ = from.ic_rolling_counter_0x510_;
    }
    if (cached_has_bits & 0x00000040u) {
      ic_odometermastervalue_ = from.ic_odometermastervalue_;
    }
    if (cached_has_bits & 0x00000080u) {
      ic_checksum_0x510_ = from.ic_checksum_0x510_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gw_ic_0x510_510::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gw_ic_0x510_510)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gw_ic_0x510_510::CopyFrom(const Gw_ic_0x510_510& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gw_ic_0x510_510)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gw_ic_0x510_510::IsInitialized() const {
  return true;
}

void Gw_ic_0x510_510::Swap(Gw_ic_0x510_510* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gw_ic_0x510_510::InternalSwap(Gw_ic_0x510_510* other) {
  std::swap(ic_airbagtelltalebehavior_, other->ic_airbagtelltalebehavior_);
  std::swap(ic_vehbrkpump_err_ic_, other->ic_vehbrkpump_err_ic_);
  std::swap(ic_disfail_, other->ic_disfail_);
  std::swap(ic_qdashaccfail_, other->ic_qdashaccfail_);
  std::swap(ic_vehspd_hmi_, other->ic_vehspd_hmi_);
  std::swap(ic_rolling_counter_0x510_, other->ic_rolling_counter_0x510_);
  std::swap(ic_odometermastervalue_, other->ic_odometermastervalue_);
  std::swap(ic_checksum_0x510_, other->ic_checksum_0x510_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gw_ic_0x510_510::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gw_ic_0x510_510

// optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_airbagtelltalebehaviorType ic_airbagtelltalebehavior = 1;
bool Gw_ic_0x510_510::has_ic_airbagtelltalebehavior() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gw_ic_0x510_510::set_has_ic_airbagtelltalebehavior() {
  _has_bits_[0] |= 0x00000001u;
}
void Gw_ic_0x510_510::clear_has_ic_airbagtelltalebehavior() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gw_ic_0x510_510::clear_ic_airbagtelltalebehavior() {
  ic_airbagtelltalebehavior_ = 0;
  clear_has_ic_airbagtelltalebehavior();
}
::jmc_auto::canbus::Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType Gw_ic_0x510_510::ic_airbagtelltalebehavior() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_0x510_510.ic_airbagtelltalebehavior)
  return static_cast< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType >(ic_airbagtelltalebehavior_);
}
void Gw_ic_0x510_510::set_ic_airbagtelltalebehavior(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType value) {
  assert(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_airbagtelltalebehaviorType_IsValid(value));
  set_has_ic_airbagtelltalebehavior();
  ic_airbagtelltalebehavior_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_0x510_510.ic_airbagtelltalebehavior)
}

// optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_vehbrkpump_err_icType ic_vehbrkpump_err_ic = 2;
bool Gw_ic_0x510_510::has_ic_vehbrkpump_err_ic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gw_ic_0x510_510::set_has_ic_vehbrkpump_err_ic() {
  _has_bits_[0] |= 0x00000002u;
}
void Gw_ic_0x510_510::clear_has_ic_vehbrkpump_err_ic() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gw_ic_0x510_510::clear_ic_vehbrkpump_err_ic() {
  ic_vehbrkpump_err_ic_ = 0;
  clear_has_ic_vehbrkpump_err_ic();
}
::jmc_auto::canbus::Gw_ic_0x510_510_Ic_vehbrkpump_err_icType Gw_ic_0x510_510::ic_vehbrkpump_err_ic() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_0x510_510.ic_vehbrkpump_err_ic)
  return static_cast< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_vehbrkpump_err_icType >(ic_vehbrkpump_err_ic_);
}
void Gw_ic_0x510_510::set_ic_vehbrkpump_err_ic(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_vehbrkpump_err_icType value) {
  assert(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_vehbrkpump_err_icType_IsValid(value));
  set_has_ic_vehbrkpump_err_ic();
  ic_vehbrkpump_err_ic_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_0x510_510.ic_vehbrkpump_err_ic)
}

// optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_disfailType ic_disfail = 3;
bool Gw_ic_0x510_510::has_ic_disfail() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gw_ic_0x510_510::set_has_ic_disfail() {
  _has_bits_[0] |= 0x00000004u;
}
void Gw_ic_0x510_510::clear_has_ic_disfail() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gw_ic_0x510_510::clear_ic_disfail() {
  ic_disfail_ = 0;
  clear_has_ic_disfail();
}
::jmc_auto::canbus::Gw_ic_0x510_510_Ic_disfailType Gw_ic_0x510_510::ic_disfail() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_0x510_510.ic_disfail)
  return static_cast< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_disfailType >(ic_disfail_);
}
void Gw_ic_0x510_510::set_ic_disfail(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_disfailType value) {
  assert(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_disfailType_IsValid(value));
  set_has_ic_disfail();
  ic_disfail_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_0x510_510.ic_disfail)
}

// optional .jmc_auto.canbus.Gw_ic_0x510_510.Ic_qdashaccfailType ic_qdashaccfail = 4;
bool Gw_ic_0x510_510::has_ic_qdashaccfail() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gw_ic_0x510_510::set_has_ic_qdashaccfail() {
  _has_bits_[0] |= 0x00000008u;
}
void Gw_ic_0x510_510::clear_has_ic_qdashaccfail() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gw_ic_0x510_510::clear_ic_qdashaccfail() {
  ic_qdashaccfail_ = 0;
  clear_has_ic_qdashaccfail();
}
::jmc_auto::canbus::Gw_ic_0x510_510_Ic_qdashaccfailType Gw_ic_0x510_510::ic_qdashaccfail() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_0x510_510.ic_qdashaccfail)
  return static_cast< ::jmc_auto::canbus::Gw_ic_0x510_510_Ic_qdashaccfailType >(ic_qdashaccfail_);
}
void Gw_ic_0x510_510::set_ic_qdashaccfail(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_qdashaccfailType value) {
  assert(::jmc_auto::canbus::Gw_ic_0x510_510_Ic_qdashaccfailType_IsValid(value));
  set_has_ic_qdashaccfail();
  ic_qdashaccfail_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_0x510_510.ic_qdashaccfail)
}

// optional int32 ic_vehspd_hmi = 5;
bool Gw_ic_0x510_510::has_ic_vehspd_hmi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gw_ic_0x510_510::set_has_ic_vehspd_hmi() {
  _has_bits_[0] |= 0x00000010u;
}
void Gw_ic_0x510_510::clear_has_ic_vehspd_hmi() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gw_ic_0x510_510::clear_ic_vehspd_hmi() {
  ic_vehspd_hmi_ = 0;
  clear_has_ic_vehspd_hmi();
}
::google::protobuf::int32 Gw_ic_0x510_510::ic_vehspd_hmi() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_0x510_510.ic_vehspd_hmi)
  return ic_vehspd_hmi_;
}
void Gw_ic_0x510_510::set_ic_vehspd_hmi(::google::protobuf::int32 value) {
  set_has_ic_vehspd_hmi();
  ic_vehspd_hmi_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_0x510_510.ic_vehspd_hmi)
}

// optional int32 ic_rolling_counter_0x510 = 6;
bool Gw_ic_0x510_510::has_ic_rolling_counter_0x510() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gw_ic_0x510_510::set_has_ic_rolling_counter_0x510() {
  _has_bits_[0] |= 0x00000020u;
}
void Gw_ic_0x510_510::clear_has_ic_rolling_counter_0x510() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gw_ic_0x510_510::clear_ic_rolling_counter_0x510() {
  ic_rolling_counter_0x510_ = 0;
  clear_has_ic_rolling_counter_0x510();
}
::google::protobuf::int32 Gw_ic_0x510_510::ic_rolling_counter_0x510() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_0x510_510.ic_rolling_counter_0x510)
  return ic_rolling_counter_0x510_;
}
void Gw_ic_0x510_510::set_ic_rolling_counter_0x510(::google::protobuf::int32 value) {
  set_has_ic_rolling_counter_0x510();
  ic_rolling_counter_0x510_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_0x510_510.ic_rolling_counter_0x510)
}

// optional int32 ic_checksum_0x510 = 7;
bool Gw_ic_0x510_510::has_ic_checksum_0x510() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Gw_ic_0x510_510::set_has_ic_checksum_0x510() {
  _has_bits_[0] |= 0x00000080u;
}
void Gw_ic_0x510_510::clear_has_ic_checksum_0x510() {
  _has_bits_[0] &= ~0x00000080u;
}
void Gw_ic_0x510_510::clear_ic_checksum_0x510() {
  ic_checksum_0x510_ = 0;
  clear_has_ic_checksum_0x510();
}
::google::protobuf::int32 Gw_ic_0x510_510::ic_checksum_0x510() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_0x510_510.ic_checksum_0x510)
  return ic_checksum_0x510_;
}
void Gw_ic_0x510_510::set_ic_checksum_0x510(::google::protobuf::int32 value) {
  set_has_ic_checksum_0x510();
  ic_checksum_0x510_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_0x510_510.ic_checksum_0x510)
}

// optional double ic_odometermastervalue = 8;
bool Gw_ic_0x510_510::has_ic_odometermastervalue() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Gw_ic_0x510_510::set_has_ic_odometermastervalue() {
  _has_bits_[0] |= 0x00000040u;
}
void Gw_ic_0x510_510::clear_has_ic_odometermastervalue() {
  _has_bits_[0] &= ~0x00000040u;
}
void Gw_ic_0x510_510::clear_ic_odometermastervalue() {
  ic_odometermastervalue_ = 0;
  clear_has_ic_odometermastervalue();
}
double Gw_ic_0x510_510::ic_odometermastervalue() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_0x510_510.ic_odometermastervalue)
  return ic_odometermastervalue_;
}
void Gw_ic_0x510_510::set_ic_odometermastervalue(double value) {
  set_has_ic_odometermastervalue();
  ic_odometermastervalue_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_0x510_510.ic_odometermastervalue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esp_tq_0x217_217::kEspTqdecreqdbyespslowFieldNumber;
const int Esp_tq_0x217_217::kEspTqinccreqdbyespFieldNumber;
const int Esp_tq_0x217_217::kRollingCounter0X217FieldNumber;
const int Esp_tq_0x217_217::kEspTrqincReqFieldNumber;
const int Esp_tq_0x217_217::kEspTrqredReqFieldNumber;
const int Esp_tq_0x217_217::kChecksum0X217FieldNumber;
const int Esp_tq_0x217_217::kEspTqdecreqdbyespfastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esp_tq_0x217_217::Esp_tq_0x217_217()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Esp_tq_0x217_217)
}
Esp_tq_0x217_217::Esp_tq_0x217_217(const Esp_tq_0x217_217& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&esp_tqdecreqdbyespslow_, &from.esp_tqdecreqdbyespslow_,
    reinterpret_cast<char*>(&esp_tqdecreqdbyespfast_) -
    reinterpret_cast<char*>(&esp_tqdecreqdbyespslow_) + sizeof(esp_tqdecreqdbyespfast_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Esp_tq_0x217_217)
}

void Esp_tq_0x217_217::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&esp_tqdecreqdbyespslow_, 0, reinterpret_cast<char*>(&esp_tqdecreqdbyespfast_) -
    reinterpret_cast<char*>(&esp_tqdecreqdbyespslow_) + sizeof(esp_tqdecreqdbyespfast_));
}

Esp_tq_0x217_217::~Esp_tq_0x217_217() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Esp_tq_0x217_217)
  SharedDtor();
}

void Esp_tq_0x217_217::SharedDtor() {
}

void Esp_tq_0x217_217::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esp_tq_0x217_217::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esp_tq_0x217_217& Esp_tq_0x217_217::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esp_tq_0x217_217* Esp_tq_0x217_217::New(::google::protobuf::Arena* arena) const {
  Esp_tq_0x217_217* n = new Esp_tq_0x217_217;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esp_tq_0x217_217::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Esp_tq_0x217_217)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&esp_tqdecreqdbyespslow_, 0, reinterpret_cast<char*>(&esp_tqdecreqdbyespfast_) -
      reinterpret_cast<char*>(&esp_tqdecreqdbyespslow_) + sizeof(esp_tqdecreqdbyespfast_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esp_tq_0x217_217::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Esp_tq_0x217_217)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double esp_tqdecreqdbyespslow = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_esp_tqdecreqdbyespslow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &esp_tqdecreqdbyespslow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double esp_tqinccreqdbyesp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_esp_tqinccreqdbyesp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &esp_tqinccreqdbyesp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x217 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_rolling_counter_0x217();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x217_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_tq_0x217_217.Esp_trqinc_reqType esp_trqinc_req = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqinc_reqType_IsValid(value)) {
            set_esp_trqinc_req(static_cast< ::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqinc_reqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_tq_0x217_217.Esp_trqred_reqType esp_trqred_req = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqred_reqType_IsValid(value)) {
            set_esp_trqred_req(static_cast< ::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqred_reqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x217 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_checksum_0x217();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x217_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double esp_tqdecreqdbyespfast = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_esp_tqdecreqdbyespfast();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &esp_tqdecreqdbyespfast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Esp_tq_0x217_217)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Esp_tq_0x217_217)
  return false;
#undef DO_
}

void Esp_tq_0x217_217::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Esp_tq_0x217_217)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double esp_tqdecreqdbyespslow = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->esp_tqdecreqdbyespslow(), output);
  }

  // optional double esp_tqinccreqdbyesp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->esp_tqinccreqdbyesp(), output);
  }

  // optional int32 rolling_counter_0x217 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rolling_counter_0x217(), output);
  }

  // optional .jmc_auto.canbus.Esp_tq_0x217_217.Esp_trqinc_reqType esp_trqinc_req = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->esp_trqinc_req(), output);
  }

  // optional .jmc_auto.canbus.Esp_tq_0x217_217.Esp_trqred_reqType esp_trqred_req = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->esp_trqred_req(), output);
  }

  // optional int32 checksum_0x217 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->checksum_0x217(), output);
  }

  // optional double esp_tqdecreqdbyespfast = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->esp_tqdecreqdbyespfast(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Esp_tq_0x217_217)
}

::google::protobuf::uint8* Esp_tq_0x217_217::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Esp_tq_0x217_217)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double esp_tqdecreqdbyespslow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->esp_tqdecreqdbyespslow(), target);
  }

  // optional double esp_tqinccreqdbyesp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->esp_tqinccreqdbyesp(), target);
  }

  // optional int32 rolling_counter_0x217 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rolling_counter_0x217(), target);
  }

  // optional .jmc_auto.canbus.Esp_tq_0x217_217.Esp_trqinc_reqType esp_trqinc_req = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->esp_trqinc_req(), target);
  }

  // optional .jmc_auto.canbus.Esp_tq_0x217_217.Esp_trqred_reqType esp_trqred_req = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->esp_trqred_req(), target);
  }

  // optional int32 checksum_0x217 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->checksum_0x217(), target);
  }

  // optional double esp_tqdecreqdbyespfast = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->esp_tqdecreqdbyespfast(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Esp_tq_0x217_217)
  return target;
}

size_t Esp_tq_0x217_217::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Esp_tq_0x217_217)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional double esp_tqdecreqdbyespslow = 1;
    if (has_esp_tqdecreqdbyespslow()) {
      total_size += 1 + 8;
    }

    // optional double esp_tqinccreqdbyesp = 2;
    if (has_esp_tqinccreqdbyesp()) {
      total_size += 1 + 8;
    }

    // optional int32 rolling_counter_0x217 = 3;
    if (has_rolling_counter_0x217()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x217());
    }

    // optional .jmc_auto.canbus.Esp_tq_0x217_217.Esp_trqinc_reqType esp_trqinc_req = 4;
    if (has_esp_trqinc_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_trqinc_req());
    }

    // optional .jmc_auto.canbus.Esp_tq_0x217_217.Esp_trqred_reqType esp_trqred_req = 5;
    if (has_esp_trqred_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_trqred_req());
    }

    // optional int32 checksum_0x217 = 6;
    if (has_checksum_0x217()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x217());
    }

    // optional double esp_tqdecreqdbyespfast = 7;
    if (has_esp_tqdecreqdbyespfast()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esp_tq_0x217_217::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Esp_tq_0x217_217)
  GOOGLE_DCHECK_NE(&from, this);
  const Esp_tq_0x217_217* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esp_tq_0x217_217>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Esp_tq_0x217_217)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Esp_tq_0x217_217)
    MergeFrom(*source);
  }
}

void Esp_tq_0x217_217::MergeFrom(const Esp_tq_0x217_217& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Esp_tq_0x217_217)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      esp_tqdecreqdbyespslow_ = from.esp_tqdecreqdbyespslow_;
    }
    if (cached_has_bits & 0x00000002u) {
      esp_tqinccreqdbyesp_ = from.esp_tqinccreqdbyesp_;
    }
    if (cached_has_bits & 0x00000004u) {
      rolling_counter_0x217_ = from.rolling_counter_0x217_;
    }
    if (cached_has_bits & 0x00000008u) {
      esp_trqinc_req_ = from.esp_trqinc_req_;
    }
    if (cached_has_bits & 0x00000010u) {
      esp_trqred_req_ = from.esp_trqred_req_;
    }
    if (cached_has_bits & 0x00000020u) {
      checksum_0x217_ = from.checksum_0x217_;
    }
    if (cached_has_bits & 0x00000040u) {
      esp_tqdecreqdbyespfast_ = from.esp_tqdecreqdbyespfast_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esp_tq_0x217_217::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Esp_tq_0x217_217)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esp_tq_0x217_217::CopyFrom(const Esp_tq_0x217_217& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Esp_tq_0x217_217)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esp_tq_0x217_217::IsInitialized() const {
  return true;
}

void Esp_tq_0x217_217::Swap(Esp_tq_0x217_217* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esp_tq_0x217_217::InternalSwap(Esp_tq_0x217_217* other) {
  std::swap(esp_tqdecreqdbyespslow_, other->esp_tqdecreqdbyespslow_);
  std::swap(esp_tqinccreqdbyesp_, other->esp_tqinccreqdbyesp_);
  std::swap(rolling_counter_0x217_, other->rolling_counter_0x217_);
  std::swap(esp_trqinc_req_, other->esp_trqinc_req_);
  std::swap(esp_trqred_req_, other->esp_trqred_req_);
  std::swap(checksum_0x217_, other->checksum_0x217_);
  std::swap(esp_tqdecreqdbyespfast_, other->esp_tqdecreqdbyespfast_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esp_tq_0x217_217::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esp_tq_0x217_217

// optional double esp_tqdecreqdbyespslow = 1;
bool Esp_tq_0x217_217::has_esp_tqdecreqdbyespslow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esp_tq_0x217_217::set_has_esp_tqdecreqdbyespslow() {
  _has_bits_[0] |= 0x00000001u;
}
void Esp_tq_0x217_217::clear_has_esp_tqdecreqdbyespslow() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esp_tq_0x217_217::clear_esp_tqdecreqdbyespslow() {
  esp_tqdecreqdbyespslow_ = 0;
  clear_has_esp_tqdecreqdbyespslow();
}
double Esp_tq_0x217_217::esp_tqdecreqdbyespslow() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_tq_0x217_217.esp_tqdecreqdbyespslow)
  return esp_tqdecreqdbyespslow_;
}
void Esp_tq_0x217_217::set_esp_tqdecreqdbyespslow(double value) {
  set_has_esp_tqdecreqdbyespslow();
  esp_tqdecreqdbyespslow_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_tq_0x217_217.esp_tqdecreqdbyespslow)
}

// optional double esp_tqinccreqdbyesp = 2;
bool Esp_tq_0x217_217::has_esp_tqinccreqdbyesp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esp_tq_0x217_217::set_has_esp_tqinccreqdbyesp() {
  _has_bits_[0] |= 0x00000002u;
}
void Esp_tq_0x217_217::clear_has_esp_tqinccreqdbyesp() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esp_tq_0x217_217::clear_esp_tqinccreqdbyesp() {
  esp_tqinccreqdbyesp_ = 0;
  clear_has_esp_tqinccreqdbyesp();
}
double Esp_tq_0x217_217::esp_tqinccreqdbyesp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_tq_0x217_217.esp_tqinccreqdbyesp)
  return esp_tqinccreqdbyesp_;
}
void Esp_tq_0x217_217::set_esp_tqinccreqdbyesp(double value) {
  set_has_esp_tqinccreqdbyesp();
  esp_tqinccreqdbyesp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_tq_0x217_217.esp_tqinccreqdbyesp)
}

// optional int32 rolling_counter_0x217 = 3;
bool Esp_tq_0x217_217::has_rolling_counter_0x217() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esp_tq_0x217_217::set_has_rolling_counter_0x217() {
  _has_bits_[0] |= 0x00000004u;
}
void Esp_tq_0x217_217::clear_has_rolling_counter_0x217() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esp_tq_0x217_217::clear_rolling_counter_0x217() {
  rolling_counter_0x217_ = 0;
  clear_has_rolling_counter_0x217();
}
::google::protobuf::int32 Esp_tq_0x217_217::rolling_counter_0x217() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_tq_0x217_217.rolling_counter_0x217)
  return rolling_counter_0x217_;
}
void Esp_tq_0x217_217::set_rolling_counter_0x217(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x217();
  rolling_counter_0x217_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_tq_0x217_217.rolling_counter_0x217)
}

// optional .jmc_auto.canbus.Esp_tq_0x217_217.Esp_trqinc_reqType esp_trqinc_req = 4;
bool Esp_tq_0x217_217::has_esp_trqinc_req() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esp_tq_0x217_217::set_has_esp_trqinc_req() {
  _has_bits_[0] |= 0x00000008u;
}
void Esp_tq_0x217_217::clear_has_esp_trqinc_req() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esp_tq_0x217_217::clear_esp_trqinc_req() {
  esp_trqinc_req_ = 0;
  clear_has_esp_trqinc_req();
}
::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqinc_reqType Esp_tq_0x217_217::esp_trqinc_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_tq_0x217_217.esp_trqinc_req)
  return static_cast< ::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqinc_reqType >(esp_trqinc_req_);
}
void Esp_tq_0x217_217::set_esp_trqinc_req(::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqinc_reqType value) {
  assert(::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqinc_reqType_IsValid(value));
  set_has_esp_trqinc_req();
  esp_trqinc_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_tq_0x217_217.esp_trqinc_req)
}

// optional .jmc_auto.canbus.Esp_tq_0x217_217.Esp_trqred_reqType esp_trqred_req = 5;
bool Esp_tq_0x217_217::has_esp_trqred_req() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esp_tq_0x217_217::set_has_esp_trqred_req() {
  _has_bits_[0] |= 0x00000010u;
}
void Esp_tq_0x217_217::clear_has_esp_trqred_req() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esp_tq_0x217_217::clear_esp_trqred_req() {
  esp_trqred_req_ = 0;
  clear_has_esp_trqred_req();
}
::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqred_reqType Esp_tq_0x217_217::esp_trqred_req() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_tq_0x217_217.esp_trqred_req)
  return static_cast< ::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqred_reqType >(esp_trqred_req_);
}
void Esp_tq_0x217_217::set_esp_trqred_req(::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqred_reqType value) {
  assert(::jmc_auto::canbus::Esp_tq_0x217_217_Esp_trqred_reqType_IsValid(value));
  set_has_esp_trqred_req();
  esp_trqred_req_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_tq_0x217_217.esp_trqred_req)
}

// optional int32 checksum_0x217 = 6;
bool Esp_tq_0x217_217::has_checksum_0x217() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Esp_tq_0x217_217::set_has_checksum_0x217() {
  _has_bits_[0] |= 0x00000020u;
}
void Esp_tq_0x217_217::clear_has_checksum_0x217() {
  _has_bits_[0] &= ~0x00000020u;
}
void Esp_tq_0x217_217::clear_checksum_0x217() {
  checksum_0x217_ = 0;
  clear_has_checksum_0x217();
}
::google::protobuf::int32 Esp_tq_0x217_217::checksum_0x217() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_tq_0x217_217.checksum_0x217)
  return checksum_0x217_;
}
void Esp_tq_0x217_217::set_checksum_0x217(::google::protobuf::int32 value) {
  set_has_checksum_0x217();
  checksum_0x217_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_tq_0x217_217.checksum_0x217)
}

// optional double esp_tqdecreqdbyespfast = 7;
bool Esp_tq_0x217_217::has_esp_tqdecreqdbyespfast() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Esp_tq_0x217_217::set_has_esp_tqdecreqdbyespfast() {
  _has_bits_[0] |= 0x00000040u;
}
void Esp_tq_0x217_217::clear_has_esp_tqdecreqdbyespfast() {
  _has_bits_[0] &= ~0x00000040u;
}
void Esp_tq_0x217_217::clear_esp_tqdecreqdbyespfast() {
  esp_tqdecreqdbyespfast_ = 0;
  clear_has_esp_tqdecreqdbyespfast();
}
double Esp_tq_0x217_217::esp_tqdecreqdbyespfast() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_tq_0x217_217.esp_tqdecreqdbyespfast)
  return esp_tqdecreqdbyespfast_;
}
void Esp_tq_0x217_217::set_esp_tqdecreqdbyespfast(double value) {
  set_has_esp_tqdecreqdbyespfast();
  esp_tqdecreqdbyespfast_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_tq_0x217_217.esp_tqdecreqdbyespfast)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Esp_rpmf_0x213_213::kEspWheelrpmfrFieldNumber;
const int Esp_rpmf_0x213_213::kEspWheelrpmfrvalidFieldNumber;
const int Esp_rpmf_0x213_213::kRollingCounter0X213FieldNumber;
const int Esp_rpmf_0x213_213::kChecksum0X213FieldNumber;
const int Esp_rpmf_0x213_213::kEspWheelrpmflFieldNumber;
const int Esp_rpmf_0x213_213::kEspWheelrpmflvalidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Esp_rpmf_0x213_213::Esp_rpmf_0x213_213()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Esp_rpmf_0x213_213)
}
Esp_rpmf_0x213_213::Esp_rpmf_0x213_213(const Esp_rpmf_0x213_213& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&esp_wheelrpmfr_, &from.esp_wheelrpmfr_,
    reinterpret_cast<char*>(&esp_wheelrpmflvalid_) -
    reinterpret_cast<char*>(&esp_wheelrpmfr_) + sizeof(esp_wheelrpmflvalid_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Esp_rpmf_0x213_213)
}

void Esp_rpmf_0x213_213::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&esp_wheelrpmfr_, 0, reinterpret_cast<char*>(&esp_wheelrpmflvalid_) -
    reinterpret_cast<char*>(&esp_wheelrpmfr_) + sizeof(esp_wheelrpmflvalid_));
}

Esp_rpmf_0x213_213::~Esp_rpmf_0x213_213() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Esp_rpmf_0x213_213)
  SharedDtor();
}

void Esp_rpmf_0x213_213::SharedDtor() {
}

void Esp_rpmf_0x213_213::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Esp_rpmf_0x213_213::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Esp_rpmf_0x213_213& Esp_rpmf_0x213_213::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Esp_rpmf_0x213_213* Esp_rpmf_0x213_213::New(::google::protobuf::Arena* arena) const {
  Esp_rpmf_0x213_213* n = new Esp_rpmf_0x213_213;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Esp_rpmf_0x213_213::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Esp_rpmf_0x213_213)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&esp_wheelrpmfr_, 0, reinterpret_cast<char*>(&esp_wheelrpmflvalid_) -
      reinterpret_cast<char*>(&esp_wheelrpmfr_) + sizeof(esp_wheelrpmflvalid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Esp_rpmf_0x213_213::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Esp_rpmf_0x213_213)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double esp_wheelrpmfr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_esp_wheelrpmfr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &esp_wheelrpmfr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_rpmf_0x213_213.Esp_wheelrpmfrvalidType esp_wheelrpmfrvalid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_IsValid(value)) {
            set_esp_wheelrpmfrvalid(static_cast< ::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x213 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_rolling_counter_0x213();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x213_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x213 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_checksum_0x213();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x213_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double esp_wheelrpmfl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_esp_wheelrpmfl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &esp_wheelrpmfl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_rpmf_0x213_213.Esp_wheelrpmflvalidType esp_wheelrpmflvalid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_IsValid(value)) {
            set_esp_wheelrpmflvalid(static_cast< ::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Esp_rpmf_0x213_213)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Esp_rpmf_0x213_213)
  return false;
#undef DO_
}

void Esp_rpmf_0x213_213::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Esp_rpmf_0x213_213)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double esp_wheelrpmfr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->esp_wheelrpmfr(), output);
  }

  // optional .jmc_auto.canbus.Esp_rpmf_0x213_213.Esp_wheelrpmfrvalidType esp_wheelrpmfrvalid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->esp_wheelrpmfrvalid(), output);
  }

  // optional int32 rolling_counter_0x213 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rolling_counter_0x213(), output);
  }

  // optional int32 checksum_0x213 = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->checksum_0x213(), output);
  }

  // optional double esp_wheelrpmfl = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->esp_wheelrpmfl(), output);
  }

  // optional .jmc_auto.canbus.Esp_rpmf_0x213_213.Esp_wheelrpmflvalidType esp_wheelrpmflvalid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->esp_wheelrpmflvalid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Esp_rpmf_0x213_213)
}

::google::protobuf::uint8* Esp_rpmf_0x213_213::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Esp_rpmf_0x213_213)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double esp_wheelrpmfr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->esp_wheelrpmfr(), target);
  }

  // optional .jmc_auto.canbus.Esp_rpmf_0x213_213.Esp_wheelrpmfrvalidType esp_wheelrpmfrvalid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->esp_wheelrpmfrvalid(), target);
  }

  // optional int32 rolling_counter_0x213 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rolling_counter_0x213(), target);
  }

  // optional int32 checksum_0x213 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->checksum_0x213(), target);
  }

  // optional double esp_wheelrpmfl = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->esp_wheelrpmfl(), target);
  }

  // optional .jmc_auto.canbus.Esp_rpmf_0x213_213.Esp_wheelrpmflvalidType esp_wheelrpmflvalid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->esp_wheelrpmflvalid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Esp_rpmf_0x213_213)
  return target;
}

size_t Esp_rpmf_0x213_213::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Esp_rpmf_0x213_213)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional double esp_wheelrpmfr = 1;
    if (has_esp_wheelrpmfr()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Esp_rpmf_0x213_213.Esp_wheelrpmfrvalidType esp_wheelrpmfrvalid = 2;
    if (has_esp_wheelrpmfrvalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_wheelrpmfrvalid());
    }

    // optional int32 rolling_counter_0x213 = 3;
    if (has_rolling_counter_0x213()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x213());
    }

    // optional double esp_wheelrpmfl = 5;
    if (has_esp_wheelrpmfl()) {
      total_size += 1 + 8;
    }

    // optional int32 checksum_0x213 = 4;
    if (has_checksum_0x213()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x213());
    }

    // optional .jmc_auto.canbus.Esp_rpmf_0x213_213.Esp_wheelrpmflvalidType esp_wheelrpmflvalid = 6;
    if (has_esp_wheelrpmflvalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esp_wheelrpmflvalid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Esp_rpmf_0x213_213::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Esp_rpmf_0x213_213)
  GOOGLE_DCHECK_NE(&from, this);
  const Esp_rpmf_0x213_213* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Esp_rpmf_0x213_213>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Esp_rpmf_0x213_213)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Esp_rpmf_0x213_213)
    MergeFrom(*source);
  }
}

void Esp_rpmf_0x213_213::MergeFrom(const Esp_rpmf_0x213_213& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Esp_rpmf_0x213_213)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      esp_wheelrpmfr_ = from.esp_wheelrpmfr_;
    }
    if (cached_has_bits & 0x00000002u) {
      esp_wheelrpmfrvalid_ = from.esp_wheelrpmfrvalid_;
    }
    if (cached_has_bits & 0x00000004u) {
      rolling_counter_0x213_ = from.rolling_counter_0x213_;
    }
    if (cached_has_bits & 0x00000008u) {
      esp_wheelrpmfl_ = from.esp_wheelrpmfl_;
    }
    if (cached_has_bits & 0x00000010u) {
      checksum_0x213_ = from.checksum_0x213_;
    }
    if (cached_has_bits & 0x00000020u) {
      esp_wheelrpmflvalid_ = from.esp_wheelrpmflvalid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Esp_rpmf_0x213_213::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Esp_rpmf_0x213_213)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Esp_rpmf_0x213_213::CopyFrom(const Esp_rpmf_0x213_213& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Esp_rpmf_0x213_213)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Esp_rpmf_0x213_213::IsInitialized() const {
  return true;
}

void Esp_rpmf_0x213_213::Swap(Esp_rpmf_0x213_213* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Esp_rpmf_0x213_213::InternalSwap(Esp_rpmf_0x213_213* other) {
  std::swap(esp_wheelrpmfr_, other->esp_wheelrpmfr_);
  std::swap(esp_wheelrpmfrvalid_, other->esp_wheelrpmfrvalid_);
  std::swap(rolling_counter_0x213_, other->rolling_counter_0x213_);
  std::swap(esp_wheelrpmfl_, other->esp_wheelrpmfl_);
  std::swap(checksum_0x213_, other->checksum_0x213_);
  std::swap(esp_wheelrpmflvalid_, other->esp_wheelrpmflvalid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Esp_rpmf_0x213_213::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Esp_rpmf_0x213_213

// optional double esp_wheelrpmfr = 1;
bool Esp_rpmf_0x213_213::has_esp_wheelrpmfr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Esp_rpmf_0x213_213::set_has_esp_wheelrpmfr() {
  _has_bits_[0] |= 0x00000001u;
}
void Esp_rpmf_0x213_213::clear_has_esp_wheelrpmfr() {
  _has_bits_[0] &= ~0x00000001u;
}
void Esp_rpmf_0x213_213::clear_esp_wheelrpmfr() {
  esp_wheelrpmfr_ = 0;
  clear_has_esp_wheelrpmfr();
}
double Esp_rpmf_0x213_213::esp_wheelrpmfr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_rpmf_0x213_213.esp_wheelrpmfr)
  return esp_wheelrpmfr_;
}
void Esp_rpmf_0x213_213::set_esp_wheelrpmfr(double value) {
  set_has_esp_wheelrpmfr();
  esp_wheelrpmfr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_rpmf_0x213_213.esp_wheelrpmfr)
}

// optional .jmc_auto.canbus.Esp_rpmf_0x213_213.Esp_wheelrpmfrvalidType esp_wheelrpmfrvalid = 2;
bool Esp_rpmf_0x213_213::has_esp_wheelrpmfrvalid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Esp_rpmf_0x213_213::set_has_esp_wheelrpmfrvalid() {
  _has_bits_[0] |= 0x00000002u;
}
void Esp_rpmf_0x213_213::clear_has_esp_wheelrpmfrvalid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Esp_rpmf_0x213_213::clear_esp_wheelrpmfrvalid() {
  esp_wheelrpmfrvalid_ = 0;
  clear_has_esp_wheelrpmfrvalid();
}
::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType Esp_rpmf_0x213_213::esp_wheelrpmfrvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_rpmf_0x213_213.esp_wheelrpmfrvalid)
  return static_cast< ::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType >(esp_wheelrpmfrvalid_);
}
void Esp_rpmf_0x213_213::set_esp_wheelrpmfrvalid(::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType value) {
  assert(::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmfrvalidType_IsValid(value));
  set_has_esp_wheelrpmfrvalid();
  esp_wheelrpmfrvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_rpmf_0x213_213.esp_wheelrpmfrvalid)
}

// optional int32 rolling_counter_0x213 = 3;
bool Esp_rpmf_0x213_213::has_rolling_counter_0x213() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Esp_rpmf_0x213_213::set_has_rolling_counter_0x213() {
  _has_bits_[0] |= 0x00000004u;
}
void Esp_rpmf_0x213_213::clear_has_rolling_counter_0x213() {
  _has_bits_[0] &= ~0x00000004u;
}
void Esp_rpmf_0x213_213::clear_rolling_counter_0x213() {
  rolling_counter_0x213_ = 0;
  clear_has_rolling_counter_0x213();
}
::google::protobuf::int32 Esp_rpmf_0x213_213::rolling_counter_0x213() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_rpmf_0x213_213.rolling_counter_0x213)
  return rolling_counter_0x213_;
}
void Esp_rpmf_0x213_213::set_rolling_counter_0x213(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x213();
  rolling_counter_0x213_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_rpmf_0x213_213.rolling_counter_0x213)
}

// optional int32 checksum_0x213 = 4;
bool Esp_rpmf_0x213_213::has_checksum_0x213() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Esp_rpmf_0x213_213::set_has_checksum_0x213() {
  _has_bits_[0] |= 0x00000010u;
}
void Esp_rpmf_0x213_213::clear_has_checksum_0x213() {
  _has_bits_[0] &= ~0x00000010u;
}
void Esp_rpmf_0x213_213::clear_checksum_0x213() {
  checksum_0x213_ = 0;
  clear_has_checksum_0x213();
}
::google::protobuf::int32 Esp_rpmf_0x213_213::checksum_0x213() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_rpmf_0x213_213.checksum_0x213)
  return checksum_0x213_;
}
void Esp_rpmf_0x213_213::set_checksum_0x213(::google::protobuf::int32 value) {
  set_has_checksum_0x213();
  checksum_0x213_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_rpmf_0x213_213.checksum_0x213)
}

// optional double esp_wheelrpmfl = 5;
bool Esp_rpmf_0x213_213::has_esp_wheelrpmfl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Esp_rpmf_0x213_213::set_has_esp_wheelrpmfl() {
  _has_bits_[0] |= 0x00000008u;
}
void Esp_rpmf_0x213_213::clear_has_esp_wheelrpmfl() {
  _has_bits_[0] &= ~0x00000008u;
}
void Esp_rpmf_0x213_213::clear_esp_wheelrpmfl() {
  esp_wheelrpmfl_ = 0;
  clear_has_esp_wheelrpmfl();
}
double Esp_rpmf_0x213_213::esp_wheelrpmfl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_rpmf_0x213_213.esp_wheelrpmfl)
  return esp_wheelrpmfl_;
}
void Esp_rpmf_0x213_213::set_esp_wheelrpmfl(double value) {
  set_has_esp_wheelrpmfl();
  esp_wheelrpmfl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_rpmf_0x213_213.esp_wheelrpmfl)
}

// optional .jmc_auto.canbus.Esp_rpmf_0x213_213.Esp_wheelrpmflvalidType esp_wheelrpmflvalid = 6;
bool Esp_rpmf_0x213_213::has_esp_wheelrpmflvalid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Esp_rpmf_0x213_213::set_has_esp_wheelrpmflvalid() {
  _has_bits_[0] |= 0x00000020u;
}
void Esp_rpmf_0x213_213::clear_has_esp_wheelrpmflvalid() {
  _has_bits_[0] &= ~0x00000020u;
}
void Esp_rpmf_0x213_213::clear_esp_wheelrpmflvalid() {
  esp_wheelrpmflvalid_ = 0;
  clear_has_esp_wheelrpmflvalid();
}
::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType Esp_rpmf_0x213_213::esp_wheelrpmflvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Esp_rpmf_0x213_213.esp_wheelrpmflvalid)
  return static_cast< ::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType >(esp_wheelrpmflvalid_);
}
void Esp_rpmf_0x213_213::set_esp_wheelrpmflvalid(::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType value) {
  assert(::jmc_auto::canbus::Esp_rpmf_0x213_213_Esp_wheelrpmflvalidType_IsValid(value));
  set_has_esp_wheelrpmflvalid();
  esp_wheelrpmflvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Esp_rpmf_0x213_213.esp_wheelrpmflvalid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gw_ic_time_0x581_581::kIcMonthFieldNumber;
const int Gw_ic_time_0x581_581::kIcDateFieldNumber;
const int Gw_ic_time_0x581_581::kIcHourFieldNumber;
const int Gw_ic_time_0x581_581::kIcMinuteFieldNumber;
const int Gw_ic_time_0x581_581::kIcSecondFieldNumber;
const int Gw_ic_time_0x581_581::kIcYearFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gw_ic_time_0x581_581::Gw_ic_time_0x581_581()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gw_ic_time_0x581_581)
}
Gw_ic_time_0x581_581::Gw_ic_time_0x581_581(const Gw_ic_time_0x581_581& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ic_month_, &from.ic_month_,
    reinterpret_cast<char*>(&ic_year_) -
    reinterpret_cast<char*>(&ic_month_) + sizeof(ic_year_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gw_ic_time_0x581_581)
}

void Gw_ic_time_0x581_581::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ic_month_, 0, reinterpret_cast<char*>(&ic_second_) -
    reinterpret_cast<char*>(&ic_month_) + sizeof(ic_second_));
  ic_year_ = 2;
}

Gw_ic_time_0x581_581::~Gw_ic_time_0x581_581() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gw_ic_time_0x581_581)
  SharedDtor();
}

void Gw_ic_time_0x581_581::SharedDtor() {
}

void Gw_ic_time_0x581_581::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gw_ic_time_0x581_581::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gw_ic_time_0x581_581& Gw_ic_time_0x581_581::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gw_ic_time_0x581_581* Gw_ic_time_0x581_581::New(::google::protobuf::Arena* arena) const {
  Gw_ic_time_0x581_581* n = new Gw_ic_time_0x581_581;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gw_ic_time_0x581_581::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gw_ic_time_0x581_581)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&ic_month_, 0, reinterpret_cast<char*>(&ic_second_) -
      reinterpret_cast<char*>(&ic_month_) + sizeof(ic_second_));
    ic_year_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gw_ic_time_0x581_581::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gw_ic_time_0x581_581)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_monthType ic_month = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_monthType_IsValid(value)) {
            set_ic_month(static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_monthType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_dateType ic_date = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_dateType_IsValid(value)) {
            set_ic_date(static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_dateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_hourType ic_hour = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_hourType_IsValid(value)) {
            set_ic_hour(static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_hourType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_minuteType ic_minute = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_minuteType_IsValid(value)) {
            set_ic_minute(static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_minuteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_secondType ic_second = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_secondType_IsValid(value)) {
            set_ic_second(static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_secondType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_yearType ic_year = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_yearType_IsValid(value)) {
            set_ic_year(static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_yearType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gw_ic_time_0x581_581)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gw_ic_time_0x581_581)
  return false;
#undef DO_
}

void Gw_ic_time_0x581_581::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gw_ic_time_0x581_581)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_monthType ic_month = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ic_month(), output);
  }

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_dateType ic_date = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ic_date(), output);
  }

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_hourType ic_hour = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ic_hour(), output);
  }

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_minuteType ic_minute = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ic_minute(), output);
  }

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_secondType ic_second = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ic_second(), output);
  }

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_yearType ic_year = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->ic_year(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gw_ic_time_0x581_581)
}

::google::protobuf::uint8* Gw_ic_time_0x581_581::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gw_ic_time_0x581_581)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_monthType ic_month = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ic_month(), target);
  }

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_dateType ic_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ic_date(), target);
  }

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_hourType ic_hour = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ic_hour(), target);
  }

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_minuteType ic_minute = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ic_minute(), target);
  }

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_secondType ic_second = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ic_second(), target);
  }

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_yearType ic_year = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->ic_year(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gw_ic_time_0x581_581)
  return target;
}

size_t Gw_ic_time_0x581_581::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gw_ic_time_0x581_581)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_monthType ic_month = 1;
    if (has_ic_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ic_month());
    }

    // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_dateType ic_date = 2;
    if (has_ic_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ic_date());
    }

    // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_hourType ic_hour = 3;
    if (has_ic_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ic_hour());
    }

    // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_minuteType ic_minute = 4;
    if (has_ic_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ic_minute());
    }

    // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_secondType ic_second = 5;
    if (has_ic_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ic_second());
    }

    // optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_yearType ic_year = 6;
    if (has_ic_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ic_year());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gw_ic_time_0x581_581::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gw_ic_time_0x581_581)
  GOOGLE_DCHECK_NE(&from, this);
  const Gw_ic_time_0x581_581* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gw_ic_time_0x581_581>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gw_ic_time_0x581_581)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gw_ic_time_0x581_581)
    MergeFrom(*source);
  }
}

void Gw_ic_time_0x581_581::MergeFrom(const Gw_ic_time_0x581_581& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gw_ic_time_0x581_581)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      ic_month_ = from.ic_month_;
    }
    if (cached_has_bits & 0x00000002u) {
      ic_date_ = from.ic_date_;
    }
    if (cached_has_bits & 0x00000004u) {
      ic_hour_ = from.ic_hour_;
    }
    if (cached_has_bits & 0x00000008u) {
      ic_minute_ = from.ic_minute_;
    }
    if (cached_has_bits & 0x00000010u) {
      ic_second_ = from.ic_second_;
    }
    if (cached_has_bits & 0x00000020u) {
      ic_year_ = from.ic_year_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gw_ic_time_0x581_581::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gw_ic_time_0x581_581)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gw_ic_time_0x581_581::CopyFrom(const Gw_ic_time_0x581_581& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gw_ic_time_0x581_581)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gw_ic_time_0x581_581::IsInitialized() const {
  return true;
}

void Gw_ic_time_0x581_581::Swap(Gw_ic_time_0x581_581* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gw_ic_time_0x581_581::InternalSwap(Gw_ic_time_0x581_581* other) {
  std::swap(ic_month_, other->ic_month_);
  std::swap(ic_date_, other->ic_date_);
  std::swap(ic_hour_, other->ic_hour_);
  std::swap(ic_minute_, other->ic_minute_);
  std::swap(ic_second_, other->ic_second_);
  std::swap(ic_year_, other->ic_year_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gw_ic_time_0x581_581::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gw_ic_time_0x581_581

// optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_monthType ic_month = 1;
bool Gw_ic_time_0x581_581::has_ic_month() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gw_ic_time_0x581_581::set_has_ic_month() {
  _has_bits_[0] |= 0x00000001u;
}
void Gw_ic_time_0x581_581::clear_has_ic_month() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gw_ic_time_0x581_581::clear_ic_month() {
  ic_month_ = 0;
  clear_has_ic_month();
}
::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_monthType Gw_ic_time_0x581_581::ic_month() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_month)
  return static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_monthType >(ic_month_);
}
void Gw_ic_time_0x581_581::set_ic_month(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_monthType value) {
  assert(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_monthType_IsValid(value));
  set_has_ic_month();
  ic_month_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_month)
}

// optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_dateType ic_date = 2;
bool Gw_ic_time_0x581_581::has_ic_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gw_ic_time_0x581_581::set_has_ic_date() {
  _has_bits_[0] |= 0x00000002u;
}
void Gw_ic_time_0x581_581::clear_has_ic_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gw_ic_time_0x581_581::clear_ic_date() {
  ic_date_ = 0;
  clear_has_ic_date();
}
::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_dateType Gw_ic_time_0x581_581::ic_date() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_date)
  return static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_dateType >(ic_date_);
}
void Gw_ic_time_0x581_581::set_ic_date(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_dateType value) {
  assert(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_dateType_IsValid(value));
  set_has_ic_date();
  ic_date_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_date)
}

// optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_hourType ic_hour = 3;
bool Gw_ic_time_0x581_581::has_ic_hour() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gw_ic_time_0x581_581::set_has_ic_hour() {
  _has_bits_[0] |= 0x00000004u;
}
void Gw_ic_time_0x581_581::clear_has_ic_hour() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gw_ic_time_0x581_581::clear_ic_hour() {
  ic_hour_ = 0;
  clear_has_ic_hour();
}
::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_hourType Gw_ic_time_0x581_581::ic_hour() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_hour)
  return static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_hourType >(ic_hour_);
}
void Gw_ic_time_0x581_581::set_ic_hour(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_hourType value) {
  assert(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_hourType_IsValid(value));
  set_has_ic_hour();
  ic_hour_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_hour)
}

// optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_minuteType ic_minute = 4;
bool Gw_ic_time_0x581_581::has_ic_minute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gw_ic_time_0x581_581::set_has_ic_minute() {
  _has_bits_[0] |= 0x00000008u;
}
void Gw_ic_time_0x581_581::clear_has_ic_minute() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gw_ic_time_0x581_581::clear_ic_minute() {
  ic_minute_ = 0;
  clear_has_ic_minute();
}
::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_minuteType Gw_ic_time_0x581_581::ic_minute() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_minute)
  return static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_minuteType >(ic_minute_);
}
void Gw_ic_time_0x581_581::set_ic_minute(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_minuteType value) {
  assert(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_minuteType_IsValid(value));
  set_has_ic_minute();
  ic_minute_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_minute)
}

// optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_secondType ic_second = 5;
bool Gw_ic_time_0x581_581::has_ic_second() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gw_ic_time_0x581_581::set_has_ic_second() {
  _has_bits_[0] |= 0x00000010u;
}
void Gw_ic_time_0x581_581::clear_has_ic_second() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gw_ic_time_0x581_581::clear_ic_second() {
  ic_second_ = 0;
  clear_has_ic_second();
}
::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_secondType Gw_ic_time_0x581_581::ic_second() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_second)
  return static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_secondType >(ic_second_);
}
void Gw_ic_time_0x581_581::set_ic_second(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_secondType value) {
  assert(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_secondType_IsValid(value));
  set_has_ic_second();
  ic_second_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_second)
}

// optional .jmc_auto.canbus.Gw_ic_time_0x581_581.Ic_yearType ic_year = 6;
bool Gw_ic_time_0x581_581::has_ic_year() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gw_ic_time_0x581_581::set_has_ic_year() {
  _has_bits_[0] |= 0x00000020u;
}
void Gw_ic_time_0x581_581::clear_has_ic_year() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gw_ic_time_0x581_581::clear_ic_year() {
  ic_year_ = 2;
  clear_has_ic_year();
}
::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_yearType Gw_ic_time_0x581_581::ic_year() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_year)
  return static_cast< ::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_yearType >(ic_year_);
}
void Gw_ic_time_0x581_581::set_ic_year(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_yearType value) {
  assert(::jmc_auto::canbus::Gw_ic_time_0x581_581_Ic_yearType_IsValid(value));
  set_has_ic_year();
  ic_year_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_ic_time_0x581_581.ic_year)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Afs_0x5a0_5a0::kAfsWorkStsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Afs_0x5a0_5a0::Afs_0x5a0_5a0()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Afs_0x5a0_5a0)
}
Afs_0x5a0_5a0::Afs_0x5a0_5a0(const Afs_0x5a0_5a0& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  afs_work_sts_ = from.afs_work_sts_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Afs_0x5a0_5a0)
}

void Afs_0x5a0_5a0::SharedCtor() {
  _cached_size_ = 0;
  afs_work_sts_ = 0;
}

Afs_0x5a0_5a0::~Afs_0x5a0_5a0() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Afs_0x5a0_5a0)
  SharedDtor();
}

void Afs_0x5a0_5a0::SharedDtor() {
}

void Afs_0x5a0_5a0::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Afs_0x5a0_5a0::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Afs_0x5a0_5a0& Afs_0x5a0_5a0::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Afs_0x5a0_5a0* Afs_0x5a0_5a0::New(::google::protobuf::Arena* arena) const {
  Afs_0x5a0_5a0* n = new Afs_0x5a0_5a0;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Afs_0x5a0_5a0::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Afs_0x5a0_5a0)
  afs_work_sts_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Afs_0x5a0_5a0::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Afs_0x5a0_5a0)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Afs_0x5a0_5a0.Afs_work_stsType afs_work_sts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Afs_0x5a0_5a0_Afs_work_stsType_IsValid(value)) {
            set_afs_work_sts(static_cast< ::jmc_auto::canbus::Afs_0x5a0_5a0_Afs_work_stsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Afs_0x5a0_5a0)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Afs_0x5a0_5a0)
  return false;
#undef DO_
}

void Afs_0x5a0_5a0::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Afs_0x5a0_5a0)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Afs_0x5a0_5a0.Afs_work_stsType afs_work_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->afs_work_sts(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Afs_0x5a0_5a0)
}

::google::protobuf::uint8* Afs_0x5a0_5a0::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Afs_0x5a0_5a0)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Afs_0x5a0_5a0.Afs_work_stsType afs_work_sts = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->afs_work_sts(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Afs_0x5a0_5a0)
  return target;
}

size_t Afs_0x5a0_5a0::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Afs_0x5a0_5a0)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .jmc_auto.canbus.Afs_0x5a0_5a0.Afs_work_stsType afs_work_sts = 1;
  if (has_afs_work_sts()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->afs_work_sts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Afs_0x5a0_5a0::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Afs_0x5a0_5a0)
  GOOGLE_DCHECK_NE(&from, this);
  const Afs_0x5a0_5a0* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Afs_0x5a0_5a0>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Afs_0x5a0_5a0)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Afs_0x5a0_5a0)
    MergeFrom(*source);
  }
}

void Afs_0x5a0_5a0::MergeFrom(const Afs_0x5a0_5a0& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Afs_0x5a0_5a0)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_afs_work_sts()) {
    set_afs_work_sts(from.afs_work_sts());
  }
}

void Afs_0x5a0_5a0::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Afs_0x5a0_5a0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Afs_0x5a0_5a0::CopyFrom(const Afs_0x5a0_5a0& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Afs_0x5a0_5a0)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Afs_0x5a0_5a0::IsInitialized() const {
  return true;
}

void Afs_0x5a0_5a0::Swap(Afs_0x5a0_5a0* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Afs_0x5a0_5a0::InternalSwap(Afs_0x5a0_5a0* other) {
  std::swap(afs_work_sts_, other->afs_work_sts_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Afs_0x5a0_5a0::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Afs_0x5a0_5a0

// optional .jmc_auto.canbus.Afs_0x5a0_5a0.Afs_work_stsType afs_work_sts = 1;
bool Afs_0x5a0_5a0::has_afs_work_sts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Afs_0x5a0_5a0::set_has_afs_work_sts() {
  _has_bits_[0] |= 0x00000001u;
}
void Afs_0x5a0_5a0::clear_has_afs_work_sts() {
  _has_bits_[0] &= ~0x00000001u;
}
void Afs_0x5a0_5a0::clear_afs_work_sts() {
  afs_work_sts_ = 0;
  clear_has_afs_work_sts();
}
::jmc_auto::canbus::Afs_0x5a0_5a0_Afs_work_stsType Afs_0x5a0_5a0::afs_work_sts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Afs_0x5a0_5a0.afs_work_sts)
  return static_cast< ::jmc_auto::canbus::Afs_0x5a0_5a0_Afs_work_stsType >(afs_work_sts_);
}
void Afs_0x5a0_5a0::set_afs_work_sts(::jmc_auto::canbus::Afs_0x5a0_5a0_Afs_work_stsType value) {
  assert(::jmc_auto::canbus::Afs_0x5a0_5a0_Afs_work_stsType_IsValid(value));
  set_has_afs_work_sts();
  afs_work_sts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Afs_0x5a0_5a0.afs_work_sts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sod_nm_0x440_440::kSodnmlimphomeFieldNumber;
const int Sod_nm_0x440_440::kSodnmsleepindFieldNumber;
const int Sod_nm_0x440_440::kSodnmsleepackFieldNumber;
const int Sod_nm_0x440_440::kSodnmdestaddrFieldNumber;
const int Sod_nm_0x440_440::kSodnmaliveFieldNumber;
const int Sod_nm_0x440_440::kSodnmringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sod_nm_0x440_440::Sod_nm_0x440_440()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Sod_nm_0x440_440)
}
Sod_nm_0x440_440::Sod_nm_0x440_440(const Sod_nm_0x440_440& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sodnmlimphome_, &from.sodnmlimphome_,
    reinterpret_cast<char*>(&sodnmring_) -
    reinterpret_cast<char*>(&sodnmlimphome_) + sizeof(sodnmring_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Sod_nm_0x440_440)
}

void Sod_nm_0x440_440::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sodnmlimphome_, 0, reinterpret_cast<char*>(&sodnmring_) -
    reinterpret_cast<char*>(&sodnmlimphome_) + sizeof(sodnmring_));
}

Sod_nm_0x440_440::~Sod_nm_0x440_440() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Sod_nm_0x440_440)
  SharedDtor();
}

void Sod_nm_0x440_440::SharedDtor() {
}

void Sod_nm_0x440_440::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sod_nm_0x440_440::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sod_nm_0x440_440& Sod_nm_0x440_440::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sod_nm_0x440_440* Sod_nm_0x440_440::New(::google::protobuf::Arena* arena) const {
  Sod_nm_0x440_440* n = new Sod_nm_0x440_440;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sod_nm_0x440_440::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Sod_nm_0x440_440)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&sodnmlimphome_, 0, reinterpret_cast<char*>(&sodnmring_) -
      reinterpret_cast<char*>(&sodnmlimphome_) + sizeof(sodnmring_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sod_nm_0x440_440::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Sod_nm_0x440_440)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmlimphomeType sodnmlimphome = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_nm_0x440_440_SodnmlimphomeType_IsValid(value)) {
            set_sodnmlimphome(static_cast< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmlimphomeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmsleepindType sodnmsleepind = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepindType_IsValid(value)) {
            set_sodnmsleepind(static_cast< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepindType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmsleepackType sodnmsleepack = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepackType_IsValid(value)) {
            set_sodnmsleepack(static_cast< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepackType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sodnmdestaddr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sodnmdestaddr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sodnmdestaddr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmaliveType sodnmalive = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_nm_0x440_440_SodnmaliveType_IsValid(value)) {
            set_sodnmalive(static_cast< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmaliveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmringType sodnmring = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_nm_0x440_440_SodnmringType_IsValid(value)) {
            set_sodnmring(static_cast< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmringType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Sod_nm_0x440_440)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Sod_nm_0x440_440)
  return false;
#undef DO_
}

void Sod_nm_0x440_440::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Sod_nm_0x440_440)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmlimphomeType sodnmlimphome = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sodnmlimphome(), output);
  }

  // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmsleepindType sodnmsleepind = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sodnmsleepind(), output);
  }

  // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmsleepackType sodnmsleepack = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sodnmsleepack(), output);
  }

  // optional int32 sodnmdestaddr = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sodnmdestaddr(), output);
  }

  // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmaliveType sodnmalive = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sodnmalive(), output);
  }

  // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmringType sodnmring = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->sodnmring(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Sod_nm_0x440_440)
}

::google::protobuf::uint8* Sod_nm_0x440_440::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Sod_nm_0x440_440)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmlimphomeType sodnmlimphome = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sodnmlimphome(), target);
  }

  // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmsleepindType sodnmsleepind = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sodnmsleepind(), target);
  }

  // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmsleepackType sodnmsleepack = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sodnmsleepack(), target);
  }

  // optional int32 sodnmdestaddr = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sodnmdestaddr(), target);
  }

  // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmaliveType sodnmalive = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sodnmalive(), target);
  }

  // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmringType sodnmring = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->sodnmring(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Sod_nm_0x440_440)
  return target;
}

size_t Sod_nm_0x440_440::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Sod_nm_0x440_440)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmlimphomeType sodnmlimphome = 1;
    if (has_sodnmlimphome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sodnmlimphome());
    }

    // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmsleepindType sodnmsleepind = 2;
    if (has_sodnmsleepind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sodnmsleepind());
    }

    // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmsleepackType sodnmsleepack = 3;
    if (has_sodnmsleepack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sodnmsleepack());
    }

    // optional int32 sodnmdestaddr = 4;
    if (has_sodnmdestaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sodnmdestaddr());
    }

    // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmaliveType sodnmalive = 5;
    if (has_sodnmalive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sodnmalive());
    }

    // optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmringType sodnmring = 6;
    if (has_sodnmring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sodnmring());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sod_nm_0x440_440::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Sod_nm_0x440_440)
  GOOGLE_DCHECK_NE(&from, this);
  const Sod_nm_0x440_440* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sod_nm_0x440_440>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Sod_nm_0x440_440)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Sod_nm_0x440_440)
    MergeFrom(*source);
  }
}

void Sod_nm_0x440_440::MergeFrom(const Sod_nm_0x440_440& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Sod_nm_0x440_440)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      sodnmlimphome_ = from.sodnmlimphome_;
    }
    if (cached_has_bits & 0x00000002u) {
      sodnmsleepind_ = from.sodnmsleepind_;
    }
    if (cached_has_bits & 0x00000004u) {
      sodnmsleepack_ = from.sodnmsleepack_;
    }
    if (cached_has_bits & 0x00000008u) {
      sodnmdestaddr_ = from.sodnmdestaddr_;
    }
    if (cached_has_bits & 0x00000010u) {
      sodnmalive_ = from.sodnmalive_;
    }
    if (cached_has_bits & 0x00000020u) {
      sodnmring_ = from.sodnmring_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sod_nm_0x440_440::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Sod_nm_0x440_440)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sod_nm_0x440_440::CopyFrom(const Sod_nm_0x440_440& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Sod_nm_0x440_440)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sod_nm_0x440_440::IsInitialized() const {
  return true;
}

void Sod_nm_0x440_440::Swap(Sod_nm_0x440_440* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sod_nm_0x440_440::InternalSwap(Sod_nm_0x440_440* other) {
  std::swap(sodnmlimphome_, other->sodnmlimphome_);
  std::swap(sodnmsleepind_, other->sodnmsleepind_);
  std::swap(sodnmsleepack_, other->sodnmsleepack_);
  std::swap(sodnmdestaddr_, other->sodnmdestaddr_);
  std::swap(sodnmalive_, other->sodnmalive_);
  std::swap(sodnmring_, other->sodnmring_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sod_nm_0x440_440::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sod_nm_0x440_440

// optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmlimphomeType sodnmlimphome = 1;
bool Sod_nm_0x440_440::has_sodnmlimphome() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Sod_nm_0x440_440::set_has_sodnmlimphome() {
  _has_bits_[0] |= 0x00000001u;
}
void Sod_nm_0x440_440::clear_has_sodnmlimphome() {
  _has_bits_[0] &= ~0x00000001u;
}
void Sod_nm_0x440_440::clear_sodnmlimphome() {
  sodnmlimphome_ = 0;
  clear_has_sodnmlimphome();
}
::jmc_auto::canbus::Sod_nm_0x440_440_SodnmlimphomeType Sod_nm_0x440_440::sodnmlimphome() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_nm_0x440_440.sodnmlimphome)
  return static_cast< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmlimphomeType >(sodnmlimphome_);
}
void Sod_nm_0x440_440::set_sodnmlimphome(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmlimphomeType value) {
  assert(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmlimphomeType_IsValid(value));
  set_has_sodnmlimphome();
  sodnmlimphome_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_nm_0x440_440.sodnmlimphome)
}

// optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmsleepindType sodnmsleepind = 2;
bool Sod_nm_0x440_440::has_sodnmsleepind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Sod_nm_0x440_440::set_has_sodnmsleepind() {
  _has_bits_[0] |= 0x00000002u;
}
void Sod_nm_0x440_440::clear_has_sodnmsleepind() {
  _has_bits_[0] &= ~0x00000002u;
}
void Sod_nm_0x440_440::clear_sodnmsleepind() {
  sodnmsleepind_ = 0;
  clear_has_sodnmsleepind();
}
::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepindType Sod_nm_0x440_440::sodnmsleepind() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_nm_0x440_440.sodnmsleepind)
  return static_cast< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepindType >(sodnmsleepind_);
}
void Sod_nm_0x440_440::set_sodnmsleepind(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepindType value) {
  assert(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepindType_IsValid(value));
  set_has_sodnmsleepind();
  sodnmsleepind_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_nm_0x440_440.sodnmsleepind)
}

// optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmsleepackType sodnmsleepack = 3;
bool Sod_nm_0x440_440::has_sodnmsleepack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Sod_nm_0x440_440::set_has_sodnmsleepack() {
  _has_bits_[0] |= 0x00000004u;
}
void Sod_nm_0x440_440::clear_has_sodnmsleepack() {
  _has_bits_[0] &= ~0x00000004u;
}
void Sod_nm_0x440_440::clear_sodnmsleepack() {
  sodnmsleepack_ = 0;
  clear_has_sodnmsleepack();
}
::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepackType Sod_nm_0x440_440::sodnmsleepack() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_nm_0x440_440.sodnmsleepack)
  return static_cast< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepackType >(sodnmsleepack_);
}
void Sod_nm_0x440_440::set_sodnmsleepack(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepackType value) {
  assert(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmsleepackType_IsValid(value));
  set_has_sodnmsleepack();
  sodnmsleepack_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_nm_0x440_440.sodnmsleepack)
}

// optional int32 sodnmdestaddr = 4;
bool Sod_nm_0x440_440::has_sodnmdestaddr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Sod_nm_0x440_440::set_has_sodnmdestaddr() {
  _has_bits_[0] |= 0x00000008u;
}
void Sod_nm_0x440_440::clear_has_sodnmdestaddr() {
  _has_bits_[0] &= ~0x00000008u;
}
void Sod_nm_0x440_440::clear_sodnmdestaddr() {
  sodnmdestaddr_ = 0;
  clear_has_sodnmdestaddr();
}
::google::protobuf::int32 Sod_nm_0x440_440::sodnmdestaddr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_nm_0x440_440.sodnmdestaddr)
  return sodnmdestaddr_;
}
void Sod_nm_0x440_440::set_sodnmdestaddr(::google::protobuf::int32 value) {
  set_has_sodnmdestaddr();
  sodnmdestaddr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_nm_0x440_440.sodnmdestaddr)
}

// optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmaliveType sodnmalive = 5;
bool Sod_nm_0x440_440::has_sodnmalive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Sod_nm_0x440_440::set_has_sodnmalive() {
  _has_bits_[0] |= 0x00000010u;
}
void Sod_nm_0x440_440::clear_has_sodnmalive() {
  _has_bits_[0] &= ~0x00000010u;
}
void Sod_nm_0x440_440::clear_sodnmalive() {
  sodnmalive_ = 0;
  clear_has_sodnmalive();
}
::jmc_auto::canbus::Sod_nm_0x440_440_SodnmaliveType Sod_nm_0x440_440::sodnmalive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_nm_0x440_440.sodnmalive)
  return static_cast< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmaliveType >(sodnmalive_);
}
void Sod_nm_0x440_440::set_sodnmalive(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmaliveType value) {
  assert(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmaliveType_IsValid(value));
  set_has_sodnmalive();
  sodnmalive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_nm_0x440_440.sodnmalive)
}

// optional .jmc_auto.canbus.Sod_nm_0x440_440.SodnmringType sodnmring = 6;
bool Sod_nm_0x440_440::has_sodnmring() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Sod_nm_0x440_440::set_has_sodnmring() {
  _has_bits_[0] |= 0x00000020u;
}
void Sod_nm_0x440_440::clear_has_sodnmring() {
  _has_bits_[0] &= ~0x00000020u;
}
void Sod_nm_0x440_440::clear_sodnmring() {
  sodnmring_ = 0;
  clear_has_sodnmring();
}
::jmc_auto::canbus::Sod_nm_0x440_440_SodnmringType Sod_nm_0x440_440::sodnmring() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_nm_0x440_440.sodnmring)
  return static_cast< ::jmc_auto::canbus::Sod_nm_0x440_440_SodnmringType >(sodnmring_);
}
void Sod_nm_0x440_440::set_sodnmring(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmringType value) {
  assert(::jmc_auto::canbus::Sod_nm_0x440_440_SodnmringType_IsValid(value));
  set_has_sodnmring();
  sodnmring_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_nm_0x440_440.sodnmring)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gw_nm_0x460_460::kGwnmlimphomeFieldNumber;
const int Gw_nm_0x460_460::kGwnmsleepindFieldNumber;
const int Gw_nm_0x460_460::kGwnmsleepackFieldNumber;
const int Gw_nm_0x460_460::kGwnmdestaddrFieldNumber;
const int Gw_nm_0x460_460::kGwnmaliveFieldNumber;
const int Gw_nm_0x460_460::kGwnmringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gw_nm_0x460_460::Gw_nm_0x460_460()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gw_nm_0x460_460)
}
Gw_nm_0x460_460::Gw_nm_0x460_460(const Gw_nm_0x460_460& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gwnmlimphome_, &from.gwnmlimphome_,
    reinterpret_cast<char*>(&gwnmring_) -
    reinterpret_cast<char*>(&gwnmlimphome_) + sizeof(gwnmring_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gw_nm_0x460_460)
}

void Gw_nm_0x460_460::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&gwnmlimphome_, 0, reinterpret_cast<char*>(&gwnmring_) -
    reinterpret_cast<char*>(&gwnmlimphome_) + sizeof(gwnmring_));
}

Gw_nm_0x460_460::~Gw_nm_0x460_460() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gw_nm_0x460_460)
  SharedDtor();
}

void Gw_nm_0x460_460::SharedDtor() {
}

void Gw_nm_0x460_460::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gw_nm_0x460_460::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gw_nm_0x460_460& Gw_nm_0x460_460::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gw_nm_0x460_460* Gw_nm_0x460_460::New(::google::protobuf::Arena* arena) const {
  Gw_nm_0x460_460* n = new Gw_nm_0x460_460;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gw_nm_0x460_460::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gw_nm_0x460_460)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&gwnmlimphome_, 0, reinterpret_cast<char*>(&gwnmring_) -
      reinterpret_cast<char*>(&gwnmlimphome_) + sizeof(gwnmring_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gw_nm_0x460_460::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gw_nm_0x460_460)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmlimphomeType gwnmlimphome = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_nm_0x460_460_GwnmlimphomeType_IsValid(value)) {
            set_gwnmlimphome(static_cast< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmlimphomeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmsleepindType gwnmsleepind = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepindType_IsValid(value)) {
            set_gwnmsleepind(static_cast< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepindType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmsleepackType gwnmsleepack = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepackType_IsValid(value)) {
            set_gwnmsleepack(static_cast< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepackType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gwnmdestaddr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_gwnmdestaddr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gwnmdestaddr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmaliveType gwnmalive = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_nm_0x460_460_GwnmaliveType_IsValid(value)) {
            set_gwnmalive(static_cast< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmaliveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmringType gwnmring = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_nm_0x460_460_GwnmringType_IsValid(value)) {
            set_gwnmring(static_cast< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmringType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gw_nm_0x460_460)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gw_nm_0x460_460)
  return false;
#undef DO_
}

void Gw_nm_0x460_460::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gw_nm_0x460_460)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmlimphomeType gwnmlimphome = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gwnmlimphome(), output);
  }

  // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmsleepindType gwnmsleepind = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gwnmsleepind(), output);
  }

  // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmsleepackType gwnmsleepack = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gwnmsleepack(), output);
  }

  // optional int32 gwnmdestaddr = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gwnmdestaddr(), output);
  }

  // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmaliveType gwnmalive = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->gwnmalive(), output);
  }

  // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmringType gwnmring = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->gwnmring(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gw_nm_0x460_460)
}

::google::protobuf::uint8* Gw_nm_0x460_460::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gw_nm_0x460_460)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmlimphomeType gwnmlimphome = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gwnmlimphome(), target);
  }

  // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmsleepindType gwnmsleepind = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gwnmsleepind(), target);
  }

  // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmsleepackType gwnmsleepack = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gwnmsleepack(), target);
  }

  // optional int32 gwnmdestaddr = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gwnmdestaddr(), target);
  }

  // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmaliveType gwnmalive = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->gwnmalive(), target);
  }

  // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmringType gwnmring = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->gwnmring(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gw_nm_0x460_460)
  return target;
}

size_t Gw_nm_0x460_460::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gw_nm_0x460_460)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmlimphomeType gwnmlimphome = 1;
    if (has_gwnmlimphome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gwnmlimphome());
    }

    // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmsleepindType gwnmsleepind = 2;
    if (has_gwnmsleepind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gwnmsleepind());
    }

    // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmsleepackType gwnmsleepack = 3;
    if (has_gwnmsleepack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gwnmsleepack());
    }

    // optional int32 gwnmdestaddr = 4;
    if (has_gwnmdestaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gwnmdestaddr());
    }

    // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmaliveType gwnmalive = 5;
    if (has_gwnmalive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gwnmalive());
    }

    // optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmringType gwnmring = 6;
    if (has_gwnmring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gwnmring());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gw_nm_0x460_460::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gw_nm_0x460_460)
  GOOGLE_DCHECK_NE(&from, this);
  const Gw_nm_0x460_460* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gw_nm_0x460_460>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gw_nm_0x460_460)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gw_nm_0x460_460)
    MergeFrom(*source);
  }
}

void Gw_nm_0x460_460::MergeFrom(const Gw_nm_0x460_460& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gw_nm_0x460_460)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      gwnmlimphome_ = from.gwnmlimphome_;
    }
    if (cached_has_bits & 0x00000002u) {
      gwnmsleepind_ = from.gwnmsleepind_;
    }
    if (cached_has_bits & 0x00000004u) {
      gwnmsleepack_ = from.gwnmsleepack_;
    }
    if (cached_has_bits & 0x00000008u) {
      gwnmdestaddr_ = from.gwnmdestaddr_;
    }
    if (cached_has_bits & 0x00000010u) {
      gwnmalive_ = from.gwnmalive_;
    }
    if (cached_has_bits & 0x00000020u) {
      gwnmring_ = from.gwnmring_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gw_nm_0x460_460::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gw_nm_0x460_460)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gw_nm_0x460_460::CopyFrom(const Gw_nm_0x460_460& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gw_nm_0x460_460)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gw_nm_0x460_460::IsInitialized() const {
  return true;
}

void Gw_nm_0x460_460::Swap(Gw_nm_0x460_460* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gw_nm_0x460_460::InternalSwap(Gw_nm_0x460_460* other) {
  std::swap(gwnmlimphome_, other->gwnmlimphome_);
  std::swap(gwnmsleepind_, other->gwnmsleepind_);
  std::swap(gwnmsleepack_, other->gwnmsleepack_);
  std::swap(gwnmdestaddr_, other->gwnmdestaddr_);
  std::swap(gwnmalive_, other->gwnmalive_);
  std::swap(gwnmring_, other->gwnmring_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gw_nm_0x460_460::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gw_nm_0x460_460

// optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmlimphomeType gwnmlimphome = 1;
bool Gw_nm_0x460_460::has_gwnmlimphome() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gw_nm_0x460_460::set_has_gwnmlimphome() {
  _has_bits_[0] |= 0x00000001u;
}
void Gw_nm_0x460_460::clear_has_gwnmlimphome() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gw_nm_0x460_460::clear_gwnmlimphome() {
  gwnmlimphome_ = 0;
  clear_has_gwnmlimphome();
}
::jmc_auto::canbus::Gw_nm_0x460_460_GwnmlimphomeType Gw_nm_0x460_460::gwnmlimphome() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_nm_0x460_460.gwnmlimphome)
  return static_cast< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmlimphomeType >(gwnmlimphome_);
}
void Gw_nm_0x460_460::set_gwnmlimphome(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmlimphomeType value) {
  assert(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmlimphomeType_IsValid(value));
  set_has_gwnmlimphome();
  gwnmlimphome_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_nm_0x460_460.gwnmlimphome)
}

// optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmsleepindType gwnmsleepind = 2;
bool Gw_nm_0x460_460::has_gwnmsleepind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gw_nm_0x460_460::set_has_gwnmsleepind() {
  _has_bits_[0] |= 0x00000002u;
}
void Gw_nm_0x460_460::clear_has_gwnmsleepind() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gw_nm_0x460_460::clear_gwnmsleepind() {
  gwnmsleepind_ = 0;
  clear_has_gwnmsleepind();
}
::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepindType Gw_nm_0x460_460::gwnmsleepind() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_nm_0x460_460.gwnmsleepind)
  return static_cast< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepindType >(gwnmsleepind_);
}
void Gw_nm_0x460_460::set_gwnmsleepind(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepindType value) {
  assert(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepindType_IsValid(value));
  set_has_gwnmsleepind();
  gwnmsleepind_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_nm_0x460_460.gwnmsleepind)
}

// optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmsleepackType gwnmsleepack = 3;
bool Gw_nm_0x460_460::has_gwnmsleepack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gw_nm_0x460_460::set_has_gwnmsleepack() {
  _has_bits_[0] |= 0x00000004u;
}
void Gw_nm_0x460_460::clear_has_gwnmsleepack() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gw_nm_0x460_460::clear_gwnmsleepack() {
  gwnmsleepack_ = 0;
  clear_has_gwnmsleepack();
}
::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepackType Gw_nm_0x460_460::gwnmsleepack() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_nm_0x460_460.gwnmsleepack)
  return static_cast< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepackType >(gwnmsleepack_);
}
void Gw_nm_0x460_460::set_gwnmsleepack(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepackType value) {
  assert(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmsleepackType_IsValid(value));
  set_has_gwnmsleepack();
  gwnmsleepack_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_nm_0x460_460.gwnmsleepack)
}

// optional int32 gwnmdestaddr = 4;
bool Gw_nm_0x460_460::has_gwnmdestaddr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gw_nm_0x460_460::set_has_gwnmdestaddr() {
  _has_bits_[0] |= 0x00000008u;
}
void Gw_nm_0x460_460::clear_has_gwnmdestaddr() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gw_nm_0x460_460::clear_gwnmdestaddr() {
  gwnmdestaddr_ = 0;
  clear_has_gwnmdestaddr();
}
::google::protobuf::int32 Gw_nm_0x460_460::gwnmdestaddr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_nm_0x460_460.gwnmdestaddr)
  return gwnmdestaddr_;
}
void Gw_nm_0x460_460::set_gwnmdestaddr(::google::protobuf::int32 value) {
  set_has_gwnmdestaddr();
  gwnmdestaddr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_nm_0x460_460.gwnmdestaddr)
}

// optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmaliveType gwnmalive = 5;
bool Gw_nm_0x460_460::has_gwnmalive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gw_nm_0x460_460::set_has_gwnmalive() {
  _has_bits_[0] |= 0x00000010u;
}
void Gw_nm_0x460_460::clear_has_gwnmalive() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gw_nm_0x460_460::clear_gwnmalive() {
  gwnmalive_ = 0;
  clear_has_gwnmalive();
}
::jmc_auto::canbus::Gw_nm_0x460_460_GwnmaliveType Gw_nm_0x460_460::gwnmalive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_nm_0x460_460.gwnmalive)
  return static_cast< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmaliveType >(gwnmalive_);
}
void Gw_nm_0x460_460::set_gwnmalive(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmaliveType value) {
  assert(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmaliveType_IsValid(value));
  set_has_gwnmalive();
  gwnmalive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_nm_0x460_460.gwnmalive)
}

// optional .jmc_auto.canbus.Gw_nm_0x460_460.GwnmringType gwnmring = 6;
bool Gw_nm_0x460_460::has_gwnmring() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gw_nm_0x460_460::set_has_gwnmring() {
  _has_bits_[0] |= 0x00000020u;
}
void Gw_nm_0x460_460::clear_has_gwnmring() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gw_nm_0x460_460::clear_gwnmring() {
  gwnmring_ = 0;
  clear_has_gwnmring();
}
::jmc_auto::canbus::Gw_nm_0x460_460_GwnmringType Gw_nm_0x460_460::gwnmring() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_nm_0x460_460.gwnmring)
  return static_cast< ::jmc_auto::canbus::Gw_nm_0x460_460_GwnmringType >(gwnmring_);
}
void Gw_nm_0x460_460::set_gwnmring(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmringType value) {
  assert(::jmc_auto::canbus::Gw_nm_0x460_460_GwnmringType_IsValid(value));
  set_has_gwnmring();
  gwnmring_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_nm_0x460_460.gwnmring)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Eps_0x260_260::kEpsSassoftlimitrightflgFieldNumber;
const int Eps_0x260_260::kEpsNLoadinfoFieldNumber;
const int Eps_0x260_260::kEpsStEmergencypowerlimitFieldNumber;
const int Eps_0x260_260::kEpsStEmergencymotorFieldNumber;
const int Eps_0x260_260::kEpsStEmergencyecuFieldNumber;
const int Eps_0x260_260::kEpsStEmergencycaninterfaceFieldNumber;
const int Eps_0x260_260::kEpsStEmergencysensorFieldNumber;
const int Eps_0x260_260::kEpsStEmergencyovertempFieldNumber;
const int Eps_0x260_260::kEpsStEmergencyovervoltageFieldNumber;
const int Eps_0x260_260::kEpsStEmergencyundervoltageFieldNumber;
const int Eps_0x260_260::kEpsFEcutempvalidFieldNumber;
const int Eps_0x260_260::kEpsSassoftlimitleftflgFieldNumber;
const int Eps_0x260_260::kEpsNEcutempFieldNumber;
const int Eps_0x260_260::kEpsNPerformancereduFieldNumber;
const int Eps_0x260_260::kEpsStDtcflagFieldNumber;
const int Eps_0x260_260::kRollingCounter0X260FieldNumber;
const int Eps_0x260_260::kEpsSasindexstsFieldNumber;
const int Eps_0x260_260::kEpsSWarninglampyellowFieldNumber;
const int Eps_0x260_260::kChecksum0X260FieldNumber;
const int Eps_0x260_260::kEpsSSafelampredFieldNumber;
const int Eps_0x260_260::kEpsFLoadinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Eps_0x260_260::Eps_0x260_260()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Eps_0x260_260)
}
Eps_0x260_260::Eps_0x260_260(const Eps_0x260_260& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eps_sassoftlimitrightflg_, &from.eps_sassoftlimitrightflg_,
    reinterpret_cast<char*>(&eps_f_loadinfo_) -
    reinterpret_cast<char*>(&eps_sassoftlimitrightflg_) + sizeof(eps_f_loadinfo_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Eps_0x260_260)
}

void Eps_0x260_260::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&eps_sassoftlimitrightflg_, 0, reinterpret_cast<char*>(&eps_f_loadinfo_) -
    reinterpret_cast<char*>(&eps_sassoftlimitrightflg_) + sizeof(eps_f_loadinfo_));
}

Eps_0x260_260::~Eps_0x260_260() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Eps_0x260_260)
  SharedDtor();
}

void Eps_0x260_260::SharedDtor() {
}

void Eps_0x260_260::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Eps_0x260_260::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Eps_0x260_260& Eps_0x260_260::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Eps_0x260_260* Eps_0x260_260::New(::google::protobuf::Arena* arena) const {
  Eps_0x260_260* n = new Eps_0x260_260;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Eps_0x260_260::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Eps_0x260_260)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&eps_sassoftlimitrightflg_, 0, reinterpret_cast<char*>(&eps_st_emergencyovertemp_) -
      reinterpret_cast<char*>(&eps_sassoftlimitrightflg_) + sizeof(eps_st_emergencyovertemp_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&eps_st_emergencyovervoltage_, 0, reinterpret_cast<char*>(&rolling_counter_0x260_) -
      reinterpret_cast<char*>(&eps_st_emergencyovervoltage_) + sizeof(rolling_counter_0x260_));
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    ::memset(&eps_sasindexsts_, 0, reinterpret_cast<char*>(&eps_f_loadinfo_) -
      reinterpret_cast<char*>(&eps_sasindexsts_) + sizeof(eps_f_loadinfo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Eps_0x260_260::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Eps_0x260_260)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Eps_0x260_260.Eps_sassoftlimitrightflgType eps_sassoftlimitrightflg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitrightflgType_IsValid(value)) {
            set_eps_sassoftlimitrightflg(static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitrightflgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eps_n_loadinfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_eps_n_loadinfo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eps_n_loadinfo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencypowerlimitType eps_st_emergencypowerlimit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencypowerlimitType_IsValid(value)) {
            set_eps_st_emergencypowerlimit(static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencypowerlimitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencymotorType eps_st_emergencymotor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencymotorType_IsValid(value)) {
            set_eps_st_emergencymotor(static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencymotorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyecuType eps_st_emergencyecu = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyecuType_IsValid(value)) {
            set_eps_st_emergencyecu(static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyecuType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencycaninterfaceType eps_st_emergencycaninterface = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencycaninterfaceType_IsValid(value)) {
            set_eps_st_emergencycaninterface(static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencycaninterfaceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencysensorType eps_st_emergencysensor = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencysensorType_IsValid(value)) {
            set_eps_st_emergencysensor(static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencysensorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyovertempType eps_st_emergencyovertemp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovertempType_IsValid(value)) {
            set_eps_st_emergencyovertemp(static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovertempType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyovervoltageType eps_st_emergencyovervoltage = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovervoltageType_IsValid(value)) {
            set_eps_st_emergencyovervoltage(static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovervoltageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyundervoltageType eps_st_emergencyundervoltage = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyundervoltageType_IsValid(value)) {
            set_eps_st_emergencyundervoltage(static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyundervoltageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_0x260_260.Eps_f_ecutempvalidType eps_f_ecutempvalid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_0x260_260_Eps_f_ecutempvalidType_IsValid(value)) {
            set_eps_f_ecutempvalid(static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_f_ecutempvalidType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_0x260_260.Eps_sassoftlimitleftflgType eps_sassoftlimitleftflg = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitleftflgType_IsValid(value)) {
            set_eps_sassoftlimitleftflg(static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitleftflgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eps_n_ecutemp = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_eps_n_ecutemp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eps_n_ecutemp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double eps_n_performanceredu = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_eps_n_performanceredu();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eps_n_performanceredu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_dtcflagType eps_st_dtcflag = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_0x260_260_Eps_st_dtcflagType_IsValid(value)) {
            set_eps_st_dtcflag(static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_dtcflagType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x260 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_rolling_counter_0x260();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x260_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_0x260_260.Eps_sasindexstsType eps_sasindexsts = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_0x260_260_Eps_sasindexstsType_IsValid(value)) {
            set_eps_sasindexsts(static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_sasindexstsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_0x260_260.Eps_s_warninglampyellowType eps_s_warninglampyellow = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_0x260_260_Eps_s_warninglampyellowType_IsValid(value)) {
            set_eps_s_warninglampyellow(static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_s_warninglampyellowType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x260 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_checksum_0x260();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x260_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_0x260_260.Eps_s_safelampredType eps_s_safelampred = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_0x260_260_Eps_s_safelampredType_IsValid(value)) {
            set_eps_s_safelampred(static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_s_safelampredType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_0x260_260.Eps_f_loadinfoType eps_f_loadinfo = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Eps_0x260_260_Eps_f_loadinfoType_IsValid(value)) {
            set_eps_f_loadinfo(static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_f_loadinfoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Eps_0x260_260)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Eps_0x260_260)
  return false;
#undef DO_
}

void Eps_0x260_260::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Eps_0x260_260)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_sassoftlimitrightflgType eps_sassoftlimitrightflg = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->eps_sassoftlimitrightflg(), output);
  }

  // optional int32 eps_n_loadinfo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eps_n_loadinfo(), output);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencypowerlimitType eps_st_emergencypowerlimit = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->eps_st_emergencypowerlimit(), output);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencymotorType eps_st_emergencymotor = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->eps_st_emergencymotor(), output);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyecuType eps_st_emergencyecu = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->eps_st_emergencyecu(), output);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencycaninterfaceType eps_st_emergencycaninterface = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->eps_st_emergencycaninterface(), output);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencysensorType eps_st_emergencysensor = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->eps_st_emergencysensor(), output);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyovertempType eps_st_emergencyovertemp = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->eps_st_emergencyovertemp(), output);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyovervoltageType eps_st_emergencyovervoltage = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->eps_st_emergencyovervoltage(), output);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyundervoltageType eps_st_emergencyundervoltage = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->eps_st_emergencyundervoltage(), output);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_f_ecutempvalidType eps_f_ecutempvalid = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->eps_f_ecutempvalid(), output);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_sassoftlimitleftflgType eps_sassoftlimitleftflg = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->eps_sassoftlimitleftflg(), output);
  }

  // optional int32 eps_n_ecutemp = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->eps_n_ecutemp(), output);
  }

  // optional double eps_n_performanceredu = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->eps_n_performanceredu(), output);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_dtcflagType eps_st_dtcflag = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->eps_st_dtcflag(), output);
  }

  // optional int32 rolling_counter_0x260 = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->rolling_counter_0x260(), output);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_sasindexstsType eps_sasindexsts = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->eps_sasindexsts(), output);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_s_warninglampyellowType eps_s_warninglampyellow = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->eps_s_warninglampyellow(), output);
  }

  // optional int32 checksum_0x260 = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->checksum_0x260(), output);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_s_safelampredType eps_s_safelampred = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->eps_s_safelampred(), output);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_f_loadinfoType eps_f_loadinfo = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->eps_f_loadinfo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Eps_0x260_260)
}

::google::protobuf::uint8* Eps_0x260_260::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Eps_0x260_260)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_sassoftlimitrightflgType eps_sassoftlimitrightflg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->eps_sassoftlimitrightflg(), target);
  }

  // optional int32 eps_n_loadinfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eps_n_loadinfo(), target);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencypowerlimitType eps_st_emergencypowerlimit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->eps_st_emergencypowerlimit(), target);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencymotorType eps_st_emergencymotor = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->eps_st_emergencymotor(), target);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyecuType eps_st_emergencyecu = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->eps_st_emergencyecu(), target);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencycaninterfaceType eps_st_emergencycaninterface = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->eps_st_emergencycaninterface(), target);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencysensorType eps_st_emergencysensor = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->eps_st_emergencysensor(), target);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyovertempType eps_st_emergencyovertemp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->eps_st_emergencyovertemp(), target);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyovervoltageType eps_st_emergencyovervoltage = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->eps_st_emergencyovervoltage(), target);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyundervoltageType eps_st_emergencyundervoltage = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->eps_st_emergencyundervoltage(), target);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_f_ecutempvalidType eps_f_ecutempvalid = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->eps_f_ecutempvalid(), target);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_sassoftlimitleftflgType eps_sassoftlimitleftflg = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->eps_sassoftlimitleftflg(), target);
  }

  // optional int32 eps_n_ecutemp = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->eps_n_ecutemp(), target);
  }

  // optional double eps_n_performanceredu = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->eps_n_performanceredu(), target);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_dtcflagType eps_st_dtcflag = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->eps_st_dtcflag(), target);
  }

  // optional int32 rolling_counter_0x260 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->rolling_counter_0x260(), target);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_sasindexstsType eps_sasindexsts = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->eps_sasindexsts(), target);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_s_warninglampyellowType eps_s_warninglampyellow = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->eps_s_warninglampyellow(), target);
  }

  // optional int32 checksum_0x260 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->checksum_0x260(), target);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_s_safelampredType eps_s_safelampred = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->eps_s_safelampred(), target);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260.Eps_f_loadinfoType eps_f_loadinfo = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->eps_f_loadinfo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Eps_0x260_260)
  return target;
}

size_t Eps_0x260_260::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Eps_0x260_260)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Eps_0x260_260.Eps_sassoftlimitrightflgType eps_sassoftlimitrightflg = 1;
    if (has_eps_sassoftlimitrightflg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_sassoftlimitrightflg());
    }

    // optional int32 eps_n_loadinfo = 2;
    if (has_eps_n_loadinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eps_n_loadinfo());
    }

    // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencypowerlimitType eps_st_emergencypowerlimit = 3;
    if (has_eps_st_emergencypowerlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_st_emergencypowerlimit());
    }

    // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencymotorType eps_st_emergencymotor = 4;
    if (has_eps_st_emergencymotor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_st_emergencymotor());
    }

    // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyecuType eps_st_emergencyecu = 5;
    if (has_eps_st_emergencyecu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_st_emergencyecu());
    }

    // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencycaninterfaceType eps_st_emergencycaninterface = 6;
    if (has_eps_st_emergencycaninterface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_st_emergencycaninterface());
    }

    // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencysensorType eps_st_emergencysensor = 7;
    if (has_eps_st_emergencysensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_st_emergencysensor());
    }

    // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyovertempType eps_st_emergencyovertemp = 8;
    if (has_eps_st_emergencyovertemp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_st_emergencyovertemp());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyovervoltageType eps_st_emergencyovervoltage = 9;
    if (has_eps_st_emergencyovervoltage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_st_emergencyovervoltage());
    }

    // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyundervoltageType eps_st_emergencyundervoltage = 10;
    if (has_eps_st_emergencyundervoltage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_st_emergencyundervoltage());
    }

    // optional .jmc_auto.canbus.Eps_0x260_260.Eps_f_ecutempvalidType eps_f_ecutempvalid = 11;
    if (has_eps_f_ecutempvalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_f_ecutempvalid());
    }

    // optional .jmc_auto.canbus.Eps_0x260_260.Eps_sassoftlimitleftflgType eps_sassoftlimitleftflg = 12;
    if (has_eps_sassoftlimitleftflg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_sassoftlimitleftflg());
    }

    // optional double eps_n_performanceredu = 14;
    if (has_eps_n_performanceredu()) {
      total_size += 1 + 8;
    }

    // optional int32 eps_n_ecutemp = 13;
    if (has_eps_n_ecutemp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eps_n_ecutemp());
    }

    // optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_dtcflagType eps_st_dtcflag = 15;
    if (has_eps_st_dtcflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_st_dtcflag());
    }

    // optional int32 rolling_counter_0x260 = 16;
    if (has_rolling_counter_0x260()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x260());
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional .jmc_auto.canbus.Eps_0x260_260.Eps_sasindexstsType eps_sasindexsts = 17;
    if (has_eps_sasindexsts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_sasindexsts());
    }

    // optional .jmc_auto.canbus.Eps_0x260_260.Eps_s_warninglampyellowType eps_s_warninglampyellow = 18;
    if (has_eps_s_warninglampyellow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_s_warninglampyellow());
    }

    // optional int32 checksum_0x260 = 19;
    if (has_checksum_0x260()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x260());
    }

    // optional .jmc_auto.canbus.Eps_0x260_260.Eps_s_safelampredType eps_s_safelampred = 20;
    if (has_eps_s_safelampred()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_s_safelampred());
    }

    // optional .jmc_auto.canbus.Eps_0x260_260.Eps_f_loadinfoType eps_f_loadinfo = 21;
    if (has_eps_f_loadinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eps_f_loadinfo());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Eps_0x260_260::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Eps_0x260_260)
  GOOGLE_DCHECK_NE(&from, this);
  const Eps_0x260_260* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Eps_0x260_260>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Eps_0x260_260)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Eps_0x260_260)
    MergeFrom(*source);
  }
}

void Eps_0x260_260::MergeFrom(const Eps_0x260_260& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Eps_0x260_260)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      eps_sassoftlimitrightflg_ = from.eps_sassoftlimitrightflg_;
    }
    if (cached_has_bits & 0x00000002u) {
      eps_n_loadinfo_ = from.eps_n_loadinfo_;
    }
    if (cached_has_bits & 0x00000004u) {
      eps_st_emergencypowerlimit_ = from.eps_st_emergencypowerlimit_;
    }
    if (cached_has_bits & 0x00000008u) {
      eps_st_emergencymotor_ = from.eps_st_emergencymotor_;
    }
    if (cached_has_bits & 0x00000010u) {
      eps_st_emergencyecu_ = from.eps_st_emergencyecu_;
    }
    if (cached_has_bits & 0x00000020u) {
      eps_st_emergencycaninterface_ = from.eps_st_emergencycaninterface_;
    }
    if (cached_has_bits & 0x00000040u) {
      eps_st_emergencysensor_ = from.eps_st_emergencysensor_;
    }
    if (cached_has_bits & 0x00000080u) {
      eps_st_emergencyovertemp_ = from.eps_st_emergencyovertemp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      eps_st_emergencyovervoltage_ = from.eps_st_emergencyovervoltage_;
    }
    if (cached_has_bits & 0x00000200u) {
      eps_st_emergencyundervoltage_ = from.eps_st_emergencyundervoltage_;
    }
    if (cached_has_bits & 0x00000400u) {
      eps_f_ecutempvalid_ = from.eps_f_ecutempvalid_;
    }
    if (cached_has_bits & 0x00000800u) {
      eps_sassoftlimitleftflg_ = from.eps_sassoftlimitleftflg_;
    }
    if (cached_has_bits & 0x00001000u) {
      eps_n_performanceredu_ = from.eps_n_performanceredu_;
    }
    if (cached_has_bits & 0x00002000u) {
      eps_n_ecutemp_ = from.eps_n_ecutemp_;
    }
    if (cached_has_bits & 0x00004000u) {
      eps_st_dtcflag_ = from.eps_st_dtcflag_;
    }
    if (cached_has_bits & 0x00008000u) {
      rolling_counter_0x260_ = from.rolling_counter_0x260_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      eps_sasindexsts_ = from.eps_sasindexsts_;
    }
    if (cached_has_bits & 0x00020000u) {
      eps_s_warninglampyellow_ = from.eps_s_warninglampyellow_;
    }
    if (cached_has_bits & 0x00040000u) {
      checksum_0x260_ = from.checksum_0x260_;
    }
    if (cached_has_bits & 0x00080000u) {
      eps_s_safelampred_ = from.eps_s_safelampred_;
    }
    if (cached_has_bits & 0x00100000u) {
      eps_f_loadinfo_ = from.eps_f_loadinfo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Eps_0x260_260::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Eps_0x260_260)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Eps_0x260_260::CopyFrom(const Eps_0x260_260& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Eps_0x260_260)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Eps_0x260_260::IsInitialized() const {
  return true;
}

void Eps_0x260_260::Swap(Eps_0x260_260* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Eps_0x260_260::InternalSwap(Eps_0x260_260* other) {
  std::swap(eps_sassoftlimitrightflg_, other->eps_sassoftlimitrightflg_);
  std::swap(eps_n_loadinfo_, other->eps_n_loadinfo_);
  std::swap(eps_st_emergencypowerlimit_, other->eps_st_emergencypowerlimit_);
  std::swap(eps_st_emergencymotor_, other->eps_st_emergencymotor_);
  std::swap(eps_st_emergencyecu_, other->eps_st_emergencyecu_);
  std::swap(eps_st_emergencycaninterface_, other->eps_st_emergencycaninterface_);
  std::swap(eps_st_emergencysensor_, other->eps_st_emergencysensor_);
  std::swap(eps_st_emergencyovertemp_, other->eps_st_emergencyovertemp_);
  std::swap(eps_st_emergencyovervoltage_, other->eps_st_emergencyovervoltage_);
  std::swap(eps_st_emergencyundervoltage_, other->eps_st_emergencyundervoltage_);
  std::swap(eps_f_ecutempvalid_, other->eps_f_ecutempvalid_);
  std::swap(eps_sassoftlimitleftflg_, other->eps_sassoftlimitleftflg_);
  std::swap(eps_n_performanceredu_, other->eps_n_performanceredu_);
  std::swap(eps_n_ecutemp_, other->eps_n_ecutemp_);
  std::swap(eps_st_dtcflag_, other->eps_st_dtcflag_);
  std::swap(rolling_counter_0x260_, other->rolling_counter_0x260_);
  std::swap(eps_sasindexsts_, other->eps_sasindexsts_);
  std::swap(eps_s_warninglampyellow_, other->eps_s_warninglampyellow_);
  std::swap(checksum_0x260_, other->checksum_0x260_);
  std::swap(eps_s_safelampred_, other->eps_s_safelampred_);
  std::swap(eps_f_loadinfo_, other->eps_f_loadinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Eps_0x260_260::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Eps_0x260_260

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_sassoftlimitrightflgType eps_sassoftlimitrightflg = 1;
bool Eps_0x260_260::has_eps_sassoftlimitrightflg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Eps_0x260_260::set_has_eps_sassoftlimitrightflg() {
  _has_bits_[0] |= 0x00000001u;
}
void Eps_0x260_260::clear_has_eps_sassoftlimitrightflg() {
  _has_bits_[0] &= ~0x00000001u;
}
void Eps_0x260_260::clear_eps_sassoftlimitrightflg() {
  eps_sassoftlimitrightflg_ = 0;
  clear_has_eps_sassoftlimitrightflg();
}
::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitrightflgType Eps_0x260_260::eps_sassoftlimitrightflg() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_sassoftlimitrightflg)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitrightflgType >(eps_sassoftlimitrightflg_);
}
void Eps_0x260_260::set_eps_sassoftlimitrightflg(::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitrightflgType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitrightflgType_IsValid(value));
  set_has_eps_sassoftlimitrightflg();
  eps_sassoftlimitrightflg_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_sassoftlimitrightflg)
}

// optional int32 eps_n_loadinfo = 2;
bool Eps_0x260_260::has_eps_n_loadinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Eps_0x260_260::set_has_eps_n_loadinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void Eps_0x260_260::clear_has_eps_n_loadinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void Eps_0x260_260::clear_eps_n_loadinfo() {
  eps_n_loadinfo_ = 0;
  clear_has_eps_n_loadinfo();
}
::google::protobuf::int32 Eps_0x260_260::eps_n_loadinfo() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_n_loadinfo)
  return eps_n_loadinfo_;
}
void Eps_0x260_260::set_eps_n_loadinfo(::google::protobuf::int32 value) {
  set_has_eps_n_loadinfo();
  eps_n_loadinfo_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_n_loadinfo)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencypowerlimitType eps_st_emergencypowerlimit = 3;
bool Eps_0x260_260::has_eps_st_emergencypowerlimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Eps_0x260_260::set_has_eps_st_emergencypowerlimit() {
  _has_bits_[0] |= 0x00000004u;
}
void Eps_0x260_260::clear_has_eps_st_emergencypowerlimit() {
  _has_bits_[0] &= ~0x00000004u;
}
void Eps_0x260_260::clear_eps_st_emergencypowerlimit() {
  eps_st_emergencypowerlimit_ = 0;
  clear_has_eps_st_emergencypowerlimit();
}
::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencypowerlimitType Eps_0x260_260::eps_st_emergencypowerlimit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencypowerlimit)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencypowerlimitType >(eps_st_emergencypowerlimit_);
}
void Eps_0x260_260::set_eps_st_emergencypowerlimit(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencypowerlimitType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencypowerlimitType_IsValid(value));
  set_has_eps_st_emergencypowerlimit();
  eps_st_emergencypowerlimit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencypowerlimit)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencymotorType eps_st_emergencymotor = 4;
bool Eps_0x260_260::has_eps_st_emergencymotor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Eps_0x260_260::set_has_eps_st_emergencymotor() {
  _has_bits_[0] |= 0x00000008u;
}
void Eps_0x260_260::clear_has_eps_st_emergencymotor() {
  _has_bits_[0] &= ~0x00000008u;
}
void Eps_0x260_260::clear_eps_st_emergencymotor() {
  eps_st_emergencymotor_ = 0;
  clear_has_eps_st_emergencymotor();
}
::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencymotorType Eps_0x260_260::eps_st_emergencymotor() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencymotor)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencymotorType >(eps_st_emergencymotor_);
}
void Eps_0x260_260::set_eps_st_emergencymotor(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencymotorType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencymotorType_IsValid(value));
  set_has_eps_st_emergencymotor();
  eps_st_emergencymotor_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencymotor)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyecuType eps_st_emergencyecu = 5;
bool Eps_0x260_260::has_eps_st_emergencyecu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Eps_0x260_260::set_has_eps_st_emergencyecu() {
  _has_bits_[0] |= 0x00000010u;
}
void Eps_0x260_260::clear_has_eps_st_emergencyecu() {
  _has_bits_[0] &= ~0x00000010u;
}
void Eps_0x260_260::clear_eps_st_emergencyecu() {
  eps_st_emergencyecu_ = 0;
  clear_has_eps_st_emergencyecu();
}
::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyecuType Eps_0x260_260::eps_st_emergencyecu() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencyecu)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyecuType >(eps_st_emergencyecu_);
}
void Eps_0x260_260::set_eps_st_emergencyecu(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyecuType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyecuType_IsValid(value));
  set_has_eps_st_emergencyecu();
  eps_st_emergencyecu_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencyecu)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencycaninterfaceType eps_st_emergencycaninterface = 6;
bool Eps_0x260_260::has_eps_st_emergencycaninterface() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Eps_0x260_260::set_has_eps_st_emergencycaninterface() {
  _has_bits_[0] |= 0x00000020u;
}
void Eps_0x260_260::clear_has_eps_st_emergencycaninterface() {
  _has_bits_[0] &= ~0x00000020u;
}
void Eps_0x260_260::clear_eps_st_emergencycaninterface() {
  eps_st_emergencycaninterface_ = 0;
  clear_has_eps_st_emergencycaninterface();
}
::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencycaninterfaceType Eps_0x260_260::eps_st_emergencycaninterface() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencycaninterface)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencycaninterfaceType >(eps_st_emergencycaninterface_);
}
void Eps_0x260_260::set_eps_st_emergencycaninterface(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencycaninterfaceType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencycaninterfaceType_IsValid(value));
  set_has_eps_st_emergencycaninterface();
  eps_st_emergencycaninterface_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencycaninterface)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencysensorType eps_st_emergencysensor = 7;
bool Eps_0x260_260::has_eps_st_emergencysensor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Eps_0x260_260::set_has_eps_st_emergencysensor() {
  _has_bits_[0] |= 0x00000040u;
}
void Eps_0x260_260::clear_has_eps_st_emergencysensor() {
  _has_bits_[0] &= ~0x00000040u;
}
void Eps_0x260_260::clear_eps_st_emergencysensor() {
  eps_st_emergencysensor_ = 0;
  clear_has_eps_st_emergencysensor();
}
::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencysensorType Eps_0x260_260::eps_st_emergencysensor() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencysensor)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencysensorType >(eps_st_emergencysensor_);
}
void Eps_0x260_260::set_eps_st_emergencysensor(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencysensorType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencysensorType_IsValid(value));
  set_has_eps_st_emergencysensor();
  eps_st_emergencysensor_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencysensor)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyovertempType eps_st_emergencyovertemp = 8;
bool Eps_0x260_260::has_eps_st_emergencyovertemp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Eps_0x260_260::set_has_eps_st_emergencyovertemp() {
  _has_bits_[0] |= 0x00000080u;
}
void Eps_0x260_260::clear_has_eps_st_emergencyovertemp() {
  _has_bits_[0] &= ~0x00000080u;
}
void Eps_0x260_260::clear_eps_st_emergencyovertemp() {
  eps_st_emergencyovertemp_ = 0;
  clear_has_eps_st_emergencyovertemp();
}
::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovertempType Eps_0x260_260::eps_st_emergencyovertemp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencyovertemp)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovertempType >(eps_st_emergencyovertemp_);
}
void Eps_0x260_260::set_eps_st_emergencyovertemp(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovertempType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovertempType_IsValid(value));
  set_has_eps_st_emergencyovertemp();
  eps_st_emergencyovertemp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencyovertemp)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyovervoltageType eps_st_emergencyovervoltage = 9;
bool Eps_0x260_260::has_eps_st_emergencyovervoltage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Eps_0x260_260::set_has_eps_st_emergencyovervoltage() {
  _has_bits_[0] |= 0x00000100u;
}
void Eps_0x260_260::clear_has_eps_st_emergencyovervoltage() {
  _has_bits_[0] &= ~0x00000100u;
}
void Eps_0x260_260::clear_eps_st_emergencyovervoltage() {
  eps_st_emergencyovervoltage_ = 0;
  clear_has_eps_st_emergencyovervoltage();
}
::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovervoltageType Eps_0x260_260::eps_st_emergencyovervoltage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencyovervoltage)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovervoltageType >(eps_st_emergencyovervoltage_);
}
void Eps_0x260_260::set_eps_st_emergencyovervoltage(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovervoltageType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyovervoltageType_IsValid(value));
  set_has_eps_st_emergencyovervoltage();
  eps_st_emergencyovervoltage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencyovervoltage)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_emergencyundervoltageType eps_st_emergencyundervoltage = 10;
bool Eps_0x260_260::has_eps_st_emergencyundervoltage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Eps_0x260_260::set_has_eps_st_emergencyundervoltage() {
  _has_bits_[0] |= 0x00000200u;
}
void Eps_0x260_260::clear_has_eps_st_emergencyundervoltage() {
  _has_bits_[0] &= ~0x00000200u;
}
void Eps_0x260_260::clear_eps_st_emergencyundervoltage() {
  eps_st_emergencyundervoltage_ = 0;
  clear_has_eps_st_emergencyundervoltage();
}
::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyundervoltageType Eps_0x260_260::eps_st_emergencyundervoltage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencyundervoltage)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyundervoltageType >(eps_st_emergencyundervoltage_);
}
void Eps_0x260_260::set_eps_st_emergencyundervoltage(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyundervoltageType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_emergencyundervoltageType_IsValid(value));
  set_has_eps_st_emergencyundervoltage();
  eps_st_emergencyundervoltage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_emergencyundervoltage)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_f_ecutempvalidType eps_f_ecutempvalid = 11;
bool Eps_0x260_260::has_eps_f_ecutempvalid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Eps_0x260_260::set_has_eps_f_ecutempvalid() {
  _has_bits_[0] |= 0x00000400u;
}
void Eps_0x260_260::clear_has_eps_f_ecutempvalid() {
  _has_bits_[0] &= ~0x00000400u;
}
void Eps_0x260_260::clear_eps_f_ecutempvalid() {
  eps_f_ecutempvalid_ = 0;
  clear_has_eps_f_ecutempvalid();
}
::jmc_auto::canbus::Eps_0x260_260_Eps_f_ecutempvalidType Eps_0x260_260::eps_f_ecutempvalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_f_ecutempvalid)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_f_ecutempvalidType >(eps_f_ecutempvalid_);
}
void Eps_0x260_260::set_eps_f_ecutempvalid(::jmc_auto::canbus::Eps_0x260_260_Eps_f_ecutempvalidType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_f_ecutempvalidType_IsValid(value));
  set_has_eps_f_ecutempvalid();
  eps_f_ecutempvalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_f_ecutempvalid)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_sassoftlimitleftflgType eps_sassoftlimitleftflg = 12;
bool Eps_0x260_260::has_eps_sassoftlimitleftflg() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Eps_0x260_260::set_has_eps_sassoftlimitleftflg() {
  _has_bits_[0] |= 0x00000800u;
}
void Eps_0x260_260::clear_has_eps_sassoftlimitleftflg() {
  _has_bits_[0] &= ~0x00000800u;
}
void Eps_0x260_260::clear_eps_sassoftlimitleftflg() {
  eps_sassoftlimitleftflg_ = 0;
  clear_has_eps_sassoftlimitleftflg();
}
::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitleftflgType Eps_0x260_260::eps_sassoftlimitleftflg() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_sassoftlimitleftflg)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitleftflgType >(eps_sassoftlimitleftflg_);
}
void Eps_0x260_260::set_eps_sassoftlimitleftflg(::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitleftflgType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_sassoftlimitleftflgType_IsValid(value));
  set_has_eps_sassoftlimitleftflg();
  eps_sassoftlimitleftflg_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_sassoftlimitleftflg)
}

// optional int32 eps_n_ecutemp = 13;
bool Eps_0x260_260::has_eps_n_ecutemp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Eps_0x260_260::set_has_eps_n_ecutemp() {
  _has_bits_[0] |= 0x00002000u;
}
void Eps_0x260_260::clear_has_eps_n_ecutemp() {
  _has_bits_[0] &= ~0x00002000u;
}
void Eps_0x260_260::clear_eps_n_ecutemp() {
  eps_n_ecutemp_ = 0;
  clear_has_eps_n_ecutemp();
}
::google::protobuf::int32 Eps_0x260_260::eps_n_ecutemp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_n_ecutemp)
  return eps_n_ecutemp_;
}
void Eps_0x260_260::set_eps_n_ecutemp(::google::protobuf::int32 value) {
  set_has_eps_n_ecutemp();
  eps_n_ecutemp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_n_ecutemp)
}

// optional double eps_n_performanceredu = 14;
bool Eps_0x260_260::has_eps_n_performanceredu() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Eps_0x260_260::set_has_eps_n_performanceredu() {
  _has_bits_[0] |= 0x00001000u;
}
void Eps_0x260_260::clear_has_eps_n_performanceredu() {
  _has_bits_[0] &= ~0x00001000u;
}
void Eps_0x260_260::clear_eps_n_performanceredu() {
  eps_n_performanceredu_ = 0;
  clear_has_eps_n_performanceredu();
}
double Eps_0x260_260::eps_n_performanceredu() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_n_performanceredu)
  return eps_n_performanceredu_;
}
void Eps_0x260_260::set_eps_n_performanceredu(double value) {
  set_has_eps_n_performanceredu();
  eps_n_performanceredu_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_n_performanceredu)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_st_dtcflagType eps_st_dtcflag = 15;
bool Eps_0x260_260::has_eps_st_dtcflag() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Eps_0x260_260::set_has_eps_st_dtcflag() {
  _has_bits_[0] |= 0x00004000u;
}
void Eps_0x260_260::clear_has_eps_st_dtcflag() {
  _has_bits_[0] &= ~0x00004000u;
}
void Eps_0x260_260::clear_eps_st_dtcflag() {
  eps_st_dtcflag_ = 0;
  clear_has_eps_st_dtcflag();
}
::jmc_auto::canbus::Eps_0x260_260_Eps_st_dtcflagType Eps_0x260_260::eps_st_dtcflag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_st_dtcflag)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_st_dtcflagType >(eps_st_dtcflag_);
}
void Eps_0x260_260::set_eps_st_dtcflag(::jmc_auto::canbus::Eps_0x260_260_Eps_st_dtcflagType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_st_dtcflagType_IsValid(value));
  set_has_eps_st_dtcflag();
  eps_st_dtcflag_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_st_dtcflag)
}

// optional int32 rolling_counter_0x260 = 16;
bool Eps_0x260_260::has_rolling_counter_0x260() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Eps_0x260_260::set_has_rolling_counter_0x260() {
  _has_bits_[0] |= 0x00008000u;
}
void Eps_0x260_260::clear_has_rolling_counter_0x260() {
  _has_bits_[0] &= ~0x00008000u;
}
void Eps_0x260_260::clear_rolling_counter_0x260() {
  rolling_counter_0x260_ = 0;
  clear_has_rolling_counter_0x260();
}
::google::protobuf::int32 Eps_0x260_260::rolling_counter_0x260() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.rolling_counter_0x260)
  return rolling_counter_0x260_;
}
void Eps_0x260_260::set_rolling_counter_0x260(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x260();
  rolling_counter_0x260_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.rolling_counter_0x260)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_sasindexstsType eps_sasindexsts = 17;
bool Eps_0x260_260::has_eps_sasindexsts() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Eps_0x260_260::set_has_eps_sasindexsts() {
  _has_bits_[0] |= 0x00010000u;
}
void Eps_0x260_260::clear_has_eps_sasindexsts() {
  _has_bits_[0] &= ~0x00010000u;
}
void Eps_0x260_260::clear_eps_sasindexsts() {
  eps_sasindexsts_ = 0;
  clear_has_eps_sasindexsts();
}
::jmc_auto::canbus::Eps_0x260_260_Eps_sasindexstsType Eps_0x260_260::eps_sasindexsts() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_sasindexsts)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_sasindexstsType >(eps_sasindexsts_);
}
void Eps_0x260_260::set_eps_sasindexsts(::jmc_auto::canbus::Eps_0x260_260_Eps_sasindexstsType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_sasindexstsType_IsValid(value));
  set_has_eps_sasindexsts();
  eps_sasindexsts_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_sasindexsts)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_s_warninglampyellowType eps_s_warninglampyellow = 18;
bool Eps_0x260_260::has_eps_s_warninglampyellow() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Eps_0x260_260::set_has_eps_s_warninglampyellow() {
  _has_bits_[0] |= 0x00020000u;
}
void Eps_0x260_260::clear_has_eps_s_warninglampyellow() {
  _has_bits_[0] &= ~0x00020000u;
}
void Eps_0x260_260::clear_eps_s_warninglampyellow() {
  eps_s_warninglampyellow_ = 0;
  clear_has_eps_s_warninglampyellow();
}
::jmc_auto::canbus::Eps_0x260_260_Eps_s_warninglampyellowType Eps_0x260_260::eps_s_warninglampyellow() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_s_warninglampyellow)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_s_warninglampyellowType >(eps_s_warninglampyellow_);
}
void Eps_0x260_260::set_eps_s_warninglampyellow(::jmc_auto::canbus::Eps_0x260_260_Eps_s_warninglampyellowType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_s_warninglampyellowType_IsValid(value));
  set_has_eps_s_warninglampyellow();
  eps_s_warninglampyellow_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_s_warninglampyellow)
}

// optional int32 checksum_0x260 = 19;
bool Eps_0x260_260::has_checksum_0x260() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Eps_0x260_260::set_has_checksum_0x260() {
  _has_bits_[0] |= 0x00040000u;
}
void Eps_0x260_260::clear_has_checksum_0x260() {
  _has_bits_[0] &= ~0x00040000u;
}
void Eps_0x260_260::clear_checksum_0x260() {
  checksum_0x260_ = 0;
  clear_has_checksum_0x260();
}
::google::protobuf::int32 Eps_0x260_260::checksum_0x260() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.checksum_0x260)
  return checksum_0x260_;
}
void Eps_0x260_260::set_checksum_0x260(::google::protobuf::int32 value) {
  set_has_checksum_0x260();
  checksum_0x260_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.checksum_0x260)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_s_safelampredType eps_s_safelampred = 20;
bool Eps_0x260_260::has_eps_s_safelampred() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Eps_0x260_260::set_has_eps_s_safelampred() {
  _has_bits_[0] |= 0x00080000u;
}
void Eps_0x260_260::clear_has_eps_s_safelampred() {
  _has_bits_[0] &= ~0x00080000u;
}
void Eps_0x260_260::clear_eps_s_safelampred() {
  eps_s_safelampred_ = 0;
  clear_has_eps_s_safelampred();
}
::jmc_auto::canbus::Eps_0x260_260_Eps_s_safelampredType Eps_0x260_260::eps_s_safelampred() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_s_safelampred)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_s_safelampredType >(eps_s_safelampred_);
}
void Eps_0x260_260::set_eps_s_safelampred(::jmc_auto::canbus::Eps_0x260_260_Eps_s_safelampredType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_s_safelampredType_IsValid(value));
  set_has_eps_s_safelampred();
  eps_s_safelampred_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_s_safelampred)
}

// optional .jmc_auto.canbus.Eps_0x260_260.Eps_f_loadinfoType eps_f_loadinfo = 21;
bool Eps_0x260_260::has_eps_f_loadinfo() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Eps_0x260_260::set_has_eps_f_loadinfo() {
  _has_bits_[0] |= 0x00100000u;
}
void Eps_0x260_260::clear_has_eps_f_loadinfo() {
  _has_bits_[0] &= ~0x00100000u;
}
void Eps_0x260_260::clear_eps_f_loadinfo() {
  eps_f_loadinfo_ = 0;
  clear_has_eps_f_loadinfo();
}
::jmc_auto::canbus::Eps_0x260_260_Eps_f_loadinfoType Eps_0x260_260::eps_f_loadinfo() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Eps_0x260_260.eps_f_loadinfo)
  return static_cast< ::jmc_auto::canbus::Eps_0x260_260_Eps_f_loadinfoType >(eps_f_loadinfo_);
}
void Eps_0x260_260::set_eps_f_loadinfo(::jmc_auto::canbus::Eps_0x260_260_Eps_f_loadinfoType value) {
  assert(::jmc_auto::canbus::Eps_0x260_260_Eps_f_loadinfoType_IsValid(value));
  set_has_eps_f_loadinfo();
  eps_f_loadinfo_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Eps_0x260_260.eps_f_loadinfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sod_0x275_275::kSodLcaWarningreqrightFieldNumber;
const int Sod_0x275_275::kSodBlisActiveFieldNumber;
const int Sod_0x275_275::kSodBlisDisplayFieldNumber;
const int Sod_0x275_275::kSodLcaWarningreqleftFieldNumber;
const int Sod_0x275_275::kSodDoaWarningreqleftrearFieldNumber;
const int Sod_0x275_275::kSodDoaWarningreqleftfrontFieldNumber;
const int Sod_0x275_275::kSodCtaWarningreqleftFieldNumber;
const int Sod_0x275_275::kSodDoaStateFieldNumber;
const int Sod_0x275_275::kSodCtaStateFieldNumber;
const int Sod_0x275_275::kSodSodlcaStateFieldNumber;
const int Sod_0x275_275::kDoaOfftelltaleFieldNumber;
const int Sod_0x275_275::kSodDoaWarningreqrightrearFieldNumber;
const int Sod_0x275_275::kCtaOfftelltaleFieldNumber;
const int Sod_0x275_275::kSodlcaOfftelltaleFieldNumber;
const int Sod_0x275_275::kSodDoaWarningreqrightfrontFieldNumber;
const int Sod_0x275_275::kRollingCounter0X275FieldNumber;
const int Sod_0x275_275::kChecksum0X275FieldNumber;
const int Sod_0x275_275::kSodCtaWarningreqrightFieldNumber;
const int Sod_0x275_275::kSodAutoalignmentflagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sod_0x275_275::Sod_0x275_275()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Sod_0x275_275)
}
Sod_0x275_275::Sod_0x275_275(const Sod_0x275_275& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sod_lca_warningreqright_, &from.sod_lca_warningreqright_,
    reinterpret_cast<char*>(&sod_autoalignmentflag_) -
    reinterpret_cast<char*>(&sod_lca_warningreqright_) + sizeof(sod_autoalignmentflag_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Sod_0x275_275)
}

void Sod_0x275_275::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sod_lca_warningreqright_, 0, reinterpret_cast<char*>(&sod_autoalignmentflag_) -
    reinterpret_cast<char*>(&sod_lca_warningreqright_) + sizeof(sod_autoalignmentflag_));
}

Sod_0x275_275::~Sod_0x275_275() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Sod_0x275_275)
  SharedDtor();
}

void Sod_0x275_275::SharedDtor() {
}

void Sod_0x275_275::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sod_0x275_275::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sod_0x275_275& Sod_0x275_275::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sod_0x275_275* Sod_0x275_275::New(::google::protobuf::Arena* arena) const {
  Sod_0x275_275* n = new Sod_0x275_275;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sod_0x275_275::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Sod_0x275_275)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&sod_lca_warningreqright_, 0, reinterpret_cast<char*>(&sod_doa_state_) -
      reinterpret_cast<char*>(&sod_lca_warningreqright_) + sizeof(sod_doa_state_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&sod_cta_state_, 0, reinterpret_cast<char*>(&rolling_counter_0x275_) -
      reinterpret_cast<char*>(&sod_cta_state_) + sizeof(rolling_counter_0x275_));
  }
  if (_has_bits_[16 / 32] & 458752u) {
    ::memset(&checksum_0x275_, 0, reinterpret_cast<char*>(&sod_autoalignmentflag_) -
      reinterpret_cast<char*>(&checksum_0x275_) + sizeof(sod_autoalignmentflag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sod_0x275_275::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Sod_0x275_275)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Sod_0x275_275.Sod_lca_warningreqrightType sod_lca_warningreqright = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqrightType_IsValid(value)) {
            set_sod_lca_warningreqright(static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqrightType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_0x275_275.Sod_blis_activeType sod_blis_active = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_0x275_275_Sod_blis_activeType_IsValid(value)) {
            set_sod_blis_active(static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_blis_activeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_0x275_275.Sod_blis_displayType sod_blis_display = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_0x275_275_Sod_blis_displayType_IsValid(value)) {
            set_sod_blis_display(static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_blis_displayType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_0x275_275.Sod_lca_warningreqleftType sod_lca_warningreqleft = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqleftType_IsValid(value)) {
            set_sod_lca_warningreqleft(static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqleftType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqleftrearType sod_doa_warningreqleftrear = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftrearType_IsValid(value)) {
            set_sod_doa_warningreqleftrear(static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftrearType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqleftfrontType sod_doa_warningreqleftfront = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftfrontType_IsValid(value)) {
            set_sod_doa_warningreqleftfront(static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftfrontType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_warningreqleftType sod_cta_warningreqleft = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqleftType_IsValid(value)) {
            set_sod_cta_warningreqleft(static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqleftType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_stateType sod_doa_state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_0x275_275_Sod_doa_stateType_IsValid(value)) {
            set_sod_doa_state(static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_stateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_stateType sod_cta_state = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_0x275_275_Sod_cta_stateType_IsValid(value)) {
            set_sod_cta_state(static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_stateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_0x275_275.Sod_sodlca_stateType sod_sodlca_state = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_0x275_275_Sod_sodlca_stateType_IsValid(value)) {
            set_sod_sodlca_state(static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_sodlca_stateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_0x275_275.Doa_offtelltaleType doa_offtelltale = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_0x275_275_Doa_offtelltaleType_IsValid(value)) {
            set_doa_offtelltale(static_cast< ::jmc_auto::canbus::Sod_0x275_275_Doa_offtelltaleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqrightrearType sod_doa_warningreqrightrear = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightrearType_IsValid(value)) {
            set_sod_doa_warningreqrightrear(static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightrearType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_0x275_275.Cta_offtelltaleType cta_offtelltale = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_0x275_275_Cta_offtelltaleType_IsValid(value)) {
            set_cta_offtelltale(static_cast< ::jmc_auto::canbus::Sod_0x275_275_Cta_offtelltaleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_0x275_275.Sodlca_offtelltaleType sodlca_offtelltale = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_0x275_275_Sodlca_offtelltaleType_IsValid(value)) {
            set_sodlca_offtelltale(static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sodlca_offtelltaleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqrightfrontType sod_doa_warningreqrightfront = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightfrontType_IsValid(value)) {
            set_sod_doa_warningreqrightfront(static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightfrontType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rolling_counter_0x275 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_rolling_counter_0x275();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolling_counter_0x275_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 checksum_0x275 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_checksum_0x275();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum_0x275_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_warningreqrightType sod_cta_warningreqright = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqrightType_IsValid(value)) {
            set_sod_cta_warningreqright(static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqrightType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_0x275_275.Sod_autoalignmentflagType sod_autoalignmentflag = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Sod_0x275_275_Sod_autoalignmentflagType_IsValid(value)) {
            set_sod_autoalignmentflag(static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_autoalignmentflagType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Sod_0x275_275)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Sod_0x275_275)
  return false;
#undef DO_
}

void Sod_0x275_275::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Sod_0x275_275)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_lca_warningreqrightType sod_lca_warningreqright = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sod_lca_warningreqright(), output);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_blis_activeType sod_blis_active = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sod_blis_active(), output);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_blis_displayType sod_blis_display = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sod_blis_display(), output);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_lca_warningreqleftType sod_lca_warningreqleft = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sod_lca_warningreqleft(), output);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqleftrearType sod_doa_warningreqleftrear = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->sod_doa_warningreqleftrear(), output);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqleftfrontType sod_doa_warningreqleftfront = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->sod_doa_warningreqleftfront(), output);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_warningreqleftType sod_cta_warningreqleft = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->sod_cta_warningreqleft(), output);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_stateType sod_doa_state = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->sod_doa_state(), output);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_stateType sod_cta_state = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->sod_cta_state(), output);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_sodlca_stateType sod_sodlca_state = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->sod_sodlca_state(), output);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Doa_offtelltaleType doa_offtelltale = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->doa_offtelltale(), output);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqrightrearType sod_doa_warningreqrightrear = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->sod_doa_warningreqrightrear(), output);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Cta_offtelltaleType cta_offtelltale = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->cta_offtelltale(), output);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sodlca_offtelltaleType sodlca_offtelltale = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->sodlca_offtelltale(), output);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqrightfrontType sod_doa_warningreqrightfront = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->sod_doa_warningreqrightfront(), output);
  }

  // optional int32 rolling_counter_0x275 = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->rolling_counter_0x275(), output);
  }

  // optional int32 checksum_0x275 = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->checksum_0x275(), output);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_warningreqrightType sod_cta_warningreqright = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->sod_cta_warningreqright(), output);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_autoalignmentflagType sod_autoalignmentflag = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->sod_autoalignmentflag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Sod_0x275_275)
}

::google::protobuf::uint8* Sod_0x275_275::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Sod_0x275_275)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_lca_warningreqrightType sod_lca_warningreqright = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sod_lca_warningreqright(), target);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_blis_activeType sod_blis_active = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sod_blis_active(), target);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_blis_displayType sod_blis_display = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sod_blis_display(), target);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_lca_warningreqleftType sod_lca_warningreqleft = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->sod_lca_warningreqleft(), target);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqleftrearType sod_doa_warningreqleftrear = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->sod_doa_warningreqleftrear(), target);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqleftfrontType sod_doa_warningreqleftfront = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->sod_doa_warningreqleftfront(), target);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_warningreqleftType sod_cta_warningreqleft = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->sod_cta_warningreqleft(), target);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_stateType sod_doa_state = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->sod_doa_state(), target);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_stateType sod_cta_state = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->sod_cta_state(), target);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_sodlca_stateType sod_sodlca_state = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->sod_sodlca_state(), target);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Doa_offtelltaleType doa_offtelltale = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->doa_offtelltale(), target);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqrightrearType sod_doa_warningreqrightrear = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->sod_doa_warningreqrightrear(), target);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Cta_offtelltaleType cta_offtelltale = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->cta_offtelltale(), target);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sodlca_offtelltaleType sodlca_offtelltale = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->sodlca_offtelltale(), target);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqrightfrontType sod_doa_warningreqrightfront = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->sod_doa_warningreqrightfront(), target);
  }

  // optional int32 rolling_counter_0x275 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->rolling_counter_0x275(), target);
  }

  // optional int32 checksum_0x275 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->checksum_0x275(), target);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_warningreqrightType sod_cta_warningreqright = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->sod_cta_warningreqright(), target);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275.Sod_autoalignmentflagType sod_autoalignmentflag = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->sod_autoalignmentflag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Sod_0x275_275)
  return target;
}

size_t Sod_0x275_275::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Sod_0x275_275)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Sod_0x275_275.Sod_lca_warningreqrightType sod_lca_warningreqright = 1;
    if (has_sod_lca_warningreqright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sod_lca_warningreqright());
    }

    // optional .jmc_auto.canbus.Sod_0x275_275.Sod_blis_activeType sod_blis_active = 2;
    if (has_sod_blis_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sod_blis_active());
    }

    // optional .jmc_auto.canbus.Sod_0x275_275.Sod_blis_displayType sod_blis_display = 3;
    if (has_sod_blis_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sod_blis_display());
    }

    // optional .jmc_auto.canbus.Sod_0x275_275.Sod_lca_warningreqleftType sod_lca_warningreqleft = 4;
    if (has_sod_lca_warningreqleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sod_lca_warningreqleft());
    }

    // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqleftrearType sod_doa_warningreqleftrear = 5;
    if (has_sod_doa_warningreqleftrear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sod_doa_warningreqleftrear());
    }

    // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqleftfrontType sod_doa_warningreqleftfront = 6;
    if (has_sod_doa_warningreqleftfront()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sod_doa_warningreqleftfront());
    }

    // optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_warningreqleftType sod_cta_warningreqleft = 7;
    if (has_sod_cta_warningreqleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sod_cta_warningreqleft());
    }

    // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_stateType sod_doa_state = 8;
    if (has_sod_doa_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sod_doa_state());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_stateType sod_cta_state = 9;
    if (has_sod_cta_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sod_cta_state());
    }

    // optional .jmc_auto.canbus.Sod_0x275_275.Sod_sodlca_stateType sod_sodlca_state = 10;
    if (has_sod_sodlca_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sod_sodlca_state());
    }

    // optional .jmc_auto.canbus.Sod_0x275_275.Doa_offtelltaleType doa_offtelltale = 11;
    if (has_doa_offtelltale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->doa_offtelltale());
    }

    // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqrightrearType sod_doa_warningreqrightrear = 12;
    if (has_sod_doa_warningreqrightrear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sod_doa_warningreqrightrear());
    }

    // optional .jmc_auto.canbus.Sod_0x275_275.Cta_offtelltaleType cta_offtelltale = 13;
    if (has_cta_offtelltale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cta_offtelltale());
    }

    // optional .jmc_auto.canbus.Sod_0x275_275.Sodlca_offtelltaleType sodlca_offtelltale = 14;
    if (has_sodlca_offtelltale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sodlca_offtelltale());
    }

    // optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqrightfrontType sod_doa_warningreqrightfront = 15;
    if (has_sod_doa_warningreqrightfront()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sod_doa_warningreqrightfront());
    }

    // optional int32 rolling_counter_0x275 = 16;
    if (has_rolling_counter_0x275()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolling_counter_0x275());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional int32 checksum_0x275 = 17;
    if (has_checksum_0x275()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checksum_0x275());
    }

    // optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_warningreqrightType sod_cta_warningreqright = 18;
    if (has_sod_cta_warningreqright()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sod_cta_warningreqright());
    }

    // optional .jmc_auto.canbus.Sod_0x275_275.Sod_autoalignmentflagType sod_autoalignmentflag = 19;
    if (has_sod_autoalignmentflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sod_autoalignmentflag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sod_0x275_275::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Sod_0x275_275)
  GOOGLE_DCHECK_NE(&from, this);
  const Sod_0x275_275* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sod_0x275_275>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Sod_0x275_275)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Sod_0x275_275)
    MergeFrom(*source);
  }
}

void Sod_0x275_275::MergeFrom(const Sod_0x275_275& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Sod_0x275_275)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      sod_lca_warningreqright_ = from.sod_lca_warningreqright_;
    }
    if (cached_has_bits & 0x00000002u) {
      sod_blis_active_ = from.sod_blis_active_;
    }
    if (cached_has_bits & 0x00000004u) {
      sod_blis_display_ = from.sod_blis_display_;
    }
    if (cached_has_bits & 0x00000008u) {
      sod_lca_warningreqleft_ = from.sod_lca_warningreqleft_;
    }
    if (cached_has_bits & 0x00000010u) {
      sod_doa_warningreqleftrear_ = from.sod_doa_warningreqleftrear_;
    }
    if (cached_has_bits & 0x00000020u) {
      sod_doa_warningreqleftfront_ = from.sod_doa_warningreqleftfront_;
    }
    if (cached_has_bits & 0x00000040u) {
      sod_cta_warningreqleft_ = from.sod_cta_warningreqleft_;
    }
    if (cached_has_bits & 0x00000080u) {
      sod_doa_state_ = from.sod_doa_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      sod_cta_state_ = from.sod_cta_state_;
    }
    if (cached_has_bits & 0x00000200u) {
      sod_sodlca_state_ = from.sod_sodlca_state_;
    }
    if (cached_has_bits & 0x00000400u) {
      doa_offtelltale_ = from.doa_offtelltale_;
    }
    if (cached_has_bits & 0x00000800u) {
      sod_doa_warningreqrightrear_ = from.sod_doa_warningreqrightrear_;
    }
    if (cached_has_bits & 0x00001000u) {
      cta_offtelltale_ = from.cta_offtelltale_;
    }
    if (cached_has_bits & 0x00002000u) {
      sodlca_offtelltale_ = from.sodlca_offtelltale_;
    }
    if (cached_has_bits & 0x00004000u) {
      sod_doa_warningreqrightfront_ = from.sod_doa_warningreqrightfront_;
    }
    if (cached_has_bits & 0x00008000u) {
      rolling_counter_0x275_ = from.rolling_counter_0x275_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      checksum_0x275_ = from.checksum_0x275_;
    }
    if (cached_has_bits & 0x00020000u) {
      sod_cta_warningreqright_ = from.sod_cta_warningreqright_;
    }
    if (cached_has_bits & 0x00040000u) {
      sod_autoalignmentflag_ = from.sod_autoalignmentflag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sod_0x275_275::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Sod_0x275_275)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sod_0x275_275::CopyFrom(const Sod_0x275_275& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Sod_0x275_275)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sod_0x275_275::IsInitialized() const {
  return true;
}

void Sod_0x275_275::Swap(Sod_0x275_275* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sod_0x275_275::InternalSwap(Sod_0x275_275* other) {
  std::swap(sod_lca_warningreqright_, other->sod_lca_warningreqright_);
  std::swap(sod_blis_active_, other->sod_blis_active_);
  std::swap(sod_blis_display_, other->sod_blis_display_);
  std::swap(sod_lca_warningreqleft_, other->sod_lca_warningreqleft_);
  std::swap(sod_doa_warningreqleftrear_, other->sod_doa_warningreqleftrear_);
  std::swap(sod_doa_warningreqleftfront_, other->sod_doa_warningreqleftfront_);
  std::swap(sod_cta_warningreqleft_, other->sod_cta_warningreqleft_);
  std::swap(sod_doa_state_, other->sod_doa_state_);
  std::swap(sod_cta_state_, other->sod_cta_state_);
  std::swap(sod_sodlca_state_, other->sod_sodlca_state_);
  std::swap(doa_offtelltale_, other->doa_offtelltale_);
  std::swap(sod_doa_warningreqrightrear_, other->sod_doa_warningreqrightrear_);
  std::swap(cta_offtelltale_, other->cta_offtelltale_);
  std::swap(sodlca_offtelltale_, other->sodlca_offtelltale_);
  std::swap(sod_doa_warningreqrightfront_, other->sod_doa_warningreqrightfront_);
  std::swap(rolling_counter_0x275_, other->rolling_counter_0x275_);
  std::swap(checksum_0x275_, other->checksum_0x275_);
  std::swap(sod_cta_warningreqright_, other->sod_cta_warningreqright_);
  std::swap(sod_autoalignmentflag_, other->sod_autoalignmentflag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sod_0x275_275::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sod_0x275_275

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_lca_warningreqrightType sod_lca_warningreqright = 1;
bool Sod_0x275_275::has_sod_lca_warningreqright() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Sod_0x275_275::set_has_sod_lca_warningreqright() {
  _has_bits_[0] |= 0x00000001u;
}
void Sod_0x275_275::clear_has_sod_lca_warningreqright() {
  _has_bits_[0] &= ~0x00000001u;
}
void Sod_0x275_275::clear_sod_lca_warningreqright() {
  sod_lca_warningreqright_ = 0;
  clear_has_sod_lca_warningreqright();
}
::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqrightType Sod_0x275_275::sod_lca_warningreqright() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_lca_warningreqright)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqrightType >(sod_lca_warningreqright_);
}
void Sod_0x275_275::set_sod_lca_warningreqright(::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqrightType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqrightType_IsValid(value));
  set_has_sod_lca_warningreqright();
  sod_lca_warningreqright_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_lca_warningreqright)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_blis_activeType sod_blis_active = 2;
bool Sod_0x275_275::has_sod_blis_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Sod_0x275_275::set_has_sod_blis_active() {
  _has_bits_[0] |= 0x00000002u;
}
void Sod_0x275_275::clear_has_sod_blis_active() {
  _has_bits_[0] &= ~0x00000002u;
}
void Sod_0x275_275::clear_sod_blis_active() {
  sod_blis_active_ = 0;
  clear_has_sod_blis_active();
}
::jmc_auto::canbus::Sod_0x275_275_Sod_blis_activeType Sod_0x275_275::sod_blis_active() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_blis_active)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_blis_activeType >(sod_blis_active_);
}
void Sod_0x275_275::set_sod_blis_active(::jmc_auto::canbus::Sod_0x275_275_Sod_blis_activeType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_blis_activeType_IsValid(value));
  set_has_sod_blis_active();
  sod_blis_active_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_blis_active)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_blis_displayType sod_blis_display = 3;
bool Sod_0x275_275::has_sod_blis_display() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Sod_0x275_275::set_has_sod_blis_display() {
  _has_bits_[0] |= 0x00000004u;
}
void Sod_0x275_275::clear_has_sod_blis_display() {
  _has_bits_[0] &= ~0x00000004u;
}
void Sod_0x275_275::clear_sod_blis_display() {
  sod_blis_display_ = 0;
  clear_has_sod_blis_display();
}
::jmc_auto::canbus::Sod_0x275_275_Sod_blis_displayType Sod_0x275_275::sod_blis_display() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_blis_display)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_blis_displayType >(sod_blis_display_);
}
void Sod_0x275_275::set_sod_blis_display(::jmc_auto::canbus::Sod_0x275_275_Sod_blis_displayType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_blis_displayType_IsValid(value));
  set_has_sod_blis_display();
  sod_blis_display_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_blis_display)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_lca_warningreqleftType sod_lca_warningreqleft = 4;
bool Sod_0x275_275::has_sod_lca_warningreqleft() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Sod_0x275_275::set_has_sod_lca_warningreqleft() {
  _has_bits_[0] |= 0x00000008u;
}
void Sod_0x275_275::clear_has_sod_lca_warningreqleft() {
  _has_bits_[0] &= ~0x00000008u;
}
void Sod_0x275_275::clear_sod_lca_warningreqleft() {
  sod_lca_warningreqleft_ = 0;
  clear_has_sod_lca_warningreqleft();
}
::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqleftType Sod_0x275_275::sod_lca_warningreqleft() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_lca_warningreqleft)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqleftType >(sod_lca_warningreqleft_);
}
void Sod_0x275_275::set_sod_lca_warningreqleft(::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqleftType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_lca_warningreqleftType_IsValid(value));
  set_has_sod_lca_warningreqleft();
  sod_lca_warningreqleft_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_lca_warningreqleft)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqleftrearType sod_doa_warningreqleftrear = 5;
bool Sod_0x275_275::has_sod_doa_warningreqleftrear() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Sod_0x275_275::set_has_sod_doa_warningreqleftrear() {
  _has_bits_[0] |= 0x00000010u;
}
void Sod_0x275_275::clear_has_sod_doa_warningreqleftrear() {
  _has_bits_[0] &= ~0x00000010u;
}
void Sod_0x275_275::clear_sod_doa_warningreqleftrear() {
  sod_doa_warningreqleftrear_ = 0;
  clear_has_sod_doa_warningreqleftrear();
}
::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftrearType Sod_0x275_275::sod_doa_warningreqleftrear() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_doa_warningreqleftrear)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftrearType >(sod_doa_warningreqleftrear_);
}
void Sod_0x275_275::set_sod_doa_warningreqleftrear(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftrearType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftrearType_IsValid(value));
  set_has_sod_doa_warningreqleftrear();
  sod_doa_warningreqleftrear_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_doa_warningreqleftrear)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqleftfrontType sod_doa_warningreqleftfront = 6;
bool Sod_0x275_275::has_sod_doa_warningreqleftfront() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Sod_0x275_275::set_has_sod_doa_warningreqleftfront() {
  _has_bits_[0] |= 0x00000020u;
}
void Sod_0x275_275::clear_has_sod_doa_warningreqleftfront() {
  _has_bits_[0] &= ~0x00000020u;
}
void Sod_0x275_275::clear_sod_doa_warningreqleftfront() {
  sod_doa_warningreqleftfront_ = 0;
  clear_has_sod_doa_warningreqleftfront();
}
::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftfrontType Sod_0x275_275::sod_doa_warningreqleftfront() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_doa_warningreqleftfront)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftfrontType >(sod_doa_warningreqleftfront_);
}
void Sod_0x275_275::set_sod_doa_warningreqleftfront(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftfrontType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqleftfrontType_IsValid(value));
  set_has_sod_doa_warningreqleftfront();
  sod_doa_warningreqleftfront_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_doa_warningreqleftfront)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_warningreqleftType sod_cta_warningreqleft = 7;
bool Sod_0x275_275::has_sod_cta_warningreqleft() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Sod_0x275_275::set_has_sod_cta_warningreqleft() {
  _has_bits_[0] |= 0x00000040u;
}
void Sod_0x275_275::clear_has_sod_cta_warningreqleft() {
  _has_bits_[0] &= ~0x00000040u;
}
void Sod_0x275_275::clear_sod_cta_warningreqleft() {
  sod_cta_warningreqleft_ = 0;
  clear_has_sod_cta_warningreqleft();
}
::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqleftType Sod_0x275_275::sod_cta_warningreqleft() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_cta_warningreqleft)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqleftType >(sod_cta_warningreqleft_);
}
void Sod_0x275_275::set_sod_cta_warningreqleft(::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqleftType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqleftType_IsValid(value));
  set_has_sod_cta_warningreqleft();
  sod_cta_warningreqleft_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_cta_warningreqleft)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_stateType sod_doa_state = 8;
bool Sod_0x275_275::has_sod_doa_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Sod_0x275_275::set_has_sod_doa_state() {
  _has_bits_[0] |= 0x00000080u;
}
void Sod_0x275_275::clear_has_sod_doa_state() {
  _has_bits_[0] &= ~0x00000080u;
}
void Sod_0x275_275::clear_sod_doa_state() {
  sod_doa_state_ = 0;
  clear_has_sod_doa_state();
}
::jmc_auto::canbus::Sod_0x275_275_Sod_doa_stateType Sod_0x275_275::sod_doa_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_doa_state)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_stateType >(sod_doa_state_);
}
void Sod_0x275_275::set_sod_doa_state(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_stateType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_stateType_IsValid(value));
  set_has_sod_doa_state();
  sod_doa_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_doa_state)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_stateType sod_cta_state = 9;
bool Sod_0x275_275::has_sod_cta_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Sod_0x275_275::set_has_sod_cta_state() {
  _has_bits_[0] |= 0x00000100u;
}
void Sod_0x275_275::clear_has_sod_cta_state() {
  _has_bits_[0] &= ~0x00000100u;
}
void Sod_0x275_275::clear_sod_cta_state() {
  sod_cta_state_ = 0;
  clear_has_sod_cta_state();
}
::jmc_auto::canbus::Sod_0x275_275_Sod_cta_stateType Sod_0x275_275::sod_cta_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_cta_state)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_stateType >(sod_cta_state_);
}
void Sod_0x275_275::set_sod_cta_state(::jmc_auto::canbus::Sod_0x275_275_Sod_cta_stateType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_cta_stateType_IsValid(value));
  set_has_sod_cta_state();
  sod_cta_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_cta_state)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_sodlca_stateType sod_sodlca_state = 10;
bool Sod_0x275_275::has_sod_sodlca_state() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Sod_0x275_275::set_has_sod_sodlca_state() {
  _has_bits_[0] |= 0x00000200u;
}
void Sod_0x275_275::clear_has_sod_sodlca_state() {
  _has_bits_[0] &= ~0x00000200u;
}
void Sod_0x275_275::clear_sod_sodlca_state() {
  sod_sodlca_state_ = 0;
  clear_has_sod_sodlca_state();
}
::jmc_auto::canbus::Sod_0x275_275_Sod_sodlca_stateType Sod_0x275_275::sod_sodlca_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_sodlca_state)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_sodlca_stateType >(sod_sodlca_state_);
}
void Sod_0x275_275::set_sod_sodlca_state(::jmc_auto::canbus::Sod_0x275_275_Sod_sodlca_stateType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_sodlca_stateType_IsValid(value));
  set_has_sod_sodlca_state();
  sod_sodlca_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_sodlca_state)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Doa_offtelltaleType doa_offtelltale = 11;
bool Sod_0x275_275::has_doa_offtelltale() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Sod_0x275_275::set_has_doa_offtelltale() {
  _has_bits_[0] |= 0x00000400u;
}
void Sod_0x275_275::clear_has_doa_offtelltale() {
  _has_bits_[0] &= ~0x00000400u;
}
void Sod_0x275_275::clear_doa_offtelltale() {
  doa_offtelltale_ = 0;
  clear_has_doa_offtelltale();
}
::jmc_auto::canbus::Sod_0x275_275_Doa_offtelltaleType Sod_0x275_275::doa_offtelltale() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.doa_offtelltale)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Doa_offtelltaleType >(doa_offtelltale_);
}
void Sod_0x275_275::set_doa_offtelltale(::jmc_auto::canbus::Sod_0x275_275_Doa_offtelltaleType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Doa_offtelltaleType_IsValid(value));
  set_has_doa_offtelltale();
  doa_offtelltale_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.doa_offtelltale)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqrightrearType sod_doa_warningreqrightrear = 12;
bool Sod_0x275_275::has_sod_doa_warningreqrightrear() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Sod_0x275_275::set_has_sod_doa_warningreqrightrear() {
  _has_bits_[0] |= 0x00000800u;
}
void Sod_0x275_275::clear_has_sod_doa_warningreqrightrear() {
  _has_bits_[0] &= ~0x00000800u;
}
void Sod_0x275_275::clear_sod_doa_warningreqrightrear() {
  sod_doa_warningreqrightrear_ = 0;
  clear_has_sod_doa_warningreqrightrear();
}
::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightrearType Sod_0x275_275::sod_doa_warningreqrightrear() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_doa_warningreqrightrear)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightrearType >(sod_doa_warningreqrightrear_);
}
void Sod_0x275_275::set_sod_doa_warningreqrightrear(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightrearType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightrearType_IsValid(value));
  set_has_sod_doa_warningreqrightrear();
  sod_doa_warningreqrightrear_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_doa_warningreqrightrear)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Cta_offtelltaleType cta_offtelltale = 13;
bool Sod_0x275_275::has_cta_offtelltale() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Sod_0x275_275::set_has_cta_offtelltale() {
  _has_bits_[0] |= 0x00001000u;
}
void Sod_0x275_275::clear_has_cta_offtelltale() {
  _has_bits_[0] &= ~0x00001000u;
}
void Sod_0x275_275::clear_cta_offtelltale() {
  cta_offtelltale_ = 0;
  clear_has_cta_offtelltale();
}
::jmc_auto::canbus::Sod_0x275_275_Cta_offtelltaleType Sod_0x275_275::cta_offtelltale() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.cta_offtelltale)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Cta_offtelltaleType >(cta_offtelltale_);
}
void Sod_0x275_275::set_cta_offtelltale(::jmc_auto::canbus::Sod_0x275_275_Cta_offtelltaleType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Cta_offtelltaleType_IsValid(value));
  set_has_cta_offtelltale();
  cta_offtelltale_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.cta_offtelltale)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sodlca_offtelltaleType sodlca_offtelltale = 14;
bool Sod_0x275_275::has_sodlca_offtelltale() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Sod_0x275_275::set_has_sodlca_offtelltale() {
  _has_bits_[0] |= 0x00002000u;
}
void Sod_0x275_275::clear_has_sodlca_offtelltale() {
  _has_bits_[0] &= ~0x00002000u;
}
void Sod_0x275_275::clear_sodlca_offtelltale() {
  sodlca_offtelltale_ = 0;
  clear_has_sodlca_offtelltale();
}
::jmc_auto::canbus::Sod_0x275_275_Sodlca_offtelltaleType Sod_0x275_275::sodlca_offtelltale() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sodlca_offtelltale)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sodlca_offtelltaleType >(sodlca_offtelltale_);
}
void Sod_0x275_275::set_sodlca_offtelltale(::jmc_auto::canbus::Sod_0x275_275_Sodlca_offtelltaleType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sodlca_offtelltaleType_IsValid(value));
  set_has_sodlca_offtelltale();
  sodlca_offtelltale_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sodlca_offtelltale)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_doa_warningreqrightfrontType sod_doa_warningreqrightfront = 15;
bool Sod_0x275_275::has_sod_doa_warningreqrightfront() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Sod_0x275_275::set_has_sod_doa_warningreqrightfront() {
  _has_bits_[0] |= 0x00004000u;
}
void Sod_0x275_275::clear_has_sod_doa_warningreqrightfront() {
  _has_bits_[0] &= ~0x00004000u;
}
void Sod_0x275_275::clear_sod_doa_warningreqrightfront() {
  sod_doa_warningreqrightfront_ = 0;
  clear_has_sod_doa_warningreqrightfront();
}
::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightfrontType Sod_0x275_275::sod_doa_warningreqrightfront() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_doa_warningreqrightfront)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightfrontType >(sod_doa_warningreqrightfront_);
}
void Sod_0x275_275::set_sod_doa_warningreqrightfront(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightfrontType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_doa_warningreqrightfrontType_IsValid(value));
  set_has_sod_doa_warningreqrightfront();
  sod_doa_warningreqrightfront_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_doa_warningreqrightfront)
}

// optional int32 rolling_counter_0x275 = 16;
bool Sod_0x275_275::has_rolling_counter_0x275() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Sod_0x275_275::set_has_rolling_counter_0x275() {
  _has_bits_[0] |= 0x00008000u;
}
void Sod_0x275_275::clear_has_rolling_counter_0x275() {
  _has_bits_[0] &= ~0x00008000u;
}
void Sod_0x275_275::clear_rolling_counter_0x275() {
  rolling_counter_0x275_ = 0;
  clear_has_rolling_counter_0x275();
}
::google::protobuf::int32 Sod_0x275_275::rolling_counter_0x275() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.rolling_counter_0x275)
  return rolling_counter_0x275_;
}
void Sod_0x275_275::set_rolling_counter_0x275(::google::protobuf::int32 value) {
  set_has_rolling_counter_0x275();
  rolling_counter_0x275_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.rolling_counter_0x275)
}

// optional int32 checksum_0x275 = 17;
bool Sod_0x275_275::has_checksum_0x275() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Sod_0x275_275::set_has_checksum_0x275() {
  _has_bits_[0] |= 0x00010000u;
}
void Sod_0x275_275::clear_has_checksum_0x275() {
  _has_bits_[0] &= ~0x00010000u;
}
void Sod_0x275_275::clear_checksum_0x275() {
  checksum_0x275_ = 0;
  clear_has_checksum_0x275();
}
::google::protobuf::int32 Sod_0x275_275::checksum_0x275() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.checksum_0x275)
  return checksum_0x275_;
}
void Sod_0x275_275::set_checksum_0x275(::google::protobuf::int32 value) {
  set_has_checksum_0x275();
  checksum_0x275_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.checksum_0x275)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_cta_warningreqrightType sod_cta_warningreqright = 18;
bool Sod_0x275_275::has_sod_cta_warningreqright() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Sod_0x275_275::set_has_sod_cta_warningreqright() {
  _has_bits_[0] |= 0x00020000u;
}
void Sod_0x275_275::clear_has_sod_cta_warningreqright() {
  _has_bits_[0] &= ~0x00020000u;
}
void Sod_0x275_275::clear_sod_cta_warningreqright() {
  sod_cta_warningreqright_ = 0;
  clear_has_sod_cta_warningreqright();
}
::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqrightType Sod_0x275_275::sod_cta_warningreqright() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_cta_warningreqright)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqrightType >(sod_cta_warningreqright_);
}
void Sod_0x275_275::set_sod_cta_warningreqright(::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqrightType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_cta_warningreqrightType_IsValid(value));
  set_has_sod_cta_warningreqright();
  sod_cta_warningreqright_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_cta_warningreqright)
}

// optional .jmc_auto.canbus.Sod_0x275_275.Sod_autoalignmentflagType sod_autoalignmentflag = 19;
bool Sod_0x275_275::has_sod_autoalignmentflag() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Sod_0x275_275::set_has_sod_autoalignmentflag() {
  _has_bits_[0] |= 0x00040000u;
}
void Sod_0x275_275::clear_has_sod_autoalignmentflag() {
  _has_bits_[0] &= ~0x00040000u;
}
void Sod_0x275_275::clear_sod_autoalignmentflag() {
  sod_autoalignmentflag_ = 0;
  clear_has_sod_autoalignmentflag();
}
::jmc_auto::canbus::Sod_0x275_275_Sod_autoalignmentflagType Sod_0x275_275::sod_autoalignmentflag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sod_0x275_275.sod_autoalignmentflag)
  return static_cast< ::jmc_auto::canbus::Sod_0x275_275_Sod_autoalignmentflagType >(sod_autoalignmentflag_);
}
void Sod_0x275_275::set_sod_autoalignmentflag(::jmc_auto::canbus::Sod_0x275_275_Sod_autoalignmentflagType value) {
  assert(::jmc_auto::canbus::Sod_0x275_275_Sod_autoalignmentflagType_IsValid(value));
  set_has_sod_autoalignmentflag();
  sod_autoalignmentflag_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sod_0x275_275.sod_autoalignmentflag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gw_tpms_tire_0x361_361::kTpmsRfPressureFieldNumber;
const int Gw_tpms_tire_0x361_361::kTpmsRrPressureFieldNumber;
const int Gw_tpms_tire_0x361_361::kTpmsLrPressureFieldNumber;
const int Gw_tpms_tire_0x361_361::kTpmsTireTemperatureFieldNumber;
const int Gw_tpms_tire_0x361_361::kTpmsLfPressureWarningFieldNumber;
const int Gw_tpms_tire_0x361_361::kTpmsRfPressureWarningFieldNumber;
const int Gw_tpms_tire_0x361_361::kTpmsSystemStatusFieldNumber;
const int Gw_tpms_tire_0x361_361::kTpmsRrPressureWarningFieldNumber;
const int Gw_tpms_tire_0x361_361::kTpmsLrPressureWarningFieldNumber;
const int Gw_tpms_tire_0x361_361::kTpmsTemperatureWarningFieldNumber;
const int Gw_tpms_tire_0x361_361::kTpmsResrvedFieldNumber;
const int Gw_tpms_tire_0x361_361::kTirePositionFieldNumber;
const int Gw_tpms_tire_0x361_361::kTpmsLampStatusFieldNumber;
const int Gw_tpms_tire_0x361_361::kTpmsAlStateFieldNumber;
const int Gw_tpms_tire_0x361_361::kTpmsLfPressureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gw_tpms_tire_0x361_361::Gw_tpms_tire_0x361_361()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
}
Gw_tpms_tire_0x361_361::Gw_tpms_tire_0x361_361(const Gw_tpms_tire_0x361_361& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tpms_rf_pressure_, &from.tpms_rf_pressure_,
    reinterpret_cast<char*>(&tpms_al_state_) -
    reinterpret_cast<char*>(&tpms_rf_pressure_) + sizeof(tpms_al_state_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
}

void Gw_tpms_tire_0x361_361::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tpms_rf_pressure_, 0, reinterpret_cast<char*>(&tpms_al_state_) -
    reinterpret_cast<char*>(&tpms_rf_pressure_) + sizeof(tpms_al_state_));
}

Gw_tpms_tire_0x361_361::~Gw_tpms_tire_0x361_361() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
  SharedDtor();
}

void Gw_tpms_tire_0x361_361::SharedDtor() {
}

void Gw_tpms_tire_0x361_361::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gw_tpms_tire_0x361_361::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gw_tpms_tire_0x361_361& Gw_tpms_tire_0x361_361::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Gw_tpms_tire_0x361_361* Gw_tpms_tire_0x361_361::New(::google::protobuf::Arena* arena) const {
  Gw_tpms_tire_0x361_361* n = new Gw_tpms_tire_0x361_361;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gw_tpms_tire_0x361_361::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&tpms_rf_pressure_, 0, reinterpret_cast<char*>(&tpms_rr_pressure_warning_) -
      reinterpret_cast<char*>(&tpms_rf_pressure_) + sizeof(tpms_rr_pressure_warning_));
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ::memset(&tpms_lr_pressure_warning_, 0, reinterpret_cast<char*>(&tpms_al_state_) -
      reinterpret_cast<char*>(&tpms_lr_pressure_warning_) + sizeof(tpms_al_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Gw_tpms_tire_0x361_361::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double tpms_rf_pressure = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_tpms_rf_pressure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tpms_rf_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tpms_rr_pressure = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_tpms_rr_pressure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tpms_rr_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tpms_lr_pressure = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_tpms_lr_pressure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tpms_lr_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tpms_tire_temperature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_tpms_tire_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tpms_tire_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lf_pressure_warningType tpms_lf_pressure_warning = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_IsValid(value)) {
            set_tpms_lf_pressure_warning(static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_rf_pressure_warningType tpms_rf_pressure_warning = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_IsValid(value)) {
            set_tpms_rf_pressure_warning(static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_system_statusType tpms_system_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_system_statusType_IsValid(value)) {
            set_tpms_system_status(static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_system_statusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_rr_pressure_warningType tpms_rr_pressure_warning = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_IsValid(value)) {
            set_tpms_rr_pressure_warning(static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lr_pressure_warningType tpms_lr_pressure_warning = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_IsValid(value)) {
            set_tpms_lr_pressure_warning(static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_temperature_warningType tpms_temperature_warning = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_IsValid(value)) {
            set_tpms_temperature_warning(static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_temperature_warningType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_resrvedType tpms_resrved = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_resrvedType_IsValid(value)) {
            set_tpms_resrved(static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_resrvedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tire_positionType tire_position = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tire_positionType_IsValid(value)) {
            set_tire_position(static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tire_positionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lamp_statusType tpms_lamp_status = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_IsValid(value)) {
            set_tpms_lamp_status(static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lamp_statusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_al_stateType tpms_al_state = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_al_stateType_IsValid(value)) {
            set_tpms_al_state(static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_al_stateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tpms_lf_pressure = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_tpms_lf_pressure();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tpms_lf_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
  return false;
#undef DO_
}

void Gw_tpms_tire_0x361_361::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double tpms_rf_pressure = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->tpms_rf_pressure(), output);
  }

  // optional double tpms_rr_pressure = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->tpms_rr_pressure(), output);
  }

  // optional double tpms_lr_pressure = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->tpms_lr_pressure(), output);
  }

  // optional int32 tpms_tire_temperature = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tpms_tire_temperature(), output);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lf_pressure_warningType tpms_lf_pressure_warning = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->tpms_lf_pressure_warning(), output);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_rf_pressure_warningType tpms_rf_pressure_warning = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->tpms_rf_pressure_warning(), output);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_system_statusType tpms_system_status = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->tpms_system_status(), output);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_rr_pressure_warningType tpms_rr_pressure_warning = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->tpms_rr_pressure_warning(), output);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lr_pressure_warningType tpms_lr_pressure_warning = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->tpms_lr_pressure_warning(), output);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_temperature_warningType tpms_temperature_warning = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->tpms_temperature_warning(), output);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_resrvedType tpms_resrved = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->tpms_resrved(), output);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tire_positionType tire_position = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->tire_position(), output);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lamp_statusType tpms_lamp_status = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->tpms_lamp_status(), output);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_al_stateType tpms_al_state = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->tpms_al_state(), output);
  }

  // optional double tpms_lf_pressure = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->tpms_lf_pressure(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
}

::google::protobuf::uint8* Gw_tpms_tire_0x361_361::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double tpms_rf_pressure = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->tpms_rf_pressure(), target);
  }

  // optional double tpms_rr_pressure = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->tpms_rr_pressure(), target);
  }

  // optional double tpms_lr_pressure = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->tpms_lr_pressure(), target);
  }

  // optional int32 tpms_tire_temperature = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tpms_tire_temperature(), target);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lf_pressure_warningType tpms_lf_pressure_warning = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->tpms_lf_pressure_warning(), target);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_rf_pressure_warningType tpms_rf_pressure_warning = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->tpms_rf_pressure_warning(), target);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_system_statusType tpms_system_status = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->tpms_system_status(), target);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_rr_pressure_warningType tpms_rr_pressure_warning = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->tpms_rr_pressure_warning(), target);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lr_pressure_warningType tpms_lr_pressure_warning = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->tpms_lr_pressure_warning(), target);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_temperature_warningType tpms_temperature_warning = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->tpms_temperature_warning(), target);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_resrvedType tpms_resrved = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->tpms_resrved(), target);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tire_positionType tire_position = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->tire_position(), target);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lamp_statusType tpms_lamp_status = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->tpms_lamp_status(), target);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_al_stateType tpms_al_state = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->tpms_al_state(), target);
  }

  // optional double tpms_lf_pressure = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->tpms_lf_pressure(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
  return target;
}

size_t Gw_tpms_tire_0x361_361::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double tpms_rf_pressure = 1;
    if (has_tpms_rf_pressure()) {
      total_size += 1 + 8;
    }

    // optional double tpms_rr_pressure = 2;
    if (has_tpms_rr_pressure()) {
      total_size += 1 + 8;
    }

    // optional double tpms_lr_pressure = 3;
    if (has_tpms_lr_pressure()) {
      total_size += 1 + 8;
    }

    // optional int32 tpms_tire_temperature = 4;
    if (has_tpms_tire_temperature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tpms_tire_temperature());
    }

    // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lf_pressure_warningType tpms_lf_pressure_warning = 5;
    if (has_tpms_lf_pressure_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpms_lf_pressure_warning());
    }

    // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_rf_pressure_warningType tpms_rf_pressure_warning = 6;
    if (has_tpms_rf_pressure_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpms_rf_pressure_warning());
    }

    // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_system_statusType tpms_system_status = 7;
    if (has_tpms_system_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpms_system_status());
    }

    // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_rr_pressure_warningType tpms_rr_pressure_warning = 8;
    if (has_tpms_rr_pressure_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpms_rr_pressure_warning());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lr_pressure_warningType tpms_lr_pressure_warning = 9;
    if (has_tpms_lr_pressure_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpms_lr_pressure_warning());
    }

    // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_temperature_warningType tpms_temperature_warning = 10;
    if (has_tpms_temperature_warning()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpms_temperature_warning());
    }

    // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_resrvedType tpms_resrved = 11;
    if (has_tpms_resrved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpms_resrved());
    }

    // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tire_positionType tire_position = 12;
    if (has_tire_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tire_position());
    }

    // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lamp_statusType tpms_lamp_status = 13;
    if (has_tpms_lamp_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpms_lamp_status());
    }

    // optional double tpms_lf_pressure = 15;
    if (has_tpms_lf_pressure()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_al_stateType tpms_al_state = 14;
    if (has_tpms_al_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tpms_al_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gw_tpms_tire_0x361_361::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
  GOOGLE_DCHECK_NE(&from, this);
  const Gw_tpms_tire_0x361_361* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Gw_tpms_tire_0x361_361>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
    MergeFrom(*source);
  }
}

void Gw_tpms_tire_0x361_361::MergeFrom(const Gw_tpms_tire_0x361_361& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      tpms_rf_pressure_ = from.tpms_rf_pressure_;
    }
    if (cached_has_bits & 0x00000002u) {
      tpms_rr_pressure_ = from.tpms_rr_pressure_;
    }
    if (cached_has_bits & 0x00000004u) {
      tpms_lr_pressure_ = from.tpms_lr_pressure_;
    }
    if (cached_has_bits & 0x00000008u) {
      tpms_tire_temperature_ = from.tpms_tire_temperature_;
    }
    if (cached_has_bits & 0x00000010u) {
      tpms_lf_pressure_warning_ = from.tpms_lf_pressure_warning_;
    }
    if (cached_has_bits & 0x00000020u) {
      tpms_rf_pressure_warning_ = from.tpms_rf_pressure_warning_;
    }
    if (cached_has_bits & 0x00000040u) {
      tpms_system_status_ = from.tpms_system_status_;
    }
    if (cached_has_bits & 0x00000080u) {
      tpms_rr_pressure_warning_ = from.tpms_rr_pressure_warning_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      tpms_lr_pressure_warning_ = from.tpms_lr_pressure_warning_;
    }
    if (cached_has_bits & 0x00000200u) {
      tpms_temperature_warning_ = from.tpms_temperature_warning_;
    }
    if (cached_has_bits & 0x00000400u) {
      tpms_resrved_ = from.tpms_resrved_;
    }
    if (cached_has_bits & 0x00000800u) {
      tire_position_ = from.tire_position_;
    }
    if (cached_has_bits & 0x00001000u) {
      tpms_lamp_status_ = from.tpms_lamp_status_;
    }
    if (cached_has_bits & 0x00002000u) {
      tpms_lf_pressure_ = from.tpms_lf_pressure_;
    }
    if (cached_has_bits & 0x00004000u) {
      tpms_al_state_ = from.tpms_al_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gw_tpms_tire_0x361_361::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gw_tpms_tire_0x361_361::CopyFrom(const Gw_tpms_tire_0x361_361& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Gw_tpms_tire_0x361_361)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gw_tpms_tire_0x361_361::IsInitialized() const {
  return true;
}

void Gw_tpms_tire_0x361_361::Swap(Gw_tpms_tire_0x361_361* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gw_tpms_tire_0x361_361::InternalSwap(Gw_tpms_tire_0x361_361* other) {
  std::swap(tpms_rf_pressure_, other->tpms_rf_pressure_);
  std::swap(tpms_rr_pressure_, other->tpms_rr_pressure_);
  std::swap(tpms_lr_pressure_, other->tpms_lr_pressure_);
  std::swap(tpms_tire_temperature_, other->tpms_tire_temperature_);
  std::swap(tpms_lf_pressure_warning_, other->tpms_lf_pressure_warning_);
  std::swap(tpms_rf_pressure_warning_, other->tpms_rf_pressure_warning_);
  std::swap(tpms_system_status_, other->tpms_system_status_);
  std::swap(tpms_rr_pressure_warning_, other->tpms_rr_pressure_warning_);
  std::swap(tpms_lr_pressure_warning_, other->tpms_lr_pressure_warning_);
  std::swap(tpms_temperature_warning_, other->tpms_temperature_warning_);
  std::swap(tpms_resrved_, other->tpms_resrved_);
  std::swap(tire_position_, other->tire_position_);
  std::swap(tpms_lamp_status_, other->tpms_lamp_status_);
  std::swap(tpms_lf_pressure_, other->tpms_lf_pressure_);
  std::swap(tpms_al_state_, other->tpms_al_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gw_tpms_tire_0x361_361::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Gw_tpms_tire_0x361_361

// optional double tpms_rf_pressure = 1;
bool Gw_tpms_tire_0x361_361::has_tpms_rf_pressure() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Gw_tpms_tire_0x361_361::set_has_tpms_rf_pressure() {
  _has_bits_[0] |= 0x00000001u;
}
void Gw_tpms_tire_0x361_361::clear_has_tpms_rf_pressure() {
  _has_bits_[0] &= ~0x00000001u;
}
void Gw_tpms_tire_0x361_361::clear_tpms_rf_pressure() {
  tpms_rf_pressure_ = 0;
  clear_has_tpms_rf_pressure();
}
double Gw_tpms_tire_0x361_361::tpms_rf_pressure() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_rf_pressure)
  return tpms_rf_pressure_;
}
void Gw_tpms_tire_0x361_361::set_tpms_rf_pressure(double value) {
  set_has_tpms_rf_pressure();
  tpms_rf_pressure_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_rf_pressure)
}

// optional double tpms_rr_pressure = 2;
bool Gw_tpms_tire_0x361_361::has_tpms_rr_pressure() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Gw_tpms_tire_0x361_361::set_has_tpms_rr_pressure() {
  _has_bits_[0] |= 0x00000002u;
}
void Gw_tpms_tire_0x361_361::clear_has_tpms_rr_pressure() {
  _has_bits_[0] &= ~0x00000002u;
}
void Gw_tpms_tire_0x361_361::clear_tpms_rr_pressure() {
  tpms_rr_pressure_ = 0;
  clear_has_tpms_rr_pressure();
}
double Gw_tpms_tire_0x361_361::tpms_rr_pressure() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_rr_pressure)
  return tpms_rr_pressure_;
}
void Gw_tpms_tire_0x361_361::set_tpms_rr_pressure(double value) {
  set_has_tpms_rr_pressure();
  tpms_rr_pressure_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_rr_pressure)
}

// optional double tpms_lr_pressure = 3;
bool Gw_tpms_tire_0x361_361::has_tpms_lr_pressure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Gw_tpms_tire_0x361_361::set_has_tpms_lr_pressure() {
  _has_bits_[0] |= 0x00000004u;
}
void Gw_tpms_tire_0x361_361::clear_has_tpms_lr_pressure() {
  _has_bits_[0] &= ~0x00000004u;
}
void Gw_tpms_tire_0x361_361::clear_tpms_lr_pressure() {
  tpms_lr_pressure_ = 0;
  clear_has_tpms_lr_pressure();
}
double Gw_tpms_tire_0x361_361::tpms_lr_pressure() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lr_pressure)
  return tpms_lr_pressure_;
}
void Gw_tpms_tire_0x361_361::set_tpms_lr_pressure(double value) {
  set_has_tpms_lr_pressure();
  tpms_lr_pressure_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lr_pressure)
}

// optional int32 tpms_tire_temperature = 4;
bool Gw_tpms_tire_0x361_361::has_tpms_tire_temperature() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Gw_tpms_tire_0x361_361::set_has_tpms_tire_temperature() {
  _has_bits_[0] |= 0x00000008u;
}
void Gw_tpms_tire_0x361_361::clear_has_tpms_tire_temperature() {
  _has_bits_[0] &= ~0x00000008u;
}
void Gw_tpms_tire_0x361_361::clear_tpms_tire_temperature() {
  tpms_tire_temperature_ = 0;
  clear_has_tpms_tire_temperature();
}
::google::protobuf::int32 Gw_tpms_tire_0x361_361::tpms_tire_temperature() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_tire_temperature)
  return tpms_tire_temperature_;
}
void Gw_tpms_tire_0x361_361::set_tpms_tire_temperature(::google::protobuf::int32 value) {
  set_has_tpms_tire_temperature();
  tpms_tire_temperature_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_tire_temperature)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lf_pressure_warningType tpms_lf_pressure_warning = 5;
bool Gw_tpms_tire_0x361_361::has_tpms_lf_pressure_warning() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Gw_tpms_tire_0x361_361::set_has_tpms_lf_pressure_warning() {
  _has_bits_[0] |= 0x00000010u;
}
void Gw_tpms_tire_0x361_361::clear_has_tpms_lf_pressure_warning() {
  _has_bits_[0] &= ~0x00000010u;
}
void Gw_tpms_tire_0x361_361::clear_tpms_lf_pressure_warning() {
  tpms_lf_pressure_warning_ = 0;
  clear_has_tpms_lf_pressure_warning();
}
::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType Gw_tpms_tire_0x361_361::tpms_lf_pressure_warning() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lf_pressure_warning)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType >(tpms_lf_pressure_warning_);
}
void Gw_tpms_tire_0x361_361::set_tpms_lf_pressure_warning(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lf_pressure_warningType_IsValid(value));
  set_has_tpms_lf_pressure_warning();
  tpms_lf_pressure_warning_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lf_pressure_warning)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_rf_pressure_warningType tpms_rf_pressure_warning = 6;
bool Gw_tpms_tire_0x361_361::has_tpms_rf_pressure_warning() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Gw_tpms_tire_0x361_361::set_has_tpms_rf_pressure_warning() {
  _has_bits_[0] |= 0x00000020u;
}
void Gw_tpms_tire_0x361_361::clear_has_tpms_rf_pressure_warning() {
  _has_bits_[0] &= ~0x00000020u;
}
void Gw_tpms_tire_0x361_361::clear_tpms_rf_pressure_warning() {
  tpms_rf_pressure_warning_ = 0;
  clear_has_tpms_rf_pressure_warning();
}
::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType Gw_tpms_tire_0x361_361::tpms_rf_pressure_warning() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_rf_pressure_warning)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType >(tpms_rf_pressure_warning_);
}
void Gw_tpms_tire_0x361_361::set_tpms_rf_pressure_warning(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rf_pressure_warningType_IsValid(value));
  set_has_tpms_rf_pressure_warning();
  tpms_rf_pressure_warning_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_rf_pressure_warning)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_system_statusType tpms_system_status = 7;
bool Gw_tpms_tire_0x361_361::has_tpms_system_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Gw_tpms_tire_0x361_361::set_has_tpms_system_status() {
  _has_bits_[0] |= 0x00000040u;
}
void Gw_tpms_tire_0x361_361::clear_has_tpms_system_status() {
  _has_bits_[0] &= ~0x00000040u;
}
void Gw_tpms_tire_0x361_361::clear_tpms_system_status() {
  tpms_system_status_ = 0;
  clear_has_tpms_system_status();
}
::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_system_statusType Gw_tpms_tire_0x361_361::tpms_system_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_system_status)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_system_statusType >(tpms_system_status_);
}
void Gw_tpms_tire_0x361_361::set_tpms_system_status(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_system_statusType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_system_statusType_IsValid(value));
  set_has_tpms_system_status();
  tpms_system_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_system_status)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_rr_pressure_warningType tpms_rr_pressure_warning = 8;
bool Gw_tpms_tire_0x361_361::has_tpms_rr_pressure_warning() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Gw_tpms_tire_0x361_361::set_has_tpms_rr_pressure_warning() {
  _has_bits_[0] |= 0x00000080u;
}
void Gw_tpms_tire_0x361_361::clear_has_tpms_rr_pressure_warning() {
  _has_bits_[0] &= ~0x00000080u;
}
void Gw_tpms_tire_0x361_361::clear_tpms_rr_pressure_warning() {
  tpms_rr_pressure_warning_ = 0;
  clear_has_tpms_rr_pressure_warning();
}
::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType Gw_tpms_tire_0x361_361::tpms_rr_pressure_warning() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_rr_pressure_warning)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType >(tpms_rr_pressure_warning_);
}
void Gw_tpms_tire_0x361_361::set_tpms_rr_pressure_warning(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_rr_pressure_warningType_IsValid(value));
  set_has_tpms_rr_pressure_warning();
  tpms_rr_pressure_warning_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_rr_pressure_warning)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lr_pressure_warningType tpms_lr_pressure_warning = 9;
bool Gw_tpms_tire_0x361_361::has_tpms_lr_pressure_warning() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Gw_tpms_tire_0x361_361::set_has_tpms_lr_pressure_warning() {
  _has_bits_[0] |= 0x00000100u;
}
void Gw_tpms_tire_0x361_361::clear_has_tpms_lr_pressure_warning() {
  _has_bits_[0] &= ~0x00000100u;
}
void Gw_tpms_tire_0x361_361::clear_tpms_lr_pressure_warning() {
  tpms_lr_pressure_warning_ = 0;
  clear_has_tpms_lr_pressure_warning();
}
::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType Gw_tpms_tire_0x361_361::tpms_lr_pressure_warning() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lr_pressure_warning)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType >(tpms_lr_pressure_warning_);
}
void Gw_tpms_tire_0x361_361::set_tpms_lr_pressure_warning(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lr_pressure_warningType_IsValid(value));
  set_has_tpms_lr_pressure_warning();
  tpms_lr_pressure_warning_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lr_pressure_warning)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_temperature_warningType tpms_temperature_warning = 10;
bool Gw_tpms_tire_0x361_361::has_tpms_temperature_warning() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Gw_tpms_tire_0x361_361::set_has_tpms_temperature_warning() {
  _has_bits_[0] |= 0x00000200u;
}
void Gw_tpms_tire_0x361_361::clear_has_tpms_temperature_warning() {
  _has_bits_[0] &= ~0x00000200u;
}
void Gw_tpms_tire_0x361_361::clear_tpms_temperature_warning() {
  tpms_temperature_warning_ = 0;
  clear_has_tpms_temperature_warning();
}
::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_temperature_warningType Gw_tpms_tire_0x361_361::tpms_temperature_warning() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_temperature_warning)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_temperature_warningType >(tpms_temperature_warning_);
}
void Gw_tpms_tire_0x361_361::set_tpms_temperature_warning(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_temperature_warningType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_temperature_warningType_IsValid(value));
  set_has_tpms_temperature_warning();
  tpms_temperature_warning_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_temperature_warning)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_resrvedType tpms_resrved = 11;
bool Gw_tpms_tire_0x361_361::has_tpms_resrved() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Gw_tpms_tire_0x361_361::set_has_tpms_resrved() {
  _has_bits_[0] |= 0x00000400u;
}
void Gw_tpms_tire_0x361_361::clear_has_tpms_resrved() {
  _has_bits_[0] &= ~0x00000400u;
}
void Gw_tpms_tire_0x361_361::clear_tpms_resrved() {
  tpms_resrved_ = 0;
  clear_has_tpms_resrved();
}
::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_resrvedType Gw_tpms_tire_0x361_361::tpms_resrved() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_resrved)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_resrvedType >(tpms_resrved_);
}
void Gw_tpms_tire_0x361_361::set_tpms_resrved(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_resrvedType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_resrvedType_IsValid(value));
  set_has_tpms_resrved();
  tpms_resrved_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_resrved)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tire_positionType tire_position = 12;
bool Gw_tpms_tire_0x361_361::has_tire_position() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Gw_tpms_tire_0x361_361::set_has_tire_position() {
  _has_bits_[0] |= 0x00000800u;
}
void Gw_tpms_tire_0x361_361::clear_has_tire_position() {
  _has_bits_[0] &= ~0x00000800u;
}
void Gw_tpms_tire_0x361_361::clear_tire_position() {
  tire_position_ = 0;
  clear_has_tire_position();
}
::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tire_positionType Gw_tpms_tire_0x361_361::tire_position() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tire_position)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tire_positionType >(tire_position_);
}
void Gw_tpms_tire_0x361_361::set_tire_position(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tire_positionType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tire_positionType_IsValid(value));
  set_has_tire_position();
  tire_position_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tire_position)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_lamp_statusType tpms_lamp_status = 13;
bool Gw_tpms_tire_0x361_361::has_tpms_lamp_status() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Gw_tpms_tire_0x361_361::set_has_tpms_lamp_status() {
  _has_bits_[0] |= 0x00001000u;
}
void Gw_tpms_tire_0x361_361::clear_has_tpms_lamp_status() {
  _has_bits_[0] &= ~0x00001000u;
}
void Gw_tpms_tire_0x361_361::clear_tpms_lamp_status() {
  tpms_lamp_status_ = 0;
  clear_has_tpms_lamp_status();
}
::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lamp_statusType Gw_tpms_tire_0x361_361::tpms_lamp_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lamp_status)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lamp_statusType >(tpms_lamp_status_);
}
void Gw_tpms_tire_0x361_361::set_tpms_lamp_status(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lamp_statusType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_lamp_statusType_IsValid(value));
  set_has_tpms_lamp_status();
  tpms_lamp_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lamp_status)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361.Tpms_al_stateType tpms_al_state = 14;
bool Gw_tpms_tire_0x361_361::has_tpms_al_state() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Gw_tpms_tire_0x361_361::set_has_tpms_al_state() {
  _has_bits_[0] |= 0x00004000u;
}
void Gw_tpms_tire_0x361_361::clear_has_tpms_al_state() {
  _has_bits_[0] &= ~0x00004000u;
}
void Gw_tpms_tire_0x361_361::clear_tpms_al_state() {
  tpms_al_state_ = 0;
  clear_has_tpms_al_state();
}
::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_al_stateType Gw_tpms_tire_0x361_361::tpms_al_state() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_al_state)
  return static_cast< ::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_al_stateType >(tpms_al_state_);
}
void Gw_tpms_tire_0x361_361::set_tpms_al_state(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_al_stateType value) {
  assert(::jmc_auto::canbus::Gw_tpms_tire_0x361_361_Tpms_al_stateType_IsValid(value));
  set_has_tpms_al_state();
  tpms_al_state_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_al_state)
}

// optional double tpms_lf_pressure = 15;
bool Gw_tpms_tire_0x361_361::has_tpms_lf_pressure() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Gw_tpms_tire_0x361_361::set_has_tpms_lf_pressure() {
  _has_bits_[0] |= 0x00002000u;
}
void Gw_tpms_tire_0x361_361::clear_has_tpms_lf_pressure() {
  _has_bits_[0] &= ~0x00002000u;
}
void Gw_tpms_tire_0x361_361::clear_tpms_lf_pressure() {
  tpms_lf_pressure_ = 0;
  clear_has_tpms_lf_pressure();
}
double Gw_tpms_tire_0x361_361::tpms_lf_pressure() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lf_pressure)
  return tpms_lf_pressure_;
}
void Gw_tpms_tire_0x361_361::set_tpms_lf_pressure(double value) {
  set_has_tpms_lf_pressure();
  tpms_lf_pressure_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Gw_tpms_tire_0x361_361.tpms_lf_pressure)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ins_datainfo_506::kInsGpsflagPosFieldNumber;
const int Ins_datainfo_506::kInsNumsvFieldNumber;
const int Ins_datainfo_506::kInsGpsflagHeadingFieldNumber;
const int Ins_datainfo_506::kInsGpsAgeFieldNumber;
const int Ins_datainfo_506::kInsCarStatusFieldNumber;
const int Ins_datainfo_506::kInsStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ins_datainfo_506::Ins_datainfo_506()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Ins_datainfo_506)
}
Ins_datainfo_506::Ins_datainfo_506(const Ins_datainfo_506& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ins_gpsflag_pos_, &from.ins_gpsflag_pos_,
    reinterpret_cast<char*>(&ins_status_) -
    reinterpret_cast<char*>(&ins_gpsflag_pos_) + sizeof(ins_status_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Ins_datainfo_506)
}

void Ins_datainfo_506::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ins_gpsflag_pos_, 0, reinterpret_cast<char*>(&ins_status_) -
    reinterpret_cast<char*>(&ins_gpsflag_pos_) + sizeof(ins_status_));
}

Ins_datainfo_506::~Ins_datainfo_506() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Ins_datainfo_506)
  SharedDtor();
}

void Ins_datainfo_506::SharedDtor() {
}

void Ins_datainfo_506::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ins_datainfo_506::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ins_datainfo_506& Ins_datainfo_506::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ins_datainfo_506* Ins_datainfo_506::New(::google::protobuf::Arena* arena) const {
  Ins_datainfo_506* n = new Ins_datainfo_506;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ins_datainfo_506::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Ins_datainfo_506)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&ins_gpsflag_pos_, 0, reinterpret_cast<char*>(&ins_status_) -
      reinterpret_cast<char*>(&ins_gpsflag_pos_) + sizeof(ins_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ins_datainfo_506::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Ins_datainfo_506)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ins_gpsflag_pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ins_gpsflag_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ins_gpsflag_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ins_numsv = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ins_numsv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ins_numsv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ins_gpsflag_heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ins_gpsflag_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ins_gpsflag_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ins_gps_age = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ins_gps_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ins_gps_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ins_car_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ins_car_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ins_car_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ins_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ins_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ins_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Ins_datainfo_506)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Ins_datainfo_506)
  return false;
#undef DO_
}

void Ins_datainfo_506::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Ins_datainfo_506)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ins_gpsflag_pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ins_gpsflag_pos(), output);
  }

  // optional int32 ins_numsv = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ins_numsv(), output);
  }

  // optional int32 ins_gpsflag_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ins_gpsflag_heading(), output);
  }

  // optional int32 ins_gps_age = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ins_gps_age(), output);
  }

  // optional int32 ins_car_status = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ins_car_status(), output);
  }

  // optional int32 ins_status = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ins_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Ins_datainfo_506)
}

::google::protobuf::uint8* Ins_datainfo_506::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Ins_datainfo_506)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ins_gpsflag_pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ins_gpsflag_pos(), target);
  }

  // optional int32 ins_numsv = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ins_numsv(), target);
  }

  // optional int32 ins_gpsflag_heading = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ins_gpsflag_heading(), target);
  }

  // optional int32 ins_gps_age = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ins_gps_age(), target);
  }

  // optional int32 ins_car_status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ins_car_status(), target);
  }

  // optional int32 ins_status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ins_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Ins_datainfo_506)
  return target;
}

size_t Ins_datainfo_506::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Ins_datainfo_506)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 ins_gpsflag_pos = 1;
    if (has_ins_gpsflag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ins_gpsflag_pos());
    }

    // optional int32 ins_numsv = 2;
    if (has_ins_numsv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ins_numsv());
    }

    // optional int32 ins_gpsflag_heading = 3;
    if (has_ins_gpsflag_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ins_gpsflag_heading());
    }

    // optional int32 ins_gps_age = 4;
    if (has_ins_gps_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ins_gps_age());
    }

    // optional int32 ins_car_status = 5;
    if (has_ins_car_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ins_car_status());
    }

    // optional int32 ins_status = 6;
    if (has_ins_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ins_status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ins_datainfo_506::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Ins_datainfo_506)
  GOOGLE_DCHECK_NE(&from, this);
  const Ins_datainfo_506* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ins_datainfo_506>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Ins_datainfo_506)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Ins_datainfo_506)
    MergeFrom(*source);
  }
}

void Ins_datainfo_506::MergeFrom(const Ins_datainfo_506& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Ins_datainfo_506)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      ins_gpsflag_pos_ = from.ins_gpsflag_pos_;
    }
    if (cached_has_bits & 0x00000002u) {
      ins_numsv_ = from.ins_numsv_;
    }
    if (cached_has_bits & 0x00000004u) {
      ins_gpsflag_heading_ = from.ins_gpsflag_heading_;
    }
    if (cached_has_bits & 0x00000008u) {
      ins_gps_age_ = from.ins_gps_age_;
    }
    if (cached_has_bits & 0x00000010u) {
      ins_car_status_ = from.ins_car_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      ins_status_ = from.ins_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ins_datainfo_506::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Ins_datainfo_506)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ins_datainfo_506::CopyFrom(const Ins_datainfo_506& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Ins_datainfo_506)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins_datainfo_506::IsInitialized() const {
  return true;
}

void Ins_datainfo_506::Swap(Ins_datainfo_506* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ins_datainfo_506::InternalSwap(Ins_datainfo_506* other) {
  std::swap(ins_gpsflag_pos_, other->ins_gpsflag_pos_);
  std::swap(ins_numsv_, other->ins_numsv_);
  std::swap(ins_gpsflag_heading_, other->ins_gpsflag_heading_);
  std::swap(ins_gps_age_, other->ins_gps_age_);
  std::swap(ins_car_status_, other->ins_car_status_);
  std::swap(ins_status_, other->ins_status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ins_datainfo_506::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ins_datainfo_506

// optional int32 ins_gpsflag_pos = 1;
bool Ins_datainfo_506::has_ins_gpsflag_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ins_datainfo_506::set_has_ins_gpsflag_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void Ins_datainfo_506::clear_has_ins_gpsflag_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ins_datainfo_506::clear_ins_gpsflag_pos() {
  ins_gpsflag_pos_ = 0;
  clear_has_ins_gpsflag_pos();
}
::google::protobuf::int32 Ins_datainfo_506::ins_gpsflag_pos() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_datainfo_506.ins_gpsflag_pos)
  return ins_gpsflag_pos_;
}
void Ins_datainfo_506::set_ins_gpsflag_pos(::google::protobuf::int32 value) {
  set_has_ins_gpsflag_pos();
  ins_gpsflag_pos_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_datainfo_506.ins_gpsflag_pos)
}

// optional int32 ins_numsv = 2;
bool Ins_datainfo_506::has_ins_numsv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ins_datainfo_506::set_has_ins_numsv() {
  _has_bits_[0] |= 0x00000002u;
}
void Ins_datainfo_506::clear_has_ins_numsv() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ins_datainfo_506::clear_ins_numsv() {
  ins_numsv_ = 0;
  clear_has_ins_numsv();
}
::google::protobuf::int32 Ins_datainfo_506::ins_numsv() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_datainfo_506.ins_numsv)
  return ins_numsv_;
}
void Ins_datainfo_506::set_ins_numsv(::google::protobuf::int32 value) {
  set_has_ins_numsv();
  ins_numsv_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_datainfo_506.ins_numsv)
}

// optional int32 ins_gpsflag_heading = 3;
bool Ins_datainfo_506::has_ins_gpsflag_heading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ins_datainfo_506::set_has_ins_gpsflag_heading() {
  _has_bits_[0] |= 0x00000004u;
}
void Ins_datainfo_506::clear_has_ins_gpsflag_heading() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ins_datainfo_506::clear_ins_gpsflag_heading() {
  ins_gpsflag_heading_ = 0;
  clear_has_ins_gpsflag_heading();
}
::google::protobuf::int32 Ins_datainfo_506::ins_gpsflag_heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_datainfo_506.ins_gpsflag_heading)
  return ins_gpsflag_heading_;
}
void Ins_datainfo_506::set_ins_gpsflag_heading(::google::protobuf::int32 value) {
  set_has_ins_gpsflag_heading();
  ins_gpsflag_heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_datainfo_506.ins_gpsflag_heading)
}

// optional int32 ins_gps_age = 4;
bool Ins_datainfo_506::has_ins_gps_age() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Ins_datainfo_506::set_has_ins_gps_age() {
  _has_bits_[0] |= 0x00000008u;
}
void Ins_datainfo_506::clear_has_ins_gps_age() {
  _has_bits_[0] &= ~0x00000008u;
}
void Ins_datainfo_506::clear_ins_gps_age() {
  ins_gps_age_ = 0;
  clear_has_ins_gps_age();
}
::google::protobuf::int32 Ins_datainfo_506::ins_gps_age() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_datainfo_506.ins_gps_age)
  return ins_gps_age_;
}
void Ins_datainfo_506::set_ins_gps_age(::google::protobuf::int32 value) {
  set_has_ins_gps_age();
  ins_gps_age_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_datainfo_506.ins_gps_age)
}

// optional int32 ins_car_status = 5;
bool Ins_datainfo_506::has_ins_car_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Ins_datainfo_506::set_has_ins_car_status() {
  _has_bits_[0] |= 0x00000010u;
}
void Ins_datainfo_506::clear_has_ins_car_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void Ins_datainfo_506::clear_ins_car_status() {
  ins_car_status_ = 0;
  clear_has_ins_car_status();
}
::google::protobuf::int32 Ins_datainfo_506::ins_car_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_datainfo_506.ins_car_status)
  return ins_car_status_;
}
void Ins_datainfo_506::set_ins_car_status(::google::protobuf::int32 value) {
  set_has_ins_car_status();
  ins_car_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_datainfo_506.ins_car_status)
}

// optional int32 ins_status = 6;
bool Ins_datainfo_506::has_ins_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Ins_datainfo_506::set_has_ins_status() {
  _has_bits_[0] |= 0x00000020u;
}
void Ins_datainfo_506::clear_has_ins_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void Ins_datainfo_506::clear_ins_status() {
  ins_status_ = 0;
  clear_has_ins_status();
}
::google::protobuf::int32 Ins_datainfo_506::ins_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_datainfo_506.ins_status)
  return ins_status_;
}
void Ins_datainfo_506::set_ins_status(::google::protobuf::int32 value) {
  set_has_ins_status();
  ins_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_datainfo_506.ins_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ins_std_507::kInsStdLatFieldNumber;
const int Ins_std_507::kInsStdLonFieldNumber;
const int Ins_std_507::kInsStdLocatheightFieldNumber;
const int Ins_std_507::kIninsStdHeadingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ins_std_507::Ins_std_507()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Ins_std_507)
}
Ins_std_507::Ins_std_507(const Ins_std_507& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ins_std_lat_, &from.ins_std_lat_,
    reinterpret_cast<char*>(&inins_std_heading_) -
    reinterpret_cast<char*>(&ins_std_lat_) + sizeof(inins_std_heading_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Ins_std_507)
}

void Ins_std_507::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ins_std_lat_, 0, reinterpret_cast<char*>(&inins_std_heading_) -
    reinterpret_cast<char*>(&ins_std_lat_) + sizeof(inins_std_heading_));
}

Ins_std_507::~Ins_std_507() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Ins_std_507)
  SharedDtor();
}

void Ins_std_507::SharedDtor() {
}

void Ins_std_507::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ins_std_507::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ins_std_507& Ins_std_507::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ins_std_507* Ins_std_507::New(::google::protobuf::Arena* arena) const {
  Ins_std_507* n = new Ins_std_507;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ins_std_507::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Ins_std_507)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&ins_std_lat_, 0, reinterpret_cast<char*>(&inins_std_heading_) -
      reinterpret_cast<char*>(&ins_std_lat_) + sizeof(inins_std_heading_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ins_std_507::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Ins_std_507)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ins_std_lat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_ins_std_lat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_std_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_std_lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_ins_std_lon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_std_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_std_locatheight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_ins_std_locatheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_std_locatheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double inins_std_heading = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_inins_std_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &inins_std_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Ins_std_507)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Ins_std_507)
  return false;
#undef DO_
}

void Ins_std_507::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Ins_std_507)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ins_std_lat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ins_std_lat(), output);
  }

  // optional double ins_std_lon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ins_std_lon(), output);
  }

  // optional double ins_std_locatheight = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ins_std_locatheight(), output);
  }

  // optional double inins_std_heading = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->inins_std_heading(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Ins_std_507)
}

::google::protobuf::uint8* Ins_std_507::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Ins_std_507)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ins_std_lat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ins_std_lat(), target);
  }

  // optional double ins_std_lon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ins_std_lon(), target);
  }

  // optional double ins_std_locatheight = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ins_std_locatheight(), target);
  }

  // optional double inins_std_heading = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->inins_std_heading(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Ins_std_507)
  return target;
}

size_t Ins_std_507::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Ins_std_507)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double ins_std_lat = 1;
    if (has_ins_std_lat()) {
      total_size += 1 + 8;
    }

    // optional double ins_std_lon = 2;
    if (has_ins_std_lon()) {
      total_size += 1 + 8;
    }

    // optional double ins_std_locatheight = 3;
    if (has_ins_std_locatheight()) {
      total_size += 1 + 8;
    }

    // optional double inins_std_heading = 4;
    if (has_inins_std_heading()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ins_std_507::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Ins_std_507)
  GOOGLE_DCHECK_NE(&from, this);
  const Ins_std_507* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ins_std_507>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Ins_std_507)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Ins_std_507)
    MergeFrom(*source);
  }
}

void Ins_std_507::MergeFrom(const Ins_std_507& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Ins_std_507)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      ins_std_lat_ = from.ins_std_lat_;
    }
    if (cached_has_bits & 0x00000002u) {
      ins_std_lon_ = from.ins_std_lon_;
    }
    if (cached_has_bits & 0x00000004u) {
      ins_std_locatheight_ = from.ins_std_locatheight_;
    }
    if (cached_has_bits & 0x00000008u) {
      inins_std_heading_ = from.inins_std_heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ins_std_507::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Ins_std_507)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ins_std_507::CopyFrom(const Ins_std_507& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Ins_std_507)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins_std_507::IsInitialized() const {
  return true;
}

void Ins_std_507::Swap(Ins_std_507* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ins_std_507::InternalSwap(Ins_std_507* other) {
  std::swap(ins_std_lat_, other->ins_std_lat_);
  std::swap(ins_std_lon_, other->ins_std_lon_);
  std::swap(ins_std_locatheight_, other->ins_std_locatheight_);
  std::swap(inins_std_heading_, other->inins_std_heading_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ins_std_507::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ins_std_507

// optional double ins_std_lat = 1;
bool Ins_std_507::has_ins_std_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ins_std_507::set_has_ins_std_lat() {
  _has_bits_[0] |= 0x00000001u;
}
void Ins_std_507::clear_has_ins_std_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ins_std_507::clear_ins_std_lat() {
  ins_std_lat_ = 0;
  clear_has_ins_std_lat();
}
double Ins_std_507::ins_std_lat() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_std_507.ins_std_lat)
  return ins_std_lat_;
}
void Ins_std_507::set_ins_std_lat(double value) {
  set_has_ins_std_lat();
  ins_std_lat_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_std_507.ins_std_lat)
}

// optional double ins_std_lon = 2;
bool Ins_std_507::has_ins_std_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ins_std_507::set_has_ins_std_lon() {
  _has_bits_[0] |= 0x00000002u;
}
void Ins_std_507::clear_has_ins_std_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ins_std_507::clear_ins_std_lon() {
  ins_std_lon_ = 0;
  clear_has_ins_std_lon();
}
double Ins_std_507::ins_std_lon() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_std_507.ins_std_lon)
  return ins_std_lon_;
}
void Ins_std_507::set_ins_std_lon(double value) {
  set_has_ins_std_lon();
  ins_std_lon_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_std_507.ins_std_lon)
}

// optional double ins_std_locatheight = 3;
bool Ins_std_507::has_ins_std_locatheight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ins_std_507::set_has_ins_std_locatheight() {
  _has_bits_[0] |= 0x00000004u;
}
void Ins_std_507::clear_has_ins_std_locatheight() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ins_std_507::clear_ins_std_locatheight() {
  ins_std_locatheight_ = 0;
  clear_has_ins_std_locatheight();
}
double Ins_std_507::ins_std_locatheight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_std_507.ins_std_locatheight)
  return ins_std_locatheight_;
}
void Ins_std_507::set_ins_std_locatheight(double value) {
  set_has_ins_std_locatheight();
  ins_std_locatheight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_std_507.ins_std_locatheight)
}

// optional double inins_std_heading = 4;
bool Ins_std_507::has_inins_std_heading() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Ins_std_507::set_has_inins_std_heading() {
  _has_bits_[0] |= 0x00000008u;
}
void Ins_std_507::clear_has_inins_std_heading() {
  _has_bits_[0] &= ~0x00000008u;
}
void Ins_std_507::clear_inins_std_heading() {
  inins_std_heading_ = 0;
  clear_has_inins_std_heading();
}
double Ins_std_507::inins_std_heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_std_507.inins_std_heading)
  return inins_std_heading_;
}
void Ins_std_507::set_inins_std_heading(double value) {
  set_has_inins_std_heading();
  inins_std_heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_std_507.inins_std_heading)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ins_latitudelongitude_504::kInsLatitudeFieldNumber;
const int Ins_latitudelongitude_504::kInsLongitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ins_latitudelongitude_504::Ins_latitudelongitude_504()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Ins_latitudelongitude_504)
}
Ins_latitudelongitude_504::Ins_latitudelongitude_504(const Ins_latitudelongitude_504& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ins__latitude_, &from.ins__latitude_,
    reinterpret_cast<char*>(&ins_longitude_) -
    reinterpret_cast<char*>(&ins__latitude_) + sizeof(ins_longitude_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Ins_latitudelongitude_504)
}

void Ins_latitudelongitude_504::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ins__latitude_, 0, reinterpret_cast<char*>(&ins_longitude_) -
    reinterpret_cast<char*>(&ins__latitude_) + sizeof(ins_longitude_));
}

Ins_latitudelongitude_504::~Ins_latitudelongitude_504() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Ins_latitudelongitude_504)
  SharedDtor();
}

void Ins_latitudelongitude_504::SharedDtor() {
}

void Ins_latitudelongitude_504::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ins_latitudelongitude_504::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ins_latitudelongitude_504& Ins_latitudelongitude_504::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ins_latitudelongitude_504* Ins_latitudelongitude_504::New(::google::protobuf::Arena* arena) const {
  Ins_latitudelongitude_504* n = new Ins_latitudelongitude_504;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ins_latitudelongitude_504::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Ins_latitudelongitude_504)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ins__latitude_, 0, reinterpret_cast<char*>(&ins_longitude_) -
      reinterpret_cast<char*>(&ins__latitude_) + sizeof(ins_longitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ins_latitudelongitude_504::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Ins_latitudelongitude_504)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ins__latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_ins__latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins__latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_ins_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Ins_latitudelongitude_504)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Ins_latitudelongitude_504)
  return false;
#undef DO_
}

void Ins_latitudelongitude_504::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Ins_latitudelongitude_504)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ins__latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ins__latitude(), output);
  }

  // optional double ins_longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ins_longitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Ins_latitudelongitude_504)
}

::google::protobuf::uint8* Ins_latitudelongitude_504::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Ins_latitudelongitude_504)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ins__latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ins__latitude(), target);
  }

  // optional double ins_longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ins_longitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Ins_latitudelongitude_504)
  return target;
}

size_t Ins_latitudelongitude_504::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Ins_latitudelongitude_504)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double ins__latitude = 1;
    if (has_ins__latitude()) {
      total_size += 1 + 8;
    }

    // optional double ins_longitude = 2;
    if (has_ins_longitude()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ins_latitudelongitude_504::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Ins_latitudelongitude_504)
  GOOGLE_DCHECK_NE(&from, this);
  const Ins_latitudelongitude_504* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ins_latitudelongitude_504>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Ins_latitudelongitude_504)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Ins_latitudelongitude_504)
    MergeFrom(*source);
  }
}

void Ins_latitudelongitude_504::MergeFrom(const Ins_latitudelongitude_504& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Ins_latitudelongitude_504)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ins__latitude_ = from.ins__latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      ins_longitude_ = from.ins_longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ins_latitudelongitude_504::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Ins_latitudelongitude_504)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ins_latitudelongitude_504::CopyFrom(const Ins_latitudelongitude_504& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Ins_latitudelongitude_504)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins_latitudelongitude_504::IsInitialized() const {
  return true;
}

void Ins_latitudelongitude_504::Swap(Ins_latitudelongitude_504* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ins_latitudelongitude_504::InternalSwap(Ins_latitudelongitude_504* other) {
  std::swap(ins__latitude_, other->ins__latitude_);
  std::swap(ins_longitude_, other->ins_longitude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ins_latitudelongitude_504::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ins_latitudelongitude_504

// optional double ins__latitude = 1;
bool Ins_latitudelongitude_504::has_ins__latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ins_latitudelongitude_504::set_has_ins__latitude() {
  _has_bits_[0] |= 0x00000001u;
}
void Ins_latitudelongitude_504::clear_has_ins__latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ins_latitudelongitude_504::clear_ins__latitude() {
  ins__latitude_ = 0;
  clear_has_ins__latitude();
}
double Ins_latitudelongitude_504::ins__latitude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_latitudelongitude_504.ins__latitude)
  return ins__latitude_;
}
void Ins_latitudelongitude_504::set_ins__latitude(double value) {
  set_has_ins__latitude();
  ins__latitude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_latitudelongitude_504.ins__latitude)
}

// optional double ins_longitude = 2;
bool Ins_latitudelongitude_504::has_ins_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ins_latitudelongitude_504::set_has_ins_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
void Ins_latitudelongitude_504::clear_has_ins_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ins_latitudelongitude_504::clear_ins_longitude() {
  ins_longitude_ = 0;
  clear_has_ins_longitude();
}
double Ins_latitudelongitude_504::ins_longitude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_latitudelongitude_504.ins_longitude)
  return ins_longitude_;
}
void Ins_latitudelongitude_504::set_ins_longitude(double value) {
  set_has_ins_longitude();
  ins_longitude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_latitudelongitude_504.ins_longitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ins_speed_505::kInsNorthspdFieldNumber;
const int Ins_speed_505::kInsEastspdFieldNumber;
const int Ins_speed_505::kInsTogroundspdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ins_speed_505::Ins_speed_505()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Ins_speed_505)
}
Ins_speed_505::Ins_speed_505(const Ins_speed_505& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ins_northspd_, &from.ins_northspd_,
    reinterpret_cast<char*>(&ins_togroundspd_) -
    reinterpret_cast<char*>(&ins_northspd_) + sizeof(ins_togroundspd_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Ins_speed_505)
}

void Ins_speed_505::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ins_northspd_, 0, reinterpret_cast<char*>(&ins_togroundspd_) -
    reinterpret_cast<char*>(&ins_northspd_) + sizeof(ins_togroundspd_));
}

Ins_speed_505::~Ins_speed_505() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Ins_speed_505)
  SharedDtor();
}

void Ins_speed_505::SharedDtor() {
}

void Ins_speed_505::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ins_speed_505::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ins_speed_505& Ins_speed_505::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ins_speed_505* Ins_speed_505::New(::google::protobuf::Arena* arena) const {
  Ins_speed_505* n = new Ins_speed_505;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ins_speed_505::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Ins_speed_505)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&ins_northspd_, 0, reinterpret_cast<char*>(&ins_togroundspd_) -
      reinterpret_cast<char*>(&ins_northspd_) + sizeof(ins_togroundspd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ins_speed_505::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Ins_speed_505)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ins_northspd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_ins_northspd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_northspd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_eastspd = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_ins_eastspd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_eastspd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_togroundspd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_ins_togroundspd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_togroundspd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Ins_speed_505)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Ins_speed_505)
  return false;
#undef DO_
}

void Ins_speed_505::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Ins_speed_505)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ins_northspd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ins_northspd(), output);
  }

  // optional double ins_eastspd = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ins_eastspd(), output);
  }

  // optional double ins_togroundspd = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ins_togroundspd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Ins_speed_505)
}

::google::protobuf::uint8* Ins_speed_505::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Ins_speed_505)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ins_northspd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ins_northspd(), target);
  }

  // optional double ins_eastspd = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ins_eastspd(), target);
  }

  // optional double ins_togroundspd = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ins_togroundspd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Ins_speed_505)
  return target;
}

size_t Ins_speed_505::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Ins_speed_505)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double ins_northspd = 1;
    if (has_ins_northspd()) {
      total_size += 1 + 8;
    }

    // optional double ins_eastspd = 2;
    if (has_ins_eastspd()) {
      total_size += 1 + 8;
    }

    // optional double ins_togroundspd = 3;
    if (has_ins_togroundspd()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ins_speed_505::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Ins_speed_505)
  GOOGLE_DCHECK_NE(&from, this);
  const Ins_speed_505* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ins_speed_505>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Ins_speed_505)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Ins_speed_505)
    MergeFrom(*source);
  }
}

void Ins_speed_505::MergeFrom(const Ins_speed_505& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Ins_speed_505)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ins_northspd_ = from.ins_northspd_;
    }
    if (cached_has_bits & 0x00000002u) {
      ins_eastspd_ = from.ins_eastspd_;
    }
    if (cached_has_bits & 0x00000004u) {
      ins_togroundspd_ = from.ins_togroundspd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ins_speed_505::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Ins_speed_505)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ins_speed_505::CopyFrom(const Ins_speed_505& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Ins_speed_505)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins_speed_505::IsInitialized() const {
  return true;
}

void Ins_speed_505::Swap(Ins_speed_505* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ins_speed_505::InternalSwap(Ins_speed_505* other) {
  std::swap(ins_northspd_, other->ins_northspd_);
  std::swap(ins_eastspd_, other->ins_eastspd_);
  std::swap(ins_togroundspd_, other->ins_togroundspd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ins_speed_505::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ins_speed_505

// optional double ins_northspd = 1;
bool Ins_speed_505::has_ins_northspd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ins_speed_505::set_has_ins_northspd() {
  _has_bits_[0] |= 0x00000001u;
}
void Ins_speed_505::clear_has_ins_northspd() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ins_speed_505::clear_ins_northspd() {
  ins_northspd_ = 0;
  clear_has_ins_northspd();
}
double Ins_speed_505::ins_northspd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_speed_505.ins_northspd)
  return ins_northspd_;
}
void Ins_speed_505::set_ins_northspd(double value) {
  set_has_ins_northspd();
  ins_northspd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_speed_505.ins_northspd)
}

// optional double ins_eastspd = 2;
bool Ins_speed_505::has_ins_eastspd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ins_speed_505::set_has_ins_eastspd() {
  _has_bits_[0] |= 0x00000002u;
}
void Ins_speed_505::clear_has_ins_eastspd() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ins_speed_505::clear_ins_eastspd() {
  ins_eastspd_ = 0;
  clear_has_ins_eastspd();
}
double Ins_speed_505::ins_eastspd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_speed_505.ins_eastspd)
  return ins_eastspd_;
}
void Ins_speed_505::set_ins_eastspd(double value) {
  set_has_ins_eastspd();
  ins_eastspd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_speed_505.ins_eastspd)
}

// optional double ins_togroundspd = 3;
bool Ins_speed_505::has_ins_togroundspd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ins_speed_505::set_has_ins_togroundspd() {
  _has_bits_[0] |= 0x00000004u;
}
void Ins_speed_505::clear_has_ins_togroundspd() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ins_speed_505::clear_ins_togroundspd() {
  ins_togroundspd_ = 0;
  clear_has_ins_togroundspd();
}
double Ins_speed_505::ins_togroundspd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_speed_505.ins_togroundspd)
  return ins_togroundspd_;
}
void Ins_speed_505::set_ins_togroundspd(double value) {
  set_has_ins_togroundspd();
  ins_togroundspd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_speed_505.ins_togroundspd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ins_headingpitchroll_502::kInsPitchangleFieldNumber;
const int Ins_headingpitchroll_502::kInsRollangleFieldNumber;
const int Ins_headingpitchroll_502::kInsHeadingangleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ins_headingpitchroll_502::Ins_headingpitchroll_502()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Ins_headingpitchroll_502)
}
Ins_headingpitchroll_502::Ins_headingpitchroll_502(const Ins_headingpitchroll_502& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ins_pitchangle_, &from.ins_pitchangle_,
    reinterpret_cast<char*>(&ins_headingangle_) -
    reinterpret_cast<char*>(&ins_pitchangle_) + sizeof(ins_headingangle_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Ins_headingpitchroll_502)
}

void Ins_headingpitchroll_502::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ins_pitchangle_, 0, reinterpret_cast<char*>(&ins_headingangle_) -
    reinterpret_cast<char*>(&ins_pitchangle_) + sizeof(ins_headingangle_));
}

Ins_headingpitchroll_502::~Ins_headingpitchroll_502() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Ins_headingpitchroll_502)
  SharedDtor();
}

void Ins_headingpitchroll_502::SharedDtor() {
}

void Ins_headingpitchroll_502::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ins_headingpitchroll_502::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ins_headingpitchroll_502& Ins_headingpitchroll_502::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ins_headingpitchroll_502* Ins_headingpitchroll_502::New(::google::protobuf::Arena* arena) const {
  Ins_headingpitchroll_502* n = new Ins_headingpitchroll_502;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ins_headingpitchroll_502::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Ins_headingpitchroll_502)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&ins_pitchangle_, 0, reinterpret_cast<char*>(&ins_headingangle_) -
      reinterpret_cast<char*>(&ins_pitchangle_) + sizeof(ins_headingangle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ins_headingpitchroll_502::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Ins_headingpitchroll_502)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ins_pitchangle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_ins_pitchangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_pitchangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_rollangle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_ins_rollangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_rollangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_headingangle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_ins_headingangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_headingangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Ins_headingpitchroll_502)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Ins_headingpitchroll_502)
  return false;
#undef DO_
}

void Ins_headingpitchroll_502::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Ins_headingpitchroll_502)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ins_pitchangle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ins_pitchangle(), output);
  }

  // optional double ins_rollangle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ins_rollangle(), output);
  }

  // optional double ins_headingangle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ins_headingangle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Ins_headingpitchroll_502)
}

::google::protobuf::uint8* Ins_headingpitchroll_502::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Ins_headingpitchroll_502)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ins_pitchangle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ins_pitchangle(), target);
  }

  // optional double ins_rollangle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ins_rollangle(), target);
  }

  // optional double ins_headingangle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ins_headingangle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Ins_headingpitchroll_502)
  return target;
}

size_t Ins_headingpitchroll_502::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Ins_headingpitchroll_502)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double ins_pitchangle = 1;
    if (has_ins_pitchangle()) {
      total_size += 1 + 8;
    }

    // optional double ins_rollangle = 2;
    if (has_ins_rollangle()) {
      total_size += 1 + 8;
    }

    // optional double ins_headingangle = 3;
    if (has_ins_headingangle()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ins_headingpitchroll_502::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Ins_headingpitchroll_502)
  GOOGLE_DCHECK_NE(&from, this);
  const Ins_headingpitchroll_502* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ins_headingpitchroll_502>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Ins_headingpitchroll_502)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Ins_headingpitchroll_502)
    MergeFrom(*source);
  }
}

void Ins_headingpitchroll_502::MergeFrom(const Ins_headingpitchroll_502& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Ins_headingpitchroll_502)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      ins_pitchangle_ = from.ins_pitchangle_;
    }
    if (cached_has_bits & 0x00000002u) {
      ins_rollangle_ = from.ins_rollangle_;
    }
    if (cached_has_bits & 0x00000004u) {
      ins_headingangle_ = from.ins_headingangle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ins_headingpitchroll_502::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Ins_headingpitchroll_502)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ins_headingpitchroll_502::CopyFrom(const Ins_headingpitchroll_502& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Ins_headingpitchroll_502)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins_headingpitchroll_502::IsInitialized() const {
  return true;
}

void Ins_headingpitchroll_502::Swap(Ins_headingpitchroll_502* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ins_headingpitchroll_502::InternalSwap(Ins_headingpitchroll_502* other) {
  std::swap(ins_pitchangle_, other->ins_pitchangle_);
  std::swap(ins_rollangle_, other->ins_rollangle_);
  std::swap(ins_headingangle_, other->ins_headingangle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ins_headingpitchroll_502::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ins_headingpitchroll_502

// optional double ins_pitchangle = 1;
bool Ins_headingpitchroll_502::has_ins_pitchangle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ins_headingpitchroll_502::set_has_ins_pitchangle() {
  _has_bits_[0] |= 0x00000001u;
}
void Ins_headingpitchroll_502::clear_has_ins_pitchangle() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ins_headingpitchroll_502::clear_ins_pitchangle() {
  ins_pitchangle_ = 0;
  clear_has_ins_pitchangle();
}
double Ins_headingpitchroll_502::ins_pitchangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_headingpitchroll_502.ins_pitchangle)
  return ins_pitchangle_;
}
void Ins_headingpitchroll_502::set_ins_pitchangle(double value) {
  set_has_ins_pitchangle();
  ins_pitchangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_headingpitchroll_502.ins_pitchangle)
}

// optional double ins_rollangle = 2;
bool Ins_headingpitchroll_502::has_ins_rollangle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ins_headingpitchroll_502::set_has_ins_rollangle() {
  _has_bits_[0] |= 0x00000002u;
}
void Ins_headingpitchroll_502::clear_has_ins_rollangle() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ins_headingpitchroll_502::clear_ins_rollangle() {
  ins_rollangle_ = 0;
  clear_has_ins_rollangle();
}
double Ins_headingpitchroll_502::ins_rollangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_headingpitchroll_502.ins_rollangle)
  return ins_rollangle_;
}
void Ins_headingpitchroll_502::set_ins_rollangle(double value) {
  set_has_ins_rollangle();
  ins_rollangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_headingpitchroll_502.ins_rollangle)
}

// optional double ins_headingangle = 3;
bool Ins_headingpitchroll_502::has_ins_headingangle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ins_headingpitchroll_502::set_has_ins_headingangle() {
  _has_bits_[0] |= 0x00000004u;
}
void Ins_headingpitchroll_502::clear_has_ins_headingangle() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ins_headingpitchroll_502::clear_ins_headingangle() {
  ins_headingangle_ = 0;
  clear_has_ins_headingangle();
}
double Ins_headingpitchroll_502::ins_headingangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_headingpitchroll_502.ins_headingangle)
  return ins_headingangle_;
}
void Ins_headingpitchroll_502::set_ins_headingangle(double value) {
  set_has_ins_headingangle();
  ins_headingangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_headingpitchroll_502.ins_headingangle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ins_heightandtime_503::kInsLocatheightFieldNumber;
const int Ins_heightandtime_503::kInsTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ins_heightandtime_503::Ins_heightandtime_503()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Ins_heightandtime_503)
}
Ins_heightandtime_503::Ins_heightandtime_503(const Ins_heightandtime_503& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ins_locatheight_, &from.ins_locatheight_,
    reinterpret_cast<char*>(&ins_time_) -
    reinterpret_cast<char*>(&ins_locatheight_) + sizeof(ins_time_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Ins_heightandtime_503)
}

void Ins_heightandtime_503::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ins_locatheight_, 0, reinterpret_cast<char*>(&ins_time_) -
    reinterpret_cast<char*>(&ins_locatheight_) + sizeof(ins_time_));
}

Ins_heightandtime_503::~Ins_heightandtime_503() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Ins_heightandtime_503)
  SharedDtor();
}

void Ins_heightandtime_503::SharedDtor() {
}

void Ins_heightandtime_503::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ins_heightandtime_503::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ins_heightandtime_503& Ins_heightandtime_503::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ins_heightandtime_503* Ins_heightandtime_503::New(::google::protobuf::Arena* arena) const {
  Ins_heightandtime_503* n = new Ins_heightandtime_503;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ins_heightandtime_503::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Ins_heightandtime_503)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ins_locatheight_, 0, reinterpret_cast<char*>(&ins_time_) -
      reinterpret_cast<char*>(&ins_locatheight_) + sizeof(ins_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ins_heightandtime_503::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Ins_heightandtime_503)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double ins_locatheight = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_ins_locatheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_locatheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ins_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ins_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ins_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Ins_heightandtime_503)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Ins_heightandtime_503)
  return false;
#undef DO_
}

void Ins_heightandtime_503::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Ins_heightandtime_503)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ins_locatheight = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ins_locatheight(), output);
  }

  // optional int32 ins_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ins_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Ins_heightandtime_503)
}

::google::protobuf::uint8* Ins_heightandtime_503::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Ins_heightandtime_503)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double ins_locatheight = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ins_locatheight(), target);
  }

  // optional int32 ins_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ins_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Ins_heightandtime_503)
  return target;
}

size_t Ins_heightandtime_503::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Ins_heightandtime_503)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double ins_locatheight = 1;
    if (has_ins_locatheight()) {
      total_size += 1 + 8;
    }

    // optional int32 ins_time = 2;
    if (has_ins_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ins_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ins_heightandtime_503::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Ins_heightandtime_503)
  GOOGLE_DCHECK_NE(&from, this);
  const Ins_heightandtime_503* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ins_heightandtime_503>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Ins_heightandtime_503)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Ins_heightandtime_503)
    MergeFrom(*source);
  }
}

void Ins_heightandtime_503::MergeFrom(const Ins_heightandtime_503& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Ins_heightandtime_503)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ins_locatheight_ = from.ins_locatheight_;
    }
    if (cached_has_bits & 0x00000002u) {
      ins_time_ = from.ins_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ins_heightandtime_503::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Ins_heightandtime_503)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ins_heightandtime_503::CopyFrom(const Ins_heightandtime_503& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Ins_heightandtime_503)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins_heightandtime_503::IsInitialized() const {
  return true;
}

void Ins_heightandtime_503::Swap(Ins_heightandtime_503* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ins_heightandtime_503::InternalSwap(Ins_heightandtime_503* other) {
  std::swap(ins_locatheight_, other->ins_locatheight_);
  std::swap(ins_time_, other->ins_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ins_heightandtime_503::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ins_heightandtime_503

// optional double ins_locatheight = 1;
bool Ins_heightandtime_503::has_ins_locatheight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ins_heightandtime_503::set_has_ins_locatheight() {
  _has_bits_[0] |= 0x00000001u;
}
void Ins_heightandtime_503::clear_has_ins_locatheight() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ins_heightandtime_503::clear_ins_locatheight() {
  ins_locatheight_ = 0;
  clear_has_ins_locatheight();
}
double Ins_heightandtime_503::ins_locatheight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_heightandtime_503.ins_locatheight)
  return ins_locatheight_;
}
void Ins_heightandtime_503::set_ins_locatheight(double value) {
  set_has_ins_locatheight();
  ins_locatheight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_heightandtime_503.ins_locatheight)
}

// optional int32 ins_time = 2;
bool Ins_heightandtime_503::has_ins_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ins_heightandtime_503::set_has_ins_time() {
  _has_bits_[0] |= 0x00000002u;
}
void Ins_heightandtime_503::clear_has_ins_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ins_heightandtime_503::clear_ins_time() {
  ins_time_ = 0;
  clear_has_ins_time();
}
::google::protobuf::int32 Ins_heightandtime_503::ins_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_heightandtime_503.ins_time)
  return ins_time_;
}
void Ins_heightandtime_503::set_ins_time(::google::protobuf::int32 value) {
  set_has_ins_time();
  ins_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_heightandtime_503.ins_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ins_gyro_501::kGyroXFieldNumber;
const int Ins_gyro_501::kGyroYFieldNumber;
const int Ins_gyro_501::kGyroZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ins_gyro_501::Ins_gyro_501()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Ins_gyro_501)
}
Ins_gyro_501::Ins_gyro_501(const Ins_gyro_501& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gyro_x_, &from.gyro_x_,
    reinterpret_cast<char*>(&gyro_z_) -
    reinterpret_cast<char*>(&gyro_x_) + sizeof(gyro_z_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Ins_gyro_501)
}

void Ins_gyro_501::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&gyro_x_, 0, reinterpret_cast<char*>(&gyro_z_) -
    reinterpret_cast<char*>(&gyro_x_) + sizeof(gyro_z_));
}

Ins_gyro_501::~Ins_gyro_501() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Ins_gyro_501)
  SharedDtor();
}

void Ins_gyro_501::SharedDtor() {
}

void Ins_gyro_501::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ins_gyro_501::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ins_gyro_501& Ins_gyro_501::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ins_gyro_501* Ins_gyro_501::New(::google::protobuf::Arena* arena) const {
  Ins_gyro_501* n = new Ins_gyro_501;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ins_gyro_501::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Ins_gyro_501)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&gyro_x_, 0, reinterpret_cast<char*>(&gyro_z_) -
      reinterpret_cast<char*>(&gyro_x_) + sizeof(gyro_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ins_gyro_501::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Ins_gyro_501)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double gyro_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_gyro_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyro_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gyro_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_gyro_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyro_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gyro_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_gyro_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyro_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Ins_gyro_501)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Ins_gyro_501)
  return false;
#undef DO_
}

void Ins_gyro_501::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Ins_gyro_501)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double gyro_x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->gyro_x(), output);
  }

  // optional double gyro_y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gyro_y(), output);
  }

  // optional double gyro_z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gyro_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Ins_gyro_501)
}

::google::protobuf::uint8* Ins_gyro_501::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Ins_gyro_501)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double gyro_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->gyro_x(), target);
  }

  // optional double gyro_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gyro_y(), target);
  }

  // optional double gyro_z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gyro_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Ins_gyro_501)
  return target;
}

size_t Ins_gyro_501::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Ins_gyro_501)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double gyro_x = 1;
    if (has_gyro_x()) {
      total_size += 1 + 8;
    }

    // optional double gyro_y = 2;
    if (has_gyro_y()) {
      total_size += 1 + 8;
    }

    // optional double gyro_z = 3;
    if (has_gyro_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ins_gyro_501::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Ins_gyro_501)
  GOOGLE_DCHECK_NE(&from, this);
  const Ins_gyro_501* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ins_gyro_501>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Ins_gyro_501)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Ins_gyro_501)
    MergeFrom(*source);
  }
}

void Ins_gyro_501::MergeFrom(const Ins_gyro_501& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Ins_gyro_501)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      gyro_x_ = from.gyro_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      gyro_y_ = from.gyro_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      gyro_z_ = from.gyro_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ins_gyro_501::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Ins_gyro_501)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ins_gyro_501::CopyFrom(const Ins_gyro_501& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Ins_gyro_501)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins_gyro_501::IsInitialized() const {
  return true;
}

void Ins_gyro_501::Swap(Ins_gyro_501* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ins_gyro_501::InternalSwap(Ins_gyro_501* other) {
  std::swap(gyro_x_, other->gyro_x_);
  std::swap(gyro_y_, other->gyro_y_);
  std::swap(gyro_z_, other->gyro_z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ins_gyro_501::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ins_gyro_501

// optional double gyro_x = 1;
bool Ins_gyro_501::has_gyro_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ins_gyro_501::set_has_gyro_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Ins_gyro_501::clear_has_gyro_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ins_gyro_501::clear_gyro_x() {
  gyro_x_ = 0;
  clear_has_gyro_x();
}
double Ins_gyro_501::gyro_x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_gyro_501.gyro_x)
  return gyro_x_;
}
void Ins_gyro_501::set_gyro_x(double value) {
  set_has_gyro_x();
  gyro_x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_gyro_501.gyro_x)
}

// optional double gyro_y = 2;
bool Ins_gyro_501::has_gyro_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ins_gyro_501::set_has_gyro_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Ins_gyro_501::clear_has_gyro_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ins_gyro_501::clear_gyro_y() {
  gyro_y_ = 0;
  clear_has_gyro_y();
}
double Ins_gyro_501::gyro_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_gyro_501.gyro_y)
  return gyro_y_;
}
void Ins_gyro_501::set_gyro_y(double value) {
  set_has_gyro_y();
  gyro_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_gyro_501.gyro_y)
}

// optional double gyro_z = 3;
bool Ins_gyro_501::has_gyro_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ins_gyro_501::set_has_gyro_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Ins_gyro_501::clear_has_gyro_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ins_gyro_501::clear_gyro_z() {
  gyro_z_ = 0;
  clear_has_gyro_z();
}
double Ins_gyro_501::gyro_z() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_gyro_501.gyro_z)
  return gyro_z_;
}
void Ins_gyro_501::set_gyro_z(double value) {
  set_has_gyro_z();
  gyro_z_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_gyro_501.gyro_z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ins_acc_500::kAccXFieldNumber;
const int Ins_acc_500::kAccYFieldNumber;
const int Ins_acc_500::kAccZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ins_acc_500::Ins_acc_500()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Ins_acc_500)
}
Ins_acc_500::Ins_acc_500(const Ins_acc_500& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc_x_, &from.acc_x_,
    reinterpret_cast<char*>(&acc_z_) -
    reinterpret_cast<char*>(&acc_x_) + sizeof(acc_z_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Ins_acc_500)
}

void Ins_acc_500::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&acc_x_, 0, reinterpret_cast<char*>(&acc_z_) -
    reinterpret_cast<char*>(&acc_x_) + sizeof(acc_z_));
}

Ins_acc_500::~Ins_acc_500() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Ins_acc_500)
  SharedDtor();
}

void Ins_acc_500::SharedDtor() {
}

void Ins_acc_500::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ins_acc_500::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ins_acc_500& Ins_acc_500::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ins_acc_500* Ins_acc_500::New(::google::protobuf::Arena* arena) const {
  Ins_acc_500* n = new Ins_acc_500;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ins_acc_500::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Ins_acc_500)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&acc_x_, 0, reinterpret_cast<char*>(&acc_z_) -
      reinterpret_cast<char*>(&acc_x_) + sizeof(acc_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ins_acc_500::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Ins_acc_500)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double acc_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_acc_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_acc_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_acc_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Ins_acc_500)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Ins_acc_500)
  return false;
#undef DO_
}

void Ins_acc_500::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Ins_acc_500)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double acc_x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->acc_x(), output);
  }

  // optional double acc_y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->acc_y(), output);
  }

  // optional double acc_z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->acc_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Ins_acc_500)
}

::google::protobuf::uint8* Ins_acc_500::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Ins_acc_500)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double acc_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->acc_x(), target);
  }

  // optional double acc_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->acc_y(), target);
  }

  // optional double acc_z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->acc_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Ins_acc_500)
  return target;
}

size_t Ins_acc_500::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Ins_acc_500)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double acc_x = 1;
    if (has_acc_x()) {
      total_size += 1 + 8;
    }

    // optional double acc_y = 2;
    if (has_acc_y()) {
      total_size += 1 + 8;
    }

    // optional double acc_z = 3;
    if (has_acc_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ins_acc_500::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Ins_acc_500)
  GOOGLE_DCHECK_NE(&from, this);
  const Ins_acc_500* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ins_acc_500>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Ins_acc_500)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Ins_acc_500)
    MergeFrom(*source);
  }
}

void Ins_acc_500::MergeFrom(const Ins_acc_500& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Ins_acc_500)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      acc_x_ = from.acc_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      acc_y_ = from.acc_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      acc_z_ = from.acc_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ins_acc_500::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Ins_acc_500)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ins_acc_500::CopyFrom(const Ins_acc_500& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Ins_acc_500)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins_acc_500::IsInitialized() const {
  return true;
}

void Ins_acc_500::Swap(Ins_acc_500* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ins_acc_500::InternalSwap(Ins_acc_500* other) {
  std::swap(acc_x_, other->acc_x_);
  std::swap(acc_y_, other->acc_y_);
  std::swap(acc_z_, other->acc_z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ins_acc_500::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ins_acc_500

// optional double acc_x = 1;
bool Ins_acc_500::has_acc_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ins_acc_500::set_has_acc_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Ins_acc_500::clear_has_acc_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ins_acc_500::clear_acc_x() {
  acc_x_ = 0;
  clear_has_acc_x();
}
double Ins_acc_500::acc_x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_acc_500.acc_x)
  return acc_x_;
}
void Ins_acc_500::set_acc_x(double value) {
  set_has_acc_x();
  acc_x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_acc_500.acc_x)
}

// optional double acc_y = 2;
bool Ins_acc_500::has_acc_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ins_acc_500::set_has_acc_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Ins_acc_500::clear_has_acc_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ins_acc_500::clear_acc_y() {
  acc_y_ = 0;
  clear_has_acc_y();
}
double Ins_acc_500::acc_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_acc_500.acc_y)
  return acc_y_;
}
void Ins_acc_500::set_acc_y(double value) {
  set_has_acc_y();
  acc_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_acc_500.acc_y)
}

// optional double acc_z = 3;
bool Ins_acc_500::has_acc_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ins_acc_500::set_has_acc_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Ins_acc_500::clear_has_acc_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ins_acc_500::clear_acc_z() {
  acc_z_ = 0;
  clear_has_acc_z();
}
double Ins_acc_500::acc_z() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Ins_acc_500.acc_z)
  return acc_z_;
}
void Ins_acc_500::set_acc_z(double value) {
  set_has_acc_z();
  acc_z_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Ins_acc_500.acc_z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cx75::kGwEmsSts0X151151FieldNumber;
const int Cx75::kEspRaw0X212212FieldNumber;
const int Cx75::kGwBcmDoor0X310310FieldNumber;
const int Cx75::kPam0X270270FieldNumber;
const int Cx75::kPam0X271271FieldNumber;
const int Cx75::kPam0X272272FieldNumber;
const int Cx75::kMrr0X238238FieldNumber;
const int Cx75::kMrr0X239239FieldNumber;
const int Cx75::kEspDirection0X235235FieldNumber;
const int Cx75::kEspAdvanced0X234234FieldNumber;
const int Cx75::kEpsAdvanced0X176176FieldNumber;
const int Cx75::kEspWhlpulse0X236236FieldNumber;
const int Cx75::kIpmRightline0X490490FieldNumber;
const int Cx75::kSasSensor0X175175FieldNumber;
const int Cx75::kGwBody0X321321FieldNumber;
const int Cx75::kIpmLeftline0X278278FieldNumber;
const int Cx75::kGwEmsEngstatus0X142142FieldNumber;
const int Cx75::kGwTboxLocation0X580580FieldNumber;
const int Cx75::kSrs0X350350FieldNumber;
const int Cx75::kIpm0X245245FieldNumber;
const int Cx75::kGwEmsTqwhl0X111111FieldNumber;
const int Cx75::kGwTcuGearinfo0X123123FieldNumber;
const int Cx75::kEspPressure0X241241FieldNumber;
const int Cx75::kEspStatus0X243243FieldNumber;
const int Cx75::kEspAxay0X242242FieldNumber;
const int Cx75::kGwSwmMrr0X31B31BFieldNumber;
const int Cx75::kGwSwmBody0X31A31AFieldNumber;
const int Cx75::kGwEmsTq0X101101FieldNumber;
const int Cx75::kEspVlc0X223223FieldNumber;
const int Cx75::kGwEmsWhltq0X107107FieldNumber;
const int Cx75::kAbsSts0X221221FieldNumber;
const int Cx75::kMrrFrobj0X480480FieldNumber;
const int Cx75::kMrr0X246246FieldNumber;
const int Cx75::kGwMp5Nav0X533533FieldNumber;
const int Cx75::kGwMp50X530530FieldNumber;
const int Cx75::kMrrFrobj0X279279FieldNumber;
const int Cx75::kGwIc0X510510FieldNumber;
const int Cx75::kAbsWhlspd0X211211FieldNumber;
const int Cx75::kEspTq0X217217FieldNumber;
const int Cx75::kEspRpmf0X213213FieldNumber;
const int Cx75::kGwIcTime0X581581FieldNumber;
const int Cx75::kAfs0X5A05A0FieldNumber;
const int Cx75::kSodNm0X440440FieldNumber;
const int Cx75::kGwNm0X460460FieldNumber;
const int Cx75::kEps0X260260FieldNumber;
const int Cx75::kSod0X275275FieldNumber;
const int Cx75::kGwTpmsTire0X361361FieldNumber;
const int Cx75::kInsDatainfo506FieldNumber;
const int Cx75::kInsStd507FieldNumber;
const int Cx75::kInsLatitudelongitude504FieldNumber;
const int Cx75::kInsSpeed505FieldNumber;
const int Cx75::kInsHeadingpitchroll502FieldNumber;
const int Cx75::kInsHeightandtime503FieldNumber;
const int Cx75::kInsGyro501FieldNumber;
const int Cx75::kInsAcc500FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cx75::Cx75()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Cx75)
}
Cx75::Cx75(const Cx75& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gw_ems_sts_0x151_151()) {
    gw_ems_sts_0x151_151_ = new ::jmc_auto::canbus::Gw_ems_sts_0x151_151(*from.gw_ems_sts_0x151_151_);
  } else {
    gw_ems_sts_0x151_151_ = NULL;
  }
  if (from.has_esp_raw_0x212_212()) {
    esp_raw_0x212_212_ = new ::jmc_auto::canbus::Esp_raw_0x212_212(*from.esp_raw_0x212_212_);
  } else {
    esp_raw_0x212_212_ = NULL;
  }
  if (from.has_gw_bcm_door_0x310_310()) {
    gw_bcm_door_0x310_310_ = new ::jmc_auto::canbus::Gw_bcm_door_0x310_310(*from.gw_bcm_door_0x310_310_);
  } else {
    gw_bcm_door_0x310_310_ = NULL;
  }
  if (from.has_pam_0x270_270()) {
    pam_0x270_270_ = new ::jmc_auto::canbus::Pam_0x270_270(*from.pam_0x270_270_);
  } else {
    pam_0x270_270_ = NULL;
  }
  if (from.has_pam_0x271_271()) {
    pam_0x271_271_ = new ::jmc_auto::canbus::Pam_0x271_271(*from.pam_0x271_271_);
  } else {
    pam_0x271_271_ = NULL;
  }
  if (from.has_pam_0x272_272()) {
    pam_0x272_272_ = new ::jmc_auto::canbus::Pam_0x272_272(*from.pam_0x272_272_);
  } else {
    pam_0x272_272_ = NULL;
  }
  if (from.has_mrr_0x238_238()) {
    mrr_0x238_238_ = new ::jmc_auto::canbus::Mrr_0x238_238(*from.mrr_0x238_238_);
  } else {
    mrr_0x238_238_ = NULL;
  }
  if (from.has_mrr_0x239_239()) {
    mrr_0x239_239_ = new ::jmc_auto::canbus::Mrr_0x239_239(*from.mrr_0x239_239_);
  } else {
    mrr_0x239_239_ = NULL;
  }
  if (from.has_esp_direction_0x235_235()) {
    esp_direction_0x235_235_ = new ::jmc_auto::canbus::Esp_direction_0x235_235(*from.esp_direction_0x235_235_);
  } else {
    esp_direction_0x235_235_ = NULL;
  }
  if (from.has_esp_advanced_0x234_234()) {
    esp_advanced_0x234_234_ = new ::jmc_auto::canbus::Esp_advanced_0x234_234(*from.esp_advanced_0x234_234_);
  } else {
    esp_advanced_0x234_234_ = NULL;
  }
  if (from.has_eps_advanced_0x176_176()) {
    eps_advanced_0x176_176_ = new ::jmc_auto::canbus::Eps_advanced_0x176_176(*from.eps_advanced_0x176_176_);
  } else {
    eps_advanced_0x176_176_ = NULL;
  }
  if (from.has_esp_whlpulse_0x236_236()) {
    esp_whlpulse_0x236_236_ = new ::jmc_auto::canbus::Esp_whlpulse_0x236_236(*from.esp_whlpulse_0x236_236_);
  } else {
    esp_whlpulse_0x236_236_ = NULL;
  }
  if (from.has_ipm_rightline_0x490_490()) {
    ipm_rightline_0x490_490_ = new ::jmc_auto::canbus::Ipm_rightline_0x490_490(*from.ipm_rightline_0x490_490_);
  } else {
    ipm_rightline_0x490_490_ = NULL;
  }
  if (from.has_sas_sensor_0x175_175()) {
    sas_sensor_0x175_175_ = new ::jmc_auto::canbus::Sas_sensor_0x175_175(*from.sas_sensor_0x175_175_);
  } else {
    sas_sensor_0x175_175_ = NULL;
  }
  if (from.has_gw_body_0x321_321()) {
    gw_body_0x321_321_ = new ::jmc_auto::canbus::Gw_body_0x321_321(*from.gw_body_0x321_321_);
  } else {
    gw_body_0x321_321_ = NULL;
  }
  if (from.has_ipm_leftline_0x278_278()) {
    ipm_leftline_0x278_278_ = new ::jmc_auto::canbus::Ipm_leftline_0x278_278(*from.ipm_leftline_0x278_278_);
  } else {
    ipm_leftline_0x278_278_ = NULL;
  }
  if (from.has_gw_ems_engstatus_0x142_142()) {
    gw_ems_engstatus_0x142_142_ = new ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142(*from.gw_ems_engstatus_0x142_142_);
  } else {
    gw_ems_engstatus_0x142_142_ = NULL;
  }
  if (from.has_gw_tbox_location_0x580_580()) {
    gw_tbox_location_0x580_580_ = new ::jmc_auto::canbus::Gw_tbox_location_0x580_580(*from.gw_tbox_location_0x580_580_);
  } else {
    gw_tbox_location_0x580_580_ = NULL;
  }
  if (from.has_srs_0x350_350()) {
    srs_0x350_350_ = new ::jmc_auto::canbus::Srs_0x350_350(*from.srs_0x350_350_);
  } else {
    srs_0x350_350_ = NULL;
  }
  if (from.has_ipm_0x245_245()) {
    ipm_0x245_245_ = new ::jmc_auto::canbus::Ipm_0x245_245(*from.ipm_0x245_245_);
  } else {
    ipm_0x245_245_ = NULL;
  }
  if (from.has_gw_ems_tqwhl_0x111_111()) {
    gw_ems_tqwhl_0x111_111_ = new ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111(*from.gw_ems_tqwhl_0x111_111_);
  } else {
    gw_ems_tqwhl_0x111_111_ = NULL;
  }
  if (from.has_gw_tcu_gearinfo_0x123_123()) {
    gw_tcu_gearinfo_0x123_123_ = new ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123(*from.gw_tcu_gearinfo_0x123_123_);
  } else {
    gw_tcu_gearinfo_0x123_123_ = NULL;
  }
  if (from.has_esp_pressure_0x241_241()) {
    esp_pressure_0x241_241_ = new ::jmc_auto::canbus::Esp_pressure_0x241_241(*from.esp_pressure_0x241_241_);
  } else {
    esp_pressure_0x241_241_ = NULL;
  }
  if (from.has_esp_status_0x243_243()) {
    esp_status_0x243_243_ = new ::jmc_auto::canbus::Esp_status_0x243_243(*from.esp_status_0x243_243_);
  } else {
    esp_status_0x243_243_ = NULL;
  }
  if (from.has_esp_axay_0x242_242()) {
    esp_axay_0x242_242_ = new ::jmc_auto::canbus::Esp_axay_0x242_242(*from.esp_axay_0x242_242_);
  } else {
    esp_axay_0x242_242_ = NULL;
  }
  if (from.has_gw_swm_mrr_0x31b_31b()) {
    gw_swm_mrr_0x31b_31b_ = new ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b(*from.gw_swm_mrr_0x31b_31b_);
  } else {
    gw_swm_mrr_0x31b_31b_ = NULL;
  }
  if (from.has_gw_swm_body_0x31a_31a()) {
    gw_swm_body_0x31a_31a_ = new ::jmc_auto::canbus::Gw_swm_body_0x31a_31a(*from.gw_swm_body_0x31a_31a_);
  } else {
    gw_swm_body_0x31a_31a_ = NULL;
  }
  if (from.has_gw_ems_tq_0x101_101()) {
    gw_ems_tq_0x101_101_ = new ::jmc_auto::canbus::Gw_ems_tq_0x101_101(*from.gw_ems_tq_0x101_101_);
  } else {
    gw_ems_tq_0x101_101_ = NULL;
  }
  if (from.has_esp_vlc_0x223_223()) {
    esp_vlc_0x223_223_ = new ::jmc_auto::canbus::Esp_vlc_0x223_223(*from.esp_vlc_0x223_223_);
  } else {
    esp_vlc_0x223_223_ = NULL;
  }
  if (from.has_gw_ems_whltq_0x107_107()) {
    gw_ems_whltq_0x107_107_ = new ::jmc_auto::canbus::Gw_ems_whltq_0x107_107(*from.gw_ems_whltq_0x107_107_);
  } else {
    gw_ems_whltq_0x107_107_ = NULL;
  }
  if (from.has_abs_sts_0x221_221()) {
    abs_sts_0x221_221_ = new ::jmc_auto::canbus::Abs_sts_0x221_221(*from.abs_sts_0x221_221_);
  } else {
    abs_sts_0x221_221_ = NULL;
  }
  if (from.has_mrr_frobj_0x480_480()) {
    mrr_frobj_0x480_480_ = new ::jmc_auto::canbus::Mrr_frobj_0x480_480(*from.mrr_frobj_0x480_480_);
  } else {
    mrr_frobj_0x480_480_ = NULL;
  }
  if (from.has_mrr_0x246_246()) {
    mrr_0x246_246_ = new ::jmc_auto::canbus::Mrr_0x246_246(*from.mrr_0x246_246_);
  } else {
    mrr_0x246_246_ = NULL;
  }
  if (from.has_gw_mp5_nav_0x533_533()) {
    gw_mp5_nav_0x533_533_ = new ::jmc_auto::canbus::Gw_mp5_nav_0x533_533(*from.gw_mp5_nav_0x533_533_);
  } else {
    gw_mp5_nav_0x533_533_ = NULL;
  }
  if (from.has_gw_mp5_0x530_530()) {
    gw_mp5_0x530_530_ = new ::jmc_auto::canbus::Gw_mp5_0x530_530(*from.gw_mp5_0x530_530_);
  } else {
    gw_mp5_0x530_530_ = NULL;
  }
  if (from.has_mrr_frobj_0x279_279()) {
    mrr_frobj_0x279_279_ = new ::jmc_auto::canbus::Mrr_frobj_0x279_279(*from.mrr_frobj_0x279_279_);
  } else {
    mrr_frobj_0x279_279_ = NULL;
  }
  if (from.has_gw_ic_0x510_510()) {
    gw_ic_0x510_510_ = new ::jmc_auto::canbus::Gw_ic_0x510_510(*from.gw_ic_0x510_510_);
  } else {
    gw_ic_0x510_510_ = NULL;
  }
  if (from.has_abs_whlspd_0x211_211()) {
    abs_whlspd_0x211_211_ = new ::jmc_auto::canbus::Abs_whlspd_0x211_211(*from.abs_whlspd_0x211_211_);
  } else {
    abs_whlspd_0x211_211_ = NULL;
  }
  if (from.has_esp_tq_0x217_217()) {
    esp_tq_0x217_217_ = new ::jmc_auto::canbus::Esp_tq_0x217_217(*from.esp_tq_0x217_217_);
  } else {
    esp_tq_0x217_217_ = NULL;
  }
  if (from.has_esp_rpmf_0x213_213()) {
    esp_rpmf_0x213_213_ = new ::jmc_auto::canbus::Esp_rpmf_0x213_213(*from.esp_rpmf_0x213_213_);
  } else {
    esp_rpmf_0x213_213_ = NULL;
  }
  if (from.has_gw_ic_time_0x581_581()) {
    gw_ic_time_0x581_581_ = new ::jmc_auto::canbus::Gw_ic_time_0x581_581(*from.gw_ic_time_0x581_581_);
  } else {
    gw_ic_time_0x581_581_ = NULL;
  }
  if (from.has_afs_0x5a0_5a0()) {
    afs_0x5a0_5a0_ = new ::jmc_auto::canbus::Afs_0x5a0_5a0(*from.afs_0x5a0_5a0_);
  } else {
    afs_0x5a0_5a0_ = NULL;
  }
  if (from.has_sod_nm_0x440_440()) {
    sod_nm_0x440_440_ = new ::jmc_auto::canbus::Sod_nm_0x440_440(*from.sod_nm_0x440_440_);
  } else {
    sod_nm_0x440_440_ = NULL;
  }
  if (from.has_gw_nm_0x460_460()) {
    gw_nm_0x460_460_ = new ::jmc_auto::canbus::Gw_nm_0x460_460(*from.gw_nm_0x460_460_);
  } else {
    gw_nm_0x460_460_ = NULL;
  }
  if (from.has_eps_0x260_260()) {
    eps_0x260_260_ = new ::jmc_auto::canbus::Eps_0x260_260(*from.eps_0x260_260_);
  } else {
    eps_0x260_260_ = NULL;
  }
  if (from.has_sod_0x275_275()) {
    sod_0x275_275_ = new ::jmc_auto::canbus::Sod_0x275_275(*from.sod_0x275_275_);
  } else {
    sod_0x275_275_ = NULL;
  }
  if (from.has_gw_tpms_tire_0x361_361()) {
    gw_tpms_tire_0x361_361_ = new ::jmc_auto::canbus::Gw_tpms_tire_0x361_361(*from.gw_tpms_tire_0x361_361_);
  } else {
    gw_tpms_tire_0x361_361_ = NULL;
  }
  if (from.has_ins_datainfo_506()) {
    ins_datainfo_506_ = new ::jmc_auto::canbus::Ins_datainfo_506(*from.ins_datainfo_506_);
  } else {
    ins_datainfo_506_ = NULL;
  }
  if (from.has_ins_std_507()) {
    ins_std_507_ = new ::jmc_auto::canbus::Ins_std_507(*from.ins_std_507_);
  } else {
    ins_std_507_ = NULL;
  }
  if (from.has_ins_latitudelongitude_504()) {
    ins_latitudelongitude_504_ = new ::jmc_auto::canbus::Ins_latitudelongitude_504(*from.ins_latitudelongitude_504_);
  } else {
    ins_latitudelongitude_504_ = NULL;
  }
  if (from.has_ins_speed_505()) {
    ins_speed_505_ = new ::jmc_auto::canbus::Ins_speed_505(*from.ins_speed_505_);
  } else {
    ins_speed_505_ = NULL;
  }
  if (from.has_ins_headingpitchroll_502()) {
    ins_headingpitchroll_502_ = new ::jmc_auto::canbus::Ins_headingpitchroll_502(*from.ins_headingpitchroll_502_);
  } else {
    ins_headingpitchroll_502_ = NULL;
  }
  if (from.has_ins_heightandtime_503()) {
    ins_heightandtime_503_ = new ::jmc_auto::canbus::Ins_heightandtime_503(*from.ins_heightandtime_503_);
  } else {
    ins_heightandtime_503_ = NULL;
  }
  if (from.has_ins_gyro_501()) {
    ins_gyro_501_ = new ::jmc_auto::canbus::Ins_gyro_501(*from.ins_gyro_501_);
  } else {
    ins_gyro_501_ = NULL;
  }
  if (from.has_ins_acc_500()) {
    ins_acc_500_ = new ::jmc_auto::canbus::Ins_acc_500(*from.ins_acc_500_);
  } else {
    ins_acc_500_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Cx75)
}

void Cx75::SharedCtor() {
  ::memset(&gw_ems_sts_0x151_151_, 0, reinterpret_cast<char*>(&ins_acc_500_) -
    reinterpret_cast<char*>(&gw_ems_sts_0x151_151_) + sizeof(ins_acc_500_));
  _cached_size_ = 0;
}

Cx75::~Cx75() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Cx75)
  SharedDtor();
}

void Cx75::SharedDtor() {
  if (this != internal_default_instance()) {
    delete gw_ems_sts_0x151_151_;
  }
  if (this != internal_default_instance()) {
    delete esp_raw_0x212_212_;
  }
  if (this != internal_default_instance()) {
    delete gw_bcm_door_0x310_310_;
  }
  if (this != internal_default_instance()) {
    delete pam_0x270_270_;
  }
  if (this != internal_default_instance()) {
    delete pam_0x271_271_;
  }
  if (this != internal_default_instance()) {
    delete pam_0x272_272_;
  }
  if (this != internal_default_instance()) {
    delete mrr_0x238_238_;
  }
  if (this != internal_default_instance()) {
    delete mrr_0x239_239_;
  }
  if (this != internal_default_instance()) {
    delete esp_direction_0x235_235_;
  }
  if (this != internal_default_instance()) {
    delete esp_advanced_0x234_234_;
  }
  if (this != internal_default_instance()) {
    delete eps_advanced_0x176_176_;
  }
  if (this != internal_default_instance()) {
    delete esp_whlpulse_0x236_236_;
  }
  if (this != internal_default_instance()) {
    delete ipm_rightline_0x490_490_;
  }
  if (this != internal_default_instance()) {
    delete sas_sensor_0x175_175_;
  }
  if (this != internal_default_instance()) {
    delete gw_body_0x321_321_;
  }
  if (this != internal_default_instance()) {
    delete ipm_leftline_0x278_278_;
  }
  if (this != internal_default_instance()) {
    delete gw_ems_engstatus_0x142_142_;
  }
  if (this != internal_default_instance()) {
    delete gw_tbox_location_0x580_580_;
  }
  if (this != internal_default_instance()) {
    delete srs_0x350_350_;
  }
  if (this != internal_default_instance()) {
    delete ipm_0x245_245_;
  }
  if (this != internal_default_instance()) {
    delete gw_ems_tqwhl_0x111_111_;
  }
  if (this != internal_default_instance()) {
    delete gw_tcu_gearinfo_0x123_123_;
  }
  if (this != internal_default_instance()) {
    delete esp_pressure_0x241_241_;
  }
  if (this != internal_default_instance()) {
    delete esp_status_0x243_243_;
  }
  if (this != internal_default_instance()) {
    delete esp_axay_0x242_242_;
  }
  if (this != internal_default_instance()) {
    delete gw_swm_mrr_0x31b_31b_;
  }
  if (this != internal_default_instance()) {
    delete gw_swm_body_0x31a_31a_;
  }
  if (this != internal_default_instance()) {
    delete gw_ems_tq_0x101_101_;
  }
  if (this != internal_default_instance()) {
    delete esp_vlc_0x223_223_;
  }
  if (this != internal_default_instance()) {
    delete gw_ems_whltq_0x107_107_;
  }
  if (this != internal_default_instance()) {
    delete abs_sts_0x221_221_;
  }
  if (this != internal_default_instance()) {
    delete mrr_frobj_0x480_480_;
  }
  if (this != internal_default_instance()) {
    delete mrr_0x246_246_;
  }
  if (this != internal_default_instance()) {
    delete gw_mp5_nav_0x533_533_;
  }
  if (this != internal_default_instance()) {
    delete gw_mp5_0x530_530_;
  }
  if (this != internal_default_instance()) {
    delete mrr_frobj_0x279_279_;
  }
  if (this != internal_default_instance()) {
    delete gw_ic_0x510_510_;
  }
  if (this != internal_default_instance()) {
    delete abs_whlspd_0x211_211_;
  }
  if (this != internal_default_instance()) {
    delete esp_tq_0x217_217_;
  }
  if (this != internal_default_instance()) {
    delete esp_rpmf_0x213_213_;
  }
  if (this != internal_default_instance()) {
    delete gw_ic_time_0x581_581_;
  }
  if (this != internal_default_instance()) {
    delete afs_0x5a0_5a0_;
  }
  if (this != internal_default_instance()) {
    delete sod_nm_0x440_440_;
  }
  if (this != internal_default_instance()) {
    delete gw_nm_0x460_460_;
  }
  if (this != internal_default_instance()) {
    delete eps_0x260_260_;
  }
  if (this != internal_default_instance()) {
    delete sod_0x275_275_;
  }
  if (this != internal_default_instance()) {
    delete gw_tpms_tire_0x361_361_;
  }
  if (this != internal_default_instance()) {
    delete ins_datainfo_506_;
  }
  if (this != internal_default_instance()) {
    delete ins_std_507_;
  }
  if (this != internal_default_instance()) {
    delete ins_latitudelongitude_504_;
  }
  if (this != internal_default_instance()) {
    delete ins_speed_505_;
  }
  if (this != internal_default_instance()) {
    delete ins_headingpitchroll_502_;
  }
  if (this != internal_default_instance()) {
    delete ins_heightandtime_503_;
  }
  if (this != internal_default_instance()) {
    delete ins_gyro_501_;
  }
  if (this != internal_default_instance()) {
    delete ins_acc_500_;
  }
}

void Cx75::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cx75::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Cx75& Cx75::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::InitDefaults();
  return *internal_default_instance();
}

Cx75* Cx75::New(::google::protobuf::Arena* arena) const {
  Cx75* n = new Cx75;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Cx75::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Cx75)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_gw_ems_sts_0x151_151()) {
      GOOGLE_DCHECK(gw_ems_sts_0x151_151_ != NULL);
      gw_ems_sts_0x151_151_->::jmc_auto::canbus::Gw_ems_sts_0x151_151::Clear();
    }
    if (has_esp_raw_0x212_212()) {
      GOOGLE_DCHECK(esp_raw_0x212_212_ != NULL);
      esp_raw_0x212_212_->::jmc_auto::canbus::Esp_raw_0x212_212::Clear();
    }
    if (has_gw_bcm_door_0x310_310()) {
      GOOGLE_DCHECK(gw_bcm_door_0x310_310_ != NULL);
      gw_bcm_door_0x310_310_->::jmc_auto::canbus::Gw_bcm_door_0x310_310::Clear();
    }
    if (has_pam_0x270_270()) {
      GOOGLE_DCHECK(pam_0x270_270_ != NULL);
      pam_0x270_270_->::jmc_auto::canbus::Pam_0x270_270::Clear();
    }
    if (has_pam_0x271_271()) {
      GOOGLE_DCHECK(pam_0x271_271_ != NULL);
      pam_0x271_271_->::jmc_auto::canbus::Pam_0x271_271::Clear();
    }
    if (has_pam_0x272_272()) {
      GOOGLE_DCHECK(pam_0x272_272_ != NULL);
      pam_0x272_272_->::jmc_auto::canbus::Pam_0x272_272::Clear();
    }
    if (has_mrr_0x238_238()) {
      GOOGLE_DCHECK(mrr_0x238_238_ != NULL);
      mrr_0x238_238_->::jmc_auto::canbus::Mrr_0x238_238::Clear();
    }
    if (has_mrr_0x239_239()) {
      GOOGLE_DCHECK(mrr_0x239_239_ != NULL);
      mrr_0x239_239_->::jmc_auto::canbus::Mrr_0x239_239::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_esp_direction_0x235_235()) {
      GOOGLE_DCHECK(esp_direction_0x235_235_ != NULL);
      esp_direction_0x235_235_->::jmc_auto::canbus::Esp_direction_0x235_235::Clear();
    }
    if (has_esp_advanced_0x234_234()) {
      GOOGLE_DCHECK(esp_advanced_0x234_234_ != NULL);
      esp_advanced_0x234_234_->::jmc_auto::canbus::Esp_advanced_0x234_234::Clear();
    }
    if (has_eps_advanced_0x176_176()) {
      GOOGLE_DCHECK(eps_advanced_0x176_176_ != NULL);
      eps_advanced_0x176_176_->::jmc_auto::canbus::Eps_advanced_0x176_176::Clear();
    }
    if (has_esp_whlpulse_0x236_236()) {
      GOOGLE_DCHECK(esp_whlpulse_0x236_236_ != NULL);
      esp_whlpulse_0x236_236_->::jmc_auto::canbus::Esp_whlpulse_0x236_236::Clear();
    }
    if (has_ipm_rightline_0x490_490()) {
      GOOGLE_DCHECK(ipm_rightline_0x490_490_ != NULL);
      ipm_rightline_0x490_490_->::jmc_auto::canbus::Ipm_rightline_0x490_490::Clear();
    }
    if (has_sas_sensor_0x175_175()) {
      GOOGLE_DCHECK(sas_sensor_0x175_175_ != NULL);
      sas_sensor_0x175_175_->::jmc_auto::canbus::Sas_sensor_0x175_175::Clear();
    }
    if (has_gw_body_0x321_321()) {
      GOOGLE_DCHECK(gw_body_0x321_321_ != NULL);
      gw_body_0x321_321_->::jmc_auto::canbus::Gw_body_0x321_321::Clear();
    }
    if (has_ipm_leftline_0x278_278()) {
      GOOGLE_DCHECK(ipm_leftline_0x278_278_ != NULL);
      ipm_leftline_0x278_278_->::jmc_auto::canbus::Ipm_leftline_0x278_278::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_gw_ems_engstatus_0x142_142()) {
      GOOGLE_DCHECK(gw_ems_engstatus_0x142_142_ != NULL);
      gw_ems_engstatus_0x142_142_->::jmc_auto::canbus::Gw_ems_engstatus_0x142_142::Clear();
    }
    if (has_gw_tbox_location_0x580_580()) {
      GOOGLE_DCHECK(gw_tbox_location_0x580_580_ != NULL);
      gw_tbox_location_0x580_580_->::jmc_auto::canbus::Gw_tbox_location_0x580_580::Clear();
    }
    if (has_srs_0x350_350()) {
      GOOGLE_DCHECK(srs_0x350_350_ != NULL);
      srs_0x350_350_->::jmc_auto::canbus::Srs_0x350_350::Clear();
    }
    if (has_ipm_0x245_245()) {
      GOOGLE_DCHECK(ipm_0x245_245_ != NULL);
      ipm_0x245_245_->::jmc_auto::canbus::Ipm_0x245_245::Clear();
    }
    if (has_gw_ems_tqwhl_0x111_111()) {
      GOOGLE_DCHECK(gw_ems_tqwhl_0x111_111_ != NULL);
      gw_ems_tqwhl_0x111_111_->::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111::Clear();
    }
    if (has_gw_tcu_gearinfo_0x123_123()) {
      GOOGLE_DCHECK(gw_tcu_gearinfo_0x123_123_ != NULL);
      gw_tcu_gearinfo_0x123_123_->::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123::Clear();
    }
    if (has_esp_pressure_0x241_241()) {
      GOOGLE_DCHECK(esp_pressure_0x241_241_ != NULL);
      esp_pressure_0x241_241_->::jmc_auto::canbus::Esp_pressure_0x241_241::Clear();
    }
    if (has_esp_status_0x243_243()) {
      GOOGLE_DCHECK(esp_status_0x243_243_ != NULL);
      esp_status_0x243_243_->::jmc_auto::canbus::Esp_status_0x243_243::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    if (has_esp_axay_0x242_242()) {
      GOOGLE_DCHECK(esp_axay_0x242_242_ != NULL);
      esp_axay_0x242_242_->::jmc_auto::canbus::Esp_axay_0x242_242::Clear();
    }
    if (has_gw_swm_mrr_0x31b_31b()) {
      GOOGLE_DCHECK(gw_swm_mrr_0x31b_31b_ != NULL);
      gw_swm_mrr_0x31b_31b_->::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b::Clear();
    }
    if (has_gw_swm_body_0x31a_31a()) {
      GOOGLE_DCHECK(gw_swm_body_0x31a_31a_ != NULL);
      gw_swm_body_0x31a_31a_->::jmc_auto::canbus::Gw_swm_body_0x31a_31a::Clear();
    }
    if (has_gw_ems_tq_0x101_101()) {
      GOOGLE_DCHECK(gw_ems_tq_0x101_101_ != NULL);
      gw_ems_tq_0x101_101_->::jmc_auto::canbus::Gw_ems_tq_0x101_101::Clear();
    }
    if (has_esp_vlc_0x223_223()) {
      GOOGLE_DCHECK(esp_vlc_0x223_223_ != NULL);
      esp_vlc_0x223_223_->::jmc_auto::canbus::Esp_vlc_0x223_223::Clear();
    }
    if (has_gw_ems_whltq_0x107_107()) {
      GOOGLE_DCHECK(gw_ems_whltq_0x107_107_ != NULL);
      gw_ems_whltq_0x107_107_->::jmc_auto::canbus::Gw_ems_whltq_0x107_107::Clear();
    }
    if (has_abs_sts_0x221_221()) {
      GOOGLE_DCHECK(abs_sts_0x221_221_ != NULL);
      abs_sts_0x221_221_->::jmc_auto::canbus::Abs_sts_0x221_221::Clear();
    }
    if (has_mrr_frobj_0x480_480()) {
      GOOGLE_DCHECK(mrr_frobj_0x480_480_ != NULL);
      mrr_frobj_0x480_480_->::jmc_auto::canbus::Mrr_frobj_0x480_480::Clear();
    }
  }
  if (_has_bits_[32 / 32] & 255u) {
    if (has_mrr_0x246_246()) {
      GOOGLE_DCHECK(mrr_0x246_246_ != NULL);
      mrr_0x246_246_->::jmc_auto::canbus::Mrr_0x246_246::Clear();
    }
    if (has_gw_mp5_nav_0x533_533()) {
      GOOGLE_DCHECK(gw_mp5_nav_0x533_533_ != NULL);
      gw_mp5_nav_0x533_533_->::jmc_auto::canbus::Gw_mp5_nav_0x533_533::Clear();
    }
    if (has_gw_mp5_0x530_530()) {
      GOOGLE_DCHECK(gw_mp5_0x530_530_ != NULL);
      gw_mp5_0x530_530_->::jmc_auto::canbus::Gw_mp5_0x530_530::Clear();
    }
    if (has_mrr_frobj_0x279_279()) {
      GOOGLE_DCHECK(mrr_frobj_0x279_279_ != NULL);
      mrr_frobj_0x279_279_->::jmc_auto::canbus::Mrr_frobj_0x279_279::Clear();
    }
    if (has_gw_ic_0x510_510()) {
      GOOGLE_DCHECK(gw_ic_0x510_510_ != NULL);
      gw_ic_0x510_510_->::jmc_auto::canbus::Gw_ic_0x510_510::Clear();
    }
    if (has_abs_whlspd_0x211_211()) {
      GOOGLE_DCHECK(abs_whlspd_0x211_211_ != NULL);
      abs_whlspd_0x211_211_->::jmc_auto::canbus::Abs_whlspd_0x211_211::Clear();
    }
    if (has_esp_tq_0x217_217()) {
      GOOGLE_DCHECK(esp_tq_0x217_217_ != NULL);
      esp_tq_0x217_217_->::jmc_auto::canbus::Esp_tq_0x217_217::Clear();
    }
    if (has_esp_rpmf_0x213_213()) {
      GOOGLE_DCHECK(esp_rpmf_0x213_213_ != NULL);
      esp_rpmf_0x213_213_->::jmc_auto::canbus::Esp_rpmf_0x213_213::Clear();
    }
  }
  if (_has_bits_[40 / 32] & 65280u) {
    if (has_gw_ic_time_0x581_581()) {
      GOOGLE_DCHECK(gw_ic_time_0x581_581_ != NULL);
      gw_ic_time_0x581_581_->::jmc_auto::canbus::Gw_ic_time_0x581_581::Clear();
    }
    if (has_afs_0x5a0_5a0()) {
      GOOGLE_DCHECK(afs_0x5a0_5a0_ != NULL);
      afs_0x5a0_5a0_->::jmc_auto::canbus::Afs_0x5a0_5a0::Clear();
    }
    if (has_sod_nm_0x440_440()) {
      GOOGLE_DCHECK(sod_nm_0x440_440_ != NULL);
      sod_nm_0x440_440_->::jmc_auto::canbus::Sod_nm_0x440_440::Clear();
    }
    if (has_gw_nm_0x460_460()) {
      GOOGLE_DCHECK(gw_nm_0x460_460_ != NULL);
      gw_nm_0x460_460_->::jmc_auto::canbus::Gw_nm_0x460_460::Clear();
    }
    if (has_eps_0x260_260()) {
      GOOGLE_DCHECK(eps_0x260_260_ != NULL);
      eps_0x260_260_->::jmc_auto::canbus::Eps_0x260_260::Clear();
    }
    if (has_sod_0x275_275()) {
      GOOGLE_DCHECK(sod_0x275_275_ != NULL);
      sod_0x275_275_->::jmc_auto::canbus::Sod_0x275_275::Clear();
    }
    if (has_gw_tpms_tire_0x361_361()) {
      GOOGLE_DCHECK(gw_tpms_tire_0x361_361_ != NULL);
      gw_tpms_tire_0x361_361_->::jmc_auto::canbus::Gw_tpms_tire_0x361_361::Clear();
    }
    if (has_ins_datainfo_506()) {
      GOOGLE_DCHECK(ins_datainfo_506_ != NULL);
      ins_datainfo_506_->::jmc_auto::canbus::Ins_datainfo_506::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 8323072u) {
    if (has_ins_std_507()) {
      GOOGLE_DCHECK(ins_std_507_ != NULL);
      ins_std_507_->::jmc_auto::canbus::Ins_std_507::Clear();
    }
    if (has_ins_latitudelongitude_504()) {
      GOOGLE_DCHECK(ins_latitudelongitude_504_ != NULL);
      ins_latitudelongitude_504_->::jmc_auto::canbus::Ins_latitudelongitude_504::Clear();
    }
    if (has_ins_speed_505()) {
      GOOGLE_DCHECK(ins_speed_505_ != NULL);
      ins_speed_505_->::jmc_auto::canbus::Ins_speed_505::Clear();
    }
    if (has_ins_headingpitchroll_502()) {
      GOOGLE_DCHECK(ins_headingpitchroll_502_ != NULL);
      ins_headingpitchroll_502_->::jmc_auto::canbus::Ins_headingpitchroll_502::Clear();
    }
    if (has_ins_heightandtime_503()) {
      GOOGLE_DCHECK(ins_heightandtime_503_ != NULL);
      ins_heightandtime_503_->::jmc_auto::canbus::Ins_heightandtime_503::Clear();
    }
    if (has_ins_gyro_501()) {
      GOOGLE_DCHECK(ins_gyro_501_ != NULL);
      ins_gyro_501_->::jmc_auto::canbus::Ins_gyro_501::Clear();
    }
    if (has_ins_acc_500()) {
      GOOGLE_DCHECK(ins_acc_500_ != NULL);
      ins_acc_500_->::jmc_auto::canbus::Ins_acc_500::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Cx75::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Cx75)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151 gw_ems_sts_0x151_151 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_ems_sts_0x151_151()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_raw_0x212_212 esp_raw_0x212_212 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_esp_raw_0x212_212()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310 gw_bcm_door_0x310_310 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_bcm_door_0x310_310()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x270_270 pam_0x270_270 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pam_0x270_270()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x271_271 pam_0x271_271 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pam_0x271_271()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Pam_0x272_272 pam_0x272_272 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pam_0x272_272()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x238_238 mrr_0x238_238 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mrr_0x238_238()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x239_239 mrr_0x239_239 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mrr_0x239_239()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_direction_0x235_235 esp_direction_0x235_235 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_esp_direction_0x235_235()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_advanced_0x234_234 esp_advanced_0x234_234 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_esp_advanced_0x234_234()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_advanced_0x176_176 eps_advanced_0x176_176 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eps_advanced_0x176_176()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236 esp_whlpulse_0x236_236 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_esp_whlpulse_0x236_236()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_rightline_0x490_490 ipm_rightline_0x490_490 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipm_rightline_0x490_490()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sas_sensor_0x175_175 sas_sensor_0x175_175 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sas_sensor_0x175_175()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_body_0x321_321 gw_body_0x321_321 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_body_0x321_321()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_leftline_0x278_278 ipm_leftline_0x278_278 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipm_leftline_0x278_278()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142 gw_ems_engstatus_0x142_142 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_ems_engstatus_0x142_142()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tbox_location_0x580_580 gw_tbox_location_0x580_580 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_tbox_location_0x580_580()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Srs_0x350_350 srs_0x350_350 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_srs_0x350_350()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ipm_0x245_245 ipm_0x245_245 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ipm_0x245_245()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111 gw_ems_tqwhl_0x111_111 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_ems_tqwhl_0x111_111()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123 gw_tcu_gearinfo_0x123_123 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_tcu_gearinfo_0x123_123()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_pressure_0x241_241 esp_pressure_0x241_241 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_esp_pressure_0x241_241()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_status_0x243_243 esp_status_0x243_243 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_esp_status_0x243_243()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_axay_0x242_242 esp_axay_0x242_242 = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_esp_axay_0x242_242()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b gw_swm_mrr_0x31b_31b = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_swm_mrr_0x31b_31b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a gw_swm_body_0x31a_31a = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_swm_body_0x31a_31a()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_tq_0x101_101 gw_ems_tq_0x101_101 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_ems_tq_0x101_101()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_vlc_0x223_223 esp_vlc_0x223_223 = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_esp_vlc_0x223_223()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107 gw_ems_whltq_0x107_107 = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_ems_whltq_0x107_107()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Abs_sts_0x221_221 abs_sts_0x221_221 = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_abs_sts_0x221_221()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_frobj_0x480_480 mrr_frobj_0x480_480 = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(258u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mrr_frobj_0x480_480()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_0x246_246 mrr_0x246_246 = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(266u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mrr_0x246_246()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533 gw_mp5_nav_0x533_533 = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(274u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_mp5_nav_0x533_533()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_mp5_0x530_530 gw_mp5_0x530_530 = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(282u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_mp5_0x530_530()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Mrr_frobj_0x279_279 mrr_frobj_0x279_279 = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(290u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mrr_frobj_0x279_279()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ic_0x510_510 gw_ic_0x510_510 = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(298u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_ic_0x510_510()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Abs_whlspd_0x211_211 abs_whlspd_0x211_211 = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(306u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_abs_whlspd_0x211_211()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_tq_0x217_217 esp_tq_0x217_217 = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(314u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_esp_tq_0x217_217()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Esp_rpmf_0x213_213 esp_rpmf_0x213_213 = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(322u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_esp_rpmf_0x213_213()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_ic_time_0x581_581 gw_ic_time_0x581_581 = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(330u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_ic_time_0x581_581()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Afs_0x5a0_5a0 afs_0x5a0_5a0 = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(338u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_afs_0x5a0_5a0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_nm_0x440_440 sod_nm_0x440_440 = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(346u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sod_nm_0x440_440()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_nm_0x460_460 gw_nm_0x460_460 = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(354u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_nm_0x460_460()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Eps_0x260_260 eps_0x260_260 = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(362u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eps_0x260_260()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Sod_0x275_275 sod_0x275_275 = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(370u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sod_0x275_275()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361 gw_tpms_tire_0x361_361 = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(378u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gw_tpms_tire_0x361_361()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ins_datainfo_506 ins_datainfo_506 = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(386u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ins_datainfo_506()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ins_std_507 ins_std_507 = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(394u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ins_std_507()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ins_latitudelongitude_504 ins_latitudelongitude_504 = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(402u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ins_latitudelongitude_504()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ins_speed_505 ins_speed_505 = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(410u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ins_speed_505()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ins_headingpitchroll_502 ins_headingpitchroll_502 = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(418u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ins_headingpitchroll_502()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ins_heightandtime_503 ins_heightandtime_503 = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(426u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ins_heightandtime_503()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ins_gyro_501 ins_gyro_501 = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(434u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ins_gyro_501()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Ins_acc_500 ins_acc_500 = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(442u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ins_acc_500()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Cx75)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Cx75)
  return false;
#undef DO_
}

void Cx75::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Cx75)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151 gw_ems_sts_0x151_151 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->gw_ems_sts_0x151_151_, output);
  }

  // optional .jmc_auto.canbus.Esp_raw_0x212_212 esp_raw_0x212_212 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->esp_raw_0x212_212_, output);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310 gw_bcm_door_0x310_310 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->gw_bcm_door_0x310_310_, output);
  }

  // optional .jmc_auto.canbus.Pam_0x270_270 pam_0x270_270 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->pam_0x270_270_, output);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271 pam_0x271_271 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->pam_0x271_271_, output);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272 pam_0x272_272 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->pam_0x272_272_, output);
  }

  // optional .jmc_auto.canbus.Mrr_0x238_238 mrr_0x238_238 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->mrr_0x238_238_, output);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239 mrr_0x239_239 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->mrr_0x239_239_, output);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235 esp_direction_0x235_235 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->esp_direction_0x235_235_, output);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234 esp_advanced_0x234_234 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->esp_advanced_0x234_234_, output);
  }

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176 eps_advanced_0x176_176 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->eps_advanced_0x176_176_, output);
  }

  // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236 esp_whlpulse_0x236_236 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->esp_whlpulse_0x236_236_, output);
  }

  // optional .jmc_auto.canbus.Ipm_rightline_0x490_490 ipm_rightline_0x490_490 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->ipm_rightline_0x490_490_, output);
  }

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175 sas_sensor_0x175_175 = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->sas_sensor_0x175_175_, output);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321 gw_body_0x321_321 = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->gw_body_0x321_321_, output);
  }

  // optional .jmc_auto.canbus.Ipm_leftline_0x278_278 ipm_leftline_0x278_278 = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->ipm_leftline_0x278_278_, output);
  }

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142 gw_ems_engstatus_0x142_142 = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->gw_ems_engstatus_0x142_142_, output);
  }

  // optional .jmc_auto.canbus.Gw_tbox_location_0x580_580 gw_tbox_location_0x580_580 = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->gw_tbox_location_0x580_580_, output);
  }

  // optional .jmc_auto.canbus.Srs_0x350_350 srs_0x350_350 = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->srs_0x350_350_, output);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245 ipm_0x245_245 = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->ipm_0x245_245_, output);
  }

  // optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111 gw_ems_tqwhl_0x111_111 = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->gw_ems_tqwhl_0x111_111_, output);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123 gw_tcu_gearinfo_0x123_123 = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->gw_tcu_gearinfo_0x123_123_, output);
  }

  // optional .jmc_auto.canbus.Esp_pressure_0x241_241 esp_pressure_0x241_241 = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->esp_pressure_0x241_241_, output);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243 esp_status_0x243_243 = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->esp_status_0x243_243_, output);
  }

  // optional .jmc_auto.canbus.Esp_axay_0x242_242 esp_axay_0x242_242 = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->esp_axay_0x242_242_, output);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b gw_swm_mrr_0x31b_31b = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->gw_swm_mrr_0x31b_31b_, output);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a gw_swm_body_0x31a_31a = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->gw_swm_body_0x31a_31a_, output);
  }

  // optional .jmc_auto.canbus.Gw_ems_tq_0x101_101 gw_ems_tq_0x101_101 = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->gw_ems_tq_0x101_101_, output);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223 esp_vlc_0x223_223 = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->esp_vlc_0x223_223_, output);
  }

  // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107 gw_ems_whltq_0x107_107 = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->gw_ems_whltq_0x107_107_, output);
  }

  // optional .jmc_auto.canbus.Abs_sts_0x221_221 abs_sts_0x221_221 = 31;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->abs_sts_0x221_221_, output);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x480_480 mrr_frobj_0x480_480 = 32;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *this->mrr_frobj_0x480_480_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .jmc_auto.canbus.Mrr_0x246_246 mrr_0x246_246 = 33;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *this->mrr_0x246_246_, output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533 gw_mp5_nav_0x533_533 = 34;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, *this->gw_mp5_nav_0x533_533_, output);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530 gw_mp5_0x530_530 = 35;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, *this->gw_mp5_0x530_530_, output);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x279_279 mrr_frobj_0x279_279 = 36;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, *this->mrr_frobj_0x279_279_, output);
  }

  // optional .jmc_auto.canbus.Gw_ic_0x510_510 gw_ic_0x510_510 = 37;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, *this->gw_ic_0x510_510_, output);
  }

  // optional .jmc_auto.canbus.Abs_whlspd_0x211_211 abs_whlspd_0x211_211 = 38;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, *this->abs_whlspd_0x211_211_, output);
  }

  // optional .jmc_auto.canbus.Esp_tq_0x217_217 esp_tq_0x217_217 = 39;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, *this->esp_tq_0x217_217_, output);
  }

  // optional .jmc_auto.canbus.Esp_rpmf_0x213_213 esp_rpmf_0x213_213 = 40;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, *this->esp_rpmf_0x213_213_, output);
  }

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581 gw_ic_time_0x581_581 = 41;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, *this->gw_ic_time_0x581_581_, output);
  }

  // optional .jmc_auto.canbus.Afs_0x5a0_5a0 afs_0x5a0_5a0 = 42;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, *this->afs_0x5a0_5a0_, output);
  }

  // optional .jmc_auto.canbus.Sod_nm_0x440_440 sod_nm_0x440_440 = 43;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, *this->sod_nm_0x440_440_, output);
  }

  // optional .jmc_auto.canbus.Gw_nm_0x460_460 gw_nm_0x460_460 = 44;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, *this->gw_nm_0x460_460_, output);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260 eps_0x260_260 = 45;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, *this->eps_0x260_260_, output);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275 sod_0x275_275 = 46;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, *this->sod_0x275_275_, output);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361 gw_tpms_tire_0x361_361 = 47;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, *this->gw_tpms_tire_0x361_361_, output);
  }

  // optional .jmc_auto.canbus.Ins_datainfo_506 ins_datainfo_506 = 48;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, *this->ins_datainfo_506_, output);
  }

  // optional .jmc_auto.canbus.Ins_std_507 ins_std_507 = 49;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      49, *this->ins_std_507_, output);
  }

  // optional .jmc_auto.canbus.Ins_latitudelongitude_504 ins_latitudelongitude_504 = 50;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->ins_latitudelongitude_504_, output);
  }

  // optional .jmc_auto.canbus.Ins_speed_505 ins_speed_505 = 51;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, *this->ins_speed_505_, output);
  }

  // optional .jmc_auto.canbus.Ins_headingpitchroll_502 ins_headingpitchroll_502 = 52;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, *this->ins_headingpitchroll_502_, output);
  }

  // optional .jmc_auto.canbus.Ins_heightandtime_503 ins_heightandtime_503 = 53;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, *this->ins_heightandtime_503_, output);
  }

  // optional .jmc_auto.canbus.Ins_gyro_501 ins_gyro_501 = 54;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, *this->ins_gyro_501_, output);
  }

  // optional .jmc_auto.canbus.Ins_acc_500 ins_acc_500 = 55;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, *this->ins_acc_500_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Cx75)
}

::google::protobuf::uint8* Cx75::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Cx75)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151 gw_ems_sts_0x151_151 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->gw_ems_sts_0x151_151_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Esp_raw_0x212_212 esp_raw_0x212_212 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->esp_raw_0x212_212_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310 gw_bcm_door_0x310_310 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->gw_bcm_door_0x310_310_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Pam_0x270_270 pam_0x270_270 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->pam_0x270_270_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Pam_0x271_271 pam_0x271_271 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->pam_0x271_271_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Pam_0x272_272 pam_0x272_272 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->pam_0x272_272_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Mrr_0x238_238 mrr_0x238_238 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->mrr_0x238_238_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Mrr_0x239_239 mrr_0x239_239 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->mrr_0x239_239_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Esp_direction_0x235_235 esp_direction_0x235_235 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->esp_direction_0x235_235_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Esp_advanced_0x234_234 esp_advanced_0x234_234 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->esp_advanced_0x234_234_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Eps_advanced_0x176_176 eps_advanced_0x176_176 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->eps_advanced_0x176_176_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236 esp_whlpulse_0x236_236 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->esp_whlpulse_0x236_236_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Ipm_rightline_0x490_490 ipm_rightline_0x490_490 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->ipm_rightline_0x490_490_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Sas_sensor_0x175_175 sas_sensor_0x175_175 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->sas_sensor_0x175_175_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gw_body_0x321_321 gw_body_0x321_321 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->gw_body_0x321_321_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Ipm_leftline_0x278_278 ipm_leftline_0x278_278 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->ipm_leftline_0x278_278_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142 gw_ems_engstatus_0x142_142 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->gw_ems_engstatus_0x142_142_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gw_tbox_location_0x580_580 gw_tbox_location_0x580_580 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->gw_tbox_location_0x580_580_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Srs_0x350_350 srs_0x350_350 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->srs_0x350_350_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Ipm_0x245_245 ipm_0x245_245 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->ipm_0x245_245_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111 gw_ems_tqwhl_0x111_111 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->gw_ems_tqwhl_0x111_111_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123 gw_tcu_gearinfo_0x123_123 = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->gw_tcu_gearinfo_0x123_123_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Esp_pressure_0x241_241 esp_pressure_0x241_241 = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->esp_pressure_0x241_241_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Esp_status_0x243_243 esp_status_0x243_243 = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->esp_status_0x243_243_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Esp_axay_0x242_242 esp_axay_0x242_242 = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->esp_axay_0x242_242_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b gw_swm_mrr_0x31b_31b = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->gw_swm_mrr_0x31b_31b_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a gw_swm_body_0x31a_31a = 27;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->gw_swm_body_0x31a_31a_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gw_ems_tq_0x101_101 gw_ems_tq_0x101_101 = 28;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->gw_ems_tq_0x101_101_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Esp_vlc_0x223_223 esp_vlc_0x223_223 = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->esp_vlc_0x223_223_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107 gw_ems_whltq_0x107_107 = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->gw_ems_whltq_0x107_107_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Abs_sts_0x221_221 abs_sts_0x221_221 = 31;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->abs_sts_0x221_221_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x480_480 mrr_frobj_0x480_480 = 32;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *this->mrr_frobj_0x480_480_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .jmc_auto.canbus.Mrr_0x246_246 mrr_0x246_246 = 33;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, *this->mrr_0x246_246_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533 gw_mp5_nav_0x533_533 = 34;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        34, *this->gw_mp5_nav_0x533_533_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gw_mp5_0x530_530 gw_mp5_0x530_530 = 35;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        35, *this->gw_mp5_0x530_530_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Mrr_frobj_0x279_279 mrr_frobj_0x279_279 = 36;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        36, *this->mrr_frobj_0x279_279_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gw_ic_0x510_510 gw_ic_0x510_510 = 37;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        37, *this->gw_ic_0x510_510_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Abs_whlspd_0x211_211 abs_whlspd_0x211_211 = 38;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        38, *this->abs_whlspd_0x211_211_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Esp_tq_0x217_217 esp_tq_0x217_217 = 39;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        39, *this->esp_tq_0x217_217_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Esp_rpmf_0x213_213 esp_rpmf_0x213_213 = 40;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        40, *this->esp_rpmf_0x213_213_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gw_ic_time_0x581_581 gw_ic_time_0x581_581 = 41;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        41, *this->gw_ic_time_0x581_581_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Afs_0x5a0_5a0 afs_0x5a0_5a0 = 42;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, *this->afs_0x5a0_5a0_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Sod_nm_0x440_440 sod_nm_0x440_440 = 43;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        43, *this->sod_nm_0x440_440_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gw_nm_0x460_460 gw_nm_0x460_460 = 44;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        44, *this->gw_nm_0x460_460_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Eps_0x260_260 eps_0x260_260 = 45;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        45, *this->eps_0x260_260_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Sod_0x275_275 sod_0x275_275 = 46;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        46, *this->sod_0x275_275_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361 gw_tpms_tire_0x361_361 = 47;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        47, *this->gw_tpms_tire_0x361_361_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Ins_datainfo_506 ins_datainfo_506 = 48;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        48, *this->ins_datainfo_506_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Ins_std_507 ins_std_507 = 49;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        49, *this->ins_std_507_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Ins_latitudelongitude_504 ins_latitudelongitude_504 = 50;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *this->ins_latitudelongitude_504_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Ins_speed_505 ins_speed_505 = 51;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        51, *this->ins_speed_505_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Ins_headingpitchroll_502 ins_headingpitchroll_502 = 52;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        52, *this->ins_headingpitchroll_502_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Ins_heightandtime_503 ins_heightandtime_503 = 53;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        53, *this->ins_heightandtime_503_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Ins_gyro_501 ins_gyro_501 = 54;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        54, *this->ins_gyro_501_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Ins_acc_500 ins_acc_500 = 55;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        55, *this->ins_acc_500_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Cx75)
  return target;
}

size_t Cx75::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Cx75)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.canbus.Gw_ems_sts_0x151_151 gw_ems_sts_0x151_151 = 1;
    if (has_gw_ems_sts_0x151_151()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gw_ems_sts_0x151_151_);
    }

    // optional .jmc_auto.canbus.Esp_raw_0x212_212 esp_raw_0x212_212 = 2;
    if (has_esp_raw_0x212_212()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->esp_raw_0x212_212_);
    }

    // optional .jmc_auto.canbus.Gw_bcm_door_0x310_310 gw_bcm_door_0x310_310 = 3;
    if (has_gw_bcm_door_0x310_310()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gw_bcm_door_0x310_310_);
    }

    // optional .jmc_auto.canbus.Pam_0x270_270 pam_0x270_270 = 4;
    if (has_pam_0x270_270()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pam_0x270_270_);
    }

    // optional .jmc_auto.canbus.Pam_0x271_271 pam_0x271_271 = 5;
    if (has_pam_0x271_271()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pam_0x271_271_);
    }

    // optional .jmc_auto.canbus.Pam_0x272_272 pam_0x272_272 = 6;
    if (has_pam_0x272_272()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pam_0x272_272_);
    }

    // optional .jmc_auto.canbus.Mrr_0x238_238 mrr_0x238_238 = 7;
    if (has_mrr_0x238_238()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mrr_0x238_238_);
    }

    // optional .jmc_auto.canbus.Mrr_0x239_239 mrr_0x239_239 = 8;
    if (has_mrr_0x239_239()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mrr_0x239_239_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .jmc_auto.canbus.Esp_direction_0x235_235 esp_direction_0x235_235 = 9;
    if (has_esp_direction_0x235_235()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->esp_direction_0x235_235_);
    }

    // optional .jmc_auto.canbus.Esp_advanced_0x234_234 esp_advanced_0x234_234 = 10;
    if (has_esp_advanced_0x234_234()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->esp_advanced_0x234_234_);
    }

    // optional .jmc_auto.canbus.Eps_advanced_0x176_176 eps_advanced_0x176_176 = 11;
    if (has_eps_advanced_0x176_176()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->eps_advanced_0x176_176_);
    }

    // optional .jmc_auto.canbus.Esp_whlpulse_0x236_236 esp_whlpulse_0x236_236 = 12;
    if (has_esp_whlpulse_0x236_236()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->esp_whlpulse_0x236_236_);
    }

    // optional .jmc_auto.canbus.Ipm_rightline_0x490_490 ipm_rightline_0x490_490 = 13;
    if (has_ipm_rightline_0x490_490()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ipm_rightline_0x490_490_);
    }

    // optional .jmc_auto.canbus.Sas_sensor_0x175_175 sas_sensor_0x175_175 = 14;
    if (has_sas_sensor_0x175_175()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sas_sensor_0x175_175_);
    }

    // optional .jmc_auto.canbus.Gw_body_0x321_321 gw_body_0x321_321 = 15;
    if (has_gw_body_0x321_321()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gw_body_0x321_321_);
    }

    // optional .jmc_auto.canbus.Ipm_leftline_0x278_278 ipm_leftline_0x278_278 = 16;
    if (has_ipm_leftline_0x278_278()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ipm_leftline_0x278_278_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142 gw_ems_engstatus_0x142_142 = 17;
    if (has_gw_ems_engstatus_0x142_142()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gw_ems_engstatus_0x142_142_);
    }

    // optional .jmc_auto.canbus.Gw_tbox_location_0x580_580 gw_tbox_location_0x580_580 = 18;
    if (has_gw_tbox_location_0x580_580()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gw_tbox_location_0x580_580_);
    }

    // optional .jmc_auto.canbus.Srs_0x350_350 srs_0x350_350 = 19;
    if (has_srs_0x350_350()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->srs_0x350_350_);
    }

    // optional .jmc_auto.canbus.Ipm_0x245_245 ipm_0x245_245 = 20;
    if (has_ipm_0x245_245()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ipm_0x245_245_);
    }

    // optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111 gw_ems_tqwhl_0x111_111 = 21;
    if (has_gw_ems_tqwhl_0x111_111()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gw_ems_tqwhl_0x111_111_);
    }

    // optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123 gw_tcu_gearinfo_0x123_123 = 22;
    if (has_gw_tcu_gearinfo_0x123_123()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gw_tcu_gearinfo_0x123_123_);
    }

    // optional .jmc_auto.canbus.Esp_pressure_0x241_241 esp_pressure_0x241_241 = 23;
    if (has_esp_pressure_0x241_241()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->esp_pressure_0x241_241_);
    }

    // optional .jmc_auto.canbus.Esp_status_0x243_243 esp_status_0x243_243 = 24;
    if (has_esp_status_0x243_243()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->esp_status_0x243_243_);
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .jmc_auto.canbus.Esp_axay_0x242_242 esp_axay_0x242_242 = 25;
    if (has_esp_axay_0x242_242()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->esp_axay_0x242_242_);
    }

    // optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b gw_swm_mrr_0x31b_31b = 26;
    if (has_gw_swm_mrr_0x31b_31b()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gw_swm_mrr_0x31b_31b_);
    }

    // optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a gw_swm_body_0x31a_31a = 27;
    if (has_gw_swm_body_0x31a_31a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gw_swm_body_0x31a_31a_);
    }

    // optional .jmc_auto.canbus.Gw_ems_tq_0x101_101 gw_ems_tq_0x101_101 = 28;
    if (has_gw_ems_tq_0x101_101()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gw_ems_tq_0x101_101_);
    }

    // optional .jmc_auto.canbus.Esp_vlc_0x223_223 esp_vlc_0x223_223 = 29;
    if (has_esp_vlc_0x223_223()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->esp_vlc_0x223_223_);
    }

    // optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107 gw_ems_whltq_0x107_107 = 30;
    if (has_gw_ems_whltq_0x107_107()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gw_ems_whltq_0x107_107_);
    }

    // optional .jmc_auto.canbus.Abs_sts_0x221_221 abs_sts_0x221_221 = 31;
    if (has_abs_sts_0x221_221()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->abs_sts_0x221_221_);
    }

    // optional .jmc_auto.canbus.Mrr_frobj_0x480_480 mrr_frobj_0x480_480 = 32;
    if (has_mrr_frobj_0x480_480()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mrr_frobj_0x480_480_);
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional .jmc_auto.canbus.Mrr_0x246_246 mrr_0x246_246 = 33;
    if (has_mrr_0x246_246()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mrr_0x246_246_);
    }

    // optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533 gw_mp5_nav_0x533_533 = 34;
    if (has_gw_mp5_nav_0x533_533()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gw_mp5_nav_0x533_533_);
    }

    // optional .jmc_auto.canbus.Gw_mp5_0x530_530 gw_mp5_0x530_530 = 35;
    if (has_gw_mp5_0x530_530()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gw_mp5_0x530_530_);
    }

    // optional .jmc_auto.canbus.Mrr_frobj_0x279_279 mrr_frobj_0x279_279 = 36;
    if (has_mrr_frobj_0x279_279()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mrr_frobj_0x279_279_);
    }

    // optional .jmc_auto.canbus.Gw_ic_0x510_510 gw_ic_0x510_510 = 37;
    if (has_gw_ic_0x510_510()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gw_ic_0x510_510_);
    }

    // optional .jmc_auto.canbus.Abs_whlspd_0x211_211 abs_whlspd_0x211_211 = 38;
    if (has_abs_whlspd_0x211_211()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->abs_whlspd_0x211_211_);
    }

    // optional .jmc_auto.canbus.Esp_tq_0x217_217 esp_tq_0x217_217 = 39;
    if (has_esp_tq_0x217_217()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->esp_tq_0x217_217_);
    }

    // optional .jmc_auto.canbus.Esp_rpmf_0x213_213 esp_rpmf_0x213_213 = 40;
    if (has_esp_rpmf_0x213_213()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->esp_rpmf_0x213_213_);
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional .jmc_auto.canbus.Gw_ic_time_0x581_581 gw_ic_time_0x581_581 = 41;
    if (has_gw_ic_time_0x581_581()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gw_ic_time_0x581_581_);
    }

    // optional .jmc_auto.canbus.Afs_0x5a0_5a0 afs_0x5a0_5a0 = 42;
    if (has_afs_0x5a0_5a0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->afs_0x5a0_5a0_);
    }

    // optional .jmc_auto.canbus.Sod_nm_0x440_440 sod_nm_0x440_440 = 43;
    if (has_sod_nm_0x440_440()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sod_nm_0x440_440_);
    }

    // optional .jmc_auto.canbus.Gw_nm_0x460_460 gw_nm_0x460_460 = 44;
    if (has_gw_nm_0x460_460()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gw_nm_0x460_460_);
    }

    // optional .jmc_auto.canbus.Eps_0x260_260 eps_0x260_260 = 45;
    if (has_eps_0x260_260()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->eps_0x260_260_);
    }

    // optional .jmc_auto.canbus.Sod_0x275_275 sod_0x275_275 = 46;
    if (has_sod_0x275_275()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sod_0x275_275_);
    }

    // optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361 gw_tpms_tire_0x361_361 = 47;
    if (has_gw_tpms_tire_0x361_361()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gw_tpms_tire_0x361_361_);
    }

    // optional .jmc_auto.canbus.Ins_datainfo_506 ins_datainfo_506 = 48;
    if (has_ins_datainfo_506()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ins_datainfo_506_);
    }

  }
  if (_has_bits_[48 / 32] & 8323072u) {
    // optional .jmc_auto.canbus.Ins_std_507 ins_std_507 = 49;
    if (has_ins_std_507()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ins_std_507_);
    }

    // optional .jmc_auto.canbus.Ins_latitudelongitude_504 ins_latitudelongitude_504 = 50;
    if (has_ins_latitudelongitude_504()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ins_latitudelongitude_504_);
    }

    // optional .jmc_auto.canbus.Ins_speed_505 ins_speed_505 = 51;
    if (has_ins_speed_505()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ins_speed_505_);
    }

    // optional .jmc_auto.canbus.Ins_headingpitchroll_502 ins_headingpitchroll_502 = 52;
    if (has_ins_headingpitchroll_502()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ins_headingpitchroll_502_);
    }

    // optional .jmc_auto.canbus.Ins_heightandtime_503 ins_heightandtime_503 = 53;
    if (has_ins_heightandtime_503()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ins_heightandtime_503_);
    }

    // optional .jmc_auto.canbus.Ins_gyro_501 ins_gyro_501 = 54;
    if (has_ins_gyro_501()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ins_gyro_501_);
    }

    // optional .jmc_auto.canbus.Ins_acc_500 ins_acc_500 = 55;
    if (has_ins_acc_500()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ins_acc_500_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cx75::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Cx75)
  GOOGLE_DCHECK_NE(&from, this);
  const Cx75* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Cx75>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Cx75)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Cx75)
    MergeFrom(*source);
  }
}

void Cx75::MergeFrom(const Cx75& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Cx75)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_gw_ems_sts_0x151_151()->::jmc_auto::canbus::Gw_ems_sts_0x151_151::MergeFrom(from.gw_ems_sts_0x151_151());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_esp_raw_0x212_212()->::jmc_auto::canbus::Esp_raw_0x212_212::MergeFrom(from.esp_raw_0x212_212());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_gw_bcm_door_0x310_310()->::jmc_auto::canbus::Gw_bcm_door_0x310_310::MergeFrom(from.gw_bcm_door_0x310_310());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_pam_0x270_270()->::jmc_auto::canbus::Pam_0x270_270::MergeFrom(from.pam_0x270_270());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_pam_0x271_271()->::jmc_auto::canbus::Pam_0x271_271::MergeFrom(from.pam_0x271_271());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_pam_0x272_272()->::jmc_auto::canbus::Pam_0x272_272::MergeFrom(from.pam_0x272_272());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_mrr_0x238_238()->::jmc_auto::canbus::Mrr_0x238_238::MergeFrom(from.mrr_0x238_238());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_mrr_0x239_239()->::jmc_auto::canbus::Mrr_0x239_239::MergeFrom(from.mrr_0x239_239());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_esp_direction_0x235_235()->::jmc_auto::canbus::Esp_direction_0x235_235::MergeFrom(from.esp_direction_0x235_235());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_esp_advanced_0x234_234()->::jmc_auto::canbus::Esp_advanced_0x234_234::MergeFrom(from.esp_advanced_0x234_234());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_eps_advanced_0x176_176()->::jmc_auto::canbus::Eps_advanced_0x176_176::MergeFrom(from.eps_advanced_0x176_176());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_esp_whlpulse_0x236_236()->::jmc_auto::canbus::Esp_whlpulse_0x236_236::MergeFrom(from.esp_whlpulse_0x236_236());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_ipm_rightline_0x490_490()->::jmc_auto::canbus::Ipm_rightline_0x490_490::MergeFrom(from.ipm_rightline_0x490_490());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_sas_sensor_0x175_175()->::jmc_auto::canbus::Sas_sensor_0x175_175::MergeFrom(from.sas_sensor_0x175_175());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_gw_body_0x321_321()->::jmc_auto::canbus::Gw_body_0x321_321::MergeFrom(from.gw_body_0x321_321());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_ipm_leftline_0x278_278()->::jmc_auto::canbus::Ipm_leftline_0x278_278::MergeFrom(from.ipm_leftline_0x278_278());
    }
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_gw_ems_engstatus_0x142_142()->::jmc_auto::canbus::Gw_ems_engstatus_0x142_142::MergeFrom(from.gw_ems_engstatus_0x142_142());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_gw_tbox_location_0x580_580()->::jmc_auto::canbus::Gw_tbox_location_0x580_580::MergeFrom(from.gw_tbox_location_0x580_580());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_srs_0x350_350()->::jmc_auto::canbus::Srs_0x350_350::MergeFrom(from.srs_0x350_350());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_ipm_0x245_245()->::jmc_auto::canbus::Ipm_0x245_245::MergeFrom(from.ipm_0x245_245());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_gw_ems_tqwhl_0x111_111()->::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111::MergeFrom(from.gw_ems_tqwhl_0x111_111());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_gw_tcu_gearinfo_0x123_123()->::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123::MergeFrom(from.gw_tcu_gearinfo_0x123_123());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_esp_pressure_0x241_241()->::jmc_auto::canbus::Esp_pressure_0x241_241::MergeFrom(from.esp_pressure_0x241_241());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_esp_status_0x243_243()->::jmc_auto::canbus::Esp_status_0x243_243::MergeFrom(from.esp_status_0x243_243());
    }
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_esp_axay_0x242_242()->::jmc_auto::canbus::Esp_axay_0x242_242::MergeFrom(from.esp_axay_0x242_242());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_gw_swm_mrr_0x31b_31b()->::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b::MergeFrom(from.gw_swm_mrr_0x31b_31b());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_gw_swm_body_0x31a_31a()->::jmc_auto::canbus::Gw_swm_body_0x31a_31a::MergeFrom(from.gw_swm_body_0x31a_31a());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_gw_ems_tq_0x101_101()->::jmc_auto::canbus::Gw_ems_tq_0x101_101::MergeFrom(from.gw_ems_tq_0x101_101());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_esp_vlc_0x223_223()->::jmc_auto::canbus::Esp_vlc_0x223_223::MergeFrom(from.esp_vlc_0x223_223());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_gw_ems_whltq_0x107_107()->::jmc_auto::canbus::Gw_ems_whltq_0x107_107::MergeFrom(from.gw_ems_whltq_0x107_107());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_abs_sts_0x221_221()->::jmc_auto::canbus::Abs_sts_0x221_221::MergeFrom(from.abs_sts_0x221_221());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_mrr_frobj_0x480_480()->::jmc_auto::canbus::Mrr_frobj_0x480_480::MergeFrom(from.mrr_frobj_0x480_480());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_mrr_0x246_246()->::jmc_auto::canbus::Mrr_0x246_246::MergeFrom(from.mrr_0x246_246());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_gw_mp5_nav_0x533_533()->::jmc_auto::canbus::Gw_mp5_nav_0x533_533::MergeFrom(from.gw_mp5_nav_0x533_533());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_gw_mp5_0x530_530()->::jmc_auto::canbus::Gw_mp5_0x530_530::MergeFrom(from.gw_mp5_0x530_530());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_mrr_frobj_0x279_279()->::jmc_auto::canbus::Mrr_frobj_0x279_279::MergeFrom(from.mrr_frobj_0x279_279());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_gw_ic_0x510_510()->::jmc_auto::canbus::Gw_ic_0x510_510::MergeFrom(from.gw_ic_0x510_510());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_abs_whlspd_0x211_211()->::jmc_auto::canbus::Abs_whlspd_0x211_211::MergeFrom(from.abs_whlspd_0x211_211());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_esp_tq_0x217_217()->::jmc_auto::canbus::Esp_tq_0x217_217::MergeFrom(from.esp_tq_0x217_217());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_esp_rpmf_0x213_213()->::jmc_auto::canbus::Esp_rpmf_0x213_213::MergeFrom(from.esp_rpmf_0x213_213());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_gw_ic_time_0x581_581()->::jmc_auto::canbus::Gw_ic_time_0x581_581::MergeFrom(from.gw_ic_time_0x581_581());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_afs_0x5a0_5a0()->::jmc_auto::canbus::Afs_0x5a0_5a0::MergeFrom(from.afs_0x5a0_5a0());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_sod_nm_0x440_440()->::jmc_auto::canbus::Sod_nm_0x440_440::MergeFrom(from.sod_nm_0x440_440());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_gw_nm_0x460_460()->::jmc_auto::canbus::Gw_nm_0x460_460::MergeFrom(from.gw_nm_0x460_460());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_eps_0x260_260()->::jmc_auto::canbus::Eps_0x260_260::MergeFrom(from.eps_0x260_260());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_sod_0x275_275()->::jmc_auto::canbus::Sod_0x275_275::MergeFrom(from.sod_0x275_275());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_gw_tpms_tire_0x361_361()->::jmc_auto::canbus::Gw_tpms_tire_0x361_361::MergeFrom(from.gw_tpms_tire_0x361_361());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_ins_datainfo_506()->::jmc_auto::canbus::Ins_datainfo_506::MergeFrom(from.ins_datainfo_506());
    }
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_ins_std_507()->::jmc_auto::canbus::Ins_std_507::MergeFrom(from.ins_std_507());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_ins_latitudelongitude_504()->::jmc_auto::canbus::Ins_latitudelongitude_504::MergeFrom(from.ins_latitudelongitude_504());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_ins_speed_505()->::jmc_auto::canbus::Ins_speed_505::MergeFrom(from.ins_speed_505());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_ins_headingpitchroll_502()->::jmc_auto::canbus::Ins_headingpitchroll_502::MergeFrom(from.ins_headingpitchroll_502());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_ins_heightandtime_503()->::jmc_auto::canbus::Ins_heightandtime_503::MergeFrom(from.ins_heightandtime_503());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_ins_gyro_501()->::jmc_auto::canbus::Ins_gyro_501::MergeFrom(from.ins_gyro_501());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_ins_acc_500()->::jmc_auto::canbus::Ins_acc_500::MergeFrom(from.ins_acc_500());
    }
  }
}

void Cx75::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Cx75)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cx75::CopyFrom(const Cx75& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Cx75)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cx75::IsInitialized() const {
  return true;
}

void Cx75::Swap(Cx75* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cx75::InternalSwap(Cx75* other) {
  std::swap(gw_ems_sts_0x151_151_, other->gw_ems_sts_0x151_151_);
  std::swap(esp_raw_0x212_212_, other->esp_raw_0x212_212_);
  std::swap(gw_bcm_door_0x310_310_, other->gw_bcm_door_0x310_310_);
  std::swap(pam_0x270_270_, other->pam_0x270_270_);
  std::swap(pam_0x271_271_, other->pam_0x271_271_);
  std::swap(pam_0x272_272_, other->pam_0x272_272_);
  std::swap(mrr_0x238_238_, other->mrr_0x238_238_);
  std::swap(mrr_0x239_239_, other->mrr_0x239_239_);
  std::swap(esp_direction_0x235_235_, other->esp_direction_0x235_235_);
  std::swap(esp_advanced_0x234_234_, other->esp_advanced_0x234_234_);
  std::swap(eps_advanced_0x176_176_, other->eps_advanced_0x176_176_);
  std::swap(esp_whlpulse_0x236_236_, other->esp_whlpulse_0x236_236_);
  std::swap(ipm_rightline_0x490_490_, other->ipm_rightline_0x490_490_);
  std::swap(sas_sensor_0x175_175_, other->sas_sensor_0x175_175_);
  std::swap(gw_body_0x321_321_, other->gw_body_0x321_321_);
  std::swap(ipm_leftline_0x278_278_, other->ipm_leftline_0x278_278_);
  std::swap(gw_ems_engstatus_0x142_142_, other->gw_ems_engstatus_0x142_142_);
  std::swap(gw_tbox_location_0x580_580_, other->gw_tbox_location_0x580_580_);
  std::swap(srs_0x350_350_, other->srs_0x350_350_);
  std::swap(ipm_0x245_245_, other->ipm_0x245_245_);
  std::swap(gw_ems_tqwhl_0x111_111_, other->gw_ems_tqwhl_0x111_111_);
  std::swap(gw_tcu_gearinfo_0x123_123_, other->gw_tcu_gearinfo_0x123_123_);
  std::swap(esp_pressure_0x241_241_, other->esp_pressure_0x241_241_);
  std::swap(esp_status_0x243_243_, other->esp_status_0x243_243_);
  std::swap(esp_axay_0x242_242_, other->esp_axay_0x242_242_);
  std::swap(gw_swm_mrr_0x31b_31b_, other->gw_swm_mrr_0x31b_31b_);
  std::swap(gw_swm_body_0x31a_31a_, other->gw_swm_body_0x31a_31a_);
  std::swap(gw_ems_tq_0x101_101_, other->gw_ems_tq_0x101_101_);
  std::swap(esp_vlc_0x223_223_, other->esp_vlc_0x223_223_);
  std::swap(gw_ems_whltq_0x107_107_, other->gw_ems_whltq_0x107_107_);
  std::swap(abs_sts_0x221_221_, other->abs_sts_0x221_221_);
  std::swap(mrr_frobj_0x480_480_, other->mrr_frobj_0x480_480_);
  std::swap(mrr_0x246_246_, other->mrr_0x246_246_);
  std::swap(gw_mp5_nav_0x533_533_, other->gw_mp5_nav_0x533_533_);
  std::swap(gw_mp5_0x530_530_, other->gw_mp5_0x530_530_);
  std::swap(mrr_frobj_0x279_279_, other->mrr_frobj_0x279_279_);
  std::swap(gw_ic_0x510_510_, other->gw_ic_0x510_510_);
  std::swap(abs_whlspd_0x211_211_, other->abs_whlspd_0x211_211_);
  std::swap(esp_tq_0x217_217_, other->esp_tq_0x217_217_);
  std::swap(esp_rpmf_0x213_213_, other->esp_rpmf_0x213_213_);
  std::swap(gw_ic_time_0x581_581_, other->gw_ic_time_0x581_581_);
  std::swap(afs_0x5a0_5a0_, other->afs_0x5a0_5a0_);
  std::swap(sod_nm_0x440_440_, other->sod_nm_0x440_440_);
  std::swap(gw_nm_0x460_460_, other->gw_nm_0x460_460_);
  std::swap(eps_0x260_260_, other->eps_0x260_260_);
  std::swap(sod_0x275_275_, other->sod_0x275_275_);
  std::swap(gw_tpms_tire_0x361_361_, other->gw_tpms_tire_0x361_361_);
  std::swap(ins_datainfo_506_, other->ins_datainfo_506_);
  std::swap(ins_std_507_, other->ins_std_507_);
  std::swap(ins_latitudelongitude_504_, other->ins_latitudelongitude_504_);
  std::swap(ins_speed_505_, other->ins_speed_505_);
  std::swap(ins_headingpitchroll_502_, other->ins_headingpitchroll_502_);
  std::swap(ins_heightandtime_503_, other->ins_heightandtime_503_);
  std::swap(ins_gyro_501_, other->ins_gyro_501_);
  std::swap(ins_acc_500_, other->ins_acc_500_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Cx75::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fcx75_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Cx75

// optional .jmc_auto.canbus.Gw_ems_sts_0x151_151 gw_ems_sts_0x151_151 = 1;
bool Cx75::has_gw_ems_sts_0x151_151() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Cx75::set_has_gw_ems_sts_0x151_151() {
  _has_bits_[0] |= 0x00000001u;
}
void Cx75::clear_has_gw_ems_sts_0x151_151() {
  _has_bits_[0] &= ~0x00000001u;
}
void Cx75::clear_gw_ems_sts_0x151_151() {
  if (gw_ems_sts_0x151_151_ != NULL) gw_ems_sts_0x151_151_->::jmc_auto::canbus::Gw_ems_sts_0x151_151::Clear();
  clear_has_gw_ems_sts_0x151_151();
}
const ::jmc_auto::canbus::Gw_ems_sts_0x151_151& Cx75::gw_ems_sts_0x151_151() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_ems_sts_0x151_151)
  return gw_ems_sts_0x151_151_ != NULL ? *gw_ems_sts_0x151_151_
                         : *::jmc_auto::canbus::Gw_ems_sts_0x151_151::internal_default_instance();
}
::jmc_auto::canbus::Gw_ems_sts_0x151_151* Cx75::mutable_gw_ems_sts_0x151_151() {
  set_has_gw_ems_sts_0x151_151();
  if (gw_ems_sts_0x151_151_ == NULL) {
    gw_ems_sts_0x151_151_ = new ::jmc_auto::canbus::Gw_ems_sts_0x151_151;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_ems_sts_0x151_151)
  return gw_ems_sts_0x151_151_;
}
::jmc_auto::canbus::Gw_ems_sts_0x151_151* Cx75::release_gw_ems_sts_0x151_151() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_ems_sts_0x151_151)
  clear_has_gw_ems_sts_0x151_151();
  ::jmc_auto::canbus::Gw_ems_sts_0x151_151* temp = gw_ems_sts_0x151_151_;
  gw_ems_sts_0x151_151_ = NULL;
  return temp;
}
void Cx75::set_allocated_gw_ems_sts_0x151_151(::jmc_auto::canbus::Gw_ems_sts_0x151_151* gw_ems_sts_0x151_151) {
  delete gw_ems_sts_0x151_151_;
  gw_ems_sts_0x151_151_ = gw_ems_sts_0x151_151;
  if (gw_ems_sts_0x151_151) {
    set_has_gw_ems_sts_0x151_151();
  } else {
    clear_has_gw_ems_sts_0x151_151();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_ems_sts_0x151_151)
}

// optional .jmc_auto.canbus.Esp_raw_0x212_212 esp_raw_0x212_212 = 2;
bool Cx75::has_esp_raw_0x212_212() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Cx75::set_has_esp_raw_0x212_212() {
  _has_bits_[0] |= 0x00000002u;
}
void Cx75::clear_has_esp_raw_0x212_212() {
  _has_bits_[0] &= ~0x00000002u;
}
void Cx75::clear_esp_raw_0x212_212() {
  if (esp_raw_0x212_212_ != NULL) esp_raw_0x212_212_->::jmc_auto::canbus::Esp_raw_0x212_212::Clear();
  clear_has_esp_raw_0x212_212();
}
const ::jmc_auto::canbus::Esp_raw_0x212_212& Cx75::esp_raw_0x212_212() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_raw_0x212_212)
  return esp_raw_0x212_212_ != NULL ? *esp_raw_0x212_212_
                         : *::jmc_auto::canbus::Esp_raw_0x212_212::internal_default_instance();
}
::jmc_auto::canbus::Esp_raw_0x212_212* Cx75::mutable_esp_raw_0x212_212() {
  set_has_esp_raw_0x212_212();
  if (esp_raw_0x212_212_ == NULL) {
    esp_raw_0x212_212_ = new ::jmc_auto::canbus::Esp_raw_0x212_212;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_raw_0x212_212)
  return esp_raw_0x212_212_;
}
::jmc_auto::canbus::Esp_raw_0x212_212* Cx75::release_esp_raw_0x212_212() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_raw_0x212_212)
  clear_has_esp_raw_0x212_212();
  ::jmc_auto::canbus::Esp_raw_0x212_212* temp = esp_raw_0x212_212_;
  esp_raw_0x212_212_ = NULL;
  return temp;
}
void Cx75::set_allocated_esp_raw_0x212_212(::jmc_auto::canbus::Esp_raw_0x212_212* esp_raw_0x212_212) {
  delete esp_raw_0x212_212_;
  esp_raw_0x212_212_ = esp_raw_0x212_212;
  if (esp_raw_0x212_212) {
    set_has_esp_raw_0x212_212();
  } else {
    clear_has_esp_raw_0x212_212();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_raw_0x212_212)
}

// optional .jmc_auto.canbus.Gw_bcm_door_0x310_310 gw_bcm_door_0x310_310 = 3;
bool Cx75::has_gw_bcm_door_0x310_310() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Cx75::set_has_gw_bcm_door_0x310_310() {
  _has_bits_[0] |= 0x00000004u;
}
void Cx75::clear_has_gw_bcm_door_0x310_310() {
  _has_bits_[0] &= ~0x00000004u;
}
void Cx75::clear_gw_bcm_door_0x310_310() {
  if (gw_bcm_door_0x310_310_ != NULL) gw_bcm_door_0x310_310_->::jmc_auto::canbus::Gw_bcm_door_0x310_310::Clear();
  clear_has_gw_bcm_door_0x310_310();
}
const ::jmc_auto::canbus::Gw_bcm_door_0x310_310& Cx75::gw_bcm_door_0x310_310() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_bcm_door_0x310_310)
  return gw_bcm_door_0x310_310_ != NULL ? *gw_bcm_door_0x310_310_
                         : *::jmc_auto::canbus::Gw_bcm_door_0x310_310::internal_default_instance();
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310* Cx75::mutable_gw_bcm_door_0x310_310() {
  set_has_gw_bcm_door_0x310_310();
  if (gw_bcm_door_0x310_310_ == NULL) {
    gw_bcm_door_0x310_310_ = new ::jmc_auto::canbus::Gw_bcm_door_0x310_310;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_bcm_door_0x310_310)
  return gw_bcm_door_0x310_310_;
}
::jmc_auto::canbus::Gw_bcm_door_0x310_310* Cx75::release_gw_bcm_door_0x310_310() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_bcm_door_0x310_310)
  clear_has_gw_bcm_door_0x310_310();
  ::jmc_auto::canbus::Gw_bcm_door_0x310_310* temp = gw_bcm_door_0x310_310_;
  gw_bcm_door_0x310_310_ = NULL;
  return temp;
}
void Cx75::set_allocated_gw_bcm_door_0x310_310(::jmc_auto::canbus::Gw_bcm_door_0x310_310* gw_bcm_door_0x310_310) {
  delete gw_bcm_door_0x310_310_;
  gw_bcm_door_0x310_310_ = gw_bcm_door_0x310_310;
  if (gw_bcm_door_0x310_310) {
    set_has_gw_bcm_door_0x310_310();
  } else {
    clear_has_gw_bcm_door_0x310_310();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_bcm_door_0x310_310)
}

// optional .jmc_auto.canbus.Pam_0x270_270 pam_0x270_270 = 4;
bool Cx75::has_pam_0x270_270() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Cx75::set_has_pam_0x270_270() {
  _has_bits_[0] |= 0x00000008u;
}
void Cx75::clear_has_pam_0x270_270() {
  _has_bits_[0] &= ~0x00000008u;
}
void Cx75::clear_pam_0x270_270() {
  if (pam_0x270_270_ != NULL) pam_0x270_270_->::jmc_auto::canbus::Pam_0x270_270::Clear();
  clear_has_pam_0x270_270();
}
const ::jmc_auto::canbus::Pam_0x270_270& Cx75::pam_0x270_270() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.pam_0x270_270)
  return pam_0x270_270_ != NULL ? *pam_0x270_270_
                         : *::jmc_auto::canbus::Pam_0x270_270::internal_default_instance();
}
::jmc_auto::canbus::Pam_0x270_270* Cx75::mutable_pam_0x270_270() {
  set_has_pam_0x270_270();
  if (pam_0x270_270_ == NULL) {
    pam_0x270_270_ = new ::jmc_auto::canbus::Pam_0x270_270;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.pam_0x270_270)
  return pam_0x270_270_;
}
::jmc_auto::canbus::Pam_0x270_270* Cx75::release_pam_0x270_270() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.pam_0x270_270)
  clear_has_pam_0x270_270();
  ::jmc_auto::canbus::Pam_0x270_270* temp = pam_0x270_270_;
  pam_0x270_270_ = NULL;
  return temp;
}
void Cx75::set_allocated_pam_0x270_270(::jmc_auto::canbus::Pam_0x270_270* pam_0x270_270) {
  delete pam_0x270_270_;
  pam_0x270_270_ = pam_0x270_270;
  if (pam_0x270_270) {
    set_has_pam_0x270_270();
  } else {
    clear_has_pam_0x270_270();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.pam_0x270_270)
}

// optional .jmc_auto.canbus.Pam_0x271_271 pam_0x271_271 = 5;
bool Cx75::has_pam_0x271_271() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Cx75::set_has_pam_0x271_271() {
  _has_bits_[0] |= 0x00000010u;
}
void Cx75::clear_has_pam_0x271_271() {
  _has_bits_[0] &= ~0x00000010u;
}
void Cx75::clear_pam_0x271_271() {
  if (pam_0x271_271_ != NULL) pam_0x271_271_->::jmc_auto::canbus::Pam_0x271_271::Clear();
  clear_has_pam_0x271_271();
}
const ::jmc_auto::canbus::Pam_0x271_271& Cx75::pam_0x271_271() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.pam_0x271_271)
  return pam_0x271_271_ != NULL ? *pam_0x271_271_
                         : *::jmc_auto::canbus::Pam_0x271_271::internal_default_instance();
}
::jmc_auto::canbus::Pam_0x271_271* Cx75::mutable_pam_0x271_271() {
  set_has_pam_0x271_271();
  if (pam_0x271_271_ == NULL) {
    pam_0x271_271_ = new ::jmc_auto::canbus::Pam_0x271_271;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.pam_0x271_271)
  return pam_0x271_271_;
}
::jmc_auto::canbus::Pam_0x271_271* Cx75::release_pam_0x271_271() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.pam_0x271_271)
  clear_has_pam_0x271_271();
  ::jmc_auto::canbus::Pam_0x271_271* temp = pam_0x271_271_;
  pam_0x271_271_ = NULL;
  return temp;
}
void Cx75::set_allocated_pam_0x271_271(::jmc_auto::canbus::Pam_0x271_271* pam_0x271_271) {
  delete pam_0x271_271_;
  pam_0x271_271_ = pam_0x271_271;
  if (pam_0x271_271) {
    set_has_pam_0x271_271();
  } else {
    clear_has_pam_0x271_271();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.pam_0x271_271)
}

// optional .jmc_auto.canbus.Pam_0x272_272 pam_0x272_272 = 6;
bool Cx75::has_pam_0x272_272() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Cx75::set_has_pam_0x272_272() {
  _has_bits_[0] |= 0x00000020u;
}
void Cx75::clear_has_pam_0x272_272() {
  _has_bits_[0] &= ~0x00000020u;
}
void Cx75::clear_pam_0x272_272() {
  if (pam_0x272_272_ != NULL) pam_0x272_272_->::jmc_auto::canbus::Pam_0x272_272::Clear();
  clear_has_pam_0x272_272();
}
const ::jmc_auto::canbus::Pam_0x272_272& Cx75::pam_0x272_272() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.pam_0x272_272)
  return pam_0x272_272_ != NULL ? *pam_0x272_272_
                         : *::jmc_auto::canbus::Pam_0x272_272::internal_default_instance();
}
::jmc_auto::canbus::Pam_0x272_272* Cx75::mutable_pam_0x272_272() {
  set_has_pam_0x272_272();
  if (pam_0x272_272_ == NULL) {
    pam_0x272_272_ = new ::jmc_auto::canbus::Pam_0x272_272;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.pam_0x272_272)
  return pam_0x272_272_;
}
::jmc_auto::canbus::Pam_0x272_272* Cx75::release_pam_0x272_272() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.pam_0x272_272)
  clear_has_pam_0x272_272();
  ::jmc_auto::canbus::Pam_0x272_272* temp = pam_0x272_272_;
  pam_0x272_272_ = NULL;
  return temp;
}
void Cx75::set_allocated_pam_0x272_272(::jmc_auto::canbus::Pam_0x272_272* pam_0x272_272) {
  delete pam_0x272_272_;
  pam_0x272_272_ = pam_0x272_272;
  if (pam_0x272_272) {
    set_has_pam_0x272_272();
  } else {
    clear_has_pam_0x272_272();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.pam_0x272_272)
}

// optional .jmc_auto.canbus.Mrr_0x238_238 mrr_0x238_238 = 7;
bool Cx75::has_mrr_0x238_238() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Cx75::set_has_mrr_0x238_238() {
  _has_bits_[0] |= 0x00000040u;
}
void Cx75::clear_has_mrr_0x238_238() {
  _has_bits_[0] &= ~0x00000040u;
}
void Cx75::clear_mrr_0x238_238() {
  if (mrr_0x238_238_ != NULL) mrr_0x238_238_->::jmc_auto::canbus::Mrr_0x238_238::Clear();
  clear_has_mrr_0x238_238();
}
const ::jmc_auto::canbus::Mrr_0x238_238& Cx75::mrr_0x238_238() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.mrr_0x238_238)
  return mrr_0x238_238_ != NULL ? *mrr_0x238_238_
                         : *::jmc_auto::canbus::Mrr_0x238_238::internal_default_instance();
}
::jmc_auto::canbus::Mrr_0x238_238* Cx75::mutable_mrr_0x238_238() {
  set_has_mrr_0x238_238();
  if (mrr_0x238_238_ == NULL) {
    mrr_0x238_238_ = new ::jmc_auto::canbus::Mrr_0x238_238;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.mrr_0x238_238)
  return mrr_0x238_238_;
}
::jmc_auto::canbus::Mrr_0x238_238* Cx75::release_mrr_0x238_238() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.mrr_0x238_238)
  clear_has_mrr_0x238_238();
  ::jmc_auto::canbus::Mrr_0x238_238* temp = mrr_0x238_238_;
  mrr_0x238_238_ = NULL;
  return temp;
}
void Cx75::set_allocated_mrr_0x238_238(::jmc_auto::canbus::Mrr_0x238_238* mrr_0x238_238) {
  delete mrr_0x238_238_;
  mrr_0x238_238_ = mrr_0x238_238;
  if (mrr_0x238_238) {
    set_has_mrr_0x238_238();
  } else {
    clear_has_mrr_0x238_238();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.mrr_0x238_238)
}

// optional .jmc_auto.canbus.Mrr_0x239_239 mrr_0x239_239 = 8;
bool Cx75::has_mrr_0x239_239() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Cx75::set_has_mrr_0x239_239() {
  _has_bits_[0] |= 0x00000080u;
}
void Cx75::clear_has_mrr_0x239_239() {
  _has_bits_[0] &= ~0x00000080u;
}
void Cx75::clear_mrr_0x239_239() {
  if (mrr_0x239_239_ != NULL) mrr_0x239_239_->::jmc_auto::canbus::Mrr_0x239_239::Clear();
  clear_has_mrr_0x239_239();
}
const ::jmc_auto::canbus::Mrr_0x239_239& Cx75::mrr_0x239_239() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.mrr_0x239_239)
  return mrr_0x239_239_ != NULL ? *mrr_0x239_239_
                         : *::jmc_auto::canbus::Mrr_0x239_239::internal_default_instance();
}
::jmc_auto::canbus::Mrr_0x239_239* Cx75::mutable_mrr_0x239_239() {
  set_has_mrr_0x239_239();
  if (mrr_0x239_239_ == NULL) {
    mrr_0x239_239_ = new ::jmc_auto::canbus::Mrr_0x239_239;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.mrr_0x239_239)
  return mrr_0x239_239_;
}
::jmc_auto::canbus::Mrr_0x239_239* Cx75::release_mrr_0x239_239() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.mrr_0x239_239)
  clear_has_mrr_0x239_239();
  ::jmc_auto::canbus::Mrr_0x239_239* temp = mrr_0x239_239_;
  mrr_0x239_239_ = NULL;
  return temp;
}
void Cx75::set_allocated_mrr_0x239_239(::jmc_auto::canbus::Mrr_0x239_239* mrr_0x239_239) {
  delete mrr_0x239_239_;
  mrr_0x239_239_ = mrr_0x239_239;
  if (mrr_0x239_239) {
    set_has_mrr_0x239_239();
  } else {
    clear_has_mrr_0x239_239();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.mrr_0x239_239)
}

// optional .jmc_auto.canbus.Esp_direction_0x235_235 esp_direction_0x235_235 = 9;
bool Cx75::has_esp_direction_0x235_235() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Cx75::set_has_esp_direction_0x235_235() {
  _has_bits_[0] |= 0x00000100u;
}
void Cx75::clear_has_esp_direction_0x235_235() {
  _has_bits_[0] &= ~0x00000100u;
}
void Cx75::clear_esp_direction_0x235_235() {
  if (esp_direction_0x235_235_ != NULL) esp_direction_0x235_235_->::jmc_auto::canbus::Esp_direction_0x235_235::Clear();
  clear_has_esp_direction_0x235_235();
}
const ::jmc_auto::canbus::Esp_direction_0x235_235& Cx75::esp_direction_0x235_235() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_direction_0x235_235)
  return esp_direction_0x235_235_ != NULL ? *esp_direction_0x235_235_
                         : *::jmc_auto::canbus::Esp_direction_0x235_235::internal_default_instance();
}
::jmc_auto::canbus::Esp_direction_0x235_235* Cx75::mutable_esp_direction_0x235_235() {
  set_has_esp_direction_0x235_235();
  if (esp_direction_0x235_235_ == NULL) {
    esp_direction_0x235_235_ = new ::jmc_auto::canbus::Esp_direction_0x235_235;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_direction_0x235_235)
  return esp_direction_0x235_235_;
}
::jmc_auto::canbus::Esp_direction_0x235_235* Cx75::release_esp_direction_0x235_235() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_direction_0x235_235)
  clear_has_esp_direction_0x235_235();
  ::jmc_auto::canbus::Esp_direction_0x235_235* temp = esp_direction_0x235_235_;
  esp_direction_0x235_235_ = NULL;
  return temp;
}
void Cx75::set_allocated_esp_direction_0x235_235(::jmc_auto::canbus::Esp_direction_0x235_235* esp_direction_0x235_235) {
  delete esp_direction_0x235_235_;
  esp_direction_0x235_235_ = esp_direction_0x235_235;
  if (esp_direction_0x235_235) {
    set_has_esp_direction_0x235_235();
  } else {
    clear_has_esp_direction_0x235_235();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_direction_0x235_235)
}

// optional .jmc_auto.canbus.Esp_advanced_0x234_234 esp_advanced_0x234_234 = 10;
bool Cx75::has_esp_advanced_0x234_234() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Cx75::set_has_esp_advanced_0x234_234() {
  _has_bits_[0] |= 0x00000200u;
}
void Cx75::clear_has_esp_advanced_0x234_234() {
  _has_bits_[0] &= ~0x00000200u;
}
void Cx75::clear_esp_advanced_0x234_234() {
  if (esp_advanced_0x234_234_ != NULL) esp_advanced_0x234_234_->::jmc_auto::canbus::Esp_advanced_0x234_234::Clear();
  clear_has_esp_advanced_0x234_234();
}
const ::jmc_auto::canbus::Esp_advanced_0x234_234& Cx75::esp_advanced_0x234_234() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_advanced_0x234_234)
  return esp_advanced_0x234_234_ != NULL ? *esp_advanced_0x234_234_
                         : *::jmc_auto::canbus::Esp_advanced_0x234_234::internal_default_instance();
}
::jmc_auto::canbus::Esp_advanced_0x234_234* Cx75::mutable_esp_advanced_0x234_234() {
  set_has_esp_advanced_0x234_234();
  if (esp_advanced_0x234_234_ == NULL) {
    esp_advanced_0x234_234_ = new ::jmc_auto::canbus::Esp_advanced_0x234_234;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_advanced_0x234_234)
  return esp_advanced_0x234_234_;
}
::jmc_auto::canbus::Esp_advanced_0x234_234* Cx75::release_esp_advanced_0x234_234() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_advanced_0x234_234)
  clear_has_esp_advanced_0x234_234();
  ::jmc_auto::canbus::Esp_advanced_0x234_234* temp = esp_advanced_0x234_234_;
  esp_advanced_0x234_234_ = NULL;
  return temp;
}
void Cx75::set_allocated_esp_advanced_0x234_234(::jmc_auto::canbus::Esp_advanced_0x234_234* esp_advanced_0x234_234) {
  delete esp_advanced_0x234_234_;
  esp_advanced_0x234_234_ = esp_advanced_0x234_234;
  if (esp_advanced_0x234_234) {
    set_has_esp_advanced_0x234_234();
  } else {
    clear_has_esp_advanced_0x234_234();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_advanced_0x234_234)
}

// optional .jmc_auto.canbus.Eps_advanced_0x176_176 eps_advanced_0x176_176 = 11;
bool Cx75::has_eps_advanced_0x176_176() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Cx75::set_has_eps_advanced_0x176_176() {
  _has_bits_[0] |= 0x00000400u;
}
void Cx75::clear_has_eps_advanced_0x176_176() {
  _has_bits_[0] &= ~0x00000400u;
}
void Cx75::clear_eps_advanced_0x176_176() {
  if (eps_advanced_0x176_176_ != NULL) eps_advanced_0x176_176_->::jmc_auto::canbus::Eps_advanced_0x176_176::Clear();
  clear_has_eps_advanced_0x176_176();
}
const ::jmc_auto::canbus::Eps_advanced_0x176_176& Cx75::eps_advanced_0x176_176() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.eps_advanced_0x176_176)
  return eps_advanced_0x176_176_ != NULL ? *eps_advanced_0x176_176_
                         : *::jmc_auto::canbus::Eps_advanced_0x176_176::internal_default_instance();
}
::jmc_auto::canbus::Eps_advanced_0x176_176* Cx75::mutable_eps_advanced_0x176_176() {
  set_has_eps_advanced_0x176_176();
  if (eps_advanced_0x176_176_ == NULL) {
    eps_advanced_0x176_176_ = new ::jmc_auto::canbus::Eps_advanced_0x176_176;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.eps_advanced_0x176_176)
  return eps_advanced_0x176_176_;
}
::jmc_auto::canbus::Eps_advanced_0x176_176* Cx75::release_eps_advanced_0x176_176() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.eps_advanced_0x176_176)
  clear_has_eps_advanced_0x176_176();
  ::jmc_auto::canbus::Eps_advanced_0x176_176* temp = eps_advanced_0x176_176_;
  eps_advanced_0x176_176_ = NULL;
  return temp;
}
void Cx75::set_allocated_eps_advanced_0x176_176(::jmc_auto::canbus::Eps_advanced_0x176_176* eps_advanced_0x176_176) {
  delete eps_advanced_0x176_176_;
  eps_advanced_0x176_176_ = eps_advanced_0x176_176;
  if (eps_advanced_0x176_176) {
    set_has_eps_advanced_0x176_176();
  } else {
    clear_has_eps_advanced_0x176_176();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.eps_advanced_0x176_176)
}

// optional .jmc_auto.canbus.Esp_whlpulse_0x236_236 esp_whlpulse_0x236_236 = 12;
bool Cx75::has_esp_whlpulse_0x236_236() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Cx75::set_has_esp_whlpulse_0x236_236() {
  _has_bits_[0] |= 0x00000800u;
}
void Cx75::clear_has_esp_whlpulse_0x236_236() {
  _has_bits_[0] &= ~0x00000800u;
}
void Cx75::clear_esp_whlpulse_0x236_236() {
  if (esp_whlpulse_0x236_236_ != NULL) esp_whlpulse_0x236_236_->::jmc_auto::canbus::Esp_whlpulse_0x236_236::Clear();
  clear_has_esp_whlpulse_0x236_236();
}
const ::jmc_auto::canbus::Esp_whlpulse_0x236_236& Cx75::esp_whlpulse_0x236_236() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_whlpulse_0x236_236)
  return esp_whlpulse_0x236_236_ != NULL ? *esp_whlpulse_0x236_236_
                         : *::jmc_auto::canbus::Esp_whlpulse_0x236_236::internal_default_instance();
}
::jmc_auto::canbus::Esp_whlpulse_0x236_236* Cx75::mutable_esp_whlpulse_0x236_236() {
  set_has_esp_whlpulse_0x236_236();
  if (esp_whlpulse_0x236_236_ == NULL) {
    esp_whlpulse_0x236_236_ = new ::jmc_auto::canbus::Esp_whlpulse_0x236_236;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_whlpulse_0x236_236)
  return esp_whlpulse_0x236_236_;
}
::jmc_auto::canbus::Esp_whlpulse_0x236_236* Cx75::release_esp_whlpulse_0x236_236() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_whlpulse_0x236_236)
  clear_has_esp_whlpulse_0x236_236();
  ::jmc_auto::canbus::Esp_whlpulse_0x236_236* temp = esp_whlpulse_0x236_236_;
  esp_whlpulse_0x236_236_ = NULL;
  return temp;
}
void Cx75::set_allocated_esp_whlpulse_0x236_236(::jmc_auto::canbus::Esp_whlpulse_0x236_236* esp_whlpulse_0x236_236) {
  delete esp_whlpulse_0x236_236_;
  esp_whlpulse_0x236_236_ = esp_whlpulse_0x236_236;
  if (esp_whlpulse_0x236_236) {
    set_has_esp_whlpulse_0x236_236();
  } else {
    clear_has_esp_whlpulse_0x236_236();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_whlpulse_0x236_236)
}

// optional .jmc_auto.canbus.Ipm_rightline_0x490_490 ipm_rightline_0x490_490 = 13;
bool Cx75::has_ipm_rightline_0x490_490() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Cx75::set_has_ipm_rightline_0x490_490() {
  _has_bits_[0] |= 0x00001000u;
}
void Cx75::clear_has_ipm_rightline_0x490_490() {
  _has_bits_[0] &= ~0x00001000u;
}
void Cx75::clear_ipm_rightline_0x490_490() {
  if (ipm_rightline_0x490_490_ != NULL) ipm_rightline_0x490_490_->::jmc_auto::canbus::Ipm_rightline_0x490_490::Clear();
  clear_has_ipm_rightline_0x490_490();
}
const ::jmc_auto::canbus::Ipm_rightline_0x490_490& Cx75::ipm_rightline_0x490_490() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ipm_rightline_0x490_490)
  return ipm_rightline_0x490_490_ != NULL ? *ipm_rightline_0x490_490_
                         : *::jmc_auto::canbus::Ipm_rightline_0x490_490::internal_default_instance();
}
::jmc_auto::canbus::Ipm_rightline_0x490_490* Cx75::mutable_ipm_rightline_0x490_490() {
  set_has_ipm_rightline_0x490_490();
  if (ipm_rightline_0x490_490_ == NULL) {
    ipm_rightline_0x490_490_ = new ::jmc_auto::canbus::Ipm_rightline_0x490_490;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ipm_rightline_0x490_490)
  return ipm_rightline_0x490_490_;
}
::jmc_auto::canbus::Ipm_rightline_0x490_490* Cx75::release_ipm_rightline_0x490_490() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ipm_rightline_0x490_490)
  clear_has_ipm_rightline_0x490_490();
  ::jmc_auto::canbus::Ipm_rightline_0x490_490* temp = ipm_rightline_0x490_490_;
  ipm_rightline_0x490_490_ = NULL;
  return temp;
}
void Cx75::set_allocated_ipm_rightline_0x490_490(::jmc_auto::canbus::Ipm_rightline_0x490_490* ipm_rightline_0x490_490) {
  delete ipm_rightline_0x490_490_;
  ipm_rightline_0x490_490_ = ipm_rightline_0x490_490;
  if (ipm_rightline_0x490_490) {
    set_has_ipm_rightline_0x490_490();
  } else {
    clear_has_ipm_rightline_0x490_490();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ipm_rightline_0x490_490)
}

// optional .jmc_auto.canbus.Sas_sensor_0x175_175 sas_sensor_0x175_175 = 14;
bool Cx75::has_sas_sensor_0x175_175() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Cx75::set_has_sas_sensor_0x175_175() {
  _has_bits_[0] |= 0x00002000u;
}
void Cx75::clear_has_sas_sensor_0x175_175() {
  _has_bits_[0] &= ~0x00002000u;
}
void Cx75::clear_sas_sensor_0x175_175() {
  if (sas_sensor_0x175_175_ != NULL) sas_sensor_0x175_175_->::jmc_auto::canbus::Sas_sensor_0x175_175::Clear();
  clear_has_sas_sensor_0x175_175();
}
const ::jmc_auto::canbus::Sas_sensor_0x175_175& Cx75::sas_sensor_0x175_175() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.sas_sensor_0x175_175)
  return sas_sensor_0x175_175_ != NULL ? *sas_sensor_0x175_175_
                         : *::jmc_auto::canbus::Sas_sensor_0x175_175::internal_default_instance();
}
::jmc_auto::canbus::Sas_sensor_0x175_175* Cx75::mutable_sas_sensor_0x175_175() {
  set_has_sas_sensor_0x175_175();
  if (sas_sensor_0x175_175_ == NULL) {
    sas_sensor_0x175_175_ = new ::jmc_auto::canbus::Sas_sensor_0x175_175;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.sas_sensor_0x175_175)
  return sas_sensor_0x175_175_;
}
::jmc_auto::canbus::Sas_sensor_0x175_175* Cx75::release_sas_sensor_0x175_175() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.sas_sensor_0x175_175)
  clear_has_sas_sensor_0x175_175();
  ::jmc_auto::canbus::Sas_sensor_0x175_175* temp = sas_sensor_0x175_175_;
  sas_sensor_0x175_175_ = NULL;
  return temp;
}
void Cx75::set_allocated_sas_sensor_0x175_175(::jmc_auto::canbus::Sas_sensor_0x175_175* sas_sensor_0x175_175) {
  delete sas_sensor_0x175_175_;
  sas_sensor_0x175_175_ = sas_sensor_0x175_175;
  if (sas_sensor_0x175_175) {
    set_has_sas_sensor_0x175_175();
  } else {
    clear_has_sas_sensor_0x175_175();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.sas_sensor_0x175_175)
}

// optional .jmc_auto.canbus.Gw_body_0x321_321 gw_body_0x321_321 = 15;
bool Cx75::has_gw_body_0x321_321() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Cx75::set_has_gw_body_0x321_321() {
  _has_bits_[0] |= 0x00004000u;
}
void Cx75::clear_has_gw_body_0x321_321() {
  _has_bits_[0] &= ~0x00004000u;
}
void Cx75::clear_gw_body_0x321_321() {
  if (gw_body_0x321_321_ != NULL) gw_body_0x321_321_->::jmc_auto::canbus::Gw_body_0x321_321::Clear();
  clear_has_gw_body_0x321_321();
}
const ::jmc_auto::canbus::Gw_body_0x321_321& Cx75::gw_body_0x321_321() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_body_0x321_321)
  return gw_body_0x321_321_ != NULL ? *gw_body_0x321_321_
                         : *::jmc_auto::canbus::Gw_body_0x321_321::internal_default_instance();
}
::jmc_auto::canbus::Gw_body_0x321_321* Cx75::mutable_gw_body_0x321_321() {
  set_has_gw_body_0x321_321();
  if (gw_body_0x321_321_ == NULL) {
    gw_body_0x321_321_ = new ::jmc_auto::canbus::Gw_body_0x321_321;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_body_0x321_321)
  return gw_body_0x321_321_;
}
::jmc_auto::canbus::Gw_body_0x321_321* Cx75::release_gw_body_0x321_321() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_body_0x321_321)
  clear_has_gw_body_0x321_321();
  ::jmc_auto::canbus::Gw_body_0x321_321* temp = gw_body_0x321_321_;
  gw_body_0x321_321_ = NULL;
  return temp;
}
void Cx75::set_allocated_gw_body_0x321_321(::jmc_auto::canbus::Gw_body_0x321_321* gw_body_0x321_321) {
  delete gw_body_0x321_321_;
  gw_body_0x321_321_ = gw_body_0x321_321;
  if (gw_body_0x321_321) {
    set_has_gw_body_0x321_321();
  } else {
    clear_has_gw_body_0x321_321();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_body_0x321_321)
}

// optional .jmc_auto.canbus.Ipm_leftline_0x278_278 ipm_leftline_0x278_278 = 16;
bool Cx75::has_ipm_leftline_0x278_278() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Cx75::set_has_ipm_leftline_0x278_278() {
  _has_bits_[0] |= 0x00008000u;
}
void Cx75::clear_has_ipm_leftline_0x278_278() {
  _has_bits_[0] &= ~0x00008000u;
}
void Cx75::clear_ipm_leftline_0x278_278() {
  if (ipm_leftline_0x278_278_ != NULL) ipm_leftline_0x278_278_->::jmc_auto::canbus::Ipm_leftline_0x278_278::Clear();
  clear_has_ipm_leftline_0x278_278();
}
const ::jmc_auto::canbus::Ipm_leftline_0x278_278& Cx75::ipm_leftline_0x278_278() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ipm_leftline_0x278_278)
  return ipm_leftline_0x278_278_ != NULL ? *ipm_leftline_0x278_278_
                         : *::jmc_auto::canbus::Ipm_leftline_0x278_278::internal_default_instance();
}
::jmc_auto::canbus::Ipm_leftline_0x278_278* Cx75::mutable_ipm_leftline_0x278_278() {
  set_has_ipm_leftline_0x278_278();
  if (ipm_leftline_0x278_278_ == NULL) {
    ipm_leftline_0x278_278_ = new ::jmc_auto::canbus::Ipm_leftline_0x278_278;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ipm_leftline_0x278_278)
  return ipm_leftline_0x278_278_;
}
::jmc_auto::canbus::Ipm_leftline_0x278_278* Cx75::release_ipm_leftline_0x278_278() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ipm_leftline_0x278_278)
  clear_has_ipm_leftline_0x278_278();
  ::jmc_auto::canbus::Ipm_leftline_0x278_278* temp = ipm_leftline_0x278_278_;
  ipm_leftline_0x278_278_ = NULL;
  return temp;
}
void Cx75::set_allocated_ipm_leftline_0x278_278(::jmc_auto::canbus::Ipm_leftline_0x278_278* ipm_leftline_0x278_278) {
  delete ipm_leftline_0x278_278_;
  ipm_leftline_0x278_278_ = ipm_leftline_0x278_278;
  if (ipm_leftline_0x278_278) {
    set_has_ipm_leftline_0x278_278();
  } else {
    clear_has_ipm_leftline_0x278_278();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ipm_leftline_0x278_278)
}

// optional .jmc_auto.canbus.Gw_ems_engstatus_0x142_142 gw_ems_engstatus_0x142_142 = 17;
bool Cx75::has_gw_ems_engstatus_0x142_142() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Cx75::set_has_gw_ems_engstatus_0x142_142() {
  _has_bits_[0] |= 0x00010000u;
}
void Cx75::clear_has_gw_ems_engstatus_0x142_142() {
  _has_bits_[0] &= ~0x00010000u;
}
void Cx75::clear_gw_ems_engstatus_0x142_142() {
  if (gw_ems_engstatus_0x142_142_ != NULL) gw_ems_engstatus_0x142_142_->::jmc_auto::canbus::Gw_ems_engstatus_0x142_142::Clear();
  clear_has_gw_ems_engstatus_0x142_142();
}
const ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142& Cx75::gw_ems_engstatus_0x142_142() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_ems_engstatus_0x142_142)
  return gw_ems_engstatus_0x142_142_ != NULL ? *gw_ems_engstatus_0x142_142_
                         : *::jmc_auto::canbus::Gw_ems_engstatus_0x142_142::internal_default_instance();
}
::jmc_auto::canbus::Gw_ems_engstatus_0x142_142* Cx75::mutable_gw_ems_engstatus_0x142_142() {
  set_has_gw_ems_engstatus_0x142_142();
  if (gw_ems_engstatus_0x142_142_ == NULL) {
    gw_ems_engstatus_0x142_142_ = new ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_ems_engstatus_0x142_142)
  return gw_ems_engstatus_0x142_142_;
}
::jmc_auto::canbus::Gw_ems_engstatus_0x142_142* Cx75::release_gw_ems_engstatus_0x142_142() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_ems_engstatus_0x142_142)
  clear_has_gw_ems_engstatus_0x142_142();
  ::jmc_auto::canbus::Gw_ems_engstatus_0x142_142* temp = gw_ems_engstatus_0x142_142_;
  gw_ems_engstatus_0x142_142_ = NULL;
  return temp;
}
void Cx75::set_allocated_gw_ems_engstatus_0x142_142(::jmc_auto::canbus::Gw_ems_engstatus_0x142_142* gw_ems_engstatus_0x142_142) {
  delete gw_ems_engstatus_0x142_142_;
  gw_ems_engstatus_0x142_142_ = gw_ems_engstatus_0x142_142;
  if (gw_ems_engstatus_0x142_142) {
    set_has_gw_ems_engstatus_0x142_142();
  } else {
    clear_has_gw_ems_engstatus_0x142_142();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_ems_engstatus_0x142_142)
}

// optional .jmc_auto.canbus.Gw_tbox_location_0x580_580 gw_tbox_location_0x580_580 = 18;
bool Cx75::has_gw_tbox_location_0x580_580() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Cx75::set_has_gw_tbox_location_0x580_580() {
  _has_bits_[0] |= 0x00020000u;
}
void Cx75::clear_has_gw_tbox_location_0x580_580() {
  _has_bits_[0] &= ~0x00020000u;
}
void Cx75::clear_gw_tbox_location_0x580_580() {
  if (gw_tbox_location_0x580_580_ != NULL) gw_tbox_location_0x580_580_->::jmc_auto::canbus::Gw_tbox_location_0x580_580::Clear();
  clear_has_gw_tbox_location_0x580_580();
}
const ::jmc_auto::canbus::Gw_tbox_location_0x580_580& Cx75::gw_tbox_location_0x580_580() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_tbox_location_0x580_580)
  return gw_tbox_location_0x580_580_ != NULL ? *gw_tbox_location_0x580_580_
                         : *::jmc_auto::canbus::Gw_tbox_location_0x580_580::internal_default_instance();
}
::jmc_auto::canbus::Gw_tbox_location_0x580_580* Cx75::mutable_gw_tbox_location_0x580_580() {
  set_has_gw_tbox_location_0x580_580();
  if (gw_tbox_location_0x580_580_ == NULL) {
    gw_tbox_location_0x580_580_ = new ::jmc_auto::canbus::Gw_tbox_location_0x580_580;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_tbox_location_0x580_580)
  return gw_tbox_location_0x580_580_;
}
::jmc_auto::canbus::Gw_tbox_location_0x580_580* Cx75::release_gw_tbox_location_0x580_580() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_tbox_location_0x580_580)
  clear_has_gw_tbox_location_0x580_580();
  ::jmc_auto::canbus::Gw_tbox_location_0x580_580* temp = gw_tbox_location_0x580_580_;
  gw_tbox_location_0x580_580_ = NULL;
  return temp;
}
void Cx75::set_allocated_gw_tbox_location_0x580_580(::jmc_auto::canbus::Gw_tbox_location_0x580_580* gw_tbox_location_0x580_580) {
  delete gw_tbox_location_0x580_580_;
  gw_tbox_location_0x580_580_ = gw_tbox_location_0x580_580;
  if (gw_tbox_location_0x580_580) {
    set_has_gw_tbox_location_0x580_580();
  } else {
    clear_has_gw_tbox_location_0x580_580();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_tbox_location_0x580_580)
}

// optional .jmc_auto.canbus.Srs_0x350_350 srs_0x350_350 = 19;
bool Cx75::has_srs_0x350_350() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Cx75::set_has_srs_0x350_350() {
  _has_bits_[0] |= 0x00040000u;
}
void Cx75::clear_has_srs_0x350_350() {
  _has_bits_[0] &= ~0x00040000u;
}
void Cx75::clear_srs_0x350_350() {
  if (srs_0x350_350_ != NULL) srs_0x350_350_->::jmc_auto::canbus::Srs_0x350_350::Clear();
  clear_has_srs_0x350_350();
}
const ::jmc_auto::canbus::Srs_0x350_350& Cx75::srs_0x350_350() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.srs_0x350_350)
  return srs_0x350_350_ != NULL ? *srs_0x350_350_
                         : *::jmc_auto::canbus::Srs_0x350_350::internal_default_instance();
}
::jmc_auto::canbus::Srs_0x350_350* Cx75::mutable_srs_0x350_350() {
  set_has_srs_0x350_350();
  if (srs_0x350_350_ == NULL) {
    srs_0x350_350_ = new ::jmc_auto::canbus::Srs_0x350_350;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.srs_0x350_350)
  return srs_0x350_350_;
}
::jmc_auto::canbus::Srs_0x350_350* Cx75::release_srs_0x350_350() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.srs_0x350_350)
  clear_has_srs_0x350_350();
  ::jmc_auto::canbus::Srs_0x350_350* temp = srs_0x350_350_;
  srs_0x350_350_ = NULL;
  return temp;
}
void Cx75::set_allocated_srs_0x350_350(::jmc_auto::canbus::Srs_0x350_350* srs_0x350_350) {
  delete srs_0x350_350_;
  srs_0x350_350_ = srs_0x350_350;
  if (srs_0x350_350) {
    set_has_srs_0x350_350();
  } else {
    clear_has_srs_0x350_350();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.srs_0x350_350)
}

// optional .jmc_auto.canbus.Ipm_0x245_245 ipm_0x245_245 = 20;
bool Cx75::has_ipm_0x245_245() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Cx75::set_has_ipm_0x245_245() {
  _has_bits_[0] |= 0x00080000u;
}
void Cx75::clear_has_ipm_0x245_245() {
  _has_bits_[0] &= ~0x00080000u;
}
void Cx75::clear_ipm_0x245_245() {
  if (ipm_0x245_245_ != NULL) ipm_0x245_245_->::jmc_auto::canbus::Ipm_0x245_245::Clear();
  clear_has_ipm_0x245_245();
}
const ::jmc_auto::canbus::Ipm_0x245_245& Cx75::ipm_0x245_245() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ipm_0x245_245)
  return ipm_0x245_245_ != NULL ? *ipm_0x245_245_
                         : *::jmc_auto::canbus::Ipm_0x245_245::internal_default_instance();
}
::jmc_auto::canbus::Ipm_0x245_245* Cx75::mutable_ipm_0x245_245() {
  set_has_ipm_0x245_245();
  if (ipm_0x245_245_ == NULL) {
    ipm_0x245_245_ = new ::jmc_auto::canbus::Ipm_0x245_245;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ipm_0x245_245)
  return ipm_0x245_245_;
}
::jmc_auto::canbus::Ipm_0x245_245* Cx75::release_ipm_0x245_245() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ipm_0x245_245)
  clear_has_ipm_0x245_245();
  ::jmc_auto::canbus::Ipm_0x245_245* temp = ipm_0x245_245_;
  ipm_0x245_245_ = NULL;
  return temp;
}
void Cx75::set_allocated_ipm_0x245_245(::jmc_auto::canbus::Ipm_0x245_245* ipm_0x245_245) {
  delete ipm_0x245_245_;
  ipm_0x245_245_ = ipm_0x245_245;
  if (ipm_0x245_245) {
    set_has_ipm_0x245_245();
  } else {
    clear_has_ipm_0x245_245();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ipm_0x245_245)
}

// optional .jmc_auto.canbus.Gw_ems_tqwhl_0x111_111 gw_ems_tqwhl_0x111_111 = 21;
bool Cx75::has_gw_ems_tqwhl_0x111_111() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Cx75::set_has_gw_ems_tqwhl_0x111_111() {
  _has_bits_[0] |= 0x00100000u;
}
void Cx75::clear_has_gw_ems_tqwhl_0x111_111() {
  _has_bits_[0] &= ~0x00100000u;
}
void Cx75::clear_gw_ems_tqwhl_0x111_111() {
  if (gw_ems_tqwhl_0x111_111_ != NULL) gw_ems_tqwhl_0x111_111_->::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111::Clear();
  clear_has_gw_ems_tqwhl_0x111_111();
}
const ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111& Cx75::gw_ems_tqwhl_0x111_111() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_ems_tqwhl_0x111_111)
  return gw_ems_tqwhl_0x111_111_ != NULL ? *gw_ems_tqwhl_0x111_111_
                         : *::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111::internal_default_instance();
}
::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111* Cx75::mutable_gw_ems_tqwhl_0x111_111() {
  set_has_gw_ems_tqwhl_0x111_111();
  if (gw_ems_tqwhl_0x111_111_ == NULL) {
    gw_ems_tqwhl_0x111_111_ = new ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_ems_tqwhl_0x111_111)
  return gw_ems_tqwhl_0x111_111_;
}
::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111* Cx75::release_gw_ems_tqwhl_0x111_111() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_ems_tqwhl_0x111_111)
  clear_has_gw_ems_tqwhl_0x111_111();
  ::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111* temp = gw_ems_tqwhl_0x111_111_;
  gw_ems_tqwhl_0x111_111_ = NULL;
  return temp;
}
void Cx75::set_allocated_gw_ems_tqwhl_0x111_111(::jmc_auto::canbus::Gw_ems_tqwhl_0x111_111* gw_ems_tqwhl_0x111_111) {
  delete gw_ems_tqwhl_0x111_111_;
  gw_ems_tqwhl_0x111_111_ = gw_ems_tqwhl_0x111_111;
  if (gw_ems_tqwhl_0x111_111) {
    set_has_gw_ems_tqwhl_0x111_111();
  } else {
    clear_has_gw_ems_tqwhl_0x111_111();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_ems_tqwhl_0x111_111)
}

// optional .jmc_auto.canbus.Gw_tcu_gearinfo_0x123_123 gw_tcu_gearinfo_0x123_123 = 22;
bool Cx75::has_gw_tcu_gearinfo_0x123_123() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Cx75::set_has_gw_tcu_gearinfo_0x123_123() {
  _has_bits_[0] |= 0x00200000u;
}
void Cx75::clear_has_gw_tcu_gearinfo_0x123_123() {
  _has_bits_[0] &= ~0x00200000u;
}
void Cx75::clear_gw_tcu_gearinfo_0x123_123() {
  if (gw_tcu_gearinfo_0x123_123_ != NULL) gw_tcu_gearinfo_0x123_123_->::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123::Clear();
  clear_has_gw_tcu_gearinfo_0x123_123();
}
const ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123& Cx75::gw_tcu_gearinfo_0x123_123() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_tcu_gearinfo_0x123_123)
  return gw_tcu_gearinfo_0x123_123_ != NULL ? *gw_tcu_gearinfo_0x123_123_
                         : *::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123::internal_default_instance();
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123* Cx75::mutable_gw_tcu_gearinfo_0x123_123() {
  set_has_gw_tcu_gearinfo_0x123_123();
  if (gw_tcu_gearinfo_0x123_123_ == NULL) {
    gw_tcu_gearinfo_0x123_123_ = new ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_tcu_gearinfo_0x123_123)
  return gw_tcu_gearinfo_0x123_123_;
}
::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123* Cx75::release_gw_tcu_gearinfo_0x123_123() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_tcu_gearinfo_0x123_123)
  clear_has_gw_tcu_gearinfo_0x123_123();
  ::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123* temp = gw_tcu_gearinfo_0x123_123_;
  gw_tcu_gearinfo_0x123_123_ = NULL;
  return temp;
}
void Cx75::set_allocated_gw_tcu_gearinfo_0x123_123(::jmc_auto::canbus::Gw_tcu_gearinfo_0x123_123* gw_tcu_gearinfo_0x123_123) {
  delete gw_tcu_gearinfo_0x123_123_;
  gw_tcu_gearinfo_0x123_123_ = gw_tcu_gearinfo_0x123_123;
  if (gw_tcu_gearinfo_0x123_123) {
    set_has_gw_tcu_gearinfo_0x123_123();
  } else {
    clear_has_gw_tcu_gearinfo_0x123_123();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_tcu_gearinfo_0x123_123)
}

// optional .jmc_auto.canbus.Esp_pressure_0x241_241 esp_pressure_0x241_241 = 23;
bool Cx75::has_esp_pressure_0x241_241() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Cx75::set_has_esp_pressure_0x241_241() {
  _has_bits_[0] |= 0x00400000u;
}
void Cx75::clear_has_esp_pressure_0x241_241() {
  _has_bits_[0] &= ~0x00400000u;
}
void Cx75::clear_esp_pressure_0x241_241() {
  if (esp_pressure_0x241_241_ != NULL) esp_pressure_0x241_241_->::jmc_auto::canbus::Esp_pressure_0x241_241::Clear();
  clear_has_esp_pressure_0x241_241();
}
const ::jmc_auto::canbus::Esp_pressure_0x241_241& Cx75::esp_pressure_0x241_241() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_pressure_0x241_241)
  return esp_pressure_0x241_241_ != NULL ? *esp_pressure_0x241_241_
                         : *::jmc_auto::canbus::Esp_pressure_0x241_241::internal_default_instance();
}
::jmc_auto::canbus::Esp_pressure_0x241_241* Cx75::mutable_esp_pressure_0x241_241() {
  set_has_esp_pressure_0x241_241();
  if (esp_pressure_0x241_241_ == NULL) {
    esp_pressure_0x241_241_ = new ::jmc_auto::canbus::Esp_pressure_0x241_241;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_pressure_0x241_241)
  return esp_pressure_0x241_241_;
}
::jmc_auto::canbus::Esp_pressure_0x241_241* Cx75::release_esp_pressure_0x241_241() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_pressure_0x241_241)
  clear_has_esp_pressure_0x241_241();
  ::jmc_auto::canbus::Esp_pressure_0x241_241* temp = esp_pressure_0x241_241_;
  esp_pressure_0x241_241_ = NULL;
  return temp;
}
void Cx75::set_allocated_esp_pressure_0x241_241(::jmc_auto::canbus::Esp_pressure_0x241_241* esp_pressure_0x241_241) {
  delete esp_pressure_0x241_241_;
  esp_pressure_0x241_241_ = esp_pressure_0x241_241;
  if (esp_pressure_0x241_241) {
    set_has_esp_pressure_0x241_241();
  } else {
    clear_has_esp_pressure_0x241_241();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_pressure_0x241_241)
}

// optional .jmc_auto.canbus.Esp_status_0x243_243 esp_status_0x243_243 = 24;
bool Cx75::has_esp_status_0x243_243() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Cx75::set_has_esp_status_0x243_243() {
  _has_bits_[0] |= 0x00800000u;
}
void Cx75::clear_has_esp_status_0x243_243() {
  _has_bits_[0] &= ~0x00800000u;
}
void Cx75::clear_esp_status_0x243_243() {
  if (esp_status_0x243_243_ != NULL) esp_status_0x243_243_->::jmc_auto::canbus::Esp_status_0x243_243::Clear();
  clear_has_esp_status_0x243_243();
}
const ::jmc_auto::canbus::Esp_status_0x243_243& Cx75::esp_status_0x243_243() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_status_0x243_243)
  return esp_status_0x243_243_ != NULL ? *esp_status_0x243_243_
                         : *::jmc_auto::canbus::Esp_status_0x243_243::internal_default_instance();
}
::jmc_auto::canbus::Esp_status_0x243_243* Cx75::mutable_esp_status_0x243_243() {
  set_has_esp_status_0x243_243();
  if (esp_status_0x243_243_ == NULL) {
    esp_status_0x243_243_ = new ::jmc_auto::canbus::Esp_status_0x243_243;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_status_0x243_243)
  return esp_status_0x243_243_;
}
::jmc_auto::canbus::Esp_status_0x243_243* Cx75::release_esp_status_0x243_243() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_status_0x243_243)
  clear_has_esp_status_0x243_243();
  ::jmc_auto::canbus::Esp_status_0x243_243* temp = esp_status_0x243_243_;
  esp_status_0x243_243_ = NULL;
  return temp;
}
void Cx75::set_allocated_esp_status_0x243_243(::jmc_auto::canbus::Esp_status_0x243_243* esp_status_0x243_243) {
  delete esp_status_0x243_243_;
  esp_status_0x243_243_ = esp_status_0x243_243;
  if (esp_status_0x243_243) {
    set_has_esp_status_0x243_243();
  } else {
    clear_has_esp_status_0x243_243();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_status_0x243_243)
}

// optional .jmc_auto.canbus.Esp_axay_0x242_242 esp_axay_0x242_242 = 25;
bool Cx75::has_esp_axay_0x242_242() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Cx75::set_has_esp_axay_0x242_242() {
  _has_bits_[0] |= 0x01000000u;
}
void Cx75::clear_has_esp_axay_0x242_242() {
  _has_bits_[0] &= ~0x01000000u;
}
void Cx75::clear_esp_axay_0x242_242() {
  if (esp_axay_0x242_242_ != NULL) esp_axay_0x242_242_->::jmc_auto::canbus::Esp_axay_0x242_242::Clear();
  clear_has_esp_axay_0x242_242();
}
const ::jmc_auto::canbus::Esp_axay_0x242_242& Cx75::esp_axay_0x242_242() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_axay_0x242_242)
  return esp_axay_0x242_242_ != NULL ? *esp_axay_0x242_242_
                         : *::jmc_auto::canbus::Esp_axay_0x242_242::internal_default_instance();
}
::jmc_auto::canbus::Esp_axay_0x242_242* Cx75::mutable_esp_axay_0x242_242() {
  set_has_esp_axay_0x242_242();
  if (esp_axay_0x242_242_ == NULL) {
    esp_axay_0x242_242_ = new ::jmc_auto::canbus::Esp_axay_0x242_242;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_axay_0x242_242)
  return esp_axay_0x242_242_;
}
::jmc_auto::canbus::Esp_axay_0x242_242* Cx75::release_esp_axay_0x242_242() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_axay_0x242_242)
  clear_has_esp_axay_0x242_242();
  ::jmc_auto::canbus::Esp_axay_0x242_242* temp = esp_axay_0x242_242_;
  esp_axay_0x242_242_ = NULL;
  return temp;
}
void Cx75::set_allocated_esp_axay_0x242_242(::jmc_auto::canbus::Esp_axay_0x242_242* esp_axay_0x242_242) {
  delete esp_axay_0x242_242_;
  esp_axay_0x242_242_ = esp_axay_0x242_242;
  if (esp_axay_0x242_242) {
    set_has_esp_axay_0x242_242();
  } else {
    clear_has_esp_axay_0x242_242();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_axay_0x242_242)
}

// optional .jmc_auto.canbus.Gw_swm_mrr_0x31b_31b gw_swm_mrr_0x31b_31b = 26;
bool Cx75::has_gw_swm_mrr_0x31b_31b() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Cx75::set_has_gw_swm_mrr_0x31b_31b() {
  _has_bits_[0] |= 0x02000000u;
}
void Cx75::clear_has_gw_swm_mrr_0x31b_31b() {
  _has_bits_[0] &= ~0x02000000u;
}
void Cx75::clear_gw_swm_mrr_0x31b_31b() {
  if (gw_swm_mrr_0x31b_31b_ != NULL) gw_swm_mrr_0x31b_31b_->::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b::Clear();
  clear_has_gw_swm_mrr_0x31b_31b();
}
const ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b& Cx75::gw_swm_mrr_0x31b_31b() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_swm_mrr_0x31b_31b)
  return gw_swm_mrr_0x31b_31b_ != NULL ? *gw_swm_mrr_0x31b_31b_
                         : *::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b::internal_default_instance();
}
::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b* Cx75::mutable_gw_swm_mrr_0x31b_31b() {
  set_has_gw_swm_mrr_0x31b_31b();
  if (gw_swm_mrr_0x31b_31b_ == NULL) {
    gw_swm_mrr_0x31b_31b_ = new ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_swm_mrr_0x31b_31b)
  return gw_swm_mrr_0x31b_31b_;
}
::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b* Cx75::release_gw_swm_mrr_0x31b_31b() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_swm_mrr_0x31b_31b)
  clear_has_gw_swm_mrr_0x31b_31b();
  ::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b* temp = gw_swm_mrr_0x31b_31b_;
  gw_swm_mrr_0x31b_31b_ = NULL;
  return temp;
}
void Cx75::set_allocated_gw_swm_mrr_0x31b_31b(::jmc_auto::canbus::Gw_swm_mrr_0x31b_31b* gw_swm_mrr_0x31b_31b) {
  delete gw_swm_mrr_0x31b_31b_;
  gw_swm_mrr_0x31b_31b_ = gw_swm_mrr_0x31b_31b;
  if (gw_swm_mrr_0x31b_31b) {
    set_has_gw_swm_mrr_0x31b_31b();
  } else {
    clear_has_gw_swm_mrr_0x31b_31b();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_swm_mrr_0x31b_31b)
}

// optional .jmc_auto.canbus.Gw_swm_body_0x31a_31a gw_swm_body_0x31a_31a = 27;
bool Cx75::has_gw_swm_body_0x31a_31a() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void Cx75::set_has_gw_swm_body_0x31a_31a() {
  _has_bits_[0] |= 0x04000000u;
}
void Cx75::clear_has_gw_swm_body_0x31a_31a() {
  _has_bits_[0] &= ~0x04000000u;
}
void Cx75::clear_gw_swm_body_0x31a_31a() {
  if (gw_swm_body_0x31a_31a_ != NULL) gw_swm_body_0x31a_31a_->::jmc_auto::canbus::Gw_swm_body_0x31a_31a::Clear();
  clear_has_gw_swm_body_0x31a_31a();
}
const ::jmc_auto::canbus::Gw_swm_body_0x31a_31a& Cx75::gw_swm_body_0x31a_31a() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_swm_body_0x31a_31a)
  return gw_swm_body_0x31a_31a_ != NULL ? *gw_swm_body_0x31a_31a_
                         : *::jmc_auto::canbus::Gw_swm_body_0x31a_31a::internal_default_instance();
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a* Cx75::mutable_gw_swm_body_0x31a_31a() {
  set_has_gw_swm_body_0x31a_31a();
  if (gw_swm_body_0x31a_31a_ == NULL) {
    gw_swm_body_0x31a_31a_ = new ::jmc_auto::canbus::Gw_swm_body_0x31a_31a;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_swm_body_0x31a_31a)
  return gw_swm_body_0x31a_31a_;
}
::jmc_auto::canbus::Gw_swm_body_0x31a_31a* Cx75::release_gw_swm_body_0x31a_31a() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_swm_body_0x31a_31a)
  clear_has_gw_swm_body_0x31a_31a();
  ::jmc_auto::canbus::Gw_swm_body_0x31a_31a* temp = gw_swm_body_0x31a_31a_;
  gw_swm_body_0x31a_31a_ = NULL;
  return temp;
}
void Cx75::set_allocated_gw_swm_body_0x31a_31a(::jmc_auto::canbus::Gw_swm_body_0x31a_31a* gw_swm_body_0x31a_31a) {
  delete gw_swm_body_0x31a_31a_;
  gw_swm_body_0x31a_31a_ = gw_swm_body_0x31a_31a;
  if (gw_swm_body_0x31a_31a) {
    set_has_gw_swm_body_0x31a_31a();
  } else {
    clear_has_gw_swm_body_0x31a_31a();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_swm_body_0x31a_31a)
}

// optional .jmc_auto.canbus.Gw_ems_tq_0x101_101 gw_ems_tq_0x101_101 = 28;
bool Cx75::has_gw_ems_tq_0x101_101() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void Cx75::set_has_gw_ems_tq_0x101_101() {
  _has_bits_[0] |= 0x08000000u;
}
void Cx75::clear_has_gw_ems_tq_0x101_101() {
  _has_bits_[0] &= ~0x08000000u;
}
void Cx75::clear_gw_ems_tq_0x101_101() {
  if (gw_ems_tq_0x101_101_ != NULL) gw_ems_tq_0x101_101_->::jmc_auto::canbus::Gw_ems_tq_0x101_101::Clear();
  clear_has_gw_ems_tq_0x101_101();
}
const ::jmc_auto::canbus::Gw_ems_tq_0x101_101& Cx75::gw_ems_tq_0x101_101() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_ems_tq_0x101_101)
  return gw_ems_tq_0x101_101_ != NULL ? *gw_ems_tq_0x101_101_
                         : *::jmc_auto::canbus::Gw_ems_tq_0x101_101::internal_default_instance();
}
::jmc_auto::canbus::Gw_ems_tq_0x101_101* Cx75::mutable_gw_ems_tq_0x101_101() {
  set_has_gw_ems_tq_0x101_101();
  if (gw_ems_tq_0x101_101_ == NULL) {
    gw_ems_tq_0x101_101_ = new ::jmc_auto::canbus::Gw_ems_tq_0x101_101;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_ems_tq_0x101_101)
  return gw_ems_tq_0x101_101_;
}
::jmc_auto::canbus::Gw_ems_tq_0x101_101* Cx75::release_gw_ems_tq_0x101_101() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_ems_tq_0x101_101)
  clear_has_gw_ems_tq_0x101_101();
  ::jmc_auto::canbus::Gw_ems_tq_0x101_101* temp = gw_ems_tq_0x101_101_;
  gw_ems_tq_0x101_101_ = NULL;
  return temp;
}
void Cx75::set_allocated_gw_ems_tq_0x101_101(::jmc_auto::canbus::Gw_ems_tq_0x101_101* gw_ems_tq_0x101_101) {
  delete gw_ems_tq_0x101_101_;
  gw_ems_tq_0x101_101_ = gw_ems_tq_0x101_101;
  if (gw_ems_tq_0x101_101) {
    set_has_gw_ems_tq_0x101_101();
  } else {
    clear_has_gw_ems_tq_0x101_101();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_ems_tq_0x101_101)
}

// optional .jmc_auto.canbus.Esp_vlc_0x223_223 esp_vlc_0x223_223 = 29;
bool Cx75::has_esp_vlc_0x223_223() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void Cx75::set_has_esp_vlc_0x223_223() {
  _has_bits_[0] |= 0x10000000u;
}
void Cx75::clear_has_esp_vlc_0x223_223() {
  _has_bits_[0] &= ~0x10000000u;
}
void Cx75::clear_esp_vlc_0x223_223() {
  if (esp_vlc_0x223_223_ != NULL) esp_vlc_0x223_223_->::jmc_auto::canbus::Esp_vlc_0x223_223::Clear();
  clear_has_esp_vlc_0x223_223();
}
const ::jmc_auto::canbus::Esp_vlc_0x223_223& Cx75::esp_vlc_0x223_223() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_vlc_0x223_223)
  return esp_vlc_0x223_223_ != NULL ? *esp_vlc_0x223_223_
                         : *::jmc_auto::canbus::Esp_vlc_0x223_223::internal_default_instance();
}
::jmc_auto::canbus::Esp_vlc_0x223_223* Cx75::mutable_esp_vlc_0x223_223() {
  set_has_esp_vlc_0x223_223();
  if (esp_vlc_0x223_223_ == NULL) {
    esp_vlc_0x223_223_ = new ::jmc_auto::canbus::Esp_vlc_0x223_223;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_vlc_0x223_223)
  return esp_vlc_0x223_223_;
}
::jmc_auto::canbus::Esp_vlc_0x223_223* Cx75::release_esp_vlc_0x223_223() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_vlc_0x223_223)
  clear_has_esp_vlc_0x223_223();
  ::jmc_auto::canbus::Esp_vlc_0x223_223* temp = esp_vlc_0x223_223_;
  esp_vlc_0x223_223_ = NULL;
  return temp;
}
void Cx75::set_allocated_esp_vlc_0x223_223(::jmc_auto::canbus::Esp_vlc_0x223_223* esp_vlc_0x223_223) {
  delete esp_vlc_0x223_223_;
  esp_vlc_0x223_223_ = esp_vlc_0x223_223;
  if (esp_vlc_0x223_223) {
    set_has_esp_vlc_0x223_223();
  } else {
    clear_has_esp_vlc_0x223_223();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_vlc_0x223_223)
}

// optional .jmc_auto.canbus.Gw_ems_whltq_0x107_107 gw_ems_whltq_0x107_107 = 30;
bool Cx75::has_gw_ems_whltq_0x107_107() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void Cx75::set_has_gw_ems_whltq_0x107_107() {
  _has_bits_[0] |= 0x20000000u;
}
void Cx75::clear_has_gw_ems_whltq_0x107_107() {
  _has_bits_[0] &= ~0x20000000u;
}
void Cx75::clear_gw_ems_whltq_0x107_107() {
  if (gw_ems_whltq_0x107_107_ != NULL) gw_ems_whltq_0x107_107_->::jmc_auto::canbus::Gw_ems_whltq_0x107_107::Clear();
  clear_has_gw_ems_whltq_0x107_107();
}
const ::jmc_auto::canbus::Gw_ems_whltq_0x107_107& Cx75::gw_ems_whltq_0x107_107() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_ems_whltq_0x107_107)
  return gw_ems_whltq_0x107_107_ != NULL ? *gw_ems_whltq_0x107_107_
                         : *::jmc_auto::canbus::Gw_ems_whltq_0x107_107::internal_default_instance();
}
::jmc_auto::canbus::Gw_ems_whltq_0x107_107* Cx75::mutable_gw_ems_whltq_0x107_107() {
  set_has_gw_ems_whltq_0x107_107();
  if (gw_ems_whltq_0x107_107_ == NULL) {
    gw_ems_whltq_0x107_107_ = new ::jmc_auto::canbus::Gw_ems_whltq_0x107_107;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_ems_whltq_0x107_107)
  return gw_ems_whltq_0x107_107_;
}
::jmc_auto::canbus::Gw_ems_whltq_0x107_107* Cx75::release_gw_ems_whltq_0x107_107() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_ems_whltq_0x107_107)
  clear_has_gw_ems_whltq_0x107_107();
  ::jmc_auto::canbus::Gw_ems_whltq_0x107_107* temp = gw_ems_whltq_0x107_107_;
  gw_ems_whltq_0x107_107_ = NULL;
  return temp;
}
void Cx75::set_allocated_gw_ems_whltq_0x107_107(::jmc_auto::canbus::Gw_ems_whltq_0x107_107* gw_ems_whltq_0x107_107) {
  delete gw_ems_whltq_0x107_107_;
  gw_ems_whltq_0x107_107_ = gw_ems_whltq_0x107_107;
  if (gw_ems_whltq_0x107_107) {
    set_has_gw_ems_whltq_0x107_107();
  } else {
    clear_has_gw_ems_whltq_0x107_107();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_ems_whltq_0x107_107)
}

// optional .jmc_auto.canbus.Abs_sts_0x221_221 abs_sts_0x221_221 = 31;
bool Cx75::has_abs_sts_0x221_221() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void Cx75::set_has_abs_sts_0x221_221() {
  _has_bits_[0] |= 0x40000000u;
}
void Cx75::clear_has_abs_sts_0x221_221() {
  _has_bits_[0] &= ~0x40000000u;
}
void Cx75::clear_abs_sts_0x221_221() {
  if (abs_sts_0x221_221_ != NULL) abs_sts_0x221_221_->::jmc_auto::canbus::Abs_sts_0x221_221::Clear();
  clear_has_abs_sts_0x221_221();
}
const ::jmc_auto::canbus::Abs_sts_0x221_221& Cx75::abs_sts_0x221_221() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.abs_sts_0x221_221)
  return abs_sts_0x221_221_ != NULL ? *abs_sts_0x221_221_
                         : *::jmc_auto::canbus::Abs_sts_0x221_221::internal_default_instance();
}
::jmc_auto::canbus::Abs_sts_0x221_221* Cx75::mutable_abs_sts_0x221_221() {
  set_has_abs_sts_0x221_221();
  if (abs_sts_0x221_221_ == NULL) {
    abs_sts_0x221_221_ = new ::jmc_auto::canbus::Abs_sts_0x221_221;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.abs_sts_0x221_221)
  return abs_sts_0x221_221_;
}
::jmc_auto::canbus::Abs_sts_0x221_221* Cx75::release_abs_sts_0x221_221() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.abs_sts_0x221_221)
  clear_has_abs_sts_0x221_221();
  ::jmc_auto::canbus::Abs_sts_0x221_221* temp = abs_sts_0x221_221_;
  abs_sts_0x221_221_ = NULL;
  return temp;
}
void Cx75::set_allocated_abs_sts_0x221_221(::jmc_auto::canbus::Abs_sts_0x221_221* abs_sts_0x221_221) {
  delete abs_sts_0x221_221_;
  abs_sts_0x221_221_ = abs_sts_0x221_221;
  if (abs_sts_0x221_221) {
    set_has_abs_sts_0x221_221();
  } else {
    clear_has_abs_sts_0x221_221();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.abs_sts_0x221_221)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x480_480 mrr_frobj_0x480_480 = 32;
bool Cx75::has_mrr_frobj_0x480_480() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void Cx75::set_has_mrr_frobj_0x480_480() {
  _has_bits_[0] |= 0x80000000u;
}
void Cx75::clear_has_mrr_frobj_0x480_480() {
  _has_bits_[0] &= ~0x80000000u;
}
void Cx75::clear_mrr_frobj_0x480_480() {
  if (mrr_frobj_0x480_480_ != NULL) mrr_frobj_0x480_480_->::jmc_auto::canbus::Mrr_frobj_0x480_480::Clear();
  clear_has_mrr_frobj_0x480_480();
}
const ::jmc_auto::canbus::Mrr_frobj_0x480_480& Cx75::mrr_frobj_0x480_480() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.mrr_frobj_0x480_480)
  return mrr_frobj_0x480_480_ != NULL ? *mrr_frobj_0x480_480_
                         : *::jmc_auto::canbus::Mrr_frobj_0x480_480::internal_default_instance();
}
::jmc_auto::canbus::Mrr_frobj_0x480_480* Cx75::mutable_mrr_frobj_0x480_480() {
  set_has_mrr_frobj_0x480_480();
  if (mrr_frobj_0x480_480_ == NULL) {
    mrr_frobj_0x480_480_ = new ::jmc_auto::canbus::Mrr_frobj_0x480_480;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.mrr_frobj_0x480_480)
  return mrr_frobj_0x480_480_;
}
::jmc_auto::canbus::Mrr_frobj_0x480_480* Cx75::release_mrr_frobj_0x480_480() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.mrr_frobj_0x480_480)
  clear_has_mrr_frobj_0x480_480();
  ::jmc_auto::canbus::Mrr_frobj_0x480_480* temp = mrr_frobj_0x480_480_;
  mrr_frobj_0x480_480_ = NULL;
  return temp;
}
void Cx75::set_allocated_mrr_frobj_0x480_480(::jmc_auto::canbus::Mrr_frobj_0x480_480* mrr_frobj_0x480_480) {
  delete mrr_frobj_0x480_480_;
  mrr_frobj_0x480_480_ = mrr_frobj_0x480_480;
  if (mrr_frobj_0x480_480) {
    set_has_mrr_frobj_0x480_480();
  } else {
    clear_has_mrr_frobj_0x480_480();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.mrr_frobj_0x480_480)
}

// optional .jmc_auto.canbus.Mrr_0x246_246 mrr_0x246_246 = 33;
bool Cx75::has_mrr_0x246_246() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void Cx75::set_has_mrr_0x246_246() {
  _has_bits_[1] |= 0x00000001u;
}
void Cx75::clear_has_mrr_0x246_246() {
  _has_bits_[1] &= ~0x00000001u;
}
void Cx75::clear_mrr_0x246_246() {
  if (mrr_0x246_246_ != NULL) mrr_0x246_246_->::jmc_auto::canbus::Mrr_0x246_246::Clear();
  clear_has_mrr_0x246_246();
}
const ::jmc_auto::canbus::Mrr_0x246_246& Cx75::mrr_0x246_246() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.mrr_0x246_246)
  return mrr_0x246_246_ != NULL ? *mrr_0x246_246_
                         : *::jmc_auto::canbus::Mrr_0x246_246::internal_default_instance();
}
::jmc_auto::canbus::Mrr_0x246_246* Cx75::mutable_mrr_0x246_246() {
  set_has_mrr_0x246_246();
  if (mrr_0x246_246_ == NULL) {
    mrr_0x246_246_ = new ::jmc_auto::canbus::Mrr_0x246_246;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.mrr_0x246_246)
  return mrr_0x246_246_;
}
::jmc_auto::canbus::Mrr_0x246_246* Cx75::release_mrr_0x246_246() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.mrr_0x246_246)
  clear_has_mrr_0x246_246();
  ::jmc_auto::canbus::Mrr_0x246_246* temp = mrr_0x246_246_;
  mrr_0x246_246_ = NULL;
  return temp;
}
void Cx75::set_allocated_mrr_0x246_246(::jmc_auto::canbus::Mrr_0x246_246* mrr_0x246_246) {
  delete mrr_0x246_246_;
  mrr_0x246_246_ = mrr_0x246_246;
  if (mrr_0x246_246) {
    set_has_mrr_0x246_246();
  } else {
    clear_has_mrr_0x246_246();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.mrr_0x246_246)
}

// optional .jmc_auto.canbus.Gw_mp5_nav_0x533_533 gw_mp5_nav_0x533_533 = 34;
bool Cx75::has_gw_mp5_nav_0x533_533() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void Cx75::set_has_gw_mp5_nav_0x533_533() {
  _has_bits_[1] |= 0x00000002u;
}
void Cx75::clear_has_gw_mp5_nav_0x533_533() {
  _has_bits_[1] &= ~0x00000002u;
}
void Cx75::clear_gw_mp5_nav_0x533_533() {
  if (gw_mp5_nav_0x533_533_ != NULL) gw_mp5_nav_0x533_533_->::jmc_auto::canbus::Gw_mp5_nav_0x533_533::Clear();
  clear_has_gw_mp5_nav_0x533_533();
}
const ::jmc_auto::canbus::Gw_mp5_nav_0x533_533& Cx75::gw_mp5_nav_0x533_533() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_mp5_nav_0x533_533)
  return gw_mp5_nav_0x533_533_ != NULL ? *gw_mp5_nav_0x533_533_
                         : *::jmc_auto::canbus::Gw_mp5_nav_0x533_533::internal_default_instance();
}
::jmc_auto::canbus::Gw_mp5_nav_0x533_533* Cx75::mutable_gw_mp5_nav_0x533_533() {
  set_has_gw_mp5_nav_0x533_533();
  if (gw_mp5_nav_0x533_533_ == NULL) {
    gw_mp5_nav_0x533_533_ = new ::jmc_auto::canbus::Gw_mp5_nav_0x533_533;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_mp5_nav_0x533_533)
  return gw_mp5_nav_0x533_533_;
}
::jmc_auto::canbus::Gw_mp5_nav_0x533_533* Cx75::release_gw_mp5_nav_0x533_533() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_mp5_nav_0x533_533)
  clear_has_gw_mp5_nav_0x533_533();
  ::jmc_auto::canbus::Gw_mp5_nav_0x533_533* temp = gw_mp5_nav_0x533_533_;
  gw_mp5_nav_0x533_533_ = NULL;
  return temp;
}
void Cx75::set_allocated_gw_mp5_nav_0x533_533(::jmc_auto::canbus::Gw_mp5_nav_0x533_533* gw_mp5_nav_0x533_533) {
  delete gw_mp5_nav_0x533_533_;
  gw_mp5_nav_0x533_533_ = gw_mp5_nav_0x533_533;
  if (gw_mp5_nav_0x533_533) {
    set_has_gw_mp5_nav_0x533_533();
  } else {
    clear_has_gw_mp5_nav_0x533_533();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_mp5_nav_0x533_533)
}

// optional .jmc_auto.canbus.Gw_mp5_0x530_530 gw_mp5_0x530_530 = 35;
bool Cx75::has_gw_mp5_0x530_530() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void Cx75::set_has_gw_mp5_0x530_530() {
  _has_bits_[1] |= 0x00000004u;
}
void Cx75::clear_has_gw_mp5_0x530_530() {
  _has_bits_[1] &= ~0x00000004u;
}
void Cx75::clear_gw_mp5_0x530_530() {
  if (gw_mp5_0x530_530_ != NULL) gw_mp5_0x530_530_->::jmc_auto::canbus::Gw_mp5_0x530_530::Clear();
  clear_has_gw_mp5_0x530_530();
}
const ::jmc_auto::canbus::Gw_mp5_0x530_530& Cx75::gw_mp5_0x530_530() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_mp5_0x530_530)
  return gw_mp5_0x530_530_ != NULL ? *gw_mp5_0x530_530_
                         : *::jmc_auto::canbus::Gw_mp5_0x530_530::internal_default_instance();
}
::jmc_auto::canbus::Gw_mp5_0x530_530* Cx75::mutable_gw_mp5_0x530_530() {
  set_has_gw_mp5_0x530_530();
  if (gw_mp5_0x530_530_ == NULL) {
    gw_mp5_0x530_530_ = new ::jmc_auto::canbus::Gw_mp5_0x530_530;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_mp5_0x530_530)
  return gw_mp5_0x530_530_;
}
::jmc_auto::canbus::Gw_mp5_0x530_530* Cx75::release_gw_mp5_0x530_530() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_mp5_0x530_530)
  clear_has_gw_mp5_0x530_530();
  ::jmc_auto::canbus::Gw_mp5_0x530_530* temp = gw_mp5_0x530_530_;
  gw_mp5_0x530_530_ = NULL;
  return temp;
}
void Cx75::set_allocated_gw_mp5_0x530_530(::jmc_auto::canbus::Gw_mp5_0x530_530* gw_mp5_0x530_530) {
  delete gw_mp5_0x530_530_;
  gw_mp5_0x530_530_ = gw_mp5_0x530_530;
  if (gw_mp5_0x530_530) {
    set_has_gw_mp5_0x530_530();
  } else {
    clear_has_gw_mp5_0x530_530();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_mp5_0x530_530)
}

// optional .jmc_auto.canbus.Mrr_frobj_0x279_279 mrr_frobj_0x279_279 = 36;
bool Cx75::has_mrr_frobj_0x279_279() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void Cx75::set_has_mrr_frobj_0x279_279() {
  _has_bits_[1] |= 0x00000008u;
}
void Cx75::clear_has_mrr_frobj_0x279_279() {
  _has_bits_[1] &= ~0x00000008u;
}
void Cx75::clear_mrr_frobj_0x279_279() {
  if (mrr_frobj_0x279_279_ != NULL) mrr_frobj_0x279_279_->::jmc_auto::canbus::Mrr_frobj_0x279_279::Clear();
  clear_has_mrr_frobj_0x279_279();
}
const ::jmc_auto::canbus::Mrr_frobj_0x279_279& Cx75::mrr_frobj_0x279_279() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.mrr_frobj_0x279_279)
  return mrr_frobj_0x279_279_ != NULL ? *mrr_frobj_0x279_279_
                         : *::jmc_auto::canbus::Mrr_frobj_0x279_279::internal_default_instance();
}
::jmc_auto::canbus::Mrr_frobj_0x279_279* Cx75::mutable_mrr_frobj_0x279_279() {
  set_has_mrr_frobj_0x279_279();
  if (mrr_frobj_0x279_279_ == NULL) {
    mrr_frobj_0x279_279_ = new ::jmc_auto::canbus::Mrr_frobj_0x279_279;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.mrr_frobj_0x279_279)
  return mrr_frobj_0x279_279_;
}
::jmc_auto::canbus::Mrr_frobj_0x279_279* Cx75::release_mrr_frobj_0x279_279() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.mrr_frobj_0x279_279)
  clear_has_mrr_frobj_0x279_279();
  ::jmc_auto::canbus::Mrr_frobj_0x279_279* temp = mrr_frobj_0x279_279_;
  mrr_frobj_0x279_279_ = NULL;
  return temp;
}
void Cx75::set_allocated_mrr_frobj_0x279_279(::jmc_auto::canbus::Mrr_frobj_0x279_279* mrr_frobj_0x279_279) {
  delete mrr_frobj_0x279_279_;
  mrr_frobj_0x279_279_ = mrr_frobj_0x279_279;
  if (mrr_frobj_0x279_279) {
    set_has_mrr_frobj_0x279_279();
  } else {
    clear_has_mrr_frobj_0x279_279();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.mrr_frobj_0x279_279)
}

// optional .jmc_auto.canbus.Gw_ic_0x510_510 gw_ic_0x510_510 = 37;
bool Cx75::has_gw_ic_0x510_510() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void Cx75::set_has_gw_ic_0x510_510() {
  _has_bits_[1] |= 0x00000010u;
}
void Cx75::clear_has_gw_ic_0x510_510() {
  _has_bits_[1] &= ~0x00000010u;
}
void Cx75::clear_gw_ic_0x510_510() {
  if (gw_ic_0x510_510_ != NULL) gw_ic_0x510_510_->::jmc_auto::canbus::Gw_ic_0x510_510::Clear();
  clear_has_gw_ic_0x510_510();
}
const ::jmc_auto::canbus::Gw_ic_0x510_510& Cx75::gw_ic_0x510_510() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_ic_0x510_510)
  return gw_ic_0x510_510_ != NULL ? *gw_ic_0x510_510_
                         : *::jmc_auto::canbus::Gw_ic_0x510_510::internal_default_instance();
}
::jmc_auto::canbus::Gw_ic_0x510_510* Cx75::mutable_gw_ic_0x510_510() {
  set_has_gw_ic_0x510_510();
  if (gw_ic_0x510_510_ == NULL) {
    gw_ic_0x510_510_ = new ::jmc_auto::canbus::Gw_ic_0x510_510;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_ic_0x510_510)
  return gw_ic_0x510_510_;
}
::jmc_auto::canbus::Gw_ic_0x510_510* Cx75::release_gw_ic_0x510_510() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_ic_0x510_510)
  clear_has_gw_ic_0x510_510();
  ::jmc_auto::canbus::Gw_ic_0x510_510* temp = gw_ic_0x510_510_;
  gw_ic_0x510_510_ = NULL;
  return temp;
}
void Cx75::set_allocated_gw_ic_0x510_510(::jmc_auto::canbus::Gw_ic_0x510_510* gw_ic_0x510_510) {
  delete gw_ic_0x510_510_;
  gw_ic_0x510_510_ = gw_ic_0x510_510;
  if (gw_ic_0x510_510) {
    set_has_gw_ic_0x510_510();
  } else {
    clear_has_gw_ic_0x510_510();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_ic_0x510_510)
}

// optional .jmc_auto.canbus.Abs_whlspd_0x211_211 abs_whlspd_0x211_211 = 38;
bool Cx75::has_abs_whlspd_0x211_211() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void Cx75::set_has_abs_whlspd_0x211_211() {
  _has_bits_[1] |= 0x00000020u;
}
void Cx75::clear_has_abs_whlspd_0x211_211() {
  _has_bits_[1] &= ~0x00000020u;
}
void Cx75::clear_abs_whlspd_0x211_211() {
  if (abs_whlspd_0x211_211_ != NULL) abs_whlspd_0x211_211_->::jmc_auto::canbus::Abs_whlspd_0x211_211::Clear();
  clear_has_abs_whlspd_0x211_211();
}
const ::jmc_auto::canbus::Abs_whlspd_0x211_211& Cx75::abs_whlspd_0x211_211() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.abs_whlspd_0x211_211)
  return abs_whlspd_0x211_211_ != NULL ? *abs_whlspd_0x211_211_
                         : *::jmc_auto::canbus::Abs_whlspd_0x211_211::internal_default_instance();
}
::jmc_auto::canbus::Abs_whlspd_0x211_211* Cx75::mutable_abs_whlspd_0x211_211() {
  set_has_abs_whlspd_0x211_211();
  if (abs_whlspd_0x211_211_ == NULL) {
    abs_whlspd_0x211_211_ = new ::jmc_auto::canbus::Abs_whlspd_0x211_211;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.abs_whlspd_0x211_211)
  return abs_whlspd_0x211_211_;
}
::jmc_auto::canbus::Abs_whlspd_0x211_211* Cx75::release_abs_whlspd_0x211_211() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.abs_whlspd_0x211_211)
  clear_has_abs_whlspd_0x211_211();
  ::jmc_auto::canbus::Abs_whlspd_0x211_211* temp = abs_whlspd_0x211_211_;
  abs_whlspd_0x211_211_ = NULL;
  return temp;
}
void Cx75::set_allocated_abs_whlspd_0x211_211(::jmc_auto::canbus::Abs_whlspd_0x211_211* abs_whlspd_0x211_211) {
  delete abs_whlspd_0x211_211_;
  abs_whlspd_0x211_211_ = abs_whlspd_0x211_211;
  if (abs_whlspd_0x211_211) {
    set_has_abs_whlspd_0x211_211();
  } else {
    clear_has_abs_whlspd_0x211_211();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.abs_whlspd_0x211_211)
}

// optional .jmc_auto.canbus.Esp_tq_0x217_217 esp_tq_0x217_217 = 39;
bool Cx75::has_esp_tq_0x217_217() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void Cx75::set_has_esp_tq_0x217_217() {
  _has_bits_[1] |= 0x00000040u;
}
void Cx75::clear_has_esp_tq_0x217_217() {
  _has_bits_[1] &= ~0x00000040u;
}
void Cx75::clear_esp_tq_0x217_217() {
  if (esp_tq_0x217_217_ != NULL) esp_tq_0x217_217_->::jmc_auto::canbus::Esp_tq_0x217_217::Clear();
  clear_has_esp_tq_0x217_217();
}
const ::jmc_auto::canbus::Esp_tq_0x217_217& Cx75::esp_tq_0x217_217() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_tq_0x217_217)
  return esp_tq_0x217_217_ != NULL ? *esp_tq_0x217_217_
                         : *::jmc_auto::canbus::Esp_tq_0x217_217::internal_default_instance();
}
::jmc_auto::canbus::Esp_tq_0x217_217* Cx75::mutable_esp_tq_0x217_217() {
  set_has_esp_tq_0x217_217();
  if (esp_tq_0x217_217_ == NULL) {
    esp_tq_0x217_217_ = new ::jmc_auto::canbus::Esp_tq_0x217_217;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_tq_0x217_217)
  return esp_tq_0x217_217_;
}
::jmc_auto::canbus::Esp_tq_0x217_217* Cx75::release_esp_tq_0x217_217() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_tq_0x217_217)
  clear_has_esp_tq_0x217_217();
  ::jmc_auto::canbus::Esp_tq_0x217_217* temp = esp_tq_0x217_217_;
  esp_tq_0x217_217_ = NULL;
  return temp;
}
void Cx75::set_allocated_esp_tq_0x217_217(::jmc_auto::canbus::Esp_tq_0x217_217* esp_tq_0x217_217) {
  delete esp_tq_0x217_217_;
  esp_tq_0x217_217_ = esp_tq_0x217_217;
  if (esp_tq_0x217_217) {
    set_has_esp_tq_0x217_217();
  } else {
    clear_has_esp_tq_0x217_217();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_tq_0x217_217)
}

// optional .jmc_auto.canbus.Esp_rpmf_0x213_213 esp_rpmf_0x213_213 = 40;
bool Cx75::has_esp_rpmf_0x213_213() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void Cx75::set_has_esp_rpmf_0x213_213() {
  _has_bits_[1] |= 0x00000080u;
}
void Cx75::clear_has_esp_rpmf_0x213_213() {
  _has_bits_[1] &= ~0x00000080u;
}
void Cx75::clear_esp_rpmf_0x213_213() {
  if (esp_rpmf_0x213_213_ != NULL) esp_rpmf_0x213_213_->::jmc_auto::canbus::Esp_rpmf_0x213_213::Clear();
  clear_has_esp_rpmf_0x213_213();
}
const ::jmc_auto::canbus::Esp_rpmf_0x213_213& Cx75::esp_rpmf_0x213_213() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.esp_rpmf_0x213_213)
  return esp_rpmf_0x213_213_ != NULL ? *esp_rpmf_0x213_213_
                         : *::jmc_auto::canbus::Esp_rpmf_0x213_213::internal_default_instance();
}
::jmc_auto::canbus::Esp_rpmf_0x213_213* Cx75::mutable_esp_rpmf_0x213_213() {
  set_has_esp_rpmf_0x213_213();
  if (esp_rpmf_0x213_213_ == NULL) {
    esp_rpmf_0x213_213_ = new ::jmc_auto::canbus::Esp_rpmf_0x213_213;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.esp_rpmf_0x213_213)
  return esp_rpmf_0x213_213_;
}
::jmc_auto::canbus::Esp_rpmf_0x213_213* Cx75::release_esp_rpmf_0x213_213() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.esp_rpmf_0x213_213)
  clear_has_esp_rpmf_0x213_213();
  ::jmc_auto::canbus::Esp_rpmf_0x213_213* temp = esp_rpmf_0x213_213_;
  esp_rpmf_0x213_213_ = NULL;
  return temp;
}
void Cx75::set_allocated_esp_rpmf_0x213_213(::jmc_auto::canbus::Esp_rpmf_0x213_213* esp_rpmf_0x213_213) {
  delete esp_rpmf_0x213_213_;
  esp_rpmf_0x213_213_ = esp_rpmf_0x213_213;
  if (esp_rpmf_0x213_213) {
    set_has_esp_rpmf_0x213_213();
  } else {
    clear_has_esp_rpmf_0x213_213();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.esp_rpmf_0x213_213)
}

// optional .jmc_auto.canbus.Gw_ic_time_0x581_581 gw_ic_time_0x581_581 = 41;
bool Cx75::has_gw_ic_time_0x581_581() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void Cx75::set_has_gw_ic_time_0x581_581() {
  _has_bits_[1] |= 0x00000100u;
}
void Cx75::clear_has_gw_ic_time_0x581_581() {
  _has_bits_[1] &= ~0x00000100u;
}
void Cx75::clear_gw_ic_time_0x581_581() {
  if (gw_ic_time_0x581_581_ != NULL) gw_ic_time_0x581_581_->::jmc_auto::canbus::Gw_ic_time_0x581_581::Clear();
  clear_has_gw_ic_time_0x581_581();
}
const ::jmc_auto::canbus::Gw_ic_time_0x581_581& Cx75::gw_ic_time_0x581_581() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_ic_time_0x581_581)
  return gw_ic_time_0x581_581_ != NULL ? *gw_ic_time_0x581_581_
                         : *::jmc_auto::canbus::Gw_ic_time_0x581_581::internal_default_instance();
}
::jmc_auto::canbus::Gw_ic_time_0x581_581* Cx75::mutable_gw_ic_time_0x581_581() {
  set_has_gw_ic_time_0x581_581();
  if (gw_ic_time_0x581_581_ == NULL) {
    gw_ic_time_0x581_581_ = new ::jmc_auto::canbus::Gw_ic_time_0x581_581;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_ic_time_0x581_581)
  return gw_ic_time_0x581_581_;
}
::jmc_auto::canbus::Gw_ic_time_0x581_581* Cx75::release_gw_ic_time_0x581_581() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_ic_time_0x581_581)
  clear_has_gw_ic_time_0x581_581();
  ::jmc_auto::canbus::Gw_ic_time_0x581_581* temp = gw_ic_time_0x581_581_;
  gw_ic_time_0x581_581_ = NULL;
  return temp;
}
void Cx75::set_allocated_gw_ic_time_0x581_581(::jmc_auto::canbus::Gw_ic_time_0x581_581* gw_ic_time_0x581_581) {
  delete gw_ic_time_0x581_581_;
  gw_ic_time_0x581_581_ = gw_ic_time_0x581_581;
  if (gw_ic_time_0x581_581) {
    set_has_gw_ic_time_0x581_581();
  } else {
    clear_has_gw_ic_time_0x581_581();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_ic_time_0x581_581)
}

// optional .jmc_auto.canbus.Afs_0x5a0_5a0 afs_0x5a0_5a0 = 42;
bool Cx75::has_afs_0x5a0_5a0() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void Cx75::set_has_afs_0x5a0_5a0() {
  _has_bits_[1] |= 0x00000200u;
}
void Cx75::clear_has_afs_0x5a0_5a0() {
  _has_bits_[1] &= ~0x00000200u;
}
void Cx75::clear_afs_0x5a0_5a0() {
  if (afs_0x5a0_5a0_ != NULL) afs_0x5a0_5a0_->::jmc_auto::canbus::Afs_0x5a0_5a0::Clear();
  clear_has_afs_0x5a0_5a0();
}
const ::jmc_auto::canbus::Afs_0x5a0_5a0& Cx75::afs_0x5a0_5a0() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.afs_0x5a0_5a0)
  return afs_0x5a0_5a0_ != NULL ? *afs_0x5a0_5a0_
                         : *::jmc_auto::canbus::Afs_0x5a0_5a0::internal_default_instance();
}
::jmc_auto::canbus::Afs_0x5a0_5a0* Cx75::mutable_afs_0x5a0_5a0() {
  set_has_afs_0x5a0_5a0();
  if (afs_0x5a0_5a0_ == NULL) {
    afs_0x5a0_5a0_ = new ::jmc_auto::canbus::Afs_0x5a0_5a0;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.afs_0x5a0_5a0)
  return afs_0x5a0_5a0_;
}
::jmc_auto::canbus::Afs_0x5a0_5a0* Cx75::release_afs_0x5a0_5a0() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.afs_0x5a0_5a0)
  clear_has_afs_0x5a0_5a0();
  ::jmc_auto::canbus::Afs_0x5a0_5a0* temp = afs_0x5a0_5a0_;
  afs_0x5a0_5a0_ = NULL;
  return temp;
}
void Cx75::set_allocated_afs_0x5a0_5a0(::jmc_auto::canbus::Afs_0x5a0_5a0* afs_0x5a0_5a0) {
  delete afs_0x5a0_5a0_;
  afs_0x5a0_5a0_ = afs_0x5a0_5a0;
  if (afs_0x5a0_5a0) {
    set_has_afs_0x5a0_5a0();
  } else {
    clear_has_afs_0x5a0_5a0();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.afs_0x5a0_5a0)
}

// optional .jmc_auto.canbus.Sod_nm_0x440_440 sod_nm_0x440_440 = 43;
bool Cx75::has_sod_nm_0x440_440() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void Cx75::set_has_sod_nm_0x440_440() {
  _has_bits_[1] |= 0x00000400u;
}
void Cx75::clear_has_sod_nm_0x440_440() {
  _has_bits_[1] &= ~0x00000400u;
}
void Cx75::clear_sod_nm_0x440_440() {
  if (sod_nm_0x440_440_ != NULL) sod_nm_0x440_440_->::jmc_auto::canbus::Sod_nm_0x440_440::Clear();
  clear_has_sod_nm_0x440_440();
}
const ::jmc_auto::canbus::Sod_nm_0x440_440& Cx75::sod_nm_0x440_440() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.sod_nm_0x440_440)
  return sod_nm_0x440_440_ != NULL ? *sod_nm_0x440_440_
                         : *::jmc_auto::canbus::Sod_nm_0x440_440::internal_default_instance();
}
::jmc_auto::canbus::Sod_nm_0x440_440* Cx75::mutable_sod_nm_0x440_440() {
  set_has_sod_nm_0x440_440();
  if (sod_nm_0x440_440_ == NULL) {
    sod_nm_0x440_440_ = new ::jmc_auto::canbus::Sod_nm_0x440_440;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.sod_nm_0x440_440)
  return sod_nm_0x440_440_;
}
::jmc_auto::canbus::Sod_nm_0x440_440* Cx75::release_sod_nm_0x440_440() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.sod_nm_0x440_440)
  clear_has_sod_nm_0x440_440();
  ::jmc_auto::canbus::Sod_nm_0x440_440* temp = sod_nm_0x440_440_;
  sod_nm_0x440_440_ = NULL;
  return temp;
}
void Cx75::set_allocated_sod_nm_0x440_440(::jmc_auto::canbus::Sod_nm_0x440_440* sod_nm_0x440_440) {
  delete sod_nm_0x440_440_;
  sod_nm_0x440_440_ = sod_nm_0x440_440;
  if (sod_nm_0x440_440) {
    set_has_sod_nm_0x440_440();
  } else {
    clear_has_sod_nm_0x440_440();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.sod_nm_0x440_440)
}

// optional .jmc_auto.canbus.Gw_nm_0x460_460 gw_nm_0x460_460 = 44;
bool Cx75::has_gw_nm_0x460_460() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void Cx75::set_has_gw_nm_0x460_460() {
  _has_bits_[1] |= 0x00000800u;
}
void Cx75::clear_has_gw_nm_0x460_460() {
  _has_bits_[1] &= ~0x00000800u;
}
void Cx75::clear_gw_nm_0x460_460() {
  if (gw_nm_0x460_460_ != NULL) gw_nm_0x460_460_->::jmc_auto::canbus::Gw_nm_0x460_460::Clear();
  clear_has_gw_nm_0x460_460();
}
const ::jmc_auto::canbus::Gw_nm_0x460_460& Cx75::gw_nm_0x460_460() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_nm_0x460_460)
  return gw_nm_0x460_460_ != NULL ? *gw_nm_0x460_460_
                         : *::jmc_auto::canbus::Gw_nm_0x460_460::internal_default_instance();
}
::jmc_auto::canbus::Gw_nm_0x460_460* Cx75::mutable_gw_nm_0x460_460() {
  set_has_gw_nm_0x460_460();
  if (gw_nm_0x460_460_ == NULL) {
    gw_nm_0x460_460_ = new ::jmc_auto::canbus::Gw_nm_0x460_460;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_nm_0x460_460)
  return gw_nm_0x460_460_;
}
::jmc_auto::canbus::Gw_nm_0x460_460* Cx75::release_gw_nm_0x460_460() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_nm_0x460_460)
  clear_has_gw_nm_0x460_460();
  ::jmc_auto::canbus::Gw_nm_0x460_460* temp = gw_nm_0x460_460_;
  gw_nm_0x460_460_ = NULL;
  return temp;
}
void Cx75::set_allocated_gw_nm_0x460_460(::jmc_auto::canbus::Gw_nm_0x460_460* gw_nm_0x460_460) {
  delete gw_nm_0x460_460_;
  gw_nm_0x460_460_ = gw_nm_0x460_460;
  if (gw_nm_0x460_460) {
    set_has_gw_nm_0x460_460();
  } else {
    clear_has_gw_nm_0x460_460();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_nm_0x460_460)
}

// optional .jmc_auto.canbus.Eps_0x260_260 eps_0x260_260 = 45;
bool Cx75::has_eps_0x260_260() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void Cx75::set_has_eps_0x260_260() {
  _has_bits_[1] |= 0x00001000u;
}
void Cx75::clear_has_eps_0x260_260() {
  _has_bits_[1] &= ~0x00001000u;
}
void Cx75::clear_eps_0x260_260() {
  if (eps_0x260_260_ != NULL) eps_0x260_260_->::jmc_auto::canbus::Eps_0x260_260::Clear();
  clear_has_eps_0x260_260();
}
const ::jmc_auto::canbus::Eps_0x260_260& Cx75::eps_0x260_260() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.eps_0x260_260)
  return eps_0x260_260_ != NULL ? *eps_0x260_260_
                         : *::jmc_auto::canbus::Eps_0x260_260::internal_default_instance();
}
::jmc_auto::canbus::Eps_0x260_260* Cx75::mutable_eps_0x260_260() {
  set_has_eps_0x260_260();
  if (eps_0x260_260_ == NULL) {
    eps_0x260_260_ = new ::jmc_auto::canbus::Eps_0x260_260;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.eps_0x260_260)
  return eps_0x260_260_;
}
::jmc_auto::canbus::Eps_0x260_260* Cx75::release_eps_0x260_260() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.eps_0x260_260)
  clear_has_eps_0x260_260();
  ::jmc_auto::canbus::Eps_0x260_260* temp = eps_0x260_260_;
  eps_0x260_260_ = NULL;
  return temp;
}
void Cx75::set_allocated_eps_0x260_260(::jmc_auto::canbus::Eps_0x260_260* eps_0x260_260) {
  delete eps_0x260_260_;
  eps_0x260_260_ = eps_0x260_260;
  if (eps_0x260_260) {
    set_has_eps_0x260_260();
  } else {
    clear_has_eps_0x260_260();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.eps_0x260_260)
}

// optional .jmc_auto.canbus.Sod_0x275_275 sod_0x275_275 = 46;
bool Cx75::has_sod_0x275_275() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void Cx75::set_has_sod_0x275_275() {
  _has_bits_[1] |= 0x00002000u;
}
void Cx75::clear_has_sod_0x275_275() {
  _has_bits_[1] &= ~0x00002000u;
}
void Cx75::clear_sod_0x275_275() {
  if (sod_0x275_275_ != NULL) sod_0x275_275_->::jmc_auto::canbus::Sod_0x275_275::Clear();
  clear_has_sod_0x275_275();
}
const ::jmc_auto::canbus::Sod_0x275_275& Cx75::sod_0x275_275() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.sod_0x275_275)
  return sod_0x275_275_ != NULL ? *sod_0x275_275_
                         : *::jmc_auto::canbus::Sod_0x275_275::internal_default_instance();
}
::jmc_auto::canbus::Sod_0x275_275* Cx75::mutable_sod_0x275_275() {
  set_has_sod_0x275_275();
  if (sod_0x275_275_ == NULL) {
    sod_0x275_275_ = new ::jmc_auto::canbus::Sod_0x275_275;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.sod_0x275_275)
  return sod_0x275_275_;
}
::jmc_auto::canbus::Sod_0x275_275* Cx75::release_sod_0x275_275() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.sod_0x275_275)
  clear_has_sod_0x275_275();
  ::jmc_auto::canbus::Sod_0x275_275* temp = sod_0x275_275_;
  sod_0x275_275_ = NULL;
  return temp;
}
void Cx75::set_allocated_sod_0x275_275(::jmc_auto::canbus::Sod_0x275_275* sod_0x275_275) {
  delete sod_0x275_275_;
  sod_0x275_275_ = sod_0x275_275;
  if (sod_0x275_275) {
    set_has_sod_0x275_275();
  } else {
    clear_has_sod_0x275_275();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.sod_0x275_275)
}

// optional .jmc_auto.canbus.Gw_tpms_tire_0x361_361 gw_tpms_tire_0x361_361 = 47;
bool Cx75::has_gw_tpms_tire_0x361_361() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void Cx75::set_has_gw_tpms_tire_0x361_361() {
  _has_bits_[1] |= 0x00004000u;
}
void Cx75::clear_has_gw_tpms_tire_0x361_361() {
  _has_bits_[1] &= ~0x00004000u;
}
void Cx75::clear_gw_tpms_tire_0x361_361() {
  if (gw_tpms_tire_0x361_361_ != NULL) gw_tpms_tire_0x361_361_->::jmc_auto::canbus::Gw_tpms_tire_0x361_361::Clear();
  clear_has_gw_tpms_tire_0x361_361();
}
const ::jmc_auto::canbus::Gw_tpms_tire_0x361_361& Cx75::gw_tpms_tire_0x361_361() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.gw_tpms_tire_0x361_361)
  return gw_tpms_tire_0x361_361_ != NULL ? *gw_tpms_tire_0x361_361_
                         : *::jmc_auto::canbus::Gw_tpms_tire_0x361_361::internal_default_instance();
}
::jmc_auto::canbus::Gw_tpms_tire_0x361_361* Cx75::mutable_gw_tpms_tire_0x361_361() {
  set_has_gw_tpms_tire_0x361_361();
  if (gw_tpms_tire_0x361_361_ == NULL) {
    gw_tpms_tire_0x361_361_ = new ::jmc_auto::canbus::Gw_tpms_tire_0x361_361;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.gw_tpms_tire_0x361_361)
  return gw_tpms_tire_0x361_361_;
}
::jmc_auto::canbus::Gw_tpms_tire_0x361_361* Cx75::release_gw_tpms_tire_0x361_361() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.gw_tpms_tire_0x361_361)
  clear_has_gw_tpms_tire_0x361_361();
  ::jmc_auto::canbus::Gw_tpms_tire_0x361_361* temp = gw_tpms_tire_0x361_361_;
  gw_tpms_tire_0x361_361_ = NULL;
  return temp;
}
void Cx75::set_allocated_gw_tpms_tire_0x361_361(::jmc_auto::canbus::Gw_tpms_tire_0x361_361* gw_tpms_tire_0x361_361) {
  delete gw_tpms_tire_0x361_361_;
  gw_tpms_tire_0x361_361_ = gw_tpms_tire_0x361_361;
  if (gw_tpms_tire_0x361_361) {
    set_has_gw_tpms_tire_0x361_361();
  } else {
    clear_has_gw_tpms_tire_0x361_361();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.gw_tpms_tire_0x361_361)
}

// optional .jmc_auto.canbus.Ins_datainfo_506 ins_datainfo_506 = 48;
bool Cx75::has_ins_datainfo_506() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void Cx75::set_has_ins_datainfo_506() {
  _has_bits_[1] |= 0x00008000u;
}
void Cx75::clear_has_ins_datainfo_506() {
  _has_bits_[1] &= ~0x00008000u;
}
void Cx75::clear_ins_datainfo_506() {
  if (ins_datainfo_506_ != NULL) ins_datainfo_506_->::jmc_auto::canbus::Ins_datainfo_506::Clear();
  clear_has_ins_datainfo_506();
}
const ::jmc_auto::canbus::Ins_datainfo_506& Cx75::ins_datainfo_506() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ins_datainfo_506)
  return ins_datainfo_506_ != NULL ? *ins_datainfo_506_
                         : *::jmc_auto::canbus::Ins_datainfo_506::internal_default_instance();
}
::jmc_auto::canbus::Ins_datainfo_506* Cx75::mutable_ins_datainfo_506() {
  set_has_ins_datainfo_506();
  if (ins_datainfo_506_ == NULL) {
    ins_datainfo_506_ = new ::jmc_auto::canbus::Ins_datainfo_506;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ins_datainfo_506)
  return ins_datainfo_506_;
}
::jmc_auto::canbus::Ins_datainfo_506* Cx75::release_ins_datainfo_506() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ins_datainfo_506)
  clear_has_ins_datainfo_506();
  ::jmc_auto::canbus::Ins_datainfo_506* temp = ins_datainfo_506_;
  ins_datainfo_506_ = NULL;
  return temp;
}
void Cx75::set_allocated_ins_datainfo_506(::jmc_auto::canbus::Ins_datainfo_506* ins_datainfo_506) {
  delete ins_datainfo_506_;
  ins_datainfo_506_ = ins_datainfo_506;
  if (ins_datainfo_506) {
    set_has_ins_datainfo_506();
  } else {
    clear_has_ins_datainfo_506();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ins_datainfo_506)
}

// optional .jmc_auto.canbus.Ins_std_507 ins_std_507 = 49;
bool Cx75::has_ins_std_507() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void Cx75::set_has_ins_std_507() {
  _has_bits_[1] |= 0x00010000u;
}
void Cx75::clear_has_ins_std_507() {
  _has_bits_[1] &= ~0x00010000u;
}
void Cx75::clear_ins_std_507() {
  if (ins_std_507_ != NULL) ins_std_507_->::jmc_auto::canbus::Ins_std_507::Clear();
  clear_has_ins_std_507();
}
const ::jmc_auto::canbus::Ins_std_507& Cx75::ins_std_507() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ins_std_507)
  return ins_std_507_ != NULL ? *ins_std_507_
                         : *::jmc_auto::canbus::Ins_std_507::internal_default_instance();
}
::jmc_auto::canbus::Ins_std_507* Cx75::mutable_ins_std_507() {
  set_has_ins_std_507();
  if (ins_std_507_ == NULL) {
    ins_std_507_ = new ::jmc_auto::canbus::Ins_std_507;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ins_std_507)
  return ins_std_507_;
}
::jmc_auto::canbus::Ins_std_507* Cx75::release_ins_std_507() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ins_std_507)
  clear_has_ins_std_507();
  ::jmc_auto::canbus::Ins_std_507* temp = ins_std_507_;
  ins_std_507_ = NULL;
  return temp;
}
void Cx75::set_allocated_ins_std_507(::jmc_auto::canbus::Ins_std_507* ins_std_507) {
  delete ins_std_507_;
  ins_std_507_ = ins_std_507;
  if (ins_std_507) {
    set_has_ins_std_507();
  } else {
    clear_has_ins_std_507();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ins_std_507)
}

// optional .jmc_auto.canbus.Ins_latitudelongitude_504 ins_latitudelongitude_504 = 50;
bool Cx75::has_ins_latitudelongitude_504() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void Cx75::set_has_ins_latitudelongitude_504() {
  _has_bits_[1] |= 0x00020000u;
}
void Cx75::clear_has_ins_latitudelongitude_504() {
  _has_bits_[1] &= ~0x00020000u;
}
void Cx75::clear_ins_latitudelongitude_504() {
  if (ins_latitudelongitude_504_ != NULL) ins_latitudelongitude_504_->::jmc_auto::canbus::Ins_latitudelongitude_504::Clear();
  clear_has_ins_latitudelongitude_504();
}
const ::jmc_auto::canbus::Ins_latitudelongitude_504& Cx75::ins_latitudelongitude_504() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ins_latitudelongitude_504)
  return ins_latitudelongitude_504_ != NULL ? *ins_latitudelongitude_504_
                         : *::jmc_auto::canbus::Ins_latitudelongitude_504::internal_default_instance();
}
::jmc_auto::canbus::Ins_latitudelongitude_504* Cx75::mutable_ins_latitudelongitude_504() {
  set_has_ins_latitudelongitude_504();
  if (ins_latitudelongitude_504_ == NULL) {
    ins_latitudelongitude_504_ = new ::jmc_auto::canbus::Ins_latitudelongitude_504;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ins_latitudelongitude_504)
  return ins_latitudelongitude_504_;
}
::jmc_auto::canbus::Ins_latitudelongitude_504* Cx75::release_ins_latitudelongitude_504() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ins_latitudelongitude_504)
  clear_has_ins_latitudelongitude_504();
  ::jmc_auto::canbus::Ins_latitudelongitude_504* temp = ins_latitudelongitude_504_;
  ins_latitudelongitude_504_ = NULL;
  return temp;
}
void Cx75::set_allocated_ins_latitudelongitude_504(::jmc_auto::canbus::Ins_latitudelongitude_504* ins_latitudelongitude_504) {
  delete ins_latitudelongitude_504_;
  ins_latitudelongitude_504_ = ins_latitudelongitude_504;
  if (ins_latitudelongitude_504) {
    set_has_ins_latitudelongitude_504();
  } else {
    clear_has_ins_latitudelongitude_504();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ins_latitudelongitude_504)
}

// optional .jmc_auto.canbus.Ins_speed_505 ins_speed_505 = 51;
bool Cx75::has_ins_speed_505() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void Cx75::set_has_ins_speed_505() {
  _has_bits_[1] |= 0x00040000u;
}
void Cx75::clear_has_ins_speed_505() {
  _has_bits_[1] &= ~0x00040000u;
}
void Cx75::clear_ins_speed_505() {
  if (ins_speed_505_ != NULL) ins_speed_505_->::jmc_auto::canbus::Ins_speed_505::Clear();
  clear_has_ins_speed_505();
}
const ::jmc_auto::canbus::Ins_speed_505& Cx75::ins_speed_505() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ins_speed_505)
  return ins_speed_505_ != NULL ? *ins_speed_505_
                         : *::jmc_auto::canbus::Ins_speed_505::internal_default_instance();
}
::jmc_auto::canbus::Ins_speed_505* Cx75::mutable_ins_speed_505() {
  set_has_ins_speed_505();
  if (ins_speed_505_ == NULL) {
    ins_speed_505_ = new ::jmc_auto::canbus::Ins_speed_505;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ins_speed_505)
  return ins_speed_505_;
}
::jmc_auto::canbus::Ins_speed_505* Cx75::release_ins_speed_505() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ins_speed_505)
  clear_has_ins_speed_505();
  ::jmc_auto::canbus::Ins_speed_505* temp = ins_speed_505_;
  ins_speed_505_ = NULL;
  return temp;
}
void Cx75::set_allocated_ins_speed_505(::jmc_auto::canbus::Ins_speed_505* ins_speed_505) {
  delete ins_speed_505_;
  ins_speed_505_ = ins_speed_505;
  if (ins_speed_505) {
    set_has_ins_speed_505();
  } else {
    clear_has_ins_speed_505();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ins_speed_505)
}

// optional .jmc_auto.canbus.Ins_headingpitchroll_502 ins_headingpitchroll_502 = 52;
bool Cx75::has_ins_headingpitchroll_502() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void Cx75::set_has_ins_headingpitchroll_502() {
  _has_bits_[1] |= 0x00080000u;
}
void Cx75::clear_has_ins_headingpitchroll_502() {
  _has_bits_[1] &= ~0x00080000u;
}
void Cx75::clear_ins_headingpitchroll_502() {
  if (ins_headingpitchroll_502_ != NULL) ins_headingpitchroll_502_->::jmc_auto::canbus::Ins_headingpitchroll_502::Clear();
  clear_has_ins_headingpitchroll_502();
}
const ::jmc_auto::canbus::Ins_headingpitchroll_502& Cx75::ins_headingpitchroll_502() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ins_headingpitchroll_502)
  return ins_headingpitchroll_502_ != NULL ? *ins_headingpitchroll_502_
                         : *::jmc_auto::canbus::Ins_headingpitchroll_502::internal_default_instance();
}
::jmc_auto::canbus::Ins_headingpitchroll_502* Cx75::mutable_ins_headingpitchroll_502() {
  set_has_ins_headingpitchroll_502();
  if (ins_headingpitchroll_502_ == NULL) {
    ins_headingpitchroll_502_ = new ::jmc_auto::canbus::Ins_headingpitchroll_502;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ins_headingpitchroll_502)
  return ins_headingpitchroll_502_;
}
::jmc_auto::canbus::Ins_headingpitchroll_502* Cx75::release_ins_headingpitchroll_502() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ins_headingpitchroll_502)
  clear_has_ins_headingpitchroll_502();
  ::jmc_auto::canbus::Ins_headingpitchroll_502* temp = ins_headingpitchroll_502_;
  ins_headingpitchroll_502_ = NULL;
  return temp;
}
void Cx75::set_allocated_ins_headingpitchroll_502(::jmc_auto::canbus::Ins_headingpitchroll_502* ins_headingpitchroll_502) {
  delete ins_headingpitchroll_502_;
  ins_headingpitchroll_502_ = ins_headingpitchroll_502;
  if (ins_headingpitchroll_502) {
    set_has_ins_headingpitchroll_502();
  } else {
    clear_has_ins_headingpitchroll_502();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ins_headingpitchroll_502)
}

// optional .jmc_auto.canbus.Ins_heightandtime_503 ins_heightandtime_503 = 53;
bool Cx75::has_ins_heightandtime_503() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void Cx75::set_has_ins_heightandtime_503() {
  _has_bits_[1] |= 0x00100000u;
}
void Cx75::clear_has_ins_heightandtime_503() {
  _has_bits_[1] &= ~0x00100000u;
}
void Cx75::clear_ins_heightandtime_503() {
  if (ins_heightandtime_503_ != NULL) ins_heightandtime_503_->::jmc_auto::canbus::Ins_heightandtime_503::Clear();
  clear_has_ins_heightandtime_503();
}
const ::jmc_auto::canbus::Ins_heightandtime_503& Cx75::ins_heightandtime_503() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ins_heightandtime_503)
  return ins_heightandtime_503_ != NULL ? *ins_heightandtime_503_
                         : *::jmc_auto::canbus::Ins_heightandtime_503::internal_default_instance();
}
::jmc_auto::canbus::Ins_heightandtime_503* Cx75::mutable_ins_heightandtime_503() {
  set_has_ins_heightandtime_503();
  if (ins_heightandtime_503_ == NULL) {
    ins_heightandtime_503_ = new ::jmc_auto::canbus::Ins_heightandtime_503;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ins_heightandtime_503)
  return ins_heightandtime_503_;
}
::jmc_auto::canbus::Ins_heightandtime_503* Cx75::release_ins_heightandtime_503() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ins_heightandtime_503)
  clear_has_ins_heightandtime_503();
  ::jmc_auto::canbus::Ins_heightandtime_503* temp = ins_heightandtime_503_;
  ins_heightandtime_503_ = NULL;
  return temp;
}
void Cx75::set_allocated_ins_heightandtime_503(::jmc_auto::canbus::Ins_heightandtime_503* ins_heightandtime_503) {
  delete ins_heightandtime_503_;
  ins_heightandtime_503_ = ins_heightandtime_503;
  if (ins_heightandtime_503) {
    set_has_ins_heightandtime_503();
  } else {
    clear_has_ins_heightandtime_503();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ins_heightandtime_503)
}

// optional .jmc_auto.canbus.Ins_gyro_501 ins_gyro_501 = 54;
bool Cx75::has_ins_gyro_501() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void Cx75::set_has_ins_gyro_501() {
  _has_bits_[1] |= 0x00200000u;
}
void Cx75::clear_has_ins_gyro_501() {
  _has_bits_[1] &= ~0x00200000u;
}
void Cx75::clear_ins_gyro_501() {
  if (ins_gyro_501_ != NULL) ins_gyro_501_->::jmc_auto::canbus::Ins_gyro_501::Clear();
  clear_has_ins_gyro_501();
}
const ::jmc_auto::canbus::Ins_gyro_501& Cx75::ins_gyro_501() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ins_gyro_501)
  return ins_gyro_501_ != NULL ? *ins_gyro_501_
                         : *::jmc_auto::canbus::Ins_gyro_501::internal_default_instance();
}
::jmc_auto::canbus::Ins_gyro_501* Cx75::mutable_ins_gyro_501() {
  set_has_ins_gyro_501();
  if (ins_gyro_501_ == NULL) {
    ins_gyro_501_ = new ::jmc_auto::canbus::Ins_gyro_501;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ins_gyro_501)
  return ins_gyro_501_;
}
::jmc_auto::canbus::Ins_gyro_501* Cx75::release_ins_gyro_501() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ins_gyro_501)
  clear_has_ins_gyro_501();
  ::jmc_auto::canbus::Ins_gyro_501* temp = ins_gyro_501_;
  ins_gyro_501_ = NULL;
  return temp;
}
void Cx75::set_allocated_ins_gyro_501(::jmc_auto::canbus::Ins_gyro_501* ins_gyro_501) {
  delete ins_gyro_501_;
  ins_gyro_501_ = ins_gyro_501;
  if (ins_gyro_501) {
    set_has_ins_gyro_501();
  } else {
    clear_has_ins_gyro_501();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ins_gyro_501)
}

// optional .jmc_auto.canbus.Ins_acc_500 ins_acc_500 = 55;
bool Cx75::has_ins_acc_500() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void Cx75::set_has_ins_acc_500() {
  _has_bits_[1] |= 0x00400000u;
}
void Cx75::clear_has_ins_acc_500() {
  _has_bits_[1] &= ~0x00400000u;
}
void Cx75::clear_ins_acc_500() {
  if (ins_acc_500_ != NULL) ins_acc_500_->::jmc_auto::canbus::Ins_acc_500::Clear();
  clear_has_ins_acc_500();
}
const ::jmc_auto::canbus::Ins_acc_500& Cx75::ins_acc_500() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Cx75.ins_acc_500)
  return ins_acc_500_ != NULL ? *ins_acc_500_
                         : *::jmc_auto::canbus::Ins_acc_500::internal_default_instance();
}
::jmc_auto::canbus::Ins_acc_500* Cx75::mutable_ins_acc_500() {
  set_has_ins_acc_500();
  if (ins_acc_500_ == NULL) {
    ins_acc_500_ = new ::jmc_auto::canbus::Ins_acc_500;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Cx75.ins_acc_500)
  return ins_acc_500_;
}
::jmc_auto::canbus::Ins_acc_500* Cx75::release_ins_acc_500() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Cx75.ins_acc_500)
  clear_has_ins_acc_500();
  ::jmc_auto::canbus::Ins_acc_500* temp = ins_acc_500_;
  ins_acc_500_ = NULL;
  return temp;
}
void Cx75::set_allocated_ins_acc_500(::jmc_auto::canbus::Ins_acc_500* ins_acc_500) {
  delete ins_acc_500_;
  ins_acc_500_ = ins_acc_500;
  if (ins_acc_500) {
    set_has_ins_acc_500();
  } else {
    clear_has_ins_acc_500();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Cx75.ins_acc_500)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
