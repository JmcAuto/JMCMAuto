// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/chassis.proto

#ifndef PROTOBUF_modules_2fcanbus_2fproto_2fchassis_2eproto__INCLUDED
#define PROTOBUF_modules_2fcanbus_2fproto_2fchassis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/vehicle_signal.pb.h"
#include "modules/common/proto/drive_state.pb.h"
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace canbus {
class Chassis;
class ChassisDefaultTypeInternal;
extern ChassisDefaultTypeInternal _Chassis_default_instance_;
class ChassisGPS;
class ChassisGPSDefaultTypeInternal;
extern ChassisGPSDefaultTypeInternal _ChassisGPS_default_instance_;
class License;
class LicenseDefaultTypeInternal;
extern LicenseDefaultTypeInternal _License_default_instance_;
class Signal;
class SignalDefaultTypeInternal;
extern SignalDefaultTypeInternal _Signal_default_instance_;
class Sonar;
class SonarDefaultTypeInternal;
extern SonarDefaultTypeInternal _Sonar_default_instance_;
class Surround;
class SurroundDefaultTypeInternal;
extern SurroundDefaultTypeInternal _Surround_default_instance_;
class WheelSpeed;
class WheelSpeedDefaultTypeInternal;
extern WheelSpeedDefaultTypeInternal _WheelSpeed_default_instance_;
}  // namespace canbus
namespace common {
class EngageAdvice;
class EngageAdviceDefaultTypeInternal;
extern EngageAdviceDefaultTypeInternal _EngageAdvice_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Point3D;
class Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class PointENU;
class PointENUDefaultTypeInternal;
extern PointENUDefaultTypeInternal _PointENU_default_instance_;
class PointLLH;
class PointLLHDefaultTypeInternal;
extern PointLLHDefaultTypeInternal _PointLLH_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class VehicleSignal;
class VehicleSignalDefaultTypeInternal;
extern VehicleSignalDefaultTypeInternal _VehicleSignal_default_instance_;
}  // namespace common
}  // namespace jmc_auto

namespace jmc_auto {
namespace canbus {

namespace protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto

enum Signal_TurnSignal {
  Signal_TurnSignal_TURN_NONE = 0,
  Signal_TurnSignal_TURN_LEFT = 1,
  Signal_TurnSignal_TURN_RIGHT = 2
};
bool Signal_TurnSignal_IsValid(int value);
const Signal_TurnSignal Signal_TurnSignal_TurnSignal_MIN = Signal_TurnSignal_TURN_NONE;
const Signal_TurnSignal Signal_TurnSignal_TurnSignal_MAX = Signal_TurnSignal_TURN_RIGHT;
const int Signal_TurnSignal_TurnSignal_ARRAYSIZE = Signal_TurnSignal_TurnSignal_MAX + 1;

const ::google::protobuf::EnumDescriptor* Signal_TurnSignal_descriptor();
inline const ::std::string& Signal_TurnSignal_Name(Signal_TurnSignal value) {
  return ::google::protobuf::internal::NameOfEnum(
    Signal_TurnSignal_descriptor(), value);
}
inline bool Signal_TurnSignal_Parse(
    const ::std::string& name, Signal_TurnSignal* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Signal_TurnSignal>(
    Signal_TurnSignal_descriptor(), name, value);
}
enum Chassis_DrivingMode {
  Chassis_DrivingMode_COMPLETE_MANUAL = 0,
  Chassis_DrivingMode_COMPLETE_AUTO_DRIVE = 1,
  Chassis_DrivingMode_AUTO_STEER_ONLY = 2,
  Chassis_DrivingMode_AUTO_SPEED_ONLY = 3,
  Chassis_DrivingMode_EMERGENCY_MODE = 4,
  Chassis_DrivingMode_REMOTE_MODE = 5,
  Chassis_DrivingMode_APA_MODE = 6
};
bool Chassis_DrivingMode_IsValid(int value);
const Chassis_DrivingMode Chassis_DrivingMode_DrivingMode_MIN = Chassis_DrivingMode_COMPLETE_MANUAL;
const Chassis_DrivingMode Chassis_DrivingMode_DrivingMode_MAX = Chassis_DrivingMode_APA_MODE;
const int Chassis_DrivingMode_DrivingMode_ARRAYSIZE = Chassis_DrivingMode_DrivingMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Chassis_DrivingMode_descriptor();
inline const ::std::string& Chassis_DrivingMode_Name(Chassis_DrivingMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Chassis_DrivingMode_descriptor(), value);
}
inline bool Chassis_DrivingMode_Parse(
    const ::std::string& name, Chassis_DrivingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_DrivingMode>(
    Chassis_DrivingMode_descriptor(), name, value);
}
enum Chassis_ErrorCode {
  Chassis_ErrorCode_NO_ERROR = 0,
  Chassis_ErrorCode_CMD_NOT_IN_PERIOD = 1,
  Chassis_ErrorCode_CHASSIS_ERROR = 2,
  Chassis_ErrorCode_MANUAL_INTERVENTION = 3,
  Chassis_ErrorCode_CHASSIS_CAN_NOT_IN_PERIOD = 4,
  Chassis_ErrorCode_UNKNOWN_ERROR = 5
};
bool Chassis_ErrorCode_IsValid(int value);
const Chassis_ErrorCode Chassis_ErrorCode_ErrorCode_MIN = Chassis_ErrorCode_NO_ERROR;
const Chassis_ErrorCode Chassis_ErrorCode_ErrorCode_MAX = Chassis_ErrorCode_UNKNOWN_ERROR;
const int Chassis_ErrorCode_ErrorCode_ARRAYSIZE = Chassis_ErrorCode_ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Chassis_ErrorCode_descriptor();
inline const ::std::string& Chassis_ErrorCode_Name(Chassis_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Chassis_ErrorCode_descriptor(), value);
}
inline bool Chassis_ErrorCode_Parse(
    const ::std::string& name, Chassis_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_ErrorCode>(
    Chassis_ErrorCode_descriptor(), name, value);
}
enum Chassis_GearPosition {
  Chassis_GearPosition_GEAR_NEUTRAL = 0,
  Chassis_GearPosition_GEAR_DRIVE = 1,
  Chassis_GearPosition_GEAR_REVERSE = 2,
  Chassis_GearPosition_GEAR_PARKING = 3,
  Chassis_GearPosition_GEAR_LOW = 4,
  Chassis_GearPosition_GEAR_INVALID = 5,
  Chassis_GearPosition_GEAR_NONE = 6
};
bool Chassis_GearPosition_IsValid(int value);
const Chassis_GearPosition Chassis_GearPosition_GearPosition_MIN = Chassis_GearPosition_GEAR_NEUTRAL;
const Chassis_GearPosition Chassis_GearPosition_GearPosition_MAX = Chassis_GearPosition_GEAR_NONE;
const int Chassis_GearPosition_GearPosition_ARRAYSIZE = Chassis_GearPosition_GearPosition_MAX + 1;

const ::google::protobuf::EnumDescriptor* Chassis_GearPosition_descriptor();
inline const ::std::string& Chassis_GearPosition_Name(Chassis_GearPosition value) {
  return ::google::protobuf::internal::NameOfEnum(
    Chassis_GearPosition_descriptor(), value);
}
inline bool Chassis_GearPosition_Parse(
    const ::std::string& name, Chassis_GearPosition* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_GearPosition>(
    Chassis_GearPosition_descriptor(), name, value);
}
enum Chassis_BrkPedalStasus {
  Chassis_BrkPedalStasus_NOT_PRESSED = 0,
  Chassis_BrkPedalStasus_PRESSED = 1,
  Chassis_BrkPedalStasus_RESERRVED = 2,
  Chassis_BrkPedalStasus_ERROR = 3
};
bool Chassis_BrkPedalStasus_IsValid(int value);
const Chassis_BrkPedalStasus Chassis_BrkPedalStasus_BrkPedalStasus_MIN = Chassis_BrkPedalStasus_NOT_PRESSED;
const Chassis_BrkPedalStasus Chassis_BrkPedalStasus_BrkPedalStasus_MAX = Chassis_BrkPedalStasus_ERROR;
const int Chassis_BrkPedalStasus_BrkPedalStasus_ARRAYSIZE = Chassis_BrkPedalStasus_BrkPedalStasus_MAX + 1;

const ::google::protobuf::EnumDescriptor* Chassis_BrkPedalStasus_descriptor();
inline const ::std::string& Chassis_BrkPedalStasus_Name(Chassis_BrkPedalStasus value) {
  return ::google::protobuf::internal::NameOfEnum(
    Chassis_BrkPedalStasus_descriptor(), value);
}
inline bool Chassis_BrkPedalStasus_Parse(
    const ::std::string& name, Chassis_BrkPedalStasus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Chassis_BrkPedalStasus>(
    Chassis_BrkPedalStasus_descriptor(), name, value);
}
enum WheelSpeed_WheelSpeedType {
  WheelSpeed_WheelSpeedType_FORWARD = 0,
  WheelSpeed_WheelSpeedType_BACKWARD = 1,
  WheelSpeed_WheelSpeedType_STANDSTILL = 2,
  WheelSpeed_WheelSpeedType_INVALID = 3
};
bool WheelSpeed_WheelSpeedType_IsValid(int value);
const WheelSpeed_WheelSpeedType WheelSpeed_WheelSpeedType_WheelSpeedType_MIN = WheelSpeed_WheelSpeedType_FORWARD;
const WheelSpeed_WheelSpeedType WheelSpeed_WheelSpeedType_WheelSpeedType_MAX = WheelSpeed_WheelSpeedType_INVALID;
const int WheelSpeed_WheelSpeedType_WheelSpeedType_ARRAYSIZE = WheelSpeed_WheelSpeedType_WheelSpeedType_MAX + 1;

const ::google::protobuf::EnumDescriptor* WheelSpeed_WheelSpeedType_descriptor();
inline const ::std::string& WheelSpeed_WheelSpeedType_Name(WheelSpeed_WheelSpeedType value) {
  return ::google::protobuf::internal::NameOfEnum(
    WheelSpeed_WheelSpeedType_descriptor(), value);
}
inline bool WheelSpeed_WheelSpeedType_Parse(
    const ::std::string& name, WheelSpeed_WheelSpeedType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WheelSpeed_WheelSpeedType>(
    WheelSpeed_WheelSpeedType_descriptor(), name, value);
}
enum GpsQuality {
  FIX_NO = 0,
  FIX_2D = 1,
  FIX_3D = 2,
  FIX_INVALID = 3
};
bool GpsQuality_IsValid(int value);
const GpsQuality GpsQuality_MIN = FIX_NO;
const GpsQuality GpsQuality_MAX = FIX_INVALID;
const int GpsQuality_ARRAYSIZE = GpsQuality_MAX + 1;

const ::google::protobuf::EnumDescriptor* GpsQuality_descriptor();
inline const ::std::string& GpsQuality_Name(GpsQuality value) {
  return ::google::protobuf::internal::NameOfEnum(
    GpsQuality_descriptor(), value);
}
inline bool GpsQuality_Parse(
    const ::std::string& name, GpsQuality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GpsQuality>(
    GpsQuality_descriptor(), name, value);
}
// ===================================================================

class Signal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Signal) */ {
 public:
  Signal();
  virtual ~Signal();

  Signal(const Signal& from);

  inline Signal& operator=(const Signal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Signal& default_instance();

  static inline const Signal* internal_default_instance() {
    return reinterpret_cast<const Signal*>(
               &_Signal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Signal* other);

  // implements Message ----------------------------------------------

  inline Signal* New() const PROTOBUF_FINAL { return New(NULL); }

  Signal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Signal& from);
  void MergeFrom(const Signal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Signal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Signal_TurnSignal TurnSignal;
  static const TurnSignal TURN_NONE =
    Signal_TurnSignal_TURN_NONE;
  static const TurnSignal TURN_LEFT =
    Signal_TurnSignal_TURN_LEFT;
  static const TurnSignal TURN_RIGHT =
    Signal_TurnSignal_TURN_RIGHT;
  static inline bool TurnSignal_IsValid(int value) {
    return Signal_TurnSignal_IsValid(value);
  }
  static const TurnSignal TurnSignal_MIN =
    Signal_TurnSignal_TurnSignal_MIN;
  static const TurnSignal TurnSignal_MAX =
    Signal_TurnSignal_TurnSignal_MAX;
  static const int TurnSignal_ARRAYSIZE =
    Signal_TurnSignal_TurnSignal_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TurnSignal_descriptor() {
    return Signal_TurnSignal_descriptor();
  }
  static inline const ::std::string& TurnSignal_Name(TurnSignal value) {
    return Signal_TurnSignal_Name(value);
  }
  static inline bool TurnSignal_Parse(const ::std::string& name,
      TurnSignal* value) {
    return Signal_TurnSignal_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.canbus.Signal.TurnSignal turn_signal = 1;
  bool has_turn_signal() const;
  void clear_turn_signal();
  static const int kTurnSignalFieldNumber = 1;
  ::jmc_auto::canbus::Signal_TurnSignal turn_signal() const;
  void set_turn_signal(::jmc_auto::canbus::Signal_TurnSignal value);

  // optional bool high_beam = 2;
  bool has_high_beam() const;
  void clear_high_beam();
  static const int kHighBeamFieldNumber = 2;
  bool high_beam() const;
  void set_high_beam(bool value);

  // optional bool low_beam = 3;
  bool has_low_beam() const;
  void clear_low_beam();
  static const int kLowBeamFieldNumber = 3;
  bool low_beam() const;
  void set_low_beam(bool value);

  // optional bool horn = 4;
  bool has_horn() const;
  void clear_horn();
  static const int kHornFieldNumber = 4;
  bool horn() const;
  void set_horn(bool value);

  // optional bool emergency_light = 5;
  bool has_emergency_light() const;
  void clear_emergency_light();
  static const int kEmergencyLightFieldNumber = 5;
  bool emergency_light() const;
  void set_emergency_light(bool value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Signal)
 private:
  void set_has_turn_signal();
  void clear_has_turn_signal();
  void set_has_high_beam();
  void clear_has_high_beam();
  void set_has_low_beam();
  void clear_has_low_beam();
  void set_has_horn();
  void clear_has_horn();
  void set_has_emergency_light();
  void clear_has_emergency_light();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int turn_signal_;
  bool high_beam_;
  bool low_beam_;
  bool horn_;
  bool emergency_light_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Chassis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Chassis) */ {
 public:
  Chassis();
  virtual ~Chassis();

  Chassis(const Chassis& from);

  inline Chassis& operator=(const Chassis& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chassis& default_instance();

  static inline const Chassis* internal_default_instance() {
    return reinterpret_cast<const Chassis*>(
               &_Chassis_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Chassis* other);

  // implements Message ----------------------------------------------

  inline Chassis* New() const PROTOBUF_FINAL { return New(NULL); }

  Chassis* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Chassis& from);
  void MergeFrom(const Chassis& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Chassis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Chassis_DrivingMode DrivingMode;
  static const DrivingMode COMPLETE_MANUAL =
    Chassis_DrivingMode_COMPLETE_MANUAL;
  static const DrivingMode COMPLETE_AUTO_DRIVE =
    Chassis_DrivingMode_COMPLETE_AUTO_DRIVE;
  static const DrivingMode AUTO_STEER_ONLY =
    Chassis_DrivingMode_AUTO_STEER_ONLY;
  static const DrivingMode AUTO_SPEED_ONLY =
    Chassis_DrivingMode_AUTO_SPEED_ONLY;
  static const DrivingMode EMERGENCY_MODE =
    Chassis_DrivingMode_EMERGENCY_MODE;
  static const DrivingMode REMOTE_MODE =
    Chassis_DrivingMode_REMOTE_MODE;
  static const DrivingMode APA_MODE =
    Chassis_DrivingMode_APA_MODE;
  static inline bool DrivingMode_IsValid(int value) {
    return Chassis_DrivingMode_IsValid(value);
  }
  static const DrivingMode DrivingMode_MIN =
    Chassis_DrivingMode_DrivingMode_MIN;
  static const DrivingMode DrivingMode_MAX =
    Chassis_DrivingMode_DrivingMode_MAX;
  static const int DrivingMode_ARRAYSIZE =
    Chassis_DrivingMode_DrivingMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DrivingMode_descriptor() {
    return Chassis_DrivingMode_descriptor();
  }
  static inline const ::std::string& DrivingMode_Name(DrivingMode value) {
    return Chassis_DrivingMode_Name(value);
  }
  static inline bool DrivingMode_Parse(const ::std::string& name,
      DrivingMode* value) {
    return Chassis_DrivingMode_Parse(name, value);
  }

  typedef Chassis_ErrorCode ErrorCode;
  static const ErrorCode NO_ERROR =
    Chassis_ErrorCode_NO_ERROR;
  static const ErrorCode CMD_NOT_IN_PERIOD =
    Chassis_ErrorCode_CMD_NOT_IN_PERIOD;
  static const ErrorCode CHASSIS_ERROR =
    Chassis_ErrorCode_CHASSIS_ERROR;
  static const ErrorCode MANUAL_INTERVENTION =
    Chassis_ErrorCode_MANUAL_INTERVENTION;
  static const ErrorCode CHASSIS_CAN_NOT_IN_PERIOD =
    Chassis_ErrorCode_CHASSIS_CAN_NOT_IN_PERIOD;
  static const ErrorCode UNKNOWN_ERROR =
    Chassis_ErrorCode_UNKNOWN_ERROR;
  static inline bool ErrorCode_IsValid(int value) {
    return Chassis_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    Chassis_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    Chassis_ErrorCode_ErrorCode_MAX;
  static const int ErrorCode_ARRAYSIZE =
    Chassis_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return Chassis_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return Chassis_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return Chassis_ErrorCode_Parse(name, value);
  }

  typedef Chassis_GearPosition GearPosition;
  static const GearPosition GEAR_NEUTRAL =
    Chassis_GearPosition_GEAR_NEUTRAL;
  static const GearPosition GEAR_DRIVE =
    Chassis_GearPosition_GEAR_DRIVE;
  static const GearPosition GEAR_REVERSE =
    Chassis_GearPosition_GEAR_REVERSE;
  static const GearPosition GEAR_PARKING =
    Chassis_GearPosition_GEAR_PARKING;
  static const GearPosition GEAR_LOW =
    Chassis_GearPosition_GEAR_LOW;
  static const GearPosition GEAR_INVALID =
    Chassis_GearPosition_GEAR_INVALID;
  static const GearPosition GEAR_NONE =
    Chassis_GearPosition_GEAR_NONE;
  static inline bool GearPosition_IsValid(int value) {
    return Chassis_GearPosition_IsValid(value);
  }
  static const GearPosition GearPosition_MIN =
    Chassis_GearPosition_GearPosition_MIN;
  static const GearPosition GearPosition_MAX =
    Chassis_GearPosition_GearPosition_MAX;
  static const int GearPosition_ARRAYSIZE =
    Chassis_GearPosition_GearPosition_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GearPosition_descriptor() {
    return Chassis_GearPosition_descriptor();
  }
  static inline const ::std::string& GearPosition_Name(GearPosition value) {
    return Chassis_GearPosition_Name(value);
  }
  static inline bool GearPosition_Parse(const ::std::string& name,
      GearPosition* value) {
    return Chassis_GearPosition_Parse(name, value);
  }

  typedef Chassis_BrkPedalStasus BrkPedalStasus;
  static const BrkPedalStasus NOT_PRESSED =
    Chassis_BrkPedalStasus_NOT_PRESSED;
  static const BrkPedalStasus PRESSED =
    Chassis_BrkPedalStasus_PRESSED;
  static const BrkPedalStasus RESERRVED =
    Chassis_BrkPedalStasus_RESERRVED;
  static const BrkPedalStasus ERROR =
    Chassis_BrkPedalStasus_ERROR;
  static inline bool BrkPedalStasus_IsValid(int value) {
    return Chassis_BrkPedalStasus_IsValid(value);
  }
  static const BrkPedalStasus BrkPedalStasus_MIN =
    Chassis_BrkPedalStasus_BrkPedalStasus_MIN;
  static const BrkPedalStasus BrkPedalStasus_MAX =
    Chassis_BrkPedalStasus_BrkPedalStasus_MAX;
  static const int BrkPedalStasus_ARRAYSIZE =
    Chassis_BrkPedalStasus_BrkPedalStasus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BrkPedalStasus_descriptor() {
    return Chassis_BrkPedalStasus_descriptor();
  }
  static inline const ::std::string& BrkPedalStasus_Name(BrkPedalStasus value) {
    return Chassis_BrkPedalStasus_Name(value);
  }
  static inline bool BrkPedalStasus_Parse(const ::std::string& name,
      BrkPedalStasus* value) {
    return Chassis_BrkPedalStasus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.common.Header header = 25;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 25;
  const ::jmc_auto::common::Header& header() const;
  ::jmc_auto::common::Header* mutable_header();
  ::jmc_auto::common::Header* release_header();
  void set_allocated_header(::jmc_auto::common::Header* header);

  // optional .jmc_auto.common.VehicleSignal signal = 27;
  bool has_signal() const;
  void clear_signal();
  static const int kSignalFieldNumber = 27;
  const ::jmc_auto::common::VehicleSignal& signal() const;
  ::jmc_auto::common::VehicleSignal* mutable_signal();
  ::jmc_auto::common::VehicleSignal* release_signal();
  void set_allocated_signal(::jmc_auto::common::VehicleSignal* signal);

  // optional .jmc_auto.canbus.ChassisGPS chassis_gps = 28;
  bool has_chassis_gps() const;
  void clear_chassis_gps();
  static const int kChassisGpsFieldNumber = 28;
  const ::jmc_auto::canbus::ChassisGPS& chassis_gps() const;
  ::jmc_auto::canbus::ChassisGPS* mutable_chassis_gps();
  ::jmc_auto::canbus::ChassisGPS* release_chassis_gps();
  void set_allocated_chassis_gps(::jmc_auto::canbus::ChassisGPS* chassis_gps);

  // optional .jmc_auto.common.EngageAdvice engage_advice = 29;
  bool has_engage_advice() const;
  void clear_engage_advice();
  static const int kEngageAdviceFieldNumber = 29;
  const ::jmc_auto::common::EngageAdvice& engage_advice() const;
  ::jmc_auto::common::EngageAdvice* mutable_engage_advice();
  ::jmc_auto::common::EngageAdvice* release_engage_advice();
  void set_allocated_engage_advice(::jmc_auto::common::EngageAdvice* engage_advice);

  // optional .jmc_auto.canbus.WheelSpeed wheel_speed = 30;
  bool has_wheel_speed() const;
  void clear_wheel_speed();
  static const int kWheelSpeedFieldNumber = 30;
  const ::jmc_auto::canbus::WheelSpeed& wheel_speed() const;
  ::jmc_auto::canbus::WheelSpeed* mutable_wheel_speed();
  ::jmc_auto::canbus::WheelSpeed* release_wheel_speed();
  void set_allocated_wheel_speed(::jmc_auto::canbus::WheelSpeed* wheel_speed);

  // optional .jmc_auto.canbus.Surround surround = 31;
  bool has_surround() const;
  void clear_surround();
  static const int kSurroundFieldNumber = 31;
  const ::jmc_auto::canbus::Surround& surround() const;
  ::jmc_auto::canbus::Surround* mutable_surround();
  ::jmc_auto::canbus::Surround* release_surround();
  void set_allocated_surround(::jmc_auto::canbus::Surround* surround);

  // optional int32 fuel_range_m = 7;
  bool has_fuel_range_m() const;
  void clear_fuel_range_m();
  static const int kFuelRangeMFieldNumber = 7;
  ::google::protobuf::int32 fuel_range_m() const;
  void set_fuel_range_m(::google::protobuf::int32 value);

  // optional bool engine_started = 3;
  bool has_engine_started() const;
  void clear_engine_started();
  static const int kEngineStartedFieldNumber = 3;
  bool engine_started() const;
  void set_engine_started(bool value);

  // optional bool parking_brake = 13;
  bool has_parking_brake() const;
  void clear_parking_brake();
  static const int kParkingBrakeFieldNumber = 13;
  bool parking_brake() const;
  void set_parking_brake(bool value);

  // optional bool high_beam_signal = 14 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_high_beam_signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_high_beam_signal();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kHighBeamSignalFieldNumber = 14;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool high_beam_signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_high_beam_signal(bool value);

  // optional bool low_beam_signal = 15 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_low_beam_signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_low_beam_signal();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kLowBeamSignalFieldNumber = 15;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool low_beam_signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_low_beam_signal(bool value);

  // optional bool left_turn_signal = 16 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_left_turn_signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_left_turn_signal();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kLeftTurnSignalFieldNumber = 16;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool left_turn_signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_left_turn_signal(bool value);

  // optional bool right_turn_signal = 17 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_right_turn_signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_right_turn_signal();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kRightTurnSignalFieldNumber = 17;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool right_turn_signal() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_right_turn_signal(bool value);

  // optional bool horn = 18 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_horn() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_horn();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kHornFieldNumber = 18;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool horn() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_horn(bool value);

  // optional bool wiper = 19;
  bool has_wiper() const;
  void clear_wiper();
  static const int kWiperFieldNumber = 19;
  bool wiper() const;
  void set_wiper(bool value);

  // optional .jmc_auto.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  bool has_driving_mode() const;
  void clear_driving_mode();
  static const int kDrivingModeFieldNumber = 21;
  ::jmc_auto::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::jmc_auto::canbus::Chassis_DrivingMode value);

  // optional .jmc_auto.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 22;
  ::jmc_auto::canbus::Chassis_ErrorCode error_code() const;
  void set_error_code(::jmc_auto::canbus::Chassis_ErrorCode value);

  // optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 23;
  bool has_gear_location() const;
  void clear_gear_location();
  static const int kGearLocationFieldNumber = 23;
  ::jmc_auto::canbus::Chassis_GearPosition gear_location() const;
  void set_gear_location(::jmc_auto::canbus::Chassis_GearPosition value);

  // optional double steering_timestamp = 24;
  bool has_steering_timestamp() const;
  void clear_steering_timestamp();
  static const int kSteeringTimestampFieldNumber = 24;
  double steering_timestamp() const;
  void set_steering_timestamp(double value);

  // optional int32 chassis_error_mask = 26 [default = 0];
  bool has_chassis_error_mask() const;
  void clear_chassis_error_mask();
  static const int kChassisErrorMaskFieldNumber = 26;
  ::google::protobuf::int32 chassis_error_mask() const;
  void set_chassis_error_mask(::google::protobuf::int32 value);

  // optional bool disengage_status = 20 [deprecated = true];
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool has_disengage_status() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void clear_disengage_status();
  GOOGLE_PROTOBUF_DEPRECATED_ATTR static const int kDisengageStatusFieldNumber = 20;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR bool disengage_status() const;
  GOOGLE_PROTOBUF_DEPRECATED_ATTR void set_disengage_status(bool value);

  // optional bool abs_vehspdlgt_valid = 35;
  bool has_abs_vehspdlgt_valid() const;
  void clear_abs_vehspdlgt_valid();
  static const int kAbsVehspdlgtValidFieldNumber = 35;
  bool abs_vehspdlgt_valid() const;
  void set_abs_vehspdlgt_valid(bool value);

  // optional bool esp_algtstatus_valid = 36;
  bool has_esp_algtstatus_valid() const;
  void clear_esp_algtstatus_valid();
  static const int kEspAlgtstatusValidFieldNumber = 36;
  bool esp_algtstatus_valid() const;
  void set_esp_algtstatus_valid(bool value);

  // optional bool sas_sasstssnsr_valid = 37;
  bool has_sas_sasstssnsr_valid() const;
  void clear_sas_sasstssnsr_valid();
  static const int kSasSasstssnsrValidFieldNumber = 37;
  bool sas_sasstssnsr_valid() const;
  void set_sas_sasstssnsr_valid(bool value);

  // optional float lon_acc = 33;
  bool has_lon_acc() const;
  void clear_lon_acc();
  static const int kLonAccFieldNumber = 33;
  float lon_acc() const;
  void set_lon_acc(float value);

  // optional float steer_wheel_rot_spd = 34;
  bool has_steer_wheel_rot_spd() const;
  void clear_steer_wheel_rot_spd();
  static const int kSteerWheelRotSpdFieldNumber = 34;
  float steer_wheel_rot_spd() const;
  void set_steer_wheel_rot_spd(float value);

  // optional bool steerwheelrotspd_valid = 38;
  bool has_steerwheelrotspd_valid() const;
  void clear_steerwheelrotspd_valid();
  static const int kSteerwheelrotspdValidFieldNumber = 38;
  bool steerwheelrotspd_valid() const;
  void set_steerwheelrotspd_valid(bool value);

  // optional bool eps_lkaresponsetorque_valid = 39;
  bool has_eps_lkaresponsetorque_valid() const;
  void clear_eps_lkaresponsetorque_valid();
  static const int kEpsLkaresponsetorqueValidFieldNumber = 39;
  bool eps_lkaresponsetorque_valid() const;
  void set_eps_lkaresponsetorque_valid(bool value);

  // optional bool eps_tosionbartorquevalid = 41;
  bool has_eps_tosionbartorquevalid() const;
  void clear_eps_tosionbartorquevalid();
  static const int kEpsTosionbartorquevalidFieldNumber = 41;
  bool eps_tosionbartorquevalid() const;
  void set_eps_tosionbartorquevalid(bool value);

  // optional float eps_torsionbartorque = 40;
  bool has_eps_torsionbartorque() const;
  void clear_eps_torsionbartorque();
  static const int kEpsTorsionbartorqueFieldNumber = 40;
  float eps_torsionbartorque() const;
  void set_eps_torsionbartorque(float value);

  // optional int32 abs_whlmilgfrntri = 42;
  bool has_abs_whlmilgfrntri() const;
  void clear_abs_whlmilgfrntri();
  static const int kAbsWhlmilgfrntriFieldNumber = 42;
  ::google::protobuf::int32 abs_whlmilgfrntri() const;
  void set_abs_whlmilgfrntri(::google::protobuf::int32 value);

  // optional int32 abs_whlmilgfrntle = 43;
  bool has_abs_whlmilgfrntle() const;
  void clear_abs_whlmilgfrntle();
  static const int kAbsWhlmilgfrntleFieldNumber = 43;
  ::google::protobuf::int32 abs_whlmilgfrntle() const;
  void set_abs_whlmilgfrntle(::google::protobuf::int32 value);

  // optional int32 abs_whlmilgrearre = 44;
  bool has_abs_whlmilgrearre() const;
  void clear_abs_whlmilgrearre();
  static const int kAbsWhlmilgrearreFieldNumber = 44;
  ::google::protobuf::int32 abs_whlmilgrearre() const;
  void set_abs_whlmilgrearre(::google::protobuf::int32 value);

  // optional int32 abs_whlmilgrearle = 45;
  bool has_abs_whlmilgrearle() const;
  void clear_abs_whlmilgrearle();
  static const int kAbsWhlmilgrearleFieldNumber = 45;
  ::google::protobuf::int32 abs_whlmilgrearle() const;
  void set_abs_whlmilgrearle(::google::protobuf::int32 value);

  // optional int32 esp_wheelpulse_fl = 46;
  bool has_esp_wheelpulse_fl() const;
  void clear_esp_wheelpulse_fl();
  static const int kEspWheelpulseFlFieldNumber = 46;
  ::google::protobuf::int32 esp_wheelpulse_fl() const;
  void set_esp_wheelpulse_fl(::google::protobuf::int32 value);

  // optional int32 esp_wheelpulse_fr = 47;
  bool has_esp_wheelpulse_fr() const;
  void clear_esp_wheelpulse_fr();
  static const int kEspWheelpulseFrFieldNumber = 47;
  ::google::protobuf::int32 esp_wheelpulse_fr() const;
  void set_esp_wheelpulse_fr(::google::protobuf::int32 value);

  // optional int32 esp_wheelpulse_rl = 48;
  bool has_esp_wheelpulse_rl() const;
  void clear_esp_wheelpulse_rl();
  static const int kEspWheelpulseRlFieldNumber = 48;
  ::google::protobuf::int32 esp_wheelpulse_rl() const;
  void set_esp_wheelpulse_rl(::google::protobuf::int32 value);

  // optional int32 esp_wheelpulse_rr = 49;
  bool has_esp_wheelpulse_rr() const;
  void clear_esp_wheelpulse_rr();
  static const int kEspWheelpulseRrFieldNumber = 49;
  ::google::protobuf::int32 esp_wheelpulse_rr() const;
  void set_esp_wheelpulse_rr(::google::protobuf::int32 value);

  // optional double ems_accpedalratio = 50;
  bool has_ems_accpedalratio() const;
  void clear_ems_accpedalratio();
  static const int kEmsAccpedalratioFieldNumber = 50;
  double ems_accpedalratio() const;
  void set_ems_accpedalratio(double value);

  // optional double abs_whlspdfrntle = 52;
  bool has_abs_whlspdfrntle() const;
  void clear_abs_whlspdfrntle();
  static const int kAbsWhlspdfrntleFieldNumber = 52;
  double abs_whlspdfrntle() const;
  void set_abs_whlspdfrntle(double value);

  // optional double abs_whlspdfrntri = 53;
  bool has_abs_whlspdfrntri() const;
  void clear_abs_whlspdfrntri();
  static const int kAbsWhlspdfrntriFieldNumber = 53;
  double abs_whlspdfrntri() const;
  void set_abs_whlspdfrntri(double value);

  // optional double abs_whlspdrele = 54;
  bool has_abs_whlspdrele() const;
  void clear_abs_whlspdrele();
  static const int kAbsWhlspdreleFieldNumber = 54;
  double abs_whlspdrele() const;
  void set_abs_whlspdrele(double value);

  // optional double abs_whlspdreri = 55;
  bool has_abs_whlspdreri() const;
  void clear_abs_whlspdreri();
  static const int kAbsWhlspdreriFieldNumber = 55;
  double abs_whlspdreri() const;
  void set_abs_whlspdreri(double value);

  // optional double acc_x = 56;
  bool has_acc_x() const;
  void clear_acc_x();
  static const int kAccXFieldNumber = 56;
  double acc_x() const;
  void set_acc_x(double value);

  // optional double acc_y = 57;
  bool has_acc_y() const;
  void clear_acc_y();
  static const int kAccYFieldNumber = 57;
  double acc_y() const;
  void set_acc_y(double value);

  // optional double acc_z = 58;
  bool has_acc_z() const;
  void clear_acc_z();
  static const int kAccZFieldNumber = 58;
  double acc_z() const;
  void set_acc_z(double value);

  // optional double gyro_x = 59;
  bool has_gyro_x() const;
  void clear_gyro_x();
  static const int kGyroXFieldNumber = 59;
  double gyro_x() const;
  void set_gyro_x(double value);

  // optional double gyro_y = 60;
  bool has_gyro_y() const;
  void clear_gyro_y();
  static const int kGyroYFieldNumber = 60;
  double gyro_y() const;
  void set_gyro_y(double value);

  // optional double gyro_z = 61;
  bool has_gyro_z() const;
  void clear_gyro_z();
  static const int kGyroZFieldNumber = 61;
  double gyro_z() const;
  void set_gyro_z(double value);

  // optional .jmc_auto.canbus.Chassis.BrkPedalStasus brkpedalstasus = 51;
  bool has_brkpedalstasus() const;
  void clear_brkpedalstasus();
  static const int kBrkpedalstasusFieldNumber = 51;
  ::jmc_auto::canbus::Chassis_BrkPedalStasus brkpedalstasus() const;
  void set_brkpedalstasus(::jmc_auto::canbus::Chassis_BrkPedalStasus value);

  // optional int32 ins_gpsflag_pos = 72;
  bool has_ins_gpsflag_pos() const;
  void clear_ins_gpsflag_pos();
  static const int kInsGpsflagPosFieldNumber = 72;
  ::google::protobuf::int32 ins_gpsflag_pos() const;
  void set_ins_gpsflag_pos(::google::protobuf::int32 value);

  // optional double ins_pitchangle = 62;
  bool has_ins_pitchangle() const;
  void clear_ins_pitchangle();
  static const int kInsPitchangleFieldNumber = 62;
  double ins_pitchangle() const;
  void set_ins_pitchangle(double value);

  // optional double ins_rollangle = 63;
  bool has_ins_rollangle() const;
  void clear_ins_rollangle();
  static const int kInsRollangleFieldNumber = 63;
  double ins_rollangle() const;
  void set_ins_rollangle(double value);

  // optional double ins_headingangle = 64;
  bool has_ins_headingangle() const;
  void clear_ins_headingangle();
  static const int kInsHeadingangleFieldNumber = 64;
  double ins_headingangle() const;
  void set_ins_headingangle(double value);

  // optional double ins_locatheight = 65;
  bool has_ins_locatheight() const;
  void clear_ins_locatheight();
  static const int kInsLocatheightFieldNumber = 65;
  double ins_locatheight() const;
  void set_ins_locatheight(double value);

  // optional double ins_time = 66;
  bool has_ins_time() const;
  void clear_ins_time();
  static const int kInsTimeFieldNumber = 66;
  double ins_time() const;
  void set_ins_time(double value);

  // optional double ins_latitude = 67;
  bool has_ins_latitude() const;
  void clear_ins_latitude();
  static const int kInsLatitudeFieldNumber = 67;
  double ins_latitude() const;
  void set_ins_latitude(double value);

  // optional double ins_longitude = 68;
  bool has_ins_longitude() const;
  void clear_ins_longitude();
  static const int kInsLongitudeFieldNumber = 68;
  double ins_longitude() const;
  void set_ins_longitude(double value);

  // optional double ins_northspd = 69;
  bool has_ins_northspd() const;
  void clear_ins_northspd();
  static const int kInsNorthspdFieldNumber = 69;
  double ins_northspd() const;
  void set_ins_northspd(double value);

  // optional double ins_eastspd = 70;
  bool has_ins_eastspd() const;
  void clear_ins_eastspd();
  static const int kInsEastspdFieldNumber = 70;
  double ins_eastspd() const;
  void set_ins_eastspd(double value);

  // optional double ins_togroundspd = 71;
  bool has_ins_togroundspd() const;
  void clear_ins_togroundspd();
  static const int kInsTogroundspdFieldNumber = 71;
  double ins_togroundspd() const;
  void set_ins_togroundspd(double value);

  // optional int32 ins_numsv = 73;
  bool has_ins_numsv() const;
  void clear_ins_numsv();
  static const int kInsNumsvFieldNumber = 73;
  ::google::protobuf::int32 ins_numsv() const;
  void set_ins_numsv(::google::protobuf::int32 value);

  // optional int32 ins_gpsflag_heading = 74;
  bool has_ins_gpsflag_heading() const;
  void clear_ins_gpsflag_heading();
  static const int kInsGpsflagHeadingFieldNumber = 74;
  ::google::protobuf::int32 ins_gpsflag_heading() const;
  void set_ins_gpsflag_heading(::google::protobuf::int32 value);

  // optional int32 ins_gps_age = 75;
  bool has_ins_gps_age() const;
  void clear_ins_gps_age();
  static const int kInsGpsAgeFieldNumber = 75;
  ::google::protobuf::int32 ins_gps_age() const;
  void set_ins_gps_age(::google::protobuf::int32 value);

  // optional int32 ins_car_status = 76;
  bool has_ins_car_status() const;
  void clear_ins_car_status();
  static const int kInsCarStatusFieldNumber = 76;
  ::google::protobuf::int32 ins_car_status() const;
  void set_ins_car_status(::google::protobuf::int32 value);

  // optional double ins_std_lat = 78;
  bool has_ins_std_lat() const;
  void clear_ins_std_lat();
  static const int kInsStdLatFieldNumber = 78;
  double ins_std_lat() const;
  void set_ins_std_lat(double value);

  // optional double ins_std_lon = 79;
  bool has_ins_std_lon() const;
  void clear_ins_std_lon();
  static const int kInsStdLonFieldNumber = 79;
  double ins_std_lon() const;
  void set_ins_std_lon(double value);

  // optional int32 ins_status = 77;
  bool has_ins_status() const;
  void clear_ins_status();
  static const int kInsStatusFieldNumber = 77;
  ::google::protobuf::int32 ins_status() const;
  void set_ins_status(::google::protobuf::int32 value);

  // optional int32 eps_lkacontrolstatus = 82;
  bool has_eps_lkacontrolstatus() const;
  void clear_eps_lkacontrolstatus();
  static const int kEpsLkacontrolstatusFieldNumber = 82;
  ::google::protobuf::int32 eps_lkacontrolstatus() const;
  void set_eps_lkacontrolstatus(::google::protobuf::int32 value);

  // optional double ins_std_locat_height = 80;
  bool has_ins_std_locat_height() const;
  void clear_ins_std_locat_height();
  static const int kInsStdLocatHeightFieldNumber = 80;
  double ins_std_locat_height() const;
  void set_ins_std_locat_height(double value);

  // optional double ins_std_heading = 81;
  bool has_ins_std_heading() const;
  void clear_ins_std_heading();
  static const int kInsStdHeadingFieldNumber = 81;
  double ins_std_heading() const;
  void set_ins_std_heading(double value);

  // optional int32 esp_vlc_active = 83;
  bool has_esp_vlc_active() const;
  void clear_esp_vlc_active();
  static const int kEspVlcActiveFieldNumber = 83;
  ::google::protobuf::int32 esp_vlc_active() const;
  void set_esp_vlc_active(::google::protobuf::int32 value);

  // optional int32 esp_vlc_available = 84;
  bool has_esp_vlc_available() const;
  void clear_esp_vlc_available();
  static const int kEspVlcAvailableFieldNumber = 84;
  ::google::protobuf::int32 esp_vlc_available() const;
  void set_esp_vlc_available(::google::protobuf::int32 value);

  // optional int32 esp_apa_gearboxenable = 85;
  bool has_esp_apa_gearboxenable() const;
  void clear_esp_apa_gearboxenable();
  static const int kEspApaGearboxenableFieldNumber = 85;
  ::google::protobuf::int32 esp_apa_gearboxenable() const;
  void set_esp_apa_gearboxenable(::google::protobuf::int32 value);

  // optional int32 esp_vlc_apactive = 86;
  bool has_esp_vlc_apactive() const;
  void clear_esp_vlc_apactive();
  static const int kEspVlcApactiveFieldNumber = 86;
  ::google::protobuf::int32 esp_vlc_apactive() const;
  void set_esp_vlc_apactive(::google::protobuf::int32 value);

  // optional int32 esp_vlcapa_available = 87;
  bool has_esp_vlcapa_available() const;
  void clear_esp_vlcapa_available();
  static const int kEspVlcapaAvailableFieldNumber = 87;
  ::google::protobuf::int32 esp_vlcapa_available() const;
  void set_esp_vlcapa_available(::google::protobuf::int32 value);

  // optional int32 esp_epbstatus = 88;
  bool has_esp_epbstatus() const;
  void clear_esp_epbstatus();
  static const int kEspEpbstatusFieldNumber = 88;
  ::google::protobuf::int32 esp_epbstatus() const;
  void set_esp_epbstatus(::google::protobuf::int32 value);

  // optional float steering_torque_nm = 12 [default = nan];
  bool has_steering_torque_nm() const;
  void clear_steering_torque_nm();
  static const int kSteeringTorqueNmFieldNumber = 12;
  float steering_torque_nm() const;
  void set_steering_torque_nm(float value);

  // optional float engine_rpm = 4 [default = nan];
  bool has_engine_rpm() const;
  void clear_engine_rpm();
  static const int kEngineRpmFieldNumber = 4;
  float engine_rpm() const;
  void set_engine_rpm(float value);

  // optional float speed_mps = 5 [default = nan];
  bool has_speed_mps() const;
  void clear_speed_mps();
  static const int kSpeedMpsFieldNumber = 5;
  float speed_mps() const;
  void set_speed_mps(float value);

  // optional float odometer_m = 6 [default = nan];
  bool has_odometer_m() const;
  void clear_odometer_m();
  static const int kOdometerMFieldNumber = 6;
  float odometer_m() const;
  void set_odometer_m(float value);

  // optional float throttle_percentage = 8 [default = nan];
  bool has_throttle_percentage() const;
  void clear_throttle_percentage();
  static const int kThrottlePercentageFieldNumber = 8;
  float throttle_percentage() const;
  void set_throttle_percentage(float value);

  // optional float brake_percentage = 9 [default = nan];
  bool has_brake_percentage() const;
  void clear_brake_percentage();
  static const int kBrakePercentageFieldNumber = 9;
  float brake_percentage() const;
  void set_brake_percentage(float value);

  // optional float steering_percentage = 11 [default = nan];
  bool has_steering_percentage() const;
  void clear_steering_percentage();
  static const int kSteeringPercentageFieldNumber = 11;
  float steering_percentage() const;
  void set_steering_percentage(float value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Chassis)
 private:
  void set_has_engine_started();
  void clear_has_engine_started();
  void set_has_engine_rpm();
  void clear_has_engine_rpm();
  void set_has_speed_mps();
  void clear_has_speed_mps();
  void set_has_odometer_m();
  void clear_has_odometer_m();
  void set_has_fuel_range_m();
  void clear_has_fuel_range_m();
  void set_has_throttle_percentage();
  void clear_has_throttle_percentage();
  void set_has_brake_percentage();
  void clear_has_brake_percentage();
  void set_has_steering_percentage();
  void clear_has_steering_percentage();
  void set_has_steering_torque_nm();
  void clear_has_steering_torque_nm();
  void set_has_parking_brake();
  void clear_has_parking_brake();
  void set_has_high_beam_signal();
  void clear_has_high_beam_signal();
  void set_has_low_beam_signal();
  void clear_has_low_beam_signal();
  void set_has_left_turn_signal();
  void clear_has_left_turn_signal();
  void set_has_right_turn_signal();
  void clear_has_right_turn_signal();
  void set_has_horn();
  void clear_has_horn();
  void set_has_wiper();
  void clear_has_wiper();
  void set_has_disengage_status();
  void clear_has_disengage_status();
  void set_has_driving_mode();
  void clear_has_driving_mode();
  void set_has_error_code();
  void clear_has_error_code();
  void set_has_gear_location();
  void clear_has_gear_location();
  void set_has_steering_timestamp();
  void clear_has_steering_timestamp();
  void set_has_header();
  void clear_has_header();
  void set_has_chassis_error_mask();
  void clear_has_chassis_error_mask();
  void set_has_signal();
  void clear_has_signal();
  void set_has_chassis_gps();
  void clear_has_chassis_gps();
  void set_has_engage_advice();
  void clear_has_engage_advice();
  void set_has_wheel_speed();
  void clear_has_wheel_speed();
  void set_has_surround();
  void clear_has_surround();
  void set_has_lon_acc();
  void clear_has_lon_acc();
  void set_has_steer_wheel_rot_spd();
  void clear_has_steer_wheel_rot_spd();
  void set_has_abs_vehspdlgt_valid();
  void clear_has_abs_vehspdlgt_valid();
  void set_has_esp_algtstatus_valid();
  void clear_has_esp_algtstatus_valid();
  void set_has_sas_sasstssnsr_valid();
  void clear_has_sas_sasstssnsr_valid();
  void set_has_steerwheelrotspd_valid();
  void clear_has_steerwheelrotspd_valid();
  void set_has_eps_lkaresponsetorque_valid();
  void clear_has_eps_lkaresponsetorque_valid();
  void set_has_eps_torsionbartorque();
  void clear_has_eps_torsionbartorque();
  void set_has_eps_tosionbartorquevalid();
  void clear_has_eps_tosionbartorquevalid();
  void set_has_abs_whlmilgfrntri();
  void clear_has_abs_whlmilgfrntri();
  void set_has_abs_whlmilgfrntle();
  void clear_has_abs_whlmilgfrntle();
  void set_has_abs_whlmilgrearre();
  void clear_has_abs_whlmilgrearre();
  void set_has_abs_whlmilgrearle();
  void clear_has_abs_whlmilgrearle();
  void set_has_esp_wheelpulse_fl();
  void clear_has_esp_wheelpulse_fl();
  void set_has_esp_wheelpulse_fr();
  void clear_has_esp_wheelpulse_fr();
  void set_has_esp_wheelpulse_rl();
  void clear_has_esp_wheelpulse_rl();
  void set_has_esp_wheelpulse_rr();
  void clear_has_esp_wheelpulse_rr();
  void set_has_ems_accpedalratio();
  void clear_has_ems_accpedalratio();
  void set_has_brkpedalstasus();
  void clear_has_brkpedalstasus();
  void set_has_abs_whlspdfrntle();
  void clear_has_abs_whlspdfrntle();
  void set_has_abs_whlspdfrntri();
  void clear_has_abs_whlspdfrntri();
  void set_has_abs_whlspdrele();
  void clear_has_abs_whlspdrele();
  void set_has_abs_whlspdreri();
  void clear_has_abs_whlspdreri();
  void set_has_acc_x();
  void clear_has_acc_x();
  void set_has_acc_y();
  void clear_has_acc_y();
  void set_has_acc_z();
  void clear_has_acc_z();
  void set_has_gyro_x();
  void clear_has_gyro_x();
  void set_has_gyro_y();
  void clear_has_gyro_y();
  void set_has_gyro_z();
  void clear_has_gyro_z();
  void set_has_ins_pitchangle();
  void clear_has_ins_pitchangle();
  void set_has_ins_rollangle();
  void clear_has_ins_rollangle();
  void set_has_ins_headingangle();
  void clear_has_ins_headingangle();
  void set_has_ins_locatheight();
  void clear_has_ins_locatheight();
  void set_has_ins_time();
  void clear_has_ins_time();
  void set_has_ins_latitude();
  void clear_has_ins_latitude();
  void set_has_ins_longitude();
  void clear_has_ins_longitude();
  void set_has_ins_northspd();
  void clear_has_ins_northspd();
  void set_has_ins_eastspd();
  void clear_has_ins_eastspd();
  void set_has_ins_togroundspd();
  void clear_has_ins_togroundspd();
  void set_has_ins_gpsflag_pos();
  void clear_has_ins_gpsflag_pos();
  void set_has_ins_numsv();
  void clear_has_ins_numsv();
  void set_has_ins_gpsflag_heading();
  void clear_has_ins_gpsflag_heading();
  void set_has_ins_gps_age();
  void clear_has_ins_gps_age();
  void set_has_ins_car_status();
  void clear_has_ins_car_status();
  void set_has_ins_status();
  void clear_has_ins_status();
  void set_has_ins_std_lat();
  void clear_has_ins_std_lat();
  void set_has_ins_std_lon();
  void clear_has_ins_std_lon();
  void set_has_ins_std_locat_height();
  void clear_has_ins_std_locat_height();
  void set_has_ins_std_heading();
  void clear_has_ins_std_heading();
  void set_has_eps_lkacontrolstatus();
  void clear_has_eps_lkacontrolstatus();
  void set_has_esp_vlc_active();
  void clear_has_esp_vlc_active();
  void set_has_esp_vlc_available();
  void clear_has_esp_vlc_available();
  void set_has_esp_apa_gearboxenable();
  void clear_has_esp_apa_gearboxenable();
  void set_has_esp_vlc_apactive();
  void clear_has_esp_vlc_apactive();
  void set_has_esp_vlcapa_available();
  void clear_has_esp_vlcapa_available();
  void set_has_esp_epbstatus();
  void clear_has_esp_epbstatus();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<3> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::common::Header* header_;
  ::jmc_auto::common::VehicleSignal* signal_;
  ::jmc_auto::canbus::ChassisGPS* chassis_gps_;
  ::jmc_auto::common::EngageAdvice* engage_advice_;
  ::jmc_auto::canbus::WheelSpeed* wheel_speed_;
  ::jmc_auto::canbus::Surround* surround_;
  ::google::protobuf::int32 fuel_range_m_;
  bool engine_started_;
  bool parking_brake_;
  bool high_beam_signal_;
  bool low_beam_signal_;
  bool left_turn_signal_;
  bool right_turn_signal_;
  bool horn_;
  bool wiper_;
  int driving_mode_;
  int error_code_;
  int gear_location_;
  double steering_timestamp_;
  ::google::protobuf::int32 chassis_error_mask_;
  bool disengage_status_;
  bool abs_vehspdlgt_valid_;
  bool esp_algtstatus_valid_;
  bool sas_sasstssnsr_valid_;
  float lon_acc_;
  float steer_wheel_rot_spd_;
  bool steerwheelrotspd_valid_;
  bool eps_lkaresponsetorque_valid_;
  bool eps_tosionbartorquevalid_;
  float eps_torsionbartorque_;
  ::google::protobuf::int32 abs_whlmilgfrntri_;
  ::google::protobuf::int32 abs_whlmilgfrntle_;
  ::google::protobuf::int32 abs_whlmilgrearre_;
  ::google::protobuf::int32 abs_whlmilgrearle_;
  ::google::protobuf::int32 esp_wheelpulse_fl_;
  ::google::protobuf::int32 esp_wheelpulse_fr_;
  ::google::protobuf::int32 esp_wheelpulse_rl_;
  ::google::protobuf::int32 esp_wheelpulse_rr_;
  double ems_accpedalratio_;
  double abs_whlspdfrntle_;
  double abs_whlspdfrntri_;
  double abs_whlspdrele_;
  double abs_whlspdreri_;
  double acc_x_;
  double acc_y_;
  double acc_z_;
  double gyro_x_;
  double gyro_y_;
  double gyro_z_;
  int brkpedalstasus_;
  ::google::protobuf::int32 ins_gpsflag_pos_;
  double ins_pitchangle_;
  double ins_rollangle_;
  double ins_headingangle_;
  double ins_locatheight_;
  double ins_time_;
  double ins_latitude_;
  double ins_longitude_;
  double ins_northspd_;
  double ins_eastspd_;
  double ins_togroundspd_;
  ::google::protobuf::int32 ins_numsv_;
  ::google::protobuf::int32 ins_gpsflag_heading_;
  ::google::protobuf::int32 ins_gps_age_;
  ::google::protobuf::int32 ins_car_status_;
  double ins_std_lat_;
  double ins_std_lon_;
  ::google::protobuf::int32 ins_status_;
  ::google::protobuf::int32 eps_lkacontrolstatus_;
  double ins_std_locat_height_;
  double ins_std_heading_;
  ::google::protobuf::int32 esp_vlc_active_;
  ::google::protobuf::int32 esp_vlc_available_;
  ::google::protobuf::int32 esp_apa_gearboxenable_;
  ::google::protobuf::int32 esp_vlc_apactive_;
  ::google::protobuf::int32 esp_vlcapa_available_;
  ::google::protobuf::int32 esp_epbstatus_;
  float steering_torque_nm_;
  float engine_rpm_;
  float speed_mps_;
  float odometer_m_;
  float throttle_percentage_;
  float brake_percentage_;
  float steering_percentage_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChassisGPS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.ChassisGPS) */ {
 public:
  ChassisGPS();
  virtual ~ChassisGPS();

  ChassisGPS(const ChassisGPS& from);

  inline ChassisGPS& operator=(const ChassisGPS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChassisGPS& default_instance();

  static inline const ChassisGPS* internal_default_instance() {
    return reinterpret_cast<const ChassisGPS*>(
               &_ChassisGPS_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ChassisGPS* other);

  // implements Message ----------------------------------------------

  inline ChassisGPS* New() const PROTOBUF_FINAL { return New(NULL); }

  ChassisGPS* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChassisGPS& from);
  void MergeFrom(const ChassisGPS& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChassisGPS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double latitude = 1;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  double latitude() const;
  void set_latitude(double value);

  // optional double longitude = 2;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // optional int32 year = 4;
  bool has_year() const;
  void clear_year();
  static const int kYearFieldNumber = 4;
  ::google::protobuf::int32 year() const;
  void set_year(::google::protobuf::int32 value);

  // optional int32 month = 5;
  bool has_month() const;
  void clear_month();
  static const int kMonthFieldNumber = 5;
  ::google::protobuf::int32 month() const;
  void set_month(::google::protobuf::int32 value);

  // optional int32 day = 6;
  bool has_day() const;
  void clear_day();
  static const int kDayFieldNumber = 6;
  ::google::protobuf::int32 day() const;
  void set_day(::google::protobuf::int32 value);

  // optional int32 hours = 7;
  bool has_hours() const;
  void clear_hours();
  static const int kHoursFieldNumber = 7;
  ::google::protobuf::int32 hours() const;
  void set_hours(::google::protobuf::int32 value);

  // optional int32 minutes = 8;
  bool has_minutes() const;
  void clear_minutes();
  static const int kMinutesFieldNumber = 8;
  ::google::protobuf::int32 minutes() const;
  void set_minutes(::google::protobuf::int32 value);

  // optional int32 seconds = 9;
  bool has_seconds() const;
  void clear_seconds();
  static const int kSecondsFieldNumber = 9;
  ::google::protobuf::int32 seconds() const;
  void set_seconds(::google::protobuf::int32 value);

  // optional double compass_direction = 10;
  bool has_compass_direction() const;
  void clear_compass_direction();
  static const int kCompassDirectionFieldNumber = 10;
  double compass_direction() const;
  void set_compass_direction(double value);

  // optional double pdop = 11;
  bool has_pdop() const;
  void clear_pdop();
  static const int kPdopFieldNumber = 11;
  double pdop() const;
  void set_pdop(double value);

  // optional bool gps_valid = 3;
  bool has_gps_valid() const;
  void clear_gps_valid();
  static const int kGpsValidFieldNumber = 3;
  bool gps_valid() const;
  void set_gps_valid(bool value);

  // optional bool is_gps_fault = 12;
  bool has_is_gps_fault() const;
  void clear_is_gps_fault();
  static const int kIsGpsFaultFieldNumber = 12;
  bool is_gps_fault() const;
  void set_is_gps_fault(bool value);

  // optional bool is_inferred = 13;
  bool has_is_inferred() const;
  void clear_is_inferred();
  static const int kIsInferredFieldNumber = 13;
  bool is_inferred() const;
  void set_is_inferred(bool value);

  // optional .jmc_auto.canbus.GpsQuality quality = 18;
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 18;
  ::jmc_auto::canbus::GpsQuality quality() const;
  void set_quality(::jmc_auto::canbus::GpsQuality value);

  // optional double altitude = 14;
  bool has_altitude() const;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 14;
  double altitude() const;
  void set_altitude(double value);

  // optional double heading = 15;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 15;
  double heading() const;
  void set_heading(double value);

  // optional double hdop = 16;
  bool has_hdop() const;
  void clear_hdop();
  static const int kHdopFieldNumber = 16;
  double hdop() const;
  void set_hdop(double value);

  // optional double vdop = 17;
  bool has_vdop() const;
  void clear_vdop();
  static const int kVdopFieldNumber = 17;
  double vdop() const;
  void set_vdop(double value);

  // optional double gps_speed = 20;
  bool has_gps_speed() const;
  void clear_gps_speed();
  static const int kGpsSpeedFieldNumber = 20;
  double gps_speed() const;
  void set_gps_speed(double value);

  // optional int32 num_satellites = 19;
  bool has_num_satellites() const;
  void clear_num_satellites();
  static const int kNumSatellitesFieldNumber = 19;
  ::google::protobuf::int32 num_satellites() const;
  void set_num_satellites(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.ChassisGPS)
 private:
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_gps_valid();
  void clear_has_gps_valid();
  void set_has_year();
  void clear_has_year();
  void set_has_month();
  void clear_has_month();
  void set_has_day();
  void clear_has_day();
  void set_has_hours();
  void clear_has_hours();
  void set_has_minutes();
  void clear_has_minutes();
  void set_has_seconds();
  void clear_has_seconds();
  void set_has_compass_direction();
  void clear_has_compass_direction();
  void set_has_pdop();
  void clear_has_pdop();
  void set_has_is_gps_fault();
  void clear_has_is_gps_fault();
  void set_has_is_inferred();
  void clear_has_is_inferred();
  void set_has_altitude();
  void clear_has_altitude();
  void set_has_heading();
  void clear_has_heading();
  void set_has_hdop();
  void clear_has_hdop();
  void set_has_vdop();
  void clear_has_vdop();
  void set_has_quality();
  void clear_has_quality();
  void set_has_num_satellites();
  void clear_has_num_satellites();
  void set_has_gps_speed();
  void clear_has_gps_speed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double latitude_;
  double longitude_;
  ::google::protobuf::int32 year_;
  ::google::protobuf::int32 month_;
  ::google::protobuf::int32 day_;
  ::google::protobuf::int32 hours_;
  ::google::protobuf::int32 minutes_;
  ::google::protobuf::int32 seconds_;
  double compass_direction_;
  double pdop_;
  bool gps_valid_;
  bool is_gps_fault_;
  bool is_inferred_;
  int quality_;
  double altitude_;
  double heading_;
  double hdop_;
  double vdop_;
  double gps_speed_;
  ::google::protobuf::int32 num_satellites_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WheelSpeed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.WheelSpeed) */ {
 public:
  WheelSpeed();
  virtual ~WheelSpeed();

  WheelSpeed(const WheelSpeed& from);

  inline WheelSpeed& operator=(const WheelSpeed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WheelSpeed& default_instance();

  static inline const WheelSpeed* internal_default_instance() {
    return reinterpret_cast<const WheelSpeed*>(
               &_WheelSpeed_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(WheelSpeed* other);

  // implements Message ----------------------------------------------

  inline WheelSpeed* New() const PROTOBUF_FINAL { return New(NULL); }

  WheelSpeed* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WheelSpeed& from);
  void MergeFrom(const WheelSpeed& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WheelSpeed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef WheelSpeed_WheelSpeedType WheelSpeedType;
  static const WheelSpeedType FORWARD =
    WheelSpeed_WheelSpeedType_FORWARD;
  static const WheelSpeedType BACKWARD =
    WheelSpeed_WheelSpeedType_BACKWARD;
  static const WheelSpeedType STANDSTILL =
    WheelSpeed_WheelSpeedType_STANDSTILL;
  static const WheelSpeedType INVALID =
    WheelSpeed_WheelSpeedType_INVALID;
  static inline bool WheelSpeedType_IsValid(int value) {
    return WheelSpeed_WheelSpeedType_IsValid(value);
  }
  static const WheelSpeedType WheelSpeedType_MIN =
    WheelSpeed_WheelSpeedType_WheelSpeedType_MIN;
  static const WheelSpeedType WheelSpeedType_MAX =
    WheelSpeed_WheelSpeedType_WheelSpeedType_MAX;
  static const int WheelSpeedType_ARRAYSIZE =
    WheelSpeed_WheelSpeedType_WheelSpeedType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WheelSpeedType_descriptor() {
    return WheelSpeed_WheelSpeedType_descriptor();
  }
  static inline const ::std::string& WheelSpeedType_Name(WheelSpeedType value) {
    return WheelSpeed_WheelSpeedType_Name(value);
  }
  static inline bool WheelSpeedType_Parse(const ::std::string& name,
      WheelSpeedType* value) {
    return WheelSpeed_WheelSpeedType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional double wheel_spd_rr = 3 [default = 0];
  bool has_wheel_spd_rr() const;
  void clear_wheel_spd_rr();
  static const int kWheelSpdRrFieldNumber = 3;
  double wheel_spd_rr() const;
  void set_wheel_spd_rr(double value);

  // optional double wheel_spd_rl = 6 [default = 0];
  bool has_wheel_spd_rl() const;
  void clear_wheel_spd_rl();
  static const int kWheelSpdRlFieldNumber = 6;
  double wheel_spd_rl() const;
  void set_wheel_spd_rl(double value);

  // optional double wheel_spd_fr = 9 [default = 0];
  bool has_wheel_spd_fr() const;
  void clear_wheel_spd_fr();
  static const int kWheelSpdFrFieldNumber = 9;
  double wheel_spd_fr() const;
  void set_wheel_spd_fr(double value);

  // optional double wheel_spd_fl = 12 [default = 0];
  bool has_wheel_spd_fl() const;
  void clear_wheel_spd_fl();
  static const int kWheelSpdFlFieldNumber = 12;
  double wheel_spd_fl() const;
  void set_wheel_spd_fl(double value);

  // optional bool is_wheel_spd_rr_valid = 1 [default = false];
  bool has_is_wheel_spd_rr_valid() const;
  void clear_is_wheel_spd_rr_valid();
  static const int kIsWheelSpdRrValidFieldNumber = 1;
  bool is_wheel_spd_rr_valid() const;
  void set_is_wheel_spd_rr_valid(bool value);

  // optional bool is_wheel_spd_rl_valid = 4 [default = false];
  bool has_is_wheel_spd_rl_valid() const;
  void clear_is_wheel_spd_rl_valid();
  static const int kIsWheelSpdRlValidFieldNumber = 4;
  bool is_wheel_spd_rl_valid() const;
  void set_is_wheel_spd_rl_valid(bool value);

  // optional bool is_wheel_spd_fr_valid = 7 [default = false];
  bool has_is_wheel_spd_fr_valid() const;
  void clear_is_wheel_spd_fr_valid();
  static const int kIsWheelSpdFrValidFieldNumber = 7;
  bool is_wheel_spd_fr_valid() const;
  void set_is_wheel_spd_fr_valid(bool value);

  // optional bool is_wheel_spd_fl_valid = 10 [default = false];
  bool has_is_wheel_spd_fl_valid() const;
  void clear_is_wheel_spd_fl_valid();
  static const int kIsWheelSpdFlValidFieldNumber = 10;
  bool is_wheel_spd_fl_valid() const;
  void set_is_wheel_spd_fl_valid(bool value);

  // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
  bool has_wheel_direction_rr() const;
  void clear_wheel_direction_rr();
  static const int kWheelDirectionRrFieldNumber = 2;
  ::jmc_auto::canbus::WheelSpeed_WheelSpeedType wheel_direction_rr() const;
  void set_wheel_direction_rr(::jmc_auto::canbus::WheelSpeed_WheelSpeedType value);

  // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
  bool has_wheel_direction_rl() const;
  void clear_wheel_direction_rl();
  static const int kWheelDirectionRlFieldNumber = 5;
  ::jmc_auto::canbus::WheelSpeed_WheelSpeedType wheel_direction_rl() const;
  void set_wheel_direction_rl(::jmc_auto::canbus::WheelSpeed_WheelSpeedType value);

  // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
  bool has_wheel_direction_fr() const;
  void clear_wheel_direction_fr();
  static const int kWheelDirectionFrFieldNumber = 8;
  ::jmc_auto::canbus::WheelSpeed_WheelSpeedType wheel_direction_fr() const;
  void set_wheel_direction_fr(::jmc_auto::canbus::WheelSpeed_WheelSpeedType value);

  // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
  bool has_wheel_direction_fl() const;
  void clear_wheel_direction_fl();
  static const int kWheelDirectionFlFieldNumber = 11;
  ::jmc_auto::canbus::WheelSpeed_WheelSpeedType wheel_direction_fl() const;
  void set_wheel_direction_fl(::jmc_auto::canbus::WheelSpeed_WheelSpeedType value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.WheelSpeed)
 private:
  void set_has_is_wheel_spd_rr_valid();
  void clear_has_is_wheel_spd_rr_valid();
  void set_has_wheel_direction_rr();
  void clear_has_wheel_direction_rr();
  void set_has_wheel_spd_rr();
  void clear_has_wheel_spd_rr();
  void set_has_is_wheel_spd_rl_valid();
  void clear_has_is_wheel_spd_rl_valid();
  void set_has_wheel_direction_rl();
  void clear_has_wheel_direction_rl();
  void set_has_wheel_spd_rl();
  void clear_has_wheel_spd_rl();
  void set_has_is_wheel_spd_fr_valid();
  void clear_has_is_wheel_spd_fr_valid();
  void set_has_wheel_direction_fr();
  void clear_has_wheel_direction_fr();
  void set_has_wheel_spd_fr();
  void clear_has_wheel_spd_fr();
  void set_has_is_wheel_spd_fl_valid();
  void clear_has_is_wheel_spd_fl_valid();
  void set_has_wheel_direction_fl();
  void clear_has_wheel_direction_fl();
  void set_has_wheel_spd_fl();
  void clear_has_wheel_spd_fl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double wheel_spd_rr_;
  double wheel_spd_rl_;
  double wheel_spd_fr_;
  double wheel_spd_fl_;
  bool is_wheel_spd_rr_valid_;
  bool is_wheel_spd_rl_valid_;
  bool is_wheel_spd_fr_valid_;
  bool is_wheel_spd_fl_valid_;
  int wheel_direction_rr_;
  int wheel_direction_rl_;
  int wheel_direction_fr_;
  int wheel_direction_fl_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Sonar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Sonar) */ {
 public:
  Sonar();
  virtual ~Sonar();

  Sonar(const Sonar& from);

  inline Sonar& operator=(const Sonar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sonar& default_instance();

  static inline const Sonar* internal_default_instance() {
    return reinterpret_cast<const Sonar*>(
               &_Sonar_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Sonar* other);

  // implements Message ----------------------------------------------

  inline Sonar* New() const PROTOBUF_FINAL { return New(NULL); }

  Sonar* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Sonar& from);
  void MergeFrom(const Sonar& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Sonar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .jmc_auto.common.Point3D translation = 2;
  bool has_translation() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 2;
  const ::jmc_auto::common::Point3D& translation() const;
  ::jmc_auto::common::Point3D* mutable_translation();
  ::jmc_auto::common::Point3D* release_translation();
  void set_allocated_translation(::jmc_auto::common::Point3D* translation);

  // optional .jmc_auto.common.Quaternion rotation = 3;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 3;
  const ::jmc_auto::common::Quaternion& rotation() const;
  ::jmc_auto::common::Quaternion* mutable_rotation();
  ::jmc_auto::common::Quaternion* release_rotation();
  void set_allocated_rotation(::jmc_auto::common::Quaternion* rotation);

  // optional double range = 1;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 1;
  double range() const;
  void set_range(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Sonar)
 private:
  void set_has_range();
  void clear_has_range();
  void set_has_translation();
  void clear_has_translation();
  void set_has_rotation();
  void clear_has_rotation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::common::Point3D* translation_;
  ::jmc_auto::common::Quaternion* rotation_;
  double range_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Surround : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.Surround) */ {
 public:
  Surround();
  virtual ~Surround();

  Surround(const Surround& from);

  inline Surround& operator=(const Surround& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Surround& default_instance();

  static inline const Surround* internal_default_instance() {
    return reinterpret_cast<const Surround*>(
               &_Surround_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Surround* other);

  // implements Message ----------------------------------------------

  inline Surround* New() const PROTOBUF_FINAL { return New(NULL); }

  Surround* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Surround& from);
  void MergeFrom(const Surround& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Surround* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double sonar_range = 23;
  int sonar_range_size() const;
  void clear_sonar_range();
  static const int kSonarRangeFieldNumber = 23;
  double sonar_range(int index) const;
  void set_sonar_range(int index, double value);
  void add_sonar_range(double value);
  const ::google::protobuf::RepeatedField< double >&
      sonar_range() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_sonar_range();

  // repeated .jmc_auto.canbus.Sonar sonar = 24;
  int sonar_size() const;
  void clear_sonar();
  static const int kSonarFieldNumber = 24;
  const ::jmc_auto::canbus::Sonar& sonar(int index) const;
  ::jmc_auto::canbus::Sonar* mutable_sonar(int index);
  ::jmc_auto::canbus::Sonar* add_sonar();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::canbus::Sonar >*
      mutable_sonar();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::canbus::Sonar >&
      sonar() const;

  // optional bool cross_traffic_alert_left = 1;
  bool has_cross_traffic_alert_left() const;
  void clear_cross_traffic_alert_left();
  static const int kCrossTrafficAlertLeftFieldNumber = 1;
  bool cross_traffic_alert_left() const;
  void set_cross_traffic_alert_left(bool value);

  // optional bool cross_traffic_alert_left_enabled = 2;
  bool has_cross_traffic_alert_left_enabled() const;
  void clear_cross_traffic_alert_left_enabled();
  static const int kCrossTrafficAlertLeftEnabledFieldNumber = 2;
  bool cross_traffic_alert_left_enabled() const;
  void set_cross_traffic_alert_left_enabled(bool value);

  // optional bool blind_spot_left_alert = 3;
  bool has_blind_spot_left_alert() const;
  void clear_blind_spot_left_alert();
  static const int kBlindSpotLeftAlertFieldNumber = 3;
  bool blind_spot_left_alert() const;
  void set_blind_spot_left_alert(bool value);

  // optional bool blind_spot_left_alert_enabled = 4;
  bool has_blind_spot_left_alert_enabled() const;
  void clear_blind_spot_left_alert_enabled();
  static const int kBlindSpotLeftAlertEnabledFieldNumber = 4;
  bool blind_spot_left_alert_enabled() const;
  void set_blind_spot_left_alert_enabled(bool value);

  // optional bool cross_traffic_alert_right = 5;
  bool has_cross_traffic_alert_right() const;
  void clear_cross_traffic_alert_right();
  static const int kCrossTrafficAlertRightFieldNumber = 5;
  bool cross_traffic_alert_right() const;
  void set_cross_traffic_alert_right(bool value);

  // optional bool cross_traffic_alert_right_enabled = 6;
  bool has_cross_traffic_alert_right_enabled() const;
  void clear_cross_traffic_alert_right_enabled();
  static const int kCrossTrafficAlertRightEnabledFieldNumber = 6;
  bool cross_traffic_alert_right_enabled() const;
  void set_cross_traffic_alert_right_enabled(bool value);

  // optional bool blind_spot_right_alert = 7;
  bool has_blind_spot_right_alert() const;
  void clear_blind_spot_right_alert();
  static const int kBlindSpotRightAlertFieldNumber = 7;
  bool blind_spot_right_alert() const;
  void set_blind_spot_right_alert(bool value);

  // optional bool blind_spot_right_alert_enabled = 8;
  bool has_blind_spot_right_alert_enabled() const;
  void clear_blind_spot_right_alert_enabled();
  static const int kBlindSpotRightAlertEnabledFieldNumber = 8;
  bool blind_spot_right_alert_enabled() const;
  void set_blind_spot_right_alert_enabled(bool value);

  // optional double sonar00 = 9;
  bool has_sonar00() const;
  void clear_sonar00();
  static const int kSonar00FieldNumber = 9;
  double sonar00() const;
  void set_sonar00(double value);

  // optional double sonar01 = 10;
  bool has_sonar01() const;
  void clear_sonar01();
  static const int kSonar01FieldNumber = 10;
  double sonar01() const;
  void set_sonar01(double value);

  // optional double sonar02 = 11;
  bool has_sonar02() const;
  void clear_sonar02();
  static const int kSonar02FieldNumber = 11;
  double sonar02() const;
  void set_sonar02(double value);

  // optional double sonar03 = 12;
  bool has_sonar03() const;
  void clear_sonar03();
  static const int kSonar03FieldNumber = 12;
  double sonar03() const;
  void set_sonar03(double value);

  // optional double sonar04 = 13;
  bool has_sonar04() const;
  void clear_sonar04();
  static const int kSonar04FieldNumber = 13;
  double sonar04() const;
  void set_sonar04(double value);

  // optional double sonar05 = 14;
  bool has_sonar05() const;
  void clear_sonar05();
  static const int kSonar05FieldNumber = 14;
  double sonar05() const;
  void set_sonar05(double value);

  // optional double sonar06 = 15;
  bool has_sonar06() const;
  void clear_sonar06();
  static const int kSonar06FieldNumber = 15;
  double sonar06() const;
  void set_sonar06(double value);

  // optional double sonar07 = 16;
  bool has_sonar07() const;
  void clear_sonar07();
  static const int kSonar07FieldNumber = 16;
  double sonar07() const;
  void set_sonar07(double value);

  // optional double sonar08 = 17;
  bool has_sonar08() const;
  void clear_sonar08();
  static const int kSonar08FieldNumber = 17;
  double sonar08() const;
  void set_sonar08(double value);

  // optional double sonar09 = 18;
  bool has_sonar09() const;
  void clear_sonar09();
  static const int kSonar09FieldNumber = 18;
  double sonar09() const;
  void set_sonar09(double value);

  // optional double sonar10 = 19;
  bool has_sonar10() const;
  void clear_sonar10();
  static const int kSonar10FieldNumber = 19;
  double sonar10() const;
  void set_sonar10(double value);

  // optional double sonar11 = 20;
  bool has_sonar11() const;
  void clear_sonar11();
  static const int kSonar11FieldNumber = 20;
  double sonar11() const;
  void set_sonar11(double value);

  // optional bool sonar_enabled = 21;
  bool has_sonar_enabled() const;
  void clear_sonar_enabled();
  static const int kSonarEnabledFieldNumber = 21;
  bool sonar_enabled() const;
  void set_sonar_enabled(bool value);

  // optional bool sonar_fault = 22;
  bool has_sonar_fault() const;
  void clear_sonar_fault();
  static const int kSonarFaultFieldNumber = 22;
  bool sonar_fault() const;
  void set_sonar_fault(bool value);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.Surround)
 private:
  void set_has_cross_traffic_alert_left();
  void clear_has_cross_traffic_alert_left();
  void set_has_cross_traffic_alert_left_enabled();
  void clear_has_cross_traffic_alert_left_enabled();
  void set_has_blind_spot_left_alert();
  void clear_has_blind_spot_left_alert();
  void set_has_blind_spot_left_alert_enabled();
  void clear_has_blind_spot_left_alert_enabled();
  void set_has_cross_traffic_alert_right();
  void clear_has_cross_traffic_alert_right();
  void set_has_cross_traffic_alert_right_enabled();
  void clear_has_cross_traffic_alert_right_enabled();
  void set_has_blind_spot_right_alert();
  void clear_has_blind_spot_right_alert();
  void set_has_blind_spot_right_alert_enabled();
  void clear_has_blind_spot_right_alert_enabled();
  void set_has_sonar00();
  void clear_has_sonar00();
  void set_has_sonar01();
  void clear_has_sonar01();
  void set_has_sonar02();
  void clear_has_sonar02();
  void set_has_sonar03();
  void clear_has_sonar03();
  void set_has_sonar04();
  void clear_has_sonar04();
  void set_has_sonar05();
  void clear_has_sonar05();
  void set_has_sonar06();
  void clear_has_sonar06();
  void set_has_sonar07();
  void clear_has_sonar07();
  void set_has_sonar08();
  void clear_has_sonar08();
  void set_has_sonar09();
  void clear_has_sonar09();
  void set_has_sonar10();
  void clear_has_sonar10();
  void set_has_sonar11();
  void clear_has_sonar11();
  void set_has_sonar_enabled();
  void clear_has_sonar_enabled();
  void set_has_sonar_fault();
  void clear_has_sonar_fault();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > sonar_range_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::canbus::Sonar > sonar_;
  bool cross_traffic_alert_left_;
  bool cross_traffic_alert_left_enabled_;
  bool blind_spot_left_alert_;
  bool blind_spot_left_alert_enabled_;
  bool cross_traffic_alert_right_;
  bool cross_traffic_alert_right_enabled_;
  bool blind_spot_right_alert_;
  bool blind_spot_right_alert_enabled_;
  double sonar00_;
  double sonar01_;
  double sonar02_;
  double sonar03_;
  double sonar04_;
  double sonar05_;
  double sonar06_;
  double sonar07_;
  double sonar08_;
  double sonar09_;
  double sonar10_;
  double sonar11_;
  bool sonar_enabled_;
  bool sonar_fault_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class License : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.canbus.License) */ {
 public:
  License();
  virtual ~License();

  License(const License& from);

  inline License& operator=(const License& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const License& default_instance();

  static inline const License* internal_default_instance() {
    return reinterpret_cast<const License*>(
               &_License_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(License* other);

  // implements Message ----------------------------------------------

  inline License* New() const PROTOBUF_FINAL { return New(NULL); }

  License* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const License& from);
  void MergeFrom(const License& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(License* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string vin = 1;
  bool has_vin() const;
  void clear_vin();
  static const int kVinFieldNumber = 1;
  const ::std::string& vin() const;
  void set_vin(const ::std::string& value);
  #if LANG_CXX11
  void set_vin(::std::string&& value);
  #endif
  void set_vin(const char* value);
  void set_vin(const char* value, size_t size);
  ::std::string* mutable_vin();
  ::std::string* release_vin();
  void set_allocated_vin(::std::string* vin);

  // @@protoc_insertion_point(class_scope:jmc_auto.canbus.License)
 private:
  void set_has_vin();
  void clear_has_vin();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr vin_;
  friend struct protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Signal

// optional .jmc_auto.canbus.Signal.TurnSignal turn_signal = 1;
inline bool Signal::has_turn_signal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Signal::set_has_turn_signal() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Signal::clear_has_turn_signal() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Signal::clear_turn_signal() {
  turn_signal_ = 0;
  clear_has_turn_signal();
}
inline ::jmc_auto::canbus::Signal_TurnSignal Signal::turn_signal() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Signal.turn_signal)
  return static_cast< ::jmc_auto::canbus::Signal_TurnSignal >(turn_signal_);
}
inline void Signal::set_turn_signal(::jmc_auto::canbus::Signal_TurnSignal value) {
  assert(::jmc_auto::canbus::Signal_TurnSignal_IsValid(value));
  set_has_turn_signal();
  turn_signal_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Signal.turn_signal)
}

// optional bool high_beam = 2;
inline bool Signal::has_high_beam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Signal::set_has_high_beam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Signal::clear_has_high_beam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Signal::clear_high_beam() {
  high_beam_ = false;
  clear_has_high_beam();
}
inline bool Signal::high_beam() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Signal.high_beam)
  return high_beam_;
}
inline void Signal::set_high_beam(bool value) {
  set_has_high_beam();
  high_beam_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Signal.high_beam)
}

// optional bool low_beam = 3;
inline bool Signal::has_low_beam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Signal::set_has_low_beam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Signal::clear_has_low_beam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Signal::clear_low_beam() {
  low_beam_ = false;
  clear_has_low_beam();
}
inline bool Signal::low_beam() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Signal.low_beam)
  return low_beam_;
}
inline void Signal::set_low_beam(bool value) {
  set_has_low_beam();
  low_beam_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Signal.low_beam)
}

// optional bool horn = 4;
inline bool Signal::has_horn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Signal::set_has_horn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Signal::clear_has_horn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Signal::clear_horn() {
  horn_ = false;
  clear_has_horn();
}
inline bool Signal::horn() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Signal.horn)
  return horn_;
}
inline void Signal::set_horn(bool value) {
  set_has_horn();
  horn_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Signal.horn)
}

// optional bool emergency_light = 5;
inline bool Signal::has_emergency_light() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Signal::set_has_emergency_light() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Signal::clear_has_emergency_light() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Signal::clear_emergency_light() {
  emergency_light_ = false;
  clear_has_emergency_light();
}
inline bool Signal::emergency_light() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Signal.emergency_light)
  return emergency_light_;
}
inline void Signal::set_emergency_light(bool value) {
  set_has_emergency_light();
  emergency_light_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Signal.emergency_light)
}

// -------------------------------------------------------------------

// Chassis

// optional bool engine_started = 3;
inline bool Chassis::has_engine_started() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Chassis::set_has_engine_started() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Chassis::clear_has_engine_started() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Chassis::clear_engine_started() {
  engine_started_ = false;
  clear_has_engine_started();
}
inline bool Chassis::engine_started() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.engine_started)
  return engine_started_;
}
inline void Chassis::set_engine_started(bool value) {
  set_has_engine_started();
  engine_started_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.engine_started)
}

// optional float engine_rpm = 4 [default = nan];
inline bool Chassis::has_engine_rpm() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void Chassis::set_has_engine_rpm() {
  _has_bits_[2] |= 0x00004000u;
}
inline void Chassis::clear_has_engine_rpm() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void Chassis::clear_engine_rpm() {
  engine_rpm_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_engine_rpm();
}
inline float Chassis::engine_rpm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.engine_rpm)
  return engine_rpm_;
}
inline void Chassis::set_engine_rpm(float value) {
  set_has_engine_rpm();
  engine_rpm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.engine_rpm)
}

// optional float speed_mps = 5 [default = nan];
inline bool Chassis::has_speed_mps() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void Chassis::set_has_speed_mps() {
  _has_bits_[2] |= 0x00008000u;
}
inline void Chassis::clear_has_speed_mps() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void Chassis::clear_speed_mps() {
  speed_mps_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_speed_mps();
}
inline float Chassis::speed_mps() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.speed_mps)
  return speed_mps_;
}
inline void Chassis::set_speed_mps(float value) {
  set_has_speed_mps();
  speed_mps_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.speed_mps)
}

// optional float odometer_m = 6 [default = nan];
inline bool Chassis::has_odometer_m() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void Chassis::set_has_odometer_m() {
  _has_bits_[2] |= 0x00010000u;
}
inline void Chassis::clear_has_odometer_m() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void Chassis::clear_odometer_m() {
  odometer_m_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_odometer_m();
}
inline float Chassis::odometer_m() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.odometer_m)
  return odometer_m_;
}
inline void Chassis::set_odometer_m(float value) {
  set_has_odometer_m();
  odometer_m_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.odometer_m)
}

// optional int32 fuel_range_m = 7;
inline bool Chassis::has_fuel_range_m() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Chassis::set_has_fuel_range_m() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Chassis::clear_has_fuel_range_m() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Chassis::clear_fuel_range_m() {
  fuel_range_m_ = 0;
  clear_has_fuel_range_m();
}
inline ::google::protobuf::int32 Chassis::fuel_range_m() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.fuel_range_m)
  return fuel_range_m_;
}
inline void Chassis::set_fuel_range_m(::google::protobuf::int32 value) {
  set_has_fuel_range_m();
  fuel_range_m_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.fuel_range_m)
}

// optional float throttle_percentage = 8 [default = nan];
inline bool Chassis::has_throttle_percentage() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void Chassis::set_has_throttle_percentage() {
  _has_bits_[2] |= 0x00020000u;
}
inline void Chassis::clear_has_throttle_percentage() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void Chassis::clear_throttle_percentage() {
  throttle_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_throttle_percentage();
}
inline float Chassis::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.throttle_percentage)
  return throttle_percentage_;
}
inline void Chassis::set_throttle_percentage(float value) {
  set_has_throttle_percentage();
  throttle_percentage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.throttle_percentage)
}

// optional float brake_percentage = 9 [default = nan];
inline bool Chassis::has_brake_percentage() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void Chassis::set_has_brake_percentage() {
  _has_bits_[2] |= 0x00040000u;
}
inline void Chassis::clear_has_brake_percentage() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void Chassis::clear_brake_percentage() {
  brake_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_brake_percentage();
}
inline float Chassis::brake_percentage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.brake_percentage)
  return brake_percentage_;
}
inline void Chassis::set_brake_percentage(float value) {
  set_has_brake_percentage();
  brake_percentage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.brake_percentage)
}

// optional float steering_percentage = 11 [default = nan];
inline bool Chassis::has_steering_percentage() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void Chassis::set_has_steering_percentage() {
  _has_bits_[2] |= 0x00080000u;
}
inline void Chassis::clear_has_steering_percentage() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void Chassis::clear_steering_percentage() {
  steering_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_steering_percentage();
}
inline float Chassis::steering_percentage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.steering_percentage)
  return steering_percentage_;
}
inline void Chassis::set_steering_percentage(float value) {
  set_has_steering_percentage();
  steering_percentage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.steering_percentage)
}

// optional float steering_torque_nm = 12 [default = nan];
inline bool Chassis::has_steering_torque_nm() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void Chassis::set_has_steering_torque_nm() {
  _has_bits_[2] |= 0x00002000u;
}
inline void Chassis::clear_has_steering_torque_nm() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void Chassis::clear_steering_torque_nm() {
  steering_torque_nm_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_steering_torque_nm();
}
inline float Chassis::steering_torque_nm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.steering_torque_nm)
  return steering_torque_nm_;
}
inline void Chassis::set_steering_torque_nm(float value) {
  set_has_steering_torque_nm();
  steering_torque_nm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.steering_torque_nm)
}

// optional bool parking_brake = 13;
inline bool Chassis::has_parking_brake() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Chassis::set_has_parking_brake() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Chassis::clear_has_parking_brake() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Chassis::clear_parking_brake() {
  parking_brake_ = false;
  clear_has_parking_brake();
}
inline bool Chassis::parking_brake() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.parking_brake)
  return parking_brake_;
}
inline void Chassis::set_parking_brake(bool value) {
  set_has_parking_brake();
  parking_brake_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.parking_brake)
}

// optional bool high_beam_signal = 14 [deprecated = true];
inline bool Chassis::has_high_beam_signal() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Chassis::set_has_high_beam_signal() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Chassis::clear_has_high_beam_signal() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Chassis::clear_high_beam_signal() {
  high_beam_signal_ = false;
  clear_has_high_beam_signal();
}
inline bool Chassis::high_beam_signal() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.high_beam_signal)
  return high_beam_signal_;
}
inline void Chassis::set_high_beam_signal(bool value) {
  set_has_high_beam_signal();
  high_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.high_beam_signal)
}

// optional bool low_beam_signal = 15 [deprecated = true];
inline bool Chassis::has_low_beam_signal() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Chassis::set_has_low_beam_signal() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Chassis::clear_has_low_beam_signal() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Chassis::clear_low_beam_signal() {
  low_beam_signal_ = false;
  clear_has_low_beam_signal();
}
inline bool Chassis::low_beam_signal() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.low_beam_signal)
  return low_beam_signal_;
}
inline void Chassis::set_low_beam_signal(bool value) {
  set_has_low_beam_signal();
  low_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.low_beam_signal)
}

// optional bool left_turn_signal = 16 [deprecated = true];
inline bool Chassis::has_left_turn_signal() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Chassis::set_has_left_turn_signal() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Chassis::clear_has_left_turn_signal() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Chassis::clear_left_turn_signal() {
  left_turn_signal_ = false;
  clear_has_left_turn_signal();
}
inline bool Chassis::left_turn_signal() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.left_turn_signal)
  return left_turn_signal_;
}
inline void Chassis::set_left_turn_signal(bool value) {
  set_has_left_turn_signal();
  left_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.left_turn_signal)
}

// optional bool right_turn_signal = 17 [deprecated = true];
inline bool Chassis::has_right_turn_signal() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Chassis::set_has_right_turn_signal() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Chassis::clear_has_right_turn_signal() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Chassis::clear_right_turn_signal() {
  right_turn_signal_ = false;
  clear_has_right_turn_signal();
}
inline bool Chassis::right_turn_signal() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.right_turn_signal)
  return right_turn_signal_;
}
inline void Chassis::set_right_turn_signal(bool value) {
  set_has_right_turn_signal();
  right_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.right_turn_signal)
}

// optional bool horn = 18 [deprecated = true];
inline bool Chassis::has_horn() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Chassis::set_has_horn() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Chassis::clear_has_horn() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Chassis::clear_horn() {
  horn_ = false;
  clear_has_horn();
}
inline bool Chassis::horn() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.horn)
  return horn_;
}
inline void Chassis::set_horn(bool value) {
  set_has_horn();
  horn_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.horn)
}

// optional bool wiper = 19;
inline bool Chassis::has_wiper() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Chassis::set_has_wiper() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Chassis::clear_has_wiper() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Chassis::clear_wiper() {
  wiper_ = false;
  clear_has_wiper();
}
inline bool Chassis::wiper() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.wiper)
  return wiper_;
}
inline void Chassis::set_wiper(bool value) {
  set_has_wiper();
  wiper_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.wiper)
}

// optional bool disengage_status = 20 [deprecated = true];
inline bool Chassis::has_disengage_status() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Chassis::set_has_disengage_status() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Chassis::clear_has_disengage_status() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Chassis::clear_disengage_status() {
  disengage_status_ = false;
  clear_has_disengage_status();
}
inline bool Chassis::disengage_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.disengage_status)
  return disengage_status_;
}
inline void Chassis::set_disengage_status(bool value) {
  set_has_disengage_status();
  disengage_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.disengage_status)
}

// optional .jmc_auto.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
inline bool Chassis::has_driving_mode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Chassis::set_has_driving_mode() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Chassis::clear_has_driving_mode() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Chassis::clear_driving_mode() {
  driving_mode_ = 0;
  clear_has_driving_mode();
}
inline ::jmc_auto::canbus::Chassis_DrivingMode Chassis::driving_mode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.driving_mode)
  return static_cast< ::jmc_auto::canbus::Chassis_DrivingMode >(driving_mode_);
}
inline void Chassis::set_driving_mode(::jmc_auto::canbus::Chassis_DrivingMode value) {
  assert(::jmc_auto::canbus::Chassis_DrivingMode_IsValid(value));
  set_has_driving_mode();
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.driving_mode)
}

// optional .jmc_auto.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
inline bool Chassis::has_error_code() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Chassis::set_has_error_code() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Chassis::clear_has_error_code() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Chassis::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::jmc_auto::canbus::Chassis_ErrorCode Chassis::error_code() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.error_code)
  return static_cast< ::jmc_auto::canbus::Chassis_ErrorCode >(error_code_);
}
inline void Chassis::set_error_code(::jmc_auto::canbus::Chassis_ErrorCode value) {
  assert(::jmc_auto::canbus::Chassis_ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.error_code)
}

// optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 23;
inline bool Chassis::has_gear_location() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Chassis::set_has_gear_location() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Chassis::clear_has_gear_location() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Chassis::clear_gear_location() {
  gear_location_ = 0;
  clear_has_gear_location();
}
inline ::jmc_auto::canbus::Chassis_GearPosition Chassis::gear_location() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.gear_location)
  return static_cast< ::jmc_auto::canbus::Chassis_GearPosition >(gear_location_);
}
inline void Chassis::set_gear_location(::jmc_auto::canbus::Chassis_GearPosition value) {
  assert(::jmc_auto::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear_location();
  gear_location_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.gear_location)
}

// optional double steering_timestamp = 24;
inline bool Chassis::has_steering_timestamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Chassis::set_has_steering_timestamp() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Chassis::clear_has_steering_timestamp() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Chassis::clear_steering_timestamp() {
  steering_timestamp_ = 0;
  clear_has_steering_timestamp();
}
inline double Chassis::steering_timestamp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.steering_timestamp)
  return steering_timestamp_;
}
inline void Chassis::set_steering_timestamp(double value) {
  set_has_steering_timestamp();
  steering_timestamp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.steering_timestamp)
}

// optional .jmc_auto.common.Header header = 25;
inline bool Chassis::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chassis::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chassis::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chassis::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
inline const ::jmc_auto::common::Header& Chassis::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
inline ::jmc_auto::common::Header* Chassis::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Chassis.header)
  return header_;
}
inline ::jmc_auto::common::Header* Chassis::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Chassis.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Chassis::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Chassis.header)
}

// optional int32 chassis_error_mask = 26 [default = 0];
inline bool Chassis::has_chassis_error_mask() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Chassis::set_has_chassis_error_mask() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Chassis::clear_has_chassis_error_mask() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Chassis::clear_chassis_error_mask() {
  chassis_error_mask_ = 0;
  clear_has_chassis_error_mask();
}
inline ::google::protobuf::int32 Chassis::chassis_error_mask() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.chassis_error_mask)
  return chassis_error_mask_;
}
inline void Chassis::set_chassis_error_mask(::google::protobuf::int32 value) {
  set_has_chassis_error_mask();
  chassis_error_mask_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.chassis_error_mask)
}

// optional .jmc_auto.common.VehicleSignal signal = 27;
inline bool Chassis::has_signal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chassis::set_has_signal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chassis::clear_has_signal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chassis::clear_signal() {
  if (signal_ != NULL) signal_->::jmc_auto::common::VehicleSignal::Clear();
  clear_has_signal();
}
inline const ::jmc_auto::common::VehicleSignal& Chassis::signal() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.signal)
  return signal_ != NULL ? *signal_
                         : *::jmc_auto::common::VehicleSignal::internal_default_instance();
}
inline ::jmc_auto::common::VehicleSignal* Chassis::mutable_signal() {
  set_has_signal();
  if (signal_ == NULL) {
    signal_ = new ::jmc_auto::common::VehicleSignal;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Chassis.signal)
  return signal_;
}
inline ::jmc_auto::common::VehicleSignal* Chassis::release_signal() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Chassis.signal)
  clear_has_signal();
  ::jmc_auto::common::VehicleSignal* temp = signal_;
  signal_ = NULL;
  return temp;
}
inline void Chassis::set_allocated_signal(::jmc_auto::common::VehicleSignal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    set_has_signal();
  } else {
    clear_has_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Chassis.signal)
}

// optional .jmc_auto.canbus.ChassisGPS chassis_gps = 28;
inline bool Chassis::has_chassis_gps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chassis::set_has_chassis_gps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chassis::clear_has_chassis_gps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chassis::clear_chassis_gps() {
  if (chassis_gps_ != NULL) chassis_gps_->::jmc_auto::canbus::ChassisGPS::Clear();
  clear_has_chassis_gps();
}
inline const ::jmc_auto::canbus::ChassisGPS& Chassis::chassis_gps() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.chassis_gps)
  return chassis_gps_ != NULL ? *chassis_gps_
                         : *::jmc_auto::canbus::ChassisGPS::internal_default_instance();
}
inline ::jmc_auto::canbus::ChassisGPS* Chassis::mutable_chassis_gps() {
  set_has_chassis_gps();
  if (chassis_gps_ == NULL) {
    chassis_gps_ = new ::jmc_auto::canbus::ChassisGPS;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Chassis.chassis_gps)
  return chassis_gps_;
}
inline ::jmc_auto::canbus::ChassisGPS* Chassis::release_chassis_gps() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Chassis.chassis_gps)
  clear_has_chassis_gps();
  ::jmc_auto::canbus::ChassisGPS* temp = chassis_gps_;
  chassis_gps_ = NULL;
  return temp;
}
inline void Chassis::set_allocated_chassis_gps(::jmc_auto::canbus::ChassisGPS* chassis_gps) {
  delete chassis_gps_;
  chassis_gps_ = chassis_gps;
  if (chassis_gps) {
    set_has_chassis_gps();
  } else {
    clear_has_chassis_gps();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Chassis.chassis_gps)
}

// optional .jmc_auto.common.EngageAdvice engage_advice = 29;
inline bool Chassis::has_engage_advice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chassis::set_has_engage_advice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Chassis::clear_has_engage_advice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Chassis::clear_engage_advice() {
  if (engage_advice_ != NULL) engage_advice_->::jmc_auto::common::EngageAdvice::Clear();
  clear_has_engage_advice();
}
inline const ::jmc_auto::common::EngageAdvice& Chassis::engage_advice() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.engage_advice)
  return engage_advice_ != NULL ? *engage_advice_
                         : *::jmc_auto::common::EngageAdvice::internal_default_instance();
}
inline ::jmc_auto::common::EngageAdvice* Chassis::mutable_engage_advice() {
  set_has_engage_advice();
  if (engage_advice_ == NULL) {
    engage_advice_ = new ::jmc_auto::common::EngageAdvice;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Chassis.engage_advice)
  return engage_advice_;
}
inline ::jmc_auto::common::EngageAdvice* Chassis::release_engage_advice() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Chassis.engage_advice)
  clear_has_engage_advice();
  ::jmc_auto::common::EngageAdvice* temp = engage_advice_;
  engage_advice_ = NULL;
  return temp;
}
inline void Chassis::set_allocated_engage_advice(::jmc_auto::common::EngageAdvice* engage_advice) {
  delete engage_advice_;
  engage_advice_ = engage_advice;
  if (engage_advice) {
    set_has_engage_advice();
  } else {
    clear_has_engage_advice();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Chassis.engage_advice)
}

// optional .jmc_auto.canbus.WheelSpeed wheel_speed = 30;
inline bool Chassis::has_wheel_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Chassis::set_has_wheel_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Chassis::clear_has_wheel_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Chassis::clear_wheel_speed() {
  if (wheel_speed_ != NULL) wheel_speed_->::jmc_auto::canbus::WheelSpeed::Clear();
  clear_has_wheel_speed();
}
inline const ::jmc_auto::canbus::WheelSpeed& Chassis::wheel_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.wheel_speed)
  return wheel_speed_ != NULL ? *wheel_speed_
                         : *::jmc_auto::canbus::WheelSpeed::internal_default_instance();
}
inline ::jmc_auto::canbus::WheelSpeed* Chassis::mutable_wheel_speed() {
  set_has_wheel_speed();
  if (wheel_speed_ == NULL) {
    wheel_speed_ = new ::jmc_auto::canbus::WheelSpeed;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Chassis.wheel_speed)
  return wheel_speed_;
}
inline ::jmc_auto::canbus::WheelSpeed* Chassis::release_wheel_speed() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Chassis.wheel_speed)
  clear_has_wheel_speed();
  ::jmc_auto::canbus::WheelSpeed* temp = wheel_speed_;
  wheel_speed_ = NULL;
  return temp;
}
inline void Chassis::set_allocated_wheel_speed(::jmc_auto::canbus::WheelSpeed* wheel_speed) {
  delete wheel_speed_;
  wheel_speed_ = wheel_speed;
  if (wheel_speed) {
    set_has_wheel_speed();
  } else {
    clear_has_wheel_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Chassis.wheel_speed)
}

// optional .jmc_auto.canbus.Surround surround = 31;
inline bool Chassis::has_surround() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Chassis::set_has_surround() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Chassis::clear_has_surround() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Chassis::clear_surround() {
  if (surround_ != NULL) surround_->::jmc_auto::canbus::Surround::Clear();
  clear_has_surround();
}
inline const ::jmc_auto::canbus::Surround& Chassis::surround() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.surround)
  return surround_ != NULL ? *surround_
                         : *::jmc_auto::canbus::Surround::internal_default_instance();
}
inline ::jmc_auto::canbus::Surround* Chassis::mutable_surround() {
  set_has_surround();
  if (surround_ == NULL) {
    surround_ = new ::jmc_auto::canbus::Surround;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Chassis.surround)
  return surround_;
}
inline ::jmc_auto::canbus::Surround* Chassis::release_surround() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Chassis.surround)
  clear_has_surround();
  ::jmc_auto::canbus::Surround* temp = surround_;
  surround_ = NULL;
  return temp;
}
inline void Chassis::set_allocated_surround(::jmc_auto::canbus::Surround* surround) {
  delete surround_;
  surround_ = surround;
  if (surround) {
    set_has_surround();
  } else {
    clear_has_surround();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Chassis.surround)
}

// optional float lon_acc = 33;
inline bool Chassis::has_lon_acc() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Chassis::set_has_lon_acc() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Chassis::clear_has_lon_acc() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Chassis::clear_lon_acc() {
  lon_acc_ = 0;
  clear_has_lon_acc();
}
inline float Chassis::lon_acc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.lon_acc)
  return lon_acc_;
}
inline void Chassis::set_lon_acc(float value) {
  set_has_lon_acc();
  lon_acc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.lon_acc)
}

// optional float steer_wheel_rot_spd = 34;
inline bool Chassis::has_steer_wheel_rot_spd() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Chassis::set_has_steer_wheel_rot_spd() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Chassis::clear_has_steer_wheel_rot_spd() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Chassis::clear_steer_wheel_rot_spd() {
  steer_wheel_rot_spd_ = 0;
  clear_has_steer_wheel_rot_spd();
}
inline float Chassis::steer_wheel_rot_spd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.steer_wheel_rot_spd)
  return steer_wheel_rot_spd_;
}
inline void Chassis::set_steer_wheel_rot_spd(float value) {
  set_has_steer_wheel_rot_spd();
  steer_wheel_rot_spd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.steer_wheel_rot_spd)
}

// optional bool abs_vehspdlgt_valid = 35;
inline bool Chassis::has_abs_vehspdlgt_valid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Chassis::set_has_abs_vehspdlgt_valid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Chassis::clear_has_abs_vehspdlgt_valid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Chassis::clear_abs_vehspdlgt_valid() {
  abs_vehspdlgt_valid_ = false;
  clear_has_abs_vehspdlgt_valid();
}
inline bool Chassis::abs_vehspdlgt_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_vehspdlgt_valid)
  return abs_vehspdlgt_valid_;
}
inline void Chassis::set_abs_vehspdlgt_valid(bool value) {
  set_has_abs_vehspdlgt_valid();
  abs_vehspdlgt_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_vehspdlgt_valid)
}

// optional bool esp_algtstatus_valid = 36;
inline bool Chassis::has_esp_algtstatus_valid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Chassis::set_has_esp_algtstatus_valid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Chassis::clear_has_esp_algtstatus_valid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Chassis::clear_esp_algtstatus_valid() {
  esp_algtstatus_valid_ = false;
  clear_has_esp_algtstatus_valid();
}
inline bool Chassis::esp_algtstatus_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_algtstatus_valid)
  return esp_algtstatus_valid_;
}
inline void Chassis::set_esp_algtstatus_valid(bool value) {
  set_has_esp_algtstatus_valid();
  esp_algtstatus_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_algtstatus_valid)
}

// optional bool sas_sasstssnsr_valid = 37;
inline bool Chassis::has_sas_sasstssnsr_valid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Chassis::set_has_sas_sasstssnsr_valid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Chassis::clear_has_sas_sasstssnsr_valid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Chassis::clear_sas_sasstssnsr_valid() {
  sas_sasstssnsr_valid_ = false;
  clear_has_sas_sasstssnsr_valid();
}
inline bool Chassis::sas_sasstssnsr_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.sas_sasstssnsr_valid)
  return sas_sasstssnsr_valid_;
}
inline void Chassis::set_sas_sasstssnsr_valid(bool value) {
  set_has_sas_sasstssnsr_valid();
  sas_sasstssnsr_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.sas_sasstssnsr_valid)
}

// optional bool steerwheelrotspd_valid = 38;
inline bool Chassis::has_steerwheelrotspd_valid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Chassis::set_has_steerwheelrotspd_valid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Chassis::clear_has_steerwheelrotspd_valid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Chassis::clear_steerwheelrotspd_valid() {
  steerwheelrotspd_valid_ = false;
  clear_has_steerwheelrotspd_valid();
}
inline bool Chassis::steerwheelrotspd_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.steerwheelrotspd_valid)
  return steerwheelrotspd_valid_;
}
inline void Chassis::set_steerwheelrotspd_valid(bool value) {
  set_has_steerwheelrotspd_valid();
  steerwheelrotspd_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.steerwheelrotspd_valid)
}

// optional bool eps_lkaresponsetorque_valid = 39;
inline bool Chassis::has_eps_lkaresponsetorque_valid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Chassis::set_has_eps_lkaresponsetorque_valid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Chassis::clear_has_eps_lkaresponsetorque_valid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Chassis::clear_eps_lkaresponsetorque_valid() {
  eps_lkaresponsetorque_valid_ = false;
  clear_has_eps_lkaresponsetorque_valid();
}
inline bool Chassis::eps_lkaresponsetorque_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.eps_lkaresponsetorque_valid)
  return eps_lkaresponsetorque_valid_;
}
inline void Chassis::set_eps_lkaresponsetorque_valid(bool value) {
  set_has_eps_lkaresponsetorque_valid();
  eps_lkaresponsetorque_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.eps_lkaresponsetorque_valid)
}

// optional float eps_torsionbartorque = 40;
inline bool Chassis::has_eps_torsionbartorque() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Chassis::set_has_eps_torsionbartorque() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Chassis::clear_has_eps_torsionbartorque() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Chassis::clear_eps_torsionbartorque() {
  eps_torsionbartorque_ = 0;
  clear_has_eps_torsionbartorque();
}
inline float Chassis::eps_torsionbartorque() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.eps_torsionbartorque)
  return eps_torsionbartorque_;
}
inline void Chassis::set_eps_torsionbartorque(float value) {
  set_has_eps_torsionbartorque();
  eps_torsionbartorque_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.eps_torsionbartorque)
}

// optional bool eps_tosionbartorquevalid = 41;
inline bool Chassis::has_eps_tosionbartorquevalid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Chassis::set_has_eps_tosionbartorquevalid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Chassis::clear_has_eps_tosionbartorquevalid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Chassis::clear_eps_tosionbartorquevalid() {
  eps_tosionbartorquevalid_ = false;
  clear_has_eps_tosionbartorquevalid();
}
inline bool Chassis::eps_tosionbartorquevalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.eps_tosionbartorquevalid)
  return eps_tosionbartorquevalid_;
}
inline void Chassis::set_eps_tosionbartorquevalid(bool value) {
  set_has_eps_tosionbartorquevalid();
  eps_tosionbartorquevalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.eps_tosionbartorquevalid)
}

// optional int32 abs_whlmilgfrntri = 42;
inline bool Chassis::has_abs_whlmilgfrntri() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Chassis::set_has_abs_whlmilgfrntri() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Chassis::clear_has_abs_whlmilgfrntri() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Chassis::clear_abs_whlmilgfrntri() {
  abs_whlmilgfrntri_ = 0;
  clear_has_abs_whlmilgfrntri();
}
inline ::google::protobuf::int32 Chassis::abs_whlmilgfrntri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_whlmilgfrntri)
  return abs_whlmilgfrntri_;
}
inline void Chassis::set_abs_whlmilgfrntri(::google::protobuf::int32 value) {
  set_has_abs_whlmilgfrntri();
  abs_whlmilgfrntri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_whlmilgfrntri)
}

// optional int32 abs_whlmilgfrntle = 43;
inline bool Chassis::has_abs_whlmilgfrntle() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Chassis::set_has_abs_whlmilgfrntle() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Chassis::clear_has_abs_whlmilgfrntle() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Chassis::clear_abs_whlmilgfrntle() {
  abs_whlmilgfrntle_ = 0;
  clear_has_abs_whlmilgfrntle();
}
inline ::google::protobuf::int32 Chassis::abs_whlmilgfrntle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_whlmilgfrntle)
  return abs_whlmilgfrntle_;
}
inline void Chassis::set_abs_whlmilgfrntle(::google::protobuf::int32 value) {
  set_has_abs_whlmilgfrntle();
  abs_whlmilgfrntle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_whlmilgfrntle)
}

// optional int32 abs_whlmilgrearre = 44;
inline bool Chassis::has_abs_whlmilgrearre() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Chassis::set_has_abs_whlmilgrearre() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Chassis::clear_has_abs_whlmilgrearre() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Chassis::clear_abs_whlmilgrearre() {
  abs_whlmilgrearre_ = 0;
  clear_has_abs_whlmilgrearre();
}
inline ::google::protobuf::int32 Chassis::abs_whlmilgrearre() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_whlmilgrearre)
  return abs_whlmilgrearre_;
}
inline void Chassis::set_abs_whlmilgrearre(::google::protobuf::int32 value) {
  set_has_abs_whlmilgrearre();
  abs_whlmilgrearre_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_whlmilgrearre)
}

// optional int32 abs_whlmilgrearle = 45;
inline bool Chassis::has_abs_whlmilgrearle() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Chassis::set_has_abs_whlmilgrearle() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Chassis::clear_has_abs_whlmilgrearle() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Chassis::clear_abs_whlmilgrearle() {
  abs_whlmilgrearle_ = 0;
  clear_has_abs_whlmilgrearle();
}
inline ::google::protobuf::int32 Chassis::abs_whlmilgrearle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_whlmilgrearle)
  return abs_whlmilgrearle_;
}
inline void Chassis::set_abs_whlmilgrearle(::google::protobuf::int32 value) {
  set_has_abs_whlmilgrearle();
  abs_whlmilgrearle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_whlmilgrearle)
}

// optional int32 esp_wheelpulse_fl = 46;
inline bool Chassis::has_esp_wheelpulse_fl() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Chassis::set_has_esp_wheelpulse_fl() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Chassis::clear_has_esp_wheelpulse_fl() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Chassis::clear_esp_wheelpulse_fl() {
  esp_wheelpulse_fl_ = 0;
  clear_has_esp_wheelpulse_fl();
}
inline ::google::protobuf::int32 Chassis::esp_wheelpulse_fl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_wheelpulse_fl)
  return esp_wheelpulse_fl_;
}
inline void Chassis::set_esp_wheelpulse_fl(::google::protobuf::int32 value) {
  set_has_esp_wheelpulse_fl();
  esp_wheelpulse_fl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_wheelpulse_fl)
}

// optional int32 esp_wheelpulse_fr = 47;
inline bool Chassis::has_esp_wheelpulse_fr() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Chassis::set_has_esp_wheelpulse_fr() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Chassis::clear_has_esp_wheelpulse_fr() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Chassis::clear_esp_wheelpulse_fr() {
  esp_wheelpulse_fr_ = 0;
  clear_has_esp_wheelpulse_fr();
}
inline ::google::protobuf::int32 Chassis::esp_wheelpulse_fr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_wheelpulse_fr)
  return esp_wheelpulse_fr_;
}
inline void Chassis::set_esp_wheelpulse_fr(::google::protobuf::int32 value) {
  set_has_esp_wheelpulse_fr();
  esp_wheelpulse_fr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_wheelpulse_fr)
}

// optional int32 esp_wheelpulse_rl = 48;
inline bool Chassis::has_esp_wheelpulse_rl() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Chassis::set_has_esp_wheelpulse_rl() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Chassis::clear_has_esp_wheelpulse_rl() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Chassis::clear_esp_wheelpulse_rl() {
  esp_wheelpulse_rl_ = 0;
  clear_has_esp_wheelpulse_rl();
}
inline ::google::protobuf::int32 Chassis::esp_wheelpulse_rl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_wheelpulse_rl)
  return esp_wheelpulse_rl_;
}
inline void Chassis::set_esp_wheelpulse_rl(::google::protobuf::int32 value) {
  set_has_esp_wheelpulse_rl();
  esp_wheelpulse_rl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_wheelpulse_rl)
}

// optional int32 esp_wheelpulse_rr = 49;
inline bool Chassis::has_esp_wheelpulse_rr() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Chassis::set_has_esp_wheelpulse_rr() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Chassis::clear_has_esp_wheelpulse_rr() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Chassis::clear_esp_wheelpulse_rr() {
  esp_wheelpulse_rr_ = 0;
  clear_has_esp_wheelpulse_rr();
}
inline ::google::protobuf::int32 Chassis::esp_wheelpulse_rr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_wheelpulse_rr)
  return esp_wheelpulse_rr_;
}
inline void Chassis::set_esp_wheelpulse_rr(::google::protobuf::int32 value) {
  set_has_esp_wheelpulse_rr();
  esp_wheelpulse_rr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_wheelpulse_rr)
}

// optional double ems_accpedalratio = 50;
inline bool Chassis::has_ems_accpedalratio() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Chassis::set_has_ems_accpedalratio() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Chassis::clear_has_ems_accpedalratio() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Chassis::clear_ems_accpedalratio() {
  ems_accpedalratio_ = 0;
  clear_has_ems_accpedalratio();
}
inline double Chassis::ems_accpedalratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ems_accpedalratio)
  return ems_accpedalratio_;
}
inline void Chassis::set_ems_accpedalratio(double value) {
  set_has_ems_accpedalratio();
  ems_accpedalratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ems_accpedalratio)
}

// optional .jmc_auto.canbus.Chassis.BrkPedalStasus brkpedalstasus = 51;
inline bool Chassis::has_brkpedalstasus() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void Chassis::set_has_brkpedalstasus() {
  _has_bits_[1] |= 0x00020000u;
}
inline void Chassis::clear_has_brkpedalstasus() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void Chassis::clear_brkpedalstasus() {
  brkpedalstasus_ = 0;
  clear_has_brkpedalstasus();
}
inline ::jmc_auto::canbus::Chassis_BrkPedalStasus Chassis::brkpedalstasus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.brkpedalstasus)
  return static_cast< ::jmc_auto::canbus::Chassis_BrkPedalStasus >(brkpedalstasus_);
}
inline void Chassis::set_brkpedalstasus(::jmc_auto::canbus::Chassis_BrkPedalStasus value) {
  assert(::jmc_auto::canbus::Chassis_BrkPedalStasus_IsValid(value));
  set_has_brkpedalstasus();
  brkpedalstasus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.brkpedalstasus)
}

// optional double abs_whlspdfrntle = 52;
inline bool Chassis::has_abs_whlspdfrntle() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Chassis::set_has_abs_whlspdfrntle() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Chassis::clear_has_abs_whlspdfrntle() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Chassis::clear_abs_whlspdfrntle() {
  abs_whlspdfrntle_ = 0;
  clear_has_abs_whlspdfrntle();
}
inline double Chassis::abs_whlspdfrntle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_whlspdfrntle)
  return abs_whlspdfrntle_;
}
inline void Chassis::set_abs_whlspdfrntle(double value) {
  set_has_abs_whlspdfrntle();
  abs_whlspdfrntle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_whlspdfrntle)
}

// optional double abs_whlspdfrntri = 53;
inline bool Chassis::has_abs_whlspdfrntri() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Chassis::set_has_abs_whlspdfrntri() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Chassis::clear_has_abs_whlspdfrntri() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Chassis::clear_abs_whlspdfrntri() {
  abs_whlspdfrntri_ = 0;
  clear_has_abs_whlspdfrntri();
}
inline double Chassis::abs_whlspdfrntri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_whlspdfrntri)
  return abs_whlspdfrntri_;
}
inline void Chassis::set_abs_whlspdfrntri(double value) {
  set_has_abs_whlspdfrntri();
  abs_whlspdfrntri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_whlspdfrntri)
}

// optional double abs_whlspdrele = 54;
inline bool Chassis::has_abs_whlspdrele() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Chassis::set_has_abs_whlspdrele() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Chassis::clear_has_abs_whlspdrele() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Chassis::clear_abs_whlspdrele() {
  abs_whlspdrele_ = 0;
  clear_has_abs_whlspdrele();
}
inline double Chassis::abs_whlspdrele() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_whlspdrele)
  return abs_whlspdrele_;
}
inline void Chassis::set_abs_whlspdrele(double value) {
  set_has_abs_whlspdrele();
  abs_whlspdrele_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_whlspdrele)
}

// optional double abs_whlspdreri = 55;
inline bool Chassis::has_abs_whlspdreri() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Chassis::set_has_abs_whlspdreri() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Chassis::clear_has_abs_whlspdreri() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Chassis::clear_abs_whlspdreri() {
  abs_whlspdreri_ = 0;
  clear_has_abs_whlspdreri();
}
inline double Chassis::abs_whlspdreri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_whlspdreri)
  return abs_whlspdreri_;
}
inline void Chassis::set_abs_whlspdreri(double value) {
  set_has_abs_whlspdreri();
  abs_whlspdreri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_whlspdreri)
}

// optional double acc_x = 56;
inline bool Chassis::has_acc_x() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Chassis::set_has_acc_x() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Chassis::clear_has_acc_x() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Chassis::clear_acc_x() {
  acc_x_ = 0;
  clear_has_acc_x();
}
inline double Chassis::acc_x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.acc_x)
  return acc_x_;
}
inline void Chassis::set_acc_x(double value) {
  set_has_acc_x();
  acc_x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.acc_x)
}

// optional double acc_y = 57;
inline bool Chassis::has_acc_y() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Chassis::set_has_acc_y() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Chassis::clear_has_acc_y() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Chassis::clear_acc_y() {
  acc_y_ = 0;
  clear_has_acc_y();
}
inline double Chassis::acc_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.acc_y)
  return acc_y_;
}
inline void Chassis::set_acc_y(double value) {
  set_has_acc_y();
  acc_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.acc_y)
}

// optional double acc_z = 58;
inline bool Chassis::has_acc_z() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Chassis::set_has_acc_z() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Chassis::clear_has_acc_z() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Chassis::clear_acc_z() {
  acc_z_ = 0;
  clear_has_acc_z();
}
inline double Chassis::acc_z() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.acc_z)
  return acc_z_;
}
inline void Chassis::set_acc_z(double value) {
  set_has_acc_z();
  acc_z_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.acc_z)
}

// optional double gyro_x = 59;
inline bool Chassis::has_gyro_x() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Chassis::set_has_gyro_x() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Chassis::clear_has_gyro_x() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Chassis::clear_gyro_x() {
  gyro_x_ = 0;
  clear_has_gyro_x();
}
inline double Chassis::gyro_x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.gyro_x)
  return gyro_x_;
}
inline void Chassis::set_gyro_x(double value) {
  set_has_gyro_x();
  gyro_x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.gyro_x)
}

// optional double gyro_y = 60;
inline bool Chassis::has_gyro_y() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Chassis::set_has_gyro_y() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Chassis::clear_has_gyro_y() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Chassis::clear_gyro_y() {
  gyro_y_ = 0;
  clear_has_gyro_y();
}
inline double Chassis::gyro_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.gyro_y)
  return gyro_y_;
}
inline void Chassis::set_gyro_y(double value) {
  set_has_gyro_y();
  gyro_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.gyro_y)
}

// optional double gyro_z = 61;
inline bool Chassis::has_gyro_z() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Chassis::set_has_gyro_z() {
  _has_bits_[1] |= 0x00010000u;
}
inline void Chassis::clear_has_gyro_z() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void Chassis::clear_gyro_z() {
  gyro_z_ = 0;
  clear_has_gyro_z();
}
inline double Chassis::gyro_z() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.gyro_z)
  return gyro_z_;
}
inline void Chassis::set_gyro_z(double value) {
  set_has_gyro_z();
  gyro_z_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.gyro_z)
}

// optional double ins_pitchangle = 62;
inline bool Chassis::has_ins_pitchangle() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void Chassis::set_has_ins_pitchangle() {
  _has_bits_[1] |= 0x00080000u;
}
inline void Chassis::clear_has_ins_pitchangle() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void Chassis::clear_ins_pitchangle() {
  ins_pitchangle_ = 0;
  clear_has_ins_pitchangle();
}
inline double Chassis::ins_pitchangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_pitchangle)
  return ins_pitchangle_;
}
inline void Chassis::set_ins_pitchangle(double value) {
  set_has_ins_pitchangle();
  ins_pitchangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_pitchangle)
}

// optional double ins_rollangle = 63;
inline bool Chassis::has_ins_rollangle() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Chassis::set_has_ins_rollangle() {
  _has_bits_[1] |= 0x00100000u;
}
inline void Chassis::clear_has_ins_rollangle() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void Chassis::clear_ins_rollangle() {
  ins_rollangle_ = 0;
  clear_has_ins_rollangle();
}
inline double Chassis::ins_rollangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_rollangle)
  return ins_rollangle_;
}
inline void Chassis::set_ins_rollangle(double value) {
  set_has_ins_rollangle();
  ins_rollangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_rollangle)
}

// optional double ins_headingangle = 64;
inline bool Chassis::has_ins_headingangle() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Chassis::set_has_ins_headingangle() {
  _has_bits_[1] |= 0x00200000u;
}
inline void Chassis::clear_has_ins_headingangle() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void Chassis::clear_ins_headingangle() {
  ins_headingangle_ = 0;
  clear_has_ins_headingangle();
}
inline double Chassis::ins_headingangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_headingangle)
  return ins_headingangle_;
}
inline void Chassis::set_ins_headingangle(double value) {
  set_has_ins_headingangle();
  ins_headingangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_headingangle)
}

// optional double ins_locatheight = 65;
inline bool Chassis::has_ins_locatheight() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void Chassis::set_has_ins_locatheight() {
  _has_bits_[1] |= 0x00400000u;
}
inline void Chassis::clear_has_ins_locatheight() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void Chassis::clear_ins_locatheight() {
  ins_locatheight_ = 0;
  clear_has_ins_locatheight();
}
inline double Chassis::ins_locatheight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_locatheight)
  return ins_locatheight_;
}
inline void Chassis::set_ins_locatheight(double value) {
  set_has_ins_locatheight();
  ins_locatheight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_locatheight)
}

// optional double ins_time = 66;
inline bool Chassis::has_ins_time() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void Chassis::set_has_ins_time() {
  _has_bits_[1] |= 0x00800000u;
}
inline void Chassis::clear_has_ins_time() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void Chassis::clear_ins_time() {
  ins_time_ = 0;
  clear_has_ins_time();
}
inline double Chassis::ins_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_time)
  return ins_time_;
}
inline void Chassis::set_ins_time(double value) {
  set_has_ins_time();
  ins_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_time)
}

// optional double ins_latitude = 67;
inline bool Chassis::has_ins_latitude() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void Chassis::set_has_ins_latitude() {
  _has_bits_[1] |= 0x01000000u;
}
inline void Chassis::clear_has_ins_latitude() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void Chassis::clear_ins_latitude() {
  ins_latitude_ = 0;
  clear_has_ins_latitude();
}
inline double Chassis::ins_latitude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_latitude)
  return ins_latitude_;
}
inline void Chassis::set_ins_latitude(double value) {
  set_has_ins_latitude();
  ins_latitude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_latitude)
}

// optional double ins_longitude = 68;
inline bool Chassis::has_ins_longitude() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void Chassis::set_has_ins_longitude() {
  _has_bits_[1] |= 0x02000000u;
}
inline void Chassis::clear_has_ins_longitude() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void Chassis::clear_ins_longitude() {
  ins_longitude_ = 0;
  clear_has_ins_longitude();
}
inline double Chassis::ins_longitude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_longitude)
  return ins_longitude_;
}
inline void Chassis::set_ins_longitude(double value) {
  set_has_ins_longitude();
  ins_longitude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_longitude)
}

// optional double ins_northspd = 69;
inline bool Chassis::has_ins_northspd() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void Chassis::set_has_ins_northspd() {
  _has_bits_[1] |= 0x04000000u;
}
inline void Chassis::clear_has_ins_northspd() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void Chassis::clear_ins_northspd() {
  ins_northspd_ = 0;
  clear_has_ins_northspd();
}
inline double Chassis::ins_northspd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_northspd)
  return ins_northspd_;
}
inline void Chassis::set_ins_northspd(double value) {
  set_has_ins_northspd();
  ins_northspd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_northspd)
}

// optional double ins_eastspd = 70;
inline bool Chassis::has_ins_eastspd() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void Chassis::set_has_ins_eastspd() {
  _has_bits_[1] |= 0x08000000u;
}
inline void Chassis::clear_has_ins_eastspd() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void Chassis::clear_ins_eastspd() {
  ins_eastspd_ = 0;
  clear_has_ins_eastspd();
}
inline double Chassis::ins_eastspd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_eastspd)
  return ins_eastspd_;
}
inline void Chassis::set_ins_eastspd(double value) {
  set_has_ins_eastspd();
  ins_eastspd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_eastspd)
}

// optional double ins_togroundspd = 71;
inline bool Chassis::has_ins_togroundspd() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void Chassis::set_has_ins_togroundspd() {
  _has_bits_[1] |= 0x10000000u;
}
inline void Chassis::clear_has_ins_togroundspd() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void Chassis::clear_ins_togroundspd() {
  ins_togroundspd_ = 0;
  clear_has_ins_togroundspd();
}
inline double Chassis::ins_togroundspd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_togroundspd)
  return ins_togroundspd_;
}
inline void Chassis::set_ins_togroundspd(double value) {
  set_has_ins_togroundspd();
  ins_togroundspd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_togroundspd)
}

// optional int32 ins_gpsflag_pos = 72;
inline bool Chassis::has_ins_gpsflag_pos() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Chassis::set_has_ins_gpsflag_pos() {
  _has_bits_[1] |= 0x00040000u;
}
inline void Chassis::clear_has_ins_gpsflag_pos() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void Chassis::clear_ins_gpsflag_pos() {
  ins_gpsflag_pos_ = 0;
  clear_has_ins_gpsflag_pos();
}
inline ::google::protobuf::int32 Chassis::ins_gpsflag_pos() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_gpsflag_pos)
  return ins_gpsflag_pos_;
}
inline void Chassis::set_ins_gpsflag_pos(::google::protobuf::int32 value) {
  set_has_ins_gpsflag_pos();
  ins_gpsflag_pos_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_gpsflag_pos)
}

// optional int32 ins_numsv = 73;
inline bool Chassis::has_ins_numsv() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void Chassis::set_has_ins_numsv() {
  _has_bits_[1] |= 0x20000000u;
}
inline void Chassis::clear_has_ins_numsv() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void Chassis::clear_ins_numsv() {
  ins_numsv_ = 0;
  clear_has_ins_numsv();
}
inline ::google::protobuf::int32 Chassis::ins_numsv() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_numsv)
  return ins_numsv_;
}
inline void Chassis::set_ins_numsv(::google::protobuf::int32 value) {
  set_has_ins_numsv();
  ins_numsv_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_numsv)
}

// optional int32 ins_gpsflag_heading = 74;
inline bool Chassis::has_ins_gpsflag_heading() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void Chassis::set_has_ins_gpsflag_heading() {
  _has_bits_[1] |= 0x40000000u;
}
inline void Chassis::clear_has_ins_gpsflag_heading() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void Chassis::clear_ins_gpsflag_heading() {
  ins_gpsflag_heading_ = 0;
  clear_has_ins_gpsflag_heading();
}
inline ::google::protobuf::int32 Chassis::ins_gpsflag_heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_gpsflag_heading)
  return ins_gpsflag_heading_;
}
inline void Chassis::set_ins_gpsflag_heading(::google::protobuf::int32 value) {
  set_has_ins_gpsflag_heading();
  ins_gpsflag_heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_gpsflag_heading)
}

// optional int32 ins_gps_age = 75;
inline bool Chassis::has_ins_gps_age() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void Chassis::set_has_ins_gps_age() {
  _has_bits_[1] |= 0x80000000u;
}
inline void Chassis::clear_has_ins_gps_age() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void Chassis::clear_ins_gps_age() {
  ins_gps_age_ = 0;
  clear_has_ins_gps_age();
}
inline ::google::protobuf::int32 Chassis::ins_gps_age() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_gps_age)
  return ins_gps_age_;
}
inline void Chassis::set_ins_gps_age(::google::protobuf::int32 value) {
  set_has_ins_gps_age();
  ins_gps_age_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_gps_age)
}

// optional int32 ins_car_status = 76;
inline bool Chassis::has_ins_car_status() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void Chassis::set_has_ins_car_status() {
  _has_bits_[2] |= 0x00000001u;
}
inline void Chassis::clear_has_ins_car_status() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void Chassis::clear_ins_car_status() {
  ins_car_status_ = 0;
  clear_has_ins_car_status();
}
inline ::google::protobuf::int32 Chassis::ins_car_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_car_status)
  return ins_car_status_;
}
inline void Chassis::set_ins_car_status(::google::protobuf::int32 value) {
  set_has_ins_car_status();
  ins_car_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_car_status)
}

// optional int32 ins_status = 77;
inline bool Chassis::has_ins_status() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void Chassis::set_has_ins_status() {
  _has_bits_[2] |= 0x00000008u;
}
inline void Chassis::clear_has_ins_status() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void Chassis::clear_ins_status() {
  ins_status_ = 0;
  clear_has_ins_status();
}
inline ::google::protobuf::int32 Chassis::ins_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_status)
  return ins_status_;
}
inline void Chassis::set_ins_status(::google::protobuf::int32 value) {
  set_has_ins_status();
  ins_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_status)
}

// optional double ins_std_lat = 78;
inline bool Chassis::has_ins_std_lat() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void Chassis::set_has_ins_std_lat() {
  _has_bits_[2] |= 0x00000002u;
}
inline void Chassis::clear_has_ins_std_lat() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void Chassis::clear_ins_std_lat() {
  ins_std_lat_ = 0;
  clear_has_ins_std_lat();
}
inline double Chassis::ins_std_lat() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_std_lat)
  return ins_std_lat_;
}
inline void Chassis::set_ins_std_lat(double value) {
  set_has_ins_std_lat();
  ins_std_lat_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_std_lat)
}

// optional double ins_std_lon = 79;
inline bool Chassis::has_ins_std_lon() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void Chassis::set_has_ins_std_lon() {
  _has_bits_[2] |= 0x00000004u;
}
inline void Chassis::clear_has_ins_std_lon() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void Chassis::clear_ins_std_lon() {
  ins_std_lon_ = 0;
  clear_has_ins_std_lon();
}
inline double Chassis::ins_std_lon() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_std_lon)
  return ins_std_lon_;
}
inline void Chassis::set_ins_std_lon(double value) {
  set_has_ins_std_lon();
  ins_std_lon_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_std_lon)
}

// optional double ins_std_locat_height = 80;
inline bool Chassis::has_ins_std_locat_height() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void Chassis::set_has_ins_std_locat_height() {
  _has_bits_[2] |= 0x00000020u;
}
inline void Chassis::clear_has_ins_std_locat_height() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void Chassis::clear_ins_std_locat_height() {
  ins_std_locat_height_ = 0;
  clear_has_ins_std_locat_height();
}
inline double Chassis::ins_std_locat_height() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_std_locat_height)
  return ins_std_locat_height_;
}
inline void Chassis::set_ins_std_locat_height(double value) {
  set_has_ins_std_locat_height();
  ins_std_locat_height_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_std_locat_height)
}

// optional double ins_std_heading = 81;
inline bool Chassis::has_ins_std_heading() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void Chassis::set_has_ins_std_heading() {
  _has_bits_[2] |= 0x00000040u;
}
inline void Chassis::clear_has_ins_std_heading() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void Chassis::clear_ins_std_heading() {
  ins_std_heading_ = 0;
  clear_has_ins_std_heading();
}
inline double Chassis::ins_std_heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_std_heading)
  return ins_std_heading_;
}
inline void Chassis::set_ins_std_heading(double value) {
  set_has_ins_std_heading();
  ins_std_heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_std_heading)
}

// optional int32 eps_lkacontrolstatus = 82;
inline bool Chassis::has_eps_lkacontrolstatus() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void Chassis::set_has_eps_lkacontrolstatus() {
  _has_bits_[2] |= 0x00000010u;
}
inline void Chassis::clear_has_eps_lkacontrolstatus() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void Chassis::clear_eps_lkacontrolstatus() {
  eps_lkacontrolstatus_ = 0;
  clear_has_eps_lkacontrolstatus();
}
inline ::google::protobuf::int32 Chassis::eps_lkacontrolstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.eps_lkacontrolstatus)
  return eps_lkacontrolstatus_;
}
inline void Chassis::set_eps_lkacontrolstatus(::google::protobuf::int32 value) {
  set_has_eps_lkacontrolstatus();
  eps_lkacontrolstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.eps_lkacontrolstatus)
}

// optional int32 esp_vlc_active = 83;
inline bool Chassis::has_esp_vlc_active() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void Chassis::set_has_esp_vlc_active() {
  _has_bits_[2] |= 0x00000080u;
}
inline void Chassis::clear_has_esp_vlc_active() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void Chassis::clear_esp_vlc_active() {
  esp_vlc_active_ = 0;
  clear_has_esp_vlc_active();
}
inline ::google::protobuf::int32 Chassis::esp_vlc_active() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_vlc_active)
  return esp_vlc_active_;
}
inline void Chassis::set_esp_vlc_active(::google::protobuf::int32 value) {
  set_has_esp_vlc_active();
  esp_vlc_active_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_vlc_active)
}

// optional int32 esp_vlc_available = 84;
inline bool Chassis::has_esp_vlc_available() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void Chassis::set_has_esp_vlc_available() {
  _has_bits_[2] |= 0x00000100u;
}
inline void Chassis::clear_has_esp_vlc_available() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void Chassis::clear_esp_vlc_available() {
  esp_vlc_available_ = 0;
  clear_has_esp_vlc_available();
}
inline ::google::protobuf::int32 Chassis::esp_vlc_available() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_vlc_available)
  return esp_vlc_available_;
}
inline void Chassis::set_esp_vlc_available(::google::protobuf::int32 value) {
  set_has_esp_vlc_available();
  esp_vlc_available_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_vlc_available)
}

// optional int32 esp_apa_gearboxenable = 85;
inline bool Chassis::has_esp_apa_gearboxenable() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void Chassis::set_has_esp_apa_gearboxenable() {
  _has_bits_[2] |= 0x00000200u;
}
inline void Chassis::clear_has_esp_apa_gearboxenable() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void Chassis::clear_esp_apa_gearboxenable() {
  esp_apa_gearboxenable_ = 0;
  clear_has_esp_apa_gearboxenable();
}
inline ::google::protobuf::int32 Chassis::esp_apa_gearboxenable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_apa_gearboxenable)
  return esp_apa_gearboxenable_;
}
inline void Chassis::set_esp_apa_gearboxenable(::google::protobuf::int32 value) {
  set_has_esp_apa_gearboxenable();
  esp_apa_gearboxenable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_apa_gearboxenable)
}

// optional int32 esp_vlc_apactive = 86;
inline bool Chassis::has_esp_vlc_apactive() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void Chassis::set_has_esp_vlc_apactive() {
  _has_bits_[2] |= 0x00000400u;
}
inline void Chassis::clear_has_esp_vlc_apactive() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void Chassis::clear_esp_vlc_apactive() {
  esp_vlc_apactive_ = 0;
  clear_has_esp_vlc_apactive();
}
inline ::google::protobuf::int32 Chassis::esp_vlc_apactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_vlc_apactive)
  return esp_vlc_apactive_;
}
inline void Chassis::set_esp_vlc_apactive(::google::protobuf::int32 value) {
  set_has_esp_vlc_apactive();
  esp_vlc_apactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_vlc_apactive)
}

// optional int32 esp_vlcapa_available = 87;
inline bool Chassis::has_esp_vlcapa_available() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void Chassis::set_has_esp_vlcapa_available() {
  _has_bits_[2] |= 0x00000800u;
}
inline void Chassis::clear_has_esp_vlcapa_available() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void Chassis::clear_esp_vlcapa_available() {
  esp_vlcapa_available_ = 0;
  clear_has_esp_vlcapa_available();
}
inline ::google::protobuf::int32 Chassis::esp_vlcapa_available() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_vlcapa_available)
  return esp_vlcapa_available_;
}
inline void Chassis::set_esp_vlcapa_available(::google::protobuf::int32 value) {
  set_has_esp_vlcapa_available();
  esp_vlcapa_available_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_vlcapa_available)
}

// optional int32 esp_epbstatus = 88;
inline bool Chassis::has_esp_epbstatus() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void Chassis::set_has_esp_epbstatus() {
  _has_bits_[2] |= 0x00001000u;
}
inline void Chassis::clear_has_esp_epbstatus() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void Chassis::clear_esp_epbstatus() {
  esp_epbstatus_ = 0;
  clear_has_esp_epbstatus();
}
inline ::google::protobuf::int32 Chassis::esp_epbstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_epbstatus)
  return esp_epbstatus_;
}
inline void Chassis::set_esp_epbstatus(::google::protobuf::int32 value) {
  set_has_esp_epbstatus();
  esp_epbstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_epbstatus)
}

// -------------------------------------------------------------------

// ChassisGPS

// optional double latitude = 1;
inline bool ChassisGPS::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChassisGPS::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChassisGPS::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChassisGPS::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double ChassisGPS::latitude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.latitude)
  return latitude_;
}
inline void ChassisGPS::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.latitude)
}

// optional double longitude = 2;
inline bool ChassisGPS::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChassisGPS::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChassisGPS::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChassisGPS::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double ChassisGPS::longitude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.longitude)
  return longitude_;
}
inline void ChassisGPS::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.longitude)
}

// optional bool gps_valid = 3;
inline bool ChassisGPS::has_gps_valid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChassisGPS::set_has_gps_valid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChassisGPS::clear_has_gps_valid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChassisGPS::clear_gps_valid() {
  gps_valid_ = false;
  clear_has_gps_valid();
}
inline bool ChassisGPS::gps_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.gps_valid)
  return gps_valid_;
}
inline void ChassisGPS::set_gps_valid(bool value) {
  set_has_gps_valid();
  gps_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.gps_valid)
}

// optional int32 year = 4;
inline bool ChassisGPS::has_year() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChassisGPS::set_has_year() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChassisGPS::clear_has_year() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChassisGPS::clear_year() {
  year_ = 0;
  clear_has_year();
}
inline ::google::protobuf::int32 ChassisGPS::year() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.year)
  return year_;
}
inline void ChassisGPS::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.year)
}

// optional int32 month = 5;
inline bool ChassisGPS::has_month() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChassisGPS::set_has_month() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChassisGPS::clear_has_month() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChassisGPS::clear_month() {
  month_ = 0;
  clear_has_month();
}
inline ::google::protobuf::int32 ChassisGPS::month() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.month)
  return month_;
}
inline void ChassisGPS::set_month(::google::protobuf::int32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.month)
}

// optional int32 day = 6;
inline bool ChassisGPS::has_day() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChassisGPS::set_has_day() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChassisGPS::clear_has_day() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChassisGPS::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 ChassisGPS::day() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.day)
  return day_;
}
inline void ChassisGPS::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.day)
}

// optional int32 hours = 7;
inline bool ChassisGPS::has_hours() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChassisGPS::set_has_hours() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChassisGPS::clear_has_hours() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChassisGPS::clear_hours() {
  hours_ = 0;
  clear_has_hours();
}
inline ::google::protobuf::int32 ChassisGPS::hours() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.hours)
  return hours_;
}
inline void ChassisGPS::set_hours(::google::protobuf::int32 value) {
  set_has_hours();
  hours_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.hours)
}

// optional int32 minutes = 8;
inline bool ChassisGPS::has_minutes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChassisGPS::set_has_minutes() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChassisGPS::clear_has_minutes() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChassisGPS::clear_minutes() {
  minutes_ = 0;
  clear_has_minutes();
}
inline ::google::protobuf::int32 ChassisGPS::minutes() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.minutes)
  return minutes_;
}
inline void ChassisGPS::set_minutes(::google::protobuf::int32 value) {
  set_has_minutes();
  minutes_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.minutes)
}

// optional int32 seconds = 9;
inline bool ChassisGPS::has_seconds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChassisGPS::set_has_seconds() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChassisGPS::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChassisGPS::clear_seconds() {
  seconds_ = 0;
  clear_has_seconds();
}
inline ::google::protobuf::int32 ChassisGPS::seconds() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.seconds)
  return seconds_;
}
inline void ChassisGPS::set_seconds(::google::protobuf::int32 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.seconds)
}

// optional double compass_direction = 10;
inline bool ChassisGPS::has_compass_direction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChassisGPS::set_has_compass_direction() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChassisGPS::clear_has_compass_direction() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChassisGPS::clear_compass_direction() {
  compass_direction_ = 0;
  clear_has_compass_direction();
}
inline double ChassisGPS::compass_direction() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.compass_direction)
  return compass_direction_;
}
inline void ChassisGPS::set_compass_direction(double value) {
  set_has_compass_direction();
  compass_direction_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.compass_direction)
}

// optional double pdop = 11;
inline bool ChassisGPS::has_pdop() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChassisGPS::set_has_pdop() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChassisGPS::clear_has_pdop() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChassisGPS::clear_pdop() {
  pdop_ = 0;
  clear_has_pdop();
}
inline double ChassisGPS::pdop() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.pdop)
  return pdop_;
}
inline void ChassisGPS::set_pdop(double value) {
  set_has_pdop();
  pdop_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.pdop)
}

// optional bool is_gps_fault = 12;
inline bool ChassisGPS::has_is_gps_fault() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChassisGPS::set_has_is_gps_fault() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChassisGPS::clear_has_is_gps_fault() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChassisGPS::clear_is_gps_fault() {
  is_gps_fault_ = false;
  clear_has_is_gps_fault();
}
inline bool ChassisGPS::is_gps_fault() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.is_gps_fault)
  return is_gps_fault_;
}
inline void ChassisGPS::set_is_gps_fault(bool value) {
  set_has_is_gps_fault();
  is_gps_fault_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.is_gps_fault)
}

// optional bool is_inferred = 13;
inline bool ChassisGPS::has_is_inferred() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChassisGPS::set_has_is_inferred() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChassisGPS::clear_has_is_inferred() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChassisGPS::clear_is_inferred() {
  is_inferred_ = false;
  clear_has_is_inferred();
}
inline bool ChassisGPS::is_inferred() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.is_inferred)
  return is_inferred_;
}
inline void ChassisGPS::set_is_inferred(bool value) {
  set_has_is_inferred();
  is_inferred_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.is_inferred)
}

// optional double altitude = 14;
inline bool ChassisGPS::has_altitude() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChassisGPS::set_has_altitude() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChassisGPS::clear_has_altitude() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChassisGPS::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double ChassisGPS::altitude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.altitude)
  return altitude_;
}
inline void ChassisGPS::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.altitude)
}

// optional double heading = 15;
inline bool ChassisGPS::has_heading() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChassisGPS::set_has_heading() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChassisGPS::clear_has_heading() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChassisGPS::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double ChassisGPS::heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.heading)
  return heading_;
}
inline void ChassisGPS::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.heading)
}

// optional double hdop = 16;
inline bool ChassisGPS::has_hdop() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChassisGPS::set_has_hdop() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChassisGPS::clear_has_hdop() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChassisGPS::clear_hdop() {
  hdop_ = 0;
  clear_has_hdop();
}
inline double ChassisGPS::hdop() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.hdop)
  return hdop_;
}
inline void ChassisGPS::set_hdop(double value) {
  set_has_hdop();
  hdop_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.hdop)
}

// optional double vdop = 17;
inline bool ChassisGPS::has_vdop() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChassisGPS::set_has_vdop() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChassisGPS::clear_has_vdop() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChassisGPS::clear_vdop() {
  vdop_ = 0;
  clear_has_vdop();
}
inline double ChassisGPS::vdop() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.vdop)
  return vdop_;
}
inline void ChassisGPS::set_vdop(double value) {
  set_has_vdop();
  vdop_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.vdop)
}

// optional .jmc_auto.canbus.GpsQuality quality = 18;
inline bool ChassisGPS::has_quality() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChassisGPS::set_has_quality() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChassisGPS::clear_has_quality() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChassisGPS::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::jmc_auto::canbus::GpsQuality ChassisGPS::quality() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.quality)
  return static_cast< ::jmc_auto::canbus::GpsQuality >(quality_);
}
inline void ChassisGPS::set_quality(::jmc_auto::canbus::GpsQuality value) {
  assert(::jmc_auto::canbus::GpsQuality_IsValid(value));
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.quality)
}

// optional int32 num_satellites = 19;
inline bool ChassisGPS::has_num_satellites() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ChassisGPS::set_has_num_satellites() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ChassisGPS::clear_has_num_satellites() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ChassisGPS::clear_num_satellites() {
  num_satellites_ = 0;
  clear_has_num_satellites();
}
inline ::google::protobuf::int32 ChassisGPS::num_satellites() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.num_satellites)
  return num_satellites_;
}
inline void ChassisGPS::set_num_satellites(::google::protobuf::int32 value) {
  set_has_num_satellites();
  num_satellites_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.num_satellites)
}

// optional double gps_speed = 20;
inline bool ChassisGPS::has_gps_speed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChassisGPS::set_has_gps_speed() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChassisGPS::clear_has_gps_speed() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChassisGPS::clear_gps_speed() {
  gps_speed_ = 0;
  clear_has_gps_speed();
}
inline double ChassisGPS::gps_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.gps_speed)
  return gps_speed_;
}
inline void ChassisGPS::set_gps_speed(double value) {
  set_has_gps_speed();
  gps_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.gps_speed)
}

// -------------------------------------------------------------------

// WheelSpeed

// optional bool is_wheel_spd_rr_valid = 1 [default = false];
inline bool WheelSpeed::has_is_wheel_spd_rr_valid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WheelSpeed::set_has_is_wheel_spd_rr_valid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WheelSpeed::clear_has_is_wheel_spd_rr_valid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WheelSpeed::clear_is_wheel_spd_rr_valid() {
  is_wheel_spd_rr_valid_ = false;
  clear_has_is_wheel_spd_rr_valid();
}
inline bool WheelSpeed::is_wheel_spd_rr_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.is_wheel_spd_rr_valid)
  return is_wheel_spd_rr_valid_;
}
inline void WheelSpeed::set_is_wheel_spd_rr_valid(bool value) {
  set_has_is_wheel_spd_rr_valid();
  is_wheel_spd_rr_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.is_wheel_spd_rr_valid)
}

// optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
inline bool WheelSpeed::has_wheel_direction_rr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WheelSpeed::set_has_wheel_direction_rr() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WheelSpeed::clear_has_wheel_direction_rr() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WheelSpeed::clear_wheel_direction_rr() {
  wheel_direction_rr_ = 3;
  clear_has_wheel_direction_rr();
}
inline ::jmc_auto::canbus::WheelSpeed_WheelSpeedType WheelSpeed::wheel_direction_rr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.wheel_direction_rr)
  return static_cast< ::jmc_auto::canbus::WheelSpeed_WheelSpeedType >(wheel_direction_rr_);
}
inline void WheelSpeed::set_wheel_direction_rr(::jmc_auto::canbus::WheelSpeed_WheelSpeedType value) {
  assert(::jmc_auto::canbus::WheelSpeed_WheelSpeedType_IsValid(value));
  set_has_wheel_direction_rr();
  wheel_direction_rr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.wheel_direction_rr)
}

// optional double wheel_spd_rr = 3 [default = 0];
inline bool WheelSpeed::has_wheel_spd_rr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WheelSpeed::set_has_wheel_spd_rr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WheelSpeed::clear_has_wheel_spd_rr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WheelSpeed::clear_wheel_spd_rr() {
  wheel_spd_rr_ = 0;
  clear_has_wheel_spd_rr();
}
inline double WheelSpeed::wheel_spd_rr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.wheel_spd_rr)
  return wheel_spd_rr_;
}
inline void WheelSpeed::set_wheel_spd_rr(double value) {
  set_has_wheel_spd_rr();
  wheel_spd_rr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.wheel_spd_rr)
}

// optional bool is_wheel_spd_rl_valid = 4 [default = false];
inline bool WheelSpeed::has_is_wheel_spd_rl_valid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WheelSpeed::set_has_is_wheel_spd_rl_valid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WheelSpeed::clear_has_is_wheel_spd_rl_valid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WheelSpeed::clear_is_wheel_spd_rl_valid() {
  is_wheel_spd_rl_valid_ = false;
  clear_has_is_wheel_spd_rl_valid();
}
inline bool WheelSpeed::is_wheel_spd_rl_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.is_wheel_spd_rl_valid)
  return is_wheel_spd_rl_valid_;
}
inline void WheelSpeed::set_is_wheel_spd_rl_valid(bool value) {
  set_has_is_wheel_spd_rl_valid();
  is_wheel_spd_rl_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.is_wheel_spd_rl_valid)
}

// optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
inline bool WheelSpeed::has_wheel_direction_rl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WheelSpeed::set_has_wheel_direction_rl() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WheelSpeed::clear_has_wheel_direction_rl() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WheelSpeed::clear_wheel_direction_rl() {
  wheel_direction_rl_ = 3;
  clear_has_wheel_direction_rl();
}
inline ::jmc_auto::canbus::WheelSpeed_WheelSpeedType WheelSpeed::wheel_direction_rl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.wheel_direction_rl)
  return static_cast< ::jmc_auto::canbus::WheelSpeed_WheelSpeedType >(wheel_direction_rl_);
}
inline void WheelSpeed::set_wheel_direction_rl(::jmc_auto::canbus::WheelSpeed_WheelSpeedType value) {
  assert(::jmc_auto::canbus::WheelSpeed_WheelSpeedType_IsValid(value));
  set_has_wheel_direction_rl();
  wheel_direction_rl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.wheel_direction_rl)
}

// optional double wheel_spd_rl = 6 [default = 0];
inline bool WheelSpeed::has_wheel_spd_rl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WheelSpeed::set_has_wheel_spd_rl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WheelSpeed::clear_has_wheel_spd_rl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WheelSpeed::clear_wheel_spd_rl() {
  wheel_spd_rl_ = 0;
  clear_has_wheel_spd_rl();
}
inline double WheelSpeed::wheel_spd_rl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.wheel_spd_rl)
  return wheel_spd_rl_;
}
inline void WheelSpeed::set_wheel_spd_rl(double value) {
  set_has_wheel_spd_rl();
  wheel_spd_rl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.wheel_spd_rl)
}

// optional bool is_wheel_spd_fr_valid = 7 [default = false];
inline bool WheelSpeed::has_is_wheel_spd_fr_valid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WheelSpeed::set_has_is_wheel_spd_fr_valid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WheelSpeed::clear_has_is_wheel_spd_fr_valid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WheelSpeed::clear_is_wheel_spd_fr_valid() {
  is_wheel_spd_fr_valid_ = false;
  clear_has_is_wheel_spd_fr_valid();
}
inline bool WheelSpeed::is_wheel_spd_fr_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.is_wheel_spd_fr_valid)
  return is_wheel_spd_fr_valid_;
}
inline void WheelSpeed::set_is_wheel_spd_fr_valid(bool value) {
  set_has_is_wheel_spd_fr_valid();
  is_wheel_spd_fr_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.is_wheel_spd_fr_valid)
}

// optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
inline bool WheelSpeed::has_wheel_direction_fr() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WheelSpeed::set_has_wheel_direction_fr() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WheelSpeed::clear_has_wheel_direction_fr() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WheelSpeed::clear_wheel_direction_fr() {
  wheel_direction_fr_ = 3;
  clear_has_wheel_direction_fr();
}
inline ::jmc_auto::canbus::WheelSpeed_WheelSpeedType WheelSpeed::wheel_direction_fr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.wheel_direction_fr)
  return static_cast< ::jmc_auto::canbus::WheelSpeed_WheelSpeedType >(wheel_direction_fr_);
}
inline void WheelSpeed::set_wheel_direction_fr(::jmc_auto::canbus::WheelSpeed_WheelSpeedType value) {
  assert(::jmc_auto::canbus::WheelSpeed_WheelSpeedType_IsValid(value));
  set_has_wheel_direction_fr();
  wheel_direction_fr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.wheel_direction_fr)
}

// optional double wheel_spd_fr = 9 [default = 0];
inline bool WheelSpeed::has_wheel_spd_fr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WheelSpeed::set_has_wheel_spd_fr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WheelSpeed::clear_has_wheel_spd_fr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WheelSpeed::clear_wheel_spd_fr() {
  wheel_spd_fr_ = 0;
  clear_has_wheel_spd_fr();
}
inline double WheelSpeed::wheel_spd_fr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.wheel_spd_fr)
  return wheel_spd_fr_;
}
inline void WheelSpeed::set_wheel_spd_fr(double value) {
  set_has_wheel_spd_fr();
  wheel_spd_fr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.wheel_spd_fr)
}

// optional bool is_wheel_spd_fl_valid = 10 [default = false];
inline bool WheelSpeed::has_is_wheel_spd_fl_valid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WheelSpeed::set_has_is_wheel_spd_fl_valid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WheelSpeed::clear_has_is_wheel_spd_fl_valid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WheelSpeed::clear_is_wheel_spd_fl_valid() {
  is_wheel_spd_fl_valid_ = false;
  clear_has_is_wheel_spd_fl_valid();
}
inline bool WheelSpeed::is_wheel_spd_fl_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.is_wheel_spd_fl_valid)
  return is_wheel_spd_fl_valid_;
}
inline void WheelSpeed::set_is_wheel_spd_fl_valid(bool value) {
  set_has_is_wheel_spd_fl_valid();
  is_wheel_spd_fl_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.is_wheel_spd_fl_valid)
}

// optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
inline bool WheelSpeed::has_wheel_direction_fl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WheelSpeed::set_has_wheel_direction_fl() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WheelSpeed::clear_has_wheel_direction_fl() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WheelSpeed::clear_wheel_direction_fl() {
  wheel_direction_fl_ = 3;
  clear_has_wheel_direction_fl();
}
inline ::jmc_auto::canbus::WheelSpeed_WheelSpeedType WheelSpeed::wheel_direction_fl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.wheel_direction_fl)
  return static_cast< ::jmc_auto::canbus::WheelSpeed_WheelSpeedType >(wheel_direction_fl_);
}
inline void WheelSpeed::set_wheel_direction_fl(::jmc_auto::canbus::WheelSpeed_WheelSpeedType value) {
  assert(::jmc_auto::canbus::WheelSpeed_WheelSpeedType_IsValid(value));
  set_has_wheel_direction_fl();
  wheel_direction_fl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.wheel_direction_fl)
}

// optional double wheel_spd_fl = 12 [default = 0];
inline bool WheelSpeed::has_wheel_spd_fl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WheelSpeed::set_has_wheel_spd_fl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WheelSpeed::clear_has_wheel_spd_fl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WheelSpeed::clear_wheel_spd_fl() {
  wheel_spd_fl_ = 0;
  clear_has_wheel_spd_fl();
}
inline double WheelSpeed::wheel_spd_fl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.wheel_spd_fl)
  return wheel_spd_fl_;
}
inline void WheelSpeed::set_wheel_spd_fl(double value) {
  set_has_wheel_spd_fl();
  wheel_spd_fl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.wheel_spd_fl)
}

// -------------------------------------------------------------------

// Sonar

// optional double range = 1;
inline bool Sonar::has_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sonar::set_has_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sonar::clear_has_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sonar::clear_range() {
  range_ = 0;
  clear_has_range();
}
inline double Sonar::range() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sonar.range)
  return range_;
}
inline void Sonar::set_range(double value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sonar.range)
}

// optional .jmc_auto.common.Point3D translation = 2;
inline bool Sonar::has_translation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sonar::set_has_translation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sonar::clear_has_translation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sonar::clear_translation() {
  if (translation_ != NULL) translation_->::jmc_auto::common::Point3D::Clear();
  clear_has_translation();
}
inline const ::jmc_auto::common::Point3D& Sonar::translation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sonar.translation)
  return translation_ != NULL ? *translation_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
inline ::jmc_auto::common::Point3D* Sonar::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    translation_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Sonar.translation)
  return translation_;
}
inline ::jmc_auto::common::Point3D* Sonar::release_translation() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Sonar.translation)
  clear_has_translation();
  ::jmc_auto::common::Point3D* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline void Sonar::set_allocated_translation(::jmc_auto::common::Point3D* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Sonar.translation)
}

// optional .jmc_auto.common.Quaternion rotation = 3;
inline bool Sonar::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sonar::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sonar::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sonar::clear_rotation() {
  if (rotation_ != NULL) rotation_->::jmc_auto::common::Quaternion::Clear();
  clear_has_rotation();
}
inline const ::jmc_auto::common::Quaternion& Sonar::rotation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sonar.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::jmc_auto::common::Quaternion::internal_default_instance();
}
inline ::jmc_auto::common::Quaternion* Sonar::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::jmc_auto::common::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Sonar.rotation)
  return rotation_;
}
inline ::jmc_auto::common::Quaternion* Sonar::release_rotation() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Sonar.rotation)
  clear_has_rotation();
  ::jmc_auto::common::Quaternion* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void Sonar::set_allocated_rotation(::jmc_auto::common::Quaternion* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Sonar.rotation)
}

// -------------------------------------------------------------------

// Surround

// optional bool cross_traffic_alert_left = 1;
inline bool Surround::has_cross_traffic_alert_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Surround::set_has_cross_traffic_alert_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Surround::clear_has_cross_traffic_alert_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Surround::clear_cross_traffic_alert_left() {
  cross_traffic_alert_left_ = false;
  clear_has_cross_traffic_alert_left();
}
inline bool Surround::cross_traffic_alert_left() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.cross_traffic_alert_left)
  return cross_traffic_alert_left_;
}
inline void Surround::set_cross_traffic_alert_left(bool value) {
  set_has_cross_traffic_alert_left();
  cross_traffic_alert_left_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.cross_traffic_alert_left)
}

// optional bool cross_traffic_alert_left_enabled = 2;
inline bool Surround::has_cross_traffic_alert_left_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Surround::set_has_cross_traffic_alert_left_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Surround::clear_has_cross_traffic_alert_left_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Surround::clear_cross_traffic_alert_left_enabled() {
  cross_traffic_alert_left_enabled_ = false;
  clear_has_cross_traffic_alert_left_enabled();
}
inline bool Surround::cross_traffic_alert_left_enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.cross_traffic_alert_left_enabled)
  return cross_traffic_alert_left_enabled_;
}
inline void Surround::set_cross_traffic_alert_left_enabled(bool value) {
  set_has_cross_traffic_alert_left_enabled();
  cross_traffic_alert_left_enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.cross_traffic_alert_left_enabled)
}

// optional bool blind_spot_left_alert = 3;
inline bool Surround::has_blind_spot_left_alert() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Surround::set_has_blind_spot_left_alert() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Surround::clear_has_blind_spot_left_alert() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Surround::clear_blind_spot_left_alert() {
  blind_spot_left_alert_ = false;
  clear_has_blind_spot_left_alert();
}
inline bool Surround::blind_spot_left_alert() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.blind_spot_left_alert)
  return blind_spot_left_alert_;
}
inline void Surround::set_blind_spot_left_alert(bool value) {
  set_has_blind_spot_left_alert();
  blind_spot_left_alert_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.blind_spot_left_alert)
}

// optional bool blind_spot_left_alert_enabled = 4;
inline bool Surround::has_blind_spot_left_alert_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Surround::set_has_blind_spot_left_alert_enabled() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Surround::clear_has_blind_spot_left_alert_enabled() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Surround::clear_blind_spot_left_alert_enabled() {
  blind_spot_left_alert_enabled_ = false;
  clear_has_blind_spot_left_alert_enabled();
}
inline bool Surround::blind_spot_left_alert_enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.blind_spot_left_alert_enabled)
  return blind_spot_left_alert_enabled_;
}
inline void Surround::set_blind_spot_left_alert_enabled(bool value) {
  set_has_blind_spot_left_alert_enabled();
  blind_spot_left_alert_enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.blind_spot_left_alert_enabled)
}

// optional bool cross_traffic_alert_right = 5;
inline bool Surround::has_cross_traffic_alert_right() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Surround::set_has_cross_traffic_alert_right() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Surround::clear_has_cross_traffic_alert_right() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Surround::clear_cross_traffic_alert_right() {
  cross_traffic_alert_right_ = false;
  clear_has_cross_traffic_alert_right();
}
inline bool Surround::cross_traffic_alert_right() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.cross_traffic_alert_right)
  return cross_traffic_alert_right_;
}
inline void Surround::set_cross_traffic_alert_right(bool value) {
  set_has_cross_traffic_alert_right();
  cross_traffic_alert_right_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.cross_traffic_alert_right)
}

// optional bool cross_traffic_alert_right_enabled = 6;
inline bool Surround::has_cross_traffic_alert_right_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Surround::set_has_cross_traffic_alert_right_enabled() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Surround::clear_has_cross_traffic_alert_right_enabled() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Surround::clear_cross_traffic_alert_right_enabled() {
  cross_traffic_alert_right_enabled_ = false;
  clear_has_cross_traffic_alert_right_enabled();
}
inline bool Surround::cross_traffic_alert_right_enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.cross_traffic_alert_right_enabled)
  return cross_traffic_alert_right_enabled_;
}
inline void Surround::set_cross_traffic_alert_right_enabled(bool value) {
  set_has_cross_traffic_alert_right_enabled();
  cross_traffic_alert_right_enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.cross_traffic_alert_right_enabled)
}

// optional bool blind_spot_right_alert = 7;
inline bool Surround::has_blind_spot_right_alert() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Surround::set_has_blind_spot_right_alert() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Surround::clear_has_blind_spot_right_alert() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Surround::clear_blind_spot_right_alert() {
  blind_spot_right_alert_ = false;
  clear_has_blind_spot_right_alert();
}
inline bool Surround::blind_spot_right_alert() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.blind_spot_right_alert)
  return blind_spot_right_alert_;
}
inline void Surround::set_blind_spot_right_alert(bool value) {
  set_has_blind_spot_right_alert();
  blind_spot_right_alert_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.blind_spot_right_alert)
}

// optional bool blind_spot_right_alert_enabled = 8;
inline bool Surround::has_blind_spot_right_alert_enabled() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Surround::set_has_blind_spot_right_alert_enabled() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Surround::clear_has_blind_spot_right_alert_enabled() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Surround::clear_blind_spot_right_alert_enabled() {
  blind_spot_right_alert_enabled_ = false;
  clear_has_blind_spot_right_alert_enabled();
}
inline bool Surround::blind_spot_right_alert_enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.blind_spot_right_alert_enabled)
  return blind_spot_right_alert_enabled_;
}
inline void Surround::set_blind_spot_right_alert_enabled(bool value) {
  set_has_blind_spot_right_alert_enabled();
  blind_spot_right_alert_enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.blind_spot_right_alert_enabled)
}

// optional double sonar00 = 9;
inline bool Surround::has_sonar00() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Surround::set_has_sonar00() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Surround::clear_has_sonar00() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Surround::clear_sonar00() {
  sonar00_ = 0;
  clear_has_sonar00();
}
inline double Surround::sonar00() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar00)
  return sonar00_;
}
inline void Surround::set_sonar00(double value) {
  set_has_sonar00();
  sonar00_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar00)
}

// optional double sonar01 = 10;
inline bool Surround::has_sonar01() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Surround::set_has_sonar01() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Surround::clear_has_sonar01() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Surround::clear_sonar01() {
  sonar01_ = 0;
  clear_has_sonar01();
}
inline double Surround::sonar01() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar01)
  return sonar01_;
}
inline void Surround::set_sonar01(double value) {
  set_has_sonar01();
  sonar01_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar01)
}

// optional double sonar02 = 11;
inline bool Surround::has_sonar02() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Surround::set_has_sonar02() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Surround::clear_has_sonar02() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Surround::clear_sonar02() {
  sonar02_ = 0;
  clear_has_sonar02();
}
inline double Surround::sonar02() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar02)
  return sonar02_;
}
inline void Surround::set_sonar02(double value) {
  set_has_sonar02();
  sonar02_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar02)
}

// optional double sonar03 = 12;
inline bool Surround::has_sonar03() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Surround::set_has_sonar03() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Surround::clear_has_sonar03() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Surround::clear_sonar03() {
  sonar03_ = 0;
  clear_has_sonar03();
}
inline double Surround::sonar03() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar03)
  return sonar03_;
}
inline void Surround::set_sonar03(double value) {
  set_has_sonar03();
  sonar03_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar03)
}

// optional double sonar04 = 13;
inline bool Surround::has_sonar04() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Surround::set_has_sonar04() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Surround::clear_has_sonar04() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Surround::clear_sonar04() {
  sonar04_ = 0;
  clear_has_sonar04();
}
inline double Surround::sonar04() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar04)
  return sonar04_;
}
inline void Surround::set_sonar04(double value) {
  set_has_sonar04();
  sonar04_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar04)
}

// optional double sonar05 = 14;
inline bool Surround::has_sonar05() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Surround::set_has_sonar05() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Surround::clear_has_sonar05() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Surround::clear_sonar05() {
  sonar05_ = 0;
  clear_has_sonar05();
}
inline double Surround::sonar05() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar05)
  return sonar05_;
}
inline void Surround::set_sonar05(double value) {
  set_has_sonar05();
  sonar05_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar05)
}

// optional double sonar06 = 15;
inline bool Surround::has_sonar06() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Surround::set_has_sonar06() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Surround::clear_has_sonar06() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Surround::clear_sonar06() {
  sonar06_ = 0;
  clear_has_sonar06();
}
inline double Surround::sonar06() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar06)
  return sonar06_;
}
inline void Surround::set_sonar06(double value) {
  set_has_sonar06();
  sonar06_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar06)
}

// optional double sonar07 = 16;
inline bool Surround::has_sonar07() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Surround::set_has_sonar07() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Surround::clear_has_sonar07() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Surround::clear_sonar07() {
  sonar07_ = 0;
  clear_has_sonar07();
}
inline double Surround::sonar07() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar07)
  return sonar07_;
}
inline void Surround::set_sonar07(double value) {
  set_has_sonar07();
  sonar07_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar07)
}

// optional double sonar08 = 17;
inline bool Surround::has_sonar08() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Surround::set_has_sonar08() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Surround::clear_has_sonar08() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Surround::clear_sonar08() {
  sonar08_ = 0;
  clear_has_sonar08();
}
inline double Surround::sonar08() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar08)
  return sonar08_;
}
inline void Surround::set_sonar08(double value) {
  set_has_sonar08();
  sonar08_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar08)
}

// optional double sonar09 = 18;
inline bool Surround::has_sonar09() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Surround::set_has_sonar09() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Surround::clear_has_sonar09() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Surround::clear_sonar09() {
  sonar09_ = 0;
  clear_has_sonar09();
}
inline double Surround::sonar09() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar09)
  return sonar09_;
}
inline void Surround::set_sonar09(double value) {
  set_has_sonar09();
  sonar09_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar09)
}

// optional double sonar10 = 19;
inline bool Surround::has_sonar10() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Surround::set_has_sonar10() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Surround::clear_has_sonar10() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Surround::clear_sonar10() {
  sonar10_ = 0;
  clear_has_sonar10();
}
inline double Surround::sonar10() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar10)
  return sonar10_;
}
inline void Surround::set_sonar10(double value) {
  set_has_sonar10();
  sonar10_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar10)
}

// optional double sonar11 = 20;
inline bool Surround::has_sonar11() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Surround::set_has_sonar11() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Surround::clear_has_sonar11() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Surround::clear_sonar11() {
  sonar11_ = 0;
  clear_has_sonar11();
}
inline double Surround::sonar11() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar11)
  return sonar11_;
}
inline void Surround::set_sonar11(double value) {
  set_has_sonar11();
  sonar11_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar11)
}

// optional bool sonar_enabled = 21;
inline bool Surround::has_sonar_enabled() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Surround::set_has_sonar_enabled() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Surround::clear_has_sonar_enabled() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Surround::clear_sonar_enabled() {
  sonar_enabled_ = false;
  clear_has_sonar_enabled();
}
inline bool Surround::sonar_enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar_enabled)
  return sonar_enabled_;
}
inline void Surround::set_sonar_enabled(bool value) {
  set_has_sonar_enabled();
  sonar_enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar_enabled)
}

// optional bool sonar_fault = 22;
inline bool Surround::has_sonar_fault() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Surround::set_has_sonar_fault() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Surround::clear_has_sonar_fault() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Surround::clear_sonar_fault() {
  sonar_fault_ = false;
  clear_has_sonar_fault();
}
inline bool Surround::sonar_fault() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar_fault)
  return sonar_fault_;
}
inline void Surround::set_sonar_fault(bool value) {
  set_has_sonar_fault();
  sonar_fault_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar_fault)
}

// repeated double sonar_range = 23;
inline int Surround::sonar_range_size() const {
  return sonar_range_.size();
}
inline void Surround::clear_sonar_range() {
  sonar_range_.Clear();
}
inline double Surround::sonar_range(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar_range)
  return sonar_range_.Get(index);
}
inline void Surround::set_sonar_range(int index, double value) {
  sonar_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar_range)
}
inline void Surround::add_sonar_range(double value) {
  sonar_range_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.canbus.Surround.sonar_range)
}
inline const ::google::protobuf::RepeatedField< double >&
Surround::sonar_range() const {
  // @@protoc_insertion_point(field_list:jmc_auto.canbus.Surround.sonar_range)
  return sonar_range_;
}
inline ::google::protobuf::RepeatedField< double >*
Surround::mutable_sonar_range() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.canbus.Surround.sonar_range)
  return &sonar_range_;
}

// repeated .jmc_auto.canbus.Sonar sonar = 24;
inline int Surround::sonar_size() const {
  return sonar_.size();
}
inline void Surround::clear_sonar() {
  sonar_.Clear();
}
inline const ::jmc_auto::canbus::Sonar& Surround::sonar(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar)
  return sonar_.Get(index);
}
inline ::jmc_auto::canbus::Sonar* Surround::mutable_sonar(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Surround.sonar)
  return sonar_.Mutable(index);
}
inline ::jmc_auto::canbus::Sonar* Surround::add_sonar() {
  // @@protoc_insertion_point(field_add:jmc_auto.canbus.Surround.sonar)
  return sonar_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::canbus::Sonar >*
Surround::mutable_sonar() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.canbus.Surround.sonar)
  return &sonar_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::canbus::Sonar >&
Surround::sonar() const {
  // @@protoc_insertion_point(field_list:jmc_auto.canbus.Surround.sonar)
  return sonar_;
}

// -------------------------------------------------------------------

// License

// optional string vin = 1;
inline bool License::has_vin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void License::set_has_vin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void License::clear_has_vin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void License::clear_vin() {
  vin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vin();
}
inline const ::std::string& License::vin() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.License.vin)
  return vin_.GetNoArena();
}
inline void License::set_vin(const ::std::string& value) {
  set_has_vin();
  vin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.License.vin)
}
#if LANG_CXX11
inline void License::set_vin(::std::string&& value) {
  set_has_vin();
  vin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.canbus.License.vin)
}
#endif
inline void License::set_vin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vin();
  vin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.canbus.License.vin)
}
inline void License::set_vin(const char* value, size_t size) {
  set_has_vin();
  vin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.canbus.License.vin)
}
inline ::std::string* License::mutable_vin() {
  set_has_vin();
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.License.vin)
  return vin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* License::release_vin() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.License.vin)
  clear_has_vin();
  return vin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void License::set_allocated_vin(::std::string* vin) {
  if (vin != NULL) {
    set_has_vin();
  } else {
    clear_has_vin();
  }
  vin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vin);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.License.vin)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace canbus
}  // namespace jmc_auto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::jmc_auto::canbus::Signal_TurnSignal> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Signal_TurnSignal>() {
  return ::jmc_auto::canbus::Signal_TurnSignal_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Chassis_DrivingMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Chassis_DrivingMode>() {
  return ::jmc_auto::canbus::Chassis_DrivingMode_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Chassis_ErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Chassis_ErrorCode>() {
  return ::jmc_auto::canbus::Chassis_ErrorCode_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Chassis_GearPosition> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Chassis_GearPosition>() {
  return ::jmc_auto::canbus::Chassis_GearPosition_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::Chassis_BrkPedalStasus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::Chassis_BrkPedalStasus>() {
  return ::jmc_auto::canbus::Chassis_BrkPedalStasus_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::WheelSpeed_WheelSpeedType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::WheelSpeed_WheelSpeedType>() {
  return ::jmc_auto::canbus::WheelSpeed_WheelSpeedType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::canbus::GpsQuality> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::canbus::GpsQuality>() {
  return ::jmc_auto::canbus::GpsQuality_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fcanbus_2fproto_2fchassis_2eproto__INCLUDED
