// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/canbus/proto/chassis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/canbus/proto/chassis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace canbus {
class SignalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Signal> {
} _Signal_default_instance_;
class ChassisDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Chassis> {
} _Chassis_default_instance_;
class ChassisGPSDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChassisGPS> {
} _ChassisGPS_default_instance_;
class WheelSpeedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WheelSpeed> {
} _WheelSpeed_default_instance_;
class SonarDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Sonar> {
} _Sonar_default_instance_;
class SurroundDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Surround> {
} _Surround_default_instance_;
class LicenseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<License> {
} _License_default_instance_;

namespace protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, turn_signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, high_beam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, low_beam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, horn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, emergency_light_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, engine_started_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, engine_rpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, speed_mps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, odometer_m_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, fuel_range_m_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, throttle_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, brake_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, steering_percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, steering_torque_nm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, parking_brake_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, high_beam_signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, low_beam_signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, left_turn_signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, right_turn_signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, horn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, wiper_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, disengage_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, driving_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, gear_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, steering_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, chassis_error_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, chassis_gps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, engage_advice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, wheel_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, surround_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, lon_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, steer_wheel_rot_spd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, abs_vehspdlgt_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, esp_algtstatus_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, sas_sasstssnsr_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, steerwheelrotspd_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, eps_lkaresponsetorque_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, eps_torsionbartorque_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, eps_tosionbartorquevalid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, abs_whlmilgfrntri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, abs_whlmilgfrntle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, abs_whlmilgrearre_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, abs_whlmilgrearle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, esp_wheelpulse_fl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, esp_wheelpulse_fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, esp_wheelpulse_rl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, esp_wheelpulse_rr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ems_accpedalratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, brkpedalstasus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, abs_whlspdfrntle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, abs_whlspdfrntri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, abs_whlspdrele_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, abs_whlspdreri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, acc_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, acc_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, acc_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, gyro_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, gyro_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, gyro_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_pitchangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_rollangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_headingangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_locatheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_northspd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_eastspd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_togroundspd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_gpsflag_pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_numsv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_gpsflag_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_gps_age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_car_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_std_lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_std_lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_std_locat_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, ins_std_heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, eps_lkacontrolstatus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, esp_vlc_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, esp_vlc_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, esp_apa_gearboxenable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, esp_vlc_apactive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, esp_vlcapa_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chassis, esp_epbstatus_),
  7,
  78,
  79,
  80,
  6,
  81,
  82,
  83,
  77,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  20,
  15,
  16,
  17,
  18,
  0,
  19,
  1,
  2,
  3,
  4,
  5,
  24,
  25,
  21,
  22,
  23,
  26,
  27,
  29,
  28,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  49,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  50,
  61,
  62,
  63,
  64,
  67,
  65,
  66,
  69,
  70,
  68,
  71,
  72,
  73,
  74,
  75,
  76,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, gps_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, hours_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, minutes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, compass_direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, pdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, is_gps_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, is_inferred_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, hdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, vdop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, num_satellites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisGPS, gps_speed_),
  0,
  1,
  10,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  12,
  14,
  15,
  16,
  17,
  13,
  19,
  18,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, is_wheel_spd_rr_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, wheel_direction_rr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, wheel_spd_rr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, is_wheel_spd_rl_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, wheel_direction_rl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, wheel_spd_rl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, is_wheel_spd_fr_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, wheel_direction_fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, wheel_spd_fr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, is_wheel_spd_fl_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, wheel_direction_fl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WheelSpeed, wheel_spd_fl_),
  4,
  8,
  0,
  5,
  9,
  1,
  6,
  10,
  2,
  7,
  11,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, translation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sonar, rotation_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, cross_traffic_alert_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, cross_traffic_alert_left_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, blind_spot_left_alert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, blind_spot_left_alert_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, cross_traffic_alert_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, cross_traffic_alert_right_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, blind_spot_right_alert_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, blind_spot_right_alert_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar00_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar01_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar02_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar03_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar04_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar05_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar06_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar07_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar08_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar09_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar11_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar_fault_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surround, sonar_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(License, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(License, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(License, vin_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(Signal)},
  { 15, 104, sizeof(Chassis)},
  { 188, 213, sizeof(ChassisGPS)},
  { 233, 250, sizeof(WheelSpeed)},
  { 262, 270, sizeof(Sonar)},
  { 273, 302, sizeof(Surround)},
  { 326, 332, sizeof(License)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Signal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Chassis_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChassisGPS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WheelSpeed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Sonar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Surround_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_License_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/canbus/proto/chassis.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _Signal_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Chassis_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ChassisGPS_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _WheelSpeed_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Sonar_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Surround_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _License_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::InitDefaults();
  _Signal_default_instance_.DefaultConstruct();
  _Chassis_default_instance_.DefaultConstruct();
  _ChassisGPS_default_instance_.DefaultConstruct();
  _WheelSpeed_default_instance_.DefaultConstruct();
  _Sonar_default_instance_.DefaultConstruct();
  _Surround_default_instance_.DefaultConstruct();
  _License_default_instance_.DefaultConstruct();
  _Chassis_default_instance_.get_mutable()->header_ = const_cast< ::jmc_auto::common::Header*>(
      ::jmc_auto::common::Header::internal_default_instance());
  _Chassis_default_instance_.get_mutable()->signal_ = const_cast< ::jmc_auto::common::VehicleSignal*>(
      ::jmc_auto::common::VehicleSignal::internal_default_instance());
  _Chassis_default_instance_.get_mutable()->chassis_gps_ = const_cast< ::jmc_auto::canbus::ChassisGPS*>(
      ::jmc_auto::canbus::ChassisGPS::internal_default_instance());
  _Chassis_default_instance_.get_mutable()->engage_advice_ = const_cast< ::jmc_auto::common::EngageAdvice*>(
      ::jmc_auto::common::EngageAdvice::internal_default_instance());
  _Chassis_default_instance_.get_mutable()->wheel_speed_ = const_cast< ::jmc_auto::canbus::WheelSpeed*>(
      ::jmc_auto::canbus::WheelSpeed::internal_default_instance());
  _Chassis_default_instance_.get_mutable()->surround_ = const_cast< ::jmc_auto::canbus::Surround*>(
      ::jmc_auto::canbus::Surround::internal_default_instance());
  _Sonar_default_instance_.get_mutable()->translation_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _Sonar_default_instance_.get_mutable()->rotation_ = const_cast< ::jmc_auto::common::Quaternion*>(
      ::jmc_auto::common::Quaternion::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\"modules/canbus/proto/chassis.proto\022\017jm"
      "c_auto.canbus\032!modules/common/proto/head"
      "er.proto\032)modules/common/proto/vehicle_s"
      "ignal.proto\032&modules/common/proto/drive_"
      "state.proto\032#modules/common/proto/geomet"
      "ry.proto\"\311\001\n\006Signal\0227\n\013turn_signal\030\001 \001(\016"
      "2\".jmc_auto.canbus.Signal.TurnSignal\022\021\n\t"
      "high_beam\030\002 \001(\010\022\020\n\010low_beam\030\003 \001(\010\022\014\n\004hor"
      "n\030\004 \001(\010\022\027\n\017emergency_light\030\005 \001(\010\":\n\nTurn"
      "Signal\022\r\n\tTURN_NONE\020\000\022\r\n\tTURN_LEFT\020\001\022\016\n\n"
      "TURN_RIGHT\020\002\"\207\027\n\007Chassis\022\026\n\016engine_start"
      "ed\030\003 \001(\010\022\027\n\nengine_rpm\030\004 \001(\002:\003nan\022\026\n\tspe"
      "ed_mps\030\005 \001(\002:\003nan\022\027\n\nodometer_m\030\006 \001(\002:\003n"
      "an\022\024\n\014fuel_range_m\030\007 \001(\005\022 \n\023throttle_per"
      "centage\030\010 \001(\002:\003nan\022\035\n\020brake_percentage\030\t"
      " \001(\002:\003nan\022 \n\023steering_percentage\030\013 \001(\002:\003"
      "nan\022\037\n\022steering_torque_nm\030\014 \001(\002:\003nan\022\025\n\r"
      "parking_brake\030\r \001(\010\022\034\n\020high_beam_signal\030"
      "\016 \001(\010B\002\030\001\022\033\n\017low_beam_signal\030\017 \001(\010B\002\030\001\022\034"
      "\n\020left_turn_signal\030\020 \001(\010B\002\030\001\022\035\n\021right_tu"
      "rn_signal\030\021 \001(\010B\002\030\001\022\020\n\004horn\030\022 \001(\010B\002\030\001\022\r\n"
      "\005wiper\030\023 \001(\010\022\034\n\020disengage_status\030\024 \001(\010B\002"
      "\030\001\022K\n\014driving_mode\030\025 \001(\0162$.jmc_auto.canb"
      "us.Chassis.DrivingMode:\017COMPLETE_MANUAL\022"
      "@\n\nerror_code\030\026 \001(\0162\".jmc_auto.canbus.Ch"
      "assis.ErrorCode:\010NO_ERROR\022<\n\rgear_locati"
      "on\030\027 \001(\0162%.jmc_auto.canbus.Chassis.GearP"
      "osition\022\032\n\022steering_timestamp\030\030 \001(\001\022\'\n\006h"
      "eader\030\031 \001(\0132\027.jmc_auto.common.Header\022\035\n\022"
      "chassis_error_mask\030\032 \001(\005:\0010\022.\n\006signal\030\033 "
      "\001(\0132\036.jmc_auto.common.VehicleSignal\0220\n\013c"
      "hassis_gps\030\034 \001(\0132\033.jmc_auto.canbus.Chass"
      "isGPS\0224\n\rengage_advice\030\035 \001(\0132\035.jmc_auto."
      "common.EngageAdvice\0220\n\013wheel_speed\030\036 \001(\013"
      "2\033.jmc_auto.canbus.WheelSpeed\022+\n\010surroun"
      "d\030\037 \001(\0132\031.jmc_auto.canbus.Surround\022\017\n\007lo"
      "n_acc\030! \001(\002\022\033\n\023steer_wheel_rot_spd\030\" \001(\002"
      "\022\033\n\023abs_vehspdlgt_valid\030# \001(\010\022\034\n\024esp_alg"
      "tstatus_valid\030$ \001(\010\022\034\n\024sas_sasstssnsr_va"
      "lid\030% \001(\010\022\036\n\026steerwheelrotspd_valid\030& \001("
      "\010\022#\n\033eps_lkaresponsetorque_valid\030\' \001(\010\022\034"
      "\n\024eps_torsionbartorque\030( \001(\002\022 \n\030eps_tosi"
      "onbartorquevalid\030) \001(\010\022\031\n\021abs_whlmilgfrn"
      "tri\030* \001(\005\022\031\n\021abs_whlmilgfrntle\030+ \001(\005\022\031\n\021"
      "abs_whlmilgrearre\030, \001(\005\022\031\n\021abs_whlmilgre"
      "arle\030- \001(\005\022\031\n\021esp_wheelpulse_fl\030. \001(\005\022\031\n"
      "\021esp_wheelpulse_fr\030/ \001(\005\022\031\n\021esp_wheelpul"
      "se_rl\0300 \001(\005\022\031\n\021esp_wheelpulse_rr\0301 \001(\005\022\031"
      "\n\021ems_accpedalratio\0302 \001(\001\022\?\n\016brkpedalsta"
      "sus\0303 \001(\0162\'.jmc_auto.canbus.Chassis.BrkP"
      "edalStasus\022\030\n\020abs_whlspdfrntle\0304 \001(\001\022\030\n\020"
      "abs_whlspdfrntri\0305 \001(\001\022\026\n\016abs_whlspdrele"
      "\0306 \001(\001\022\026\n\016abs_whlspdreri\0307 \001(\001\022\r\n\005acc_x\030"
      "8 \001(\001\022\r\n\005acc_y\0309 \001(\001\022\r\n\005acc_z\030: \001(\001\022\016\n\006g"
      "yro_x\030; \001(\001\022\016\n\006gyro_y\030< \001(\001\022\016\n\006gyro_z\030= "
      "\001(\001\022\026\n\016ins_pitchangle\030> \001(\001\022\025\n\rins_rolla"
      "ngle\030\? \001(\001\022\030\n\020ins_headingangle\030@ \001(\001\022\027\n\017"
      "ins_locatheight\030A \001(\001\022\020\n\010ins_time\030B \001(\001\022"
      "\024\n\014ins_latitude\030C \001(\001\022\025\n\rins_longitude\030D"
      " \001(\001\022\024\n\014ins_northspd\030E \001(\001\022\023\n\013ins_eastsp"
      "d\030F \001(\001\022\027\n\017ins_togroundspd\030G \001(\001\022\027\n\017ins_"
      "gpsflag_pos\030H \001(\005\022\021\n\tins_numsv\030I \001(\005\022\033\n\023"
      "ins_gpsflag_heading\030J \001(\005\022\023\n\013ins_gps_age"
      "\030K \001(\005\022\026\n\016ins_car_status\030L \001(\005\022\022\n\nins_st"
      "atus\030M \001(\005\022\023\n\013ins_std_lat\030N \001(\001\022\023\n\013ins_s"
      "td_lon\030O \001(\001\022\034\n\024ins_std_locat_height\030P \001"
      "(\001\022\027\n\017ins_std_heading\030Q \001(\001\022\034\n\024eps_lkaco"
      "ntrolstatus\030R \001(\005\022\026\n\016esp_vlc_active\030S \001("
      "\005\022\031\n\021esp_vlc_available\030T \001(\005\022\035\n\025esp_apa_"
      "gearboxenable\030U \001(\005\022\030\n\020esp_vlc_apactive\030"
      "V \001(\005\022\034\n\024esp_vlcapa_available\030W \001(\005\022\025\n\re"
      "sp_epbstatus\030X \001(\005\"\230\001\n\013DrivingMode\022\023\n\017CO"
      "MPLETE_MANUAL\020\000\022\027\n\023COMPLETE_AUTO_DRIVE\020\001"
      "\022\023\n\017AUTO_STEER_ONLY\020\002\022\023\n\017AUTO_SPEED_ONLY"
      "\020\003\022\022\n\016EMERGENCY_MODE\020\004\022\017\n\013REMOTE_MODE\020\005\022"
      "\014\n\010APA_MODE\020\006\"\216\001\n\tErrorCode\022\014\n\010NO_ERROR\020"
      "\000\022\025\n\021CMD_NOT_IN_PERIOD\020\001\022\021\n\rCHASSIS_ERRO"
      "R\020\002\022\027\n\023MANUAL_INTERVENTION\020\003\022\035\n\031CHASSIS_"
      "CAN_NOT_IN_PERIOD\020\004\022\021\n\rUNKNOWN_ERROR\020\005\"\203"
      "\001\n\014GearPosition\022\020\n\014GEAR_NEUTRAL\020\000\022\016\n\nGEA"
      "R_DRIVE\020\001\022\020\n\014GEAR_REVERSE\020\002\022\020\n\014GEAR_PARK"
      "ING\020\003\022\014\n\010GEAR_LOW\020\004\022\020\n\014GEAR_INVALID\020\005\022\r\n"
      "\tGEAR_NONE\020\006\"H\n\016BrkPedalStasus\022\017\n\013NOT_PR"
      "ESSED\020\000\022\013\n\007PRESSED\020\001\022\r\n\tRESERRVED\020\002\022\t\n\005E"
      "RROR\020\003\"\213\003\n\nChassisGPS\022\020\n\010latitude\030\001 \001(\001\022"
      "\021\n\tlongitude\030\002 \001(\001\022\021\n\tgps_valid\030\003 \001(\010\022\014\n"
      "\004year\030\004 \001(\005\022\r\n\005month\030\005 \001(\005\022\013\n\003day\030\006 \001(\005\022"
      "\r\n\005hours\030\007 \001(\005\022\017\n\007minutes\030\010 \001(\005\022\017\n\007secon"
      "ds\030\t \001(\005\022\031\n\021compass_direction\030\n \001(\001\022\014\n\004p"
      "dop\030\013 \001(\001\022\024\n\014is_gps_fault\030\014 \001(\010\022\023\n\013is_in"
      "ferred\030\r \001(\010\022\020\n\010altitude\030\016 \001(\001\022\017\n\007headin"
      "g\030\017 \001(\001\022\014\n\004hdop\030\020 \001(\001\022\014\n\004vdop\030\021 \001(\001\022,\n\007q"
      "uality\030\022 \001(\0162\033.jmc_auto.canbus.GpsQualit"
      "y\022\026\n\016num_satellites\030\023 \001(\005\022\021\n\tgps_speed\030\024"
      " \001(\001\"\226\005\n\nWheelSpeed\022$\n\025is_wheel_spd_rr_v"
      "alid\030\001 \001(\010:\005false\022O\n\022wheel_direction_rr\030"
      "\002 \001(\0162*.jmc_auto.canbus.WheelSpeed.Wheel"
      "SpeedType:\007INVALID\022\027\n\014wheel_spd_rr\030\003 \001(\001"
      ":\0010\022$\n\025is_wheel_spd_rl_valid\030\004 \001(\010:\005fals"
      "e\022O\n\022wheel_direction_rl\030\005 \001(\0162*.jmc_auto"
      ".canbus.WheelSpeed.WheelSpeedType:\007INVAL"
      "ID\022\027\n\014wheel_spd_rl\030\006 \001(\001:\0010\022$\n\025is_wheel_"
      "spd_fr_valid\030\007 \001(\010:\005false\022O\n\022wheel_direc"
      "tion_fr\030\010 \001(\0162*.jmc_auto.canbus.WheelSpe"
      "ed.WheelSpeedType:\007INVALID\022\027\n\014wheel_spd_"
      "fr\030\t \001(\001:\0010\022$\n\025is_wheel_spd_fl_valid\030\n \001"
      "(\010:\005false\022O\n\022wheel_direction_fl\030\013 \001(\0162*."
      "jmc_auto.canbus.WheelSpeed.WheelSpeedTyp"
      "e:\007INVALID\022\027\n\014wheel_spd_fl\030\014 \001(\001:\0010\"H\n\016W"
      "heelSpeedType\022\013\n\007FORWARD\020\000\022\014\n\010BACKWARD\020\001"
      "\022\016\n\nSTANDSTILL\020\002\022\013\n\007INVALID\020\003\"t\n\005Sonar\022\r"
      "\n\005range\030\001 \001(\001\022-\n\013translation\030\002 \001(\0132\030.jmc"
      "_auto.common.Point3D\022-\n\010rotation\030\003 \001(\0132\033"
      ".jmc_auto.common.Quaternion\"\346\004\n\010Surround"
      "\022 \n\030cross_traffic_alert_left\030\001 \001(\010\022(\n cr"
      "oss_traffic_alert_left_enabled\030\002 \001(\010\022\035\n\025"
      "blind_spot_left_alert\030\003 \001(\010\022%\n\035blind_spo"
      "t_left_alert_enabled\030\004 \001(\010\022!\n\031cross_traf"
      "fic_alert_right\030\005 \001(\010\022)\n!cross_traffic_a"
      "lert_right_enabled\030\006 \001(\010\022\036\n\026blind_spot_r"
      "ight_alert\030\007 \001(\010\022&\n\036blind_spot_right_ale"
      "rt_enabled\030\010 \001(\010\022\017\n\007sonar00\030\t \001(\001\022\017\n\007son"
      "ar01\030\n \001(\001\022\017\n\007sonar02\030\013 \001(\001\022\017\n\007sonar03\030\014"
      " \001(\001\022\017\n\007sonar04\030\r \001(\001\022\017\n\007sonar05\030\016 \001(\001\022\017"
      "\n\007sonar06\030\017 \001(\001\022\017\n\007sonar07\030\020 \001(\001\022\017\n\007sona"
      "r08\030\021 \001(\001\022\017\n\007sonar09\030\022 \001(\001\022\017\n\007sonar10\030\023 "
      "\001(\001\022\017\n\007sonar11\030\024 \001(\001\022\025\n\rsonar_enabled\030\025 "
      "\001(\010\022\023\n\013sonar_fault\030\026 \001(\010\022\023\n\013sonar_range\030"
      "\027 \003(\001\022%\n\005sonar\030\030 \003(\0132\026.jmc_auto.canbus.S"
      "onar\"\026\n\007License\022\013\n\003vin\030\001 \001(\t*A\n\nGpsQuali"
      "ty\022\n\n\006FIX_NO\020\000\022\n\n\006FIX_2D\020\001\022\n\n\006FIX_3D\020\002\022\017"
      "\n\013FIX_INVALID\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5255);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/canbus/proto/chassis.proto", &protobuf_RegisterTypes);
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fvehicle_5fsignal_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fdrive_5fstate_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto

const ::google::protobuf::EnumDescriptor* Signal_TurnSignal_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_enum_descriptors[0];
}
bool Signal_TurnSignal_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Signal_TurnSignal Signal::TURN_NONE;
const Signal_TurnSignal Signal::TURN_LEFT;
const Signal_TurnSignal Signal::TURN_RIGHT;
const Signal_TurnSignal Signal::TurnSignal_MIN;
const Signal_TurnSignal Signal::TurnSignal_MAX;
const int Signal::TurnSignal_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_DrivingMode_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_enum_descriptors[1];
}
bool Chassis_DrivingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_DrivingMode Chassis::COMPLETE_MANUAL;
const Chassis_DrivingMode Chassis::COMPLETE_AUTO_DRIVE;
const Chassis_DrivingMode Chassis::AUTO_STEER_ONLY;
const Chassis_DrivingMode Chassis::AUTO_SPEED_ONLY;
const Chassis_DrivingMode Chassis::EMERGENCY_MODE;
const Chassis_DrivingMode Chassis::REMOTE_MODE;
const Chassis_DrivingMode Chassis::APA_MODE;
const Chassis_DrivingMode Chassis::DrivingMode_MIN;
const Chassis_DrivingMode Chassis::DrivingMode_MAX;
const int Chassis::DrivingMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_ErrorCode_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_enum_descriptors[2];
}
bool Chassis_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_ErrorCode Chassis::NO_ERROR;
const Chassis_ErrorCode Chassis::CMD_NOT_IN_PERIOD;
const Chassis_ErrorCode Chassis::CHASSIS_ERROR;
const Chassis_ErrorCode Chassis::MANUAL_INTERVENTION;
const Chassis_ErrorCode Chassis::CHASSIS_CAN_NOT_IN_PERIOD;
const Chassis_ErrorCode Chassis::UNKNOWN_ERROR;
const Chassis_ErrorCode Chassis::ErrorCode_MIN;
const Chassis_ErrorCode Chassis::ErrorCode_MAX;
const int Chassis::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_GearPosition_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_enum_descriptors[3];
}
bool Chassis_GearPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_GearPosition Chassis::GEAR_NEUTRAL;
const Chassis_GearPosition Chassis::GEAR_DRIVE;
const Chassis_GearPosition Chassis::GEAR_REVERSE;
const Chassis_GearPosition Chassis::GEAR_PARKING;
const Chassis_GearPosition Chassis::GEAR_LOW;
const Chassis_GearPosition Chassis::GEAR_INVALID;
const Chassis_GearPosition Chassis::GEAR_NONE;
const Chassis_GearPosition Chassis::GearPosition_MIN;
const Chassis_GearPosition Chassis::GearPosition_MAX;
const int Chassis::GearPosition_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Chassis_BrkPedalStasus_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_enum_descriptors[4];
}
bool Chassis_BrkPedalStasus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_BrkPedalStasus Chassis::NOT_PRESSED;
const Chassis_BrkPedalStasus Chassis::PRESSED;
const Chassis_BrkPedalStasus Chassis::RESERRVED;
const Chassis_BrkPedalStasus Chassis::ERROR;
const Chassis_BrkPedalStasus Chassis::BrkPedalStasus_MIN;
const Chassis_BrkPedalStasus Chassis::BrkPedalStasus_MAX;
const int Chassis::BrkPedalStasus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* WheelSpeed_WheelSpeedType_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_enum_descriptors[5];
}
bool WheelSpeed_WheelSpeedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const WheelSpeed_WheelSpeedType WheelSpeed::FORWARD;
const WheelSpeed_WheelSpeedType WheelSpeed::BACKWARD;
const WheelSpeed_WheelSpeedType WheelSpeed::STANDSTILL;
const WheelSpeed_WheelSpeedType WheelSpeed::INVALID;
const WheelSpeed_WheelSpeedType WheelSpeed::WheelSpeedType_MIN;
const WheelSpeed_WheelSpeedType WheelSpeed::WheelSpeedType_MAX;
const int WheelSpeed::WheelSpeedType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GpsQuality_descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_enum_descriptors[6];
}
bool GpsQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signal::kTurnSignalFieldNumber;
const int Signal::kHighBeamFieldNumber;
const int Signal::kLowBeamFieldNumber;
const int Signal::kHornFieldNumber;
const int Signal::kEmergencyLightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signal::Signal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Signal)
}
Signal::Signal(const Signal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&turn_signal_, &from.turn_signal_,
    reinterpret_cast<char*>(&emergency_light_) -
    reinterpret_cast<char*>(&turn_signal_) + sizeof(emergency_light_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Signal)
}

void Signal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&turn_signal_, 0, reinterpret_cast<char*>(&emergency_light_) -
    reinterpret_cast<char*>(&turn_signal_) + sizeof(emergency_light_));
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Signal)
  SharedDtor();
}

void Signal::SharedDtor() {
}

void Signal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signal::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Signal& Signal::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  return *internal_default_instance();
}

Signal* Signal::New(::google::protobuf::Arena* arena) const {
  Signal* n = new Signal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signal::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Signal)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&turn_signal_, 0, reinterpret_cast<char*>(&emergency_light_) -
      reinterpret_cast<char*>(&turn_signal_) + sizeof(emergency_light_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Signal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.canbus.Signal.TurnSignal turn_signal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Signal_TurnSignal_IsValid(value)) {
            set_turn_signal(static_cast< ::jmc_auto::canbus::Signal_TurnSignal >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool high_beam = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_high_beam();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_beam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_beam = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_low_beam();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_beam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horn = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_horn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool emergency_light = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_emergency_light();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emergency_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Signal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Signal)
  return false;
#undef DO_
}

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Signal.TurnSignal turn_signal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->turn_signal(), output);
  }

  // optional bool high_beam = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->high_beam(), output);
  }

  // optional bool low_beam = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->low_beam(), output);
  }

  // optional bool horn = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->horn(), output);
  }

  // optional bool emergency_light = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->emergency_light(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Signal)
}

::google::protobuf::uint8* Signal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Signal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.canbus.Signal.TurnSignal turn_signal = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->turn_signal(), target);
  }

  // optional bool high_beam = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->high_beam(), target);
  }

  // optional bool low_beam = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->low_beam(), target);
  }

  // optional bool horn = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->horn(), target);
  }

  // optional bool emergency_light = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->emergency_light(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Signal)
  return target;
}

size_t Signal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Signal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .jmc_auto.canbus.Signal.TurnSignal turn_signal = 1;
    if (has_turn_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_signal());
    }

    // optional bool high_beam = 2;
    if (has_high_beam()) {
      total_size += 1 + 1;
    }

    // optional bool low_beam = 3;
    if (has_low_beam()) {
      total_size += 1 + 1;
    }

    // optional bool horn = 4;
    if (has_horn()) {
      total_size += 1 + 1;
    }

    // optional bool emergency_light = 5;
    if (has_emergency_light()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  const Signal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Signal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Signal)
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Signal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      turn_signal_ = from.turn_signal_;
    }
    if (cached_has_bits & 0x00000002u) {
      high_beam_ = from.high_beam_;
    }
    if (cached_has_bits & 0x00000004u) {
      low_beam_ = from.low_beam_;
    }
    if (cached_has_bits & 0x00000008u) {
      horn_ = from.horn_;
    }
    if (cached_has_bits & 0x00000010u) {
      emergency_light_ = from.emergency_light_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Signal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  return true;
}

void Signal::Swap(Signal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signal::InternalSwap(Signal* other) {
  std::swap(turn_signal_, other->turn_signal_);
  std::swap(high_beam_, other->high_beam_);
  std::swap(low_beam_, other->low_beam_);
  std::swap(horn_, other->horn_);
  std::swap(emergency_light_, other->emergency_light_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Signal

// optional .jmc_auto.canbus.Signal.TurnSignal turn_signal = 1;
bool Signal::has_turn_signal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Signal::set_has_turn_signal() {
  _has_bits_[0] |= 0x00000001u;
}
void Signal::clear_has_turn_signal() {
  _has_bits_[0] &= ~0x00000001u;
}
void Signal::clear_turn_signal() {
  turn_signal_ = 0;
  clear_has_turn_signal();
}
::jmc_auto::canbus::Signal_TurnSignal Signal::turn_signal() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Signal.turn_signal)
  return static_cast< ::jmc_auto::canbus::Signal_TurnSignal >(turn_signal_);
}
void Signal::set_turn_signal(::jmc_auto::canbus::Signal_TurnSignal value) {
  assert(::jmc_auto::canbus::Signal_TurnSignal_IsValid(value));
  set_has_turn_signal();
  turn_signal_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Signal.turn_signal)
}

// optional bool high_beam = 2;
bool Signal::has_high_beam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Signal::set_has_high_beam() {
  _has_bits_[0] |= 0x00000002u;
}
void Signal::clear_has_high_beam() {
  _has_bits_[0] &= ~0x00000002u;
}
void Signal::clear_high_beam() {
  high_beam_ = false;
  clear_has_high_beam();
}
bool Signal::high_beam() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Signal.high_beam)
  return high_beam_;
}
void Signal::set_high_beam(bool value) {
  set_has_high_beam();
  high_beam_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Signal.high_beam)
}

// optional bool low_beam = 3;
bool Signal::has_low_beam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Signal::set_has_low_beam() {
  _has_bits_[0] |= 0x00000004u;
}
void Signal::clear_has_low_beam() {
  _has_bits_[0] &= ~0x00000004u;
}
void Signal::clear_low_beam() {
  low_beam_ = false;
  clear_has_low_beam();
}
bool Signal::low_beam() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Signal.low_beam)
  return low_beam_;
}
void Signal::set_low_beam(bool value) {
  set_has_low_beam();
  low_beam_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Signal.low_beam)
}

// optional bool horn = 4;
bool Signal::has_horn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Signal::set_has_horn() {
  _has_bits_[0] |= 0x00000008u;
}
void Signal::clear_has_horn() {
  _has_bits_[0] &= ~0x00000008u;
}
void Signal::clear_horn() {
  horn_ = false;
  clear_has_horn();
}
bool Signal::horn() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Signal.horn)
  return horn_;
}
void Signal::set_horn(bool value) {
  set_has_horn();
  horn_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Signal.horn)
}

// optional bool emergency_light = 5;
bool Signal::has_emergency_light() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Signal::set_has_emergency_light() {
  _has_bits_[0] |= 0x00000010u;
}
void Signal::clear_has_emergency_light() {
  _has_bits_[0] &= ~0x00000010u;
}
void Signal::clear_emergency_light() {
  emergency_light_ = false;
  clear_has_emergency_light();
}
bool Signal::emergency_light() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Signal.emergency_light)
  return emergency_light_;
}
void Signal::set_emergency_light(bool value) {
  set_has_emergency_light();
  emergency_light_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Signal.emergency_light)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chassis::kEngineStartedFieldNumber;
const int Chassis::kEngineRpmFieldNumber;
const int Chassis::kSpeedMpsFieldNumber;
const int Chassis::kOdometerMFieldNumber;
const int Chassis::kFuelRangeMFieldNumber;
const int Chassis::kThrottlePercentageFieldNumber;
const int Chassis::kBrakePercentageFieldNumber;
const int Chassis::kSteeringPercentageFieldNumber;
const int Chassis::kSteeringTorqueNmFieldNumber;
const int Chassis::kParkingBrakeFieldNumber;
const int Chassis::kHighBeamSignalFieldNumber;
const int Chassis::kLowBeamSignalFieldNumber;
const int Chassis::kLeftTurnSignalFieldNumber;
const int Chassis::kRightTurnSignalFieldNumber;
const int Chassis::kHornFieldNumber;
const int Chassis::kWiperFieldNumber;
const int Chassis::kDisengageStatusFieldNumber;
const int Chassis::kDrivingModeFieldNumber;
const int Chassis::kErrorCodeFieldNumber;
const int Chassis::kGearLocationFieldNumber;
const int Chassis::kSteeringTimestampFieldNumber;
const int Chassis::kHeaderFieldNumber;
const int Chassis::kChassisErrorMaskFieldNumber;
const int Chassis::kSignalFieldNumber;
const int Chassis::kChassisGpsFieldNumber;
const int Chassis::kEngageAdviceFieldNumber;
const int Chassis::kWheelSpeedFieldNumber;
const int Chassis::kSurroundFieldNumber;
const int Chassis::kLonAccFieldNumber;
const int Chassis::kSteerWheelRotSpdFieldNumber;
const int Chassis::kAbsVehspdlgtValidFieldNumber;
const int Chassis::kEspAlgtstatusValidFieldNumber;
const int Chassis::kSasSasstssnsrValidFieldNumber;
const int Chassis::kSteerwheelrotspdValidFieldNumber;
const int Chassis::kEpsLkaresponsetorqueValidFieldNumber;
const int Chassis::kEpsTorsionbartorqueFieldNumber;
const int Chassis::kEpsTosionbartorquevalidFieldNumber;
const int Chassis::kAbsWhlmilgfrntriFieldNumber;
const int Chassis::kAbsWhlmilgfrntleFieldNumber;
const int Chassis::kAbsWhlmilgrearreFieldNumber;
const int Chassis::kAbsWhlmilgrearleFieldNumber;
const int Chassis::kEspWheelpulseFlFieldNumber;
const int Chassis::kEspWheelpulseFrFieldNumber;
const int Chassis::kEspWheelpulseRlFieldNumber;
const int Chassis::kEspWheelpulseRrFieldNumber;
const int Chassis::kEmsAccpedalratioFieldNumber;
const int Chassis::kBrkpedalstasusFieldNumber;
const int Chassis::kAbsWhlspdfrntleFieldNumber;
const int Chassis::kAbsWhlspdfrntriFieldNumber;
const int Chassis::kAbsWhlspdreleFieldNumber;
const int Chassis::kAbsWhlspdreriFieldNumber;
const int Chassis::kAccXFieldNumber;
const int Chassis::kAccYFieldNumber;
const int Chassis::kAccZFieldNumber;
const int Chassis::kGyroXFieldNumber;
const int Chassis::kGyroYFieldNumber;
const int Chassis::kGyroZFieldNumber;
const int Chassis::kInsPitchangleFieldNumber;
const int Chassis::kInsRollangleFieldNumber;
const int Chassis::kInsHeadingangleFieldNumber;
const int Chassis::kInsLocatheightFieldNumber;
const int Chassis::kInsTimeFieldNumber;
const int Chassis::kInsLatitudeFieldNumber;
const int Chassis::kInsLongitudeFieldNumber;
const int Chassis::kInsNorthspdFieldNumber;
const int Chassis::kInsEastspdFieldNumber;
const int Chassis::kInsTogroundspdFieldNumber;
const int Chassis::kInsGpsflagPosFieldNumber;
const int Chassis::kInsNumsvFieldNumber;
const int Chassis::kInsGpsflagHeadingFieldNumber;
const int Chassis::kInsGpsAgeFieldNumber;
const int Chassis::kInsCarStatusFieldNumber;
const int Chassis::kInsStatusFieldNumber;
const int Chassis::kInsStdLatFieldNumber;
const int Chassis::kInsStdLonFieldNumber;
const int Chassis::kInsStdLocatHeightFieldNumber;
const int Chassis::kInsStdHeadingFieldNumber;
const int Chassis::kEpsLkacontrolstatusFieldNumber;
const int Chassis::kEspVlcActiveFieldNumber;
const int Chassis::kEspVlcAvailableFieldNumber;
const int Chassis::kEspApaGearboxenableFieldNumber;
const int Chassis::kEspVlcApactiveFieldNumber;
const int Chassis::kEspVlcapaAvailableFieldNumber;
const int Chassis::kEspEpbstatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chassis::Chassis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Chassis)
}
Chassis::Chassis(const Chassis& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::jmc_auto::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_signal()) {
    signal_ = new ::jmc_auto::common::VehicleSignal(*from.signal_);
  } else {
    signal_ = NULL;
  }
  if (from.has_chassis_gps()) {
    chassis_gps_ = new ::jmc_auto::canbus::ChassisGPS(*from.chassis_gps_);
  } else {
    chassis_gps_ = NULL;
  }
  if (from.has_engage_advice()) {
    engage_advice_ = new ::jmc_auto::common::EngageAdvice(*from.engage_advice_);
  } else {
    engage_advice_ = NULL;
  }
  if (from.has_wheel_speed()) {
    wheel_speed_ = new ::jmc_auto::canbus::WheelSpeed(*from.wheel_speed_);
  } else {
    wheel_speed_ = NULL;
  }
  if (from.has_surround()) {
    surround_ = new ::jmc_auto::canbus::Surround(*from.surround_);
  } else {
    surround_ = NULL;
  }
  ::memcpy(&fuel_range_m_, &from.fuel_range_m_,
    reinterpret_cast<char*>(&steering_percentage_) -
    reinterpret_cast<char*>(&fuel_range_m_) + sizeof(steering_percentage_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Chassis)
}

void Chassis::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&esp_epbstatus_) -
    reinterpret_cast<char*>(&header_) + sizeof(esp_epbstatus_));
  steering_torque_nm_ = static_cast<float>(::google::protobuf::internal::NaN());
  engine_rpm_ = static_cast<float>(::google::protobuf::internal::NaN());
  speed_mps_ = static_cast<float>(::google::protobuf::internal::NaN());
  odometer_m_ = static_cast<float>(::google::protobuf::internal::NaN());
  throttle_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  brake_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  steering_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
}

Chassis::~Chassis() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Chassis)
  SharedDtor();
}

void Chassis::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete signal_;
  }
  if (this != internal_default_instance()) {
    delete chassis_gps_;
  }
  if (this != internal_default_instance()) {
    delete engage_advice_;
  }
  if (this != internal_default_instance()) {
    delete wheel_speed_;
  }
  if (this != internal_default_instance()) {
    delete surround_;
  }
}

void Chassis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chassis::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Chassis& Chassis::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  return *internal_default_instance();
}

Chassis* Chassis::New(::google::protobuf::Arena* arena) const {
  Chassis* n = new Chassis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Chassis::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Chassis)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::jmc_auto::common::Header::Clear();
    }
    if (has_signal()) {
      GOOGLE_DCHECK(signal_ != NULL);
      signal_->::jmc_auto::common::VehicleSignal::Clear();
    }
    if (has_chassis_gps()) {
      GOOGLE_DCHECK(chassis_gps_ != NULL);
      chassis_gps_->::jmc_auto::canbus::ChassisGPS::Clear();
    }
    if (has_engage_advice()) {
      GOOGLE_DCHECK(engage_advice_ != NULL);
      engage_advice_->::jmc_auto::common::EngageAdvice::Clear();
    }
    if (has_wheel_speed()) {
      GOOGLE_DCHECK(wheel_speed_ != NULL);
      wheel_speed_->::jmc_auto::canbus::WheelSpeed::Clear();
    }
    if (has_surround()) {
      GOOGLE_DCHECK(surround_ != NULL);
      surround_->::jmc_auto::canbus::Surround::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&fuel_range_m_, 0, reinterpret_cast<char*>(&engine_started_) -
      reinterpret_cast<char*>(&fuel_range_m_) + sizeof(engine_started_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&parking_brake_, 0, reinterpret_cast<char*>(&driving_mode_) -
      reinterpret_cast<char*>(&parking_brake_) + sizeof(driving_mode_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&error_code_, 0, reinterpret_cast<char*>(&sas_sasstssnsr_valid_) -
      reinterpret_cast<char*>(&error_code_) + sizeof(sas_sasstssnsr_valid_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&lon_acc_, 0, reinterpret_cast<char*>(&abs_whlmilgfrntle_) -
      reinterpret_cast<char*>(&lon_acc_) + sizeof(abs_whlmilgfrntle_));
  }
  if (_has_bits_[32 / 32] & 255u) {
    ::memset(&abs_whlmilgrearre_, 0, reinterpret_cast<char*>(&abs_whlspdfrntle_) -
      reinterpret_cast<char*>(&abs_whlmilgrearre_) + sizeof(abs_whlspdfrntle_));
  }
  if (_has_bits_[40 / 32] & 65280u) {
    ::memset(&abs_whlspdfrntri_, 0, reinterpret_cast<char*>(&gyro_y_) -
      reinterpret_cast<char*>(&abs_whlspdfrntri_) + sizeof(gyro_y_));
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    ::memset(&gyro_z_, 0, reinterpret_cast<char*>(&ins_time_) -
      reinterpret_cast<char*>(&gyro_z_) + sizeof(ins_time_));
  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    ::memset(&ins_latitude_, 0, reinterpret_cast<char*>(&ins_gps_age_) -
      reinterpret_cast<char*>(&ins_latitude_) + sizeof(ins_gps_age_));
  }
  if (_has_bits_[64 / 32] & 255u) {
    ::memset(&ins_car_status_, 0, reinterpret_cast<char*>(&esp_vlc_active_) -
      reinterpret_cast<char*>(&ins_car_status_) + sizeof(esp_vlc_active_));
  }
  if (_has_bits_[72 / 32] & 65280u) {
    ::memset(&esp_vlc_available_, 0, reinterpret_cast<char*>(&esp_epbstatus_) -
      reinterpret_cast<char*>(&esp_vlc_available_) + sizeof(esp_epbstatus_));
    steering_torque_nm_ = static_cast<float>(::google::protobuf::internal::NaN());
    engine_rpm_ = static_cast<float>(::google::protobuf::internal::NaN());
    speed_mps_ = static_cast<float>(::google::protobuf::internal::NaN());
  }
  if (_has_bits_[80 / 32] & 983040u) {
    odometer_m_ = static_cast<float>(::google::protobuf::internal::NaN());
    throttle_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
    brake_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
    steering_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Chassis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Chassis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool engine_started = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_engine_started();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &engine_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float engine_rpm = 4 [default = nan];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_engine_rpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &engine_rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_mps = 5 [default = nan];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_speed_mps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_mps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float odometer_m = 6 [default = nan];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_odometer_m();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &odometer_m_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fuel_range_m = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_fuel_range_m();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fuel_range_m_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float throttle_percentage = 8 [default = nan];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_throttle_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float brake_percentage = 9 [default = nan];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_brake_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_percentage = 11 [default = nan];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_steering_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_torque_nm = 12 [default = nan];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_steering_torque_nm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_torque_nm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool parking_brake = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_parking_brake();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parking_brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool high_beam_signal = 14 [deprecated = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_high_beam_signal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_beam_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_beam_signal = 15 [deprecated = true];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_low_beam_signal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_beam_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool left_turn_signal = 16 [deprecated = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_left_turn_signal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_turn_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool right_turn_signal = 17 [deprecated = true];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_right_turn_signal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_turn_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horn = 18 [deprecated = true];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_horn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wiper = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_wiper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wiper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disengage_status = 20 [deprecated = true];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_disengage_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disengage_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Chassis_DrivingMode_IsValid(value)) {
            set_driving_mode(static_cast< ::jmc_auto::canbus::Chassis_DrivingMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Chassis_ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::jmc_auto::canbus::Chassis_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear_location(static_cast< ::jmc_auto::canbus::Chassis_GearPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_timestamp = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u)) {
          set_has_steering_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Header header = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chassis_error_mask = 26 [default = 0];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_chassis_error_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chassis_error_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.VehicleSignal signal = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.ChassisGPS chassis_gps = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chassis_gps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.EngageAdvice engage_advice = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_engage_advice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.WheelSpeed wheel_speed = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wheel_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Surround surround = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surround()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lon_acc = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(269u)) {
          set_has_lon_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lon_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steer_wheel_rot_spd = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(277u)) {
          set_has_steer_wheel_rot_spd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steer_wheel_rot_spd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool abs_vehspdlgt_valid = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_abs_vehspdlgt_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &abs_vehspdlgt_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool esp_algtstatus_valid = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(288u)) {
          set_has_esp_algtstatus_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &esp_algtstatus_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sas_sasstssnsr_valid = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(296u)) {
          set_has_sas_sasstssnsr_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sas_sasstssnsr_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool steerwheelrotspd_valid = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(304u)) {
          set_has_steerwheelrotspd_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &steerwheelrotspd_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool eps_lkaresponsetorque_valid = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(312u)) {
          set_has_eps_lkaresponsetorque_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eps_lkaresponsetorque_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float eps_torsionbartorque = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(325u)) {
          set_has_eps_torsionbartorque();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eps_torsionbartorque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool eps_tosionbartorquevalid = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(328u)) {
          set_has_eps_tosionbartorquevalid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eps_tosionbartorquevalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 abs_whlmilgfrntri = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(336u)) {
          set_has_abs_whlmilgfrntri();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abs_whlmilgfrntri_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 abs_whlmilgfrntle = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(344u)) {
          set_has_abs_whlmilgfrntle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abs_whlmilgfrntle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 abs_whlmilgrearre = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(352u)) {
          set_has_abs_whlmilgrearre();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abs_whlmilgrearre_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 abs_whlmilgrearle = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(360u)) {
          set_has_abs_whlmilgrearle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abs_whlmilgrearle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 esp_wheelpulse_fl = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(368u)) {
          set_has_esp_wheelpulse_fl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_wheelpulse_fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 esp_wheelpulse_fr = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(376u)) {
          set_has_esp_wheelpulse_fr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_wheelpulse_fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 esp_wheelpulse_rl = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(384u)) {
          set_has_esp_wheelpulse_rl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_wheelpulse_rl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 esp_wheelpulse_rr = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(392u)) {
          set_has_esp_wheelpulse_rr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_wheelpulse_rr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ems_accpedalratio = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(401u)) {
          set_has_ems_accpedalratio();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ems_accpedalratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.Chassis.BrkPedalStasus brkpedalstasus = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(408u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::Chassis_BrkPedalStasus_IsValid(value)) {
            set_brkpedalstasus(static_cast< ::jmc_auto::canbus::Chassis_BrkPedalStasus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(51, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double abs_whlspdfrntle = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(417u)) {
          set_has_abs_whlspdfrntle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &abs_whlspdfrntle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double abs_whlspdfrntri = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(425u)) {
          set_has_abs_whlspdfrntri();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &abs_whlspdfrntri_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double abs_whlspdrele = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(433u)) {
          set_has_abs_whlspdrele();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &abs_whlspdrele_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double abs_whlspdreri = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(441u)) {
          set_has_abs_whlspdreri();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &abs_whlspdreri_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_x = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(449u)) {
          set_has_acc_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_y = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(457u)) {
          set_has_acc_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acc_z = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(465u)) {
          set_has_acc_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gyro_x = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(473u)) {
          set_has_gyro_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyro_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gyro_y = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(481u)) {
          set_has_gyro_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyro_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gyro_z = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(489u)) {
          set_has_gyro_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gyro_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_pitchangle = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(497u)) {
          set_has_ins_pitchangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_pitchangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_rollangle = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(505u)) {
          set_has_ins_rollangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_rollangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_headingangle = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(513u)) {
          set_has_ins_headingangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_headingangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_locatheight = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(521u)) {
          set_has_ins_locatheight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_locatheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_time = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(529u)) {
          set_has_ins_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_latitude = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(537u)) {
          set_has_ins_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_longitude = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(545u)) {
          set_has_ins_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_northspd = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(553u)) {
          set_has_ins_northspd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_northspd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_eastspd = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(561u)) {
          set_has_ins_eastspd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_eastspd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_togroundspd = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(569u)) {
          set_has_ins_togroundspd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_togroundspd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ins_gpsflag_pos = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(576u)) {
          set_has_ins_gpsflag_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ins_gpsflag_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ins_numsv = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(584u)) {
          set_has_ins_numsv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ins_numsv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ins_gpsflag_heading = 74;
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(592u)) {
          set_has_ins_gpsflag_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ins_gpsflag_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ins_gps_age = 75;
      case 75: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(600u)) {
          set_has_ins_gps_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ins_gps_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ins_car_status = 76;
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(608u)) {
          set_has_ins_car_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ins_car_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ins_status = 77;
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(616u)) {
          set_has_ins_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ins_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_std_lat = 78;
      case 78: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(625u)) {
          set_has_ins_std_lat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_std_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_std_lon = 79;
      case 79: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(633u)) {
          set_has_ins_std_lon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_std_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_std_locat_height = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(641u)) {
          set_has_ins_std_locat_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_std_locat_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ins_std_heading = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(649u)) {
          set_has_ins_std_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ins_std_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eps_lkacontrolstatus = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(656u)) {
          set_has_eps_lkacontrolstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eps_lkacontrolstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 esp_vlc_active = 83;
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(664u)) {
          set_has_esp_vlc_active();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_vlc_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 esp_vlc_available = 84;
      case 84: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(672u)) {
          set_has_esp_vlc_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_vlc_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 esp_apa_gearboxenable = 85;
      case 85: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(680u)) {
          set_has_esp_apa_gearboxenable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_apa_gearboxenable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 esp_vlc_apactive = 86;
      case 86: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(688u)) {
          set_has_esp_vlc_apactive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_vlc_apactive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 esp_vlcapa_available = 87;
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(696u)) {
          set_has_esp_vlcapa_available();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_vlcapa_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 esp_epbstatus = 88;
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(704u)) {
          set_has_esp_epbstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_epbstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Chassis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Chassis)
  return false;
#undef DO_
}

void Chassis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool engine_started = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->engine_started(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional float engine_rpm = 4 [default = nan];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->engine_rpm(), output);
  }

  // optional float speed_mps = 5 [default = nan];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed_mps(), output);
  }

  // optional float odometer_m = 6 [default = nan];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->odometer_m(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 fuel_range_m = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fuel_range_m(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional float throttle_percentage = 8 [default = nan];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->throttle_percentage(), output);
  }

  // optional float brake_percentage = 9 [default = nan];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->brake_percentage(), output);
  }

  // optional float steering_percentage = 11 [default = nan];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->steering_percentage(), output);
  }

  // optional float steering_torque_nm = 12 [default = nan];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->steering_torque_nm(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool parking_brake = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->parking_brake(), output);
  }

  // optional bool high_beam_signal = 14 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->high_beam_signal(), output);
  }

  // optional bool low_beam_signal = 15 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->low_beam_signal(), output);
  }

  // optional bool left_turn_signal = 16 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->left_turn_signal(), output);
  }

  // optional bool right_turn_signal = 17 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->right_turn_signal(), output);
  }

  // optional bool horn = 18 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->horn(), output);
  }

  // optional bool wiper = 19;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->wiper(), output);
  }

  // optional bool disengage_status = 20 [deprecated = true];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->disengage_status(), output);
  }

  // optional .jmc_auto.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->driving_mode(), output);
  }

  // optional .jmc_auto.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->error_code(), output);
  }

  // optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 23;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->gear_location(), output);
  }

  // optional double steering_timestamp = 24;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->steering_timestamp(), output);
  }

  // optional .jmc_auto.common.Header header = 25;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->header_, output);
  }

  // optional int32 chassis_error_mask = 26 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->chassis_error_mask(), output);
  }

  // optional .jmc_auto.common.VehicleSignal signal = 27;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *this->signal_, output);
  }

  // optional .jmc_auto.canbus.ChassisGPS chassis_gps = 28;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *this->chassis_gps_, output);
  }

  // optional .jmc_auto.common.EngageAdvice engage_advice = 29;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->engage_advice_, output);
  }

  // optional .jmc_auto.canbus.WheelSpeed wheel_speed = 30;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *this->wheel_speed_, output);
  }

  // optional .jmc_auto.canbus.Surround surround = 31;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *this->surround_, output);
  }

  // optional float lon_acc = 33;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->lon_acc(), output);
  }

  // optional float steer_wheel_rot_spd = 34;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->steer_wheel_rot_spd(), output);
  }

  // optional bool abs_vehspdlgt_valid = 35;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->abs_vehspdlgt_valid(), output);
  }

  // optional bool esp_algtstatus_valid = 36;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->esp_algtstatus_valid(), output);
  }

  // optional bool sas_sasstssnsr_valid = 37;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->sas_sasstssnsr_valid(), output);
  }

  // optional bool steerwheelrotspd_valid = 38;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->steerwheelrotspd_valid(), output);
  }

  // optional bool eps_lkaresponsetorque_valid = 39;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->eps_lkaresponsetorque_valid(), output);
  }

  // optional float eps_torsionbartorque = 40;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->eps_torsionbartorque(), output);
  }

  // optional bool eps_tosionbartorquevalid = 41;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->eps_tosionbartorquevalid(), output);
  }

  // optional int32 abs_whlmilgfrntri = 42;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->abs_whlmilgfrntri(), output);
  }

  // optional int32 abs_whlmilgfrntle = 43;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->abs_whlmilgfrntle(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 abs_whlmilgrearre = 44;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->abs_whlmilgrearre(), output);
  }

  // optional int32 abs_whlmilgrearle = 45;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->abs_whlmilgrearle(), output);
  }

  // optional int32 esp_wheelpulse_fl = 46;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->esp_wheelpulse_fl(), output);
  }

  // optional int32 esp_wheelpulse_fr = 47;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->esp_wheelpulse_fr(), output);
  }

  // optional int32 esp_wheelpulse_rl = 48;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->esp_wheelpulse_rl(), output);
  }

  // optional int32 esp_wheelpulse_rr = 49;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->esp_wheelpulse_rr(), output);
  }

  // optional double ems_accpedalratio = 50;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->ems_accpedalratio(), output);
  }

  // optional .jmc_auto.canbus.Chassis.BrkPedalStasus brkpedalstasus = 51;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      51, this->brkpedalstasus(), output);
  }

  // optional double abs_whlspdfrntle = 52;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(52, this->abs_whlspdfrntle(), output);
  }

  // optional double abs_whlspdfrntri = 53;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(53, this->abs_whlspdfrntri(), output);
  }

  // optional double abs_whlspdrele = 54;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(54, this->abs_whlspdrele(), output);
  }

  // optional double abs_whlspdreri = 55;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(55, this->abs_whlspdreri(), output);
  }

  // optional double acc_x = 56;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(56, this->acc_x(), output);
  }

  // optional double acc_y = 57;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(57, this->acc_y(), output);
  }

  // optional double acc_z = 58;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(58, this->acc_z(), output);
  }

  // optional double gyro_x = 59;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(59, this->gyro_x(), output);
  }

  // optional double gyro_y = 60;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(60, this->gyro_y(), output);
  }

  // optional double gyro_z = 61;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(61, this->gyro_z(), output);
  }

  // optional double ins_pitchangle = 62;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(62, this->ins_pitchangle(), output);
  }

  // optional double ins_rollangle = 63;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(63, this->ins_rollangle(), output);
  }

  // optional double ins_headingangle = 64;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(64, this->ins_headingangle(), output);
  }

  // optional double ins_locatheight = 65;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(65, this->ins_locatheight(), output);
  }

  // optional double ins_time = 66;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(66, this->ins_time(), output);
  }

  // optional double ins_latitude = 67;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(67, this->ins_latitude(), output);
  }

  // optional double ins_longitude = 68;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(68, this->ins_longitude(), output);
  }

  // optional double ins_northspd = 69;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(69, this->ins_northspd(), output);
  }

  // optional double ins_eastspd = 70;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(70, this->ins_eastspd(), output);
  }

  // optional double ins_togroundspd = 71;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(71, this->ins_togroundspd(), output);
  }

  // optional int32 ins_gpsflag_pos = 72;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->ins_gpsflag_pos(), output);
  }

  // optional int32 ins_numsv = 73;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->ins_numsv(), output);
  }

  // optional int32 ins_gpsflag_heading = 74;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(74, this->ins_gpsflag_heading(), output);
  }

  // optional int32 ins_gps_age = 75;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(75, this->ins_gps_age(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 ins_car_status = 76;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(76, this->ins_car_status(), output);
  }

  // optional int32 ins_status = 77;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(77, this->ins_status(), output);
  }

  // optional double ins_std_lat = 78;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(78, this->ins_std_lat(), output);
  }

  // optional double ins_std_lon = 79;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(79, this->ins_std_lon(), output);
  }

  // optional double ins_std_locat_height = 80;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(80, this->ins_std_locat_height(), output);
  }

  // optional double ins_std_heading = 81;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(81, this->ins_std_heading(), output);
  }

  // optional int32 eps_lkacontrolstatus = 82;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(82, this->eps_lkacontrolstatus(), output);
  }

  // optional int32 esp_vlc_active = 83;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(83, this->esp_vlc_active(), output);
  }

  // optional int32 esp_vlc_available = 84;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(84, this->esp_vlc_available(), output);
  }

  // optional int32 esp_apa_gearboxenable = 85;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(85, this->esp_apa_gearboxenable(), output);
  }

  // optional int32 esp_vlc_apactive = 86;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(86, this->esp_vlc_apactive(), output);
  }

  // optional int32 esp_vlcapa_available = 87;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(87, this->esp_vlcapa_available(), output);
  }

  // optional int32 esp_epbstatus = 88;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(88, this->esp_epbstatus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Chassis)
}

::google::protobuf::uint8* Chassis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool engine_started = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->engine_started(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional float engine_rpm = 4 [default = nan];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->engine_rpm(), target);
  }

  // optional float speed_mps = 5 [default = nan];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->speed_mps(), target);
  }

  // optional float odometer_m = 6 [default = nan];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->odometer_m(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 fuel_range_m = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fuel_range_m(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional float throttle_percentage = 8 [default = nan];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->throttle_percentage(), target);
  }

  // optional float brake_percentage = 9 [default = nan];
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->brake_percentage(), target);
  }

  // optional float steering_percentage = 11 [default = nan];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->steering_percentage(), target);
  }

  // optional float steering_torque_nm = 12 [default = nan];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->steering_torque_nm(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool parking_brake = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->parking_brake(), target);
  }

  // optional bool high_beam_signal = 14 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->high_beam_signal(), target);
  }

  // optional bool low_beam_signal = 15 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->low_beam_signal(), target);
  }

  // optional bool left_turn_signal = 16 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->left_turn_signal(), target);
  }

  // optional bool right_turn_signal = 17 [deprecated = true];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->right_turn_signal(), target);
  }

  // optional bool horn = 18 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->horn(), target);
  }

  // optional bool wiper = 19;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->wiper(), target);
  }

  // optional bool disengage_status = 20 [deprecated = true];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->disengage_status(), target);
  }

  // optional .jmc_auto.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->driving_mode(), target);
  }

  // optional .jmc_auto.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->error_code(), target);
  }

  // optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 23;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->gear_location(), target);
  }

  // optional double steering_timestamp = 24;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->steering_timestamp(), target);
  }

  // optional .jmc_auto.common.Header header = 25;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->header_, deterministic, target);
  }

  // optional int32 chassis_error_mask = 26 [default = 0];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->chassis_error_mask(), target);
  }

  // optional .jmc_auto.common.VehicleSignal signal = 27;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *this->signal_, deterministic, target);
  }

  // optional .jmc_auto.canbus.ChassisGPS chassis_gps = 28;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *this->chassis_gps_, deterministic, target);
  }

  // optional .jmc_auto.common.EngageAdvice engage_advice = 29;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->engage_advice_, deterministic, target);
  }

  // optional .jmc_auto.canbus.WheelSpeed wheel_speed = 30;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *this->wheel_speed_, deterministic, target);
  }

  // optional .jmc_auto.canbus.Surround surround = 31;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *this->surround_, deterministic, target);
  }

  // optional float lon_acc = 33;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->lon_acc(), target);
  }

  // optional float steer_wheel_rot_spd = 34;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->steer_wheel_rot_spd(), target);
  }

  // optional bool abs_vehspdlgt_valid = 35;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->abs_vehspdlgt_valid(), target);
  }

  // optional bool esp_algtstatus_valid = 36;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->esp_algtstatus_valid(), target);
  }

  // optional bool sas_sasstssnsr_valid = 37;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->sas_sasstssnsr_valid(), target);
  }

  // optional bool steerwheelrotspd_valid = 38;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->steerwheelrotspd_valid(), target);
  }

  // optional bool eps_lkaresponsetorque_valid = 39;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->eps_lkaresponsetorque_valid(), target);
  }

  // optional float eps_torsionbartorque = 40;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->eps_torsionbartorque(), target);
  }

  // optional bool eps_tosionbartorquevalid = 41;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->eps_tosionbartorquevalid(), target);
  }

  // optional int32 abs_whlmilgfrntri = 42;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->abs_whlmilgfrntri(), target);
  }

  // optional int32 abs_whlmilgfrntle = 43;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->abs_whlmilgfrntle(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 abs_whlmilgrearre = 44;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->abs_whlmilgrearre(), target);
  }

  // optional int32 abs_whlmilgrearle = 45;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->abs_whlmilgrearle(), target);
  }

  // optional int32 esp_wheelpulse_fl = 46;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->esp_wheelpulse_fl(), target);
  }

  // optional int32 esp_wheelpulse_fr = 47;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->esp_wheelpulse_fr(), target);
  }

  // optional int32 esp_wheelpulse_rl = 48;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->esp_wheelpulse_rl(), target);
  }

  // optional int32 esp_wheelpulse_rr = 49;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->esp_wheelpulse_rr(), target);
  }

  // optional double ems_accpedalratio = 50;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->ems_accpedalratio(), target);
  }

  // optional .jmc_auto.canbus.Chassis.BrkPedalStasus brkpedalstasus = 51;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      51, this->brkpedalstasus(), target);
  }

  // optional double abs_whlspdfrntle = 52;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(52, this->abs_whlspdfrntle(), target);
  }

  // optional double abs_whlspdfrntri = 53;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(53, this->abs_whlspdfrntri(), target);
  }

  // optional double abs_whlspdrele = 54;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(54, this->abs_whlspdrele(), target);
  }

  // optional double abs_whlspdreri = 55;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(55, this->abs_whlspdreri(), target);
  }

  // optional double acc_x = 56;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(56, this->acc_x(), target);
  }

  // optional double acc_y = 57;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(57, this->acc_y(), target);
  }

  // optional double acc_z = 58;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(58, this->acc_z(), target);
  }

  // optional double gyro_x = 59;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(59, this->gyro_x(), target);
  }

  // optional double gyro_y = 60;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(60, this->gyro_y(), target);
  }

  // optional double gyro_z = 61;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(61, this->gyro_z(), target);
  }

  // optional double ins_pitchangle = 62;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(62, this->ins_pitchangle(), target);
  }

  // optional double ins_rollangle = 63;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(63, this->ins_rollangle(), target);
  }

  // optional double ins_headingangle = 64;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(64, this->ins_headingangle(), target);
  }

  // optional double ins_locatheight = 65;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(65, this->ins_locatheight(), target);
  }

  // optional double ins_time = 66;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(66, this->ins_time(), target);
  }

  // optional double ins_latitude = 67;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(67, this->ins_latitude(), target);
  }

  // optional double ins_longitude = 68;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(68, this->ins_longitude(), target);
  }

  // optional double ins_northspd = 69;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(69, this->ins_northspd(), target);
  }

  // optional double ins_eastspd = 70;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(70, this->ins_eastspd(), target);
  }

  // optional double ins_togroundspd = 71;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(71, this->ins_togroundspd(), target);
  }

  // optional int32 ins_gpsflag_pos = 72;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->ins_gpsflag_pos(), target);
  }

  // optional int32 ins_numsv = 73;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->ins_numsv(), target);
  }

  // optional int32 ins_gpsflag_heading = 74;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(74, this->ins_gpsflag_heading(), target);
  }

  // optional int32 ins_gps_age = 75;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(75, this->ins_gps_age(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 ins_car_status = 76;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(76, this->ins_car_status(), target);
  }

  // optional int32 ins_status = 77;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(77, this->ins_status(), target);
  }

  // optional double ins_std_lat = 78;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(78, this->ins_std_lat(), target);
  }

  // optional double ins_std_lon = 79;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(79, this->ins_std_lon(), target);
  }

  // optional double ins_std_locat_height = 80;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(80, this->ins_std_locat_height(), target);
  }

  // optional double ins_std_heading = 81;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(81, this->ins_std_heading(), target);
  }

  // optional int32 eps_lkacontrolstatus = 82;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(82, this->eps_lkacontrolstatus(), target);
  }

  // optional int32 esp_vlc_active = 83;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(83, this->esp_vlc_active(), target);
  }

  // optional int32 esp_vlc_available = 84;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(84, this->esp_vlc_available(), target);
  }

  // optional int32 esp_apa_gearboxenable = 85;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(85, this->esp_apa_gearboxenable(), target);
  }

  // optional int32 esp_vlc_apactive = 86;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(86, this->esp_vlc_apactive(), target);
  }

  // optional int32 esp_vlcapa_available = 87;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(87, this->esp_vlcapa_available(), target);
  }

  // optional int32 esp_epbstatus = 88;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(88, this->esp_epbstatus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Chassis)
  return target;
}

size_t Chassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Chassis)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.common.Header header = 25;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .jmc_auto.common.VehicleSignal signal = 27;
    if (has_signal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->signal_);
    }

    // optional .jmc_auto.canbus.ChassisGPS chassis_gps = 28;
    if (has_chassis_gps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chassis_gps_);
    }

    // optional .jmc_auto.common.EngageAdvice engage_advice = 29;
    if (has_engage_advice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->engage_advice_);
    }

    // optional .jmc_auto.canbus.WheelSpeed wheel_speed = 30;
    if (has_wheel_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wheel_speed_);
    }

    // optional .jmc_auto.canbus.Surround surround = 31;
    if (has_surround()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->surround_);
    }

    // optional int32 fuel_range_m = 7;
    if (has_fuel_range_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fuel_range_m());
    }

    // optional bool engine_started = 3;
    if (has_engine_started()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool parking_brake = 13;
    if (has_parking_brake()) {
      total_size += 1 + 1;
    }

    // optional bool high_beam_signal = 14 [deprecated = true];
    if (has_high_beam_signal()) {
      total_size += 1 + 1;
    }

    // optional bool low_beam_signal = 15 [deprecated = true];
    if (has_low_beam_signal()) {
      total_size += 1 + 1;
    }

    // optional bool left_turn_signal = 16 [deprecated = true];
    if (has_left_turn_signal()) {
      total_size += 2 + 1;
    }

    // optional bool right_turn_signal = 17 [deprecated = true];
    if (has_right_turn_signal()) {
      total_size += 2 + 1;
    }

    // optional bool horn = 18 [deprecated = true];
    if (has_horn()) {
      total_size += 2 + 1;
    }

    // optional bool wiper = 19;
    if (has_wiper()) {
      total_size += 2 + 1;
    }

    // optional .jmc_auto.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
    if (has_driving_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .jmc_auto.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
    if (has_error_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 23;
    if (has_gear_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_location());
    }

    // optional double steering_timestamp = 24;
    if (has_steering_timestamp()) {
      total_size += 2 + 8;
    }

    // optional int32 chassis_error_mask = 26 [default = 0];
    if (has_chassis_error_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chassis_error_mask());
    }

    // optional bool disengage_status = 20 [deprecated = true];
    if (has_disengage_status()) {
      total_size += 2 + 1;
    }

    // optional bool abs_vehspdlgt_valid = 35;
    if (has_abs_vehspdlgt_valid()) {
      total_size += 2 + 1;
    }

    // optional bool esp_algtstatus_valid = 36;
    if (has_esp_algtstatus_valid()) {
      total_size += 2 + 1;
    }

    // optional bool sas_sasstssnsr_valid = 37;
    if (has_sas_sasstssnsr_valid()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional float lon_acc = 33;
    if (has_lon_acc()) {
      total_size += 2 + 4;
    }

    // optional float steer_wheel_rot_spd = 34;
    if (has_steer_wheel_rot_spd()) {
      total_size += 2 + 4;
    }

    // optional bool steerwheelrotspd_valid = 38;
    if (has_steerwheelrotspd_valid()) {
      total_size += 2 + 1;
    }

    // optional bool eps_lkaresponsetorque_valid = 39;
    if (has_eps_lkaresponsetorque_valid()) {
      total_size += 2 + 1;
    }

    // optional bool eps_tosionbartorquevalid = 41;
    if (has_eps_tosionbartorquevalid()) {
      total_size += 2 + 1;
    }

    // optional float eps_torsionbartorque = 40;
    if (has_eps_torsionbartorque()) {
      total_size += 2 + 4;
    }

    // optional int32 abs_whlmilgfrntri = 42;
    if (has_abs_whlmilgfrntri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->abs_whlmilgfrntri());
    }

    // optional int32 abs_whlmilgfrntle = 43;
    if (has_abs_whlmilgfrntle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->abs_whlmilgfrntle());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional int32 abs_whlmilgrearre = 44;
    if (has_abs_whlmilgrearre()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->abs_whlmilgrearre());
    }

    // optional int32 abs_whlmilgrearle = 45;
    if (has_abs_whlmilgrearle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->abs_whlmilgrearle());
    }

    // optional int32 esp_wheelpulse_fl = 46;
    if (has_esp_wheelpulse_fl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_wheelpulse_fl());
    }

    // optional int32 esp_wheelpulse_fr = 47;
    if (has_esp_wheelpulse_fr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_wheelpulse_fr());
    }

    // optional int32 esp_wheelpulse_rl = 48;
    if (has_esp_wheelpulse_rl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_wheelpulse_rl());
    }

    // optional int32 esp_wheelpulse_rr = 49;
    if (has_esp_wheelpulse_rr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_wheelpulse_rr());
    }

    // optional double ems_accpedalratio = 50;
    if (has_ems_accpedalratio()) {
      total_size += 2 + 8;
    }

    // optional double abs_whlspdfrntle = 52;
    if (has_abs_whlspdfrntle()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional double abs_whlspdfrntri = 53;
    if (has_abs_whlspdfrntri()) {
      total_size += 2 + 8;
    }

    // optional double abs_whlspdrele = 54;
    if (has_abs_whlspdrele()) {
      total_size += 2 + 8;
    }

    // optional double abs_whlspdreri = 55;
    if (has_abs_whlspdreri()) {
      total_size += 2 + 8;
    }

    // optional double acc_x = 56;
    if (has_acc_x()) {
      total_size += 2 + 8;
    }

    // optional double acc_y = 57;
    if (has_acc_y()) {
      total_size += 2 + 8;
    }

    // optional double acc_z = 58;
    if (has_acc_z()) {
      total_size += 2 + 8;
    }

    // optional double gyro_x = 59;
    if (has_gyro_x()) {
      total_size += 2 + 8;
    }

    // optional double gyro_y = 60;
    if (has_gyro_y()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional double gyro_z = 61;
    if (has_gyro_z()) {
      total_size += 2 + 8;
    }

    // optional .jmc_auto.canbus.Chassis.BrkPedalStasus brkpedalstasus = 51;
    if (has_brkpedalstasus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->brkpedalstasus());
    }

    // optional int32 ins_gpsflag_pos = 72;
    if (has_ins_gpsflag_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ins_gpsflag_pos());
    }

    // optional double ins_pitchangle = 62;
    if (has_ins_pitchangle()) {
      total_size += 2 + 8;
    }

    // optional double ins_rollangle = 63;
    if (has_ins_rollangle()) {
      total_size += 2 + 8;
    }

    // optional double ins_headingangle = 64;
    if (has_ins_headingangle()) {
      total_size += 2 + 8;
    }

    // optional double ins_locatheight = 65;
    if (has_ins_locatheight()) {
      total_size += 2 + 8;
    }

    // optional double ins_time = 66;
    if (has_ins_time()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional double ins_latitude = 67;
    if (has_ins_latitude()) {
      total_size += 2 + 8;
    }

    // optional double ins_longitude = 68;
    if (has_ins_longitude()) {
      total_size += 2 + 8;
    }

    // optional double ins_northspd = 69;
    if (has_ins_northspd()) {
      total_size += 2 + 8;
    }

    // optional double ins_eastspd = 70;
    if (has_ins_eastspd()) {
      total_size += 2 + 8;
    }

    // optional double ins_togroundspd = 71;
    if (has_ins_togroundspd()) {
      total_size += 2 + 8;
    }

    // optional int32 ins_numsv = 73;
    if (has_ins_numsv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ins_numsv());
    }

    // optional int32 ins_gpsflag_heading = 74;
    if (has_ins_gpsflag_heading()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ins_gpsflag_heading());
    }

    // optional int32 ins_gps_age = 75;
    if (has_ins_gps_age()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ins_gps_age());
    }

  }
  if (_has_bits_[64 / 32] & 255u) {
    // optional int32 ins_car_status = 76;
    if (has_ins_car_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ins_car_status());
    }

    // optional double ins_std_lat = 78;
    if (has_ins_std_lat()) {
      total_size += 2 + 8;
    }

    // optional double ins_std_lon = 79;
    if (has_ins_std_lon()) {
      total_size += 2 + 8;
    }

    // optional int32 ins_status = 77;
    if (has_ins_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ins_status());
    }

    // optional int32 eps_lkacontrolstatus = 82;
    if (has_eps_lkacontrolstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eps_lkacontrolstatus());
    }

    // optional double ins_std_locat_height = 80;
    if (has_ins_std_locat_height()) {
      total_size += 2 + 8;
    }

    // optional double ins_std_heading = 81;
    if (has_ins_std_heading()) {
      total_size += 2 + 8;
    }

    // optional int32 esp_vlc_active = 83;
    if (has_esp_vlc_active()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_vlc_active());
    }

  }
  if (_has_bits_[72 / 32] & 65280u) {
    // optional int32 esp_vlc_available = 84;
    if (has_esp_vlc_available()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_vlc_available());
    }

    // optional int32 esp_apa_gearboxenable = 85;
    if (has_esp_apa_gearboxenable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_apa_gearboxenable());
    }

    // optional int32 esp_vlc_apactive = 86;
    if (has_esp_vlc_apactive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_vlc_apactive());
    }

    // optional int32 esp_vlcapa_available = 87;
    if (has_esp_vlcapa_available()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_vlcapa_available());
    }

    // optional int32 esp_epbstatus = 88;
    if (has_esp_epbstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->esp_epbstatus());
    }

    // optional float steering_torque_nm = 12 [default = nan];
    if (has_steering_torque_nm()) {
      total_size += 1 + 4;
    }

    // optional float engine_rpm = 4 [default = nan];
    if (has_engine_rpm()) {
      total_size += 1 + 4;
    }

    // optional float speed_mps = 5 [default = nan];
    if (has_speed_mps()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[80 / 32] & 983040u) {
    // optional float odometer_m = 6 [default = nan];
    if (has_odometer_m()) {
      total_size += 1 + 4;
    }

    // optional float throttle_percentage = 8 [default = nan];
    if (has_throttle_percentage()) {
      total_size += 1 + 4;
    }

    // optional float brake_percentage = 9 [default = nan];
    if (has_brake_percentage()) {
      total_size += 1 + 4;
    }

    // optional float steering_percentage = 11 [default = nan];
    if (has_steering_percentage()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chassis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  const Chassis* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Chassis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Chassis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Chassis)
    MergeFrom(*source);
  }
}

void Chassis::MergeFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::jmc_auto::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_signal()->::jmc_auto::common::VehicleSignal::MergeFrom(from.signal());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_chassis_gps()->::jmc_auto::canbus::ChassisGPS::MergeFrom(from.chassis_gps());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_engage_advice()->::jmc_auto::common::EngageAdvice::MergeFrom(from.engage_advice());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_wheel_speed()->::jmc_auto::canbus::WheelSpeed::MergeFrom(from.wheel_speed());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_surround()->::jmc_auto::canbus::Surround::MergeFrom(from.surround());
    }
    if (cached_has_bits & 0x00000040u) {
      fuel_range_m_ = from.fuel_range_m_;
    }
    if (cached_has_bits & 0x00000080u) {
      engine_started_ = from.engine_started_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      parking_brake_ = from.parking_brake_;
    }
    if (cached_has_bits & 0x00000200u) {
      high_beam_signal_ = from.high_beam_signal_;
    }
    if (cached_has_bits & 0x00000400u) {
      low_beam_signal_ = from.low_beam_signal_;
    }
    if (cached_has_bits & 0x00000800u) {
      left_turn_signal_ = from.left_turn_signal_;
    }
    if (cached_has_bits & 0x00001000u) {
      right_turn_signal_ = from.right_turn_signal_;
    }
    if (cached_has_bits & 0x00002000u) {
      horn_ = from.horn_;
    }
    if (cached_has_bits & 0x00004000u) {
      wiper_ = from.wiper_;
    }
    if (cached_has_bits & 0x00008000u) {
      driving_mode_ = from.driving_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00020000u) {
      gear_location_ = from.gear_location_;
    }
    if (cached_has_bits & 0x00040000u) {
      steering_timestamp_ = from.steering_timestamp_;
    }
    if (cached_has_bits & 0x00080000u) {
      chassis_error_mask_ = from.chassis_error_mask_;
    }
    if (cached_has_bits & 0x00100000u) {
      disengage_status_ = from.disengage_status_;
    }
    if (cached_has_bits & 0x00200000u) {
      abs_vehspdlgt_valid_ = from.abs_vehspdlgt_valid_;
    }
    if (cached_has_bits & 0x00400000u) {
      esp_algtstatus_valid_ = from.esp_algtstatus_valid_;
    }
    if (cached_has_bits & 0x00800000u) {
      sas_sasstssnsr_valid_ = from.sas_sasstssnsr_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      lon_acc_ = from.lon_acc_;
    }
    if (cached_has_bits & 0x02000000u) {
      steer_wheel_rot_spd_ = from.steer_wheel_rot_spd_;
    }
    if (cached_has_bits & 0x04000000u) {
      steerwheelrotspd_valid_ = from.steerwheelrotspd_valid_;
    }
    if (cached_has_bits & 0x08000000u) {
      eps_lkaresponsetorque_valid_ = from.eps_lkaresponsetorque_valid_;
    }
    if (cached_has_bits & 0x10000000u) {
      eps_tosionbartorquevalid_ = from.eps_tosionbartorquevalid_;
    }
    if (cached_has_bits & 0x20000000u) {
      eps_torsionbartorque_ = from.eps_torsionbartorque_;
    }
    if (cached_has_bits & 0x40000000u) {
      abs_whlmilgfrntri_ = from.abs_whlmilgfrntri_;
    }
    if (cached_has_bits & 0x80000000u) {
      abs_whlmilgfrntle_ = from.abs_whlmilgfrntle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      abs_whlmilgrearre_ = from.abs_whlmilgrearre_;
    }
    if (cached_has_bits & 0x00000002u) {
      abs_whlmilgrearle_ = from.abs_whlmilgrearle_;
    }
    if (cached_has_bits & 0x00000004u) {
      esp_wheelpulse_fl_ = from.esp_wheelpulse_fl_;
    }
    if (cached_has_bits & 0x00000008u) {
      esp_wheelpulse_fr_ = from.esp_wheelpulse_fr_;
    }
    if (cached_has_bits & 0x00000010u) {
      esp_wheelpulse_rl_ = from.esp_wheelpulse_rl_;
    }
    if (cached_has_bits & 0x00000020u) {
      esp_wheelpulse_rr_ = from.esp_wheelpulse_rr_;
    }
    if (cached_has_bits & 0x00000040u) {
      ems_accpedalratio_ = from.ems_accpedalratio_;
    }
    if (cached_has_bits & 0x00000080u) {
      abs_whlspdfrntle_ = from.abs_whlspdfrntle_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      abs_whlspdfrntri_ = from.abs_whlspdfrntri_;
    }
    if (cached_has_bits & 0x00000200u) {
      abs_whlspdrele_ = from.abs_whlspdrele_;
    }
    if (cached_has_bits & 0x00000400u) {
      abs_whlspdreri_ = from.abs_whlspdreri_;
    }
    if (cached_has_bits & 0x00000800u) {
      acc_x_ = from.acc_x_;
    }
    if (cached_has_bits & 0x00001000u) {
      acc_y_ = from.acc_y_;
    }
    if (cached_has_bits & 0x00002000u) {
      acc_z_ = from.acc_z_;
    }
    if (cached_has_bits & 0x00004000u) {
      gyro_x_ = from.gyro_x_;
    }
    if (cached_has_bits & 0x00008000u) {
      gyro_y_ = from.gyro_y_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      gyro_z_ = from.gyro_z_;
    }
    if (cached_has_bits & 0x00020000u) {
      brkpedalstasus_ = from.brkpedalstasus_;
    }
    if (cached_has_bits & 0x00040000u) {
      ins_gpsflag_pos_ = from.ins_gpsflag_pos_;
    }
    if (cached_has_bits & 0x00080000u) {
      ins_pitchangle_ = from.ins_pitchangle_;
    }
    if (cached_has_bits & 0x00100000u) {
      ins_rollangle_ = from.ins_rollangle_;
    }
    if (cached_has_bits & 0x00200000u) {
      ins_headingangle_ = from.ins_headingangle_;
    }
    if (cached_has_bits & 0x00400000u) {
      ins_locatheight_ = from.ins_locatheight_;
    }
    if (cached_has_bits & 0x00800000u) {
      ins_time_ = from.ins_time_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      ins_latitude_ = from.ins_latitude_;
    }
    if (cached_has_bits & 0x02000000u) {
      ins_longitude_ = from.ins_longitude_;
    }
    if (cached_has_bits & 0x04000000u) {
      ins_northspd_ = from.ins_northspd_;
    }
    if (cached_has_bits & 0x08000000u) {
      ins_eastspd_ = from.ins_eastspd_;
    }
    if (cached_has_bits & 0x10000000u) {
      ins_togroundspd_ = from.ins_togroundspd_;
    }
    if (cached_has_bits & 0x20000000u) {
      ins_numsv_ = from.ins_numsv_;
    }
    if (cached_has_bits & 0x40000000u) {
      ins_gpsflag_heading_ = from.ins_gpsflag_heading_;
    }
    if (cached_has_bits & 0x80000000u) {
      ins_gps_age_ = from.ins_gps_age_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      ins_car_status_ = from.ins_car_status_;
    }
    if (cached_has_bits & 0x00000002u) {
      ins_std_lat_ = from.ins_std_lat_;
    }
    if (cached_has_bits & 0x00000004u) {
      ins_std_lon_ = from.ins_std_lon_;
    }
    if (cached_has_bits & 0x00000008u) {
      ins_status_ = from.ins_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      eps_lkacontrolstatus_ = from.eps_lkacontrolstatus_;
    }
    if (cached_has_bits & 0x00000020u) {
      ins_std_locat_height_ = from.ins_std_locat_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      ins_std_heading_ = from.ins_std_heading_;
    }
    if (cached_has_bits & 0x00000080u) {
      esp_vlc_active_ = from.esp_vlc_active_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      esp_vlc_available_ = from.esp_vlc_available_;
    }
    if (cached_has_bits & 0x00000200u) {
      esp_apa_gearboxenable_ = from.esp_apa_gearboxenable_;
    }
    if (cached_has_bits & 0x00000400u) {
      esp_vlc_apactive_ = from.esp_vlc_apactive_;
    }
    if (cached_has_bits & 0x00000800u) {
      esp_vlcapa_available_ = from.esp_vlcapa_available_;
    }
    if (cached_has_bits & 0x00001000u) {
      esp_epbstatus_ = from.esp_epbstatus_;
    }
    if (cached_has_bits & 0x00002000u) {
      steering_torque_nm_ = from.steering_torque_nm_;
    }
    if (cached_has_bits & 0x00004000u) {
      engine_rpm_ = from.engine_rpm_;
    }
    if (cached_has_bits & 0x00008000u) {
      speed_mps_ = from.speed_mps_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      odometer_m_ = from.odometer_m_;
    }
    if (cached_has_bits & 0x00020000u) {
      throttle_percentage_ = from.throttle_percentage_;
    }
    if (cached_has_bits & 0x00040000u) {
      brake_percentage_ = from.brake_percentage_;
    }
    if (cached_has_bits & 0x00080000u) {
      steering_percentage_ = from.steering_percentage_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void Chassis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chassis::CopyFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chassis::IsInitialized() const {
  return true;
}

void Chassis::Swap(Chassis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chassis::InternalSwap(Chassis* other) {
  std::swap(header_, other->header_);
  std::swap(signal_, other->signal_);
  std::swap(chassis_gps_, other->chassis_gps_);
  std::swap(engage_advice_, other->engage_advice_);
  std::swap(wheel_speed_, other->wheel_speed_);
  std::swap(surround_, other->surround_);
  std::swap(fuel_range_m_, other->fuel_range_m_);
  std::swap(engine_started_, other->engine_started_);
  std::swap(parking_brake_, other->parking_brake_);
  std::swap(high_beam_signal_, other->high_beam_signal_);
  std::swap(low_beam_signal_, other->low_beam_signal_);
  std::swap(left_turn_signal_, other->left_turn_signal_);
  std::swap(right_turn_signal_, other->right_turn_signal_);
  std::swap(horn_, other->horn_);
  std::swap(wiper_, other->wiper_);
  std::swap(driving_mode_, other->driving_mode_);
  std::swap(error_code_, other->error_code_);
  std::swap(gear_location_, other->gear_location_);
  std::swap(steering_timestamp_, other->steering_timestamp_);
  std::swap(chassis_error_mask_, other->chassis_error_mask_);
  std::swap(disengage_status_, other->disengage_status_);
  std::swap(abs_vehspdlgt_valid_, other->abs_vehspdlgt_valid_);
  std::swap(esp_algtstatus_valid_, other->esp_algtstatus_valid_);
  std::swap(sas_sasstssnsr_valid_, other->sas_sasstssnsr_valid_);
  std::swap(lon_acc_, other->lon_acc_);
  std::swap(steer_wheel_rot_spd_, other->steer_wheel_rot_spd_);
  std::swap(steerwheelrotspd_valid_, other->steerwheelrotspd_valid_);
  std::swap(eps_lkaresponsetorque_valid_, other->eps_lkaresponsetorque_valid_);
  std::swap(eps_tosionbartorquevalid_, other->eps_tosionbartorquevalid_);
  std::swap(eps_torsionbartorque_, other->eps_torsionbartorque_);
  std::swap(abs_whlmilgfrntri_, other->abs_whlmilgfrntri_);
  std::swap(abs_whlmilgfrntle_, other->abs_whlmilgfrntle_);
  std::swap(abs_whlmilgrearre_, other->abs_whlmilgrearre_);
  std::swap(abs_whlmilgrearle_, other->abs_whlmilgrearle_);
  std::swap(esp_wheelpulse_fl_, other->esp_wheelpulse_fl_);
  std::swap(esp_wheelpulse_fr_, other->esp_wheelpulse_fr_);
  std::swap(esp_wheelpulse_rl_, other->esp_wheelpulse_rl_);
  std::swap(esp_wheelpulse_rr_, other->esp_wheelpulse_rr_);
  std::swap(ems_accpedalratio_, other->ems_accpedalratio_);
  std::swap(abs_whlspdfrntle_, other->abs_whlspdfrntle_);
  std::swap(abs_whlspdfrntri_, other->abs_whlspdfrntri_);
  std::swap(abs_whlspdrele_, other->abs_whlspdrele_);
  std::swap(abs_whlspdreri_, other->abs_whlspdreri_);
  std::swap(acc_x_, other->acc_x_);
  std::swap(acc_y_, other->acc_y_);
  std::swap(acc_z_, other->acc_z_);
  std::swap(gyro_x_, other->gyro_x_);
  std::swap(gyro_y_, other->gyro_y_);
  std::swap(gyro_z_, other->gyro_z_);
  std::swap(brkpedalstasus_, other->brkpedalstasus_);
  std::swap(ins_gpsflag_pos_, other->ins_gpsflag_pos_);
  std::swap(ins_pitchangle_, other->ins_pitchangle_);
  std::swap(ins_rollangle_, other->ins_rollangle_);
  std::swap(ins_headingangle_, other->ins_headingangle_);
  std::swap(ins_locatheight_, other->ins_locatheight_);
  std::swap(ins_time_, other->ins_time_);
  std::swap(ins_latitude_, other->ins_latitude_);
  std::swap(ins_longitude_, other->ins_longitude_);
  std::swap(ins_northspd_, other->ins_northspd_);
  std::swap(ins_eastspd_, other->ins_eastspd_);
  std::swap(ins_togroundspd_, other->ins_togroundspd_);
  std::swap(ins_numsv_, other->ins_numsv_);
  std::swap(ins_gpsflag_heading_, other->ins_gpsflag_heading_);
  std::swap(ins_gps_age_, other->ins_gps_age_);
  std::swap(ins_car_status_, other->ins_car_status_);
  std::swap(ins_std_lat_, other->ins_std_lat_);
  std::swap(ins_std_lon_, other->ins_std_lon_);
  std::swap(ins_status_, other->ins_status_);
  std::swap(eps_lkacontrolstatus_, other->eps_lkacontrolstatus_);
  std::swap(ins_std_locat_height_, other->ins_std_locat_height_);
  std::swap(ins_std_heading_, other->ins_std_heading_);
  std::swap(esp_vlc_active_, other->esp_vlc_active_);
  std::swap(esp_vlc_available_, other->esp_vlc_available_);
  std::swap(esp_apa_gearboxenable_, other->esp_apa_gearboxenable_);
  std::swap(esp_vlc_apactive_, other->esp_vlc_apactive_);
  std::swap(esp_vlcapa_available_, other->esp_vlcapa_available_);
  std::swap(esp_epbstatus_, other->esp_epbstatus_);
  std::swap(steering_torque_nm_, other->steering_torque_nm_);
  std::swap(engine_rpm_, other->engine_rpm_);
  std::swap(speed_mps_, other->speed_mps_);
  std::swap(odometer_m_, other->odometer_m_);
  std::swap(throttle_percentage_, other->throttle_percentage_);
  std::swap(brake_percentage_, other->brake_percentage_);
  std::swap(steering_percentage_, other->steering_percentage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  std::swap(_has_bits_[2], other->_has_bits_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Chassis::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Chassis

// optional bool engine_started = 3;
bool Chassis::has_engine_started() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Chassis::set_has_engine_started() {
  _has_bits_[0] |= 0x00000080u;
}
void Chassis::clear_has_engine_started() {
  _has_bits_[0] &= ~0x00000080u;
}
void Chassis::clear_engine_started() {
  engine_started_ = false;
  clear_has_engine_started();
}
bool Chassis::engine_started() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.engine_started)
  return engine_started_;
}
void Chassis::set_engine_started(bool value) {
  set_has_engine_started();
  engine_started_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.engine_started)
}

// optional float engine_rpm = 4 [default = nan];
bool Chassis::has_engine_rpm() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
void Chassis::set_has_engine_rpm() {
  _has_bits_[2] |= 0x00004000u;
}
void Chassis::clear_has_engine_rpm() {
  _has_bits_[2] &= ~0x00004000u;
}
void Chassis::clear_engine_rpm() {
  engine_rpm_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_engine_rpm();
}
float Chassis::engine_rpm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.engine_rpm)
  return engine_rpm_;
}
void Chassis::set_engine_rpm(float value) {
  set_has_engine_rpm();
  engine_rpm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.engine_rpm)
}

// optional float speed_mps = 5 [default = nan];
bool Chassis::has_speed_mps() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
void Chassis::set_has_speed_mps() {
  _has_bits_[2] |= 0x00008000u;
}
void Chassis::clear_has_speed_mps() {
  _has_bits_[2] &= ~0x00008000u;
}
void Chassis::clear_speed_mps() {
  speed_mps_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_speed_mps();
}
float Chassis::speed_mps() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.speed_mps)
  return speed_mps_;
}
void Chassis::set_speed_mps(float value) {
  set_has_speed_mps();
  speed_mps_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.speed_mps)
}

// optional float odometer_m = 6 [default = nan];
bool Chassis::has_odometer_m() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
void Chassis::set_has_odometer_m() {
  _has_bits_[2] |= 0x00010000u;
}
void Chassis::clear_has_odometer_m() {
  _has_bits_[2] &= ~0x00010000u;
}
void Chassis::clear_odometer_m() {
  odometer_m_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_odometer_m();
}
float Chassis::odometer_m() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.odometer_m)
  return odometer_m_;
}
void Chassis::set_odometer_m(float value) {
  set_has_odometer_m();
  odometer_m_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.odometer_m)
}

// optional int32 fuel_range_m = 7;
bool Chassis::has_fuel_range_m() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Chassis::set_has_fuel_range_m() {
  _has_bits_[0] |= 0x00000040u;
}
void Chassis::clear_has_fuel_range_m() {
  _has_bits_[0] &= ~0x00000040u;
}
void Chassis::clear_fuel_range_m() {
  fuel_range_m_ = 0;
  clear_has_fuel_range_m();
}
::google::protobuf::int32 Chassis::fuel_range_m() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.fuel_range_m)
  return fuel_range_m_;
}
void Chassis::set_fuel_range_m(::google::protobuf::int32 value) {
  set_has_fuel_range_m();
  fuel_range_m_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.fuel_range_m)
}

// optional float throttle_percentage = 8 [default = nan];
bool Chassis::has_throttle_percentage() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
void Chassis::set_has_throttle_percentage() {
  _has_bits_[2] |= 0x00020000u;
}
void Chassis::clear_has_throttle_percentage() {
  _has_bits_[2] &= ~0x00020000u;
}
void Chassis::clear_throttle_percentage() {
  throttle_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_throttle_percentage();
}
float Chassis::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.throttle_percentage)
  return throttle_percentage_;
}
void Chassis::set_throttle_percentage(float value) {
  set_has_throttle_percentage();
  throttle_percentage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.throttle_percentage)
}

// optional float brake_percentage = 9 [default = nan];
bool Chassis::has_brake_percentage() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
void Chassis::set_has_brake_percentage() {
  _has_bits_[2] |= 0x00040000u;
}
void Chassis::clear_has_brake_percentage() {
  _has_bits_[2] &= ~0x00040000u;
}
void Chassis::clear_brake_percentage() {
  brake_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_brake_percentage();
}
float Chassis::brake_percentage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.brake_percentage)
  return brake_percentage_;
}
void Chassis::set_brake_percentage(float value) {
  set_has_brake_percentage();
  brake_percentage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.brake_percentage)
}

// optional float steering_percentage = 11 [default = nan];
bool Chassis::has_steering_percentage() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
void Chassis::set_has_steering_percentage() {
  _has_bits_[2] |= 0x00080000u;
}
void Chassis::clear_has_steering_percentage() {
  _has_bits_[2] &= ~0x00080000u;
}
void Chassis::clear_steering_percentage() {
  steering_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_steering_percentage();
}
float Chassis::steering_percentage() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.steering_percentage)
  return steering_percentage_;
}
void Chassis::set_steering_percentage(float value) {
  set_has_steering_percentage();
  steering_percentage_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.steering_percentage)
}

// optional float steering_torque_nm = 12 [default = nan];
bool Chassis::has_steering_torque_nm() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
void Chassis::set_has_steering_torque_nm() {
  _has_bits_[2] |= 0x00002000u;
}
void Chassis::clear_has_steering_torque_nm() {
  _has_bits_[2] &= ~0x00002000u;
}
void Chassis::clear_steering_torque_nm() {
  steering_torque_nm_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_steering_torque_nm();
}
float Chassis::steering_torque_nm() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.steering_torque_nm)
  return steering_torque_nm_;
}
void Chassis::set_steering_torque_nm(float value) {
  set_has_steering_torque_nm();
  steering_torque_nm_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.steering_torque_nm)
}

// optional bool parking_brake = 13;
bool Chassis::has_parking_brake() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Chassis::set_has_parking_brake() {
  _has_bits_[0] |= 0x00000100u;
}
void Chassis::clear_has_parking_brake() {
  _has_bits_[0] &= ~0x00000100u;
}
void Chassis::clear_parking_brake() {
  parking_brake_ = false;
  clear_has_parking_brake();
}
bool Chassis::parking_brake() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.parking_brake)
  return parking_brake_;
}
void Chassis::set_parking_brake(bool value) {
  set_has_parking_brake();
  parking_brake_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.parking_brake)
}

// optional bool high_beam_signal = 14 [deprecated = true];
bool Chassis::has_high_beam_signal() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Chassis::set_has_high_beam_signal() {
  _has_bits_[0] |= 0x00000200u;
}
void Chassis::clear_has_high_beam_signal() {
  _has_bits_[0] &= ~0x00000200u;
}
void Chassis::clear_high_beam_signal() {
  high_beam_signal_ = false;
  clear_has_high_beam_signal();
}
bool Chassis::high_beam_signal() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.high_beam_signal)
  return high_beam_signal_;
}
void Chassis::set_high_beam_signal(bool value) {
  set_has_high_beam_signal();
  high_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.high_beam_signal)
}

// optional bool low_beam_signal = 15 [deprecated = true];
bool Chassis::has_low_beam_signal() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Chassis::set_has_low_beam_signal() {
  _has_bits_[0] |= 0x00000400u;
}
void Chassis::clear_has_low_beam_signal() {
  _has_bits_[0] &= ~0x00000400u;
}
void Chassis::clear_low_beam_signal() {
  low_beam_signal_ = false;
  clear_has_low_beam_signal();
}
bool Chassis::low_beam_signal() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.low_beam_signal)
  return low_beam_signal_;
}
void Chassis::set_low_beam_signal(bool value) {
  set_has_low_beam_signal();
  low_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.low_beam_signal)
}

// optional bool left_turn_signal = 16 [deprecated = true];
bool Chassis::has_left_turn_signal() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Chassis::set_has_left_turn_signal() {
  _has_bits_[0] |= 0x00000800u;
}
void Chassis::clear_has_left_turn_signal() {
  _has_bits_[0] &= ~0x00000800u;
}
void Chassis::clear_left_turn_signal() {
  left_turn_signal_ = false;
  clear_has_left_turn_signal();
}
bool Chassis::left_turn_signal() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.left_turn_signal)
  return left_turn_signal_;
}
void Chassis::set_left_turn_signal(bool value) {
  set_has_left_turn_signal();
  left_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.left_turn_signal)
}

// optional bool right_turn_signal = 17 [deprecated = true];
bool Chassis::has_right_turn_signal() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Chassis::set_has_right_turn_signal() {
  _has_bits_[0] |= 0x00001000u;
}
void Chassis::clear_has_right_turn_signal() {
  _has_bits_[0] &= ~0x00001000u;
}
void Chassis::clear_right_turn_signal() {
  right_turn_signal_ = false;
  clear_has_right_turn_signal();
}
bool Chassis::right_turn_signal() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.right_turn_signal)
  return right_turn_signal_;
}
void Chassis::set_right_turn_signal(bool value) {
  set_has_right_turn_signal();
  right_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.right_turn_signal)
}

// optional bool horn = 18 [deprecated = true];
bool Chassis::has_horn() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Chassis::set_has_horn() {
  _has_bits_[0] |= 0x00002000u;
}
void Chassis::clear_has_horn() {
  _has_bits_[0] &= ~0x00002000u;
}
void Chassis::clear_horn() {
  horn_ = false;
  clear_has_horn();
}
bool Chassis::horn() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.horn)
  return horn_;
}
void Chassis::set_horn(bool value) {
  set_has_horn();
  horn_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.horn)
}

// optional bool wiper = 19;
bool Chassis::has_wiper() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Chassis::set_has_wiper() {
  _has_bits_[0] |= 0x00004000u;
}
void Chassis::clear_has_wiper() {
  _has_bits_[0] &= ~0x00004000u;
}
void Chassis::clear_wiper() {
  wiper_ = false;
  clear_has_wiper();
}
bool Chassis::wiper() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.wiper)
  return wiper_;
}
void Chassis::set_wiper(bool value) {
  set_has_wiper();
  wiper_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.wiper)
}

// optional bool disengage_status = 20 [deprecated = true];
bool Chassis::has_disengage_status() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Chassis::set_has_disengage_status() {
  _has_bits_[0] |= 0x00100000u;
}
void Chassis::clear_has_disengage_status() {
  _has_bits_[0] &= ~0x00100000u;
}
void Chassis::clear_disengage_status() {
  disengage_status_ = false;
  clear_has_disengage_status();
}
bool Chassis::disengage_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.disengage_status)
  return disengage_status_;
}
void Chassis::set_disengage_status(bool value) {
  set_has_disengage_status();
  disengage_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.disengage_status)
}

// optional .jmc_auto.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
bool Chassis::has_driving_mode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Chassis::set_has_driving_mode() {
  _has_bits_[0] |= 0x00008000u;
}
void Chassis::clear_has_driving_mode() {
  _has_bits_[0] &= ~0x00008000u;
}
void Chassis::clear_driving_mode() {
  driving_mode_ = 0;
  clear_has_driving_mode();
}
::jmc_auto::canbus::Chassis_DrivingMode Chassis::driving_mode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.driving_mode)
  return static_cast< ::jmc_auto::canbus::Chassis_DrivingMode >(driving_mode_);
}
void Chassis::set_driving_mode(::jmc_auto::canbus::Chassis_DrivingMode value) {
  assert(::jmc_auto::canbus::Chassis_DrivingMode_IsValid(value));
  set_has_driving_mode();
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.driving_mode)
}

// optional .jmc_auto.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
bool Chassis::has_error_code() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Chassis::set_has_error_code() {
  _has_bits_[0] |= 0x00010000u;
}
void Chassis::clear_has_error_code() {
  _has_bits_[0] &= ~0x00010000u;
}
void Chassis::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
::jmc_auto::canbus::Chassis_ErrorCode Chassis::error_code() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.error_code)
  return static_cast< ::jmc_auto::canbus::Chassis_ErrorCode >(error_code_);
}
void Chassis::set_error_code(::jmc_auto::canbus::Chassis_ErrorCode value) {
  assert(::jmc_auto::canbus::Chassis_ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.error_code)
}

// optional .jmc_auto.canbus.Chassis.GearPosition gear_location = 23;
bool Chassis::has_gear_location() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Chassis::set_has_gear_location() {
  _has_bits_[0] |= 0x00020000u;
}
void Chassis::clear_has_gear_location() {
  _has_bits_[0] &= ~0x00020000u;
}
void Chassis::clear_gear_location() {
  gear_location_ = 0;
  clear_has_gear_location();
}
::jmc_auto::canbus::Chassis_GearPosition Chassis::gear_location() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.gear_location)
  return static_cast< ::jmc_auto::canbus::Chassis_GearPosition >(gear_location_);
}
void Chassis::set_gear_location(::jmc_auto::canbus::Chassis_GearPosition value) {
  assert(::jmc_auto::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear_location();
  gear_location_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.gear_location)
}

// optional double steering_timestamp = 24;
bool Chassis::has_steering_timestamp() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Chassis::set_has_steering_timestamp() {
  _has_bits_[0] |= 0x00040000u;
}
void Chassis::clear_has_steering_timestamp() {
  _has_bits_[0] &= ~0x00040000u;
}
void Chassis::clear_steering_timestamp() {
  steering_timestamp_ = 0;
  clear_has_steering_timestamp();
}
double Chassis::steering_timestamp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.steering_timestamp)
  return steering_timestamp_;
}
void Chassis::set_steering_timestamp(double value) {
  set_has_steering_timestamp();
  steering_timestamp_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.steering_timestamp)
}

// optional .jmc_auto.common.Header header = 25;
bool Chassis::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Chassis::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Chassis::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Chassis::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
const ::jmc_auto::common::Header& Chassis::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
::jmc_auto::common::Header* Chassis::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Chassis.header)
  return header_;
}
::jmc_auto::common::Header* Chassis::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Chassis.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Chassis::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Chassis.header)
}

// optional int32 chassis_error_mask = 26 [default = 0];
bool Chassis::has_chassis_error_mask() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Chassis::set_has_chassis_error_mask() {
  _has_bits_[0] |= 0x00080000u;
}
void Chassis::clear_has_chassis_error_mask() {
  _has_bits_[0] &= ~0x00080000u;
}
void Chassis::clear_chassis_error_mask() {
  chassis_error_mask_ = 0;
  clear_has_chassis_error_mask();
}
::google::protobuf::int32 Chassis::chassis_error_mask() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.chassis_error_mask)
  return chassis_error_mask_;
}
void Chassis::set_chassis_error_mask(::google::protobuf::int32 value) {
  set_has_chassis_error_mask();
  chassis_error_mask_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.chassis_error_mask)
}

// optional .jmc_auto.common.VehicleSignal signal = 27;
bool Chassis::has_signal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Chassis::set_has_signal() {
  _has_bits_[0] |= 0x00000002u;
}
void Chassis::clear_has_signal() {
  _has_bits_[0] &= ~0x00000002u;
}
void Chassis::clear_signal() {
  if (signal_ != NULL) signal_->::jmc_auto::common::VehicleSignal::Clear();
  clear_has_signal();
}
const ::jmc_auto::common::VehicleSignal& Chassis::signal() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.signal)
  return signal_ != NULL ? *signal_
                         : *::jmc_auto::common::VehicleSignal::internal_default_instance();
}
::jmc_auto::common::VehicleSignal* Chassis::mutable_signal() {
  set_has_signal();
  if (signal_ == NULL) {
    signal_ = new ::jmc_auto::common::VehicleSignal;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Chassis.signal)
  return signal_;
}
::jmc_auto::common::VehicleSignal* Chassis::release_signal() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Chassis.signal)
  clear_has_signal();
  ::jmc_auto::common::VehicleSignal* temp = signal_;
  signal_ = NULL;
  return temp;
}
void Chassis::set_allocated_signal(::jmc_auto::common::VehicleSignal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    set_has_signal();
  } else {
    clear_has_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Chassis.signal)
}

// optional .jmc_auto.canbus.ChassisGPS chassis_gps = 28;
bool Chassis::has_chassis_gps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Chassis::set_has_chassis_gps() {
  _has_bits_[0] |= 0x00000004u;
}
void Chassis::clear_has_chassis_gps() {
  _has_bits_[0] &= ~0x00000004u;
}
void Chassis::clear_chassis_gps() {
  if (chassis_gps_ != NULL) chassis_gps_->::jmc_auto::canbus::ChassisGPS::Clear();
  clear_has_chassis_gps();
}
const ::jmc_auto::canbus::ChassisGPS& Chassis::chassis_gps() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.chassis_gps)
  return chassis_gps_ != NULL ? *chassis_gps_
                         : *::jmc_auto::canbus::ChassisGPS::internal_default_instance();
}
::jmc_auto::canbus::ChassisGPS* Chassis::mutable_chassis_gps() {
  set_has_chassis_gps();
  if (chassis_gps_ == NULL) {
    chassis_gps_ = new ::jmc_auto::canbus::ChassisGPS;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Chassis.chassis_gps)
  return chassis_gps_;
}
::jmc_auto::canbus::ChassisGPS* Chassis::release_chassis_gps() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Chassis.chassis_gps)
  clear_has_chassis_gps();
  ::jmc_auto::canbus::ChassisGPS* temp = chassis_gps_;
  chassis_gps_ = NULL;
  return temp;
}
void Chassis::set_allocated_chassis_gps(::jmc_auto::canbus::ChassisGPS* chassis_gps) {
  delete chassis_gps_;
  chassis_gps_ = chassis_gps;
  if (chassis_gps) {
    set_has_chassis_gps();
  } else {
    clear_has_chassis_gps();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Chassis.chassis_gps)
}

// optional .jmc_auto.common.EngageAdvice engage_advice = 29;
bool Chassis::has_engage_advice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Chassis::set_has_engage_advice() {
  _has_bits_[0] |= 0x00000008u;
}
void Chassis::clear_has_engage_advice() {
  _has_bits_[0] &= ~0x00000008u;
}
void Chassis::clear_engage_advice() {
  if (engage_advice_ != NULL) engage_advice_->::jmc_auto::common::EngageAdvice::Clear();
  clear_has_engage_advice();
}
const ::jmc_auto::common::EngageAdvice& Chassis::engage_advice() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.engage_advice)
  return engage_advice_ != NULL ? *engage_advice_
                         : *::jmc_auto::common::EngageAdvice::internal_default_instance();
}
::jmc_auto::common::EngageAdvice* Chassis::mutable_engage_advice() {
  set_has_engage_advice();
  if (engage_advice_ == NULL) {
    engage_advice_ = new ::jmc_auto::common::EngageAdvice;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Chassis.engage_advice)
  return engage_advice_;
}
::jmc_auto::common::EngageAdvice* Chassis::release_engage_advice() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Chassis.engage_advice)
  clear_has_engage_advice();
  ::jmc_auto::common::EngageAdvice* temp = engage_advice_;
  engage_advice_ = NULL;
  return temp;
}
void Chassis::set_allocated_engage_advice(::jmc_auto::common::EngageAdvice* engage_advice) {
  delete engage_advice_;
  engage_advice_ = engage_advice;
  if (engage_advice) {
    set_has_engage_advice();
  } else {
    clear_has_engage_advice();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Chassis.engage_advice)
}

// optional .jmc_auto.canbus.WheelSpeed wheel_speed = 30;
bool Chassis::has_wheel_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Chassis::set_has_wheel_speed() {
  _has_bits_[0] |= 0x00000010u;
}
void Chassis::clear_has_wheel_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
void Chassis::clear_wheel_speed() {
  if (wheel_speed_ != NULL) wheel_speed_->::jmc_auto::canbus::WheelSpeed::Clear();
  clear_has_wheel_speed();
}
const ::jmc_auto::canbus::WheelSpeed& Chassis::wheel_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.wheel_speed)
  return wheel_speed_ != NULL ? *wheel_speed_
                         : *::jmc_auto::canbus::WheelSpeed::internal_default_instance();
}
::jmc_auto::canbus::WheelSpeed* Chassis::mutable_wheel_speed() {
  set_has_wheel_speed();
  if (wheel_speed_ == NULL) {
    wheel_speed_ = new ::jmc_auto::canbus::WheelSpeed;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Chassis.wheel_speed)
  return wheel_speed_;
}
::jmc_auto::canbus::WheelSpeed* Chassis::release_wheel_speed() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Chassis.wheel_speed)
  clear_has_wheel_speed();
  ::jmc_auto::canbus::WheelSpeed* temp = wheel_speed_;
  wheel_speed_ = NULL;
  return temp;
}
void Chassis::set_allocated_wheel_speed(::jmc_auto::canbus::WheelSpeed* wheel_speed) {
  delete wheel_speed_;
  wheel_speed_ = wheel_speed;
  if (wheel_speed) {
    set_has_wheel_speed();
  } else {
    clear_has_wheel_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Chassis.wheel_speed)
}

// optional .jmc_auto.canbus.Surround surround = 31;
bool Chassis::has_surround() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Chassis::set_has_surround() {
  _has_bits_[0] |= 0x00000020u;
}
void Chassis::clear_has_surround() {
  _has_bits_[0] &= ~0x00000020u;
}
void Chassis::clear_surround() {
  if (surround_ != NULL) surround_->::jmc_auto::canbus::Surround::Clear();
  clear_has_surround();
}
const ::jmc_auto::canbus::Surround& Chassis::surround() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.surround)
  return surround_ != NULL ? *surround_
                         : *::jmc_auto::canbus::Surround::internal_default_instance();
}
::jmc_auto::canbus::Surround* Chassis::mutable_surround() {
  set_has_surround();
  if (surround_ == NULL) {
    surround_ = new ::jmc_auto::canbus::Surround;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Chassis.surround)
  return surround_;
}
::jmc_auto::canbus::Surround* Chassis::release_surround() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Chassis.surround)
  clear_has_surround();
  ::jmc_auto::canbus::Surround* temp = surround_;
  surround_ = NULL;
  return temp;
}
void Chassis::set_allocated_surround(::jmc_auto::canbus::Surround* surround) {
  delete surround_;
  surround_ = surround;
  if (surround) {
    set_has_surround();
  } else {
    clear_has_surround();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Chassis.surround)
}

// optional float lon_acc = 33;
bool Chassis::has_lon_acc() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Chassis::set_has_lon_acc() {
  _has_bits_[0] |= 0x01000000u;
}
void Chassis::clear_has_lon_acc() {
  _has_bits_[0] &= ~0x01000000u;
}
void Chassis::clear_lon_acc() {
  lon_acc_ = 0;
  clear_has_lon_acc();
}
float Chassis::lon_acc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.lon_acc)
  return lon_acc_;
}
void Chassis::set_lon_acc(float value) {
  set_has_lon_acc();
  lon_acc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.lon_acc)
}

// optional float steer_wheel_rot_spd = 34;
bool Chassis::has_steer_wheel_rot_spd() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Chassis::set_has_steer_wheel_rot_spd() {
  _has_bits_[0] |= 0x02000000u;
}
void Chassis::clear_has_steer_wheel_rot_spd() {
  _has_bits_[0] &= ~0x02000000u;
}
void Chassis::clear_steer_wheel_rot_spd() {
  steer_wheel_rot_spd_ = 0;
  clear_has_steer_wheel_rot_spd();
}
float Chassis::steer_wheel_rot_spd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.steer_wheel_rot_spd)
  return steer_wheel_rot_spd_;
}
void Chassis::set_steer_wheel_rot_spd(float value) {
  set_has_steer_wheel_rot_spd();
  steer_wheel_rot_spd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.steer_wheel_rot_spd)
}

// optional bool abs_vehspdlgt_valid = 35;
bool Chassis::has_abs_vehspdlgt_valid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Chassis::set_has_abs_vehspdlgt_valid() {
  _has_bits_[0] |= 0x00200000u;
}
void Chassis::clear_has_abs_vehspdlgt_valid() {
  _has_bits_[0] &= ~0x00200000u;
}
void Chassis::clear_abs_vehspdlgt_valid() {
  abs_vehspdlgt_valid_ = false;
  clear_has_abs_vehspdlgt_valid();
}
bool Chassis::abs_vehspdlgt_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_vehspdlgt_valid)
  return abs_vehspdlgt_valid_;
}
void Chassis::set_abs_vehspdlgt_valid(bool value) {
  set_has_abs_vehspdlgt_valid();
  abs_vehspdlgt_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_vehspdlgt_valid)
}

// optional bool esp_algtstatus_valid = 36;
bool Chassis::has_esp_algtstatus_valid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Chassis::set_has_esp_algtstatus_valid() {
  _has_bits_[0] |= 0x00400000u;
}
void Chassis::clear_has_esp_algtstatus_valid() {
  _has_bits_[0] &= ~0x00400000u;
}
void Chassis::clear_esp_algtstatus_valid() {
  esp_algtstatus_valid_ = false;
  clear_has_esp_algtstatus_valid();
}
bool Chassis::esp_algtstatus_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_algtstatus_valid)
  return esp_algtstatus_valid_;
}
void Chassis::set_esp_algtstatus_valid(bool value) {
  set_has_esp_algtstatus_valid();
  esp_algtstatus_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_algtstatus_valid)
}

// optional bool sas_sasstssnsr_valid = 37;
bool Chassis::has_sas_sasstssnsr_valid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Chassis::set_has_sas_sasstssnsr_valid() {
  _has_bits_[0] |= 0x00800000u;
}
void Chassis::clear_has_sas_sasstssnsr_valid() {
  _has_bits_[0] &= ~0x00800000u;
}
void Chassis::clear_sas_sasstssnsr_valid() {
  sas_sasstssnsr_valid_ = false;
  clear_has_sas_sasstssnsr_valid();
}
bool Chassis::sas_sasstssnsr_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.sas_sasstssnsr_valid)
  return sas_sasstssnsr_valid_;
}
void Chassis::set_sas_sasstssnsr_valid(bool value) {
  set_has_sas_sasstssnsr_valid();
  sas_sasstssnsr_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.sas_sasstssnsr_valid)
}

// optional bool steerwheelrotspd_valid = 38;
bool Chassis::has_steerwheelrotspd_valid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void Chassis::set_has_steerwheelrotspd_valid() {
  _has_bits_[0] |= 0x04000000u;
}
void Chassis::clear_has_steerwheelrotspd_valid() {
  _has_bits_[0] &= ~0x04000000u;
}
void Chassis::clear_steerwheelrotspd_valid() {
  steerwheelrotspd_valid_ = false;
  clear_has_steerwheelrotspd_valid();
}
bool Chassis::steerwheelrotspd_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.steerwheelrotspd_valid)
  return steerwheelrotspd_valid_;
}
void Chassis::set_steerwheelrotspd_valid(bool value) {
  set_has_steerwheelrotspd_valid();
  steerwheelrotspd_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.steerwheelrotspd_valid)
}

// optional bool eps_lkaresponsetorque_valid = 39;
bool Chassis::has_eps_lkaresponsetorque_valid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void Chassis::set_has_eps_lkaresponsetorque_valid() {
  _has_bits_[0] |= 0x08000000u;
}
void Chassis::clear_has_eps_lkaresponsetorque_valid() {
  _has_bits_[0] &= ~0x08000000u;
}
void Chassis::clear_eps_lkaresponsetorque_valid() {
  eps_lkaresponsetorque_valid_ = false;
  clear_has_eps_lkaresponsetorque_valid();
}
bool Chassis::eps_lkaresponsetorque_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.eps_lkaresponsetorque_valid)
  return eps_lkaresponsetorque_valid_;
}
void Chassis::set_eps_lkaresponsetorque_valid(bool value) {
  set_has_eps_lkaresponsetorque_valid();
  eps_lkaresponsetorque_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.eps_lkaresponsetorque_valid)
}

// optional float eps_torsionbartorque = 40;
bool Chassis::has_eps_torsionbartorque() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void Chassis::set_has_eps_torsionbartorque() {
  _has_bits_[0] |= 0x20000000u;
}
void Chassis::clear_has_eps_torsionbartorque() {
  _has_bits_[0] &= ~0x20000000u;
}
void Chassis::clear_eps_torsionbartorque() {
  eps_torsionbartorque_ = 0;
  clear_has_eps_torsionbartorque();
}
float Chassis::eps_torsionbartorque() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.eps_torsionbartorque)
  return eps_torsionbartorque_;
}
void Chassis::set_eps_torsionbartorque(float value) {
  set_has_eps_torsionbartorque();
  eps_torsionbartorque_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.eps_torsionbartorque)
}

// optional bool eps_tosionbartorquevalid = 41;
bool Chassis::has_eps_tosionbartorquevalid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void Chassis::set_has_eps_tosionbartorquevalid() {
  _has_bits_[0] |= 0x10000000u;
}
void Chassis::clear_has_eps_tosionbartorquevalid() {
  _has_bits_[0] &= ~0x10000000u;
}
void Chassis::clear_eps_tosionbartorquevalid() {
  eps_tosionbartorquevalid_ = false;
  clear_has_eps_tosionbartorquevalid();
}
bool Chassis::eps_tosionbartorquevalid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.eps_tosionbartorquevalid)
  return eps_tosionbartorquevalid_;
}
void Chassis::set_eps_tosionbartorquevalid(bool value) {
  set_has_eps_tosionbartorquevalid();
  eps_tosionbartorquevalid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.eps_tosionbartorquevalid)
}

// optional int32 abs_whlmilgfrntri = 42;
bool Chassis::has_abs_whlmilgfrntri() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void Chassis::set_has_abs_whlmilgfrntri() {
  _has_bits_[0] |= 0x40000000u;
}
void Chassis::clear_has_abs_whlmilgfrntri() {
  _has_bits_[0] &= ~0x40000000u;
}
void Chassis::clear_abs_whlmilgfrntri() {
  abs_whlmilgfrntri_ = 0;
  clear_has_abs_whlmilgfrntri();
}
::google::protobuf::int32 Chassis::abs_whlmilgfrntri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_whlmilgfrntri)
  return abs_whlmilgfrntri_;
}
void Chassis::set_abs_whlmilgfrntri(::google::protobuf::int32 value) {
  set_has_abs_whlmilgfrntri();
  abs_whlmilgfrntri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_whlmilgfrntri)
}

// optional int32 abs_whlmilgfrntle = 43;
bool Chassis::has_abs_whlmilgfrntle() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void Chassis::set_has_abs_whlmilgfrntle() {
  _has_bits_[0] |= 0x80000000u;
}
void Chassis::clear_has_abs_whlmilgfrntle() {
  _has_bits_[0] &= ~0x80000000u;
}
void Chassis::clear_abs_whlmilgfrntle() {
  abs_whlmilgfrntle_ = 0;
  clear_has_abs_whlmilgfrntle();
}
::google::protobuf::int32 Chassis::abs_whlmilgfrntle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_whlmilgfrntle)
  return abs_whlmilgfrntle_;
}
void Chassis::set_abs_whlmilgfrntle(::google::protobuf::int32 value) {
  set_has_abs_whlmilgfrntle();
  abs_whlmilgfrntle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_whlmilgfrntle)
}

// optional int32 abs_whlmilgrearre = 44;
bool Chassis::has_abs_whlmilgrearre() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void Chassis::set_has_abs_whlmilgrearre() {
  _has_bits_[1] |= 0x00000001u;
}
void Chassis::clear_has_abs_whlmilgrearre() {
  _has_bits_[1] &= ~0x00000001u;
}
void Chassis::clear_abs_whlmilgrearre() {
  abs_whlmilgrearre_ = 0;
  clear_has_abs_whlmilgrearre();
}
::google::protobuf::int32 Chassis::abs_whlmilgrearre() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_whlmilgrearre)
  return abs_whlmilgrearre_;
}
void Chassis::set_abs_whlmilgrearre(::google::protobuf::int32 value) {
  set_has_abs_whlmilgrearre();
  abs_whlmilgrearre_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_whlmilgrearre)
}

// optional int32 abs_whlmilgrearle = 45;
bool Chassis::has_abs_whlmilgrearle() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void Chassis::set_has_abs_whlmilgrearle() {
  _has_bits_[1] |= 0x00000002u;
}
void Chassis::clear_has_abs_whlmilgrearle() {
  _has_bits_[1] &= ~0x00000002u;
}
void Chassis::clear_abs_whlmilgrearle() {
  abs_whlmilgrearle_ = 0;
  clear_has_abs_whlmilgrearle();
}
::google::protobuf::int32 Chassis::abs_whlmilgrearle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_whlmilgrearle)
  return abs_whlmilgrearle_;
}
void Chassis::set_abs_whlmilgrearle(::google::protobuf::int32 value) {
  set_has_abs_whlmilgrearle();
  abs_whlmilgrearle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_whlmilgrearle)
}

// optional int32 esp_wheelpulse_fl = 46;
bool Chassis::has_esp_wheelpulse_fl() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void Chassis::set_has_esp_wheelpulse_fl() {
  _has_bits_[1] |= 0x00000004u;
}
void Chassis::clear_has_esp_wheelpulse_fl() {
  _has_bits_[1] &= ~0x00000004u;
}
void Chassis::clear_esp_wheelpulse_fl() {
  esp_wheelpulse_fl_ = 0;
  clear_has_esp_wheelpulse_fl();
}
::google::protobuf::int32 Chassis::esp_wheelpulse_fl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_wheelpulse_fl)
  return esp_wheelpulse_fl_;
}
void Chassis::set_esp_wheelpulse_fl(::google::protobuf::int32 value) {
  set_has_esp_wheelpulse_fl();
  esp_wheelpulse_fl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_wheelpulse_fl)
}

// optional int32 esp_wheelpulse_fr = 47;
bool Chassis::has_esp_wheelpulse_fr() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void Chassis::set_has_esp_wheelpulse_fr() {
  _has_bits_[1] |= 0x00000008u;
}
void Chassis::clear_has_esp_wheelpulse_fr() {
  _has_bits_[1] &= ~0x00000008u;
}
void Chassis::clear_esp_wheelpulse_fr() {
  esp_wheelpulse_fr_ = 0;
  clear_has_esp_wheelpulse_fr();
}
::google::protobuf::int32 Chassis::esp_wheelpulse_fr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_wheelpulse_fr)
  return esp_wheelpulse_fr_;
}
void Chassis::set_esp_wheelpulse_fr(::google::protobuf::int32 value) {
  set_has_esp_wheelpulse_fr();
  esp_wheelpulse_fr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_wheelpulse_fr)
}

// optional int32 esp_wheelpulse_rl = 48;
bool Chassis::has_esp_wheelpulse_rl() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void Chassis::set_has_esp_wheelpulse_rl() {
  _has_bits_[1] |= 0x00000010u;
}
void Chassis::clear_has_esp_wheelpulse_rl() {
  _has_bits_[1] &= ~0x00000010u;
}
void Chassis::clear_esp_wheelpulse_rl() {
  esp_wheelpulse_rl_ = 0;
  clear_has_esp_wheelpulse_rl();
}
::google::protobuf::int32 Chassis::esp_wheelpulse_rl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_wheelpulse_rl)
  return esp_wheelpulse_rl_;
}
void Chassis::set_esp_wheelpulse_rl(::google::protobuf::int32 value) {
  set_has_esp_wheelpulse_rl();
  esp_wheelpulse_rl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_wheelpulse_rl)
}

// optional int32 esp_wheelpulse_rr = 49;
bool Chassis::has_esp_wheelpulse_rr() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void Chassis::set_has_esp_wheelpulse_rr() {
  _has_bits_[1] |= 0x00000020u;
}
void Chassis::clear_has_esp_wheelpulse_rr() {
  _has_bits_[1] &= ~0x00000020u;
}
void Chassis::clear_esp_wheelpulse_rr() {
  esp_wheelpulse_rr_ = 0;
  clear_has_esp_wheelpulse_rr();
}
::google::protobuf::int32 Chassis::esp_wheelpulse_rr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_wheelpulse_rr)
  return esp_wheelpulse_rr_;
}
void Chassis::set_esp_wheelpulse_rr(::google::protobuf::int32 value) {
  set_has_esp_wheelpulse_rr();
  esp_wheelpulse_rr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_wheelpulse_rr)
}

// optional double ems_accpedalratio = 50;
bool Chassis::has_ems_accpedalratio() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void Chassis::set_has_ems_accpedalratio() {
  _has_bits_[1] |= 0x00000040u;
}
void Chassis::clear_has_ems_accpedalratio() {
  _has_bits_[1] &= ~0x00000040u;
}
void Chassis::clear_ems_accpedalratio() {
  ems_accpedalratio_ = 0;
  clear_has_ems_accpedalratio();
}
double Chassis::ems_accpedalratio() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ems_accpedalratio)
  return ems_accpedalratio_;
}
void Chassis::set_ems_accpedalratio(double value) {
  set_has_ems_accpedalratio();
  ems_accpedalratio_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ems_accpedalratio)
}

// optional .jmc_auto.canbus.Chassis.BrkPedalStasus brkpedalstasus = 51;
bool Chassis::has_brkpedalstasus() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void Chassis::set_has_brkpedalstasus() {
  _has_bits_[1] |= 0x00020000u;
}
void Chassis::clear_has_brkpedalstasus() {
  _has_bits_[1] &= ~0x00020000u;
}
void Chassis::clear_brkpedalstasus() {
  brkpedalstasus_ = 0;
  clear_has_brkpedalstasus();
}
::jmc_auto::canbus::Chassis_BrkPedalStasus Chassis::brkpedalstasus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.brkpedalstasus)
  return static_cast< ::jmc_auto::canbus::Chassis_BrkPedalStasus >(brkpedalstasus_);
}
void Chassis::set_brkpedalstasus(::jmc_auto::canbus::Chassis_BrkPedalStasus value) {
  assert(::jmc_auto::canbus::Chassis_BrkPedalStasus_IsValid(value));
  set_has_brkpedalstasus();
  brkpedalstasus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.brkpedalstasus)
}

// optional double abs_whlspdfrntle = 52;
bool Chassis::has_abs_whlspdfrntle() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void Chassis::set_has_abs_whlspdfrntle() {
  _has_bits_[1] |= 0x00000080u;
}
void Chassis::clear_has_abs_whlspdfrntle() {
  _has_bits_[1] &= ~0x00000080u;
}
void Chassis::clear_abs_whlspdfrntle() {
  abs_whlspdfrntle_ = 0;
  clear_has_abs_whlspdfrntle();
}
double Chassis::abs_whlspdfrntle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_whlspdfrntle)
  return abs_whlspdfrntle_;
}
void Chassis::set_abs_whlspdfrntle(double value) {
  set_has_abs_whlspdfrntle();
  abs_whlspdfrntle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_whlspdfrntle)
}

// optional double abs_whlspdfrntri = 53;
bool Chassis::has_abs_whlspdfrntri() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void Chassis::set_has_abs_whlspdfrntri() {
  _has_bits_[1] |= 0x00000100u;
}
void Chassis::clear_has_abs_whlspdfrntri() {
  _has_bits_[1] &= ~0x00000100u;
}
void Chassis::clear_abs_whlspdfrntri() {
  abs_whlspdfrntri_ = 0;
  clear_has_abs_whlspdfrntri();
}
double Chassis::abs_whlspdfrntri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_whlspdfrntri)
  return abs_whlspdfrntri_;
}
void Chassis::set_abs_whlspdfrntri(double value) {
  set_has_abs_whlspdfrntri();
  abs_whlspdfrntri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_whlspdfrntri)
}

// optional double abs_whlspdrele = 54;
bool Chassis::has_abs_whlspdrele() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void Chassis::set_has_abs_whlspdrele() {
  _has_bits_[1] |= 0x00000200u;
}
void Chassis::clear_has_abs_whlspdrele() {
  _has_bits_[1] &= ~0x00000200u;
}
void Chassis::clear_abs_whlspdrele() {
  abs_whlspdrele_ = 0;
  clear_has_abs_whlspdrele();
}
double Chassis::abs_whlspdrele() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_whlspdrele)
  return abs_whlspdrele_;
}
void Chassis::set_abs_whlspdrele(double value) {
  set_has_abs_whlspdrele();
  abs_whlspdrele_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_whlspdrele)
}

// optional double abs_whlspdreri = 55;
bool Chassis::has_abs_whlspdreri() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void Chassis::set_has_abs_whlspdreri() {
  _has_bits_[1] |= 0x00000400u;
}
void Chassis::clear_has_abs_whlspdreri() {
  _has_bits_[1] &= ~0x00000400u;
}
void Chassis::clear_abs_whlspdreri() {
  abs_whlspdreri_ = 0;
  clear_has_abs_whlspdreri();
}
double Chassis::abs_whlspdreri() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.abs_whlspdreri)
  return abs_whlspdreri_;
}
void Chassis::set_abs_whlspdreri(double value) {
  set_has_abs_whlspdreri();
  abs_whlspdreri_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.abs_whlspdreri)
}

// optional double acc_x = 56;
bool Chassis::has_acc_x() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void Chassis::set_has_acc_x() {
  _has_bits_[1] |= 0x00000800u;
}
void Chassis::clear_has_acc_x() {
  _has_bits_[1] &= ~0x00000800u;
}
void Chassis::clear_acc_x() {
  acc_x_ = 0;
  clear_has_acc_x();
}
double Chassis::acc_x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.acc_x)
  return acc_x_;
}
void Chassis::set_acc_x(double value) {
  set_has_acc_x();
  acc_x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.acc_x)
}

// optional double acc_y = 57;
bool Chassis::has_acc_y() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void Chassis::set_has_acc_y() {
  _has_bits_[1] |= 0x00001000u;
}
void Chassis::clear_has_acc_y() {
  _has_bits_[1] &= ~0x00001000u;
}
void Chassis::clear_acc_y() {
  acc_y_ = 0;
  clear_has_acc_y();
}
double Chassis::acc_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.acc_y)
  return acc_y_;
}
void Chassis::set_acc_y(double value) {
  set_has_acc_y();
  acc_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.acc_y)
}

// optional double acc_z = 58;
bool Chassis::has_acc_z() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void Chassis::set_has_acc_z() {
  _has_bits_[1] |= 0x00002000u;
}
void Chassis::clear_has_acc_z() {
  _has_bits_[1] &= ~0x00002000u;
}
void Chassis::clear_acc_z() {
  acc_z_ = 0;
  clear_has_acc_z();
}
double Chassis::acc_z() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.acc_z)
  return acc_z_;
}
void Chassis::set_acc_z(double value) {
  set_has_acc_z();
  acc_z_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.acc_z)
}

// optional double gyro_x = 59;
bool Chassis::has_gyro_x() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void Chassis::set_has_gyro_x() {
  _has_bits_[1] |= 0x00004000u;
}
void Chassis::clear_has_gyro_x() {
  _has_bits_[1] &= ~0x00004000u;
}
void Chassis::clear_gyro_x() {
  gyro_x_ = 0;
  clear_has_gyro_x();
}
double Chassis::gyro_x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.gyro_x)
  return gyro_x_;
}
void Chassis::set_gyro_x(double value) {
  set_has_gyro_x();
  gyro_x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.gyro_x)
}

// optional double gyro_y = 60;
bool Chassis::has_gyro_y() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void Chassis::set_has_gyro_y() {
  _has_bits_[1] |= 0x00008000u;
}
void Chassis::clear_has_gyro_y() {
  _has_bits_[1] &= ~0x00008000u;
}
void Chassis::clear_gyro_y() {
  gyro_y_ = 0;
  clear_has_gyro_y();
}
double Chassis::gyro_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.gyro_y)
  return gyro_y_;
}
void Chassis::set_gyro_y(double value) {
  set_has_gyro_y();
  gyro_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.gyro_y)
}

// optional double gyro_z = 61;
bool Chassis::has_gyro_z() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void Chassis::set_has_gyro_z() {
  _has_bits_[1] |= 0x00010000u;
}
void Chassis::clear_has_gyro_z() {
  _has_bits_[1] &= ~0x00010000u;
}
void Chassis::clear_gyro_z() {
  gyro_z_ = 0;
  clear_has_gyro_z();
}
double Chassis::gyro_z() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.gyro_z)
  return gyro_z_;
}
void Chassis::set_gyro_z(double value) {
  set_has_gyro_z();
  gyro_z_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.gyro_z)
}

// optional double ins_pitchangle = 62;
bool Chassis::has_ins_pitchangle() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void Chassis::set_has_ins_pitchangle() {
  _has_bits_[1] |= 0x00080000u;
}
void Chassis::clear_has_ins_pitchangle() {
  _has_bits_[1] &= ~0x00080000u;
}
void Chassis::clear_ins_pitchangle() {
  ins_pitchangle_ = 0;
  clear_has_ins_pitchangle();
}
double Chassis::ins_pitchangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_pitchangle)
  return ins_pitchangle_;
}
void Chassis::set_ins_pitchangle(double value) {
  set_has_ins_pitchangle();
  ins_pitchangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_pitchangle)
}

// optional double ins_rollangle = 63;
bool Chassis::has_ins_rollangle() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void Chassis::set_has_ins_rollangle() {
  _has_bits_[1] |= 0x00100000u;
}
void Chassis::clear_has_ins_rollangle() {
  _has_bits_[1] &= ~0x00100000u;
}
void Chassis::clear_ins_rollangle() {
  ins_rollangle_ = 0;
  clear_has_ins_rollangle();
}
double Chassis::ins_rollangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_rollangle)
  return ins_rollangle_;
}
void Chassis::set_ins_rollangle(double value) {
  set_has_ins_rollangle();
  ins_rollangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_rollangle)
}

// optional double ins_headingangle = 64;
bool Chassis::has_ins_headingangle() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void Chassis::set_has_ins_headingangle() {
  _has_bits_[1] |= 0x00200000u;
}
void Chassis::clear_has_ins_headingangle() {
  _has_bits_[1] &= ~0x00200000u;
}
void Chassis::clear_ins_headingangle() {
  ins_headingangle_ = 0;
  clear_has_ins_headingangle();
}
double Chassis::ins_headingangle() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_headingangle)
  return ins_headingangle_;
}
void Chassis::set_ins_headingangle(double value) {
  set_has_ins_headingangle();
  ins_headingangle_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_headingangle)
}

// optional double ins_locatheight = 65;
bool Chassis::has_ins_locatheight() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void Chassis::set_has_ins_locatheight() {
  _has_bits_[1] |= 0x00400000u;
}
void Chassis::clear_has_ins_locatheight() {
  _has_bits_[1] &= ~0x00400000u;
}
void Chassis::clear_ins_locatheight() {
  ins_locatheight_ = 0;
  clear_has_ins_locatheight();
}
double Chassis::ins_locatheight() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_locatheight)
  return ins_locatheight_;
}
void Chassis::set_ins_locatheight(double value) {
  set_has_ins_locatheight();
  ins_locatheight_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_locatheight)
}

// optional double ins_time = 66;
bool Chassis::has_ins_time() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void Chassis::set_has_ins_time() {
  _has_bits_[1] |= 0x00800000u;
}
void Chassis::clear_has_ins_time() {
  _has_bits_[1] &= ~0x00800000u;
}
void Chassis::clear_ins_time() {
  ins_time_ = 0;
  clear_has_ins_time();
}
double Chassis::ins_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_time)
  return ins_time_;
}
void Chassis::set_ins_time(double value) {
  set_has_ins_time();
  ins_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_time)
}

// optional double ins_latitude = 67;
bool Chassis::has_ins_latitude() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void Chassis::set_has_ins_latitude() {
  _has_bits_[1] |= 0x01000000u;
}
void Chassis::clear_has_ins_latitude() {
  _has_bits_[1] &= ~0x01000000u;
}
void Chassis::clear_ins_latitude() {
  ins_latitude_ = 0;
  clear_has_ins_latitude();
}
double Chassis::ins_latitude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_latitude)
  return ins_latitude_;
}
void Chassis::set_ins_latitude(double value) {
  set_has_ins_latitude();
  ins_latitude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_latitude)
}

// optional double ins_longitude = 68;
bool Chassis::has_ins_longitude() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void Chassis::set_has_ins_longitude() {
  _has_bits_[1] |= 0x02000000u;
}
void Chassis::clear_has_ins_longitude() {
  _has_bits_[1] &= ~0x02000000u;
}
void Chassis::clear_ins_longitude() {
  ins_longitude_ = 0;
  clear_has_ins_longitude();
}
double Chassis::ins_longitude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_longitude)
  return ins_longitude_;
}
void Chassis::set_ins_longitude(double value) {
  set_has_ins_longitude();
  ins_longitude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_longitude)
}

// optional double ins_northspd = 69;
bool Chassis::has_ins_northspd() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
void Chassis::set_has_ins_northspd() {
  _has_bits_[1] |= 0x04000000u;
}
void Chassis::clear_has_ins_northspd() {
  _has_bits_[1] &= ~0x04000000u;
}
void Chassis::clear_ins_northspd() {
  ins_northspd_ = 0;
  clear_has_ins_northspd();
}
double Chassis::ins_northspd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_northspd)
  return ins_northspd_;
}
void Chassis::set_ins_northspd(double value) {
  set_has_ins_northspd();
  ins_northspd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_northspd)
}

// optional double ins_eastspd = 70;
bool Chassis::has_ins_eastspd() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
void Chassis::set_has_ins_eastspd() {
  _has_bits_[1] |= 0x08000000u;
}
void Chassis::clear_has_ins_eastspd() {
  _has_bits_[1] &= ~0x08000000u;
}
void Chassis::clear_ins_eastspd() {
  ins_eastspd_ = 0;
  clear_has_ins_eastspd();
}
double Chassis::ins_eastspd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_eastspd)
  return ins_eastspd_;
}
void Chassis::set_ins_eastspd(double value) {
  set_has_ins_eastspd();
  ins_eastspd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_eastspd)
}

// optional double ins_togroundspd = 71;
bool Chassis::has_ins_togroundspd() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
void Chassis::set_has_ins_togroundspd() {
  _has_bits_[1] |= 0x10000000u;
}
void Chassis::clear_has_ins_togroundspd() {
  _has_bits_[1] &= ~0x10000000u;
}
void Chassis::clear_ins_togroundspd() {
  ins_togroundspd_ = 0;
  clear_has_ins_togroundspd();
}
double Chassis::ins_togroundspd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_togroundspd)
  return ins_togroundspd_;
}
void Chassis::set_ins_togroundspd(double value) {
  set_has_ins_togroundspd();
  ins_togroundspd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_togroundspd)
}

// optional int32 ins_gpsflag_pos = 72;
bool Chassis::has_ins_gpsflag_pos() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void Chassis::set_has_ins_gpsflag_pos() {
  _has_bits_[1] |= 0x00040000u;
}
void Chassis::clear_has_ins_gpsflag_pos() {
  _has_bits_[1] &= ~0x00040000u;
}
void Chassis::clear_ins_gpsflag_pos() {
  ins_gpsflag_pos_ = 0;
  clear_has_ins_gpsflag_pos();
}
::google::protobuf::int32 Chassis::ins_gpsflag_pos() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_gpsflag_pos)
  return ins_gpsflag_pos_;
}
void Chassis::set_ins_gpsflag_pos(::google::protobuf::int32 value) {
  set_has_ins_gpsflag_pos();
  ins_gpsflag_pos_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_gpsflag_pos)
}

// optional int32 ins_numsv = 73;
bool Chassis::has_ins_numsv() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
void Chassis::set_has_ins_numsv() {
  _has_bits_[1] |= 0x20000000u;
}
void Chassis::clear_has_ins_numsv() {
  _has_bits_[1] &= ~0x20000000u;
}
void Chassis::clear_ins_numsv() {
  ins_numsv_ = 0;
  clear_has_ins_numsv();
}
::google::protobuf::int32 Chassis::ins_numsv() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_numsv)
  return ins_numsv_;
}
void Chassis::set_ins_numsv(::google::protobuf::int32 value) {
  set_has_ins_numsv();
  ins_numsv_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_numsv)
}

// optional int32 ins_gpsflag_heading = 74;
bool Chassis::has_ins_gpsflag_heading() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
void Chassis::set_has_ins_gpsflag_heading() {
  _has_bits_[1] |= 0x40000000u;
}
void Chassis::clear_has_ins_gpsflag_heading() {
  _has_bits_[1] &= ~0x40000000u;
}
void Chassis::clear_ins_gpsflag_heading() {
  ins_gpsflag_heading_ = 0;
  clear_has_ins_gpsflag_heading();
}
::google::protobuf::int32 Chassis::ins_gpsflag_heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_gpsflag_heading)
  return ins_gpsflag_heading_;
}
void Chassis::set_ins_gpsflag_heading(::google::protobuf::int32 value) {
  set_has_ins_gpsflag_heading();
  ins_gpsflag_heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_gpsflag_heading)
}

// optional int32 ins_gps_age = 75;
bool Chassis::has_ins_gps_age() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
void Chassis::set_has_ins_gps_age() {
  _has_bits_[1] |= 0x80000000u;
}
void Chassis::clear_has_ins_gps_age() {
  _has_bits_[1] &= ~0x80000000u;
}
void Chassis::clear_ins_gps_age() {
  ins_gps_age_ = 0;
  clear_has_ins_gps_age();
}
::google::protobuf::int32 Chassis::ins_gps_age() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_gps_age)
  return ins_gps_age_;
}
void Chassis::set_ins_gps_age(::google::protobuf::int32 value) {
  set_has_ins_gps_age();
  ins_gps_age_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_gps_age)
}

// optional int32 ins_car_status = 76;
bool Chassis::has_ins_car_status() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
void Chassis::set_has_ins_car_status() {
  _has_bits_[2] |= 0x00000001u;
}
void Chassis::clear_has_ins_car_status() {
  _has_bits_[2] &= ~0x00000001u;
}
void Chassis::clear_ins_car_status() {
  ins_car_status_ = 0;
  clear_has_ins_car_status();
}
::google::protobuf::int32 Chassis::ins_car_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_car_status)
  return ins_car_status_;
}
void Chassis::set_ins_car_status(::google::protobuf::int32 value) {
  set_has_ins_car_status();
  ins_car_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_car_status)
}

// optional int32 ins_status = 77;
bool Chassis::has_ins_status() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
void Chassis::set_has_ins_status() {
  _has_bits_[2] |= 0x00000008u;
}
void Chassis::clear_has_ins_status() {
  _has_bits_[2] &= ~0x00000008u;
}
void Chassis::clear_ins_status() {
  ins_status_ = 0;
  clear_has_ins_status();
}
::google::protobuf::int32 Chassis::ins_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_status)
  return ins_status_;
}
void Chassis::set_ins_status(::google::protobuf::int32 value) {
  set_has_ins_status();
  ins_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_status)
}

// optional double ins_std_lat = 78;
bool Chassis::has_ins_std_lat() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
void Chassis::set_has_ins_std_lat() {
  _has_bits_[2] |= 0x00000002u;
}
void Chassis::clear_has_ins_std_lat() {
  _has_bits_[2] &= ~0x00000002u;
}
void Chassis::clear_ins_std_lat() {
  ins_std_lat_ = 0;
  clear_has_ins_std_lat();
}
double Chassis::ins_std_lat() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_std_lat)
  return ins_std_lat_;
}
void Chassis::set_ins_std_lat(double value) {
  set_has_ins_std_lat();
  ins_std_lat_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_std_lat)
}

// optional double ins_std_lon = 79;
bool Chassis::has_ins_std_lon() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
void Chassis::set_has_ins_std_lon() {
  _has_bits_[2] |= 0x00000004u;
}
void Chassis::clear_has_ins_std_lon() {
  _has_bits_[2] &= ~0x00000004u;
}
void Chassis::clear_ins_std_lon() {
  ins_std_lon_ = 0;
  clear_has_ins_std_lon();
}
double Chassis::ins_std_lon() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_std_lon)
  return ins_std_lon_;
}
void Chassis::set_ins_std_lon(double value) {
  set_has_ins_std_lon();
  ins_std_lon_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_std_lon)
}

// optional double ins_std_locat_height = 80;
bool Chassis::has_ins_std_locat_height() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
void Chassis::set_has_ins_std_locat_height() {
  _has_bits_[2] |= 0x00000020u;
}
void Chassis::clear_has_ins_std_locat_height() {
  _has_bits_[2] &= ~0x00000020u;
}
void Chassis::clear_ins_std_locat_height() {
  ins_std_locat_height_ = 0;
  clear_has_ins_std_locat_height();
}
double Chassis::ins_std_locat_height() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_std_locat_height)
  return ins_std_locat_height_;
}
void Chassis::set_ins_std_locat_height(double value) {
  set_has_ins_std_locat_height();
  ins_std_locat_height_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_std_locat_height)
}

// optional double ins_std_heading = 81;
bool Chassis::has_ins_std_heading() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
void Chassis::set_has_ins_std_heading() {
  _has_bits_[2] |= 0x00000040u;
}
void Chassis::clear_has_ins_std_heading() {
  _has_bits_[2] &= ~0x00000040u;
}
void Chassis::clear_ins_std_heading() {
  ins_std_heading_ = 0;
  clear_has_ins_std_heading();
}
double Chassis::ins_std_heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.ins_std_heading)
  return ins_std_heading_;
}
void Chassis::set_ins_std_heading(double value) {
  set_has_ins_std_heading();
  ins_std_heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.ins_std_heading)
}

// optional int32 eps_lkacontrolstatus = 82;
bool Chassis::has_eps_lkacontrolstatus() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
void Chassis::set_has_eps_lkacontrolstatus() {
  _has_bits_[2] |= 0x00000010u;
}
void Chassis::clear_has_eps_lkacontrolstatus() {
  _has_bits_[2] &= ~0x00000010u;
}
void Chassis::clear_eps_lkacontrolstatus() {
  eps_lkacontrolstatus_ = 0;
  clear_has_eps_lkacontrolstatus();
}
::google::protobuf::int32 Chassis::eps_lkacontrolstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.eps_lkacontrolstatus)
  return eps_lkacontrolstatus_;
}
void Chassis::set_eps_lkacontrolstatus(::google::protobuf::int32 value) {
  set_has_eps_lkacontrolstatus();
  eps_lkacontrolstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.eps_lkacontrolstatus)
}

// optional int32 esp_vlc_active = 83;
bool Chassis::has_esp_vlc_active() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
void Chassis::set_has_esp_vlc_active() {
  _has_bits_[2] |= 0x00000080u;
}
void Chassis::clear_has_esp_vlc_active() {
  _has_bits_[2] &= ~0x00000080u;
}
void Chassis::clear_esp_vlc_active() {
  esp_vlc_active_ = 0;
  clear_has_esp_vlc_active();
}
::google::protobuf::int32 Chassis::esp_vlc_active() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_vlc_active)
  return esp_vlc_active_;
}
void Chassis::set_esp_vlc_active(::google::protobuf::int32 value) {
  set_has_esp_vlc_active();
  esp_vlc_active_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_vlc_active)
}

// optional int32 esp_vlc_available = 84;
bool Chassis::has_esp_vlc_available() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
void Chassis::set_has_esp_vlc_available() {
  _has_bits_[2] |= 0x00000100u;
}
void Chassis::clear_has_esp_vlc_available() {
  _has_bits_[2] &= ~0x00000100u;
}
void Chassis::clear_esp_vlc_available() {
  esp_vlc_available_ = 0;
  clear_has_esp_vlc_available();
}
::google::protobuf::int32 Chassis::esp_vlc_available() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_vlc_available)
  return esp_vlc_available_;
}
void Chassis::set_esp_vlc_available(::google::protobuf::int32 value) {
  set_has_esp_vlc_available();
  esp_vlc_available_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_vlc_available)
}

// optional int32 esp_apa_gearboxenable = 85;
bool Chassis::has_esp_apa_gearboxenable() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
void Chassis::set_has_esp_apa_gearboxenable() {
  _has_bits_[2] |= 0x00000200u;
}
void Chassis::clear_has_esp_apa_gearboxenable() {
  _has_bits_[2] &= ~0x00000200u;
}
void Chassis::clear_esp_apa_gearboxenable() {
  esp_apa_gearboxenable_ = 0;
  clear_has_esp_apa_gearboxenable();
}
::google::protobuf::int32 Chassis::esp_apa_gearboxenable() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_apa_gearboxenable)
  return esp_apa_gearboxenable_;
}
void Chassis::set_esp_apa_gearboxenable(::google::protobuf::int32 value) {
  set_has_esp_apa_gearboxenable();
  esp_apa_gearboxenable_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_apa_gearboxenable)
}

// optional int32 esp_vlc_apactive = 86;
bool Chassis::has_esp_vlc_apactive() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
void Chassis::set_has_esp_vlc_apactive() {
  _has_bits_[2] |= 0x00000400u;
}
void Chassis::clear_has_esp_vlc_apactive() {
  _has_bits_[2] &= ~0x00000400u;
}
void Chassis::clear_esp_vlc_apactive() {
  esp_vlc_apactive_ = 0;
  clear_has_esp_vlc_apactive();
}
::google::protobuf::int32 Chassis::esp_vlc_apactive() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_vlc_apactive)
  return esp_vlc_apactive_;
}
void Chassis::set_esp_vlc_apactive(::google::protobuf::int32 value) {
  set_has_esp_vlc_apactive();
  esp_vlc_apactive_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_vlc_apactive)
}

// optional int32 esp_vlcapa_available = 87;
bool Chassis::has_esp_vlcapa_available() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
void Chassis::set_has_esp_vlcapa_available() {
  _has_bits_[2] |= 0x00000800u;
}
void Chassis::clear_has_esp_vlcapa_available() {
  _has_bits_[2] &= ~0x00000800u;
}
void Chassis::clear_esp_vlcapa_available() {
  esp_vlcapa_available_ = 0;
  clear_has_esp_vlcapa_available();
}
::google::protobuf::int32 Chassis::esp_vlcapa_available() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_vlcapa_available)
  return esp_vlcapa_available_;
}
void Chassis::set_esp_vlcapa_available(::google::protobuf::int32 value) {
  set_has_esp_vlcapa_available();
  esp_vlcapa_available_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_vlcapa_available)
}

// optional int32 esp_epbstatus = 88;
bool Chassis::has_esp_epbstatus() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
void Chassis::set_has_esp_epbstatus() {
  _has_bits_[2] |= 0x00001000u;
}
void Chassis::clear_has_esp_epbstatus() {
  _has_bits_[2] &= ~0x00001000u;
}
void Chassis::clear_esp_epbstatus() {
  esp_epbstatus_ = 0;
  clear_has_esp_epbstatus();
}
::google::protobuf::int32 Chassis::esp_epbstatus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Chassis.esp_epbstatus)
  return esp_epbstatus_;
}
void Chassis::set_esp_epbstatus(::google::protobuf::int32 value) {
  set_has_esp_epbstatus();
  esp_epbstatus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Chassis.esp_epbstatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChassisGPS::kLatitudeFieldNumber;
const int ChassisGPS::kLongitudeFieldNumber;
const int ChassisGPS::kGpsValidFieldNumber;
const int ChassisGPS::kYearFieldNumber;
const int ChassisGPS::kMonthFieldNumber;
const int ChassisGPS::kDayFieldNumber;
const int ChassisGPS::kHoursFieldNumber;
const int ChassisGPS::kMinutesFieldNumber;
const int ChassisGPS::kSecondsFieldNumber;
const int ChassisGPS::kCompassDirectionFieldNumber;
const int ChassisGPS::kPdopFieldNumber;
const int ChassisGPS::kIsGpsFaultFieldNumber;
const int ChassisGPS::kIsInferredFieldNumber;
const int ChassisGPS::kAltitudeFieldNumber;
const int ChassisGPS::kHeadingFieldNumber;
const int ChassisGPS::kHdopFieldNumber;
const int ChassisGPS::kVdopFieldNumber;
const int ChassisGPS::kQualityFieldNumber;
const int ChassisGPS::kNumSatellitesFieldNumber;
const int ChassisGPS::kGpsSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChassisGPS::ChassisGPS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.ChassisGPS)
}
ChassisGPS::ChassisGPS(const ChassisGPS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    reinterpret_cast<char*>(&num_satellites_) -
    reinterpret_cast<char*>(&latitude_) + sizeof(num_satellites_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.ChassisGPS)
}

void ChassisGPS::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&latitude_, 0, reinterpret_cast<char*>(&num_satellites_) -
    reinterpret_cast<char*>(&latitude_) + sizeof(num_satellites_));
}

ChassisGPS::~ChassisGPS() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.ChassisGPS)
  SharedDtor();
}

void ChassisGPS::SharedDtor() {
}

void ChassisGPS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChassisGPS::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChassisGPS& ChassisGPS::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChassisGPS* ChassisGPS::New(::google::protobuf::Arena* arena) const {
  ChassisGPS* n = new ChassisGPS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChassisGPS::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.ChassisGPS)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&latitude_, 0, reinterpret_cast<char*>(&seconds_) -
      reinterpret_cast<char*>(&latitude_) + sizeof(seconds_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&compass_direction_, 0, reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&compass_direction_) + sizeof(heading_));
  }
  if (_has_bits_[16 / 32] & 983040u) {
    ::memset(&hdop_, 0, reinterpret_cast<char*>(&num_satellites_) -
      reinterpret_cast<char*>(&hdop_) + sizeof(num_satellites_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChassisGPS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.ChassisGPS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gps_valid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_gps_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gps_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 year = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 month = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 day = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hours = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_hours();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minutes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_minutes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seconds = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double compass_direction = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_compass_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &compass_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pdop = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_pdop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_gps_fault = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_is_gps_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gps_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_inferred = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_is_inferred();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inferred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double altitude = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_altitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double hdop = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_hdop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vdop = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_vdop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.GpsQuality quality = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::GpsQuality_IsValid(value)) {
            set_quality(static_cast< ::jmc_auto::canbus::GpsQuality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_satellites = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_num_satellites();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_satellites_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gps_speed = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u)) {
          set_has_gps_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gps_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.ChassisGPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.ChassisGPS)
  return false;
#undef DO_
}

void ChassisGPS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.ChassisGPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // optional double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // optional bool gps_valid = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->gps_valid(), output);
  }

  // optional int32 year = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->year(), output);
  }

  // optional int32 month = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->month(), output);
  }

  // optional int32 day = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->day(), output);
  }

  // optional int32 hours = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hours(), output);
  }

  // optional int32 minutes = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->minutes(), output);
  }

  // optional int32 seconds = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->seconds(), output);
  }

  // optional double compass_direction = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->compass_direction(), output);
  }

  // optional double pdop = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->pdop(), output);
  }

  // optional bool is_gps_fault = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_gps_fault(), output);
  }

  // optional bool is_inferred = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_inferred(), output);
  }

  // optional double altitude = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->altitude(), output);
  }

  // optional double heading = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->heading(), output);
  }

  // optional double hdop = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->hdop(), output);
  }

  // optional double vdop = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->vdop(), output);
  }

  // optional .jmc_auto.canbus.GpsQuality quality = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->quality(), output);
  }

  // optional int32 num_satellites = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->num_satellites(), output);
  }

  // optional double gps_speed = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->gps_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.ChassisGPS)
}

::google::protobuf::uint8* ChassisGPS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.ChassisGPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // optional double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // optional bool gps_valid = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->gps_valid(), target);
  }

  // optional int32 year = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->year(), target);
  }

  // optional int32 month = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->month(), target);
  }

  // optional int32 day = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->day(), target);
  }

  // optional int32 hours = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hours(), target);
  }

  // optional int32 minutes = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->minutes(), target);
  }

  // optional int32 seconds = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->seconds(), target);
  }

  // optional double compass_direction = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->compass_direction(), target);
  }

  // optional double pdop = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->pdop(), target);
  }

  // optional bool is_gps_fault = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_gps_fault(), target);
  }

  // optional bool is_inferred = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_inferred(), target);
  }

  // optional double altitude = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->altitude(), target);
  }

  // optional double heading = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->heading(), target);
  }

  // optional double hdop = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->hdop(), target);
  }

  // optional double vdop = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->vdop(), target);
  }

  // optional .jmc_auto.canbus.GpsQuality quality = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->quality(), target);
  }

  // optional int32 num_satellites = 19;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->num_satellites(), target);
  }

  // optional double gps_speed = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->gps_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.ChassisGPS)
  return target;
}

size_t ChassisGPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.ChassisGPS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional int32 year = 4;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // optional int32 month = 5;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

    // optional int32 day = 6;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 hours = 7;
    if (has_hours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hours());
    }

    // optional int32 minutes = 8;
    if (has_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minutes());
    }

    // optional int32 seconds = 9;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double compass_direction = 10;
    if (has_compass_direction()) {
      total_size += 1 + 8;
    }

    // optional double pdop = 11;
    if (has_pdop()) {
      total_size += 1 + 8;
    }

    // optional bool gps_valid = 3;
    if (has_gps_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_gps_fault = 12;
    if (has_is_gps_fault()) {
      total_size += 1 + 1;
    }

    // optional bool is_inferred = 13;
    if (has_is_inferred()) {
      total_size += 1 + 1;
    }

    // optional .jmc_auto.canbus.GpsQuality quality = 18;
    if (has_quality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

    // optional double altitude = 14;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

    // optional double heading = 15;
    if (has_heading()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional double hdop = 16;
    if (has_hdop()) {
      total_size += 2 + 8;
    }

    // optional double vdop = 17;
    if (has_vdop()) {
      total_size += 2 + 8;
    }

    // optional double gps_speed = 20;
    if (has_gps_speed()) {
      total_size += 2 + 8;
    }

    // optional int32 num_satellites = 19;
    if (has_num_satellites()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_satellites());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChassisGPS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.ChassisGPS)
  GOOGLE_DCHECK_NE(&from, this);
  const ChassisGPS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChassisGPS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.ChassisGPS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.ChassisGPS)
    MergeFrom(*source);
  }
}

void ChassisGPS::MergeFrom(const ChassisGPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.ChassisGPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000008u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000010u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000020u) {
      hours_ = from.hours_;
    }
    if (cached_has_bits & 0x00000040u) {
      minutes_ = from.minutes_;
    }
    if (cached_has_bits & 0x00000080u) {
      seconds_ = from.seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      compass_direction_ = from.compass_direction_;
    }
    if (cached_has_bits & 0x00000200u) {
      pdop_ = from.pdop_;
    }
    if (cached_has_bits & 0x00000400u) {
      gps_valid_ = from.gps_valid_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_gps_fault_ = from.is_gps_fault_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_inferred_ = from.is_inferred_;
    }
    if (cached_has_bits & 0x00002000u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00004000u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00008000u) {
      heading_ = from.heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      hdop_ = from.hdop_;
    }
    if (cached_has_bits & 0x00020000u) {
      vdop_ = from.vdop_;
    }
    if (cached_has_bits & 0x00040000u) {
      gps_speed_ = from.gps_speed_;
    }
    if (cached_has_bits & 0x00080000u) {
      num_satellites_ = from.num_satellites_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChassisGPS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.ChassisGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisGPS::CopyFrom(const ChassisGPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.ChassisGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisGPS::IsInitialized() const {
  return true;
}

void ChassisGPS::Swap(ChassisGPS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChassisGPS::InternalSwap(ChassisGPS* other) {
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(year_, other->year_);
  std::swap(month_, other->month_);
  std::swap(day_, other->day_);
  std::swap(hours_, other->hours_);
  std::swap(minutes_, other->minutes_);
  std::swap(seconds_, other->seconds_);
  std::swap(compass_direction_, other->compass_direction_);
  std::swap(pdop_, other->pdop_);
  std::swap(gps_valid_, other->gps_valid_);
  std::swap(is_gps_fault_, other->is_gps_fault_);
  std::swap(is_inferred_, other->is_inferred_);
  std::swap(quality_, other->quality_);
  std::swap(altitude_, other->altitude_);
  std::swap(heading_, other->heading_);
  std::swap(hdop_, other->hdop_);
  std::swap(vdop_, other->vdop_);
  std::swap(gps_speed_, other->gps_speed_);
  std::swap(num_satellites_, other->num_satellites_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChassisGPS::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChassisGPS

// optional double latitude = 1;
bool ChassisGPS::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChassisGPS::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
void ChassisGPS::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChassisGPS::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double ChassisGPS::latitude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.latitude)
  return latitude_;
}
void ChassisGPS::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.latitude)
}

// optional double longitude = 2;
bool ChassisGPS::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChassisGPS::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
void ChassisGPS::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChassisGPS::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double ChassisGPS::longitude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.longitude)
  return longitude_;
}
void ChassisGPS::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.longitude)
}

// optional bool gps_valid = 3;
bool ChassisGPS::has_gps_valid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ChassisGPS::set_has_gps_valid() {
  _has_bits_[0] |= 0x00000400u;
}
void ChassisGPS::clear_has_gps_valid() {
  _has_bits_[0] &= ~0x00000400u;
}
void ChassisGPS::clear_gps_valid() {
  gps_valid_ = false;
  clear_has_gps_valid();
}
bool ChassisGPS::gps_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.gps_valid)
  return gps_valid_;
}
void ChassisGPS::set_gps_valid(bool value) {
  set_has_gps_valid();
  gps_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.gps_valid)
}

// optional int32 year = 4;
bool ChassisGPS::has_year() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChassisGPS::set_has_year() {
  _has_bits_[0] |= 0x00000004u;
}
void ChassisGPS::clear_has_year() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChassisGPS::clear_year() {
  year_ = 0;
  clear_has_year();
}
::google::protobuf::int32 ChassisGPS::year() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.year)
  return year_;
}
void ChassisGPS::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.year)
}

// optional int32 month = 5;
bool ChassisGPS::has_month() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChassisGPS::set_has_month() {
  _has_bits_[0] |= 0x00000008u;
}
void ChassisGPS::clear_has_month() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChassisGPS::clear_month() {
  month_ = 0;
  clear_has_month();
}
::google::protobuf::int32 ChassisGPS::month() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.month)
  return month_;
}
void ChassisGPS::set_month(::google::protobuf::int32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.month)
}

// optional int32 day = 6;
bool ChassisGPS::has_day() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChassisGPS::set_has_day() {
  _has_bits_[0] |= 0x00000010u;
}
void ChassisGPS::clear_has_day() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChassisGPS::clear_day() {
  day_ = 0;
  clear_has_day();
}
::google::protobuf::int32 ChassisGPS::day() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.day)
  return day_;
}
void ChassisGPS::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.day)
}

// optional int32 hours = 7;
bool ChassisGPS::has_hours() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChassisGPS::set_has_hours() {
  _has_bits_[0] |= 0x00000020u;
}
void ChassisGPS::clear_has_hours() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChassisGPS::clear_hours() {
  hours_ = 0;
  clear_has_hours();
}
::google::protobuf::int32 ChassisGPS::hours() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.hours)
  return hours_;
}
void ChassisGPS::set_hours(::google::protobuf::int32 value) {
  set_has_hours();
  hours_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.hours)
}

// optional int32 minutes = 8;
bool ChassisGPS::has_minutes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChassisGPS::set_has_minutes() {
  _has_bits_[0] |= 0x00000040u;
}
void ChassisGPS::clear_has_minutes() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChassisGPS::clear_minutes() {
  minutes_ = 0;
  clear_has_minutes();
}
::google::protobuf::int32 ChassisGPS::minutes() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.minutes)
  return minutes_;
}
void ChassisGPS::set_minutes(::google::protobuf::int32 value) {
  set_has_minutes();
  minutes_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.minutes)
}

// optional int32 seconds = 9;
bool ChassisGPS::has_seconds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ChassisGPS::set_has_seconds() {
  _has_bits_[0] |= 0x00000080u;
}
void ChassisGPS::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000080u;
}
void ChassisGPS::clear_seconds() {
  seconds_ = 0;
  clear_has_seconds();
}
::google::protobuf::int32 ChassisGPS::seconds() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.seconds)
  return seconds_;
}
void ChassisGPS::set_seconds(::google::protobuf::int32 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.seconds)
}

// optional double compass_direction = 10;
bool ChassisGPS::has_compass_direction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ChassisGPS::set_has_compass_direction() {
  _has_bits_[0] |= 0x00000100u;
}
void ChassisGPS::clear_has_compass_direction() {
  _has_bits_[0] &= ~0x00000100u;
}
void ChassisGPS::clear_compass_direction() {
  compass_direction_ = 0;
  clear_has_compass_direction();
}
double ChassisGPS::compass_direction() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.compass_direction)
  return compass_direction_;
}
void ChassisGPS::set_compass_direction(double value) {
  set_has_compass_direction();
  compass_direction_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.compass_direction)
}

// optional double pdop = 11;
bool ChassisGPS::has_pdop() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ChassisGPS::set_has_pdop() {
  _has_bits_[0] |= 0x00000200u;
}
void ChassisGPS::clear_has_pdop() {
  _has_bits_[0] &= ~0x00000200u;
}
void ChassisGPS::clear_pdop() {
  pdop_ = 0;
  clear_has_pdop();
}
double ChassisGPS::pdop() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.pdop)
  return pdop_;
}
void ChassisGPS::set_pdop(double value) {
  set_has_pdop();
  pdop_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.pdop)
}

// optional bool is_gps_fault = 12;
bool ChassisGPS::has_is_gps_fault() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ChassisGPS::set_has_is_gps_fault() {
  _has_bits_[0] |= 0x00000800u;
}
void ChassisGPS::clear_has_is_gps_fault() {
  _has_bits_[0] &= ~0x00000800u;
}
void ChassisGPS::clear_is_gps_fault() {
  is_gps_fault_ = false;
  clear_has_is_gps_fault();
}
bool ChassisGPS::is_gps_fault() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.is_gps_fault)
  return is_gps_fault_;
}
void ChassisGPS::set_is_gps_fault(bool value) {
  set_has_is_gps_fault();
  is_gps_fault_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.is_gps_fault)
}

// optional bool is_inferred = 13;
bool ChassisGPS::has_is_inferred() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ChassisGPS::set_has_is_inferred() {
  _has_bits_[0] |= 0x00001000u;
}
void ChassisGPS::clear_has_is_inferred() {
  _has_bits_[0] &= ~0x00001000u;
}
void ChassisGPS::clear_is_inferred() {
  is_inferred_ = false;
  clear_has_is_inferred();
}
bool ChassisGPS::is_inferred() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.is_inferred)
  return is_inferred_;
}
void ChassisGPS::set_is_inferred(bool value) {
  set_has_is_inferred();
  is_inferred_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.is_inferred)
}

// optional double altitude = 14;
bool ChassisGPS::has_altitude() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ChassisGPS::set_has_altitude() {
  _has_bits_[0] |= 0x00004000u;
}
void ChassisGPS::clear_has_altitude() {
  _has_bits_[0] &= ~0x00004000u;
}
void ChassisGPS::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
double ChassisGPS::altitude() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.altitude)
  return altitude_;
}
void ChassisGPS::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.altitude)
}

// optional double heading = 15;
bool ChassisGPS::has_heading() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ChassisGPS::set_has_heading() {
  _has_bits_[0] |= 0x00008000u;
}
void ChassisGPS::clear_has_heading() {
  _has_bits_[0] &= ~0x00008000u;
}
void ChassisGPS::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
double ChassisGPS::heading() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.heading)
  return heading_;
}
void ChassisGPS::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.heading)
}

// optional double hdop = 16;
bool ChassisGPS::has_hdop() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ChassisGPS::set_has_hdop() {
  _has_bits_[0] |= 0x00010000u;
}
void ChassisGPS::clear_has_hdop() {
  _has_bits_[0] &= ~0x00010000u;
}
void ChassisGPS::clear_hdop() {
  hdop_ = 0;
  clear_has_hdop();
}
double ChassisGPS::hdop() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.hdop)
  return hdop_;
}
void ChassisGPS::set_hdop(double value) {
  set_has_hdop();
  hdop_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.hdop)
}

// optional double vdop = 17;
bool ChassisGPS::has_vdop() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ChassisGPS::set_has_vdop() {
  _has_bits_[0] |= 0x00020000u;
}
void ChassisGPS::clear_has_vdop() {
  _has_bits_[0] &= ~0x00020000u;
}
void ChassisGPS::clear_vdop() {
  vdop_ = 0;
  clear_has_vdop();
}
double ChassisGPS::vdop() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.vdop)
  return vdop_;
}
void ChassisGPS::set_vdop(double value) {
  set_has_vdop();
  vdop_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.vdop)
}

// optional .jmc_auto.canbus.GpsQuality quality = 18;
bool ChassisGPS::has_quality() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ChassisGPS::set_has_quality() {
  _has_bits_[0] |= 0x00002000u;
}
void ChassisGPS::clear_has_quality() {
  _has_bits_[0] &= ~0x00002000u;
}
void ChassisGPS::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
::jmc_auto::canbus::GpsQuality ChassisGPS::quality() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.quality)
  return static_cast< ::jmc_auto::canbus::GpsQuality >(quality_);
}
void ChassisGPS::set_quality(::jmc_auto::canbus::GpsQuality value) {
  assert(::jmc_auto::canbus::GpsQuality_IsValid(value));
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.quality)
}

// optional int32 num_satellites = 19;
bool ChassisGPS::has_num_satellites() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ChassisGPS::set_has_num_satellites() {
  _has_bits_[0] |= 0x00080000u;
}
void ChassisGPS::clear_has_num_satellites() {
  _has_bits_[0] &= ~0x00080000u;
}
void ChassisGPS::clear_num_satellites() {
  num_satellites_ = 0;
  clear_has_num_satellites();
}
::google::protobuf::int32 ChassisGPS::num_satellites() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.num_satellites)
  return num_satellites_;
}
void ChassisGPS::set_num_satellites(::google::protobuf::int32 value) {
  set_has_num_satellites();
  num_satellites_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.num_satellites)
}

// optional double gps_speed = 20;
bool ChassisGPS::has_gps_speed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ChassisGPS::set_has_gps_speed() {
  _has_bits_[0] |= 0x00040000u;
}
void ChassisGPS::clear_has_gps_speed() {
  _has_bits_[0] &= ~0x00040000u;
}
void ChassisGPS::clear_gps_speed() {
  gps_speed_ = 0;
  clear_has_gps_speed();
}
double ChassisGPS::gps_speed() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.ChassisGPS.gps_speed)
  return gps_speed_;
}
void ChassisGPS::set_gps_speed(double value) {
  set_has_gps_speed();
  gps_speed_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.ChassisGPS.gps_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WheelSpeed::kIsWheelSpdRrValidFieldNumber;
const int WheelSpeed::kWheelDirectionRrFieldNumber;
const int WheelSpeed::kWheelSpdRrFieldNumber;
const int WheelSpeed::kIsWheelSpdRlValidFieldNumber;
const int WheelSpeed::kWheelDirectionRlFieldNumber;
const int WheelSpeed::kWheelSpdRlFieldNumber;
const int WheelSpeed::kIsWheelSpdFrValidFieldNumber;
const int WheelSpeed::kWheelDirectionFrFieldNumber;
const int WheelSpeed::kWheelSpdFrFieldNumber;
const int WheelSpeed::kIsWheelSpdFlValidFieldNumber;
const int WheelSpeed::kWheelDirectionFlFieldNumber;
const int WheelSpeed::kWheelSpdFlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WheelSpeed::WheelSpeed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.WheelSpeed)
}
WheelSpeed::WheelSpeed(const WheelSpeed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wheel_spd_rr_, &from.wheel_spd_rr_,
    reinterpret_cast<char*>(&wheel_direction_fl_) -
    reinterpret_cast<char*>(&wheel_spd_rr_) + sizeof(wheel_direction_fl_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.WheelSpeed)
}

void WheelSpeed::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&wheel_spd_rr_, 0, reinterpret_cast<char*>(&is_wheel_spd_fl_valid_) -
    reinterpret_cast<char*>(&wheel_spd_rr_) + sizeof(is_wheel_spd_fl_valid_));
  wheel_direction_rr_ = 3;
  wheel_direction_rl_ = 3;
  wheel_direction_fr_ = 3;
  wheel_direction_fl_ = 3;
}

WheelSpeed::~WheelSpeed() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.WheelSpeed)
  SharedDtor();
}

void WheelSpeed::SharedDtor() {
}

void WheelSpeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WheelSpeed::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WheelSpeed& WheelSpeed::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  return *internal_default_instance();
}

WheelSpeed* WheelSpeed::New(::google::protobuf::Arena* arena) const {
  WheelSpeed* n = new WheelSpeed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WheelSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.WheelSpeed)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&wheel_spd_rr_, 0, reinterpret_cast<char*>(&is_wheel_spd_fl_valid_) -
      reinterpret_cast<char*>(&wheel_spd_rr_) + sizeof(is_wheel_spd_fl_valid_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    wheel_direction_rr_ = 3;
    wheel_direction_rl_ = 3;
    wheel_direction_fr_ = 3;
    wheel_direction_fl_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WheelSpeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.WheelSpeed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_wheel_spd_rr_valid = 1 [default = false];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_wheel_spd_rr_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_rr_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::WheelSpeed_WheelSpeedType_IsValid(value)) {
            set_wheel_direction_rr(static_cast< ::jmc_auto::canbus::WheelSpeed_WheelSpeedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_spd_rr = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_wheel_spd_rr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_rr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wheel_spd_rl_valid = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_wheel_spd_rl_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_rl_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::WheelSpeed_WheelSpeedType_IsValid(value)) {
            set_wheel_direction_rl(static_cast< ::jmc_auto::canbus::WheelSpeed_WheelSpeedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_spd_rl = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_wheel_spd_rl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_rl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wheel_spd_fr_valid = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_wheel_spd_fr_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_fr_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::WheelSpeed_WheelSpeedType_IsValid(value)) {
            set_wheel_direction_fr(static_cast< ::jmc_auto::canbus::WheelSpeed_WheelSpeedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_spd_fr = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_wheel_spd_fr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_fr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_wheel_spd_fl_valid = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_is_wheel_spd_fl_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_wheel_spd_fl_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::canbus::WheelSpeed_WheelSpeedType_IsValid(value)) {
            set_wheel_direction_fl(static_cast< ::jmc_auto::canbus::WheelSpeed_WheelSpeedType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wheel_spd_fl = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_wheel_spd_fl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_spd_fl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.WheelSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.WheelSpeed)
  return false;
#undef DO_
}

void WheelSpeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.WheelSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_wheel_spd_rr_valid = 1 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_wheel_spd_rr_valid(), output);
  }

  // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->wheel_direction_rr(), output);
  }

  // optional double wheel_spd_rr = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->wheel_spd_rr(), output);
  }

  // optional bool is_wheel_spd_rl_valid = 4 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_wheel_spd_rl_valid(), output);
  }

  // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->wheel_direction_rl(), output);
  }

  // optional double wheel_spd_rl = 6 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->wheel_spd_rl(), output);
  }

  // optional bool is_wheel_spd_fr_valid = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_wheel_spd_fr_valid(), output);
  }

  // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->wheel_direction_fr(), output);
  }

  // optional double wheel_spd_fr = 9 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->wheel_spd_fr(), output);
  }

  // optional bool is_wheel_spd_fl_valid = 10 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_wheel_spd_fl_valid(), output);
  }

  // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->wheel_direction_fl(), output);
  }

  // optional double wheel_spd_fl = 12 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->wheel_spd_fl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.WheelSpeed)
}

::google::protobuf::uint8* WheelSpeed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.WheelSpeed)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_wheel_spd_rr_valid = 1 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_wheel_spd_rr_valid(), target);
  }

  // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->wheel_direction_rr(), target);
  }

  // optional double wheel_spd_rr = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->wheel_spd_rr(), target);
  }

  // optional bool is_wheel_spd_rl_valid = 4 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_wheel_spd_rl_valid(), target);
  }

  // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->wheel_direction_rl(), target);
  }

  // optional double wheel_spd_rl = 6 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->wheel_spd_rl(), target);
  }

  // optional bool is_wheel_spd_fr_valid = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_wheel_spd_fr_valid(), target);
  }

  // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->wheel_direction_fr(), target);
  }

  // optional double wheel_spd_fr = 9 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->wheel_spd_fr(), target);
  }

  // optional bool is_wheel_spd_fl_valid = 10 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_wheel_spd_fl_valid(), target);
  }

  // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->wheel_direction_fl(), target);
  }

  // optional double wheel_spd_fl = 12 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->wheel_spd_fl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.WheelSpeed)
  return target;
}

size_t WheelSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.WheelSpeed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double wheel_spd_rr = 3 [default = 0];
    if (has_wheel_spd_rr()) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_rl = 6 [default = 0];
    if (has_wheel_spd_rl()) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_fr = 9 [default = 0];
    if (has_wheel_spd_fr()) {
      total_size += 1 + 8;
    }

    // optional double wheel_spd_fl = 12 [default = 0];
    if (has_wheel_spd_fl()) {
      total_size += 1 + 8;
    }

    // optional bool is_wheel_spd_rr_valid = 1 [default = false];
    if (has_is_wheel_spd_rr_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_rl_valid = 4 [default = false];
    if (has_is_wheel_spd_rl_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_fr_valid = 7 [default = false];
    if (has_is_wheel_spd_fr_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_wheel_spd_fl_valid = 10 [default = false];
    if (has_is_wheel_spd_fl_valid()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
    if (has_wheel_direction_rr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_rr());
    }

    // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
    if (has_wheel_direction_rl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_rl());
    }

    // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
    if (has_wheel_direction_fr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_fr());
    }

    // optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
    if (has_wheel_direction_fl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wheel_direction_fl());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WheelSpeed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.WheelSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  const WheelSpeed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WheelSpeed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.WheelSpeed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.WheelSpeed)
    MergeFrom(*source);
  }
}

void WheelSpeed::MergeFrom(const WheelSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.WheelSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      wheel_spd_rr_ = from.wheel_spd_rr_;
    }
    if (cached_has_bits & 0x00000002u) {
      wheel_spd_rl_ = from.wheel_spd_rl_;
    }
    if (cached_has_bits & 0x00000004u) {
      wheel_spd_fr_ = from.wheel_spd_fr_;
    }
    if (cached_has_bits & 0x00000008u) {
      wheel_spd_fl_ = from.wheel_spd_fl_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_wheel_spd_rr_valid_ = from.is_wheel_spd_rr_valid_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_wheel_spd_rl_valid_ = from.is_wheel_spd_rl_valid_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_wheel_spd_fr_valid_ = from.is_wheel_spd_fr_valid_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_wheel_spd_fl_valid_ = from.is_wheel_spd_fl_valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      wheel_direction_rr_ = from.wheel_direction_rr_;
    }
    if (cached_has_bits & 0x00000200u) {
      wheel_direction_rl_ = from.wheel_direction_rl_;
    }
    if (cached_has_bits & 0x00000400u) {
      wheel_direction_fr_ = from.wheel_direction_fr_;
    }
    if (cached_has_bits & 0x00000800u) {
      wheel_direction_fl_ = from.wheel_direction_fl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WheelSpeed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.WheelSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WheelSpeed::CopyFrom(const WheelSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.WheelSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WheelSpeed::IsInitialized() const {
  return true;
}

void WheelSpeed::Swap(WheelSpeed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WheelSpeed::InternalSwap(WheelSpeed* other) {
  std::swap(wheel_spd_rr_, other->wheel_spd_rr_);
  std::swap(wheel_spd_rl_, other->wheel_spd_rl_);
  std::swap(wheel_spd_fr_, other->wheel_spd_fr_);
  std::swap(wheel_spd_fl_, other->wheel_spd_fl_);
  std::swap(is_wheel_spd_rr_valid_, other->is_wheel_spd_rr_valid_);
  std::swap(is_wheel_spd_rl_valid_, other->is_wheel_spd_rl_valid_);
  std::swap(is_wheel_spd_fr_valid_, other->is_wheel_spd_fr_valid_);
  std::swap(is_wheel_spd_fl_valid_, other->is_wheel_spd_fl_valid_);
  std::swap(wheel_direction_rr_, other->wheel_direction_rr_);
  std::swap(wheel_direction_rl_, other->wheel_direction_rl_);
  std::swap(wheel_direction_fr_, other->wheel_direction_fr_);
  std::swap(wheel_direction_fl_, other->wheel_direction_fl_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WheelSpeed::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WheelSpeed

// optional bool is_wheel_spd_rr_valid = 1 [default = false];
bool WheelSpeed::has_is_wheel_spd_rr_valid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WheelSpeed::set_has_is_wheel_spd_rr_valid() {
  _has_bits_[0] |= 0x00000010u;
}
void WheelSpeed::clear_has_is_wheel_spd_rr_valid() {
  _has_bits_[0] &= ~0x00000010u;
}
void WheelSpeed::clear_is_wheel_spd_rr_valid() {
  is_wheel_spd_rr_valid_ = false;
  clear_has_is_wheel_spd_rr_valid();
}
bool WheelSpeed::is_wheel_spd_rr_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.is_wheel_spd_rr_valid)
  return is_wheel_spd_rr_valid_;
}
void WheelSpeed::set_is_wheel_spd_rr_valid(bool value) {
  set_has_is_wheel_spd_rr_valid();
  is_wheel_spd_rr_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.is_wheel_spd_rr_valid)
}

// optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_rr = 2 [default = INVALID];
bool WheelSpeed::has_wheel_direction_rr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void WheelSpeed::set_has_wheel_direction_rr() {
  _has_bits_[0] |= 0x00000100u;
}
void WheelSpeed::clear_has_wheel_direction_rr() {
  _has_bits_[0] &= ~0x00000100u;
}
void WheelSpeed::clear_wheel_direction_rr() {
  wheel_direction_rr_ = 3;
  clear_has_wheel_direction_rr();
}
::jmc_auto::canbus::WheelSpeed_WheelSpeedType WheelSpeed::wheel_direction_rr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.wheel_direction_rr)
  return static_cast< ::jmc_auto::canbus::WheelSpeed_WheelSpeedType >(wheel_direction_rr_);
}
void WheelSpeed::set_wheel_direction_rr(::jmc_auto::canbus::WheelSpeed_WheelSpeedType value) {
  assert(::jmc_auto::canbus::WheelSpeed_WheelSpeedType_IsValid(value));
  set_has_wheel_direction_rr();
  wheel_direction_rr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.wheel_direction_rr)
}

// optional double wheel_spd_rr = 3 [default = 0];
bool WheelSpeed::has_wheel_spd_rr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WheelSpeed::set_has_wheel_spd_rr() {
  _has_bits_[0] |= 0x00000001u;
}
void WheelSpeed::clear_has_wheel_spd_rr() {
  _has_bits_[0] &= ~0x00000001u;
}
void WheelSpeed::clear_wheel_spd_rr() {
  wheel_spd_rr_ = 0;
  clear_has_wheel_spd_rr();
}
double WheelSpeed::wheel_spd_rr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.wheel_spd_rr)
  return wheel_spd_rr_;
}
void WheelSpeed::set_wheel_spd_rr(double value) {
  set_has_wheel_spd_rr();
  wheel_spd_rr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.wheel_spd_rr)
}

// optional bool is_wheel_spd_rl_valid = 4 [default = false];
bool WheelSpeed::has_is_wheel_spd_rl_valid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void WheelSpeed::set_has_is_wheel_spd_rl_valid() {
  _has_bits_[0] |= 0x00000020u;
}
void WheelSpeed::clear_has_is_wheel_spd_rl_valid() {
  _has_bits_[0] &= ~0x00000020u;
}
void WheelSpeed::clear_is_wheel_spd_rl_valid() {
  is_wheel_spd_rl_valid_ = false;
  clear_has_is_wheel_spd_rl_valid();
}
bool WheelSpeed::is_wheel_spd_rl_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.is_wheel_spd_rl_valid)
  return is_wheel_spd_rl_valid_;
}
void WheelSpeed::set_is_wheel_spd_rl_valid(bool value) {
  set_has_is_wheel_spd_rl_valid();
  is_wheel_spd_rl_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.is_wheel_spd_rl_valid)
}

// optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_rl = 5 [default = INVALID];
bool WheelSpeed::has_wheel_direction_rl() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void WheelSpeed::set_has_wheel_direction_rl() {
  _has_bits_[0] |= 0x00000200u;
}
void WheelSpeed::clear_has_wheel_direction_rl() {
  _has_bits_[0] &= ~0x00000200u;
}
void WheelSpeed::clear_wheel_direction_rl() {
  wheel_direction_rl_ = 3;
  clear_has_wheel_direction_rl();
}
::jmc_auto::canbus::WheelSpeed_WheelSpeedType WheelSpeed::wheel_direction_rl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.wheel_direction_rl)
  return static_cast< ::jmc_auto::canbus::WheelSpeed_WheelSpeedType >(wheel_direction_rl_);
}
void WheelSpeed::set_wheel_direction_rl(::jmc_auto::canbus::WheelSpeed_WheelSpeedType value) {
  assert(::jmc_auto::canbus::WheelSpeed_WheelSpeedType_IsValid(value));
  set_has_wheel_direction_rl();
  wheel_direction_rl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.wheel_direction_rl)
}

// optional double wheel_spd_rl = 6 [default = 0];
bool WheelSpeed::has_wheel_spd_rl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WheelSpeed::set_has_wheel_spd_rl() {
  _has_bits_[0] |= 0x00000002u;
}
void WheelSpeed::clear_has_wheel_spd_rl() {
  _has_bits_[0] &= ~0x00000002u;
}
void WheelSpeed::clear_wheel_spd_rl() {
  wheel_spd_rl_ = 0;
  clear_has_wheel_spd_rl();
}
double WheelSpeed::wheel_spd_rl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.wheel_spd_rl)
  return wheel_spd_rl_;
}
void WheelSpeed::set_wheel_spd_rl(double value) {
  set_has_wheel_spd_rl();
  wheel_spd_rl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.wheel_spd_rl)
}

// optional bool is_wheel_spd_fr_valid = 7 [default = false];
bool WheelSpeed::has_is_wheel_spd_fr_valid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void WheelSpeed::set_has_is_wheel_spd_fr_valid() {
  _has_bits_[0] |= 0x00000040u;
}
void WheelSpeed::clear_has_is_wheel_spd_fr_valid() {
  _has_bits_[0] &= ~0x00000040u;
}
void WheelSpeed::clear_is_wheel_spd_fr_valid() {
  is_wheel_spd_fr_valid_ = false;
  clear_has_is_wheel_spd_fr_valid();
}
bool WheelSpeed::is_wheel_spd_fr_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.is_wheel_spd_fr_valid)
  return is_wheel_spd_fr_valid_;
}
void WheelSpeed::set_is_wheel_spd_fr_valid(bool value) {
  set_has_is_wheel_spd_fr_valid();
  is_wheel_spd_fr_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.is_wheel_spd_fr_valid)
}

// optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_fr = 8 [default = INVALID];
bool WheelSpeed::has_wheel_direction_fr() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void WheelSpeed::set_has_wheel_direction_fr() {
  _has_bits_[0] |= 0x00000400u;
}
void WheelSpeed::clear_has_wheel_direction_fr() {
  _has_bits_[0] &= ~0x00000400u;
}
void WheelSpeed::clear_wheel_direction_fr() {
  wheel_direction_fr_ = 3;
  clear_has_wheel_direction_fr();
}
::jmc_auto::canbus::WheelSpeed_WheelSpeedType WheelSpeed::wheel_direction_fr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.wheel_direction_fr)
  return static_cast< ::jmc_auto::canbus::WheelSpeed_WheelSpeedType >(wheel_direction_fr_);
}
void WheelSpeed::set_wheel_direction_fr(::jmc_auto::canbus::WheelSpeed_WheelSpeedType value) {
  assert(::jmc_auto::canbus::WheelSpeed_WheelSpeedType_IsValid(value));
  set_has_wheel_direction_fr();
  wheel_direction_fr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.wheel_direction_fr)
}

// optional double wheel_spd_fr = 9 [default = 0];
bool WheelSpeed::has_wheel_spd_fr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WheelSpeed::set_has_wheel_spd_fr() {
  _has_bits_[0] |= 0x00000004u;
}
void WheelSpeed::clear_has_wheel_spd_fr() {
  _has_bits_[0] &= ~0x00000004u;
}
void WheelSpeed::clear_wheel_spd_fr() {
  wheel_spd_fr_ = 0;
  clear_has_wheel_spd_fr();
}
double WheelSpeed::wheel_spd_fr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.wheel_spd_fr)
  return wheel_spd_fr_;
}
void WheelSpeed::set_wheel_spd_fr(double value) {
  set_has_wheel_spd_fr();
  wheel_spd_fr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.wheel_spd_fr)
}

// optional bool is_wheel_spd_fl_valid = 10 [default = false];
bool WheelSpeed::has_is_wheel_spd_fl_valid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void WheelSpeed::set_has_is_wheel_spd_fl_valid() {
  _has_bits_[0] |= 0x00000080u;
}
void WheelSpeed::clear_has_is_wheel_spd_fl_valid() {
  _has_bits_[0] &= ~0x00000080u;
}
void WheelSpeed::clear_is_wheel_spd_fl_valid() {
  is_wheel_spd_fl_valid_ = false;
  clear_has_is_wheel_spd_fl_valid();
}
bool WheelSpeed::is_wheel_spd_fl_valid() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.is_wheel_spd_fl_valid)
  return is_wheel_spd_fl_valid_;
}
void WheelSpeed::set_is_wheel_spd_fl_valid(bool value) {
  set_has_is_wheel_spd_fl_valid();
  is_wheel_spd_fl_valid_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.is_wheel_spd_fl_valid)
}

// optional .jmc_auto.canbus.WheelSpeed.WheelSpeedType wheel_direction_fl = 11 [default = INVALID];
bool WheelSpeed::has_wheel_direction_fl() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void WheelSpeed::set_has_wheel_direction_fl() {
  _has_bits_[0] |= 0x00000800u;
}
void WheelSpeed::clear_has_wheel_direction_fl() {
  _has_bits_[0] &= ~0x00000800u;
}
void WheelSpeed::clear_wheel_direction_fl() {
  wheel_direction_fl_ = 3;
  clear_has_wheel_direction_fl();
}
::jmc_auto::canbus::WheelSpeed_WheelSpeedType WheelSpeed::wheel_direction_fl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.wheel_direction_fl)
  return static_cast< ::jmc_auto::canbus::WheelSpeed_WheelSpeedType >(wheel_direction_fl_);
}
void WheelSpeed::set_wheel_direction_fl(::jmc_auto::canbus::WheelSpeed_WheelSpeedType value) {
  assert(::jmc_auto::canbus::WheelSpeed_WheelSpeedType_IsValid(value));
  set_has_wheel_direction_fl();
  wheel_direction_fl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.wheel_direction_fl)
}

// optional double wheel_spd_fl = 12 [default = 0];
bool WheelSpeed::has_wheel_spd_fl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WheelSpeed::set_has_wheel_spd_fl() {
  _has_bits_[0] |= 0x00000008u;
}
void WheelSpeed::clear_has_wheel_spd_fl() {
  _has_bits_[0] &= ~0x00000008u;
}
void WheelSpeed::clear_wheel_spd_fl() {
  wheel_spd_fl_ = 0;
  clear_has_wheel_spd_fl();
}
double WheelSpeed::wheel_spd_fl() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.WheelSpeed.wheel_spd_fl)
  return wheel_spd_fl_;
}
void WheelSpeed::set_wheel_spd_fl(double value) {
  set_has_wheel_spd_fl();
  wheel_spd_fl_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.WheelSpeed.wheel_spd_fl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Sonar::kRangeFieldNumber;
const int Sonar::kTranslationFieldNumber;
const int Sonar::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Sonar::Sonar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Sonar)
}
Sonar::Sonar(const Sonar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_translation()) {
    translation_ = new ::jmc_auto::common::Point3D(*from.translation_);
  } else {
    translation_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::jmc_auto::common::Quaternion(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  range_ = from.range_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Sonar)
}

void Sonar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&translation_, 0, reinterpret_cast<char*>(&range_) -
    reinterpret_cast<char*>(&translation_) + sizeof(range_));
}

Sonar::~Sonar() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Sonar)
  SharedDtor();
}

void Sonar::SharedDtor() {
  if (this != internal_default_instance()) {
    delete translation_;
  }
  if (this != internal_default_instance()) {
    delete rotation_;
  }
}

void Sonar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sonar::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Sonar& Sonar::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  return *internal_default_instance();
}

Sonar* Sonar::New(::google::protobuf::Arena* arena) const {
  Sonar* n = new Sonar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Sonar::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Sonar)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_translation()) {
      GOOGLE_DCHECK(translation_ != NULL);
      translation_->::jmc_auto::common::Point3D::Clear();
    }
    if (has_rotation()) {
      GOOGLE_DCHECK(rotation_ != NULL);
      rotation_->::jmc_auto::common::Quaternion::Clear();
    }
  }
  range_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Sonar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Sonar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D translation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Quaternion rotation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Sonar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Sonar)
  return false;
#undef DO_
}

void Sonar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Sonar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double range = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->range(), output);
  }

  // optional .jmc_auto.common.Point3D translation = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->translation_, output);
  }

  // optional .jmc_auto.common.Quaternion rotation = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rotation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Sonar)
}

::google::protobuf::uint8* Sonar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Sonar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double range = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->range(), target);
  }

  // optional .jmc_auto.common.Point3D translation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->translation_, deterministic, target);
  }

  // optional .jmc_auto.common.Quaternion rotation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->rotation_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Sonar)
  return target;
}

size_t Sonar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Sonar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .jmc_auto.common.Point3D translation = 2;
    if (has_translation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->translation_);
    }

    // optional .jmc_auto.common.Quaternion rotation = 3;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rotation_);
    }

    // optional double range = 1;
    if (has_range()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sonar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Sonar)
  GOOGLE_DCHECK_NE(&from, this);
  const Sonar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Sonar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Sonar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Sonar)
    MergeFrom(*source);
  }
}

void Sonar::MergeFrom(const Sonar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Sonar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_translation()->::jmc_auto::common::Point3D::MergeFrom(from.translation());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rotation()->::jmc_auto::common::Quaternion::MergeFrom(from.rotation());
    }
    if (cached_has_bits & 0x00000004u) {
      range_ = from.range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Sonar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Sonar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sonar::CopyFrom(const Sonar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Sonar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sonar::IsInitialized() const {
  return true;
}

void Sonar::Swap(Sonar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Sonar::InternalSwap(Sonar* other) {
  std::swap(translation_, other->translation_);
  std::swap(rotation_, other->rotation_);
  std::swap(range_, other->range_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Sonar::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Sonar

// optional double range = 1;
bool Sonar::has_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Sonar::set_has_range() {
  _has_bits_[0] |= 0x00000004u;
}
void Sonar::clear_has_range() {
  _has_bits_[0] &= ~0x00000004u;
}
void Sonar::clear_range() {
  range_ = 0;
  clear_has_range();
}
double Sonar::range() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sonar.range)
  return range_;
}
void Sonar::set_range(double value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Sonar.range)
}

// optional .jmc_auto.common.Point3D translation = 2;
bool Sonar::has_translation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Sonar::set_has_translation() {
  _has_bits_[0] |= 0x00000001u;
}
void Sonar::clear_has_translation() {
  _has_bits_[0] &= ~0x00000001u;
}
void Sonar::clear_translation() {
  if (translation_ != NULL) translation_->::jmc_auto::common::Point3D::Clear();
  clear_has_translation();
}
const ::jmc_auto::common::Point3D& Sonar::translation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sonar.translation)
  return translation_ != NULL ? *translation_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* Sonar::mutable_translation() {
  set_has_translation();
  if (translation_ == NULL) {
    translation_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Sonar.translation)
  return translation_;
}
::jmc_auto::common::Point3D* Sonar::release_translation() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Sonar.translation)
  clear_has_translation();
  ::jmc_auto::common::Point3D* temp = translation_;
  translation_ = NULL;
  return temp;
}
void Sonar::set_allocated_translation(::jmc_auto::common::Point3D* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    set_has_translation();
  } else {
    clear_has_translation();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Sonar.translation)
}

// optional .jmc_auto.common.Quaternion rotation = 3;
bool Sonar::has_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Sonar::set_has_rotation() {
  _has_bits_[0] |= 0x00000002u;
}
void Sonar::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000002u;
}
void Sonar::clear_rotation() {
  if (rotation_ != NULL) rotation_->::jmc_auto::common::Quaternion::Clear();
  clear_has_rotation();
}
const ::jmc_auto::common::Quaternion& Sonar::rotation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Sonar.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::jmc_auto::common::Quaternion::internal_default_instance();
}
::jmc_auto::common::Quaternion* Sonar::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) {
    rotation_ = new ::jmc_auto::common::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Sonar.rotation)
  return rotation_;
}
::jmc_auto::common::Quaternion* Sonar::release_rotation() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.Sonar.rotation)
  clear_has_rotation();
  ::jmc_auto::common::Quaternion* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void Sonar::set_allocated_rotation(::jmc_auto::common::Quaternion* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    set_has_rotation();
  } else {
    clear_has_rotation();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.Sonar.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Surround::kCrossTrafficAlertLeftFieldNumber;
const int Surround::kCrossTrafficAlertLeftEnabledFieldNumber;
const int Surround::kBlindSpotLeftAlertFieldNumber;
const int Surround::kBlindSpotLeftAlertEnabledFieldNumber;
const int Surround::kCrossTrafficAlertRightFieldNumber;
const int Surround::kCrossTrafficAlertRightEnabledFieldNumber;
const int Surround::kBlindSpotRightAlertFieldNumber;
const int Surround::kBlindSpotRightAlertEnabledFieldNumber;
const int Surround::kSonar00FieldNumber;
const int Surround::kSonar01FieldNumber;
const int Surround::kSonar02FieldNumber;
const int Surround::kSonar03FieldNumber;
const int Surround::kSonar04FieldNumber;
const int Surround::kSonar05FieldNumber;
const int Surround::kSonar06FieldNumber;
const int Surround::kSonar07FieldNumber;
const int Surround::kSonar08FieldNumber;
const int Surround::kSonar09FieldNumber;
const int Surround::kSonar10FieldNumber;
const int Surround::kSonar11FieldNumber;
const int Surround::kSonarEnabledFieldNumber;
const int Surround::kSonarFaultFieldNumber;
const int Surround::kSonarRangeFieldNumber;
const int Surround::kSonarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Surround::Surround()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.Surround)
}
Surround::Surround(const Surround& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sonar_range_(from.sonar_range_),
      sonar_(from.sonar_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cross_traffic_alert_left_, &from.cross_traffic_alert_left_,
    reinterpret_cast<char*>(&sonar_fault_) -
    reinterpret_cast<char*>(&cross_traffic_alert_left_) + sizeof(sonar_fault_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.Surround)
}

void Surround::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cross_traffic_alert_left_, 0, reinterpret_cast<char*>(&sonar_fault_) -
    reinterpret_cast<char*>(&cross_traffic_alert_left_) + sizeof(sonar_fault_));
}

Surround::~Surround() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.Surround)
  SharedDtor();
}

void Surround::SharedDtor() {
}

void Surround::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Surround::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Surround& Surround::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  return *internal_default_instance();
}

Surround* Surround::New(::google::protobuf::Arena* arena) const {
  Surround* n = new Surround;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Surround::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.Surround)
  sonar_range_.Clear();
  sonar_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&cross_traffic_alert_left_, 0, reinterpret_cast<char*>(&blind_spot_right_alert_enabled_) -
      reinterpret_cast<char*>(&cross_traffic_alert_left_) + sizeof(blind_spot_right_alert_enabled_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&sonar00_, 0, reinterpret_cast<char*>(&sonar07_) -
      reinterpret_cast<char*>(&sonar00_) + sizeof(sonar07_));
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ::memset(&sonar08_, 0, reinterpret_cast<char*>(&sonar_fault_) -
      reinterpret_cast<char*>(&sonar08_) + sizeof(sonar_fault_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Surround::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.Surround)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool cross_traffic_alert_left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_cross_traffic_alert_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_traffic_alert_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cross_traffic_alert_left_enabled = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_cross_traffic_alert_left_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_traffic_alert_left_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blind_spot_left_alert = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_blind_spot_left_alert();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blind_spot_left_alert_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blind_spot_left_alert_enabled = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_blind_spot_left_alert_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blind_spot_left_alert_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cross_traffic_alert_right = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_cross_traffic_alert_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_traffic_alert_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cross_traffic_alert_right_enabled = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_cross_traffic_alert_right_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cross_traffic_alert_right_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blind_spot_right_alert = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_blind_spot_right_alert();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blind_spot_right_alert_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool blind_spot_right_alert_enabled = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_blind_spot_right_alert_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blind_spot_right_alert_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar00 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_sonar00();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar00_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar01 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_sonar01();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar01_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar02 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_sonar02();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar02_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar03 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_sonar03();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar03_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar04 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_sonar04();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar04_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar05 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_sonar05();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar05_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar06 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_sonar06();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar06_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar07 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_sonar07();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar07_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar08 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_sonar08();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar08_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar09 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u)) {
          set_has_sonar09();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar09_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar10 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u)) {
          set_has_sonar10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double sonar11 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u)) {
          set_has_sonar11();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sonar11_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sonar_enabled = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_sonar_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sonar_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sonar_fault = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_sonar_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sonar_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double sonar_range = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 185u, input, this->mutable_sonar_range())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(186u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_sonar_range())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.canbus.Sonar sonar = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sonar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.Surround)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.Surround)
  return false;
#undef DO_
}

void Surround::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.Surround)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool cross_traffic_alert_left = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->cross_traffic_alert_left(), output);
  }

  // optional bool cross_traffic_alert_left_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cross_traffic_alert_left_enabled(), output);
  }

  // optional bool blind_spot_left_alert = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->blind_spot_left_alert(), output);
  }

  // optional bool blind_spot_left_alert_enabled = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->blind_spot_left_alert_enabled(), output);
  }

  // optional bool cross_traffic_alert_right = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cross_traffic_alert_right(), output);
  }

  // optional bool cross_traffic_alert_right_enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->cross_traffic_alert_right_enabled(), output);
  }

  // optional bool blind_spot_right_alert = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->blind_spot_right_alert(), output);
  }

  // optional bool blind_spot_right_alert_enabled = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->blind_spot_right_alert_enabled(), output);
  }

  // optional double sonar00 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->sonar00(), output);
  }

  // optional double sonar01 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->sonar01(), output);
  }

  // optional double sonar02 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->sonar02(), output);
  }

  // optional double sonar03 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->sonar03(), output);
  }

  // optional double sonar04 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->sonar04(), output);
  }

  // optional double sonar05 = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->sonar05(), output);
  }

  // optional double sonar06 = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->sonar06(), output);
  }

  // optional double sonar07 = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->sonar07(), output);
  }

  // optional double sonar08 = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->sonar08(), output);
  }

  // optional double sonar09 = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->sonar09(), output);
  }

  // optional double sonar10 = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->sonar10(), output);
  }

  // optional double sonar11 = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->sonar11(), output);
  }

  // optional bool sonar_enabled = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->sonar_enabled(), output);
  }

  // optional bool sonar_fault = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->sonar_fault(), output);
  }

  // repeated double sonar_range = 23;
  for (int i = 0, n = this->sonar_range_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      23, this->sonar_range(i), output);
  }

  // repeated .jmc_auto.canbus.Sonar sonar = 24;
  for (unsigned int i = 0, n = this->sonar_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->sonar(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.Surround)
}

::google::protobuf::uint8* Surround::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.Surround)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool cross_traffic_alert_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->cross_traffic_alert_left(), target);
  }

  // optional bool cross_traffic_alert_left_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->cross_traffic_alert_left_enabled(), target);
  }

  // optional bool blind_spot_left_alert = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->blind_spot_left_alert(), target);
  }

  // optional bool blind_spot_left_alert_enabled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->blind_spot_left_alert_enabled(), target);
  }

  // optional bool cross_traffic_alert_right = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cross_traffic_alert_right(), target);
  }

  // optional bool cross_traffic_alert_right_enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->cross_traffic_alert_right_enabled(), target);
  }

  // optional bool blind_spot_right_alert = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->blind_spot_right_alert(), target);
  }

  // optional bool blind_spot_right_alert_enabled = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->blind_spot_right_alert_enabled(), target);
  }

  // optional double sonar00 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->sonar00(), target);
  }

  // optional double sonar01 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->sonar01(), target);
  }

  // optional double sonar02 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->sonar02(), target);
  }

  // optional double sonar03 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->sonar03(), target);
  }

  // optional double sonar04 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->sonar04(), target);
  }

  // optional double sonar05 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->sonar05(), target);
  }

  // optional double sonar06 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->sonar06(), target);
  }

  // optional double sonar07 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->sonar07(), target);
  }

  // optional double sonar08 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->sonar08(), target);
  }

  // optional double sonar09 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->sonar09(), target);
  }

  // optional double sonar10 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->sonar10(), target);
  }

  // optional double sonar11 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->sonar11(), target);
  }

  // optional bool sonar_enabled = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->sonar_enabled(), target);
  }

  // optional bool sonar_fault = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->sonar_fault(), target);
  }

  // repeated double sonar_range = 23;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteDoubleToArray(23, this->sonar_range_, target);

  // repeated .jmc_auto.canbus.Sonar sonar = 24;
  for (unsigned int i = 0, n = this->sonar_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, this->sonar(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.Surround)
  return target;
}

size_t Surround::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.Surround)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated double sonar_range = 23;
  {
    unsigned int count = this->sonar_range_size();
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->sonar_range_size());
    total_size += data_size;
  }

  // repeated .jmc_auto.canbus.Sonar sonar = 24;
  {
    unsigned int count = this->sonar_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sonar(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bool cross_traffic_alert_left = 1;
    if (has_cross_traffic_alert_left()) {
      total_size += 1 + 1;
    }

    // optional bool cross_traffic_alert_left_enabled = 2;
    if (has_cross_traffic_alert_left_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_left_alert = 3;
    if (has_blind_spot_left_alert()) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_left_alert_enabled = 4;
    if (has_blind_spot_left_alert_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool cross_traffic_alert_right = 5;
    if (has_cross_traffic_alert_right()) {
      total_size += 1 + 1;
    }

    // optional bool cross_traffic_alert_right_enabled = 6;
    if (has_cross_traffic_alert_right_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_right_alert = 7;
    if (has_blind_spot_right_alert()) {
      total_size += 1 + 1;
    }

    // optional bool blind_spot_right_alert_enabled = 8;
    if (has_blind_spot_right_alert_enabled()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double sonar00 = 9;
    if (has_sonar00()) {
      total_size += 1 + 8;
    }

    // optional double sonar01 = 10;
    if (has_sonar01()) {
      total_size += 1 + 8;
    }

    // optional double sonar02 = 11;
    if (has_sonar02()) {
      total_size += 1 + 8;
    }

    // optional double sonar03 = 12;
    if (has_sonar03()) {
      total_size += 1 + 8;
    }

    // optional double sonar04 = 13;
    if (has_sonar04()) {
      total_size += 1 + 8;
    }

    // optional double sonar05 = 14;
    if (has_sonar05()) {
      total_size += 1 + 8;
    }

    // optional double sonar06 = 15;
    if (has_sonar06()) {
      total_size += 1 + 8;
    }

    // optional double sonar07 = 16;
    if (has_sonar07()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional double sonar08 = 17;
    if (has_sonar08()) {
      total_size += 2 + 8;
    }

    // optional double sonar09 = 18;
    if (has_sonar09()) {
      total_size += 2 + 8;
    }

    // optional double sonar10 = 19;
    if (has_sonar10()) {
      total_size += 2 + 8;
    }

    // optional double sonar11 = 20;
    if (has_sonar11()) {
      total_size += 2 + 8;
    }

    // optional bool sonar_enabled = 21;
    if (has_sonar_enabled()) {
      total_size += 2 + 1;
    }

    // optional bool sonar_fault = 22;
    if (has_sonar_fault()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Surround::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.Surround)
  GOOGLE_DCHECK_NE(&from, this);
  const Surround* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Surround>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.Surround)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.Surround)
    MergeFrom(*source);
  }
}

void Surround::MergeFrom(const Surround& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.Surround)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sonar_range_.MergeFrom(from.sonar_range_);
  sonar_.MergeFrom(from.sonar_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      cross_traffic_alert_left_ = from.cross_traffic_alert_left_;
    }
    if (cached_has_bits & 0x00000002u) {
      cross_traffic_alert_left_enabled_ = from.cross_traffic_alert_left_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      blind_spot_left_alert_ = from.blind_spot_left_alert_;
    }
    if (cached_has_bits & 0x00000008u) {
      blind_spot_left_alert_enabled_ = from.blind_spot_left_alert_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      cross_traffic_alert_right_ = from.cross_traffic_alert_right_;
    }
    if (cached_has_bits & 0x00000020u) {
      cross_traffic_alert_right_enabled_ = from.cross_traffic_alert_right_enabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      blind_spot_right_alert_ = from.blind_spot_right_alert_;
    }
    if (cached_has_bits & 0x00000080u) {
      blind_spot_right_alert_enabled_ = from.blind_spot_right_alert_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      sonar00_ = from.sonar00_;
    }
    if (cached_has_bits & 0x00000200u) {
      sonar01_ = from.sonar01_;
    }
    if (cached_has_bits & 0x00000400u) {
      sonar02_ = from.sonar02_;
    }
    if (cached_has_bits & 0x00000800u) {
      sonar03_ = from.sonar03_;
    }
    if (cached_has_bits & 0x00001000u) {
      sonar04_ = from.sonar04_;
    }
    if (cached_has_bits & 0x00002000u) {
      sonar05_ = from.sonar05_;
    }
    if (cached_has_bits & 0x00004000u) {
      sonar06_ = from.sonar06_;
    }
    if (cached_has_bits & 0x00008000u) {
      sonar07_ = from.sonar07_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      sonar08_ = from.sonar08_;
    }
    if (cached_has_bits & 0x00020000u) {
      sonar09_ = from.sonar09_;
    }
    if (cached_has_bits & 0x00040000u) {
      sonar10_ = from.sonar10_;
    }
    if (cached_has_bits & 0x00080000u) {
      sonar11_ = from.sonar11_;
    }
    if (cached_has_bits & 0x00100000u) {
      sonar_enabled_ = from.sonar_enabled_;
    }
    if (cached_has_bits & 0x00200000u) {
      sonar_fault_ = from.sonar_fault_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Surround::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.Surround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Surround::CopyFrom(const Surround& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.Surround)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Surround::IsInitialized() const {
  return true;
}

void Surround::Swap(Surround* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Surround::InternalSwap(Surround* other) {
  sonar_range_.InternalSwap(&other->sonar_range_);
  sonar_.InternalSwap(&other->sonar_);
  std::swap(cross_traffic_alert_left_, other->cross_traffic_alert_left_);
  std::swap(cross_traffic_alert_left_enabled_, other->cross_traffic_alert_left_enabled_);
  std::swap(blind_spot_left_alert_, other->blind_spot_left_alert_);
  std::swap(blind_spot_left_alert_enabled_, other->blind_spot_left_alert_enabled_);
  std::swap(cross_traffic_alert_right_, other->cross_traffic_alert_right_);
  std::swap(cross_traffic_alert_right_enabled_, other->cross_traffic_alert_right_enabled_);
  std::swap(blind_spot_right_alert_, other->blind_spot_right_alert_);
  std::swap(blind_spot_right_alert_enabled_, other->blind_spot_right_alert_enabled_);
  std::swap(sonar00_, other->sonar00_);
  std::swap(sonar01_, other->sonar01_);
  std::swap(sonar02_, other->sonar02_);
  std::swap(sonar03_, other->sonar03_);
  std::swap(sonar04_, other->sonar04_);
  std::swap(sonar05_, other->sonar05_);
  std::swap(sonar06_, other->sonar06_);
  std::swap(sonar07_, other->sonar07_);
  std::swap(sonar08_, other->sonar08_);
  std::swap(sonar09_, other->sonar09_);
  std::swap(sonar10_, other->sonar10_);
  std::swap(sonar11_, other->sonar11_);
  std::swap(sonar_enabled_, other->sonar_enabled_);
  std::swap(sonar_fault_, other->sonar_fault_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Surround::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Surround

// optional bool cross_traffic_alert_left = 1;
bool Surround::has_cross_traffic_alert_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Surround::set_has_cross_traffic_alert_left() {
  _has_bits_[0] |= 0x00000001u;
}
void Surround::clear_has_cross_traffic_alert_left() {
  _has_bits_[0] &= ~0x00000001u;
}
void Surround::clear_cross_traffic_alert_left() {
  cross_traffic_alert_left_ = false;
  clear_has_cross_traffic_alert_left();
}
bool Surround::cross_traffic_alert_left() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.cross_traffic_alert_left)
  return cross_traffic_alert_left_;
}
void Surround::set_cross_traffic_alert_left(bool value) {
  set_has_cross_traffic_alert_left();
  cross_traffic_alert_left_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.cross_traffic_alert_left)
}

// optional bool cross_traffic_alert_left_enabled = 2;
bool Surround::has_cross_traffic_alert_left_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Surround::set_has_cross_traffic_alert_left_enabled() {
  _has_bits_[0] |= 0x00000002u;
}
void Surround::clear_has_cross_traffic_alert_left_enabled() {
  _has_bits_[0] &= ~0x00000002u;
}
void Surround::clear_cross_traffic_alert_left_enabled() {
  cross_traffic_alert_left_enabled_ = false;
  clear_has_cross_traffic_alert_left_enabled();
}
bool Surround::cross_traffic_alert_left_enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.cross_traffic_alert_left_enabled)
  return cross_traffic_alert_left_enabled_;
}
void Surround::set_cross_traffic_alert_left_enabled(bool value) {
  set_has_cross_traffic_alert_left_enabled();
  cross_traffic_alert_left_enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.cross_traffic_alert_left_enabled)
}

// optional bool blind_spot_left_alert = 3;
bool Surround::has_blind_spot_left_alert() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Surround::set_has_blind_spot_left_alert() {
  _has_bits_[0] |= 0x00000004u;
}
void Surround::clear_has_blind_spot_left_alert() {
  _has_bits_[0] &= ~0x00000004u;
}
void Surround::clear_blind_spot_left_alert() {
  blind_spot_left_alert_ = false;
  clear_has_blind_spot_left_alert();
}
bool Surround::blind_spot_left_alert() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.blind_spot_left_alert)
  return blind_spot_left_alert_;
}
void Surround::set_blind_spot_left_alert(bool value) {
  set_has_blind_spot_left_alert();
  blind_spot_left_alert_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.blind_spot_left_alert)
}

// optional bool blind_spot_left_alert_enabled = 4;
bool Surround::has_blind_spot_left_alert_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Surround::set_has_blind_spot_left_alert_enabled() {
  _has_bits_[0] |= 0x00000008u;
}
void Surround::clear_has_blind_spot_left_alert_enabled() {
  _has_bits_[0] &= ~0x00000008u;
}
void Surround::clear_blind_spot_left_alert_enabled() {
  blind_spot_left_alert_enabled_ = false;
  clear_has_blind_spot_left_alert_enabled();
}
bool Surround::blind_spot_left_alert_enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.blind_spot_left_alert_enabled)
  return blind_spot_left_alert_enabled_;
}
void Surround::set_blind_spot_left_alert_enabled(bool value) {
  set_has_blind_spot_left_alert_enabled();
  blind_spot_left_alert_enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.blind_spot_left_alert_enabled)
}

// optional bool cross_traffic_alert_right = 5;
bool Surround::has_cross_traffic_alert_right() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Surround::set_has_cross_traffic_alert_right() {
  _has_bits_[0] |= 0x00000010u;
}
void Surround::clear_has_cross_traffic_alert_right() {
  _has_bits_[0] &= ~0x00000010u;
}
void Surround::clear_cross_traffic_alert_right() {
  cross_traffic_alert_right_ = false;
  clear_has_cross_traffic_alert_right();
}
bool Surround::cross_traffic_alert_right() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.cross_traffic_alert_right)
  return cross_traffic_alert_right_;
}
void Surround::set_cross_traffic_alert_right(bool value) {
  set_has_cross_traffic_alert_right();
  cross_traffic_alert_right_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.cross_traffic_alert_right)
}

// optional bool cross_traffic_alert_right_enabled = 6;
bool Surround::has_cross_traffic_alert_right_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Surround::set_has_cross_traffic_alert_right_enabled() {
  _has_bits_[0] |= 0x00000020u;
}
void Surround::clear_has_cross_traffic_alert_right_enabled() {
  _has_bits_[0] &= ~0x00000020u;
}
void Surround::clear_cross_traffic_alert_right_enabled() {
  cross_traffic_alert_right_enabled_ = false;
  clear_has_cross_traffic_alert_right_enabled();
}
bool Surround::cross_traffic_alert_right_enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.cross_traffic_alert_right_enabled)
  return cross_traffic_alert_right_enabled_;
}
void Surround::set_cross_traffic_alert_right_enabled(bool value) {
  set_has_cross_traffic_alert_right_enabled();
  cross_traffic_alert_right_enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.cross_traffic_alert_right_enabled)
}

// optional bool blind_spot_right_alert = 7;
bool Surround::has_blind_spot_right_alert() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Surround::set_has_blind_spot_right_alert() {
  _has_bits_[0] |= 0x00000040u;
}
void Surround::clear_has_blind_spot_right_alert() {
  _has_bits_[0] &= ~0x00000040u;
}
void Surround::clear_blind_spot_right_alert() {
  blind_spot_right_alert_ = false;
  clear_has_blind_spot_right_alert();
}
bool Surround::blind_spot_right_alert() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.blind_spot_right_alert)
  return blind_spot_right_alert_;
}
void Surround::set_blind_spot_right_alert(bool value) {
  set_has_blind_spot_right_alert();
  blind_spot_right_alert_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.blind_spot_right_alert)
}

// optional bool blind_spot_right_alert_enabled = 8;
bool Surround::has_blind_spot_right_alert_enabled() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Surround::set_has_blind_spot_right_alert_enabled() {
  _has_bits_[0] |= 0x00000080u;
}
void Surround::clear_has_blind_spot_right_alert_enabled() {
  _has_bits_[0] &= ~0x00000080u;
}
void Surround::clear_blind_spot_right_alert_enabled() {
  blind_spot_right_alert_enabled_ = false;
  clear_has_blind_spot_right_alert_enabled();
}
bool Surround::blind_spot_right_alert_enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.blind_spot_right_alert_enabled)
  return blind_spot_right_alert_enabled_;
}
void Surround::set_blind_spot_right_alert_enabled(bool value) {
  set_has_blind_spot_right_alert_enabled();
  blind_spot_right_alert_enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.blind_spot_right_alert_enabled)
}

// optional double sonar00 = 9;
bool Surround::has_sonar00() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Surround::set_has_sonar00() {
  _has_bits_[0] |= 0x00000100u;
}
void Surround::clear_has_sonar00() {
  _has_bits_[0] &= ~0x00000100u;
}
void Surround::clear_sonar00() {
  sonar00_ = 0;
  clear_has_sonar00();
}
double Surround::sonar00() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar00)
  return sonar00_;
}
void Surround::set_sonar00(double value) {
  set_has_sonar00();
  sonar00_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar00)
}

// optional double sonar01 = 10;
bool Surround::has_sonar01() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Surround::set_has_sonar01() {
  _has_bits_[0] |= 0x00000200u;
}
void Surround::clear_has_sonar01() {
  _has_bits_[0] &= ~0x00000200u;
}
void Surround::clear_sonar01() {
  sonar01_ = 0;
  clear_has_sonar01();
}
double Surround::sonar01() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar01)
  return sonar01_;
}
void Surround::set_sonar01(double value) {
  set_has_sonar01();
  sonar01_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar01)
}

// optional double sonar02 = 11;
bool Surround::has_sonar02() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Surround::set_has_sonar02() {
  _has_bits_[0] |= 0x00000400u;
}
void Surround::clear_has_sonar02() {
  _has_bits_[0] &= ~0x00000400u;
}
void Surround::clear_sonar02() {
  sonar02_ = 0;
  clear_has_sonar02();
}
double Surround::sonar02() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar02)
  return sonar02_;
}
void Surround::set_sonar02(double value) {
  set_has_sonar02();
  sonar02_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar02)
}

// optional double sonar03 = 12;
bool Surround::has_sonar03() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Surround::set_has_sonar03() {
  _has_bits_[0] |= 0x00000800u;
}
void Surround::clear_has_sonar03() {
  _has_bits_[0] &= ~0x00000800u;
}
void Surround::clear_sonar03() {
  sonar03_ = 0;
  clear_has_sonar03();
}
double Surround::sonar03() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar03)
  return sonar03_;
}
void Surround::set_sonar03(double value) {
  set_has_sonar03();
  sonar03_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar03)
}

// optional double sonar04 = 13;
bool Surround::has_sonar04() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Surround::set_has_sonar04() {
  _has_bits_[0] |= 0x00001000u;
}
void Surround::clear_has_sonar04() {
  _has_bits_[0] &= ~0x00001000u;
}
void Surround::clear_sonar04() {
  sonar04_ = 0;
  clear_has_sonar04();
}
double Surround::sonar04() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar04)
  return sonar04_;
}
void Surround::set_sonar04(double value) {
  set_has_sonar04();
  sonar04_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar04)
}

// optional double sonar05 = 14;
bool Surround::has_sonar05() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Surround::set_has_sonar05() {
  _has_bits_[0] |= 0x00002000u;
}
void Surround::clear_has_sonar05() {
  _has_bits_[0] &= ~0x00002000u;
}
void Surround::clear_sonar05() {
  sonar05_ = 0;
  clear_has_sonar05();
}
double Surround::sonar05() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar05)
  return sonar05_;
}
void Surround::set_sonar05(double value) {
  set_has_sonar05();
  sonar05_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar05)
}

// optional double sonar06 = 15;
bool Surround::has_sonar06() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Surround::set_has_sonar06() {
  _has_bits_[0] |= 0x00004000u;
}
void Surround::clear_has_sonar06() {
  _has_bits_[0] &= ~0x00004000u;
}
void Surround::clear_sonar06() {
  sonar06_ = 0;
  clear_has_sonar06();
}
double Surround::sonar06() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar06)
  return sonar06_;
}
void Surround::set_sonar06(double value) {
  set_has_sonar06();
  sonar06_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar06)
}

// optional double sonar07 = 16;
bool Surround::has_sonar07() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Surround::set_has_sonar07() {
  _has_bits_[0] |= 0x00008000u;
}
void Surround::clear_has_sonar07() {
  _has_bits_[0] &= ~0x00008000u;
}
void Surround::clear_sonar07() {
  sonar07_ = 0;
  clear_has_sonar07();
}
double Surround::sonar07() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar07)
  return sonar07_;
}
void Surround::set_sonar07(double value) {
  set_has_sonar07();
  sonar07_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar07)
}

// optional double sonar08 = 17;
bool Surround::has_sonar08() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Surround::set_has_sonar08() {
  _has_bits_[0] |= 0x00010000u;
}
void Surround::clear_has_sonar08() {
  _has_bits_[0] &= ~0x00010000u;
}
void Surround::clear_sonar08() {
  sonar08_ = 0;
  clear_has_sonar08();
}
double Surround::sonar08() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar08)
  return sonar08_;
}
void Surround::set_sonar08(double value) {
  set_has_sonar08();
  sonar08_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar08)
}

// optional double sonar09 = 18;
bool Surround::has_sonar09() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Surround::set_has_sonar09() {
  _has_bits_[0] |= 0x00020000u;
}
void Surround::clear_has_sonar09() {
  _has_bits_[0] &= ~0x00020000u;
}
void Surround::clear_sonar09() {
  sonar09_ = 0;
  clear_has_sonar09();
}
double Surround::sonar09() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar09)
  return sonar09_;
}
void Surround::set_sonar09(double value) {
  set_has_sonar09();
  sonar09_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar09)
}

// optional double sonar10 = 19;
bool Surround::has_sonar10() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Surround::set_has_sonar10() {
  _has_bits_[0] |= 0x00040000u;
}
void Surround::clear_has_sonar10() {
  _has_bits_[0] &= ~0x00040000u;
}
void Surround::clear_sonar10() {
  sonar10_ = 0;
  clear_has_sonar10();
}
double Surround::sonar10() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar10)
  return sonar10_;
}
void Surround::set_sonar10(double value) {
  set_has_sonar10();
  sonar10_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar10)
}

// optional double sonar11 = 20;
bool Surround::has_sonar11() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Surround::set_has_sonar11() {
  _has_bits_[0] |= 0x00080000u;
}
void Surround::clear_has_sonar11() {
  _has_bits_[0] &= ~0x00080000u;
}
void Surround::clear_sonar11() {
  sonar11_ = 0;
  clear_has_sonar11();
}
double Surround::sonar11() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar11)
  return sonar11_;
}
void Surround::set_sonar11(double value) {
  set_has_sonar11();
  sonar11_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar11)
}

// optional bool sonar_enabled = 21;
bool Surround::has_sonar_enabled() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Surround::set_has_sonar_enabled() {
  _has_bits_[0] |= 0x00100000u;
}
void Surround::clear_has_sonar_enabled() {
  _has_bits_[0] &= ~0x00100000u;
}
void Surround::clear_sonar_enabled() {
  sonar_enabled_ = false;
  clear_has_sonar_enabled();
}
bool Surround::sonar_enabled() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar_enabled)
  return sonar_enabled_;
}
void Surround::set_sonar_enabled(bool value) {
  set_has_sonar_enabled();
  sonar_enabled_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar_enabled)
}

// optional bool sonar_fault = 22;
bool Surround::has_sonar_fault() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Surround::set_has_sonar_fault() {
  _has_bits_[0] |= 0x00200000u;
}
void Surround::clear_has_sonar_fault() {
  _has_bits_[0] &= ~0x00200000u;
}
void Surround::clear_sonar_fault() {
  sonar_fault_ = false;
  clear_has_sonar_fault();
}
bool Surround::sonar_fault() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar_fault)
  return sonar_fault_;
}
void Surround::set_sonar_fault(bool value) {
  set_has_sonar_fault();
  sonar_fault_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar_fault)
}

// repeated double sonar_range = 23;
int Surround::sonar_range_size() const {
  return sonar_range_.size();
}
void Surround::clear_sonar_range() {
  sonar_range_.Clear();
}
double Surround::sonar_range(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar_range)
  return sonar_range_.Get(index);
}
void Surround::set_sonar_range(int index, double value) {
  sonar_range_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.Surround.sonar_range)
}
void Surround::add_sonar_range(double value) {
  sonar_range_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.canbus.Surround.sonar_range)
}
const ::google::protobuf::RepeatedField< double >&
Surround::sonar_range() const {
  // @@protoc_insertion_point(field_list:jmc_auto.canbus.Surround.sonar_range)
  return sonar_range_;
}
::google::protobuf::RepeatedField< double >*
Surround::mutable_sonar_range() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.canbus.Surround.sonar_range)
  return &sonar_range_;
}

// repeated .jmc_auto.canbus.Sonar sonar = 24;
int Surround::sonar_size() const {
  return sonar_.size();
}
void Surround::clear_sonar() {
  sonar_.Clear();
}
const ::jmc_auto::canbus::Sonar& Surround::sonar(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.Surround.sonar)
  return sonar_.Get(index);
}
::jmc_auto::canbus::Sonar* Surround::mutable_sonar(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.Surround.sonar)
  return sonar_.Mutable(index);
}
::jmc_auto::canbus::Sonar* Surround::add_sonar() {
  // @@protoc_insertion_point(field_add:jmc_auto.canbus.Surround.sonar)
  return sonar_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::canbus::Sonar >*
Surround::mutable_sonar() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.canbus.Surround.sonar)
  return &sonar_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::canbus::Sonar >&
Surround::sonar() const {
  // @@protoc_insertion_point(field_list:jmc_auto.canbus.Surround.sonar)
  return sonar_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int License::kVinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

License::License()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.canbus.License)
}
License::License(const License& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vin()) {
    vin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vin_);
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.canbus.License)
}

void License::SharedCtor() {
  _cached_size_ = 0;
  vin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

License::~License() {
  // @@protoc_insertion_point(destructor:jmc_auto.canbus.License)
  SharedDtor();
}

void License::SharedDtor() {
  vin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void License::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* License::descriptor() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const License& License::default_instance() {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::InitDefaults();
  return *internal_default_instance();
}

License* License::New(::google::protobuf::Arena* arena) const {
  License* n = new License;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void License::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.canbus.License)
  if (has_vin()) {
    GOOGLE_DCHECK(!vin_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*vin_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool License::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.canbus.License)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vin().data(), this->vin().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.canbus.License.vin");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.canbus.License)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.canbus.License)
  return false;
#undef DO_
}

void License::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.canbus.License)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), this->vin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.canbus.License.vin");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.canbus.License)
}

::google::protobuf::uint8* License::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.canbus.License)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vin().data(), this->vin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.canbus.License.vin");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->vin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.canbus.License)
  return target;
}

size_t License::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.canbus.License)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string vin = 1;
  if (has_vin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void License::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.canbus.License)
  GOOGLE_DCHECK_NE(&from, this);
  const License* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const License>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.canbus.License)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.canbus.License)
    MergeFrom(*source);
  }
}

void License::MergeFrom(const License& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.canbus.License)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vin()) {
    set_has_vin();
    vin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vin_);
  }
}

void License::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.canbus.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void License::CopyFrom(const License& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.canbus.License)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool License::IsInitialized() const {
  return true;
}

void License::Swap(License* other) {
  if (other == this) return;
  InternalSwap(other);
}
void License::InternalSwap(License* other) {
  vin_.Swap(&other->vin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata License::GetMetadata() const {
  protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fcanbus_2fproto_2fchassis_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// License

// optional string vin = 1;
bool License::has_vin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void License::set_has_vin() {
  _has_bits_[0] |= 0x00000001u;
}
void License::clear_has_vin() {
  _has_bits_[0] &= ~0x00000001u;
}
void License::clear_vin() {
  vin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vin();
}
const ::std::string& License::vin() const {
  // @@protoc_insertion_point(field_get:jmc_auto.canbus.License.vin)
  return vin_.GetNoArena();
}
void License::set_vin(const ::std::string& value) {
  set_has_vin();
  vin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.canbus.License.vin)
}
#if LANG_CXX11
void License::set_vin(::std::string&& value) {
  set_has_vin();
  vin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.canbus.License.vin)
}
#endif
void License::set_vin(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vin();
  vin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.canbus.License.vin)
}
void License::set_vin(const char* value, size_t size) {
  set_has_vin();
  vin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.canbus.License.vin)
}
::std::string* License::mutable_vin() {
  set_has_vin();
  // @@protoc_insertion_point(field_mutable:jmc_auto.canbus.License.vin)
  return vin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* License::release_vin() {
  // @@protoc_insertion_point(field_release:jmc_auto.canbus.License.vin)
  clear_has_vin();
  return vin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void License::set_allocated_vin(::std::string* vin) {
  if (vin != NULL) {
    set_has_vin();
  } else {
    clear_has_vin();
  }
  vin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vin);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.canbus.License.vin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
