// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/relative_map/proto/relative_map_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/map/relative_map/proto/relative_map_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace relative_map {
class MapGenerationParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MapGenerationParam> {
} _MapGenerationParam_default_instance_;
class NavigationLaneConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NavigationLaneConfig> {
} _NavigationLaneConfig_default_instance_;
class RelativeMapConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RelativeMapConfig> {
} _RelativeMapConfig_default_instance_;

namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGenerationParam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGenerationParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGenerationParam, default_left_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGenerationParam, default_right_width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapGenerationParam, default_speed_limit_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationLaneConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationLaneConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationLaneConfig, min_lane_marker_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationLaneConfig, lane_source_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelativeMapConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelativeMapConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelativeMapConfig, map_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelativeMapConfig, navigation_lane_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(MapGenerationParam)},
  { 11, 18, sizeof(NavigationLaneConfig)},
  { 20, 27, sizeof(RelativeMapConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_MapGenerationParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NavigationLaneConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RelativeMapConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/map/relative_map/proto/relative_map_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _MapGenerationParam_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _NavigationLaneConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RelativeMapConfig_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _MapGenerationParam_default_instance_.DefaultConstruct();
  _NavigationLaneConfig_default_instance_.DefaultConstruct();
  _RelativeMapConfig_default_instance_.DefaultConstruct();
  _RelativeMapConfig_default_instance_.get_mutable()->map_param_ = const_cast< ::jmc_auto::relative_map::MapGenerationParam*>(
      ::jmc_auto::relative_map::MapGenerationParam::internal_default_instance());
  _RelativeMapConfig_default_instance_.get_mutable()->navigation_lane_ = const_cast< ::jmc_auto::relative_map::NavigationLaneConfig*>(
      ::jmc_auto::relative_map::NavigationLaneConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n8modules/map/relative_map/proto/relativ"
      "e_map_config.proto\022\025jmc_auto.relative_ma"
      "p\"\177\n\022MapGenerationParam\022 \n\022default_left_"
      "width\030\001 \001(\001:\0041.75\022!\n\023default_right_width"
      "\030\002 \001(\001:\0041.75\022$\n\023default_speed_limit\030\003 \001("
      "\001:\00729.0576\"\276\001\n\024NavigationLaneConfig\022$\n\027m"
      "in_lane_marker_quality\030\001 \001(\001:\0030.5\022K\n\013lan"
      "e_source\030\002 \001(\01626.jmc_auto.relative_map.N"
      "avigationLaneConfig.LaneSource\"3\n\nLaneSo"
      "urce\022\016\n\nPERCEPTION\020\001\022\025\n\021OFFLINE_GENERATE"
      "D\020\002\"\227\001\n\021RelativeMapConfig\022<\n\tmap_param\030\001"
      " \001(\0132).jmc_auto.relative_map.MapGenerati"
      "onParam\022D\n\017navigation_lane\030\002 \001(\0132+.jmc_a"
      "uto.relative_map.NavigationLaneConfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 557);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/map/relative_map/proto/relative_map_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto

const ::google::protobuf::EnumDescriptor* NavigationLaneConfig_LaneSource_descriptor() {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool NavigationLaneConfig_LaneSource_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NavigationLaneConfig_LaneSource NavigationLaneConfig::PERCEPTION;
const NavigationLaneConfig_LaneSource NavigationLaneConfig::OFFLINE_GENERATED;
const NavigationLaneConfig_LaneSource NavigationLaneConfig::LaneSource_MIN;
const NavigationLaneConfig_LaneSource NavigationLaneConfig::LaneSource_MAX;
const int NavigationLaneConfig::LaneSource_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapGenerationParam::kDefaultLeftWidthFieldNumber;
const int MapGenerationParam::kDefaultRightWidthFieldNumber;
const int MapGenerationParam::kDefaultSpeedLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapGenerationParam::MapGenerationParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.relative_map.MapGenerationParam)
}
MapGenerationParam::MapGenerationParam(const MapGenerationParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&default_left_width_, &from.default_left_width_,
    reinterpret_cast<char*>(&default_speed_limit_) -
    reinterpret_cast<char*>(&default_left_width_) + sizeof(default_speed_limit_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.relative_map.MapGenerationParam)
}

void MapGenerationParam::SharedCtor() {
  _cached_size_ = 0;
  default_left_width_ = 1.75;
  default_right_width_ = 1.75;
  default_speed_limit_ = 29.0576;
}

MapGenerationParam::~MapGenerationParam() {
  // @@protoc_insertion_point(destructor:jmc_auto.relative_map.MapGenerationParam)
  SharedDtor();
}

void MapGenerationParam::SharedDtor() {
}

void MapGenerationParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapGenerationParam::descriptor() {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapGenerationParam& MapGenerationParam::default_instance() {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

MapGenerationParam* MapGenerationParam::New(::google::protobuf::Arena* arena) const {
  MapGenerationParam* n = new MapGenerationParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapGenerationParam::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.relative_map.MapGenerationParam)
  if (_has_bits_[0 / 32] & 7u) {
    default_left_width_ = 1.75;
    default_right_width_ = 1.75;
    default_speed_limit_ = 29.0576;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapGenerationParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.relative_map.MapGenerationParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double default_left_width = 1 [default = 1.75];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_default_left_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_left_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double default_right_width = 2 [default = 1.75];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_default_right_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_right_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double default_speed_limit = 3 [default = 29.0576];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_default_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.relative_map.MapGenerationParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.relative_map.MapGenerationParam)
  return false;
#undef DO_
}

void MapGenerationParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.relative_map.MapGenerationParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double default_left_width = 1 [default = 1.75];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->default_left_width(), output);
  }

  // optional double default_right_width = 2 [default = 1.75];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->default_right_width(), output);
  }

  // optional double default_speed_limit = 3 [default = 29.0576];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->default_speed_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.relative_map.MapGenerationParam)
}

::google::protobuf::uint8* MapGenerationParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.relative_map.MapGenerationParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double default_left_width = 1 [default = 1.75];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->default_left_width(), target);
  }

  // optional double default_right_width = 2 [default = 1.75];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->default_right_width(), target);
  }

  // optional double default_speed_limit = 3 [default = 29.0576];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->default_speed_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.relative_map.MapGenerationParam)
  return target;
}

size_t MapGenerationParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.relative_map.MapGenerationParam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double default_left_width = 1 [default = 1.75];
    if (has_default_left_width()) {
      total_size += 1 + 8;
    }

    // optional double default_right_width = 2 [default = 1.75];
    if (has_default_right_width()) {
      total_size += 1 + 8;
    }

    // optional double default_speed_limit = 3 [default = 29.0576];
    if (has_default_speed_limit()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapGenerationParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.relative_map.MapGenerationParam)
  GOOGLE_DCHECK_NE(&from, this);
  const MapGenerationParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapGenerationParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.relative_map.MapGenerationParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.relative_map.MapGenerationParam)
    MergeFrom(*source);
  }
}

void MapGenerationParam::MergeFrom(const MapGenerationParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.relative_map.MapGenerationParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      default_left_width_ = from.default_left_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      default_right_width_ = from.default_right_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      default_speed_limit_ = from.default_speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MapGenerationParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.relative_map.MapGenerationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapGenerationParam::CopyFrom(const MapGenerationParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.relative_map.MapGenerationParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapGenerationParam::IsInitialized() const {
  return true;
}

void MapGenerationParam::Swap(MapGenerationParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapGenerationParam::InternalSwap(MapGenerationParam* other) {
  std::swap(default_left_width_, other->default_left_width_);
  std::swap(default_right_width_, other->default_right_width_);
  std::swap(default_speed_limit_, other->default_speed_limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapGenerationParam::GetMetadata() const {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapGenerationParam

// optional double default_left_width = 1 [default = 1.75];
bool MapGenerationParam::has_default_left_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MapGenerationParam::set_has_default_left_width() {
  _has_bits_[0] |= 0x00000001u;
}
void MapGenerationParam::clear_has_default_left_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void MapGenerationParam::clear_default_left_width() {
  default_left_width_ = 1.75;
  clear_has_default_left_width();
}
double MapGenerationParam::default_left_width() const {
  // @@protoc_insertion_point(field_get:jmc_auto.relative_map.MapGenerationParam.default_left_width)
  return default_left_width_;
}
void MapGenerationParam::set_default_left_width(double value) {
  set_has_default_left_width();
  default_left_width_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.relative_map.MapGenerationParam.default_left_width)
}

// optional double default_right_width = 2 [default = 1.75];
bool MapGenerationParam::has_default_right_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MapGenerationParam::set_has_default_right_width() {
  _has_bits_[0] |= 0x00000002u;
}
void MapGenerationParam::clear_has_default_right_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void MapGenerationParam::clear_default_right_width() {
  default_right_width_ = 1.75;
  clear_has_default_right_width();
}
double MapGenerationParam::default_right_width() const {
  // @@protoc_insertion_point(field_get:jmc_auto.relative_map.MapGenerationParam.default_right_width)
  return default_right_width_;
}
void MapGenerationParam::set_default_right_width(double value) {
  set_has_default_right_width();
  default_right_width_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.relative_map.MapGenerationParam.default_right_width)
}

// optional double default_speed_limit = 3 [default = 29.0576];
bool MapGenerationParam::has_default_speed_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MapGenerationParam::set_has_default_speed_limit() {
  _has_bits_[0] |= 0x00000004u;
}
void MapGenerationParam::clear_has_default_speed_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
void MapGenerationParam::clear_default_speed_limit() {
  default_speed_limit_ = 29.0576;
  clear_has_default_speed_limit();
}
double MapGenerationParam::default_speed_limit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.relative_map.MapGenerationParam.default_speed_limit)
  return default_speed_limit_;
}
void MapGenerationParam::set_default_speed_limit(double value) {
  set_has_default_speed_limit();
  default_speed_limit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.relative_map.MapGenerationParam.default_speed_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationLaneConfig::kMinLaneMarkerQualityFieldNumber;
const int NavigationLaneConfig::kLaneSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationLaneConfig::NavigationLaneConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.relative_map.NavigationLaneConfig)
}
NavigationLaneConfig::NavigationLaneConfig(const NavigationLaneConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lane_source_, &from.lane_source_,
    reinterpret_cast<char*>(&min_lane_marker_quality_) -
    reinterpret_cast<char*>(&lane_source_) + sizeof(min_lane_marker_quality_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.relative_map.NavigationLaneConfig)
}

void NavigationLaneConfig::SharedCtor() {
  _cached_size_ = 0;
  lane_source_ = 1;
  min_lane_marker_quality_ = 0.5;
}

NavigationLaneConfig::~NavigationLaneConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.relative_map.NavigationLaneConfig)
  SharedDtor();
}

void NavigationLaneConfig::SharedDtor() {
}

void NavigationLaneConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavigationLaneConfig::descriptor() {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigationLaneConfig& NavigationLaneConfig::default_instance() {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

NavigationLaneConfig* NavigationLaneConfig::New(::google::protobuf::Arena* arena) const {
  NavigationLaneConfig* n = new NavigationLaneConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavigationLaneConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.relative_map.NavigationLaneConfig)
  if (_has_bits_[0 / 32] & 3u) {
    lane_source_ = 1;
    min_lane_marker_quality_ = 0.5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NavigationLaneConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.relative_map.NavigationLaneConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double min_lane_marker_quality = 1 [default = 0.5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_min_lane_marker_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_lane_marker_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::relative_map::NavigationLaneConfig_LaneSource_IsValid(value)) {
            set_lane_source(static_cast< ::jmc_auto::relative_map::NavigationLaneConfig_LaneSource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.relative_map.NavigationLaneConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.relative_map.NavigationLaneConfig)
  return false;
#undef DO_
}

void NavigationLaneConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.relative_map.NavigationLaneConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_lane_marker_quality = 1 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->min_lane_marker_quality(), output);
  }

  // optional .jmc_auto.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->lane_source(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.relative_map.NavigationLaneConfig)
}

::google::protobuf::uint8* NavigationLaneConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.relative_map.NavigationLaneConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double min_lane_marker_quality = 1 [default = 0.5];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->min_lane_marker_quality(), target);
  }

  // optional .jmc_auto.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->lane_source(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.relative_map.NavigationLaneConfig)
  return target;
}

size_t NavigationLaneConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.relative_map.NavigationLaneConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
    if (has_lane_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_source());
    }

    // optional double min_lane_marker_quality = 1 [default = 0.5];
    if (has_min_lane_marker_quality()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavigationLaneConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.relative_map.NavigationLaneConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationLaneConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationLaneConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.relative_map.NavigationLaneConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.relative_map.NavigationLaneConfig)
    MergeFrom(*source);
  }
}

void NavigationLaneConfig::MergeFrom(const NavigationLaneConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.relative_map.NavigationLaneConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      lane_source_ = from.lane_source_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_lane_marker_quality_ = from.min_lane_marker_quality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NavigationLaneConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.relative_map.NavigationLaneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationLaneConfig::CopyFrom(const NavigationLaneConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.relative_map.NavigationLaneConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationLaneConfig::IsInitialized() const {
  return true;
}

void NavigationLaneConfig::Swap(NavigationLaneConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigationLaneConfig::InternalSwap(NavigationLaneConfig* other) {
  std::swap(lane_source_, other->lane_source_);
  std::swap(min_lane_marker_quality_, other->min_lane_marker_quality_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavigationLaneConfig::GetMetadata() const {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NavigationLaneConfig

// optional double min_lane_marker_quality = 1 [default = 0.5];
bool NavigationLaneConfig::has_min_lane_marker_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NavigationLaneConfig::set_has_min_lane_marker_quality() {
  _has_bits_[0] |= 0x00000002u;
}
void NavigationLaneConfig::clear_has_min_lane_marker_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
void NavigationLaneConfig::clear_min_lane_marker_quality() {
  min_lane_marker_quality_ = 0.5;
  clear_has_min_lane_marker_quality();
}
double NavigationLaneConfig::min_lane_marker_quality() const {
  // @@protoc_insertion_point(field_get:jmc_auto.relative_map.NavigationLaneConfig.min_lane_marker_quality)
  return min_lane_marker_quality_;
}
void NavigationLaneConfig::set_min_lane_marker_quality(double value) {
  set_has_min_lane_marker_quality();
  min_lane_marker_quality_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.relative_map.NavigationLaneConfig.min_lane_marker_quality)
}

// optional .jmc_auto.relative_map.NavigationLaneConfig.LaneSource lane_source = 2;
bool NavigationLaneConfig::has_lane_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NavigationLaneConfig::set_has_lane_source() {
  _has_bits_[0] |= 0x00000001u;
}
void NavigationLaneConfig::clear_has_lane_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void NavigationLaneConfig::clear_lane_source() {
  lane_source_ = 1;
  clear_has_lane_source();
}
::jmc_auto::relative_map::NavigationLaneConfig_LaneSource NavigationLaneConfig::lane_source() const {
  // @@protoc_insertion_point(field_get:jmc_auto.relative_map.NavigationLaneConfig.lane_source)
  return static_cast< ::jmc_auto::relative_map::NavigationLaneConfig_LaneSource >(lane_source_);
}
void NavigationLaneConfig::set_lane_source(::jmc_auto::relative_map::NavigationLaneConfig_LaneSource value) {
  assert(::jmc_auto::relative_map::NavigationLaneConfig_LaneSource_IsValid(value));
  set_has_lane_source();
  lane_source_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.relative_map.NavigationLaneConfig.lane_source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelativeMapConfig::kMapParamFieldNumber;
const int RelativeMapConfig::kNavigationLaneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelativeMapConfig::RelativeMapConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.relative_map.RelativeMapConfig)
}
RelativeMapConfig::RelativeMapConfig(const RelativeMapConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_map_param()) {
    map_param_ = new ::jmc_auto::relative_map::MapGenerationParam(*from.map_param_);
  } else {
    map_param_ = NULL;
  }
  if (from.has_navigation_lane()) {
    navigation_lane_ = new ::jmc_auto::relative_map::NavigationLaneConfig(*from.navigation_lane_);
  } else {
    navigation_lane_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.relative_map.RelativeMapConfig)
}

void RelativeMapConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&map_param_, 0, reinterpret_cast<char*>(&navigation_lane_) -
    reinterpret_cast<char*>(&map_param_) + sizeof(navigation_lane_));
}

RelativeMapConfig::~RelativeMapConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.relative_map.RelativeMapConfig)
  SharedDtor();
}

void RelativeMapConfig::SharedDtor() {
  if (this != internal_default_instance()) {
    delete map_param_;
  }
  if (this != internal_default_instance()) {
    delete navigation_lane_;
  }
}

void RelativeMapConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelativeMapConfig::descriptor() {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RelativeMapConfig& RelativeMapConfig::default_instance() {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

RelativeMapConfig* RelativeMapConfig::New(::google::protobuf::Arena* arena) const {
  RelativeMapConfig* n = new RelativeMapConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RelativeMapConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.relative_map.RelativeMapConfig)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_map_param()) {
      GOOGLE_DCHECK(map_param_ != NULL);
      map_param_->::jmc_auto::relative_map::MapGenerationParam::Clear();
    }
    if (has_navigation_lane()) {
      GOOGLE_DCHECK(navigation_lane_ != NULL);
      navigation_lane_->::jmc_auto::relative_map::NavigationLaneConfig::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RelativeMapConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.relative_map.RelativeMapConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.relative_map.MapGenerationParam map_param = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.relative_map.NavigationLaneConfig navigation_lane = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_navigation_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.relative_map.RelativeMapConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.relative_map.RelativeMapConfig)
  return false;
#undef DO_
}

void RelativeMapConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.relative_map.RelativeMapConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.relative_map.MapGenerationParam map_param = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->map_param_, output);
  }

  // optional .jmc_auto.relative_map.NavigationLaneConfig navigation_lane = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->navigation_lane_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.relative_map.RelativeMapConfig)
}

::google::protobuf::uint8* RelativeMapConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.relative_map.RelativeMapConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.relative_map.MapGenerationParam map_param = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->map_param_, deterministic, target);
  }

  // optional .jmc_auto.relative_map.NavigationLaneConfig navigation_lane = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->navigation_lane_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.relative_map.RelativeMapConfig)
  return target;
}

size_t RelativeMapConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.relative_map.RelativeMapConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.relative_map.MapGenerationParam map_param = 1;
    if (has_map_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->map_param_);
    }

    // optional .jmc_auto.relative_map.NavigationLaneConfig navigation_lane = 2;
    if (has_navigation_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->navigation_lane_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelativeMapConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.relative_map.RelativeMapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RelativeMapConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RelativeMapConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.relative_map.RelativeMapConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.relative_map.RelativeMapConfig)
    MergeFrom(*source);
  }
}

void RelativeMapConfig::MergeFrom(const RelativeMapConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.relative_map.RelativeMapConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_map_param()->::jmc_auto::relative_map::MapGenerationParam::MergeFrom(from.map_param());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_navigation_lane()->::jmc_auto::relative_map::NavigationLaneConfig::MergeFrom(from.navigation_lane());
    }
  }
}

void RelativeMapConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.relative_map.RelativeMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelativeMapConfig::CopyFrom(const RelativeMapConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.relative_map.RelativeMapConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelativeMapConfig::IsInitialized() const {
  return true;
}

void RelativeMapConfig::Swap(RelativeMapConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelativeMapConfig::InternalSwap(RelativeMapConfig* other) {
  std::swap(map_param_, other->map_param_);
  std::swap(navigation_lane_, other->navigation_lane_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RelativeMapConfig::GetMetadata() const {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2frelative_5fmap_2fproto_2frelative_5fmap_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RelativeMapConfig

// optional .jmc_auto.relative_map.MapGenerationParam map_param = 1;
bool RelativeMapConfig::has_map_param() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RelativeMapConfig::set_has_map_param() {
  _has_bits_[0] |= 0x00000001u;
}
void RelativeMapConfig::clear_has_map_param() {
  _has_bits_[0] &= ~0x00000001u;
}
void RelativeMapConfig::clear_map_param() {
  if (map_param_ != NULL) map_param_->::jmc_auto::relative_map::MapGenerationParam::Clear();
  clear_has_map_param();
}
const ::jmc_auto::relative_map::MapGenerationParam& RelativeMapConfig::map_param() const {
  // @@protoc_insertion_point(field_get:jmc_auto.relative_map.RelativeMapConfig.map_param)
  return map_param_ != NULL ? *map_param_
                         : *::jmc_auto::relative_map::MapGenerationParam::internal_default_instance();
}
::jmc_auto::relative_map::MapGenerationParam* RelativeMapConfig::mutable_map_param() {
  set_has_map_param();
  if (map_param_ == NULL) {
    map_param_ = new ::jmc_auto::relative_map::MapGenerationParam;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.relative_map.RelativeMapConfig.map_param)
  return map_param_;
}
::jmc_auto::relative_map::MapGenerationParam* RelativeMapConfig::release_map_param() {
  // @@protoc_insertion_point(field_release:jmc_auto.relative_map.RelativeMapConfig.map_param)
  clear_has_map_param();
  ::jmc_auto::relative_map::MapGenerationParam* temp = map_param_;
  map_param_ = NULL;
  return temp;
}
void RelativeMapConfig::set_allocated_map_param(::jmc_auto::relative_map::MapGenerationParam* map_param) {
  delete map_param_;
  map_param_ = map_param;
  if (map_param) {
    set_has_map_param();
  } else {
    clear_has_map_param();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.relative_map.RelativeMapConfig.map_param)
}

// optional .jmc_auto.relative_map.NavigationLaneConfig navigation_lane = 2;
bool RelativeMapConfig::has_navigation_lane() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RelativeMapConfig::set_has_navigation_lane() {
  _has_bits_[0] |= 0x00000002u;
}
void RelativeMapConfig::clear_has_navigation_lane() {
  _has_bits_[0] &= ~0x00000002u;
}
void RelativeMapConfig::clear_navigation_lane() {
  if (navigation_lane_ != NULL) navigation_lane_->::jmc_auto::relative_map::NavigationLaneConfig::Clear();
  clear_has_navigation_lane();
}
const ::jmc_auto::relative_map::NavigationLaneConfig& RelativeMapConfig::navigation_lane() const {
  // @@protoc_insertion_point(field_get:jmc_auto.relative_map.RelativeMapConfig.navigation_lane)
  return navigation_lane_ != NULL ? *navigation_lane_
                         : *::jmc_auto::relative_map::NavigationLaneConfig::internal_default_instance();
}
::jmc_auto::relative_map::NavigationLaneConfig* RelativeMapConfig::mutable_navigation_lane() {
  set_has_navigation_lane();
  if (navigation_lane_ == NULL) {
    navigation_lane_ = new ::jmc_auto::relative_map::NavigationLaneConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.relative_map.RelativeMapConfig.navigation_lane)
  return navigation_lane_;
}
::jmc_auto::relative_map::NavigationLaneConfig* RelativeMapConfig::release_navigation_lane() {
  // @@protoc_insertion_point(field_release:jmc_auto.relative_map.RelativeMapConfig.navigation_lane)
  clear_has_navigation_lane();
  ::jmc_auto::relative_map::NavigationLaneConfig* temp = navigation_lane_;
  navigation_lane_ = NULL;
  return temp;
}
void RelativeMapConfig::set_allocated_navigation_lane(::jmc_auto::relative_map::NavigationLaneConfig* navigation_lane) {
  delete navigation_lane_;
  navigation_lane_ = navigation_lane;
  if (navigation_lane) {
    set_has_navigation_lane();
  } else {
    clear_has_navigation_lane();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.relative_map.RelativeMapConfig.navigation_lane)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace relative_map
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
