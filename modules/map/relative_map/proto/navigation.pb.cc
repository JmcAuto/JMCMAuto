// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/relative_map/proto/navigation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/map/relative_map/proto/navigation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace relative_map {
class NavigationPathDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NavigationPath> {
} _NavigationPath_default_instance_;
class NavigationInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NavigationInfo> {
} _NavigationInfo_default_instance_;
class MapMsg_NavigationPathEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MapMsg::MapMsg_NavigationPathEntry> {
} _MapMsg_NavigationPathEntry_default_instance_;
class MapMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MapMsg> {
} _MapMsg_default_instance_;

namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationPath, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationPath, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationPath, path_priority_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationInfo, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationInfo, navigation_path_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMsg, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMsg, hdmap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMsg, navigation_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMsg, lane_marker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMsg, localization_),
  0,
  1,
  ~0u,
  2,
  3,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(NavigationPath)},
  { 9, 16, sizeof(NavigationInfo)},
  { 18, 28, sizeof(MapMsg)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NavigationPath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NavigationInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MapMsg_NavigationPathEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MapMsg_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/map/relative_map/proto/navigation.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
file_level_metadata[2].reflection = MapMsg::MapMsg_NavigationPathEntry::CreateReflection(file_level_metadata[2].descriptor, _MapMsg_NavigationPathEntry_default_instance_.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _NavigationPath_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _NavigationInfo_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _MapMsg_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::InitDefaults();
  ::jmc_auto::localization::protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_2eproto::InitDefaults();
  ::jmc_auto::perception::protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::InitDefaults();
  _NavigationPath_default_instance_.DefaultConstruct();
  _NavigationInfo_default_instance_.DefaultConstruct();
  _MapMsg_NavigationPathEntry_default_instance_.DefaultConstruct();
  _MapMsg_default_instance_.DefaultConstruct();
  _NavigationPath_default_instance_.get_mutable()->path_ = const_cast< ::jmc_auto::common::Path*>(
      ::jmc_auto::common::Path::internal_default_instance());
  _NavigationInfo_default_instance_.get_mutable()->header_ = const_cast< ::jmc_auto::common::Header*>(
      ::jmc_auto::common::Header::internal_default_instance());
  _MapMsg_NavigationPathEntry_default_instance_.get_mutable()->set_default_instance(_MapMsg_NavigationPathEntry_default_instance_.get_mutable());
  _MapMsg_NavigationPathEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _MapMsg_default_instance_.get_mutable()->header_ = const_cast< ::jmc_auto::common::Header*>(
      ::jmc_auto::common::Header::internal_default_instance());
  _MapMsg_default_instance_.get_mutable()->hdmap_ = const_cast< ::jmc_auto::hdmap::Map*>(
      ::jmc_auto::hdmap::Map::internal_default_instance());
  _MapMsg_default_instance_.get_mutable()->lane_marker_ = const_cast< ::jmc_auto::perception::LaneMarkers*>(
      ::jmc_auto::perception::LaneMarkers::internal_default_instance());
  _MapMsg_default_instance_.get_mutable()->localization_ = const_cast< ::jmc_auto::localization::LocalizationEstimate*>(
      ::jmc_auto::localization::LocalizationEstimate::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n/modules/map/relative_map/proto/navigat"
      "ion.proto\022\025jmc_auto.relative_map\032!module"
      "s/common/proto/header.proto\032$modules/com"
      "mon/proto/pnc_point.proto\032-modules/local"
      "ization/proto/localization.proto\032\033module"
      "s/map/proto/map.proto\0322modules/perceptio"
      "n/proto/perception_obstacle.proto\"L\n\016Nav"
      "igationPath\022#\n\004path\030\001 \001(\0132\025.jmc_auto.com"
      "mon.Path\022\025\n\rpath_priority\030\002 \001(\r\"y\n\016Navig"
      "ationInfo\022\'\n\006header\030\001 \001(\0132\027.jmc_auto.com"
      "mon.Header\022>\n\017navigation_path\030\002 \003(\0132%.jm"
      "c_auto.relative_map.NavigationPath\"\371\002\n\006M"
      "apMsg\022\'\n\006header\030\001 \001(\0132\027.jmc_auto.common."
      "Header\022\"\n\005hdmap\030\002 \001(\0132\023.jmc_auto.hdmap.M"
      "ap\022J\n\017navigation_path\030\003 \003(\01321.jmc_auto.r"
      "elative_map.MapMsg.NavigationPathEntry\0225"
      "\n\013lane_marker\030\004 \001(\0132 .jmc_auto.perceptio"
      "n.LaneMarkers\022A\n\014localization\030\005 \001(\0132+.jm"
      "c_auto.localization.LocalizationEstimate"
      "\032\\\n\023NavigationPathEntry\022\013\n\003key\030\001 \001(\t\0224\n\005"
      "value\030\002 \001(\0132%.jmc_auto.relative_map.Navi"
      "gationPath:\0028\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 854);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/map/relative_map/proto/navigation.proto", &protobuf_RegisterTypes);
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fpnc_5fpoint_2eproto::AddDescriptors();
  ::jmc_auto::localization::protobuf_modules_2flocalization_2fproto_2flocalization_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_2eproto::AddDescriptors();
  ::jmc_auto::perception::protobuf_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationPath::kPathFieldNumber;
const int NavigationPath::kPathPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationPath::NavigationPath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.relative_map.NavigationPath)
}
NavigationPath::NavigationPath(const NavigationPath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_path()) {
    path_ = new ::jmc_auto::common::Path(*from.path_);
  } else {
    path_ = NULL;
  }
  path_priority_ = from.path_priority_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.relative_map.NavigationPath)
}

void NavigationPath::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&path_, 0, reinterpret_cast<char*>(&path_priority_) -
    reinterpret_cast<char*>(&path_) + sizeof(path_priority_));
}

NavigationPath::~NavigationPath() {
  // @@protoc_insertion_point(destructor:jmc_auto.relative_map.NavigationPath)
  SharedDtor();
}

void NavigationPath::SharedDtor() {
  if (this != internal_default_instance()) {
    delete path_;
  }
}

void NavigationPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavigationPath::descriptor() {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigationPath& NavigationPath::default_instance() {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::InitDefaults();
  return *internal_default_instance();
}

NavigationPath* NavigationPath::New(::google::protobuf::Arena* arena) const {
  NavigationPath* n = new NavigationPath;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavigationPath::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.relative_map.NavigationPath)
  if (has_path()) {
    GOOGLE_DCHECK(path_ != NULL);
    path_->::jmc_auto::common::Path::Clear();
  }
  path_priority_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NavigationPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.relative_map.NavigationPath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.common.Path path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 path_priority = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_path_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &path_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.relative_map.NavigationPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.relative_map.NavigationPath)
  return false;
#undef DO_
}

void NavigationPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.relative_map.NavigationPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Path path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->path_, output);
  }

  // optional uint32 path_priority = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->path_priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.relative_map.NavigationPath)
}

::google::protobuf::uint8* NavigationPath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.relative_map.NavigationPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Path path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->path_, deterministic, target);
  }

  // optional uint32 path_priority = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->path_priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.relative_map.NavigationPath)
  return target;
}

size_t NavigationPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.relative_map.NavigationPath)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.common.Path path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->path_);
    }

    // optional uint32 path_priority = 2;
    if (has_path_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->path_priority());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavigationPath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.relative_map.NavigationPath)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationPath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationPath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.relative_map.NavigationPath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.relative_map.NavigationPath)
    MergeFrom(*source);
  }
}

void NavigationPath::MergeFrom(const NavigationPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.relative_map.NavigationPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_path()->::jmc_auto::common::Path::MergeFrom(from.path());
    }
    if (cached_has_bits & 0x00000002u) {
      path_priority_ = from.path_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NavigationPath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.relative_map.NavigationPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationPath::CopyFrom(const NavigationPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.relative_map.NavigationPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationPath::IsInitialized() const {
  return true;
}

void NavigationPath::Swap(NavigationPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigationPath::InternalSwap(NavigationPath* other) {
  std::swap(path_, other->path_);
  std::swap(path_priority_, other->path_priority_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavigationPath::GetMetadata() const {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NavigationPath

// optional .jmc_auto.common.Path path = 1;
bool NavigationPath::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NavigationPath::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
void NavigationPath::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void NavigationPath::clear_path() {
  if (path_ != NULL) path_->::jmc_auto::common::Path::Clear();
  clear_has_path();
}
const ::jmc_auto::common::Path& NavigationPath::path() const {
  // @@protoc_insertion_point(field_get:jmc_auto.relative_map.NavigationPath.path)
  return path_ != NULL ? *path_
                         : *::jmc_auto::common::Path::internal_default_instance();
}
::jmc_auto::common::Path* NavigationPath::mutable_path() {
  set_has_path();
  if (path_ == NULL) {
    path_ = new ::jmc_auto::common::Path;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.relative_map.NavigationPath.path)
  return path_;
}
::jmc_auto::common::Path* NavigationPath::release_path() {
  // @@protoc_insertion_point(field_release:jmc_auto.relative_map.NavigationPath.path)
  clear_has_path();
  ::jmc_auto::common::Path* temp = path_;
  path_ = NULL;
  return temp;
}
void NavigationPath::set_allocated_path(::jmc_auto::common::Path* path) {
  delete path_;
  path_ = path;
  if (path) {
    set_has_path();
  } else {
    clear_has_path();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.relative_map.NavigationPath.path)
}

// optional uint32 path_priority = 2;
bool NavigationPath::has_path_priority() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NavigationPath::set_has_path_priority() {
  _has_bits_[0] |= 0x00000002u;
}
void NavigationPath::clear_has_path_priority() {
  _has_bits_[0] &= ~0x00000002u;
}
void NavigationPath::clear_path_priority() {
  path_priority_ = 0u;
  clear_has_path_priority();
}
::google::protobuf::uint32 NavigationPath::path_priority() const {
  // @@protoc_insertion_point(field_get:jmc_auto.relative_map.NavigationPath.path_priority)
  return path_priority_;
}
void NavigationPath::set_path_priority(::google::protobuf::uint32 value) {
  set_has_path_priority();
  path_priority_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.relative_map.NavigationPath.path_priority)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavigationInfo::kHeaderFieldNumber;
const int NavigationInfo::kNavigationPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavigationInfo::NavigationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.relative_map.NavigationInfo)
}
NavigationInfo::NavigationInfo(const NavigationInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      navigation_path_(from.navigation_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::jmc_auto::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.relative_map.NavigationInfo)
}

void NavigationInfo::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
}

NavigationInfo::~NavigationInfo() {
  // @@protoc_insertion_point(destructor:jmc_auto.relative_map.NavigationInfo)
  SharedDtor();
}

void NavigationInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void NavigationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavigationInfo::descriptor() {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavigationInfo& NavigationInfo::default_instance() {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::InitDefaults();
  return *internal_default_instance();
}

NavigationInfo* NavigationInfo::New(::google::protobuf::Arena* arena) const {
  NavigationInfo* n = new NavigationInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavigationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.relative_map.NavigationInfo)
  navigation_path_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::jmc_auto::common::Header::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NavigationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.relative_map.NavigationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.relative_map.NavigationPath navigation_path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_navigation_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.relative_map.NavigationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.relative_map.NavigationInfo)
  return false;
#undef DO_
}

void NavigationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.relative_map.NavigationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .jmc_auto.relative_map.NavigationPath navigation_path = 2;
  for (unsigned int i = 0, n = this->navigation_path_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->navigation_path(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.relative_map.NavigationInfo)
}

::google::protobuf::uint8* NavigationInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.relative_map.NavigationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .jmc_auto.relative_map.NavigationPath navigation_path = 2;
  for (unsigned int i = 0, n = this->navigation_path_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->navigation_path(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.relative_map.NavigationInfo)
  return target;
}

size_t NavigationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.relative_map.NavigationInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.relative_map.NavigationPath navigation_path = 2;
  {
    unsigned int count = this->navigation_path_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->navigation_path(i));
    }
  }

  // optional .jmc_auto.common.Header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavigationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.relative_map.NavigationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavigationInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.relative_map.NavigationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.relative_map.NavigationInfo)
    MergeFrom(*source);
  }
}

void NavigationInfo::MergeFrom(const NavigationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.relative_map.NavigationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  navigation_path_.MergeFrom(from.navigation_path_);
  if (from.has_header()) {
    mutable_header()->::jmc_auto::common::Header::MergeFrom(from.header());
  }
}

void NavigationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.relative_map.NavigationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationInfo::CopyFrom(const NavigationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.relative_map.NavigationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationInfo::IsInitialized() const {
  return true;
}

void NavigationInfo::Swap(NavigationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavigationInfo::InternalSwap(NavigationInfo* other) {
  navigation_path_.InternalSwap(&other->navigation_path_);
  std::swap(header_, other->header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavigationInfo::GetMetadata() const {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NavigationInfo

// optional .jmc_auto.common.Header header = 1;
bool NavigationInfo::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NavigationInfo::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void NavigationInfo::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void NavigationInfo::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
const ::jmc_auto::common::Header& NavigationInfo::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.relative_map.NavigationInfo.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
::jmc_auto::common::Header* NavigationInfo::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.relative_map.NavigationInfo.header)
  return header_;
}
::jmc_auto::common::Header* NavigationInfo::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.relative_map.NavigationInfo.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void NavigationInfo::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.relative_map.NavigationInfo.header)
}

// repeated .jmc_auto.relative_map.NavigationPath navigation_path = 2;
int NavigationInfo::navigation_path_size() const {
  return navigation_path_.size();
}
void NavigationInfo::clear_navigation_path() {
  navigation_path_.Clear();
}
const ::jmc_auto::relative_map::NavigationPath& NavigationInfo::navigation_path(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.relative_map.NavigationInfo.navigation_path)
  return navigation_path_.Get(index);
}
::jmc_auto::relative_map::NavigationPath* NavigationInfo::mutable_navigation_path(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.relative_map.NavigationInfo.navigation_path)
  return navigation_path_.Mutable(index);
}
::jmc_auto::relative_map::NavigationPath* NavigationInfo::add_navigation_path() {
  // @@protoc_insertion_point(field_add:jmc_auto.relative_map.NavigationInfo.navigation_path)
  return navigation_path_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::relative_map::NavigationPath >*
NavigationInfo::mutable_navigation_path() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.relative_map.NavigationInfo.navigation_path)
  return &navigation_path_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::relative_map::NavigationPath >&
NavigationInfo::navigation_path() const {
  // @@protoc_insertion_point(field_list:jmc_auto.relative_map.NavigationInfo.navigation_path)
  return navigation_path_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

MapMsg::MapMsg_NavigationPathEntry::MapMsg_NavigationPathEntry() {}
MapMsg::MapMsg_NavigationPathEntry::MapMsg_NavigationPathEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata MapMsg::MapMsg_NavigationPathEntry::GetMetadata() const {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::file_level_metadata[2];
}
void MapMsg::MapMsg_NavigationPathEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void MapMsg::MapMsg_NavigationPathEntry::MergeFrom(const MapMsg_NavigationPathEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapMsg::kHeaderFieldNumber;
const int MapMsg::kHdmapFieldNumber;
const int MapMsg::kNavigationPathFieldNumber;
const int MapMsg::kLaneMarkerFieldNumber;
const int MapMsg::kLocalizationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapMsg::MapMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.relative_map.MapMsg)
}
MapMsg::MapMsg(const MapMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  navigation_path_.MergeFrom(from.navigation_path_);
  if (from.has_header()) {
    header_ = new ::jmc_auto::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_hdmap()) {
    hdmap_ = new ::jmc_auto::hdmap::Map(*from.hdmap_);
  } else {
    hdmap_ = NULL;
  }
  if (from.has_lane_marker()) {
    lane_marker_ = new ::jmc_auto::perception::LaneMarkers(*from.lane_marker_);
  } else {
    lane_marker_ = NULL;
  }
  if (from.has_localization()) {
    localization_ = new ::jmc_auto::localization::LocalizationEstimate(*from.localization_);
  } else {
    localization_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.relative_map.MapMsg)
}

void MapMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&localization_) -
    reinterpret_cast<char*>(&header_) + sizeof(localization_));
}

MapMsg::~MapMsg() {
  // @@protoc_insertion_point(destructor:jmc_auto.relative_map.MapMsg)
  SharedDtor();
}

void MapMsg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete hdmap_;
  }
  if (this != internal_default_instance()) {
    delete lane_marker_;
  }
  if (this != internal_default_instance()) {
    delete localization_;
  }
}

void MapMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapMsg::descriptor() {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapMsg& MapMsg::default_instance() {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::InitDefaults();
  return *internal_default_instance();
}

MapMsg* MapMsg::New(::google::protobuf::Arena* arena) const {
  MapMsg* n = new MapMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.relative_map.MapMsg)
  navigation_path_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::jmc_auto::common::Header::Clear();
    }
    if (has_hdmap()) {
      GOOGLE_DCHECK(hdmap_ != NULL);
      hdmap_->::jmc_auto::hdmap::Map::Clear();
    }
    if (has_lane_marker()) {
      GOOGLE_DCHECK(lane_marker_ != NULL);
      lane_marker_->::jmc_auto::perception::LaneMarkers::Clear();
    }
    if (has_localization()) {
      GOOGLE_DCHECK(localization_ != NULL);
      localization_->::jmc_auto::localization::LocalizationEstimate::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.relative_map.MapMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.Map hdmap = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hdmap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .jmc_auto.relative_map.NavigationPath> navigation_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          MapMsg_NavigationPathEntry::Parser< ::google::protobuf::internal::MapField<
              MapMsg_NavigationPathEntry,
              ::std::string, ::jmc_auto::relative_map::NavigationPath,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::jmc_auto::relative_map::NavigationPath > > parser(&navigation_path_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), parser.key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.relative_map.MapMsg.NavigationPathEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.perception.LaneMarkers lane_marker = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane_marker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.localization.LocalizationEstimate localization = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_localization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.relative_map.MapMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.relative_map.MapMsg)
  return false;
#undef DO_
}

void MapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.relative_map.MapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional .jmc_auto.hdmap.Map hdmap = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->hdmap_, output);
  }

  // map<string, .jmc_auto.relative_map.NavigationPath> navigation_path = 3;
  if (!this->navigation_path().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::relative_map::NavigationPath >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.relative_map.MapMsg.NavigationPathEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->navigation_path().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->navigation_path().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::relative_map::NavigationPath >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::relative_map::NavigationPath >::const_iterator
          it = this->navigation_path().begin();
          it != this->navigation_path().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MapMsg_NavigationPathEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(navigation_path_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMsg_NavigationPathEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::relative_map::NavigationPath >::const_iterator
          it = this->navigation_path().begin();
          it != this->navigation_path().end(); ++it) {
        entry.reset(navigation_path_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .jmc_auto.perception.LaneMarkers lane_marker = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->lane_marker_, output);
  }

  // optional .jmc_auto.localization.LocalizationEstimate localization = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->localization_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.relative_map.MapMsg)
}

::google::protobuf::uint8* MapMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.relative_map.MapMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional .jmc_auto.hdmap.Map hdmap = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->hdmap_, deterministic, target);
  }

  // map<string, .jmc_auto.relative_map.NavigationPath> navigation_path = 3;
  if (!this->navigation_path().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::relative_map::NavigationPath >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), p->first.length(),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "jmc_auto.relative_map.MapMsg.NavigationPathEntry.key");
      }
    };

    if (deterministic &&
        this->navigation_path().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->navigation_path().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::jmc_auto::relative_map::NavigationPath >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::relative_map::NavigationPath >::const_iterator
          it = this->navigation_path().begin();
          it != this->navigation_path().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<MapMsg_NavigationPathEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(navigation_path_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MapMsg_NavigationPathEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::jmc_auto::relative_map::NavigationPath >::const_iterator
          it = this->navigation_path().begin();
          it != this->navigation_path().end(); ++it) {
        entry.reset(navigation_path_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // optional .jmc_auto.perception.LaneMarkers lane_marker = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->lane_marker_, deterministic, target);
  }

  // optional .jmc_auto.localization.LocalizationEstimate localization = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->localization_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.relative_map.MapMsg)
  return target;
}

size_t MapMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.relative_map.MapMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // map<string, .jmc_auto.relative_map.NavigationPath> navigation_path = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->navigation_path_size());
  {
    ::google::protobuf::scoped_ptr<MapMsg_NavigationPathEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::jmc_auto::relative_map::NavigationPath >::const_iterator
        it = this->navigation_path().begin();
        it != this->navigation_path().end(); ++it) {
      entry.reset(navigation_path_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .jmc_auto.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .jmc_auto.hdmap.Map hdmap = 2;
    if (has_hdmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hdmap_);
    }

    // optional .jmc_auto.perception.LaneMarkers lane_marker = 4;
    if (has_lane_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lane_marker_);
    }

    // optional .jmc_auto.localization.LocalizationEstimate localization = 5;
    if (has_localization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->localization_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.relative_map.MapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const MapMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.relative_map.MapMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.relative_map.MapMsg)
    MergeFrom(*source);
  }
}

void MapMsg::MergeFrom(const MapMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.relative_map.MapMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  navigation_path_.MergeFrom(from.navigation_path_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::jmc_auto::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_hdmap()->::jmc_auto::hdmap::Map::MergeFrom(from.hdmap());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_lane_marker()->::jmc_auto::perception::LaneMarkers::MergeFrom(from.lane_marker());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_localization()->::jmc_auto::localization::LocalizationEstimate::MergeFrom(from.localization());
    }
  }
}

void MapMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.relative_map.MapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapMsg::CopyFrom(const MapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.relative_map.MapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapMsg::IsInitialized() const {
  return true;
}

void MapMsg::Swap(MapMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapMsg::InternalSwap(MapMsg* other) {
  navigation_path_.Swap(&other->navigation_path_);
  std::swap(header_, other->header_);
  std::swap(hdmap_, other->hdmap_);
  std::swap(lane_marker_, other->lane_marker_);
  std::swap(localization_, other->localization_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapMsg::GetMetadata() const {
  protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2frelative_5fmap_2fproto_2fnavigation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapMsg

// optional .jmc_auto.common.Header header = 1;
bool MapMsg::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MapMsg::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void MapMsg::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void MapMsg::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
const ::jmc_auto::common::Header& MapMsg::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.relative_map.MapMsg.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
::jmc_auto::common::Header* MapMsg::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.relative_map.MapMsg.header)
  return header_;
}
::jmc_auto::common::Header* MapMsg::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.relative_map.MapMsg.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void MapMsg::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.relative_map.MapMsg.header)
}

// optional .jmc_auto.hdmap.Map hdmap = 2;
bool MapMsg::has_hdmap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MapMsg::set_has_hdmap() {
  _has_bits_[0] |= 0x00000002u;
}
void MapMsg::clear_has_hdmap() {
  _has_bits_[0] &= ~0x00000002u;
}
void MapMsg::clear_hdmap() {
  if (hdmap_ != NULL) hdmap_->::jmc_auto::hdmap::Map::Clear();
  clear_has_hdmap();
}
const ::jmc_auto::hdmap::Map& MapMsg::hdmap() const {
  // @@protoc_insertion_point(field_get:jmc_auto.relative_map.MapMsg.hdmap)
  return hdmap_ != NULL ? *hdmap_
                         : *::jmc_auto::hdmap::Map::internal_default_instance();
}
::jmc_auto::hdmap::Map* MapMsg::mutable_hdmap() {
  set_has_hdmap();
  if (hdmap_ == NULL) {
    hdmap_ = new ::jmc_auto::hdmap::Map;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.relative_map.MapMsg.hdmap)
  return hdmap_;
}
::jmc_auto::hdmap::Map* MapMsg::release_hdmap() {
  // @@protoc_insertion_point(field_release:jmc_auto.relative_map.MapMsg.hdmap)
  clear_has_hdmap();
  ::jmc_auto::hdmap::Map* temp = hdmap_;
  hdmap_ = NULL;
  return temp;
}
void MapMsg::set_allocated_hdmap(::jmc_auto::hdmap::Map* hdmap) {
  delete hdmap_;
  hdmap_ = hdmap;
  if (hdmap) {
    set_has_hdmap();
  } else {
    clear_has_hdmap();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.relative_map.MapMsg.hdmap)
}

// map<string, .jmc_auto.relative_map.NavigationPath> navigation_path = 3;
int MapMsg::navigation_path_size() const {
  return navigation_path_.size();
}
void MapMsg::clear_navigation_path() {
  navigation_path_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::jmc_auto::relative_map::NavigationPath >&
MapMsg::navigation_path() const {
  // @@protoc_insertion_point(field_map:jmc_auto.relative_map.MapMsg.navigation_path)
  return navigation_path_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::jmc_auto::relative_map::NavigationPath >*
MapMsg::mutable_navigation_path() {
  // @@protoc_insertion_point(field_mutable_map:jmc_auto.relative_map.MapMsg.navigation_path)
  return navigation_path_.MutableMap();
}

// optional .jmc_auto.perception.LaneMarkers lane_marker = 4;
bool MapMsg::has_lane_marker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MapMsg::set_has_lane_marker() {
  _has_bits_[0] |= 0x00000004u;
}
void MapMsg::clear_has_lane_marker() {
  _has_bits_[0] &= ~0x00000004u;
}
void MapMsg::clear_lane_marker() {
  if (lane_marker_ != NULL) lane_marker_->::jmc_auto::perception::LaneMarkers::Clear();
  clear_has_lane_marker();
}
const ::jmc_auto::perception::LaneMarkers& MapMsg::lane_marker() const {
  // @@protoc_insertion_point(field_get:jmc_auto.relative_map.MapMsg.lane_marker)
  return lane_marker_ != NULL ? *lane_marker_
                         : *::jmc_auto::perception::LaneMarkers::internal_default_instance();
}
::jmc_auto::perception::LaneMarkers* MapMsg::mutable_lane_marker() {
  set_has_lane_marker();
  if (lane_marker_ == NULL) {
    lane_marker_ = new ::jmc_auto::perception::LaneMarkers;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.relative_map.MapMsg.lane_marker)
  return lane_marker_;
}
::jmc_auto::perception::LaneMarkers* MapMsg::release_lane_marker() {
  // @@protoc_insertion_point(field_release:jmc_auto.relative_map.MapMsg.lane_marker)
  clear_has_lane_marker();
  ::jmc_auto::perception::LaneMarkers* temp = lane_marker_;
  lane_marker_ = NULL;
  return temp;
}
void MapMsg::set_allocated_lane_marker(::jmc_auto::perception::LaneMarkers* lane_marker) {
  delete lane_marker_;
  lane_marker_ = lane_marker;
  if (lane_marker) {
    set_has_lane_marker();
  } else {
    clear_has_lane_marker();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.relative_map.MapMsg.lane_marker)
}

// optional .jmc_auto.localization.LocalizationEstimate localization = 5;
bool MapMsg::has_localization() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MapMsg::set_has_localization() {
  _has_bits_[0] |= 0x00000008u;
}
void MapMsg::clear_has_localization() {
  _has_bits_[0] &= ~0x00000008u;
}
void MapMsg::clear_localization() {
  if (localization_ != NULL) localization_->::jmc_auto::localization::LocalizationEstimate::Clear();
  clear_has_localization();
}
const ::jmc_auto::localization::LocalizationEstimate& MapMsg::localization() const {
  // @@protoc_insertion_point(field_get:jmc_auto.relative_map.MapMsg.localization)
  return localization_ != NULL ? *localization_
                         : *::jmc_auto::localization::LocalizationEstimate::internal_default_instance();
}
::jmc_auto::localization::LocalizationEstimate* MapMsg::mutable_localization() {
  set_has_localization();
  if (localization_ == NULL) {
    localization_ = new ::jmc_auto::localization::LocalizationEstimate;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.relative_map.MapMsg.localization)
  return localization_;
}
::jmc_auto::localization::LocalizationEstimate* MapMsg::release_localization() {
  // @@protoc_insertion_point(field_release:jmc_auto.relative_map.MapMsg.localization)
  clear_has_localization();
  ::jmc_auto::localization::LocalizationEstimate* temp = localization_;
  localization_ = NULL;
  return temp;
}
void MapMsg::set_allocated_localization(::jmc_auto::localization::LocalizationEstimate* localization) {
  delete localization_;
  localization_ = localization;
  if (localization) {
    set_has_localization();
  } else {
    clear_has_localization();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.relative_map.MapMsg.localization)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace relative_map
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
