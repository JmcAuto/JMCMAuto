// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_junction.proto

#ifndef PROTOBUF_modules_2fmap_2fproto_2fmap_5fjunction_2eproto__INCLUDED
#define PROTOBUF_modules_2fmap_2fproto_2fmap_5fjunction_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/map/proto/map_id.pb.h"
#include "modules/map/proto/map_geometry.pb.h"
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace hdmap {
class Curve;
class CurveDefaultTypeInternal;
extern CurveDefaultTypeInternal _Curve_default_instance_;
class CurveSegment;
class CurveSegmentDefaultTypeInternal;
extern CurveSegmentDefaultTypeInternal _CurveSegment_default_instance_;
class Id;
class IdDefaultTypeInternal;
extern IdDefaultTypeInternal _Id_default_instance_;
class Junction;
class JunctionDefaultTypeInternal;
extern JunctionDefaultTypeInternal _Junction_default_instance_;
class LineSegment;
class LineSegmentDefaultTypeInternal;
extern LineSegmentDefaultTypeInternal _LineSegment_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
}  // namespace hdmap
}  // namespace jmc_auto

namespace jmc_auto {
namespace hdmap {

namespace protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto

enum Junction_Type {
  Junction_Type_UNKNOWN = 0,
  Junction_Type_IN_ROAD = 1,
  Junction_Type_CROSS_ROAD = 2
};
bool Junction_Type_IsValid(int value);
const Junction_Type Junction_Type_Type_MIN = Junction_Type_UNKNOWN;
const Junction_Type Junction_Type_Type_MAX = Junction_Type_CROSS_ROAD;
const int Junction_Type_Type_ARRAYSIZE = Junction_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Junction_Type_descriptor();
inline const ::std::string& Junction_Type_Name(Junction_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Junction_Type_descriptor(), value);
}
inline bool Junction_Type_Parse(
    const ::std::string& name, Junction_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Junction_Type>(
    Junction_Type_descriptor(), name, value);
}
// ===================================================================

class Junction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.hdmap.Junction) */ {
 public:
  Junction();
  virtual ~Junction();

  Junction(const Junction& from);

  inline Junction& operator=(const Junction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Junction& default_instance();

  static inline const Junction* internal_default_instance() {
    return reinterpret_cast<const Junction*>(
               &_Junction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Junction* other);

  // implements Message ----------------------------------------------

  inline Junction* New() const PROTOBUF_FINAL { return New(NULL); }

  Junction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Junction& from);
  void MergeFrom(const Junction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Junction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Junction_Type Type;
  static const Type UNKNOWN =
    Junction_Type_UNKNOWN;
  static const Type IN_ROAD =
    Junction_Type_IN_ROAD;
  static const Type CROSS_ROAD =
    Junction_Type_CROSS_ROAD;
  static inline bool Type_IsValid(int value) {
    return Junction_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Junction_Type_Type_MIN;
  static const Type Type_MAX =
    Junction_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Junction_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Junction_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Junction_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Junction_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.hdmap.Id overlap_id = 3;
  int overlap_id_size() const;
  void clear_overlap_id();
  static const int kOverlapIdFieldNumber = 3;
  const ::jmc_auto::hdmap::Id& overlap_id(int index) const;
  ::jmc_auto::hdmap::Id* mutable_overlap_id(int index);
  ::jmc_auto::hdmap::Id* add_overlap_id();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
      mutable_overlap_id();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
      overlap_id() const;

  // repeated .jmc_auto.hdmap.Id crosswalk_id = 4;
  int crosswalk_id_size() const;
  void clear_crosswalk_id();
  static const int kCrosswalkIdFieldNumber = 4;
  const ::jmc_auto::hdmap::Id& crosswalk_id(int index) const;
  ::jmc_auto::hdmap::Id* mutable_crosswalk_id(int index);
  ::jmc_auto::hdmap::Id* add_crosswalk_id();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
      mutable_crosswalk_id();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
      crosswalk_id() const;

  // repeated .jmc_auto.hdmap.Id lane_id = 6;
  int lane_id_size() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 6;
  const ::jmc_auto::hdmap::Id& lane_id(int index) const;
  ::jmc_auto::hdmap::Id* mutable_lane_id(int index);
  ::jmc_auto::hdmap::Id* add_lane_id();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
      mutable_lane_id();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
      lane_id() const;

  // optional .jmc_auto.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::jmc_auto::hdmap::Id& id() const;
  ::jmc_auto::hdmap::Id* mutable_id();
  ::jmc_auto::hdmap::Id* release_id();
  void set_allocated_id(::jmc_auto::hdmap::Id* id);

  // optional .jmc_auto.hdmap.Polygon polygon = 2;
  bool has_polygon() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 2;
  const ::jmc_auto::hdmap::Polygon& polygon() const;
  ::jmc_auto::hdmap::Polygon* mutable_polygon();
  ::jmc_auto::hdmap::Polygon* release_polygon();
  void set_allocated_polygon(::jmc_auto::hdmap::Polygon* polygon);

  // optional .jmc_auto.hdmap.Junction.Type type = 7;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::jmc_auto::hdmap::Junction_Type type() const;
  void set_type(::jmc_auto::hdmap::Junction_Type value);

  // optional int32 num_road_segments = 5 [default = 4];
  bool has_num_road_segments() const;
  void clear_num_road_segments();
  static const int kNumRoadSegmentsFieldNumber = 5;
  ::google::protobuf::int32 num_road_segments() const;
  void set_num_road_segments(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.hdmap.Junction)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_polygon();
  void clear_has_polygon();
  void set_has_num_road_segments();
  void clear_has_num_road_segments();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id > overlap_id_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id > crosswalk_id_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id > lane_id_;
  ::jmc_auto::hdmap::Id* id_;
  ::jmc_auto::hdmap::Polygon* polygon_;
  int type_;
  ::google::protobuf::int32 num_road_segments_;
  friend struct protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Junction

// optional .jmc_auto.hdmap.Id id = 1;
inline bool Junction::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Junction::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Junction::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Junction::clear_id() {
  if (id_ != NULL) id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_id();
}
inline const ::jmc_auto::hdmap::Id& Junction::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Junction.id)
  return id_ != NULL ? *id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
inline ::jmc_auto::hdmap::Id* Junction::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Junction.id)
  return id_;
}
inline ::jmc_auto::hdmap::Id* Junction::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Junction.id)
  clear_has_id();
  ::jmc_auto::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Junction::set_allocated_id(::jmc_auto::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Junction.id)
}

// optional .jmc_auto.hdmap.Polygon polygon = 2;
inline bool Junction::has_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Junction::set_has_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Junction::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Junction::clear_polygon() {
  if (polygon_ != NULL) polygon_->::jmc_auto::hdmap::Polygon::Clear();
  clear_has_polygon();
}
inline const ::jmc_auto::hdmap::Polygon& Junction::polygon() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Junction.polygon)
  return polygon_ != NULL ? *polygon_
                         : *::jmc_auto::hdmap::Polygon::internal_default_instance();
}
inline ::jmc_auto::hdmap::Polygon* Junction::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    polygon_ = new ::jmc_auto::hdmap::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Junction.polygon)
  return polygon_;
}
inline ::jmc_auto::hdmap::Polygon* Junction::release_polygon() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Junction.polygon)
  clear_has_polygon();
  ::jmc_auto::hdmap::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline void Junction::set_allocated_polygon(::jmc_auto::hdmap::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Junction.polygon)
}

// repeated .jmc_auto.hdmap.Id overlap_id = 3;
inline int Junction::overlap_id_size() const {
  return overlap_id_.size();
}
inline void Junction::clear_overlap_id() {
  overlap_id_.Clear();
}
inline const ::jmc_auto::hdmap::Id& Junction::overlap_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Junction.overlap_id)
  return overlap_id_.Get(index);
}
inline ::jmc_auto::hdmap::Id* Junction::mutable_overlap_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Junction.overlap_id)
  return overlap_id_.Mutable(index);
}
inline ::jmc_auto::hdmap::Id* Junction::add_overlap_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Junction.overlap_id)
  return overlap_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Junction::mutable_overlap_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Junction.overlap_id)
  return &overlap_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Junction::overlap_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Junction.overlap_id)
  return overlap_id_;
}

// repeated .jmc_auto.hdmap.Id crosswalk_id = 4;
inline int Junction::crosswalk_id_size() const {
  return crosswalk_id_.size();
}
inline void Junction::clear_crosswalk_id() {
  crosswalk_id_.Clear();
}
inline const ::jmc_auto::hdmap::Id& Junction::crosswalk_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Junction.crosswalk_id)
  return crosswalk_id_.Get(index);
}
inline ::jmc_auto::hdmap::Id* Junction::mutable_crosswalk_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Junction.crosswalk_id)
  return crosswalk_id_.Mutable(index);
}
inline ::jmc_auto::hdmap::Id* Junction::add_crosswalk_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Junction.crosswalk_id)
  return crosswalk_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Junction::mutable_crosswalk_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Junction.crosswalk_id)
  return &crosswalk_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Junction::crosswalk_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Junction.crosswalk_id)
  return crosswalk_id_;
}

// optional int32 num_road_segments = 5 [default = 4];
inline bool Junction::has_num_road_segments() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Junction::set_has_num_road_segments() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Junction::clear_has_num_road_segments() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Junction::clear_num_road_segments() {
  num_road_segments_ = 4;
  clear_has_num_road_segments();
}
inline ::google::protobuf::int32 Junction::num_road_segments() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Junction.num_road_segments)
  return num_road_segments_;
}
inline void Junction::set_num_road_segments(::google::protobuf::int32 value) {
  set_has_num_road_segments();
  num_road_segments_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Junction.num_road_segments)
}

// repeated .jmc_auto.hdmap.Id lane_id = 6;
inline int Junction::lane_id_size() const {
  return lane_id_.size();
}
inline void Junction::clear_lane_id() {
  lane_id_.Clear();
}
inline const ::jmc_auto::hdmap::Id& Junction::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Junction.lane_id)
  return lane_id_.Get(index);
}
inline ::jmc_auto::hdmap::Id* Junction::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Junction.lane_id)
  return lane_id_.Mutable(index);
}
inline ::jmc_auto::hdmap::Id* Junction::add_lane_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Junction.lane_id)
  return lane_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Junction::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Junction.lane_id)
  return &lane_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Junction::lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Junction.lane_id)
  return lane_id_;
}

// optional .jmc_auto.hdmap.Junction.Type type = 7;
inline bool Junction::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Junction::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Junction::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Junction::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::jmc_auto::hdmap::Junction_Type Junction::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Junction.type)
  return static_cast< ::jmc_auto::hdmap::Junction_Type >(type_);
}
inline void Junction::set_type(::jmc_auto::hdmap::Junction_Type value) {
  assert(::jmc_auto::hdmap::Junction_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Junction.type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace hdmap
}  // namespace jmc_auto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::jmc_auto::hdmap::Junction_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::hdmap::Junction_Type>() {
  return ::jmc_auto::hdmap::Junction_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fmap_2fproto_2fmap_5fjunction_2eproto__INCLUDED
