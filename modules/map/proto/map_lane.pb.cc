// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_lane.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/map/proto/map_lane.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace hdmap {
class LaneBoundaryTypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneBoundaryType> {
} _LaneBoundaryType_default_instance_;
class LaneBoundaryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneBoundary> {
} _LaneBoundary_default_instance_;
class LaneSampleAssociationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneSampleAssociation> {
} _LaneSampleAssociation_default_instance_;
class LaneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Lane> {
} _Lane_default_instance_;

namespace protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryType, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundaryType, types_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundary, curve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundary, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundary, virtual__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundary, boundary_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneBoundary, type_),
  0,
  1,
  2,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSampleAssociation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSampleAssociation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSampleAssociation, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneSampleAssociation, width_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, central_curve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, left_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, right_boundary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, speed_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, overlap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, predecessor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, successor_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, left_neighbor_forward_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, right_neighbor_forward_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, turn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, left_neighbor_reverse_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, right_neighbor_reverse_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, junction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, left_sample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, right_sample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, left_road_sample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, right_road_sample_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, stop_sign_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, crosswalk_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, yield_sign_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, clear_area_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, turn_type_plan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, is_backup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, road_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, central_curvature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, self_reverse_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, multiple_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lane, default_reversible_lane_),
  0,
  1,
  2,
  3,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  12,
  13,
  ~0u,
  ~0u,
  4,
  ~0u,
  ~0u,
  14,
  ~0u,
  ~0u,
  8,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  15,
  10,
  5,
  9,
  ~0u,
  ~0u,
  11,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(LaneBoundaryType)},
  { 9, 19, sizeof(LaneBoundary)},
  { 24, 31, sizeof(LaneSampleAssociation)},
  { 33, 71, sizeof(Lane)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneBoundaryType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneBoundary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneSampleAssociation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Lane_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/map/proto/map_lane.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _LaneBoundaryType_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LaneBoundary_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _LaneSampleAssociation_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Lane_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::InitDefaults();
  _LaneBoundaryType_default_instance_.DefaultConstruct();
  _LaneBoundary_default_instance_.DefaultConstruct();
  _LaneSampleAssociation_default_instance_.DefaultConstruct();
  _Lane_default_instance_.DefaultConstruct();
  _LaneBoundary_default_instance_.get_mutable()->curve_ = const_cast< ::jmc_auto::hdmap::Curve*>(
      ::jmc_auto::hdmap::Curve::internal_default_instance());
  _Lane_default_instance_.get_mutable()->id_ = const_cast< ::jmc_auto::hdmap::Id*>(
      ::jmc_auto::hdmap::Id::internal_default_instance());
  _Lane_default_instance_.get_mutable()->central_curve_ = const_cast< ::jmc_auto::hdmap::Curve*>(
      ::jmc_auto::hdmap::Curve::internal_default_instance());
  _Lane_default_instance_.get_mutable()->left_boundary_ = const_cast< ::jmc_auto::hdmap::LaneBoundary*>(
      ::jmc_auto::hdmap::LaneBoundary::internal_default_instance());
  _Lane_default_instance_.get_mutable()->right_boundary_ = const_cast< ::jmc_auto::hdmap::LaneBoundary*>(
      ::jmc_auto::hdmap::LaneBoundary::internal_default_instance());
  _Lane_default_instance_.get_mutable()->junction_id_ = const_cast< ::jmc_auto::hdmap::Id*>(
      ::jmc_auto::hdmap::Id::internal_default_instance());
  _Lane_default_instance_.get_mutable()->road_id_ = const_cast< ::jmc_auto::hdmap::Id*>(
      ::jmc_auto::hdmap::Id::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n modules/map/proto/map_lane.proto\022\016jmc_"
      "auto.hdmap\032\036modules/map/proto/map_id.pro"
      "to\032$modules/map/proto/map_geometry.proto"
      "\"\315\001\n\020LaneBoundaryType\022\t\n\001s\030\001 \001(\001\0224\n\005type"
      "s\030\002 \003(\0162%.jmc_auto.hdmap.LaneBoundaryTyp"
      "e.Type\"x\n\004Type\022\013\n\007UNKNOWN\020\000\022\021\n\rDOTTED_YE"
      "LLOW\020\001\022\020\n\014DOTTED_WHITE\020\002\022\020\n\014SOLID_YELLOW"
      "\020\003\022\017\n\013SOLID_WHITE\020\004\022\021\n\rDOUBLE_YELLOW\020\005\022\010"
      "\n\004CURB\020\006\"\271\002\n\014LaneBoundary\022$\n\005curve\030\001 \001(\013"
      "2\025.jmc_auto.hdmap.Curve\022\016\n\006length\030\002 \001(\001\022"
      "\017\n\007virtual\030\003 \001(\010\0227\n\rboundary_type\030\004 \003(\0132"
      " .jmc_auto.hdmap.LaneBoundaryType\022/\n\004typ"
      "e\030\005 \001(\0162!.jmc_auto.hdmap.LaneBoundary.Ty"
      "pe\"x\n\004Type\022\013\n\007UNKNOWN\020\000\022\021\n\rDOTTED_YELLOW"
      "\020\001\022\020\n\014DOTTED_WHITE\020\002\022\020\n\014SOLID_YELLOW\020\003\022\017"
      "\n\013SOLID_WHITE\020\004\022\021\n\rDOUBLE_YELLOW\020\005\022\010\n\004CU"
      "RB\020\006\"1\n\025LaneSampleAssociation\022\t\n\001s\030\001 \001(\001"
      "\022\r\n\005width\030\002 \001(\001\"\235\017\n\004Lane\022\036\n\002id\030\001 \001(\0132\022.j"
      "mc_auto.hdmap.Id\022,\n\rcentral_curve\030\002 \001(\0132"
      "\025.jmc_auto.hdmap.Curve\0223\n\rleft_boundary\030"
      "\003 \001(\0132\034.jmc_auto.hdmap.LaneBoundary\0224\n\016r"
      "ight_boundary\030\004 \001(\0132\034.jmc_auto.hdmap.Lan"
      "eBoundary\022\016\n\006length\030\005 \001(\001\022\023\n\013speed_limit"
      "\030\006 \001(\001\022&\n\noverlap_id\030\007 \003(\0132\022.jmc_auto.hd"
      "map.Id\022*\n\016predecessor_id\030\010 \003(\0132\022.jmc_aut"
      "o.hdmap.Id\022(\n\014successor_id\030\t \003(\0132\022.jmc_a"
      "uto.hdmap.Id\0229\n\035left_neighbor_forward_la"
      "ne_id\030\n \003(\0132\022.jmc_auto.hdmap.Id\022:\n\036right"
      "_neighbor_forward_lane_id\030\013 \003(\0132\022.jmc_au"
      "to.hdmap.Id\022+\n\004type\030\014 \001(\0162\035.jmc_auto.hdm"
      "ap.Lane.LaneType\022+\n\004turn\030\r \001(\0162\035.jmc_aut"
      "o.hdmap.Lane.LaneTurn\0229\n\035left_neighbor_r"
      "everse_lane_id\030\016 \003(\0132\022.jmc_auto.hdmap.Id"
      "\022:\n\036right_neighbor_reverse_lane_id\030\017 \003(\013"
      "2\022.jmc_auto.hdmap.Id\022\'\n\013junction_id\030\020 \001("
      "\0132\022.jmc_auto.hdmap.Id\022:\n\013left_sample\030\021 \003"
      "(\0132%.jmc_auto.hdmap.LaneSampleAssociatio"
      "n\022;\n\014right_sample\030\022 \003(\0132%.jmc_auto.hdmap"
      ".LaneSampleAssociation\0225\n\tdirection\030\023 \001("
      "\0162\".jmc_auto.hdmap.Lane.LaneDirection\022\?\n"
      "\020left_road_sample\030\024 \003(\0132%.jmc_auto.hdmap"
      ".LaneSampleAssociation\022@\n\021right_road_sam"
      "ple\030\025 \003(\0132%.jmc_auto.hdmap.LaneSampleAss"
      "ociation\022\r\n\005width\030\026 \001(\001\022(\n\014stop_sign_id\030"
      "\027 \003(\0132\022.jmc_auto.hdmap.Id\022(\n\014crosswalk_i"
      "d\030\030 \003(\0132\022.jmc_auto.hdmap.Id\022)\n\ryield_sig"
      "n_id\030\031 \003(\0132\022.jmc_auto.hdmap.Id\022)\n\rclear_"
      "area_id\030\032 \003(\0132\022.jmc_auto.hdmap.Id\022=\n\016tur"
      "n_type_plan\030\033 \001(\0162%.jmc_auto.hdmap.Lane."
      "LaneTurnTypePlan\022\021\n\tis_backup\030\034 \001(\010\022#\n\007r"
      "oad_id\030\035 \001(\0132\022.jmc_auto.hdmap.Id\022\031\n\021cent"
      "ral_curvature\030\036 \001(\001\0220\n\024self_reverse_lane"
      "_id\030\037 \003(\0132\022.jmc_auto.hdmap.Id\0224\n\rmultipl"
      "e_type\030  \003(\0162\035.jmc_auto.hdmap.Lane.LaneT"
      "ype\022\037\n\027default_reversible_lane\030! \001(\010\"M\n\010"
      "LaneType\022\010\n\004NONE\020\001\022\020\n\014CITY_DRIVING\020\002\022\n\n\006"
      "BIKING\020\003\022\014\n\010SIDEWALK\020\004\022\013\n\007PARKING\020\005\"B\n\010L"
      "aneTurn\022\013\n\007NO_TURN\020\001\022\r\n\tLEFT_TURN\020\002\022\016\n\nR"
      "IGHT_TURN\020\003\022\n\n\006U_TURN\020\004\";\n\rLaneDirection"
      "\022\013\n\007FORWARD\020\001\022\014\n\010BACKWARD\020\002\022\017\n\013BIDIRECTI"
      "ON\020\003\"\360\001\n\020LaneTurnTypePlan\022\017\n\013TTP_NO_TURN"
      "\020\001\022\021\n\rTTP_LEFT_TURN\020\002\022\022\n\016TTP_RIGHT_TURN\020"
      "\003\022\016\n\nTTP_U_TURN\020\004\022\030\n\024TTP_LEFT_AND_NO_TUR"
      "N\020\005\022\027\n\023TTP_LEFT_AND_U_TURN\020\006\022\025\n\021TTP_U_AN"
      "D_NO_TURN\020\007\022\031\n\025TTP_RIGHT_AND_NO_TURN\020\010\022\036"
      "\n\032TTP_LEFT_AND_U_AND_NO_TURN\020\t\022\017\n\013TTP_UN"
      "KNOWN\020\n"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2647);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/map/proto/map_lane.proto", &protobuf_RegisterTypes);
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto

const ::google::protobuf::EnumDescriptor* LaneBoundaryType_Type_descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::file_level_enum_descriptors[0];
}
bool LaneBoundaryType_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneBoundaryType_Type LaneBoundaryType::UNKNOWN;
const LaneBoundaryType_Type LaneBoundaryType::DOTTED_YELLOW;
const LaneBoundaryType_Type LaneBoundaryType::DOTTED_WHITE;
const LaneBoundaryType_Type LaneBoundaryType::SOLID_YELLOW;
const LaneBoundaryType_Type LaneBoundaryType::SOLID_WHITE;
const LaneBoundaryType_Type LaneBoundaryType::DOUBLE_YELLOW;
const LaneBoundaryType_Type LaneBoundaryType::CURB;
const LaneBoundaryType_Type LaneBoundaryType::Type_MIN;
const LaneBoundaryType_Type LaneBoundaryType::Type_MAX;
const int LaneBoundaryType::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LaneBoundary_Type_descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::file_level_enum_descriptors[1];
}
bool LaneBoundary_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LaneBoundary_Type LaneBoundary::UNKNOWN;
const LaneBoundary_Type LaneBoundary::DOTTED_YELLOW;
const LaneBoundary_Type LaneBoundary::DOTTED_WHITE;
const LaneBoundary_Type LaneBoundary::SOLID_YELLOW;
const LaneBoundary_Type LaneBoundary::SOLID_WHITE;
const LaneBoundary_Type LaneBoundary::DOUBLE_YELLOW;
const LaneBoundary_Type LaneBoundary::CURB;
const LaneBoundary_Type LaneBoundary::Type_MIN;
const LaneBoundary_Type LaneBoundary::Type_MAX;
const int LaneBoundary::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LaneType_descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::file_level_enum_descriptors[2];
}
bool Lane_LaneType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LaneType Lane::NONE;
const Lane_LaneType Lane::CITY_DRIVING;
const Lane_LaneType Lane::BIKING;
const Lane_LaneType Lane::SIDEWALK;
const Lane_LaneType Lane::PARKING;
const Lane_LaneType Lane::LaneType_MIN;
const Lane_LaneType Lane::LaneType_MAX;
const int Lane::LaneType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LaneTurn_descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::file_level_enum_descriptors[3];
}
bool Lane_LaneTurn_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LaneTurn Lane::NO_TURN;
const Lane_LaneTurn Lane::LEFT_TURN;
const Lane_LaneTurn Lane::RIGHT_TURN;
const Lane_LaneTurn Lane::U_TURN;
const Lane_LaneTurn Lane::LaneTurn_MIN;
const Lane_LaneTurn Lane::LaneTurn_MAX;
const int Lane::LaneTurn_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LaneDirection_descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::file_level_enum_descriptors[4];
}
bool Lane_LaneDirection_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LaneDirection Lane::FORWARD;
const Lane_LaneDirection Lane::BACKWARD;
const Lane_LaneDirection Lane::BIDIRECTION;
const Lane_LaneDirection Lane::LaneDirection_MIN;
const Lane_LaneDirection Lane::LaneDirection_MAX;
const int Lane::LaneDirection_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LaneTurnTypePlan_descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::file_level_enum_descriptors[5];
}
bool Lane_LaneTurnTypePlan_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LaneTurnTypePlan Lane::TTP_NO_TURN;
const Lane_LaneTurnTypePlan Lane::TTP_LEFT_TURN;
const Lane_LaneTurnTypePlan Lane::TTP_RIGHT_TURN;
const Lane_LaneTurnTypePlan Lane::TTP_U_TURN;
const Lane_LaneTurnTypePlan Lane::TTP_LEFT_AND_NO_TURN;
const Lane_LaneTurnTypePlan Lane::TTP_LEFT_AND_U_TURN;
const Lane_LaneTurnTypePlan Lane::TTP_U_AND_NO_TURN;
const Lane_LaneTurnTypePlan Lane::TTP_RIGHT_AND_NO_TURN;
const Lane_LaneTurnTypePlan Lane::TTP_LEFT_AND_U_AND_NO_TURN;
const Lane_LaneTurnTypePlan Lane::TTP_UNKNOWN;
const Lane_LaneTurnTypePlan Lane::LaneTurnTypePlan_MIN;
const Lane_LaneTurnTypePlan Lane::LaneTurnTypePlan_MAX;
const int Lane::LaneTurnTypePlan_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundaryType::kSFieldNumber;
const int LaneBoundaryType::kTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundaryType::LaneBoundaryType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.hdmap.LaneBoundaryType)
}
LaneBoundaryType::LaneBoundaryType(const LaneBoundaryType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      types_(from.types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  s_ = from.s_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.hdmap.LaneBoundaryType)
}

void LaneBoundaryType::SharedCtor() {
  _cached_size_ = 0;
  s_ = 0;
}

LaneBoundaryType::~LaneBoundaryType() {
  // @@protoc_insertion_point(destructor:jmc_auto.hdmap.LaneBoundaryType)
  SharedDtor();
}

void LaneBoundaryType::SharedDtor() {
}

void LaneBoundaryType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneBoundaryType::descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneBoundaryType& LaneBoundaryType::default_instance() {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneBoundaryType* LaneBoundaryType::New(::google::protobuf::Arena* arena) const {
  LaneBoundaryType* n = new LaneBoundaryType;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneBoundaryType::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.hdmap.LaneBoundaryType)
  types_.Clear();
  s_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneBoundaryType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.hdmap.LaneBoundaryType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.LaneBoundaryType.Type types = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::hdmap::LaneBoundaryType_Type_IsValid(value)) {
            add_types(static_cast< ::jmc_auto::hdmap::LaneBoundaryType_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::jmc_auto::hdmap::LaneBoundaryType_Type_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_types())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.hdmap.LaneBoundaryType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.hdmap.LaneBoundaryType)
  return false;
#undef DO_
}

void LaneBoundaryType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.hdmap.LaneBoundaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // repeated .jmc_auto.hdmap.LaneBoundaryType.Type types = 2;
  for (int i = 0, n = this->types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->types(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.hdmap.LaneBoundaryType)
}

::google::protobuf::uint8* LaneBoundaryType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.hdmap.LaneBoundaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // repeated .jmc_auto.hdmap.LaneBoundaryType.Type types = 2;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    2, this->types_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.hdmap.LaneBoundaryType)
  return target;
}

size_t LaneBoundaryType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.hdmap.LaneBoundaryType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.hdmap.LaneBoundaryType.Type types = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->types_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->types(i));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional double s = 1;
  if (has_s()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneBoundaryType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.hdmap.LaneBoundaryType)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundaryType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundaryType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.hdmap.LaneBoundaryType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.hdmap.LaneBoundaryType)
    MergeFrom(*source);
  }
}

void LaneBoundaryType::MergeFrom(const LaneBoundaryType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.hdmap.LaneBoundaryType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
  if (from.has_s()) {
    set_s(from.s());
  }
}

void LaneBoundaryType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.hdmap.LaneBoundaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundaryType::CopyFrom(const LaneBoundaryType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.hdmap.LaneBoundaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundaryType::IsInitialized() const {
  return true;
}

void LaneBoundaryType::Swap(LaneBoundaryType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneBoundaryType::InternalSwap(LaneBoundaryType* other) {
  types_.InternalSwap(&other->types_);
  std::swap(s_, other->s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneBoundaryType::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneBoundaryType

// optional double s = 1;
bool LaneBoundaryType::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneBoundaryType::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneBoundaryType::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneBoundaryType::clear_s() {
  s_ = 0;
  clear_has_s();
}
double LaneBoundaryType::s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneBoundaryType.s)
  return s_;
}
void LaneBoundaryType::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.LaneBoundaryType.s)
}

// repeated .jmc_auto.hdmap.LaneBoundaryType.Type types = 2;
int LaneBoundaryType::types_size() const {
  return types_.size();
}
void LaneBoundaryType::clear_types() {
  types_.Clear();
}
::jmc_auto::hdmap::LaneBoundaryType_Type LaneBoundaryType::types(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneBoundaryType.types)
  return static_cast< ::jmc_auto::hdmap::LaneBoundaryType_Type >(types_.Get(index));
}
void LaneBoundaryType::set_types(int index, ::jmc_auto::hdmap::LaneBoundaryType_Type value) {
  assert(::jmc_auto::hdmap::LaneBoundaryType_Type_IsValid(value));
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.LaneBoundaryType.types)
}
void LaneBoundaryType::add_types(::jmc_auto::hdmap::LaneBoundaryType_Type value) {
  assert(::jmc_auto::hdmap::LaneBoundaryType_Type_IsValid(value));
  types_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.LaneBoundaryType.types)
}
const ::google::protobuf::RepeatedField<int>&
LaneBoundaryType::types() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.LaneBoundaryType.types)
  return types_;
}
::google::protobuf::RepeatedField<int>*
LaneBoundaryType::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.LaneBoundaryType.types)
  return &types_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneBoundary::kCurveFieldNumber;
const int LaneBoundary::kLengthFieldNumber;
const int LaneBoundary::kVirtualFieldNumber;
const int LaneBoundary::kBoundaryTypeFieldNumber;
const int LaneBoundary::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneBoundary::LaneBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.hdmap.LaneBoundary)
}
LaneBoundary::LaneBoundary(const LaneBoundary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      boundary_type_(from.boundary_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_curve()) {
    curve_ = new ::jmc_auto::hdmap::Curve(*from.curve_);
  } else {
    curve_ = NULL;
  }
  ::memcpy(&length_, &from.length_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&length_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.hdmap.LaneBoundary)
}

void LaneBoundary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&curve_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&curve_) + sizeof(type_));
}

LaneBoundary::~LaneBoundary() {
  // @@protoc_insertion_point(destructor:jmc_auto.hdmap.LaneBoundary)
  SharedDtor();
}

void LaneBoundary::SharedDtor() {
  if (this != internal_default_instance()) {
    delete curve_;
  }
}

void LaneBoundary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneBoundary::descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneBoundary& LaneBoundary::default_instance() {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneBoundary* LaneBoundary::New(::google::protobuf::Arena* arena) const {
  LaneBoundary* n = new LaneBoundary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.hdmap.LaneBoundary)
  boundary_type_.Clear();
  if (has_curve()) {
    GOOGLE_DCHECK(curve_ != NULL);
    curve_->::jmc_auto::hdmap::Curve::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&length_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&length_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.hdmap.LaneBoundary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.hdmap.Curve curve = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool virtual = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_virtual_();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &virtual__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.LaneBoundaryType boundary_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boundary_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.LaneBoundary.Type type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::hdmap::LaneBoundary_Type_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::hdmap::LaneBoundary_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.hdmap.LaneBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.hdmap.LaneBoundary)
  return false;
#undef DO_
}

void LaneBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.hdmap.LaneBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Curve curve = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->curve_, output);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  // optional bool virtual = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->virtual_(), output);
  }

  // repeated .jmc_auto.hdmap.LaneBoundaryType boundary_type = 4;
  for (unsigned int i = 0, n = this->boundary_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->boundary_type(i), output);
  }

  // optional .jmc_auto.hdmap.LaneBoundary.Type type = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.hdmap.LaneBoundary)
}

::google::protobuf::uint8* LaneBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.hdmap.LaneBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Curve curve = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->curve_, deterministic, target);
  }

  // optional double length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  // optional bool virtual = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->virtual_(), target);
  }

  // repeated .jmc_auto.hdmap.LaneBoundaryType boundary_type = 4;
  for (unsigned int i = 0, n = this->boundary_type_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->boundary_type(i), deterministic, target);
  }

  // optional .jmc_auto.hdmap.LaneBoundary.Type type = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.hdmap.LaneBoundary)
  return target;
}

size_t LaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.hdmap.LaneBoundary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.hdmap.LaneBoundaryType boundary_type = 4;
  {
    unsigned int count = this->boundary_type_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boundary_type(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .jmc_auto.hdmap.Curve curve = 1;
    if (has_curve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->curve_);
    }

    // optional double length = 2;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional bool virtual = 3;
    if (has_virtual_()) {
      total_size += 1 + 1;
    }

    // optional .jmc_auto.hdmap.LaneBoundary.Type type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.hdmap.LaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.hdmap.LaneBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.hdmap.LaneBoundary)
    MergeFrom(*source);
  }
}

void LaneBoundary::MergeFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.hdmap.LaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundary_type_.MergeFrom(from.boundary_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_curve()->::jmc_auto::hdmap::Curve::MergeFrom(from.curve());
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000004u) {
      virtual__ = from.virtual__;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.hdmap.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundary::CopyFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.hdmap.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary::IsInitialized() const {
  return true;
}

void LaneBoundary::Swap(LaneBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneBoundary::InternalSwap(LaneBoundary* other) {
  boundary_type_.InternalSwap(&other->boundary_type_);
  std::swap(curve_, other->curve_);
  std::swap(length_, other->length_);
  std::swap(virtual__, other->virtual__);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneBoundary::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneBoundary

// optional .jmc_auto.hdmap.Curve curve = 1;
bool LaneBoundary::has_curve() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneBoundary::set_has_curve() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneBoundary::clear_has_curve() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneBoundary::clear_curve() {
  if (curve_ != NULL) curve_->::jmc_auto::hdmap::Curve::Clear();
  clear_has_curve();
}
const ::jmc_auto::hdmap::Curve& LaneBoundary::curve() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneBoundary.curve)
  return curve_ != NULL ? *curve_
                         : *::jmc_auto::hdmap::Curve::internal_default_instance();
}
::jmc_auto::hdmap::Curve* LaneBoundary::mutable_curve() {
  set_has_curve();
  if (curve_ == NULL) {
    curve_ = new ::jmc_auto::hdmap::Curve;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.LaneBoundary.curve)
  return curve_;
}
::jmc_auto::hdmap::Curve* LaneBoundary::release_curve() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.LaneBoundary.curve)
  clear_has_curve();
  ::jmc_auto::hdmap::Curve* temp = curve_;
  curve_ = NULL;
  return temp;
}
void LaneBoundary::set_allocated_curve(::jmc_auto::hdmap::Curve* curve) {
  delete curve_;
  curve_ = curve;
  if (curve) {
    set_has_curve();
  } else {
    clear_has_curve();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.LaneBoundary.curve)
}

// optional double length = 2;
bool LaneBoundary::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneBoundary::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneBoundary::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneBoundary::clear_length() {
  length_ = 0;
  clear_has_length();
}
double LaneBoundary::length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneBoundary.length)
  return length_;
}
void LaneBoundary::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.LaneBoundary.length)
}

// optional bool virtual = 3;
bool LaneBoundary::has_virtual_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneBoundary::set_has_virtual_() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneBoundary::clear_has_virtual_() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneBoundary::clear_virtual_() {
  virtual__ = false;
  clear_has_virtual_();
}
bool LaneBoundary::virtual_() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneBoundary.virtual)
  return virtual__;
}
void LaneBoundary::set_virtual_(bool value) {
  set_has_virtual_();
  virtual__ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.LaneBoundary.virtual)
}

// repeated .jmc_auto.hdmap.LaneBoundaryType boundary_type = 4;
int LaneBoundary::boundary_type_size() const {
  return boundary_type_.size();
}
void LaneBoundary::clear_boundary_type() {
  boundary_type_.Clear();
}
const ::jmc_auto::hdmap::LaneBoundaryType& LaneBoundary::boundary_type(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneBoundary.boundary_type)
  return boundary_type_.Get(index);
}
::jmc_auto::hdmap::LaneBoundaryType* LaneBoundary::mutable_boundary_type(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.LaneBoundary.boundary_type)
  return boundary_type_.Mutable(index);
}
::jmc_auto::hdmap::LaneBoundaryType* LaneBoundary::add_boundary_type() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.LaneBoundary.boundary_type)
  return boundary_type_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneBoundaryType >*
LaneBoundary::mutable_boundary_type() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.LaneBoundary.boundary_type)
  return &boundary_type_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneBoundaryType >&
LaneBoundary::boundary_type() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.LaneBoundary.boundary_type)
  return boundary_type_;
}

// optional .jmc_auto.hdmap.LaneBoundary.Type type = 5;
bool LaneBoundary::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LaneBoundary::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void LaneBoundary::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void LaneBoundary::clear_type() {
  type_ = 0;
  clear_has_type();
}
::jmc_auto::hdmap::LaneBoundary_Type LaneBoundary::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneBoundary.type)
  return static_cast< ::jmc_auto::hdmap::LaneBoundary_Type >(type_);
}
void LaneBoundary::set_type(::jmc_auto::hdmap::LaneBoundary_Type value) {
  assert(::jmc_auto::hdmap::LaneBoundary_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.LaneBoundary.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneSampleAssociation::kSFieldNumber;
const int LaneSampleAssociation::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneSampleAssociation::LaneSampleAssociation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.hdmap.LaneSampleAssociation)
}
LaneSampleAssociation::LaneSampleAssociation(const LaneSampleAssociation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&s_) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.hdmap.LaneSampleAssociation)
}

void LaneSampleAssociation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s_, 0, reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&s_) + sizeof(width_));
}

LaneSampleAssociation::~LaneSampleAssociation() {
  // @@protoc_insertion_point(destructor:jmc_auto.hdmap.LaneSampleAssociation)
  SharedDtor();
}

void LaneSampleAssociation::SharedDtor() {
}

void LaneSampleAssociation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneSampleAssociation::descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LaneSampleAssociation& LaneSampleAssociation::default_instance() {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneSampleAssociation* LaneSampleAssociation::New(::google::protobuf::Arena* arena) const {
  LaneSampleAssociation* n = new LaneSampleAssociation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneSampleAssociation::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.hdmap.LaneSampleAssociation)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&s_, 0, reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&s_) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneSampleAssociation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.hdmap.LaneSampleAssociation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.hdmap.LaneSampleAssociation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.hdmap.LaneSampleAssociation)
  return false;
#undef DO_
}

void LaneSampleAssociation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.hdmap.LaneSampleAssociation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // optional double width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.hdmap.LaneSampleAssociation)
}

::google::protobuf::uint8* LaneSampleAssociation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.hdmap.LaneSampleAssociation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // optional double width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.hdmap.LaneSampleAssociation)
  return target;
}

size_t LaneSampleAssociation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.hdmap.LaneSampleAssociation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double s = 1;
    if (has_s()) {
      total_size += 1 + 8;
    }

    // optional double width = 2;
    if (has_width()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneSampleAssociation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.hdmap.LaneSampleAssociation)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneSampleAssociation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneSampleAssociation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.hdmap.LaneSampleAssociation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.hdmap.LaneSampleAssociation)
    MergeFrom(*source);
  }
}

void LaneSampleAssociation::MergeFrom(const LaneSampleAssociation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.hdmap.LaneSampleAssociation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneSampleAssociation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.hdmap.LaneSampleAssociation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneSampleAssociation::CopyFrom(const LaneSampleAssociation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.hdmap.LaneSampleAssociation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneSampleAssociation::IsInitialized() const {
  return true;
}

void LaneSampleAssociation::Swap(LaneSampleAssociation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneSampleAssociation::InternalSwap(LaneSampleAssociation* other) {
  std::swap(s_, other->s_);
  std::swap(width_, other->width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneSampleAssociation::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneSampleAssociation

// optional double s = 1;
bool LaneSampleAssociation::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneSampleAssociation::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneSampleAssociation::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneSampleAssociation::clear_s() {
  s_ = 0;
  clear_has_s();
}
double LaneSampleAssociation::s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneSampleAssociation.s)
  return s_;
}
void LaneSampleAssociation::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.LaneSampleAssociation.s)
}

// optional double width = 2;
bool LaneSampleAssociation::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneSampleAssociation::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneSampleAssociation::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneSampleAssociation::clear_width() {
  width_ = 0;
  clear_has_width();
}
double LaneSampleAssociation::width() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneSampleAssociation.width)
  return width_;
}
void LaneSampleAssociation::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.LaneSampleAssociation.width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane::kIdFieldNumber;
const int Lane::kCentralCurveFieldNumber;
const int Lane::kLeftBoundaryFieldNumber;
const int Lane::kRightBoundaryFieldNumber;
const int Lane::kLengthFieldNumber;
const int Lane::kSpeedLimitFieldNumber;
const int Lane::kOverlapIdFieldNumber;
const int Lane::kPredecessorIdFieldNumber;
const int Lane::kSuccessorIdFieldNumber;
const int Lane::kLeftNeighborForwardLaneIdFieldNumber;
const int Lane::kRightNeighborForwardLaneIdFieldNumber;
const int Lane::kTypeFieldNumber;
const int Lane::kTurnFieldNumber;
const int Lane::kLeftNeighborReverseLaneIdFieldNumber;
const int Lane::kRightNeighborReverseLaneIdFieldNumber;
const int Lane::kJunctionIdFieldNumber;
const int Lane::kLeftSampleFieldNumber;
const int Lane::kRightSampleFieldNumber;
const int Lane::kDirectionFieldNumber;
const int Lane::kLeftRoadSampleFieldNumber;
const int Lane::kRightRoadSampleFieldNumber;
const int Lane::kWidthFieldNumber;
const int Lane::kStopSignIdFieldNumber;
const int Lane::kCrosswalkIdFieldNumber;
const int Lane::kYieldSignIdFieldNumber;
const int Lane::kClearAreaIdFieldNumber;
const int Lane::kTurnTypePlanFieldNumber;
const int Lane::kIsBackupFieldNumber;
const int Lane::kRoadIdFieldNumber;
const int Lane::kCentralCurvatureFieldNumber;
const int Lane::kSelfReverseLaneIdFieldNumber;
const int Lane::kMultipleTypeFieldNumber;
const int Lane::kDefaultReversibleLaneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane::Lane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.hdmap.Lane)
}
Lane::Lane(const Lane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      overlap_id_(from.overlap_id_),
      predecessor_id_(from.predecessor_id_),
      successor_id_(from.successor_id_),
      left_neighbor_forward_lane_id_(from.left_neighbor_forward_lane_id_),
      right_neighbor_forward_lane_id_(from.right_neighbor_forward_lane_id_),
      left_neighbor_reverse_lane_id_(from.left_neighbor_reverse_lane_id_),
      right_neighbor_reverse_lane_id_(from.right_neighbor_reverse_lane_id_),
      left_sample_(from.left_sample_),
      right_sample_(from.right_sample_),
      left_road_sample_(from.left_road_sample_),
      right_road_sample_(from.right_road_sample_),
      stop_sign_id_(from.stop_sign_id_),
      crosswalk_id_(from.crosswalk_id_),
      yield_sign_id_(from.yield_sign_id_),
      clear_area_id_(from.clear_area_id_),
      self_reverse_lane_id_(from.self_reverse_lane_id_),
      multiple_type_(from.multiple_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::jmc_auto::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_central_curve()) {
    central_curve_ = new ::jmc_auto::hdmap::Curve(*from.central_curve_);
  } else {
    central_curve_ = NULL;
  }
  if (from.has_left_boundary()) {
    left_boundary_ = new ::jmc_auto::hdmap::LaneBoundary(*from.left_boundary_);
  } else {
    left_boundary_ = NULL;
  }
  if (from.has_right_boundary()) {
    right_boundary_ = new ::jmc_auto::hdmap::LaneBoundary(*from.right_boundary_);
  } else {
    right_boundary_ = NULL;
  }
  if (from.has_junction_id()) {
    junction_id_ = new ::jmc_auto::hdmap::Id(*from.junction_id_);
  } else {
    junction_id_ = NULL;
  }
  if (from.has_road_id()) {
    road_id_ = new ::jmc_auto::hdmap::Id(*from.road_id_);
  } else {
    road_id_ = NULL;
  }
  ::memcpy(&length_, &from.length_,
    reinterpret_cast<char*>(&turn_type_plan_) -
    reinterpret_cast<char*>(&length_) + sizeof(turn_type_plan_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.hdmap.Lane)
}

void Lane::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&default_reversible_lane_) -
    reinterpret_cast<char*>(&id_) + sizeof(default_reversible_lane_));
  type_ = 1;
  turn_ = 1;
  direction_ = 1;
  turn_type_plan_ = 1;
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:jmc_auto.hdmap.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete central_curve_;
  }
  if (this != internal_default_instance()) {
    delete left_boundary_;
  }
  if (this != internal_default_instance()) {
    delete right_boundary_;
  }
  if (this != internal_default_instance()) {
    delete junction_id_;
  }
  if (this != internal_default_instance()) {
    delete road_id_;
  }
}

void Lane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lane::descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane& Lane::default_instance() {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::InitDefaults();
  return *internal_default_instance();
}

Lane* Lane::New(::google::protobuf::Arena* arena) const {
  Lane* n = new Lane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.hdmap.Lane)
  overlap_id_.Clear();
  predecessor_id_.Clear();
  successor_id_.Clear();
  left_neighbor_forward_lane_id_.Clear();
  right_neighbor_forward_lane_id_.Clear();
  left_neighbor_reverse_lane_id_.Clear();
  right_neighbor_reverse_lane_id_.Clear();
  left_sample_.Clear();
  right_sample_.Clear();
  left_road_sample_.Clear();
  right_road_sample_.Clear();
  stop_sign_id_.Clear();
  crosswalk_id_.Clear();
  yield_sign_id_.Clear();
  clear_area_id_.Clear();
  self_reverse_lane_id_.Clear();
  multiple_type_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::jmc_auto::hdmap::Id::Clear();
    }
    if (has_central_curve()) {
      GOOGLE_DCHECK(central_curve_ != NULL);
      central_curve_->::jmc_auto::hdmap::Curve::Clear();
    }
    if (has_left_boundary()) {
      GOOGLE_DCHECK(left_boundary_ != NULL);
      left_boundary_->::jmc_auto::hdmap::LaneBoundary::Clear();
    }
    if (has_right_boundary()) {
      GOOGLE_DCHECK(right_boundary_ != NULL);
      right_boundary_->::jmc_auto::hdmap::LaneBoundary::Clear();
    }
    if (has_junction_id()) {
      GOOGLE_DCHECK(junction_id_ != NULL);
      junction_id_->::jmc_auto::hdmap::Id::Clear();
    }
    if (has_road_id()) {
      GOOGLE_DCHECK(road_id_ != NULL);
      road_id_->::jmc_auto::hdmap::Id::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&length_, 0, reinterpret_cast<char*>(&speed_limit_) -
      reinterpret_cast<char*>(&length_) + sizeof(speed_limit_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&width_, 0, reinterpret_cast<char*>(&default_reversible_lane_) -
      reinterpret_cast<char*>(&width_) + sizeof(default_reversible_lane_));
    type_ = 1;
    turn_ = 1;
    direction_ = 1;
    turn_type_plan_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.hdmap.Lane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.Curve central_curve = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_central_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.LaneBoundary left_boundary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.LaneBoundary right_boundary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double speed_limit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_speed_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id overlap_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_overlap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id predecessor_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_predecessor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id successor_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_successor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id left_neighbor_forward_lane_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_left_neighbor_forward_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id right_neighbor_forward_lane_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_right_neighbor_forward_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.Lane.LaneType type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::hdmap::Lane_LaneType_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::hdmap::Lane_LaneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.Lane.LaneTurn turn = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::hdmap::Lane_LaneTurn_IsValid(value)) {
            set_turn(static_cast< ::jmc_auto::hdmap::Lane_LaneTurn >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id left_neighbor_reverse_lane_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_left_neighbor_reverse_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id right_neighbor_reverse_lane_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_right_neighbor_reverse_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.Id junction_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_junction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.LaneSampleAssociation left_sample = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_left_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.LaneSampleAssociation right_sample = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_right_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.Lane.LaneDirection direction = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::hdmap::Lane_LaneDirection_IsValid(value)) {
            set_direction(static_cast< ::jmc_auto::hdmap::Lane_LaneDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.LaneSampleAssociation left_road_sample = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_left_road_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.LaneSampleAssociation right_road_sample = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_right_road_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id stop_sign_id = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stop_sign_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id crosswalk_id = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crosswalk_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id yield_sign_id = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yield_sign_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id clear_area_id = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clear_area_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.Lane.LaneTurnTypePlan turn_type_plan = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::hdmap::Lane_LaneTurnTypePlan_IsValid(value)) {
            set_turn_type_plan(static_cast< ::jmc_auto::hdmap::Lane_LaneTurnTypePlan >(value));
          } else {
            mutable_unknown_fields()->AddVarint(27, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_backup = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_is_backup();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_backup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.Id road_id = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_road_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double central_curvature = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u)) {
          set_has_central_curvature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &central_curvature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id self_reverse_lane_id = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_self_reverse_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Lane.LaneType multiple_type = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::hdmap::Lane_LaneType_IsValid(value)) {
            add_multiple_type(static_cast< ::jmc_auto::hdmap::Lane_LaneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(32, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(258u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 32,
                 ::jmc_auto::hdmap::Lane_LaneType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_multiple_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool default_reversible_lane = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          set_has_default_reversible_lane();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &default_reversible_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.hdmap.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.hdmap.Lane)
  return false;
#undef DO_
}

void Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.hdmap.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .jmc_auto.hdmap.Curve central_curve = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->central_curve_, output);
  }

  // optional .jmc_auto.hdmap.LaneBoundary left_boundary = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->left_boundary_, output);
  }

  // optional .jmc_auto.hdmap.LaneBoundary right_boundary = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->right_boundary_, output);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length(), output);
  }

  // optional double speed_limit = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed_limit(), output);
  }

  // repeated .jmc_auto.hdmap.Id overlap_id = 7;
  for (unsigned int i = 0, n = this->overlap_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->overlap_id(i), output);
  }

  // repeated .jmc_auto.hdmap.Id predecessor_id = 8;
  for (unsigned int i = 0, n = this->predecessor_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->predecessor_id(i), output);
  }

  // repeated .jmc_auto.hdmap.Id successor_id = 9;
  for (unsigned int i = 0, n = this->successor_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->successor_id(i), output);
  }

  // repeated .jmc_auto.hdmap.Id left_neighbor_forward_lane_id = 10;
  for (unsigned int i = 0, n = this->left_neighbor_forward_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->left_neighbor_forward_lane_id(i), output);
  }

  // repeated .jmc_auto.hdmap.Id right_neighbor_forward_lane_id = 11;
  for (unsigned int i = 0, n = this->right_neighbor_forward_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->right_neighbor_forward_lane_id(i), output);
  }

  // optional .jmc_auto.hdmap.Lane.LaneType type = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->type(), output);
  }

  // optional .jmc_auto.hdmap.Lane.LaneTurn turn = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->turn(), output);
  }

  // repeated .jmc_auto.hdmap.Id left_neighbor_reverse_lane_id = 14;
  for (unsigned int i = 0, n = this->left_neighbor_reverse_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->left_neighbor_reverse_lane_id(i), output);
  }

  // repeated .jmc_auto.hdmap.Id right_neighbor_reverse_lane_id = 15;
  for (unsigned int i = 0, n = this->right_neighbor_reverse_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->right_neighbor_reverse_lane_id(i), output);
  }

  // optional .jmc_auto.hdmap.Id junction_id = 16;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->junction_id_, output);
  }

  // repeated .jmc_auto.hdmap.LaneSampleAssociation left_sample = 17;
  for (unsigned int i = 0, n = this->left_sample_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->left_sample(i), output);
  }

  // repeated .jmc_auto.hdmap.LaneSampleAssociation right_sample = 18;
  for (unsigned int i = 0, n = this->right_sample_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->right_sample(i), output);
  }

  // optional .jmc_auto.hdmap.Lane.LaneDirection direction = 19;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->direction(), output);
  }

  // repeated .jmc_auto.hdmap.LaneSampleAssociation left_road_sample = 20;
  for (unsigned int i = 0, n = this->left_road_sample_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->left_road_sample(i), output);
  }

  // repeated .jmc_auto.hdmap.LaneSampleAssociation right_road_sample = 21;
  for (unsigned int i = 0, n = this->right_road_sample_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->right_road_sample(i), output);
  }

  // optional double width = 22;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->width(), output);
  }

  // repeated .jmc_auto.hdmap.Id stop_sign_id = 23;
  for (unsigned int i = 0, n = this->stop_sign_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->stop_sign_id(i), output);
  }

  // repeated .jmc_auto.hdmap.Id crosswalk_id = 24;
  for (unsigned int i = 0, n = this->crosswalk_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->crosswalk_id(i), output);
  }

  // repeated .jmc_auto.hdmap.Id yield_sign_id = 25;
  for (unsigned int i = 0, n = this->yield_sign_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->yield_sign_id(i), output);
  }

  // repeated .jmc_auto.hdmap.Id clear_area_id = 26;
  for (unsigned int i = 0, n = this->clear_area_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->clear_area_id(i), output);
  }

  // optional .jmc_auto.hdmap.Lane.LaneTurnTypePlan turn_type_plan = 27;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->turn_type_plan(), output);
  }

  // optional bool is_backup = 28;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->is_backup(), output);
  }

  // optional .jmc_auto.hdmap.Id road_id = 29;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->road_id_, output);
  }

  // optional double central_curvature = 30;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->central_curvature(), output);
  }

  // repeated .jmc_auto.hdmap.Id self_reverse_lane_id = 31;
  for (unsigned int i = 0, n = this->self_reverse_lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->self_reverse_lane_id(i), output);
  }

  // repeated .jmc_auto.hdmap.Lane.LaneType multiple_type = 32;
  for (int i = 0, n = this->multiple_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      32, this->multiple_type(i), output);
  }

  // optional bool default_reversible_lane = 33;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->default_reversible_lane(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.hdmap.Lane)
}

::google::protobuf::uint8* Lane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.hdmap.Lane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // optional .jmc_auto.hdmap.Curve central_curve = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->central_curve_, deterministic, target);
  }

  // optional .jmc_auto.hdmap.LaneBoundary left_boundary = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->left_boundary_, deterministic, target);
  }

  // optional .jmc_auto.hdmap.LaneBoundary right_boundary = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->right_boundary_, deterministic, target);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->length(), target);
  }

  // optional double speed_limit = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed_limit(), target);
  }

  // repeated .jmc_auto.hdmap.Id overlap_id = 7;
  for (unsigned int i = 0, n = this->overlap_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->overlap_id(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Id predecessor_id = 8;
  for (unsigned int i = 0, n = this->predecessor_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->predecessor_id(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Id successor_id = 9;
  for (unsigned int i = 0, n = this->successor_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->successor_id(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Id left_neighbor_forward_lane_id = 10;
  for (unsigned int i = 0, n = this->left_neighbor_forward_lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->left_neighbor_forward_lane_id(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Id right_neighbor_forward_lane_id = 11;
  for (unsigned int i = 0, n = this->right_neighbor_forward_lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->right_neighbor_forward_lane_id(i), deterministic, target);
  }

  // optional .jmc_auto.hdmap.Lane.LaneType type = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->type(), target);
  }

  // optional .jmc_auto.hdmap.Lane.LaneTurn turn = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->turn(), target);
  }

  // repeated .jmc_auto.hdmap.Id left_neighbor_reverse_lane_id = 14;
  for (unsigned int i = 0, n = this->left_neighbor_reverse_lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->left_neighbor_reverse_lane_id(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Id right_neighbor_reverse_lane_id = 15;
  for (unsigned int i = 0, n = this->right_neighbor_reverse_lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->right_neighbor_reverse_lane_id(i), deterministic, target);
  }

  // optional .jmc_auto.hdmap.Id junction_id = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->junction_id_, deterministic, target);
  }

  // repeated .jmc_auto.hdmap.LaneSampleAssociation left_sample = 17;
  for (unsigned int i = 0, n = this->left_sample_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->left_sample(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.LaneSampleAssociation right_sample = 18;
  for (unsigned int i = 0, n = this->right_sample_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, this->right_sample(i), deterministic, target);
  }

  // optional .jmc_auto.hdmap.Lane.LaneDirection direction = 19;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->direction(), target);
  }

  // repeated .jmc_auto.hdmap.LaneSampleAssociation left_road_sample = 20;
  for (unsigned int i = 0, n = this->left_road_sample_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->left_road_sample(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.LaneSampleAssociation right_road_sample = 21;
  for (unsigned int i = 0, n = this->right_road_sample_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, this->right_road_sample(i), deterministic, target);
  }

  // optional double width = 22;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->width(), target);
  }

  // repeated .jmc_auto.hdmap.Id stop_sign_id = 23;
  for (unsigned int i = 0, n = this->stop_sign_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, this->stop_sign_id(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Id crosswalk_id = 24;
  for (unsigned int i = 0, n = this->crosswalk_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, this->crosswalk_id(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Id yield_sign_id = 25;
  for (unsigned int i = 0, n = this->yield_sign_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, this->yield_sign_id(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Id clear_area_id = 26;
  for (unsigned int i = 0, n = this->clear_area_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, this->clear_area_id(i), deterministic, target);
  }

  // optional .jmc_auto.hdmap.Lane.LaneTurnTypePlan turn_type_plan = 27;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      27, this->turn_type_plan(), target);
  }

  // optional bool is_backup = 28;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->is_backup(), target);
  }

  // optional .jmc_auto.hdmap.Id road_id = 29;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->road_id_, deterministic, target);
  }

  // optional double central_curvature = 30;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->central_curvature(), target);
  }

  // repeated .jmc_auto.hdmap.Id self_reverse_lane_id = 31;
  for (unsigned int i = 0, n = this->self_reverse_lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, this->self_reverse_lane_id(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Lane.LaneType multiple_type = 32;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    32, this->multiple_type_, target);

  // optional bool default_reversible_lane = 33;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->default_reversible_lane(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.hdmap.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.hdmap.Lane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.hdmap.Id overlap_id = 7;
  {
    unsigned int count = this->overlap_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->overlap_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id predecessor_id = 8;
  {
    unsigned int count = this->predecessor_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->predecessor_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id successor_id = 9;
  {
    unsigned int count = this->successor_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->successor_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id left_neighbor_forward_lane_id = 10;
  {
    unsigned int count = this->left_neighbor_forward_lane_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_neighbor_forward_lane_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id right_neighbor_forward_lane_id = 11;
  {
    unsigned int count = this->right_neighbor_forward_lane_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_neighbor_forward_lane_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id left_neighbor_reverse_lane_id = 14;
  {
    unsigned int count = this->left_neighbor_reverse_lane_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_neighbor_reverse_lane_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id right_neighbor_reverse_lane_id = 15;
  {
    unsigned int count = this->right_neighbor_reverse_lane_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_neighbor_reverse_lane_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.LaneSampleAssociation left_sample = 17;
  {
    unsigned int count = this->left_sample_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_sample(i));
    }
  }

  // repeated .jmc_auto.hdmap.LaneSampleAssociation right_sample = 18;
  {
    unsigned int count = this->right_sample_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_sample(i));
    }
  }

  // repeated .jmc_auto.hdmap.LaneSampleAssociation left_road_sample = 20;
  {
    unsigned int count = this->left_road_sample_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_road_sample(i));
    }
  }

  // repeated .jmc_auto.hdmap.LaneSampleAssociation right_road_sample = 21;
  {
    unsigned int count = this->right_road_sample_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right_road_sample(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id stop_sign_id = 23;
  {
    unsigned int count = this->stop_sign_id_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop_sign_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id crosswalk_id = 24;
  {
    unsigned int count = this->crosswalk_id_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crosswalk_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id yield_sign_id = 25;
  {
    unsigned int count = this->yield_sign_id_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yield_sign_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id clear_area_id = 26;
  {
    unsigned int count = this->clear_area_id_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clear_area_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id self_reverse_lane_id = 31;
  {
    unsigned int count = this->self_reverse_lane_id_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self_reverse_lane_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.Lane.LaneType multiple_type = 32;
  {
    size_t data_size = 0;
    unsigned int count = this->multiple_type_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->multiple_type(i));
    }
    total_size += (2UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .jmc_auto.hdmap.Curve central_curve = 2;
    if (has_central_curve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->central_curve_);
    }

    // optional .jmc_auto.hdmap.LaneBoundary left_boundary = 3;
    if (has_left_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->left_boundary_);
    }

    // optional .jmc_auto.hdmap.LaneBoundary right_boundary = 4;
    if (has_right_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->right_boundary_);
    }

    // optional .jmc_auto.hdmap.Id junction_id = 16;
    if (has_junction_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->junction_id_);
    }

    // optional .jmc_auto.hdmap.Id road_id = 29;
    if (has_road_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->road_id_);
    }

    // optional double length = 5;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional double speed_limit = 6;
    if (has_speed_limit()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double width = 22;
    if (has_width()) {
      total_size += 2 + 8;
    }

    // optional double central_curvature = 30;
    if (has_central_curvature()) {
      total_size += 2 + 8;
    }

    // optional bool is_backup = 28;
    if (has_is_backup()) {
      total_size += 2 + 1;
    }

    // optional bool default_reversible_lane = 33;
    if (has_default_reversible_lane()) {
      total_size += 2 + 1;
    }

    // optional .jmc_auto.hdmap.Lane.LaneType type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .jmc_auto.hdmap.Lane.LaneTurn turn = 13;
    if (has_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn());
    }

    // optional .jmc_auto.hdmap.Lane.LaneDirection direction = 19;
    if (has_direction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // optional .jmc_auto.hdmap.Lane.LaneTurnTypePlan turn_type_plan = 27;
    if (has_turn_type_plan()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_type_plan());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.hdmap.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Lane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.hdmap.Lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.hdmap.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.hdmap.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overlap_id_.MergeFrom(from.overlap_id_);
  predecessor_id_.MergeFrom(from.predecessor_id_);
  successor_id_.MergeFrom(from.successor_id_);
  left_neighbor_forward_lane_id_.MergeFrom(from.left_neighbor_forward_lane_id_);
  right_neighbor_forward_lane_id_.MergeFrom(from.right_neighbor_forward_lane_id_);
  left_neighbor_reverse_lane_id_.MergeFrom(from.left_neighbor_reverse_lane_id_);
  right_neighbor_reverse_lane_id_.MergeFrom(from.right_neighbor_reverse_lane_id_);
  left_sample_.MergeFrom(from.left_sample_);
  right_sample_.MergeFrom(from.right_sample_);
  left_road_sample_.MergeFrom(from.left_road_sample_);
  right_road_sample_.MergeFrom(from.right_road_sample_);
  stop_sign_id_.MergeFrom(from.stop_sign_id_);
  crosswalk_id_.MergeFrom(from.crosswalk_id_);
  yield_sign_id_.MergeFrom(from.yield_sign_id_);
  clear_area_id_.MergeFrom(from.clear_area_id_);
  self_reverse_lane_id_.MergeFrom(from.self_reverse_lane_id_);
  multiple_type_.MergeFrom(from.multiple_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::jmc_auto::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_central_curve()->::jmc_auto::hdmap::Curve::MergeFrom(from.central_curve());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_left_boundary()->::jmc_auto::hdmap::LaneBoundary::MergeFrom(from.left_boundary());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_right_boundary()->::jmc_auto::hdmap::LaneBoundary::MergeFrom(from.right_boundary());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_junction_id()->::jmc_auto::hdmap::Id::MergeFrom(from.junction_id());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_road_id()->::jmc_auto::hdmap::Id::MergeFrom(from.road_id());
    }
    if (cached_has_bits & 0x00000040u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000080u) {
      speed_limit_ = from.speed_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000200u) {
      central_curvature_ = from.central_curvature_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_backup_ = from.is_backup_;
    }
    if (cached_has_bits & 0x00000800u) {
      default_reversible_lane_ = from.default_reversible_lane_;
    }
    if (cached_has_bits & 0x00001000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00002000u) {
      turn_ = from.turn_;
    }
    if (cached_has_bits & 0x00004000u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00008000u) {
      turn_type_plan_ = from.turn_type_plan_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.hdmap.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.hdmap.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::Swap(Lane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Lane::InternalSwap(Lane* other) {
  overlap_id_.InternalSwap(&other->overlap_id_);
  predecessor_id_.InternalSwap(&other->predecessor_id_);
  successor_id_.InternalSwap(&other->successor_id_);
  left_neighbor_forward_lane_id_.InternalSwap(&other->left_neighbor_forward_lane_id_);
  right_neighbor_forward_lane_id_.InternalSwap(&other->right_neighbor_forward_lane_id_);
  left_neighbor_reverse_lane_id_.InternalSwap(&other->left_neighbor_reverse_lane_id_);
  right_neighbor_reverse_lane_id_.InternalSwap(&other->right_neighbor_reverse_lane_id_);
  left_sample_.InternalSwap(&other->left_sample_);
  right_sample_.InternalSwap(&other->right_sample_);
  left_road_sample_.InternalSwap(&other->left_road_sample_);
  right_road_sample_.InternalSwap(&other->right_road_sample_);
  stop_sign_id_.InternalSwap(&other->stop_sign_id_);
  crosswalk_id_.InternalSwap(&other->crosswalk_id_);
  yield_sign_id_.InternalSwap(&other->yield_sign_id_);
  clear_area_id_.InternalSwap(&other->clear_area_id_);
  self_reverse_lane_id_.InternalSwap(&other->self_reverse_lane_id_);
  multiple_type_.InternalSwap(&other->multiple_type_);
  std::swap(id_, other->id_);
  std::swap(central_curve_, other->central_curve_);
  std::swap(left_boundary_, other->left_boundary_);
  std::swap(right_boundary_, other->right_boundary_);
  std::swap(junction_id_, other->junction_id_);
  std::swap(road_id_, other->road_id_);
  std::swap(length_, other->length_);
  std::swap(speed_limit_, other->speed_limit_);
  std::swap(width_, other->width_);
  std::swap(central_curvature_, other->central_curvature_);
  std::swap(is_backup_, other->is_backup_);
  std::swap(default_reversible_lane_, other->default_reversible_lane_);
  std::swap(type_, other->type_);
  std::swap(turn_, other->turn_);
  std::swap(direction_, other->direction_);
  std::swap(turn_type_plan_, other->turn_type_plan_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Lane::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Lane

// optional .jmc_auto.hdmap.Id id = 1;
bool Lane::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Lane::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Lane::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Lane::clear_id() {
  if (id_ != NULL) id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_id();
}
const ::jmc_auto::hdmap::Id& Lane::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.id)
  return id_ != NULL ? *id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
::jmc_auto::hdmap::Id* Lane::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.id)
  return id_;
}
::jmc_auto::hdmap::Id* Lane::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Lane.id)
  clear_has_id();
  ::jmc_auto::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Lane::set_allocated_id(::jmc_auto::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Lane.id)
}

// optional .jmc_auto.hdmap.Curve central_curve = 2;
bool Lane::has_central_curve() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Lane::set_has_central_curve() {
  _has_bits_[0] |= 0x00000002u;
}
void Lane::clear_has_central_curve() {
  _has_bits_[0] &= ~0x00000002u;
}
void Lane::clear_central_curve() {
  if (central_curve_ != NULL) central_curve_->::jmc_auto::hdmap::Curve::Clear();
  clear_has_central_curve();
}
const ::jmc_auto::hdmap::Curve& Lane::central_curve() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.central_curve)
  return central_curve_ != NULL ? *central_curve_
                         : *::jmc_auto::hdmap::Curve::internal_default_instance();
}
::jmc_auto::hdmap::Curve* Lane::mutable_central_curve() {
  set_has_central_curve();
  if (central_curve_ == NULL) {
    central_curve_ = new ::jmc_auto::hdmap::Curve;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.central_curve)
  return central_curve_;
}
::jmc_auto::hdmap::Curve* Lane::release_central_curve() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Lane.central_curve)
  clear_has_central_curve();
  ::jmc_auto::hdmap::Curve* temp = central_curve_;
  central_curve_ = NULL;
  return temp;
}
void Lane::set_allocated_central_curve(::jmc_auto::hdmap::Curve* central_curve) {
  delete central_curve_;
  central_curve_ = central_curve;
  if (central_curve) {
    set_has_central_curve();
  } else {
    clear_has_central_curve();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Lane.central_curve)
}

// optional .jmc_auto.hdmap.LaneBoundary left_boundary = 3;
bool Lane::has_left_boundary() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Lane::set_has_left_boundary() {
  _has_bits_[0] |= 0x00000004u;
}
void Lane::clear_has_left_boundary() {
  _has_bits_[0] &= ~0x00000004u;
}
void Lane::clear_left_boundary() {
  if (left_boundary_ != NULL) left_boundary_->::jmc_auto::hdmap::LaneBoundary::Clear();
  clear_has_left_boundary();
}
const ::jmc_auto::hdmap::LaneBoundary& Lane::left_boundary() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.left_boundary)
  return left_boundary_ != NULL ? *left_boundary_
                         : *::jmc_auto::hdmap::LaneBoundary::internal_default_instance();
}
::jmc_auto::hdmap::LaneBoundary* Lane::mutable_left_boundary() {
  set_has_left_boundary();
  if (left_boundary_ == NULL) {
    left_boundary_ = new ::jmc_auto::hdmap::LaneBoundary;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.left_boundary)
  return left_boundary_;
}
::jmc_auto::hdmap::LaneBoundary* Lane::release_left_boundary() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Lane.left_boundary)
  clear_has_left_boundary();
  ::jmc_auto::hdmap::LaneBoundary* temp = left_boundary_;
  left_boundary_ = NULL;
  return temp;
}
void Lane::set_allocated_left_boundary(::jmc_auto::hdmap::LaneBoundary* left_boundary) {
  delete left_boundary_;
  left_boundary_ = left_boundary;
  if (left_boundary) {
    set_has_left_boundary();
  } else {
    clear_has_left_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Lane.left_boundary)
}

// optional .jmc_auto.hdmap.LaneBoundary right_boundary = 4;
bool Lane::has_right_boundary() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Lane::set_has_right_boundary() {
  _has_bits_[0] |= 0x00000008u;
}
void Lane::clear_has_right_boundary() {
  _has_bits_[0] &= ~0x00000008u;
}
void Lane::clear_right_boundary() {
  if (right_boundary_ != NULL) right_boundary_->::jmc_auto::hdmap::LaneBoundary::Clear();
  clear_has_right_boundary();
}
const ::jmc_auto::hdmap::LaneBoundary& Lane::right_boundary() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.right_boundary)
  return right_boundary_ != NULL ? *right_boundary_
                         : *::jmc_auto::hdmap::LaneBoundary::internal_default_instance();
}
::jmc_auto::hdmap::LaneBoundary* Lane::mutable_right_boundary() {
  set_has_right_boundary();
  if (right_boundary_ == NULL) {
    right_boundary_ = new ::jmc_auto::hdmap::LaneBoundary;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.right_boundary)
  return right_boundary_;
}
::jmc_auto::hdmap::LaneBoundary* Lane::release_right_boundary() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Lane.right_boundary)
  clear_has_right_boundary();
  ::jmc_auto::hdmap::LaneBoundary* temp = right_boundary_;
  right_boundary_ = NULL;
  return temp;
}
void Lane::set_allocated_right_boundary(::jmc_auto::hdmap::LaneBoundary* right_boundary) {
  delete right_boundary_;
  right_boundary_ = right_boundary;
  if (right_boundary) {
    set_has_right_boundary();
  } else {
    clear_has_right_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Lane.right_boundary)
}

// optional double length = 5;
bool Lane::has_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Lane::set_has_length() {
  _has_bits_[0] |= 0x00000040u;
}
void Lane::clear_has_length() {
  _has_bits_[0] &= ~0x00000040u;
}
void Lane::clear_length() {
  length_ = 0;
  clear_has_length();
}
double Lane::length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.length)
  return length_;
}
void Lane::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.length)
}

// optional double speed_limit = 6;
bool Lane::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Lane::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000080u;
}
void Lane::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
void Lane::clear_speed_limit() {
  speed_limit_ = 0;
  clear_has_speed_limit();
}
double Lane::speed_limit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.speed_limit)
  return speed_limit_;
}
void Lane::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.speed_limit)
}

// repeated .jmc_auto.hdmap.Id overlap_id = 7;
int Lane::overlap_id_size() const {
  return overlap_id_.size();
}
void Lane::clear_overlap_id() {
  overlap_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Lane::overlap_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.overlap_id)
  return overlap_id_.Get(index);
}
::jmc_auto::hdmap::Id* Lane::mutable_overlap_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.overlap_id)
  return overlap_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Lane::add_overlap_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.overlap_id)
  return overlap_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_overlap_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.overlap_id)
  return &overlap_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::overlap_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.overlap_id)
  return overlap_id_;
}

// repeated .jmc_auto.hdmap.Id predecessor_id = 8;
int Lane::predecessor_id_size() const {
  return predecessor_id_.size();
}
void Lane::clear_predecessor_id() {
  predecessor_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Lane::predecessor_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.predecessor_id)
  return predecessor_id_.Get(index);
}
::jmc_auto::hdmap::Id* Lane::mutable_predecessor_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.predecessor_id)
  return predecessor_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Lane::add_predecessor_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.predecessor_id)
  return predecessor_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_predecessor_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.predecessor_id)
  return &predecessor_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::predecessor_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.predecessor_id)
  return predecessor_id_;
}

// repeated .jmc_auto.hdmap.Id successor_id = 9;
int Lane::successor_id_size() const {
  return successor_id_.size();
}
void Lane::clear_successor_id() {
  successor_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Lane::successor_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.successor_id)
  return successor_id_.Get(index);
}
::jmc_auto::hdmap::Id* Lane::mutable_successor_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.successor_id)
  return successor_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Lane::add_successor_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.successor_id)
  return successor_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_successor_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.successor_id)
  return &successor_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::successor_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.successor_id)
  return successor_id_;
}

// repeated .jmc_auto.hdmap.Id left_neighbor_forward_lane_id = 10;
int Lane::left_neighbor_forward_lane_id_size() const {
  return left_neighbor_forward_lane_id_.size();
}
void Lane::clear_left_neighbor_forward_lane_id() {
  left_neighbor_forward_lane_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Lane::left_neighbor_forward_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.left_neighbor_forward_lane_id)
  return left_neighbor_forward_lane_id_.Get(index);
}
::jmc_auto::hdmap::Id* Lane::mutable_left_neighbor_forward_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.left_neighbor_forward_lane_id)
  return left_neighbor_forward_lane_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Lane::add_left_neighbor_forward_lane_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.left_neighbor_forward_lane_id)
  return left_neighbor_forward_lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_left_neighbor_forward_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.left_neighbor_forward_lane_id)
  return &left_neighbor_forward_lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::left_neighbor_forward_lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.left_neighbor_forward_lane_id)
  return left_neighbor_forward_lane_id_;
}

// repeated .jmc_auto.hdmap.Id right_neighbor_forward_lane_id = 11;
int Lane::right_neighbor_forward_lane_id_size() const {
  return right_neighbor_forward_lane_id_.size();
}
void Lane::clear_right_neighbor_forward_lane_id() {
  right_neighbor_forward_lane_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Lane::right_neighbor_forward_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.right_neighbor_forward_lane_id)
  return right_neighbor_forward_lane_id_.Get(index);
}
::jmc_auto::hdmap::Id* Lane::mutable_right_neighbor_forward_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.right_neighbor_forward_lane_id)
  return right_neighbor_forward_lane_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Lane::add_right_neighbor_forward_lane_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.right_neighbor_forward_lane_id)
  return right_neighbor_forward_lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_right_neighbor_forward_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.right_neighbor_forward_lane_id)
  return &right_neighbor_forward_lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::right_neighbor_forward_lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.right_neighbor_forward_lane_id)
  return right_neighbor_forward_lane_id_;
}

// optional .jmc_auto.hdmap.Lane.LaneType type = 12;
bool Lane::has_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Lane::set_has_type() {
  _has_bits_[0] |= 0x00001000u;
}
void Lane::clear_has_type() {
  _has_bits_[0] &= ~0x00001000u;
}
void Lane::clear_type() {
  type_ = 1;
  clear_has_type();
}
::jmc_auto::hdmap::Lane_LaneType Lane::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.type)
  return static_cast< ::jmc_auto::hdmap::Lane_LaneType >(type_);
}
void Lane::set_type(::jmc_auto::hdmap::Lane_LaneType value) {
  assert(::jmc_auto::hdmap::Lane_LaneType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.type)
}

// optional .jmc_auto.hdmap.Lane.LaneTurn turn = 13;
bool Lane::has_turn() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Lane::set_has_turn() {
  _has_bits_[0] |= 0x00002000u;
}
void Lane::clear_has_turn() {
  _has_bits_[0] &= ~0x00002000u;
}
void Lane::clear_turn() {
  turn_ = 1;
  clear_has_turn();
}
::jmc_auto::hdmap::Lane_LaneTurn Lane::turn() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.turn)
  return static_cast< ::jmc_auto::hdmap::Lane_LaneTurn >(turn_);
}
void Lane::set_turn(::jmc_auto::hdmap::Lane_LaneTurn value) {
  assert(::jmc_auto::hdmap::Lane_LaneTurn_IsValid(value));
  set_has_turn();
  turn_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.turn)
}

// repeated .jmc_auto.hdmap.Id left_neighbor_reverse_lane_id = 14;
int Lane::left_neighbor_reverse_lane_id_size() const {
  return left_neighbor_reverse_lane_id_.size();
}
void Lane::clear_left_neighbor_reverse_lane_id() {
  left_neighbor_reverse_lane_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Lane::left_neighbor_reverse_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.left_neighbor_reverse_lane_id)
  return left_neighbor_reverse_lane_id_.Get(index);
}
::jmc_auto::hdmap::Id* Lane::mutable_left_neighbor_reverse_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.left_neighbor_reverse_lane_id)
  return left_neighbor_reverse_lane_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Lane::add_left_neighbor_reverse_lane_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.left_neighbor_reverse_lane_id)
  return left_neighbor_reverse_lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_left_neighbor_reverse_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.left_neighbor_reverse_lane_id)
  return &left_neighbor_reverse_lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::left_neighbor_reverse_lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.left_neighbor_reverse_lane_id)
  return left_neighbor_reverse_lane_id_;
}

// repeated .jmc_auto.hdmap.Id right_neighbor_reverse_lane_id = 15;
int Lane::right_neighbor_reverse_lane_id_size() const {
  return right_neighbor_reverse_lane_id_.size();
}
void Lane::clear_right_neighbor_reverse_lane_id() {
  right_neighbor_reverse_lane_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Lane::right_neighbor_reverse_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.right_neighbor_reverse_lane_id)
  return right_neighbor_reverse_lane_id_.Get(index);
}
::jmc_auto::hdmap::Id* Lane::mutable_right_neighbor_reverse_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.right_neighbor_reverse_lane_id)
  return right_neighbor_reverse_lane_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Lane::add_right_neighbor_reverse_lane_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.right_neighbor_reverse_lane_id)
  return right_neighbor_reverse_lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_right_neighbor_reverse_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.right_neighbor_reverse_lane_id)
  return &right_neighbor_reverse_lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::right_neighbor_reverse_lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.right_neighbor_reverse_lane_id)
  return right_neighbor_reverse_lane_id_;
}

// optional .jmc_auto.hdmap.Id junction_id = 16;
bool Lane::has_junction_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Lane::set_has_junction_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Lane::clear_has_junction_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Lane::clear_junction_id() {
  if (junction_id_ != NULL) junction_id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_junction_id();
}
const ::jmc_auto::hdmap::Id& Lane::junction_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.junction_id)
  return junction_id_ != NULL ? *junction_id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
::jmc_auto::hdmap::Id* Lane::mutable_junction_id() {
  set_has_junction_id();
  if (junction_id_ == NULL) {
    junction_id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.junction_id)
  return junction_id_;
}
::jmc_auto::hdmap::Id* Lane::release_junction_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Lane.junction_id)
  clear_has_junction_id();
  ::jmc_auto::hdmap::Id* temp = junction_id_;
  junction_id_ = NULL;
  return temp;
}
void Lane::set_allocated_junction_id(::jmc_auto::hdmap::Id* junction_id) {
  delete junction_id_;
  junction_id_ = junction_id;
  if (junction_id) {
    set_has_junction_id();
  } else {
    clear_has_junction_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Lane.junction_id)
}

// repeated .jmc_auto.hdmap.LaneSampleAssociation left_sample = 17;
int Lane::left_sample_size() const {
  return left_sample_.size();
}
void Lane::clear_left_sample() {
  left_sample_.Clear();
}
const ::jmc_auto::hdmap::LaneSampleAssociation& Lane::left_sample(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.left_sample)
  return left_sample_.Get(index);
}
::jmc_auto::hdmap::LaneSampleAssociation* Lane::mutable_left_sample(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.left_sample)
  return left_sample_.Mutable(index);
}
::jmc_auto::hdmap::LaneSampleAssociation* Lane::add_left_sample() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.left_sample)
  return left_sample_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >*
Lane::mutable_left_sample() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.left_sample)
  return &left_sample_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >&
Lane::left_sample() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.left_sample)
  return left_sample_;
}

// repeated .jmc_auto.hdmap.LaneSampleAssociation right_sample = 18;
int Lane::right_sample_size() const {
  return right_sample_.size();
}
void Lane::clear_right_sample() {
  right_sample_.Clear();
}
const ::jmc_auto::hdmap::LaneSampleAssociation& Lane::right_sample(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.right_sample)
  return right_sample_.Get(index);
}
::jmc_auto::hdmap::LaneSampleAssociation* Lane::mutable_right_sample(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.right_sample)
  return right_sample_.Mutable(index);
}
::jmc_auto::hdmap::LaneSampleAssociation* Lane::add_right_sample() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.right_sample)
  return right_sample_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >*
Lane::mutable_right_sample() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.right_sample)
  return &right_sample_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >&
Lane::right_sample() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.right_sample)
  return right_sample_;
}

// optional .jmc_auto.hdmap.Lane.LaneDirection direction = 19;
bool Lane::has_direction() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Lane::set_has_direction() {
  _has_bits_[0] |= 0x00004000u;
}
void Lane::clear_has_direction() {
  _has_bits_[0] &= ~0x00004000u;
}
void Lane::clear_direction() {
  direction_ = 1;
  clear_has_direction();
}
::jmc_auto::hdmap::Lane_LaneDirection Lane::direction() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.direction)
  return static_cast< ::jmc_auto::hdmap::Lane_LaneDirection >(direction_);
}
void Lane::set_direction(::jmc_auto::hdmap::Lane_LaneDirection value) {
  assert(::jmc_auto::hdmap::Lane_LaneDirection_IsValid(value));
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.direction)
}

// repeated .jmc_auto.hdmap.LaneSampleAssociation left_road_sample = 20;
int Lane::left_road_sample_size() const {
  return left_road_sample_.size();
}
void Lane::clear_left_road_sample() {
  left_road_sample_.Clear();
}
const ::jmc_auto::hdmap::LaneSampleAssociation& Lane::left_road_sample(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.left_road_sample)
  return left_road_sample_.Get(index);
}
::jmc_auto::hdmap::LaneSampleAssociation* Lane::mutable_left_road_sample(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.left_road_sample)
  return left_road_sample_.Mutable(index);
}
::jmc_auto::hdmap::LaneSampleAssociation* Lane::add_left_road_sample() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.left_road_sample)
  return left_road_sample_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >*
Lane::mutable_left_road_sample() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.left_road_sample)
  return &left_road_sample_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >&
Lane::left_road_sample() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.left_road_sample)
  return left_road_sample_;
}

// repeated .jmc_auto.hdmap.LaneSampleAssociation right_road_sample = 21;
int Lane::right_road_sample_size() const {
  return right_road_sample_.size();
}
void Lane::clear_right_road_sample() {
  right_road_sample_.Clear();
}
const ::jmc_auto::hdmap::LaneSampleAssociation& Lane::right_road_sample(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.right_road_sample)
  return right_road_sample_.Get(index);
}
::jmc_auto::hdmap::LaneSampleAssociation* Lane::mutable_right_road_sample(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.right_road_sample)
  return right_road_sample_.Mutable(index);
}
::jmc_auto::hdmap::LaneSampleAssociation* Lane::add_right_road_sample() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.right_road_sample)
  return right_road_sample_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >*
Lane::mutable_right_road_sample() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.right_road_sample)
  return &right_road_sample_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >&
Lane::right_road_sample() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.right_road_sample)
  return right_road_sample_;
}

// optional double width = 22;
bool Lane::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Lane::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
void Lane::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
void Lane::clear_width() {
  width_ = 0;
  clear_has_width();
}
double Lane::width() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.width)
  return width_;
}
void Lane::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.width)
}

// repeated .jmc_auto.hdmap.Id stop_sign_id = 23;
int Lane::stop_sign_id_size() const {
  return stop_sign_id_.size();
}
void Lane::clear_stop_sign_id() {
  stop_sign_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Lane::stop_sign_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.stop_sign_id)
  return stop_sign_id_.Get(index);
}
::jmc_auto::hdmap::Id* Lane::mutable_stop_sign_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.stop_sign_id)
  return stop_sign_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Lane::add_stop_sign_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.stop_sign_id)
  return stop_sign_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_stop_sign_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.stop_sign_id)
  return &stop_sign_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::stop_sign_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.stop_sign_id)
  return stop_sign_id_;
}

// repeated .jmc_auto.hdmap.Id crosswalk_id = 24;
int Lane::crosswalk_id_size() const {
  return crosswalk_id_.size();
}
void Lane::clear_crosswalk_id() {
  crosswalk_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Lane::crosswalk_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.crosswalk_id)
  return crosswalk_id_.Get(index);
}
::jmc_auto::hdmap::Id* Lane::mutable_crosswalk_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.crosswalk_id)
  return crosswalk_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Lane::add_crosswalk_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.crosswalk_id)
  return crosswalk_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_crosswalk_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.crosswalk_id)
  return &crosswalk_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::crosswalk_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.crosswalk_id)
  return crosswalk_id_;
}

// repeated .jmc_auto.hdmap.Id yield_sign_id = 25;
int Lane::yield_sign_id_size() const {
  return yield_sign_id_.size();
}
void Lane::clear_yield_sign_id() {
  yield_sign_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Lane::yield_sign_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.yield_sign_id)
  return yield_sign_id_.Get(index);
}
::jmc_auto::hdmap::Id* Lane::mutable_yield_sign_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.yield_sign_id)
  return yield_sign_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Lane::add_yield_sign_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.yield_sign_id)
  return yield_sign_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_yield_sign_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.yield_sign_id)
  return &yield_sign_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::yield_sign_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.yield_sign_id)
  return yield_sign_id_;
}

// repeated .jmc_auto.hdmap.Id clear_area_id = 26;
int Lane::clear_area_id_size() const {
  return clear_area_id_.size();
}
void Lane::clear_clear_area_id() {
  clear_area_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Lane::clear_area_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.clear_area_id)
  return clear_area_id_.Get(index);
}
::jmc_auto::hdmap::Id* Lane::mutable_clear_area_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.clear_area_id)
  return clear_area_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Lane::add_clear_area_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.clear_area_id)
  return clear_area_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_clear_area_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.clear_area_id)
  return &clear_area_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::clear_area_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.clear_area_id)
  return clear_area_id_;
}

// optional .jmc_auto.hdmap.Lane.LaneTurnTypePlan turn_type_plan = 27;
bool Lane::has_turn_type_plan() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Lane::set_has_turn_type_plan() {
  _has_bits_[0] |= 0x00008000u;
}
void Lane::clear_has_turn_type_plan() {
  _has_bits_[0] &= ~0x00008000u;
}
void Lane::clear_turn_type_plan() {
  turn_type_plan_ = 1;
  clear_has_turn_type_plan();
}
::jmc_auto::hdmap::Lane_LaneTurnTypePlan Lane::turn_type_plan() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.turn_type_plan)
  return static_cast< ::jmc_auto::hdmap::Lane_LaneTurnTypePlan >(turn_type_plan_);
}
void Lane::set_turn_type_plan(::jmc_auto::hdmap::Lane_LaneTurnTypePlan value) {
  assert(::jmc_auto::hdmap::Lane_LaneTurnTypePlan_IsValid(value));
  set_has_turn_type_plan();
  turn_type_plan_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.turn_type_plan)
}

// optional bool is_backup = 28;
bool Lane::has_is_backup() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Lane::set_has_is_backup() {
  _has_bits_[0] |= 0x00000400u;
}
void Lane::clear_has_is_backup() {
  _has_bits_[0] &= ~0x00000400u;
}
void Lane::clear_is_backup() {
  is_backup_ = false;
  clear_has_is_backup();
}
bool Lane::is_backup() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.is_backup)
  return is_backup_;
}
void Lane::set_is_backup(bool value) {
  set_has_is_backup();
  is_backup_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.is_backup)
}

// optional .jmc_auto.hdmap.Id road_id = 29;
bool Lane::has_road_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Lane::set_has_road_id() {
  _has_bits_[0] |= 0x00000020u;
}
void Lane::clear_has_road_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void Lane::clear_road_id() {
  if (road_id_ != NULL) road_id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_road_id();
}
const ::jmc_auto::hdmap::Id& Lane::road_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.road_id)
  return road_id_ != NULL ? *road_id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
::jmc_auto::hdmap::Id* Lane::mutable_road_id() {
  set_has_road_id();
  if (road_id_ == NULL) {
    road_id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.road_id)
  return road_id_;
}
::jmc_auto::hdmap::Id* Lane::release_road_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Lane.road_id)
  clear_has_road_id();
  ::jmc_auto::hdmap::Id* temp = road_id_;
  road_id_ = NULL;
  return temp;
}
void Lane::set_allocated_road_id(::jmc_auto::hdmap::Id* road_id) {
  delete road_id_;
  road_id_ = road_id;
  if (road_id) {
    set_has_road_id();
  } else {
    clear_has_road_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Lane.road_id)
}

// optional double central_curvature = 30;
bool Lane::has_central_curvature() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Lane::set_has_central_curvature() {
  _has_bits_[0] |= 0x00000200u;
}
void Lane::clear_has_central_curvature() {
  _has_bits_[0] &= ~0x00000200u;
}
void Lane::clear_central_curvature() {
  central_curvature_ = 0;
  clear_has_central_curvature();
}
double Lane::central_curvature() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.central_curvature)
  return central_curvature_;
}
void Lane::set_central_curvature(double value) {
  set_has_central_curvature();
  central_curvature_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.central_curvature)
}

// repeated .jmc_auto.hdmap.Id self_reverse_lane_id = 31;
int Lane::self_reverse_lane_id_size() const {
  return self_reverse_lane_id_.size();
}
void Lane::clear_self_reverse_lane_id() {
  self_reverse_lane_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Lane::self_reverse_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.self_reverse_lane_id)
  return self_reverse_lane_id_.Get(index);
}
::jmc_auto::hdmap::Id* Lane::mutable_self_reverse_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.self_reverse_lane_id)
  return self_reverse_lane_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Lane::add_self_reverse_lane_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.self_reverse_lane_id)
  return self_reverse_lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_self_reverse_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.self_reverse_lane_id)
  return &self_reverse_lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::self_reverse_lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.self_reverse_lane_id)
  return self_reverse_lane_id_;
}

// repeated .jmc_auto.hdmap.Lane.LaneType multiple_type = 32;
int Lane::multiple_type_size() const {
  return multiple_type_.size();
}
void Lane::clear_multiple_type() {
  multiple_type_.Clear();
}
::jmc_auto::hdmap::Lane_LaneType Lane::multiple_type(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.multiple_type)
  return static_cast< ::jmc_auto::hdmap::Lane_LaneType >(multiple_type_.Get(index));
}
void Lane::set_multiple_type(int index, ::jmc_auto::hdmap::Lane_LaneType value) {
  assert(::jmc_auto::hdmap::Lane_LaneType_IsValid(value));
  multiple_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.multiple_type)
}
void Lane::add_multiple_type(::jmc_auto::hdmap::Lane_LaneType value) {
  assert(::jmc_auto::hdmap::Lane_LaneType_IsValid(value));
  multiple_type_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.multiple_type)
}
const ::google::protobuf::RepeatedField<int>&
Lane::multiple_type() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.multiple_type)
  return multiple_type_;
}
::google::protobuf::RepeatedField<int>*
Lane::mutable_multiple_type() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.multiple_type)
  return &multiple_type_;
}

// optional bool default_reversible_lane = 33;
bool Lane::has_default_reversible_lane() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Lane::set_has_default_reversible_lane() {
  _has_bits_[0] |= 0x00000800u;
}
void Lane::clear_has_default_reversible_lane() {
  _has_bits_[0] &= ~0x00000800u;
}
void Lane::clear_default_reversible_lane() {
  default_reversible_lane_ = false;
  clear_has_default_reversible_lane();
}
bool Lane::default_reversible_lane() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.default_reversible_lane)
  return default_reversible_lane_;
}
void Lane::set_default_reversible_lane(bool value) {
  set_has_default_reversible_lane();
  default_reversible_lane_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.default_reversible_lane)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
