// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_lane.proto

#ifndef PROTOBUF_modules_2fmap_2fproto_2fmap_5flane_2eproto__INCLUDED
#define PROTOBUF_modules_2fmap_2fproto_2fmap_5flane_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/map/proto/map_id.pb.h"
#include "modules/map/proto/map_geometry.pb.h"
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace hdmap {
class Curve;
class CurveDefaultTypeInternal;
extern CurveDefaultTypeInternal _Curve_default_instance_;
class CurveSegment;
class CurveSegmentDefaultTypeInternal;
extern CurveSegmentDefaultTypeInternal _CurveSegment_default_instance_;
class Id;
class IdDefaultTypeInternal;
extern IdDefaultTypeInternal _Id_default_instance_;
class Lane;
class LaneDefaultTypeInternal;
extern LaneDefaultTypeInternal _Lane_default_instance_;
class LaneBoundary;
class LaneBoundaryDefaultTypeInternal;
extern LaneBoundaryDefaultTypeInternal _LaneBoundary_default_instance_;
class LaneBoundaryType;
class LaneBoundaryTypeDefaultTypeInternal;
extern LaneBoundaryTypeDefaultTypeInternal _LaneBoundaryType_default_instance_;
class LaneSampleAssociation;
class LaneSampleAssociationDefaultTypeInternal;
extern LaneSampleAssociationDefaultTypeInternal _LaneSampleAssociation_default_instance_;
class LineSegment;
class LineSegmentDefaultTypeInternal;
extern LineSegmentDefaultTypeInternal _LineSegment_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
}  // namespace hdmap
}  // namespace jmc_auto

namespace jmc_auto {
namespace hdmap {

namespace protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto

enum LaneBoundaryType_Type {
  LaneBoundaryType_Type_UNKNOWN = 0,
  LaneBoundaryType_Type_DOTTED_YELLOW = 1,
  LaneBoundaryType_Type_DOTTED_WHITE = 2,
  LaneBoundaryType_Type_SOLID_YELLOW = 3,
  LaneBoundaryType_Type_SOLID_WHITE = 4,
  LaneBoundaryType_Type_DOUBLE_YELLOW = 5,
  LaneBoundaryType_Type_CURB = 6
};
bool LaneBoundaryType_Type_IsValid(int value);
const LaneBoundaryType_Type LaneBoundaryType_Type_Type_MIN = LaneBoundaryType_Type_UNKNOWN;
const LaneBoundaryType_Type LaneBoundaryType_Type_Type_MAX = LaneBoundaryType_Type_CURB;
const int LaneBoundaryType_Type_Type_ARRAYSIZE = LaneBoundaryType_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneBoundaryType_Type_descriptor();
inline const ::std::string& LaneBoundaryType_Type_Name(LaneBoundaryType_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneBoundaryType_Type_descriptor(), value);
}
inline bool LaneBoundaryType_Type_Parse(
    const ::std::string& name, LaneBoundaryType_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneBoundaryType_Type>(
    LaneBoundaryType_Type_descriptor(), name, value);
}
enum LaneBoundary_Type {
  LaneBoundary_Type_UNKNOWN = 0,
  LaneBoundary_Type_DOTTED_YELLOW = 1,
  LaneBoundary_Type_DOTTED_WHITE = 2,
  LaneBoundary_Type_SOLID_YELLOW = 3,
  LaneBoundary_Type_SOLID_WHITE = 4,
  LaneBoundary_Type_DOUBLE_YELLOW = 5,
  LaneBoundary_Type_CURB = 6
};
bool LaneBoundary_Type_IsValid(int value);
const LaneBoundary_Type LaneBoundary_Type_Type_MIN = LaneBoundary_Type_UNKNOWN;
const LaneBoundary_Type LaneBoundary_Type_Type_MAX = LaneBoundary_Type_CURB;
const int LaneBoundary_Type_Type_ARRAYSIZE = LaneBoundary_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LaneBoundary_Type_descriptor();
inline const ::std::string& LaneBoundary_Type_Name(LaneBoundary_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LaneBoundary_Type_descriptor(), value);
}
inline bool LaneBoundary_Type_Parse(
    const ::std::string& name, LaneBoundary_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LaneBoundary_Type>(
    LaneBoundary_Type_descriptor(), name, value);
}
enum Lane_LaneType {
  Lane_LaneType_NONE = 1,
  Lane_LaneType_CITY_DRIVING = 2,
  Lane_LaneType_BIKING = 3,
  Lane_LaneType_SIDEWALK = 4,
  Lane_LaneType_PARKING = 5
};
bool Lane_LaneType_IsValid(int value);
const Lane_LaneType Lane_LaneType_LaneType_MIN = Lane_LaneType_NONE;
const Lane_LaneType Lane_LaneType_LaneType_MAX = Lane_LaneType_PARKING;
const int Lane_LaneType_LaneType_ARRAYSIZE = Lane_LaneType_LaneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lane_LaneType_descriptor();
inline const ::std::string& Lane_LaneType_Name(Lane_LaneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lane_LaneType_descriptor(), value);
}
inline bool Lane_LaneType_Parse(
    const ::std::string& name, Lane_LaneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lane_LaneType>(
    Lane_LaneType_descriptor(), name, value);
}
enum Lane_LaneTurn {
  Lane_LaneTurn_NO_TURN = 1,
  Lane_LaneTurn_LEFT_TURN = 2,
  Lane_LaneTurn_RIGHT_TURN = 3,
  Lane_LaneTurn_U_TURN = 4
};
bool Lane_LaneTurn_IsValid(int value);
const Lane_LaneTurn Lane_LaneTurn_LaneTurn_MIN = Lane_LaneTurn_NO_TURN;
const Lane_LaneTurn Lane_LaneTurn_LaneTurn_MAX = Lane_LaneTurn_U_TURN;
const int Lane_LaneTurn_LaneTurn_ARRAYSIZE = Lane_LaneTurn_LaneTurn_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lane_LaneTurn_descriptor();
inline const ::std::string& Lane_LaneTurn_Name(Lane_LaneTurn value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lane_LaneTurn_descriptor(), value);
}
inline bool Lane_LaneTurn_Parse(
    const ::std::string& name, Lane_LaneTurn* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lane_LaneTurn>(
    Lane_LaneTurn_descriptor(), name, value);
}
enum Lane_LaneDirection {
  Lane_LaneDirection_FORWARD = 1,
  Lane_LaneDirection_BACKWARD = 2,
  Lane_LaneDirection_BIDIRECTION = 3
};
bool Lane_LaneDirection_IsValid(int value);
const Lane_LaneDirection Lane_LaneDirection_LaneDirection_MIN = Lane_LaneDirection_FORWARD;
const Lane_LaneDirection Lane_LaneDirection_LaneDirection_MAX = Lane_LaneDirection_BIDIRECTION;
const int Lane_LaneDirection_LaneDirection_ARRAYSIZE = Lane_LaneDirection_LaneDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lane_LaneDirection_descriptor();
inline const ::std::string& Lane_LaneDirection_Name(Lane_LaneDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lane_LaneDirection_descriptor(), value);
}
inline bool Lane_LaneDirection_Parse(
    const ::std::string& name, Lane_LaneDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lane_LaneDirection>(
    Lane_LaneDirection_descriptor(), name, value);
}
enum Lane_LaneTurnTypePlan {
  Lane_LaneTurnTypePlan_TTP_NO_TURN = 1,
  Lane_LaneTurnTypePlan_TTP_LEFT_TURN = 2,
  Lane_LaneTurnTypePlan_TTP_RIGHT_TURN = 3,
  Lane_LaneTurnTypePlan_TTP_U_TURN = 4,
  Lane_LaneTurnTypePlan_TTP_LEFT_AND_NO_TURN = 5,
  Lane_LaneTurnTypePlan_TTP_LEFT_AND_U_TURN = 6,
  Lane_LaneTurnTypePlan_TTP_U_AND_NO_TURN = 7,
  Lane_LaneTurnTypePlan_TTP_RIGHT_AND_NO_TURN = 8,
  Lane_LaneTurnTypePlan_TTP_LEFT_AND_U_AND_NO_TURN = 9,
  Lane_LaneTurnTypePlan_TTP_UNKNOWN = 10
};
bool Lane_LaneTurnTypePlan_IsValid(int value);
const Lane_LaneTurnTypePlan Lane_LaneTurnTypePlan_LaneTurnTypePlan_MIN = Lane_LaneTurnTypePlan_TTP_NO_TURN;
const Lane_LaneTurnTypePlan Lane_LaneTurnTypePlan_LaneTurnTypePlan_MAX = Lane_LaneTurnTypePlan_TTP_UNKNOWN;
const int Lane_LaneTurnTypePlan_LaneTurnTypePlan_ARRAYSIZE = Lane_LaneTurnTypePlan_LaneTurnTypePlan_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lane_LaneTurnTypePlan_descriptor();
inline const ::std::string& Lane_LaneTurnTypePlan_Name(Lane_LaneTurnTypePlan value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lane_LaneTurnTypePlan_descriptor(), value);
}
inline bool Lane_LaneTurnTypePlan_Parse(
    const ::std::string& name, Lane_LaneTurnTypePlan* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lane_LaneTurnTypePlan>(
    Lane_LaneTurnTypePlan_descriptor(), name, value);
}
// ===================================================================

class LaneBoundaryType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.hdmap.LaneBoundaryType) */ {
 public:
  LaneBoundaryType();
  virtual ~LaneBoundaryType();

  LaneBoundaryType(const LaneBoundaryType& from);

  inline LaneBoundaryType& operator=(const LaneBoundaryType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneBoundaryType& default_instance();

  static inline const LaneBoundaryType* internal_default_instance() {
    return reinterpret_cast<const LaneBoundaryType*>(
               &_LaneBoundaryType_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LaneBoundaryType* other);

  // implements Message ----------------------------------------------

  inline LaneBoundaryType* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneBoundaryType* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneBoundaryType& from);
  void MergeFrom(const LaneBoundaryType& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneBoundaryType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LaneBoundaryType_Type Type;
  static const Type UNKNOWN =
    LaneBoundaryType_Type_UNKNOWN;
  static const Type DOTTED_YELLOW =
    LaneBoundaryType_Type_DOTTED_YELLOW;
  static const Type DOTTED_WHITE =
    LaneBoundaryType_Type_DOTTED_WHITE;
  static const Type SOLID_YELLOW =
    LaneBoundaryType_Type_SOLID_YELLOW;
  static const Type SOLID_WHITE =
    LaneBoundaryType_Type_SOLID_WHITE;
  static const Type DOUBLE_YELLOW =
    LaneBoundaryType_Type_DOUBLE_YELLOW;
  static const Type CURB =
    LaneBoundaryType_Type_CURB;
  static inline bool Type_IsValid(int value) {
    return LaneBoundaryType_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LaneBoundaryType_Type_Type_MIN;
  static const Type Type_MAX =
    LaneBoundaryType_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LaneBoundaryType_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LaneBoundaryType_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LaneBoundaryType_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LaneBoundaryType_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.hdmap.LaneBoundaryType.Type types = 2;
  int types_size() const;
  void clear_types();
  static const int kTypesFieldNumber = 2;
  ::jmc_auto::hdmap::LaneBoundaryType_Type types(int index) const;
  void set_types(int index, ::jmc_auto::hdmap::LaneBoundaryType_Type value);
  void add_types(::jmc_auto::hdmap::LaneBoundaryType_Type value);
  const ::google::protobuf::RepeatedField<int>& types() const;
  ::google::protobuf::RepeatedField<int>* mutable_types();

  // optional double s = 1;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 1;
  double s() const;
  void set_s(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.hdmap.LaneBoundaryType)
 private:
  void set_has_s();
  void clear_has_s();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> types_;
  double s_;
  friend struct protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneBoundary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.hdmap.LaneBoundary) */ {
 public:
  LaneBoundary();
  virtual ~LaneBoundary();

  LaneBoundary(const LaneBoundary& from);

  inline LaneBoundary& operator=(const LaneBoundary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneBoundary& default_instance();

  static inline const LaneBoundary* internal_default_instance() {
    return reinterpret_cast<const LaneBoundary*>(
               &_LaneBoundary_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LaneBoundary* other);

  // implements Message ----------------------------------------------

  inline LaneBoundary* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneBoundary* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneBoundary& from);
  void MergeFrom(const LaneBoundary& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneBoundary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LaneBoundary_Type Type;
  static const Type UNKNOWN =
    LaneBoundary_Type_UNKNOWN;
  static const Type DOTTED_YELLOW =
    LaneBoundary_Type_DOTTED_YELLOW;
  static const Type DOTTED_WHITE =
    LaneBoundary_Type_DOTTED_WHITE;
  static const Type SOLID_YELLOW =
    LaneBoundary_Type_SOLID_YELLOW;
  static const Type SOLID_WHITE =
    LaneBoundary_Type_SOLID_WHITE;
  static const Type DOUBLE_YELLOW =
    LaneBoundary_Type_DOUBLE_YELLOW;
  static const Type CURB =
    LaneBoundary_Type_CURB;
  static inline bool Type_IsValid(int value) {
    return LaneBoundary_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LaneBoundary_Type_Type_MIN;
  static const Type Type_MAX =
    LaneBoundary_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LaneBoundary_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LaneBoundary_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LaneBoundary_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LaneBoundary_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.hdmap.LaneBoundaryType boundary_type = 4;
  int boundary_type_size() const;
  void clear_boundary_type();
  static const int kBoundaryTypeFieldNumber = 4;
  const ::jmc_auto::hdmap::LaneBoundaryType& boundary_type(int index) const;
  ::jmc_auto::hdmap::LaneBoundaryType* mutable_boundary_type(int index);
  ::jmc_auto::hdmap::LaneBoundaryType* add_boundary_type();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneBoundaryType >*
      mutable_boundary_type();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneBoundaryType >&
      boundary_type() const;

  // optional .jmc_auto.hdmap.Curve curve = 1;
  bool has_curve() const;
  void clear_curve();
  static const int kCurveFieldNumber = 1;
  const ::jmc_auto::hdmap::Curve& curve() const;
  ::jmc_auto::hdmap::Curve* mutable_curve();
  ::jmc_auto::hdmap::Curve* release_curve();
  void set_allocated_curve(::jmc_auto::hdmap::Curve* curve);

  // optional double length = 2;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  double length() const;
  void set_length(double value);

  // optional bool virtual = 3;
  bool has_virtual_() const;
  void clear_virtual_();
  static const int kVirtualFieldNumber = 3;
  bool virtual_() const;
  void set_virtual_(bool value);

  // optional .jmc_auto.hdmap.LaneBoundary.Type type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::jmc_auto::hdmap::LaneBoundary_Type type() const;
  void set_type(::jmc_auto::hdmap::LaneBoundary_Type value);

  // @@protoc_insertion_point(class_scope:jmc_auto.hdmap.LaneBoundary)
 private:
  void set_has_curve();
  void clear_has_curve();
  void set_has_length();
  void clear_has_length();
  void set_has_virtual_();
  void clear_has_virtual_();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneBoundaryType > boundary_type_;
  ::jmc_auto::hdmap::Curve* curve_;
  double length_;
  bool virtual__;
  int type_;
  friend struct protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneSampleAssociation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.hdmap.LaneSampleAssociation) */ {
 public:
  LaneSampleAssociation();
  virtual ~LaneSampleAssociation();

  LaneSampleAssociation(const LaneSampleAssociation& from);

  inline LaneSampleAssociation& operator=(const LaneSampleAssociation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneSampleAssociation& default_instance();

  static inline const LaneSampleAssociation* internal_default_instance() {
    return reinterpret_cast<const LaneSampleAssociation*>(
               &_LaneSampleAssociation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(LaneSampleAssociation* other);

  // implements Message ----------------------------------------------

  inline LaneSampleAssociation* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneSampleAssociation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneSampleAssociation& from);
  void MergeFrom(const LaneSampleAssociation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneSampleAssociation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double s = 1;
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 1;
  double s() const;
  void set_s(double value);

  // optional double width = 2;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  double width() const;
  void set_width(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.hdmap.LaneSampleAssociation)
 private:
  void set_has_s();
  void clear_has_s();
  void set_has_width();
  void clear_has_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double s_;
  double width_;
  friend struct protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Lane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.hdmap.Lane) */ {
 public:
  Lane();
  virtual ~Lane();

  Lane(const Lane& from);

  inline Lane& operator=(const Lane& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lane& default_instance();

  static inline const Lane* internal_default_instance() {
    return reinterpret_cast<const Lane*>(
               &_Lane_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Lane* other);

  // implements Message ----------------------------------------------

  inline Lane* New() const PROTOBUF_FINAL { return New(NULL); }

  Lane* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Lane& from);
  void MergeFrom(const Lane& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Lane* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Lane_LaneType LaneType;
  static const LaneType NONE =
    Lane_LaneType_NONE;
  static const LaneType CITY_DRIVING =
    Lane_LaneType_CITY_DRIVING;
  static const LaneType BIKING =
    Lane_LaneType_BIKING;
  static const LaneType SIDEWALK =
    Lane_LaneType_SIDEWALK;
  static const LaneType PARKING =
    Lane_LaneType_PARKING;
  static inline bool LaneType_IsValid(int value) {
    return Lane_LaneType_IsValid(value);
  }
  static const LaneType LaneType_MIN =
    Lane_LaneType_LaneType_MIN;
  static const LaneType LaneType_MAX =
    Lane_LaneType_LaneType_MAX;
  static const int LaneType_ARRAYSIZE =
    Lane_LaneType_LaneType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LaneType_descriptor() {
    return Lane_LaneType_descriptor();
  }
  static inline const ::std::string& LaneType_Name(LaneType value) {
    return Lane_LaneType_Name(value);
  }
  static inline bool LaneType_Parse(const ::std::string& name,
      LaneType* value) {
    return Lane_LaneType_Parse(name, value);
  }

  typedef Lane_LaneTurn LaneTurn;
  static const LaneTurn NO_TURN =
    Lane_LaneTurn_NO_TURN;
  static const LaneTurn LEFT_TURN =
    Lane_LaneTurn_LEFT_TURN;
  static const LaneTurn RIGHT_TURN =
    Lane_LaneTurn_RIGHT_TURN;
  static const LaneTurn U_TURN =
    Lane_LaneTurn_U_TURN;
  static inline bool LaneTurn_IsValid(int value) {
    return Lane_LaneTurn_IsValid(value);
  }
  static const LaneTurn LaneTurn_MIN =
    Lane_LaneTurn_LaneTurn_MIN;
  static const LaneTurn LaneTurn_MAX =
    Lane_LaneTurn_LaneTurn_MAX;
  static const int LaneTurn_ARRAYSIZE =
    Lane_LaneTurn_LaneTurn_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LaneTurn_descriptor() {
    return Lane_LaneTurn_descriptor();
  }
  static inline const ::std::string& LaneTurn_Name(LaneTurn value) {
    return Lane_LaneTurn_Name(value);
  }
  static inline bool LaneTurn_Parse(const ::std::string& name,
      LaneTurn* value) {
    return Lane_LaneTurn_Parse(name, value);
  }

  typedef Lane_LaneDirection LaneDirection;
  static const LaneDirection FORWARD =
    Lane_LaneDirection_FORWARD;
  static const LaneDirection BACKWARD =
    Lane_LaneDirection_BACKWARD;
  static const LaneDirection BIDIRECTION =
    Lane_LaneDirection_BIDIRECTION;
  static inline bool LaneDirection_IsValid(int value) {
    return Lane_LaneDirection_IsValid(value);
  }
  static const LaneDirection LaneDirection_MIN =
    Lane_LaneDirection_LaneDirection_MIN;
  static const LaneDirection LaneDirection_MAX =
    Lane_LaneDirection_LaneDirection_MAX;
  static const int LaneDirection_ARRAYSIZE =
    Lane_LaneDirection_LaneDirection_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LaneDirection_descriptor() {
    return Lane_LaneDirection_descriptor();
  }
  static inline const ::std::string& LaneDirection_Name(LaneDirection value) {
    return Lane_LaneDirection_Name(value);
  }
  static inline bool LaneDirection_Parse(const ::std::string& name,
      LaneDirection* value) {
    return Lane_LaneDirection_Parse(name, value);
  }

  typedef Lane_LaneTurnTypePlan LaneTurnTypePlan;
  static const LaneTurnTypePlan TTP_NO_TURN =
    Lane_LaneTurnTypePlan_TTP_NO_TURN;
  static const LaneTurnTypePlan TTP_LEFT_TURN =
    Lane_LaneTurnTypePlan_TTP_LEFT_TURN;
  static const LaneTurnTypePlan TTP_RIGHT_TURN =
    Lane_LaneTurnTypePlan_TTP_RIGHT_TURN;
  static const LaneTurnTypePlan TTP_U_TURN =
    Lane_LaneTurnTypePlan_TTP_U_TURN;
  static const LaneTurnTypePlan TTP_LEFT_AND_NO_TURN =
    Lane_LaneTurnTypePlan_TTP_LEFT_AND_NO_TURN;
  static const LaneTurnTypePlan TTP_LEFT_AND_U_TURN =
    Lane_LaneTurnTypePlan_TTP_LEFT_AND_U_TURN;
  static const LaneTurnTypePlan TTP_U_AND_NO_TURN =
    Lane_LaneTurnTypePlan_TTP_U_AND_NO_TURN;
  static const LaneTurnTypePlan TTP_RIGHT_AND_NO_TURN =
    Lane_LaneTurnTypePlan_TTP_RIGHT_AND_NO_TURN;
  static const LaneTurnTypePlan TTP_LEFT_AND_U_AND_NO_TURN =
    Lane_LaneTurnTypePlan_TTP_LEFT_AND_U_AND_NO_TURN;
  static const LaneTurnTypePlan TTP_UNKNOWN =
    Lane_LaneTurnTypePlan_TTP_UNKNOWN;
  static inline bool LaneTurnTypePlan_IsValid(int value) {
    return Lane_LaneTurnTypePlan_IsValid(value);
  }
  static const LaneTurnTypePlan LaneTurnTypePlan_MIN =
    Lane_LaneTurnTypePlan_LaneTurnTypePlan_MIN;
  static const LaneTurnTypePlan LaneTurnTypePlan_MAX =
    Lane_LaneTurnTypePlan_LaneTurnTypePlan_MAX;
  static const int LaneTurnTypePlan_ARRAYSIZE =
    Lane_LaneTurnTypePlan_LaneTurnTypePlan_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LaneTurnTypePlan_descriptor() {
    return Lane_LaneTurnTypePlan_descriptor();
  }
  static inline const ::std::string& LaneTurnTypePlan_Name(LaneTurnTypePlan value) {
    return Lane_LaneTurnTypePlan_Name(value);
  }
  static inline bool LaneTurnTypePlan_Parse(const ::std::string& name,
      LaneTurnTypePlan* value) {
    return Lane_LaneTurnTypePlan_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.hdmap.Id overlap_id = 7;
  int overlap_id_size() const;
  void clear_overlap_id();
  static const int kOverlapIdFieldNumber = 7;
  const ::jmc_auto::hdmap::Id& overlap_id(int index) const;
  ::jmc_auto::hdmap::Id* mutable_overlap_id(int index);
  ::jmc_auto::hdmap::Id* add_overlap_id();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
      mutable_overlap_id();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
      overlap_id() const;

  // repeated .jmc_auto.hdmap.Id predecessor_id = 8;
  int predecessor_id_size() const;
  void clear_predecessor_id();
  static const int kPredecessorIdFieldNumber = 8;
  const ::jmc_auto::hdmap::Id& predecessor_id(int index) const;
  ::jmc_auto::hdmap::Id* mutable_predecessor_id(int index);
  ::jmc_auto::hdmap::Id* add_predecessor_id();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
      mutable_predecessor_id();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
      predecessor_id() const;

  // repeated .jmc_auto.hdmap.Id successor_id = 9;
  int successor_id_size() const;
  void clear_successor_id();
  static const int kSuccessorIdFieldNumber = 9;
  const ::jmc_auto::hdmap::Id& successor_id(int index) const;
  ::jmc_auto::hdmap::Id* mutable_successor_id(int index);
  ::jmc_auto::hdmap::Id* add_successor_id();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
      mutable_successor_id();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
      successor_id() const;

  // repeated .jmc_auto.hdmap.Id left_neighbor_forward_lane_id = 10;
  int left_neighbor_forward_lane_id_size() const;
  void clear_left_neighbor_forward_lane_id();
  static const int kLeftNeighborForwardLaneIdFieldNumber = 10;
  const ::jmc_auto::hdmap::Id& left_neighbor_forward_lane_id(int index) const;
  ::jmc_auto::hdmap::Id* mutable_left_neighbor_forward_lane_id(int index);
  ::jmc_auto::hdmap::Id* add_left_neighbor_forward_lane_id();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
      mutable_left_neighbor_forward_lane_id();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
      left_neighbor_forward_lane_id() const;

  // repeated .jmc_auto.hdmap.Id right_neighbor_forward_lane_id = 11;
  int right_neighbor_forward_lane_id_size() const;
  void clear_right_neighbor_forward_lane_id();
  static const int kRightNeighborForwardLaneIdFieldNumber = 11;
  const ::jmc_auto::hdmap::Id& right_neighbor_forward_lane_id(int index) const;
  ::jmc_auto::hdmap::Id* mutable_right_neighbor_forward_lane_id(int index);
  ::jmc_auto::hdmap::Id* add_right_neighbor_forward_lane_id();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
      mutable_right_neighbor_forward_lane_id();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
      right_neighbor_forward_lane_id() const;

  // repeated .jmc_auto.hdmap.Id left_neighbor_reverse_lane_id = 14;
  int left_neighbor_reverse_lane_id_size() const;
  void clear_left_neighbor_reverse_lane_id();
  static const int kLeftNeighborReverseLaneIdFieldNumber = 14;
  const ::jmc_auto::hdmap::Id& left_neighbor_reverse_lane_id(int index) const;
  ::jmc_auto::hdmap::Id* mutable_left_neighbor_reverse_lane_id(int index);
  ::jmc_auto::hdmap::Id* add_left_neighbor_reverse_lane_id();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
      mutable_left_neighbor_reverse_lane_id();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
      left_neighbor_reverse_lane_id() const;

  // repeated .jmc_auto.hdmap.Id right_neighbor_reverse_lane_id = 15;
  int right_neighbor_reverse_lane_id_size() const;
  void clear_right_neighbor_reverse_lane_id();
  static const int kRightNeighborReverseLaneIdFieldNumber = 15;
  const ::jmc_auto::hdmap::Id& right_neighbor_reverse_lane_id(int index) const;
  ::jmc_auto::hdmap::Id* mutable_right_neighbor_reverse_lane_id(int index);
  ::jmc_auto::hdmap::Id* add_right_neighbor_reverse_lane_id();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
      mutable_right_neighbor_reverse_lane_id();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
      right_neighbor_reverse_lane_id() const;

  // repeated .jmc_auto.hdmap.LaneSampleAssociation left_sample = 17;
  int left_sample_size() const;
  void clear_left_sample();
  static const int kLeftSampleFieldNumber = 17;
  const ::jmc_auto::hdmap::LaneSampleAssociation& left_sample(int index) const;
  ::jmc_auto::hdmap::LaneSampleAssociation* mutable_left_sample(int index);
  ::jmc_auto::hdmap::LaneSampleAssociation* add_left_sample();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >*
      mutable_left_sample();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >&
      left_sample() const;

  // repeated .jmc_auto.hdmap.LaneSampleAssociation right_sample = 18;
  int right_sample_size() const;
  void clear_right_sample();
  static const int kRightSampleFieldNumber = 18;
  const ::jmc_auto::hdmap::LaneSampleAssociation& right_sample(int index) const;
  ::jmc_auto::hdmap::LaneSampleAssociation* mutable_right_sample(int index);
  ::jmc_auto::hdmap::LaneSampleAssociation* add_right_sample();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >*
      mutable_right_sample();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >&
      right_sample() const;

  // repeated .jmc_auto.hdmap.LaneSampleAssociation left_road_sample = 20;
  int left_road_sample_size() const;
  void clear_left_road_sample();
  static const int kLeftRoadSampleFieldNumber = 20;
  const ::jmc_auto::hdmap::LaneSampleAssociation& left_road_sample(int index) const;
  ::jmc_auto::hdmap::LaneSampleAssociation* mutable_left_road_sample(int index);
  ::jmc_auto::hdmap::LaneSampleAssociation* add_left_road_sample();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >*
      mutable_left_road_sample();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >&
      left_road_sample() const;

  // repeated .jmc_auto.hdmap.LaneSampleAssociation right_road_sample = 21;
  int right_road_sample_size() const;
  void clear_right_road_sample();
  static const int kRightRoadSampleFieldNumber = 21;
  const ::jmc_auto::hdmap::LaneSampleAssociation& right_road_sample(int index) const;
  ::jmc_auto::hdmap::LaneSampleAssociation* mutable_right_road_sample(int index);
  ::jmc_auto::hdmap::LaneSampleAssociation* add_right_road_sample();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >*
      mutable_right_road_sample();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >&
      right_road_sample() const;

  // repeated .jmc_auto.hdmap.Id stop_sign_id = 23;
  int stop_sign_id_size() const;
  void clear_stop_sign_id();
  static const int kStopSignIdFieldNumber = 23;
  const ::jmc_auto::hdmap::Id& stop_sign_id(int index) const;
  ::jmc_auto::hdmap::Id* mutable_stop_sign_id(int index);
  ::jmc_auto::hdmap::Id* add_stop_sign_id();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
      mutable_stop_sign_id();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
      stop_sign_id() const;

  // repeated .jmc_auto.hdmap.Id crosswalk_id = 24;
  int crosswalk_id_size() const;
  void clear_crosswalk_id();
  static const int kCrosswalkIdFieldNumber = 24;
  const ::jmc_auto::hdmap::Id& crosswalk_id(int index) const;
  ::jmc_auto::hdmap::Id* mutable_crosswalk_id(int index);
  ::jmc_auto::hdmap::Id* add_crosswalk_id();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
      mutable_crosswalk_id();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
      crosswalk_id() const;

  // repeated .jmc_auto.hdmap.Id yield_sign_id = 25;
  int yield_sign_id_size() const;
  void clear_yield_sign_id();
  static const int kYieldSignIdFieldNumber = 25;
  const ::jmc_auto::hdmap::Id& yield_sign_id(int index) const;
  ::jmc_auto::hdmap::Id* mutable_yield_sign_id(int index);
  ::jmc_auto::hdmap::Id* add_yield_sign_id();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
      mutable_yield_sign_id();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
      yield_sign_id() const;

  // repeated .jmc_auto.hdmap.Id clear_area_id = 26;
  int clear_area_id_size() const;
  void clear_clear_area_id();
  static const int kClearAreaIdFieldNumber = 26;
  const ::jmc_auto::hdmap::Id& clear_area_id(int index) const;
  ::jmc_auto::hdmap::Id* mutable_clear_area_id(int index);
  ::jmc_auto::hdmap::Id* add_clear_area_id();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
      mutable_clear_area_id();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
      clear_area_id() const;

  // repeated .jmc_auto.hdmap.Id self_reverse_lane_id = 31;
  int self_reverse_lane_id_size() const;
  void clear_self_reverse_lane_id();
  static const int kSelfReverseLaneIdFieldNumber = 31;
  const ::jmc_auto::hdmap::Id& self_reverse_lane_id(int index) const;
  ::jmc_auto::hdmap::Id* mutable_self_reverse_lane_id(int index);
  ::jmc_auto::hdmap::Id* add_self_reverse_lane_id();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
      mutable_self_reverse_lane_id();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
      self_reverse_lane_id() const;

  // repeated .jmc_auto.hdmap.Lane.LaneType multiple_type = 32;
  int multiple_type_size() const;
  void clear_multiple_type();
  static const int kMultipleTypeFieldNumber = 32;
  ::jmc_auto::hdmap::Lane_LaneType multiple_type(int index) const;
  void set_multiple_type(int index, ::jmc_auto::hdmap::Lane_LaneType value);
  void add_multiple_type(::jmc_auto::hdmap::Lane_LaneType value);
  const ::google::protobuf::RepeatedField<int>& multiple_type() const;
  ::google::protobuf::RepeatedField<int>* mutable_multiple_type();

  // optional .jmc_auto.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::jmc_auto::hdmap::Id& id() const;
  ::jmc_auto::hdmap::Id* mutable_id();
  ::jmc_auto::hdmap::Id* release_id();
  void set_allocated_id(::jmc_auto::hdmap::Id* id);

  // optional .jmc_auto.hdmap.Curve central_curve = 2;
  bool has_central_curve() const;
  void clear_central_curve();
  static const int kCentralCurveFieldNumber = 2;
  const ::jmc_auto::hdmap::Curve& central_curve() const;
  ::jmc_auto::hdmap::Curve* mutable_central_curve();
  ::jmc_auto::hdmap::Curve* release_central_curve();
  void set_allocated_central_curve(::jmc_auto::hdmap::Curve* central_curve);

  // optional .jmc_auto.hdmap.LaneBoundary left_boundary = 3;
  bool has_left_boundary() const;
  void clear_left_boundary();
  static const int kLeftBoundaryFieldNumber = 3;
  const ::jmc_auto::hdmap::LaneBoundary& left_boundary() const;
  ::jmc_auto::hdmap::LaneBoundary* mutable_left_boundary();
  ::jmc_auto::hdmap::LaneBoundary* release_left_boundary();
  void set_allocated_left_boundary(::jmc_auto::hdmap::LaneBoundary* left_boundary);

  // optional .jmc_auto.hdmap.LaneBoundary right_boundary = 4;
  bool has_right_boundary() const;
  void clear_right_boundary();
  static const int kRightBoundaryFieldNumber = 4;
  const ::jmc_auto::hdmap::LaneBoundary& right_boundary() const;
  ::jmc_auto::hdmap::LaneBoundary* mutable_right_boundary();
  ::jmc_auto::hdmap::LaneBoundary* release_right_boundary();
  void set_allocated_right_boundary(::jmc_auto::hdmap::LaneBoundary* right_boundary);

  // optional .jmc_auto.hdmap.Id junction_id = 16;
  bool has_junction_id() const;
  void clear_junction_id();
  static const int kJunctionIdFieldNumber = 16;
  const ::jmc_auto::hdmap::Id& junction_id() const;
  ::jmc_auto::hdmap::Id* mutable_junction_id();
  ::jmc_auto::hdmap::Id* release_junction_id();
  void set_allocated_junction_id(::jmc_auto::hdmap::Id* junction_id);

  // optional .jmc_auto.hdmap.Id road_id = 29;
  bool has_road_id() const;
  void clear_road_id();
  static const int kRoadIdFieldNumber = 29;
  const ::jmc_auto::hdmap::Id& road_id() const;
  ::jmc_auto::hdmap::Id* mutable_road_id();
  ::jmc_auto::hdmap::Id* release_road_id();
  void set_allocated_road_id(::jmc_auto::hdmap::Id* road_id);

  // optional double length = 5;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 5;
  double length() const;
  void set_length(double value);

  // optional double speed_limit = 6;
  bool has_speed_limit() const;
  void clear_speed_limit();
  static const int kSpeedLimitFieldNumber = 6;
  double speed_limit() const;
  void set_speed_limit(double value);

  // optional double width = 22;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 22;
  double width() const;
  void set_width(double value);

  // optional double central_curvature = 30;
  bool has_central_curvature() const;
  void clear_central_curvature();
  static const int kCentralCurvatureFieldNumber = 30;
  double central_curvature() const;
  void set_central_curvature(double value);

  // optional bool is_backup = 28;
  bool has_is_backup() const;
  void clear_is_backup();
  static const int kIsBackupFieldNumber = 28;
  bool is_backup() const;
  void set_is_backup(bool value);

  // optional bool default_reversible_lane = 33;
  bool has_default_reversible_lane() const;
  void clear_default_reversible_lane();
  static const int kDefaultReversibleLaneFieldNumber = 33;
  bool default_reversible_lane() const;
  void set_default_reversible_lane(bool value);

  // optional .jmc_auto.hdmap.Lane.LaneType type = 12;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 12;
  ::jmc_auto::hdmap::Lane_LaneType type() const;
  void set_type(::jmc_auto::hdmap::Lane_LaneType value);

  // optional .jmc_auto.hdmap.Lane.LaneTurn turn = 13;
  bool has_turn() const;
  void clear_turn();
  static const int kTurnFieldNumber = 13;
  ::jmc_auto::hdmap::Lane_LaneTurn turn() const;
  void set_turn(::jmc_auto::hdmap::Lane_LaneTurn value);

  // optional .jmc_auto.hdmap.Lane.LaneDirection direction = 19;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 19;
  ::jmc_auto::hdmap::Lane_LaneDirection direction() const;
  void set_direction(::jmc_auto::hdmap::Lane_LaneDirection value);

  // optional .jmc_auto.hdmap.Lane.LaneTurnTypePlan turn_type_plan = 27;
  bool has_turn_type_plan() const;
  void clear_turn_type_plan();
  static const int kTurnTypePlanFieldNumber = 27;
  ::jmc_auto::hdmap::Lane_LaneTurnTypePlan turn_type_plan() const;
  void set_turn_type_plan(::jmc_auto::hdmap::Lane_LaneTurnTypePlan value);

  // @@protoc_insertion_point(class_scope:jmc_auto.hdmap.Lane)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_central_curve();
  void clear_has_central_curve();
  void set_has_left_boundary();
  void clear_has_left_boundary();
  void set_has_right_boundary();
  void clear_has_right_boundary();
  void set_has_length();
  void clear_has_length();
  void set_has_speed_limit();
  void clear_has_speed_limit();
  void set_has_type();
  void clear_has_type();
  void set_has_turn();
  void clear_has_turn();
  void set_has_junction_id();
  void clear_has_junction_id();
  void set_has_direction();
  void clear_has_direction();
  void set_has_width();
  void clear_has_width();
  void set_has_turn_type_plan();
  void clear_has_turn_type_plan();
  void set_has_is_backup();
  void clear_has_is_backup();
  void set_has_road_id();
  void clear_has_road_id();
  void set_has_central_curvature();
  void clear_has_central_curvature();
  void set_has_default_reversible_lane();
  void clear_has_default_reversible_lane();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id > overlap_id_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id > predecessor_id_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id > successor_id_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id > left_neighbor_forward_lane_id_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id > right_neighbor_forward_lane_id_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id > left_neighbor_reverse_lane_id_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id > right_neighbor_reverse_lane_id_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation > left_sample_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation > right_sample_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation > left_road_sample_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation > right_road_sample_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id > stop_sign_id_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id > crosswalk_id_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id > yield_sign_id_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id > clear_area_id_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id > self_reverse_lane_id_;
  ::google::protobuf::RepeatedField<int> multiple_type_;
  ::jmc_auto::hdmap::Id* id_;
  ::jmc_auto::hdmap::Curve* central_curve_;
  ::jmc_auto::hdmap::LaneBoundary* left_boundary_;
  ::jmc_auto::hdmap::LaneBoundary* right_boundary_;
  ::jmc_auto::hdmap::Id* junction_id_;
  ::jmc_auto::hdmap::Id* road_id_;
  double length_;
  double speed_limit_;
  double width_;
  double central_curvature_;
  bool is_backup_;
  bool default_reversible_lane_;
  int type_;
  int turn_;
  int direction_;
  int turn_type_plan_;
  friend struct protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneBoundaryType

// optional double s = 1;
inline bool LaneBoundaryType::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneBoundaryType::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneBoundaryType::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneBoundaryType::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double LaneBoundaryType::s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneBoundaryType.s)
  return s_;
}
inline void LaneBoundaryType::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.LaneBoundaryType.s)
}

// repeated .jmc_auto.hdmap.LaneBoundaryType.Type types = 2;
inline int LaneBoundaryType::types_size() const {
  return types_.size();
}
inline void LaneBoundaryType::clear_types() {
  types_.Clear();
}
inline ::jmc_auto::hdmap::LaneBoundaryType_Type LaneBoundaryType::types(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneBoundaryType.types)
  return static_cast< ::jmc_auto::hdmap::LaneBoundaryType_Type >(types_.Get(index));
}
inline void LaneBoundaryType::set_types(int index, ::jmc_auto::hdmap::LaneBoundaryType_Type value) {
  assert(::jmc_auto::hdmap::LaneBoundaryType_Type_IsValid(value));
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.LaneBoundaryType.types)
}
inline void LaneBoundaryType::add_types(::jmc_auto::hdmap::LaneBoundaryType_Type value) {
  assert(::jmc_auto::hdmap::LaneBoundaryType_Type_IsValid(value));
  types_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.LaneBoundaryType.types)
}
inline const ::google::protobuf::RepeatedField<int>&
LaneBoundaryType::types() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.LaneBoundaryType.types)
  return types_;
}
inline ::google::protobuf::RepeatedField<int>*
LaneBoundaryType::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.LaneBoundaryType.types)
  return &types_;
}

// -------------------------------------------------------------------

// LaneBoundary

// optional .jmc_auto.hdmap.Curve curve = 1;
inline bool LaneBoundary::has_curve() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneBoundary::set_has_curve() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneBoundary::clear_has_curve() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneBoundary::clear_curve() {
  if (curve_ != NULL) curve_->::jmc_auto::hdmap::Curve::Clear();
  clear_has_curve();
}
inline const ::jmc_auto::hdmap::Curve& LaneBoundary::curve() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneBoundary.curve)
  return curve_ != NULL ? *curve_
                         : *::jmc_auto::hdmap::Curve::internal_default_instance();
}
inline ::jmc_auto::hdmap::Curve* LaneBoundary::mutable_curve() {
  set_has_curve();
  if (curve_ == NULL) {
    curve_ = new ::jmc_auto::hdmap::Curve;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.LaneBoundary.curve)
  return curve_;
}
inline ::jmc_auto::hdmap::Curve* LaneBoundary::release_curve() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.LaneBoundary.curve)
  clear_has_curve();
  ::jmc_auto::hdmap::Curve* temp = curve_;
  curve_ = NULL;
  return temp;
}
inline void LaneBoundary::set_allocated_curve(::jmc_auto::hdmap::Curve* curve) {
  delete curve_;
  curve_ = curve;
  if (curve) {
    set_has_curve();
  } else {
    clear_has_curve();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.LaneBoundary.curve)
}

// optional double length = 2;
inline bool LaneBoundary::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneBoundary::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneBoundary::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneBoundary::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double LaneBoundary::length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneBoundary.length)
  return length_;
}
inline void LaneBoundary::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.LaneBoundary.length)
}

// optional bool virtual = 3;
inline bool LaneBoundary::has_virtual_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LaneBoundary::set_has_virtual_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LaneBoundary::clear_has_virtual_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LaneBoundary::clear_virtual_() {
  virtual__ = false;
  clear_has_virtual_();
}
inline bool LaneBoundary::virtual_() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneBoundary.virtual)
  return virtual__;
}
inline void LaneBoundary::set_virtual_(bool value) {
  set_has_virtual_();
  virtual__ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.LaneBoundary.virtual)
}

// repeated .jmc_auto.hdmap.LaneBoundaryType boundary_type = 4;
inline int LaneBoundary::boundary_type_size() const {
  return boundary_type_.size();
}
inline void LaneBoundary::clear_boundary_type() {
  boundary_type_.Clear();
}
inline const ::jmc_auto::hdmap::LaneBoundaryType& LaneBoundary::boundary_type(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneBoundary.boundary_type)
  return boundary_type_.Get(index);
}
inline ::jmc_auto::hdmap::LaneBoundaryType* LaneBoundary::mutable_boundary_type(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.LaneBoundary.boundary_type)
  return boundary_type_.Mutable(index);
}
inline ::jmc_auto::hdmap::LaneBoundaryType* LaneBoundary::add_boundary_type() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.LaneBoundary.boundary_type)
  return boundary_type_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneBoundaryType >*
LaneBoundary::mutable_boundary_type() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.LaneBoundary.boundary_type)
  return &boundary_type_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneBoundaryType >&
LaneBoundary::boundary_type() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.LaneBoundary.boundary_type)
  return boundary_type_;
}

// optional .jmc_auto.hdmap.LaneBoundary.Type type = 5;
inline bool LaneBoundary::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaneBoundary::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LaneBoundary::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LaneBoundary::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::jmc_auto::hdmap::LaneBoundary_Type LaneBoundary::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneBoundary.type)
  return static_cast< ::jmc_auto::hdmap::LaneBoundary_Type >(type_);
}
inline void LaneBoundary::set_type(::jmc_auto::hdmap::LaneBoundary_Type value) {
  assert(::jmc_auto::hdmap::LaneBoundary_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.LaneBoundary.type)
}

// -------------------------------------------------------------------

// LaneSampleAssociation

// optional double s = 1;
inline bool LaneSampleAssociation::has_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaneSampleAssociation::set_has_s() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LaneSampleAssociation::clear_has_s() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LaneSampleAssociation::clear_s() {
  s_ = 0;
  clear_has_s();
}
inline double LaneSampleAssociation::s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneSampleAssociation.s)
  return s_;
}
inline void LaneSampleAssociation::set_s(double value) {
  set_has_s();
  s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.LaneSampleAssociation.s)
}

// optional double width = 2;
inline bool LaneSampleAssociation::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LaneSampleAssociation::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LaneSampleAssociation::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LaneSampleAssociation::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double LaneSampleAssociation::width() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.LaneSampleAssociation.width)
  return width_;
}
inline void LaneSampleAssociation::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.LaneSampleAssociation.width)
}

// -------------------------------------------------------------------

// Lane

// optional .jmc_auto.hdmap.Id id = 1;
inline bool Lane::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lane::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lane::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lane::clear_id() {
  if (id_ != NULL) id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_id();
}
inline const ::jmc_auto::hdmap::Id& Lane::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.id)
  return id_ != NULL ? *id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
inline ::jmc_auto::hdmap::Id* Lane::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.id)
  return id_;
}
inline ::jmc_auto::hdmap::Id* Lane::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Lane.id)
  clear_has_id();
  ::jmc_auto::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Lane::set_allocated_id(::jmc_auto::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Lane.id)
}

// optional .jmc_auto.hdmap.Curve central_curve = 2;
inline bool Lane::has_central_curve() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lane::set_has_central_curve() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lane::clear_has_central_curve() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lane::clear_central_curve() {
  if (central_curve_ != NULL) central_curve_->::jmc_auto::hdmap::Curve::Clear();
  clear_has_central_curve();
}
inline const ::jmc_auto::hdmap::Curve& Lane::central_curve() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.central_curve)
  return central_curve_ != NULL ? *central_curve_
                         : *::jmc_auto::hdmap::Curve::internal_default_instance();
}
inline ::jmc_auto::hdmap::Curve* Lane::mutable_central_curve() {
  set_has_central_curve();
  if (central_curve_ == NULL) {
    central_curve_ = new ::jmc_auto::hdmap::Curve;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.central_curve)
  return central_curve_;
}
inline ::jmc_auto::hdmap::Curve* Lane::release_central_curve() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Lane.central_curve)
  clear_has_central_curve();
  ::jmc_auto::hdmap::Curve* temp = central_curve_;
  central_curve_ = NULL;
  return temp;
}
inline void Lane::set_allocated_central_curve(::jmc_auto::hdmap::Curve* central_curve) {
  delete central_curve_;
  central_curve_ = central_curve;
  if (central_curve) {
    set_has_central_curve();
  } else {
    clear_has_central_curve();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Lane.central_curve)
}

// optional .jmc_auto.hdmap.LaneBoundary left_boundary = 3;
inline bool Lane::has_left_boundary() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Lane::set_has_left_boundary() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Lane::clear_has_left_boundary() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Lane::clear_left_boundary() {
  if (left_boundary_ != NULL) left_boundary_->::jmc_auto::hdmap::LaneBoundary::Clear();
  clear_has_left_boundary();
}
inline const ::jmc_auto::hdmap::LaneBoundary& Lane::left_boundary() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.left_boundary)
  return left_boundary_ != NULL ? *left_boundary_
                         : *::jmc_auto::hdmap::LaneBoundary::internal_default_instance();
}
inline ::jmc_auto::hdmap::LaneBoundary* Lane::mutable_left_boundary() {
  set_has_left_boundary();
  if (left_boundary_ == NULL) {
    left_boundary_ = new ::jmc_auto::hdmap::LaneBoundary;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.left_boundary)
  return left_boundary_;
}
inline ::jmc_auto::hdmap::LaneBoundary* Lane::release_left_boundary() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Lane.left_boundary)
  clear_has_left_boundary();
  ::jmc_auto::hdmap::LaneBoundary* temp = left_boundary_;
  left_boundary_ = NULL;
  return temp;
}
inline void Lane::set_allocated_left_boundary(::jmc_auto::hdmap::LaneBoundary* left_boundary) {
  delete left_boundary_;
  left_boundary_ = left_boundary;
  if (left_boundary) {
    set_has_left_boundary();
  } else {
    clear_has_left_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Lane.left_boundary)
}

// optional .jmc_auto.hdmap.LaneBoundary right_boundary = 4;
inline bool Lane::has_right_boundary() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Lane::set_has_right_boundary() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Lane::clear_has_right_boundary() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Lane::clear_right_boundary() {
  if (right_boundary_ != NULL) right_boundary_->::jmc_auto::hdmap::LaneBoundary::Clear();
  clear_has_right_boundary();
}
inline const ::jmc_auto::hdmap::LaneBoundary& Lane::right_boundary() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.right_boundary)
  return right_boundary_ != NULL ? *right_boundary_
                         : *::jmc_auto::hdmap::LaneBoundary::internal_default_instance();
}
inline ::jmc_auto::hdmap::LaneBoundary* Lane::mutable_right_boundary() {
  set_has_right_boundary();
  if (right_boundary_ == NULL) {
    right_boundary_ = new ::jmc_auto::hdmap::LaneBoundary;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.right_boundary)
  return right_boundary_;
}
inline ::jmc_auto::hdmap::LaneBoundary* Lane::release_right_boundary() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Lane.right_boundary)
  clear_has_right_boundary();
  ::jmc_auto::hdmap::LaneBoundary* temp = right_boundary_;
  right_boundary_ = NULL;
  return temp;
}
inline void Lane::set_allocated_right_boundary(::jmc_auto::hdmap::LaneBoundary* right_boundary) {
  delete right_boundary_;
  right_boundary_ = right_boundary;
  if (right_boundary) {
    set_has_right_boundary();
  } else {
    clear_has_right_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Lane.right_boundary)
}

// optional double length = 5;
inline bool Lane::has_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Lane::set_has_length() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Lane::clear_has_length() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Lane::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline double Lane::length() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.length)
  return length_;
}
inline void Lane::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.length)
}

// optional double speed_limit = 6;
inline bool Lane::has_speed_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Lane::set_has_speed_limit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Lane::clear_has_speed_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Lane::clear_speed_limit() {
  speed_limit_ = 0;
  clear_has_speed_limit();
}
inline double Lane::speed_limit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.speed_limit)
  return speed_limit_;
}
inline void Lane::set_speed_limit(double value) {
  set_has_speed_limit();
  speed_limit_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.speed_limit)
}

// repeated .jmc_auto.hdmap.Id overlap_id = 7;
inline int Lane::overlap_id_size() const {
  return overlap_id_.size();
}
inline void Lane::clear_overlap_id() {
  overlap_id_.Clear();
}
inline const ::jmc_auto::hdmap::Id& Lane::overlap_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.overlap_id)
  return overlap_id_.Get(index);
}
inline ::jmc_auto::hdmap::Id* Lane::mutable_overlap_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.overlap_id)
  return overlap_id_.Mutable(index);
}
inline ::jmc_auto::hdmap::Id* Lane::add_overlap_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.overlap_id)
  return overlap_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_overlap_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.overlap_id)
  return &overlap_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::overlap_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.overlap_id)
  return overlap_id_;
}

// repeated .jmc_auto.hdmap.Id predecessor_id = 8;
inline int Lane::predecessor_id_size() const {
  return predecessor_id_.size();
}
inline void Lane::clear_predecessor_id() {
  predecessor_id_.Clear();
}
inline const ::jmc_auto::hdmap::Id& Lane::predecessor_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.predecessor_id)
  return predecessor_id_.Get(index);
}
inline ::jmc_auto::hdmap::Id* Lane::mutable_predecessor_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.predecessor_id)
  return predecessor_id_.Mutable(index);
}
inline ::jmc_auto::hdmap::Id* Lane::add_predecessor_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.predecessor_id)
  return predecessor_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_predecessor_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.predecessor_id)
  return &predecessor_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::predecessor_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.predecessor_id)
  return predecessor_id_;
}

// repeated .jmc_auto.hdmap.Id successor_id = 9;
inline int Lane::successor_id_size() const {
  return successor_id_.size();
}
inline void Lane::clear_successor_id() {
  successor_id_.Clear();
}
inline const ::jmc_auto::hdmap::Id& Lane::successor_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.successor_id)
  return successor_id_.Get(index);
}
inline ::jmc_auto::hdmap::Id* Lane::mutable_successor_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.successor_id)
  return successor_id_.Mutable(index);
}
inline ::jmc_auto::hdmap::Id* Lane::add_successor_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.successor_id)
  return successor_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_successor_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.successor_id)
  return &successor_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::successor_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.successor_id)
  return successor_id_;
}

// repeated .jmc_auto.hdmap.Id left_neighbor_forward_lane_id = 10;
inline int Lane::left_neighbor_forward_lane_id_size() const {
  return left_neighbor_forward_lane_id_.size();
}
inline void Lane::clear_left_neighbor_forward_lane_id() {
  left_neighbor_forward_lane_id_.Clear();
}
inline const ::jmc_auto::hdmap::Id& Lane::left_neighbor_forward_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.left_neighbor_forward_lane_id)
  return left_neighbor_forward_lane_id_.Get(index);
}
inline ::jmc_auto::hdmap::Id* Lane::mutable_left_neighbor_forward_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.left_neighbor_forward_lane_id)
  return left_neighbor_forward_lane_id_.Mutable(index);
}
inline ::jmc_auto::hdmap::Id* Lane::add_left_neighbor_forward_lane_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.left_neighbor_forward_lane_id)
  return left_neighbor_forward_lane_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_left_neighbor_forward_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.left_neighbor_forward_lane_id)
  return &left_neighbor_forward_lane_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::left_neighbor_forward_lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.left_neighbor_forward_lane_id)
  return left_neighbor_forward_lane_id_;
}

// repeated .jmc_auto.hdmap.Id right_neighbor_forward_lane_id = 11;
inline int Lane::right_neighbor_forward_lane_id_size() const {
  return right_neighbor_forward_lane_id_.size();
}
inline void Lane::clear_right_neighbor_forward_lane_id() {
  right_neighbor_forward_lane_id_.Clear();
}
inline const ::jmc_auto::hdmap::Id& Lane::right_neighbor_forward_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.right_neighbor_forward_lane_id)
  return right_neighbor_forward_lane_id_.Get(index);
}
inline ::jmc_auto::hdmap::Id* Lane::mutable_right_neighbor_forward_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.right_neighbor_forward_lane_id)
  return right_neighbor_forward_lane_id_.Mutable(index);
}
inline ::jmc_auto::hdmap::Id* Lane::add_right_neighbor_forward_lane_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.right_neighbor_forward_lane_id)
  return right_neighbor_forward_lane_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_right_neighbor_forward_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.right_neighbor_forward_lane_id)
  return &right_neighbor_forward_lane_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::right_neighbor_forward_lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.right_neighbor_forward_lane_id)
  return right_neighbor_forward_lane_id_;
}

// optional .jmc_auto.hdmap.Lane.LaneType type = 12;
inline bool Lane::has_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Lane::set_has_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Lane::clear_has_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Lane::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::jmc_auto::hdmap::Lane_LaneType Lane::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.type)
  return static_cast< ::jmc_auto::hdmap::Lane_LaneType >(type_);
}
inline void Lane::set_type(::jmc_auto::hdmap::Lane_LaneType value) {
  assert(::jmc_auto::hdmap::Lane_LaneType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.type)
}

// optional .jmc_auto.hdmap.Lane.LaneTurn turn = 13;
inline bool Lane::has_turn() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Lane::set_has_turn() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Lane::clear_has_turn() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Lane::clear_turn() {
  turn_ = 1;
  clear_has_turn();
}
inline ::jmc_auto::hdmap::Lane_LaneTurn Lane::turn() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.turn)
  return static_cast< ::jmc_auto::hdmap::Lane_LaneTurn >(turn_);
}
inline void Lane::set_turn(::jmc_auto::hdmap::Lane_LaneTurn value) {
  assert(::jmc_auto::hdmap::Lane_LaneTurn_IsValid(value));
  set_has_turn();
  turn_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.turn)
}

// repeated .jmc_auto.hdmap.Id left_neighbor_reverse_lane_id = 14;
inline int Lane::left_neighbor_reverse_lane_id_size() const {
  return left_neighbor_reverse_lane_id_.size();
}
inline void Lane::clear_left_neighbor_reverse_lane_id() {
  left_neighbor_reverse_lane_id_.Clear();
}
inline const ::jmc_auto::hdmap::Id& Lane::left_neighbor_reverse_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.left_neighbor_reverse_lane_id)
  return left_neighbor_reverse_lane_id_.Get(index);
}
inline ::jmc_auto::hdmap::Id* Lane::mutable_left_neighbor_reverse_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.left_neighbor_reverse_lane_id)
  return left_neighbor_reverse_lane_id_.Mutable(index);
}
inline ::jmc_auto::hdmap::Id* Lane::add_left_neighbor_reverse_lane_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.left_neighbor_reverse_lane_id)
  return left_neighbor_reverse_lane_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_left_neighbor_reverse_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.left_neighbor_reverse_lane_id)
  return &left_neighbor_reverse_lane_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::left_neighbor_reverse_lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.left_neighbor_reverse_lane_id)
  return left_neighbor_reverse_lane_id_;
}

// repeated .jmc_auto.hdmap.Id right_neighbor_reverse_lane_id = 15;
inline int Lane::right_neighbor_reverse_lane_id_size() const {
  return right_neighbor_reverse_lane_id_.size();
}
inline void Lane::clear_right_neighbor_reverse_lane_id() {
  right_neighbor_reverse_lane_id_.Clear();
}
inline const ::jmc_auto::hdmap::Id& Lane::right_neighbor_reverse_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.right_neighbor_reverse_lane_id)
  return right_neighbor_reverse_lane_id_.Get(index);
}
inline ::jmc_auto::hdmap::Id* Lane::mutable_right_neighbor_reverse_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.right_neighbor_reverse_lane_id)
  return right_neighbor_reverse_lane_id_.Mutable(index);
}
inline ::jmc_auto::hdmap::Id* Lane::add_right_neighbor_reverse_lane_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.right_neighbor_reverse_lane_id)
  return right_neighbor_reverse_lane_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_right_neighbor_reverse_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.right_neighbor_reverse_lane_id)
  return &right_neighbor_reverse_lane_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::right_neighbor_reverse_lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.right_neighbor_reverse_lane_id)
  return right_neighbor_reverse_lane_id_;
}

// optional .jmc_auto.hdmap.Id junction_id = 16;
inline bool Lane::has_junction_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Lane::set_has_junction_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Lane::clear_has_junction_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Lane::clear_junction_id() {
  if (junction_id_ != NULL) junction_id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_junction_id();
}
inline const ::jmc_auto::hdmap::Id& Lane::junction_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.junction_id)
  return junction_id_ != NULL ? *junction_id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
inline ::jmc_auto::hdmap::Id* Lane::mutable_junction_id() {
  set_has_junction_id();
  if (junction_id_ == NULL) {
    junction_id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.junction_id)
  return junction_id_;
}
inline ::jmc_auto::hdmap::Id* Lane::release_junction_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Lane.junction_id)
  clear_has_junction_id();
  ::jmc_auto::hdmap::Id* temp = junction_id_;
  junction_id_ = NULL;
  return temp;
}
inline void Lane::set_allocated_junction_id(::jmc_auto::hdmap::Id* junction_id) {
  delete junction_id_;
  junction_id_ = junction_id;
  if (junction_id) {
    set_has_junction_id();
  } else {
    clear_has_junction_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Lane.junction_id)
}

// repeated .jmc_auto.hdmap.LaneSampleAssociation left_sample = 17;
inline int Lane::left_sample_size() const {
  return left_sample_.size();
}
inline void Lane::clear_left_sample() {
  left_sample_.Clear();
}
inline const ::jmc_auto::hdmap::LaneSampleAssociation& Lane::left_sample(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.left_sample)
  return left_sample_.Get(index);
}
inline ::jmc_auto::hdmap::LaneSampleAssociation* Lane::mutable_left_sample(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.left_sample)
  return left_sample_.Mutable(index);
}
inline ::jmc_auto::hdmap::LaneSampleAssociation* Lane::add_left_sample() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.left_sample)
  return left_sample_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >*
Lane::mutable_left_sample() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.left_sample)
  return &left_sample_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >&
Lane::left_sample() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.left_sample)
  return left_sample_;
}

// repeated .jmc_auto.hdmap.LaneSampleAssociation right_sample = 18;
inline int Lane::right_sample_size() const {
  return right_sample_.size();
}
inline void Lane::clear_right_sample() {
  right_sample_.Clear();
}
inline const ::jmc_auto::hdmap::LaneSampleAssociation& Lane::right_sample(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.right_sample)
  return right_sample_.Get(index);
}
inline ::jmc_auto::hdmap::LaneSampleAssociation* Lane::mutable_right_sample(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.right_sample)
  return right_sample_.Mutable(index);
}
inline ::jmc_auto::hdmap::LaneSampleAssociation* Lane::add_right_sample() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.right_sample)
  return right_sample_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >*
Lane::mutable_right_sample() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.right_sample)
  return &right_sample_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >&
Lane::right_sample() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.right_sample)
  return right_sample_;
}

// optional .jmc_auto.hdmap.Lane.LaneDirection direction = 19;
inline bool Lane::has_direction() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Lane::set_has_direction() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Lane::clear_has_direction() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Lane::clear_direction() {
  direction_ = 1;
  clear_has_direction();
}
inline ::jmc_auto::hdmap::Lane_LaneDirection Lane::direction() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.direction)
  return static_cast< ::jmc_auto::hdmap::Lane_LaneDirection >(direction_);
}
inline void Lane::set_direction(::jmc_auto::hdmap::Lane_LaneDirection value) {
  assert(::jmc_auto::hdmap::Lane_LaneDirection_IsValid(value));
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.direction)
}

// repeated .jmc_auto.hdmap.LaneSampleAssociation left_road_sample = 20;
inline int Lane::left_road_sample_size() const {
  return left_road_sample_.size();
}
inline void Lane::clear_left_road_sample() {
  left_road_sample_.Clear();
}
inline const ::jmc_auto::hdmap::LaneSampleAssociation& Lane::left_road_sample(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.left_road_sample)
  return left_road_sample_.Get(index);
}
inline ::jmc_auto::hdmap::LaneSampleAssociation* Lane::mutable_left_road_sample(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.left_road_sample)
  return left_road_sample_.Mutable(index);
}
inline ::jmc_auto::hdmap::LaneSampleAssociation* Lane::add_left_road_sample() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.left_road_sample)
  return left_road_sample_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >*
Lane::mutable_left_road_sample() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.left_road_sample)
  return &left_road_sample_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >&
Lane::left_road_sample() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.left_road_sample)
  return left_road_sample_;
}

// repeated .jmc_auto.hdmap.LaneSampleAssociation right_road_sample = 21;
inline int Lane::right_road_sample_size() const {
  return right_road_sample_.size();
}
inline void Lane::clear_right_road_sample() {
  right_road_sample_.Clear();
}
inline const ::jmc_auto::hdmap::LaneSampleAssociation& Lane::right_road_sample(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.right_road_sample)
  return right_road_sample_.Get(index);
}
inline ::jmc_auto::hdmap::LaneSampleAssociation* Lane::mutable_right_road_sample(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.right_road_sample)
  return right_road_sample_.Mutable(index);
}
inline ::jmc_auto::hdmap::LaneSampleAssociation* Lane::add_right_road_sample() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.right_road_sample)
  return right_road_sample_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >*
Lane::mutable_right_road_sample() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.right_road_sample)
  return &right_road_sample_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::LaneSampleAssociation >&
Lane::right_road_sample() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.right_road_sample)
  return right_road_sample_;
}

// optional double width = 22;
inline bool Lane::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Lane::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Lane::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Lane::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline double Lane::width() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.width)
  return width_;
}
inline void Lane::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.width)
}

// repeated .jmc_auto.hdmap.Id stop_sign_id = 23;
inline int Lane::stop_sign_id_size() const {
  return stop_sign_id_.size();
}
inline void Lane::clear_stop_sign_id() {
  stop_sign_id_.Clear();
}
inline const ::jmc_auto::hdmap::Id& Lane::stop_sign_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.stop_sign_id)
  return stop_sign_id_.Get(index);
}
inline ::jmc_auto::hdmap::Id* Lane::mutable_stop_sign_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.stop_sign_id)
  return stop_sign_id_.Mutable(index);
}
inline ::jmc_auto::hdmap::Id* Lane::add_stop_sign_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.stop_sign_id)
  return stop_sign_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_stop_sign_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.stop_sign_id)
  return &stop_sign_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::stop_sign_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.stop_sign_id)
  return stop_sign_id_;
}

// repeated .jmc_auto.hdmap.Id crosswalk_id = 24;
inline int Lane::crosswalk_id_size() const {
  return crosswalk_id_.size();
}
inline void Lane::clear_crosswalk_id() {
  crosswalk_id_.Clear();
}
inline const ::jmc_auto::hdmap::Id& Lane::crosswalk_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.crosswalk_id)
  return crosswalk_id_.Get(index);
}
inline ::jmc_auto::hdmap::Id* Lane::mutable_crosswalk_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.crosswalk_id)
  return crosswalk_id_.Mutable(index);
}
inline ::jmc_auto::hdmap::Id* Lane::add_crosswalk_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.crosswalk_id)
  return crosswalk_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_crosswalk_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.crosswalk_id)
  return &crosswalk_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::crosswalk_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.crosswalk_id)
  return crosswalk_id_;
}

// repeated .jmc_auto.hdmap.Id yield_sign_id = 25;
inline int Lane::yield_sign_id_size() const {
  return yield_sign_id_.size();
}
inline void Lane::clear_yield_sign_id() {
  yield_sign_id_.Clear();
}
inline const ::jmc_auto::hdmap::Id& Lane::yield_sign_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.yield_sign_id)
  return yield_sign_id_.Get(index);
}
inline ::jmc_auto::hdmap::Id* Lane::mutable_yield_sign_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.yield_sign_id)
  return yield_sign_id_.Mutable(index);
}
inline ::jmc_auto::hdmap::Id* Lane::add_yield_sign_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.yield_sign_id)
  return yield_sign_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_yield_sign_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.yield_sign_id)
  return &yield_sign_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::yield_sign_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.yield_sign_id)
  return yield_sign_id_;
}

// repeated .jmc_auto.hdmap.Id clear_area_id = 26;
inline int Lane::clear_area_id_size() const {
  return clear_area_id_.size();
}
inline void Lane::clear_clear_area_id() {
  clear_area_id_.Clear();
}
inline const ::jmc_auto::hdmap::Id& Lane::clear_area_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.clear_area_id)
  return clear_area_id_.Get(index);
}
inline ::jmc_auto::hdmap::Id* Lane::mutable_clear_area_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.clear_area_id)
  return clear_area_id_.Mutable(index);
}
inline ::jmc_auto::hdmap::Id* Lane::add_clear_area_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.clear_area_id)
  return clear_area_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_clear_area_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.clear_area_id)
  return &clear_area_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::clear_area_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.clear_area_id)
  return clear_area_id_;
}

// optional .jmc_auto.hdmap.Lane.LaneTurnTypePlan turn_type_plan = 27;
inline bool Lane::has_turn_type_plan() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Lane::set_has_turn_type_plan() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Lane::clear_has_turn_type_plan() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Lane::clear_turn_type_plan() {
  turn_type_plan_ = 1;
  clear_has_turn_type_plan();
}
inline ::jmc_auto::hdmap::Lane_LaneTurnTypePlan Lane::turn_type_plan() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.turn_type_plan)
  return static_cast< ::jmc_auto::hdmap::Lane_LaneTurnTypePlan >(turn_type_plan_);
}
inline void Lane::set_turn_type_plan(::jmc_auto::hdmap::Lane_LaneTurnTypePlan value) {
  assert(::jmc_auto::hdmap::Lane_LaneTurnTypePlan_IsValid(value));
  set_has_turn_type_plan();
  turn_type_plan_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.turn_type_plan)
}

// optional bool is_backup = 28;
inline bool Lane::has_is_backup() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Lane::set_has_is_backup() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Lane::clear_has_is_backup() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Lane::clear_is_backup() {
  is_backup_ = false;
  clear_has_is_backup();
}
inline bool Lane::is_backup() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.is_backup)
  return is_backup_;
}
inline void Lane::set_is_backup(bool value) {
  set_has_is_backup();
  is_backup_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.is_backup)
}

// optional .jmc_auto.hdmap.Id road_id = 29;
inline bool Lane::has_road_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Lane::set_has_road_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Lane::clear_has_road_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Lane::clear_road_id() {
  if (road_id_ != NULL) road_id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_road_id();
}
inline const ::jmc_auto::hdmap::Id& Lane::road_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.road_id)
  return road_id_ != NULL ? *road_id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
inline ::jmc_auto::hdmap::Id* Lane::mutable_road_id() {
  set_has_road_id();
  if (road_id_ == NULL) {
    road_id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.road_id)
  return road_id_;
}
inline ::jmc_auto::hdmap::Id* Lane::release_road_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Lane.road_id)
  clear_has_road_id();
  ::jmc_auto::hdmap::Id* temp = road_id_;
  road_id_ = NULL;
  return temp;
}
inline void Lane::set_allocated_road_id(::jmc_auto::hdmap::Id* road_id) {
  delete road_id_;
  road_id_ = road_id;
  if (road_id) {
    set_has_road_id();
  } else {
    clear_has_road_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Lane.road_id)
}

// optional double central_curvature = 30;
inline bool Lane::has_central_curvature() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Lane::set_has_central_curvature() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Lane::clear_has_central_curvature() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Lane::clear_central_curvature() {
  central_curvature_ = 0;
  clear_has_central_curvature();
}
inline double Lane::central_curvature() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.central_curvature)
  return central_curvature_;
}
inline void Lane::set_central_curvature(double value) {
  set_has_central_curvature();
  central_curvature_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.central_curvature)
}

// repeated .jmc_auto.hdmap.Id self_reverse_lane_id = 31;
inline int Lane::self_reverse_lane_id_size() const {
  return self_reverse_lane_id_.size();
}
inline void Lane::clear_self_reverse_lane_id() {
  self_reverse_lane_id_.Clear();
}
inline const ::jmc_auto::hdmap::Id& Lane::self_reverse_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.self_reverse_lane_id)
  return self_reverse_lane_id_.Get(index);
}
inline ::jmc_auto::hdmap::Id* Lane::mutable_self_reverse_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Lane.self_reverse_lane_id)
  return self_reverse_lane_id_.Mutable(index);
}
inline ::jmc_auto::hdmap::Id* Lane::add_self_reverse_lane_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.self_reverse_lane_id)
  return self_reverse_lane_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Lane::mutable_self_reverse_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.self_reverse_lane_id)
  return &self_reverse_lane_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Lane::self_reverse_lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.self_reverse_lane_id)
  return self_reverse_lane_id_;
}

// repeated .jmc_auto.hdmap.Lane.LaneType multiple_type = 32;
inline int Lane::multiple_type_size() const {
  return multiple_type_.size();
}
inline void Lane::clear_multiple_type() {
  multiple_type_.Clear();
}
inline ::jmc_auto::hdmap::Lane_LaneType Lane::multiple_type(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.multiple_type)
  return static_cast< ::jmc_auto::hdmap::Lane_LaneType >(multiple_type_.Get(index));
}
inline void Lane::set_multiple_type(int index, ::jmc_auto::hdmap::Lane_LaneType value) {
  assert(::jmc_auto::hdmap::Lane_LaneType_IsValid(value));
  multiple_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.multiple_type)
}
inline void Lane::add_multiple_type(::jmc_auto::hdmap::Lane_LaneType value) {
  assert(::jmc_auto::hdmap::Lane_LaneType_IsValid(value));
  multiple_type_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Lane.multiple_type)
}
inline const ::google::protobuf::RepeatedField<int>&
Lane::multiple_type() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Lane.multiple_type)
  return multiple_type_;
}
inline ::google::protobuf::RepeatedField<int>*
Lane::mutable_multiple_type() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Lane.multiple_type)
  return &multiple_type_;
}

// optional bool default_reversible_lane = 33;
inline bool Lane::has_default_reversible_lane() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Lane::set_has_default_reversible_lane() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Lane::clear_has_default_reversible_lane() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Lane::clear_default_reversible_lane() {
  default_reversible_lane_ = false;
  clear_has_default_reversible_lane();
}
inline bool Lane::default_reversible_lane() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Lane.default_reversible_lane)
  return default_reversible_lane_;
}
inline void Lane::set_default_reversible_lane(bool value) {
  set_has_default_reversible_lane();
  default_reversible_lane_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Lane.default_reversible_lane)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace hdmap
}  // namespace jmc_auto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::jmc_auto::hdmap::LaneBoundaryType_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::hdmap::LaneBoundaryType_Type>() {
  return ::jmc_auto::hdmap::LaneBoundaryType_Type_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::hdmap::LaneBoundary_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::hdmap::LaneBoundary_Type>() {
  return ::jmc_auto::hdmap::LaneBoundary_Type_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::hdmap::Lane_LaneType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::hdmap::Lane_LaneType>() {
  return ::jmc_auto::hdmap::Lane_LaneType_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::hdmap::Lane_LaneTurn> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::hdmap::Lane_LaneTurn>() {
  return ::jmc_auto::hdmap::Lane_LaneTurn_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::hdmap::Lane_LaneDirection> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::hdmap::Lane_LaneDirection>() {
  return ::jmc_auto::hdmap::Lane_LaneDirection_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::hdmap::Lane_LaneTurnTypePlan> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::hdmap::Lane_LaneTurnTypePlan>() {
  return ::jmc_auto::hdmap::Lane_LaneTurnTypePlan_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fmap_2fproto_2fmap_5flane_2eproto__INCLUDED
