// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_road.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/map/proto/map_road.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace hdmap {
class BoundaryEdgeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BoundaryEdge> {
} _BoundaryEdge_default_instance_;
class BoundaryPolygonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BoundaryPolygon> {
} _BoundaryPolygon_default_instance_;
class RoadBoundaryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoadBoundary> {
} _RoadBoundary_default_instance_;
class RoadROIBoundaryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoadROIBoundary> {
} _RoadROIBoundary_default_instance_;
class RoadSectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoadSection> {
} _RoadSection_default_instance_;
class RoadDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Road> {
} _Road_default_instance_;

namespace protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryEdge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryEdge, curve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryEdge, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryPolygon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryPolygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundaryPolygon, edge_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadBoundary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadBoundary, outer_polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadBoundary, hole_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadROIBoundary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadROIBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadROIBoundary, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadROIBoundary, road_boundaries_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSection, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSection, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoadSection, boundary_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, section_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, junction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Road, type_),
  0,
  ~0u,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(BoundaryEdge)},
  { 9, 15, sizeof(BoundaryPolygon)},
  { 16, 23, sizeof(RoadBoundary)},
  { 25, 32, sizeof(RoadROIBoundary)},
  { 34, 42, sizeof(RoadSection)},
  { 45, 54, sizeof(Road)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BoundaryEdge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BoundaryPolygon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoadBoundary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoadROIBoundary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RoadSection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Road_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/map/proto/map_road.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _BoundaryEdge_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _BoundaryPolygon_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RoadBoundary_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _RoadROIBoundary_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _RoadSection_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Road_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::InitDefaults();
  _BoundaryEdge_default_instance_.DefaultConstruct();
  _BoundaryPolygon_default_instance_.DefaultConstruct();
  _RoadBoundary_default_instance_.DefaultConstruct();
  _RoadROIBoundary_default_instance_.DefaultConstruct();
  _RoadSection_default_instance_.DefaultConstruct();
  _Road_default_instance_.DefaultConstruct();
  _BoundaryEdge_default_instance_.get_mutable()->curve_ = const_cast< ::jmc_auto::hdmap::Curve*>(
      ::jmc_auto::hdmap::Curve::internal_default_instance());
  _RoadBoundary_default_instance_.get_mutable()->outer_polygon_ = const_cast< ::jmc_auto::hdmap::BoundaryPolygon*>(
      ::jmc_auto::hdmap::BoundaryPolygon::internal_default_instance());
  _RoadROIBoundary_default_instance_.get_mutable()->id_ = const_cast< ::jmc_auto::hdmap::Id*>(
      ::jmc_auto::hdmap::Id::internal_default_instance());
  _RoadSection_default_instance_.get_mutable()->id_ = const_cast< ::jmc_auto::hdmap::Id*>(
      ::jmc_auto::hdmap::Id::internal_default_instance());
  _RoadSection_default_instance_.get_mutable()->boundary_ = const_cast< ::jmc_auto::hdmap::RoadBoundary*>(
      ::jmc_auto::hdmap::RoadBoundary::internal_default_instance());
  _Road_default_instance_.get_mutable()->id_ = const_cast< ::jmc_auto::hdmap::Id*>(
      ::jmc_auto::hdmap::Id::internal_default_instance());
  _Road_default_instance_.get_mutable()->junction_id_ = const_cast< ::jmc_auto::hdmap::Id*>(
      ::jmc_auto::hdmap::Id::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n modules/map/proto/map_road.proto\022\016jmc_"
      "auto.hdmap\032$modules/map/proto/map_geomet"
      "ry.proto\032\036modules/map/proto/map_id.proto"
      "\"\255\001\n\014BoundaryEdge\022$\n\005curve\030\001 \001(\0132\025.jmc_a"
      "uto.hdmap.Curve\022/\n\004type\030\002 \001(\0162!.jmc_auto"
      ".hdmap.BoundaryEdge.Type\"F\n\004Type\022\013\n\007UNKN"
      "OWN\020\000\022\n\n\006NORMAL\020\001\022\021\n\rLEFT_BOUNDARY\020\002\022\022\n\016"
      "RIGHT_BOUNDARY\020\003\"=\n\017BoundaryPolygon\022*\n\004e"
      "dge\030\001 \003(\0132\034.jmc_auto.hdmap.BoundaryEdge\""
      "u\n\014RoadBoundary\0226\n\router_polygon\030\001 \001(\0132\037"
      ".jmc_auto.hdmap.BoundaryPolygon\022-\n\004hole\030"
      "\002 \003(\0132\037.jmc_auto.hdmap.BoundaryPolygon\"h"
      "\n\017RoadROIBoundary\022\036\n\002id\030\001 \001(\0132\022.jmc_auto"
      ".hdmap.Id\0225\n\017road_boundaries\030\002 \003(\0132\034.jmc"
      "_auto.hdmap.RoadBoundary\"\202\001\n\013RoadSection"
      "\022\036\n\002id\030\001 \001(\0132\022.jmc_auto.hdmap.Id\022#\n\007lane"
      "_id\030\002 \003(\0132\022.jmc_auto.hdmap.Id\022.\n\010boundar"
      "y\030\003 \001(\0132\034.jmc_auto.hdmap.RoadBoundary\"\341\001"
      "\n\004Road\022\036\n\002id\030\001 \001(\0132\022.jmc_auto.hdmap.Id\022,"
      "\n\007section\030\002 \003(\0132\033.jmc_auto.hdmap.RoadSec"
      "tion\022\'\n\013junction_id\030\003 \001(\0132\022.jmc_auto.hdm"
      "ap.Id\022\'\n\004type\030\004 \001(\0162\031.jmc_auto.hdmap.Roa"
      "d.Type\"9\n\004Type\022\013\n\007UNKNOWN\020\000\022\013\n\007HIGHWAY\020\001"
      "\022\r\n\tCITY_ROAD\020\002\022\010\n\004PARK\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 945);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/map/proto/map_road.proto", &protobuf_RegisterTypes);
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto

const ::google::protobuf::EnumDescriptor* BoundaryEdge_Type_descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_enum_descriptors[0];
}
bool BoundaryEdge_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BoundaryEdge_Type BoundaryEdge::UNKNOWN;
const BoundaryEdge_Type BoundaryEdge::NORMAL;
const BoundaryEdge_Type BoundaryEdge::LEFT_BOUNDARY;
const BoundaryEdge_Type BoundaryEdge::RIGHT_BOUNDARY;
const BoundaryEdge_Type BoundaryEdge::Type_MIN;
const BoundaryEdge_Type BoundaryEdge::Type_MAX;
const int BoundaryEdge::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Road_Type_descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_enum_descriptors[1];
}
bool Road_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Road_Type Road::UNKNOWN;
const Road_Type Road::HIGHWAY;
const Road_Type Road::CITY_ROAD;
const Road_Type Road::PARK;
const Road_Type Road::Type_MIN;
const Road_Type Road::Type_MAX;
const int Road::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundaryEdge::kCurveFieldNumber;
const int BoundaryEdge::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundaryEdge::BoundaryEdge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.hdmap.BoundaryEdge)
}
BoundaryEdge::BoundaryEdge(const BoundaryEdge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_curve()) {
    curve_ = new ::jmc_auto::hdmap::Curve(*from.curve_);
  } else {
    curve_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.hdmap.BoundaryEdge)
}

void BoundaryEdge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&curve_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&curve_) + sizeof(type_));
}

BoundaryEdge::~BoundaryEdge() {
  // @@protoc_insertion_point(destructor:jmc_auto.hdmap.BoundaryEdge)
  SharedDtor();
}

void BoundaryEdge::SharedDtor() {
  if (this != internal_default_instance()) {
    delete curve_;
  }
}

void BoundaryEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundaryEdge::descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoundaryEdge& BoundaryEdge::default_instance() {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::InitDefaults();
  return *internal_default_instance();
}

BoundaryEdge* BoundaryEdge::New(::google::protobuf::Arena* arena) const {
  BoundaryEdge* n = new BoundaryEdge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundaryEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.hdmap.BoundaryEdge)
  if (has_curve()) {
    GOOGLE_DCHECK(curve_ != NULL);
    curve_->::jmc_auto::hdmap::Curve::Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BoundaryEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.hdmap.BoundaryEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.hdmap.Curve curve = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curve()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.BoundaryEdge.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::hdmap::BoundaryEdge_Type_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::hdmap::BoundaryEdge_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.hdmap.BoundaryEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.hdmap.BoundaryEdge)
  return false;
#undef DO_
}

void BoundaryEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.hdmap.BoundaryEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Curve curve = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->curve_, output);
  }

  // optional .jmc_auto.hdmap.BoundaryEdge.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.hdmap.BoundaryEdge)
}

::google::protobuf::uint8* BoundaryEdge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.hdmap.BoundaryEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Curve curve = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->curve_, deterministic, target);
  }

  // optional .jmc_auto.hdmap.BoundaryEdge.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.hdmap.BoundaryEdge)
  return target;
}

size_t BoundaryEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.hdmap.BoundaryEdge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.hdmap.Curve curve = 1;
    if (has_curve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->curve_);
    }

    // optional .jmc_auto.hdmap.BoundaryEdge.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundaryEdge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.hdmap.BoundaryEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundaryEdge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundaryEdge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.hdmap.BoundaryEdge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.hdmap.BoundaryEdge)
    MergeFrom(*source);
  }
}

void BoundaryEdge::MergeFrom(const BoundaryEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.hdmap.BoundaryEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_curve()->::jmc_auto::hdmap::Curve::MergeFrom(from.curve());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BoundaryEdge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.hdmap.BoundaryEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryEdge::CopyFrom(const BoundaryEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.hdmap.BoundaryEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryEdge::IsInitialized() const {
  return true;
}

void BoundaryEdge::Swap(BoundaryEdge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundaryEdge::InternalSwap(BoundaryEdge* other) {
  std::swap(curve_, other->curve_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundaryEdge::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoundaryEdge

// optional .jmc_auto.hdmap.Curve curve = 1;
bool BoundaryEdge::has_curve() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BoundaryEdge::set_has_curve() {
  _has_bits_[0] |= 0x00000001u;
}
void BoundaryEdge::clear_has_curve() {
  _has_bits_[0] &= ~0x00000001u;
}
void BoundaryEdge::clear_curve() {
  if (curve_ != NULL) curve_->::jmc_auto::hdmap::Curve::Clear();
  clear_has_curve();
}
const ::jmc_auto::hdmap::Curve& BoundaryEdge::curve() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.BoundaryEdge.curve)
  return curve_ != NULL ? *curve_
                         : *::jmc_auto::hdmap::Curve::internal_default_instance();
}
::jmc_auto::hdmap::Curve* BoundaryEdge::mutable_curve() {
  set_has_curve();
  if (curve_ == NULL) {
    curve_ = new ::jmc_auto::hdmap::Curve;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.BoundaryEdge.curve)
  return curve_;
}
::jmc_auto::hdmap::Curve* BoundaryEdge::release_curve() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.BoundaryEdge.curve)
  clear_has_curve();
  ::jmc_auto::hdmap::Curve* temp = curve_;
  curve_ = NULL;
  return temp;
}
void BoundaryEdge::set_allocated_curve(::jmc_auto::hdmap::Curve* curve) {
  delete curve_;
  curve_ = curve;
  if (curve) {
    set_has_curve();
  } else {
    clear_has_curve();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.BoundaryEdge.curve)
}

// optional .jmc_auto.hdmap.BoundaryEdge.Type type = 2;
bool BoundaryEdge::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BoundaryEdge::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void BoundaryEdge::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void BoundaryEdge::clear_type() {
  type_ = 0;
  clear_has_type();
}
::jmc_auto::hdmap::BoundaryEdge_Type BoundaryEdge::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.BoundaryEdge.type)
  return static_cast< ::jmc_auto::hdmap::BoundaryEdge_Type >(type_);
}
void BoundaryEdge::set_type(::jmc_auto::hdmap::BoundaryEdge_Type value) {
  assert(::jmc_auto::hdmap::BoundaryEdge_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.BoundaryEdge.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundaryPolygon::kEdgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundaryPolygon::BoundaryPolygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.hdmap.BoundaryPolygon)
}
BoundaryPolygon::BoundaryPolygon(const BoundaryPolygon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      edge_(from.edge_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.hdmap.BoundaryPolygon)
}

void BoundaryPolygon::SharedCtor() {
  _cached_size_ = 0;
}

BoundaryPolygon::~BoundaryPolygon() {
  // @@protoc_insertion_point(destructor:jmc_auto.hdmap.BoundaryPolygon)
  SharedDtor();
}

void BoundaryPolygon::SharedDtor() {
}

void BoundaryPolygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundaryPolygon::descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoundaryPolygon& BoundaryPolygon::default_instance() {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::InitDefaults();
  return *internal_default_instance();
}

BoundaryPolygon* BoundaryPolygon::New(::google::protobuf::Arena* arena) const {
  BoundaryPolygon* n = new BoundaryPolygon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundaryPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.hdmap.BoundaryPolygon)
  edge_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BoundaryPolygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.hdmap.BoundaryPolygon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .jmc_auto.hdmap.BoundaryEdge edge = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.hdmap.BoundaryPolygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.hdmap.BoundaryPolygon)
  return false;
#undef DO_
}

void BoundaryPolygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.hdmap.BoundaryPolygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.hdmap.BoundaryEdge edge = 1;
  for (unsigned int i = 0, n = this->edge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->edge(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.hdmap.BoundaryPolygon)
}

::google::protobuf::uint8* BoundaryPolygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.hdmap.BoundaryPolygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .jmc_auto.hdmap.BoundaryEdge edge = 1;
  for (unsigned int i = 0, n = this->edge_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->edge(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.hdmap.BoundaryPolygon)
  return target;
}

size_t BoundaryPolygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.hdmap.BoundaryPolygon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.hdmap.BoundaryEdge edge = 1;
  {
    unsigned int count = this->edge_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edge(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundaryPolygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.hdmap.BoundaryPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundaryPolygon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundaryPolygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.hdmap.BoundaryPolygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.hdmap.BoundaryPolygon)
    MergeFrom(*source);
  }
}

void BoundaryPolygon::MergeFrom(const BoundaryPolygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.hdmap.BoundaryPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edge_.MergeFrom(from.edge_);
}

void BoundaryPolygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.hdmap.BoundaryPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundaryPolygon::CopyFrom(const BoundaryPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.hdmap.BoundaryPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundaryPolygon::IsInitialized() const {
  return true;
}

void BoundaryPolygon::Swap(BoundaryPolygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundaryPolygon::InternalSwap(BoundaryPolygon* other) {
  edge_.InternalSwap(&other->edge_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundaryPolygon::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoundaryPolygon

// repeated .jmc_auto.hdmap.BoundaryEdge edge = 1;
int BoundaryPolygon::edge_size() const {
  return edge_.size();
}
void BoundaryPolygon::clear_edge() {
  edge_.Clear();
}
const ::jmc_auto::hdmap::BoundaryEdge& BoundaryPolygon::edge(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.BoundaryPolygon.edge)
  return edge_.Get(index);
}
::jmc_auto::hdmap::BoundaryEdge* BoundaryPolygon::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.BoundaryPolygon.edge)
  return edge_.Mutable(index);
}
::jmc_auto::hdmap::BoundaryEdge* BoundaryPolygon::add_edge() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.BoundaryPolygon.edge)
  return edge_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::BoundaryEdge >*
BoundaryPolygon::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.BoundaryPolygon.edge)
  return &edge_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::BoundaryEdge >&
BoundaryPolygon::edge() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.BoundaryPolygon.edge)
  return edge_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadBoundary::kOuterPolygonFieldNumber;
const int RoadBoundary::kHoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadBoundary::RoadBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.hdmap.RoadBoundary)
}
RoadBoundary::RoadBoundary(const RoadBoundary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      hole_(from.hole_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_outer_polygon()) {
    outer_polygon_ = new ::jmc_auto::hdmap::BoundaryPolygon(*from.outer_polygon_);
  } else {
    outer_polygon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.hdmap.RoadBoundary)
}

void RoadBoundary::SharedCtor() {
  _cached_size_ = 0;
  outer_polygon_ = NULL;
}

RoadBoundary::~RoadBoundary() {
  // @@protoc_insertion_point(destructor:jmc_auto.hdmap.RoadBoundary)
  SharedDtor();
}

void RoadBoundary::SharedDtor() {
  if (this != internal_default_instance()) {
    delete outer_polygon_;
  }
}

void RoadBoundary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadBoundary::descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadBoundary& RoadBoundary::default_instance() {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoadBoundary* RoadBoundary::New(::google::protobuf::Arena* arena) const {
  RoadBoundary* n = new RoadBoundary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.hdmap.RoadBoundary)
  hole_.Clear();
  if (has_outer_polygon()) {
    GOOGLE_DCHECK(outer_polygon_ != NULL);
    outer_polygon_->::jmc_auto::hdmap::BoundaryPolygon::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoadBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.hdmap.RoadBoundary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.hdmap.BoundaryPolygon outer_polygon = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outer_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.BoundaryPolygon hole = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hole()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.hdmap.RoadBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.hdmap.RoadBoundary)
  return false;
#undef DO_
}

void RoadBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.hdmap.RoadBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.BoundaryPolygon outer_polygon = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->outer_polygon_, output);
  }

  // repeated .jmc_auto.hdmap.BoundaryPolygon hole = 2;
  for (unsigned int i = 0, n = this->hole_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hole(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.hdmap.RoadBoundary)
}

::google::protobuf::uint8* RoadBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.hdmap.RoadBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.BoundaryPolygon outer_polygon = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->outer_polygon_, deterministic, target);
  }

  // repeated .jmc_auto.hdmap.BoundaryPolygon hole = 2;
  for (unsigned int i = 0, n = this->hole_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->hole(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.hdmap.RoadBoundary)
  return target;
}

size_t RoadBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.hdmap.RoadBoundary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.hdmap.BoundaryPolygon hole = 2;
  {
    unsigned int count = this->hole_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hole(i));
    }
  }

  // optional .jmc_auto.hdmap.BoundaryPolygon outer_polygon = 1;
  if (has_outer_polygon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->outer_polygon_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.hdmap.RoadBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadBoundary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.hdmap.RoadBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.hdmap.RoadBoundary)
    MergeFrom(*source);
  }
}

void RoadBoundary::MergeFrom(const RoadBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.hdmap.RoadBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hole_.MergeFrom(from.hole_);
  if (from.has_outer_polygon()) {
    mutable_outer_polygon()->::jmc_auto::hdmap::BoundaryPolygon::MergeFrom(from.outer_polygon());
  }
}

void RoadBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.hdmap.RoadBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadBoundary::CopyFrom(const RoadBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.hdmap.RoadBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadBoundary::IsInitialized() const {
  return true;
}

void RoadBoundary::Swap(RoadBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadBoundary::InternalSwap(RoadBoundary* other) {
  hole_.InternalSwap(&other->hole_);
  std::swap(outer_polygon_, other->outer_polygon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadBoundary::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoadBoundary

// optional .jmc_auto.hdmap.BoundaryPolygon outer_polygon = 1;
bool RoadBoundary::has_outer_polygon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoadBoundary::set_has_outer_polygon() {
  _has_bits_[0] |= 0x00000001u;
}
void RoadBoundary::clear_has_outer_polygon() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoadBoundary::clear_outer_polygon() {
  if (outer_polygon_ != NULL) outer_polygon_->::jmc_auto::hdmap::BoundaryPolygon::Clear();
  clear_has_outer_polygon();
}
const ::jmc_auto::hdmap::BoundaryPolygon& RoadBoundary::outer_polygon() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.RoadBoundary.outer_polygon)
  return outer_polygon_ != NULL ? *outer_polygon_
                         : *::jmc_auto::hdmap::BoundaryPolygon::internal_default_instance();
}
::jmc_auto::hdmap::BoundaryPolygon* RoadBoundary::mutable_outer_polygon() {
  set_has_outer_polygon();
  if (outer_polygon_ == NULL) {
    outer_polygon_ = new ::jmc_auto::hdmap::BoundaryPolygon;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.RoadBoundary.outer_polygon)
  return outer_polygon_;
}
::jmc_auto::hdmap::BoundaryPolygon* RoadBoundary::release_outer_polygon() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.RoadBoundary.outer_polygon)
  clear_has_outer_polygon();
  ::jmc_auto::hdmap::BoundaryPolygon* temp = outer_polygon_;
  outer_polygon_ = NULL;
  return temp;
}
void RoadBoundary::set_allocated_outer_polygon(::jmc_auto::hdmap::BoundaryPolygon* outer_polygon) {
  delete outer_polygon_;
  outer_polygon_ = outer_polygon;
  if (outer_polygon) {
    set_has_outer_polygon();
  } else {
    clear_has_outer_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.RoadBoundary.outer_polygon)
}

// repeated .jmc_auto.hdmap.BoundaryPolygon hole = 2;
int RoadBoundary::hole_size() const {
  return hole_.size();
}
void RoadBoundary::clear_hole() {
  hole_.Clear();
}
const ::jmc_auto::hdmap::BoundaryPolygon& RoadBoundary::hole(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.RoadBoundary.hole)
  return hole_.Get(index);
}
::jmc_auto::hdmap::BoundaryPolygon* RoadBoundary::mutable_hole(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.RoadBoundary.hole)
  return hole_.Mutable(index);
}
::jmc_auto::hdmap::BoundaryPolygon* RoadBoundary::add_hole() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.RoadBoundary.hole)
  return hole_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::BoundaryPolygon >*
RoadBoundary::mutable_hole() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.RoadBoundary.hole)
  return &hole_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::BoundaryPolygon >&
RoadBoundary::hole() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.RoadBoundary.hole)
  return hole_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadROIBoundary::kIdFieldNumber;
const int RoadROIBoundary::kRoadBoundariesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadROIBoundary::RoadROIBoundary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.hdmap.RoadROIBoundary)
}
RoadROIBoundary::RoadROIBoundary(const RoadROIBoundary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      road_boundaries_(from.road_boundaries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::jmc_auto::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.hdmap.RoadROIBoundary)
}

void RoadROIBoundary::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
}

RoadROIBoundary::~RoadROIBoundary() {
  // @@protoc_insertion_point(destructor:jmc_auto.hdmap.RoadROIBoundary)
  SharedDtor();
}

void RoadROIBoundary::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
}

void RoadROIBoundary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadROIBoundary::descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadROIBoundary& RoadROIBoundary::default_instance() {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoadROIBoundary* RoadROIBoundary::New(::google::protobuf::Arena* arena) const {
  RoadROIBoundary* n = new RoadROIBoundary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadROIBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.hdmap.RoadROIBoundary)
  road_boundaries_.Clear();
  if (has_id()) {
    GOOGLE_DCHECK(id_ != NULL);
    id_->::jmc_auto::hdmap::Id::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoadROIBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.hdmap.RoadROIBoundary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.RoadBoundary road_boundaries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_road_boundaries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.hdmap.RoadROIBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.hdmap.RoadROIBoundary)
  return false;
#undef DO_
}

void RoadROIBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.hdmap.RoadROIBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .jmc_auto.hdmap.RoadBoundary road_boundaries = 2;
  for (unsigned int i = 0, n = this->road_boundaries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->road_boundaries(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.hdmap.RoadROIBoundary)
}

::google::protobuf::uint8* RoadROIBoundary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.hdmap.RoadROIBoundary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // repeated .jmc_auto.hdmap.RoadBoundary road_boundaries = 2;
  for (unsigned int i = 0, n = this->road_boundaries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->road_boundaries(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.hdmap.RoadROIBoundary)
  return target;
}

size_t RoadROIBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.hdmap.RoadROIBoundary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.hdmap.RoadBoundary road_boundaries = 2;
  {
    unsigned int count = this->road_boundaries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->road_boundaries(i));
    }
  }

  // optional .jmc_auto.hdmap.Id id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadROIBoundary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.hdmap.RoadROIBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadROIBoundary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadROIBoundary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.hdmap.RoadROIBoundary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.hdmap.RoadROIBoundary)
    MergeFrom(*source);
  }
}

void RoadROIBoundary::MergeFrom(const RoadROIBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.hdmap.RoadROIBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_boundaries_.MergeFrom(from.road_boundaries_);
  if (from.has_id()) {
    mutable_id()->::jmc_auto::hdmap::Id::MergeFrom(from.id());
  }
}

void RoadROIBoundary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.hdmap.RoadROIBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadROIBoundary::CopyFrom(const RoadROIBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.hdmap.RoadROIBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadROIBoundary::IsInitialized() const {
  return true;
}

void RoadROIBoundary::Swap(RoadROIBoundary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadROIBoundary::InternalSwap(RoadROIBoundary* other) {
  road_boundaries_.InternalSwap(&other->road_boundaries_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadROIBoundary::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoadROIBoundary

// optional .jmc_auto.hdmap.Id id = 1;
bool RoadROIBoundary::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoadROIBoundary::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoadROIBoundary::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoadROIBoundary::clear_id() {
  if (id_ != NULL) id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_id();
}
const ::jmc_auto::hdmap::Id& RoadROIBoundary::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.RoadROIBoundary.id)
  return id_ != NULL ? *id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
::jmc_auto::hdmap::Id* RoadROIBoundary::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.RoadROIBoundary.id)
  return id_;
}
::jmc_auto::hdmap::Id* RoadROIBoundary::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.RoadROIBoundary.id)
  clear_has_id();
  ::jmc_auto::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void RoadROIBoundary::set_allocated_id(::jmc_auto::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.RoadROIBoundary.id)
}

// repeated .jmc_auto.hdmap.RoadBoundary road_boundaries = 2;
int RoadROIBoundary::road_boundaries_size() const {
  return road_boundaries_.size();
}
void RoadROIBoundary::clear_road_boundaries() {
  road_boundaries_.Clear();
}
const ::jmc_auto::hdmap::RoadBoundary& RoadROIBoundary::road_boundaries(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.RoadROIBoundary.road_boundaries)
  return road_boundaries_.Get(index);
}
::jmc_auto::hdmap::RoadBoundary* RoadROIBoundary::mutable_road_boundaries(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.RoadROIBoundary.road_boundaries)
  return road_boundaries_.Mutable(index);
}
::jmc_auto::hdmap::RoadBoundary* RoadROIBoundary::add_road_boundaries() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.RoadROIBoundary.road_boundaries)
  return road_boundaries_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::RoadBoundary >*
RoadROIBoundary::mutable_road_boundaries() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.RoadROIBoundary.road_boundaries)
  return &road_boundaries_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::RoadBoundary >&
RoadROIBoundary::road_boundaries() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.RoadROIBoundary.road_boundaries)
  return road_boundaries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadSection::kIdFieldNumber;
const int RoadSection::kLaneIdFieldNumber;
const int RoadSection::kBoundaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadSection::RoadSection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.hdmap.RoadSection)
}
RoadSection::RoadSection(const RoadSection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lane_id_(from.lane_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::jmc_auto::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_boundary()) {
    boundary_ = new ::jmc_auto::hdmap::RoadBoundary(*from.boundary_);
  } else {
    boundary_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.hdmap.RoadSection)
}

void RoadSection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&boundary_) -
    reinterpret_cast<char*>(&id_) + sizeof(boundary_));
}

RoadSection::~RoadSection() {
  // @@protoc_insertion_point(destructor:jmc_auto.hdmap.RoadSection)
  SharedDtor();
}

void RoadSection::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete boundary_;
  }
}

void RoadSection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoadSection::descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoadSection& RoadSection::default_instance() {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoadSection* RoadSection::New(::google::protobuf::Arena* arena) const {
  RoadSection* n = new RoadSection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadSection::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.hdmap.RoadSection)
  lane_id_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::jmc_auto::hdmap::Id::Clear();
    }
    if (has_boundary()) {
      GOOGLE_DCHECK(boundary_ != NULL);
      boundary_->::jmc_auto::hdmap::RoadBoundary::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoadSection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.hdmap.RoadSection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id lane_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.RoadBoundary boundary = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.hdmap.RoadSection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.hdmap.RoadSection)
  return false;
#undef DO_
}

void RoadSection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.hdmap.RoadSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .jmc_auto.hdmap.Id lane_id = 2;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lane_id(i), output);
  }

  // optional .jmc_auto.hdmap.RoadBoundary boundary = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->boundary_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.hdmap.RoadSection)
}

::google::protobuf::uint8* RoadSection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.hdmap.RoadSection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Id lane_id = 2;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->lane_id(i), deterministic, target);
  }

  // optional .jmc_auto.hdmap.RoadBoundary boundary = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->boundary_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.hdmap.RoadSection)
  return target;
}

size_t RoadSection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.hdmap.RoadSection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.hdmap.Id lane_id = 2;
  {
    unsigned int count = this->lane_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_id(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .jmc_auto.hdmap.RoadBoundary boundary = 3;
    if (has_boundary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->boundary_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadSection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.hdmap.RoadSection)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadSection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoadSection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.hdmap.RoadSection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.hdmap.RoadSection)
    MergeFrom(*source);
  }
}

void RoadSection::MergeFrom(const RoadSection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.hdmap.RoadSection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_id_.MergeFrom(from.lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::jmc_auto::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_boundary()->::jmc_auto::hdmap::RoadBoundary::MergeFrom(from.boundary());
    }
  }
}

void RoadSection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.hdmap.RoadSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadSection::CopyFrom(const RoadSection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.hdmap.RoadSection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadSection::IsInitialized() const {
  return true;
}

void RoadSection::Swap(RoadSection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadSection::InternalSwap(RoadSection* other) {
  lane_id_.InternalSwap(&other->lane_id_);
  std::swap(id_, other->id_);
  std::swap(boundary_, other->boundary_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoadSection::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoadSection

// optional .jmc_auto.hdmap.Id id = 1;
bool RoadSection::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoadSection::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoadSection::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoadSection::clear_id() {
  if (id_ != NULL) id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_id();
}
const ::jmc_auto::hdmap::Id& RoadSection::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.RoadSection.id)
  return id_ != NULL ? *id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
::jmc_auto::hdmap::Id* RoadSection::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.RoadSection.id)
  return id_;
}
::jmc_auto::hdmap::Id* RoadSection::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.RoadSection.id)
  clear_has_id();
  ::jmc_auto::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void RoadSection::set_allocated_id(::jmc_auto::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.RoadSection.id)
}

// repeated .jmc_auto.hdmap.Id lane_id = 2;
int RoadSection::lane_id_size() const {
  return lane_id_.size();
}
void RoadSection::clear_lane_id() {
  lane_id_.Clear();
}
const ::jmc_auto::hdmap::Id& RoadSection::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.RoadSection.lane_id)
  return lane_id_.Get(index);
}
::jmc_auto::hdmap::Id* RoadSection::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.RoadSection.lane_id)
  return lane_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* RoadSection::add_lane_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.RoadSection.lane_id)
  return lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
RoadSection::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.RoadSection.lane_id)
  return &lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
RoadSection::lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.RoadSection.lane_id)
  return lane_id_;
}

// optional .jmc_auto.hdmap.RoadBoundary boundary = 3;
bool RoadSection::has_boundary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoadSection::set_has_boundary() {
  _has_bits_[0] |= 0x00000002u;
}
void RoadSection::clear_has_boundary() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoadSection::clear_boundary() {
  if (boundary_ != NULL) boundary_->::jmc_auto::hdmap::RoadBoundary::Clear();
  clear_has_boundary();
}
const ::jmc_auto::hdmap::RoadBoundary& RoadSection::boundary() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.RoadSection.boundary)
  return boundary_ != NULL ? *boundary_
                         : *::jmc_auto::hdmap::RoadBoundary::internal_default_instance();
}
::jmc_auto::hdmap::RoadBoundary* RoadSection::mutable_boundary() {
  set_has_boundary();
  if (boundary_ == NULL) {
    boundary_ = new ::jmc_auto::hdmap::RoadBoundary;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.RoadSection.boundary)
  return boundary_;
}
::jmc_auto::hdmap::RoadBoundary* RoadSection::release_boundary() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.RoadSection.boundary)
  clear_has_boundary();
  ::jmc_auto::hdmap::RoadBoundary* temp = boundary_;
  boundary_ = NULL;
  return temp;
}
void RoadSection::set_allocated_boundary(::jmc_auto::hdmap::RoadBoundary* boundary) {
  delete boundary_;
  boundary_ = boundary;
  if (boundary) {
    set_has_boundary();
  } else {
    clear_has_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.RoadSection.boundary)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Road::kIdFieldNumber;
const int Road::kSectionFieldNumber;
const int Road::kJunctionIdFieldNumber;
const int Road::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Road::Road()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.hdmap.Road)
}
Road::Road(const Road& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      section_(from.section_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::jmc_auto::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_junction_id()) {
    junction_id_ = new ::jmc_auto::hdmap::Id(*from.junction_id_);
  } else {
    junction_id_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.hdmap.Road)
}

void Road::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
}

Road::~Road() {
  // @@protoc_insertion_point(destructor:jmc_auto.hdmap.Road)
  SharedDtor();
}

void Road::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete junction_id_;
  }
}

void Road::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Road::descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Road& Road::default_instance() {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::InitDefaults();
  return *internal_default_instance();
}

Road* Road::New(::google::protobuf::Arena* arena) const {
  Road* n = new Road;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Road::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.hdmap.Road)
  section_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::jmc_auto::hdmap::Id::Clear();
    }
    if (has_junction_id()) {
      GOOGLE_DCHECK(junction_id_ != NULL);
      junction_id_->::jmc_auto::hdmap::Id::Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Road::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.hdmap.Road)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.RoadSection section = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_section()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.Id junction_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_junction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.Road.Type type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::hdmap::Road_Type_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::hdmap::Road_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.hdmap.Road)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.hdmap.Road)
  return false;
#undef DO_
}

void Road::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.hdmap.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .jmc_auto.hdmap.RoadSection section = 2;
  for (unsigned int i = 0, n = this->section_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->section(i), output);
  }

  // optional .jmc_auto.hdmap.Id junction_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->junction_id_, output);
  }

  // optional .jmc_auto.hdmap.Road.Type type = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.hdmap.Road)
}

::google::protobuf::uint8* Road::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.hdmap.Road)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // repeated .jmc_auto.hdmap.RoadSection section = 2;
  for (unsigned int i = 0, n = this->section_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->section(i), deterministic, target);
  }

  // optional .jmc_auto.hdmap.Id junction_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->junction_id_, deterministic, target);
  }

  // optional .jmc_auto.hdmap.Road.Type type = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.hdmap.Road)
  return target;
}

size_t Road::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.hdmap.Road)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.hdmap.RoadSection section = 2;
  {
    unsigned int count = this->section_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->section(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .jmc_auto.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .jmc_auto.hdmap.Id junction_id = 3;
    if (has_junction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->junction_id_);
    }

    // optional .jmc_auto.hdmap.Road.Type type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Road::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.hdmap.Road)
  GOOGLE_DCHECK_NE(&from, this);
  const Road* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Road>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.hdmap.Road)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.hdmap.Road)
    MergeFrom(*source);
  }
}

void Road::MergeFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.hdmap.Road)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  section_.MergeFrom(from.section_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::jmc_auto::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_junction_id()->::jmc_auto::hdmap::Id::MergeFrom(from.junction_id());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Road::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.hdmap.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Road::CopyFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.hdmap.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Road::IsInitialized() const {
  return true;
}

void Road::Swap(Road* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Road::InternalSwap(Road* other) {
  section_.InternalSwap(&other->section_);
  std::swap(id_, other->id_);
  std::swap(junction_id_, other->junction_id_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Road::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Road

// optional .jmc_auto.hdmap.Id id = 1;
bool Road::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Road::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Road::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Road::clear_id() {
  if (id_ != NULL) id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_id();
}
const ::jmc_auto::hdmap::Id& Road::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Road.id)
  return id_ != NULL ? *id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
::jmc_auto::hdmap::Id* Road::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Road.id)
  return id_;
}
::jmc_auto::hdmap::Id* Road::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Road.id)
  clear_has_id();
  ::jmc_auto::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Road::set_allocated_id(::jmc_auto::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Road.id)
}

// repeated .jmc_auto.hdmap.RoadSection section = 2;
int Road::section_size() const {
  return section_.size();
}
void Road::clear_section() {
  section_.Clear();
}
const ::jmc_auto::hdmap::RoadSection& Road::section(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Road.section)
  return section_.Get(index);
}
::jmc_auto::hdmap::RoadSection* Road::mutable_section(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Road.section)
  return section_.Mutable(index);
}
::jmc_auto::hdmap::RoadSection* Road::add_section() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Road.section)
  return section_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::RoadSection >*
Road::mutable_section() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Road.section)
  return &section_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::RoadSection >&
Road::section() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Road.section)
  return section_;
}

// optional .jmc_auto.hdmap.Id junction_id = 3;
bool Road::has_junction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Road::set_has_junction_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Road::clear_has_junction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Road::clear_junction_id() {
  if (junction_id_ != NULL) junction_id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_junction_id();
}
const ::jmc_auto::hdmap::Id& Road::junction_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Road.junction_id)
  return junction_id_ != NULL ? *junction_id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
::jmc_auto::hdmap::Id* Road::mutable_junction_id() {
  set_has_junction_id();
  if (junction_id_ == NULL) {
    junction_id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Road.junction_id)
  return junction_id_;
}
::jmc_auto::hdmap::Id* Road::release_junction_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Road.junction_id)
  clear_has_junction_id();
  ::jmc_auto::hdmap::Id* temp = junction_id_;
  junction_id_ = NULL;
  return temp;
}
void Road::set_allocated_junction_id(::jmc_auto::hdmap::Id* junction_id) {
  delete junction_id_;
  junction_id_ = junction_id;
  if (junction_id) {
    set_has_junction_id();
  } else {
    clear_has_junction_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Road.junction_id)
}

// optional .jmc_auto.hdmap.Road.Type type = 4;
bool Road::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Road::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Road::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Road::clear_type() {
  type_ = 0;
  clear_has_type();
}
::jmc_auto::hdmap::Road_Type Road::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Road.type)
  return static_cast< ::jmc_auto::hdmap::Road_Type >(type_);
}
void Road::set_type(::jmc_auto::hdmap::Road_Type value) {
  assert(::jmc_auto::hdmap::Road_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Road.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
