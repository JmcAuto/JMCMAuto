// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_speed_bump.proto

#ifndef PROTOBUF_modules_2fmap_2fproto_2fmap_5fspeed_5fbump_2eproto__INCLUDED
#define PROTOBUF_modules_2fmap_2fproto_2fmap_5fspeed_5fbump_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/map/proto/map_id.pb.h"
#include "modules/map/proto/map_geometry.pb.h"
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace hdmap {
class Curve;
class CurveDefaultTypeInternal;
extern CurveDefaultTypeInternal _Curve_default_instance_;
class CurveSegment;
class CurveSegmentDefaultTypeInternal;
extern CurveSegmentDefaultTypeInternal _CurveSegment_default_instance_;
class Id;
class IdDefaultTypeInternal;
extern IdDefaultTypeInternal _Id_default_instance_;
class LineSegment;
class LineSegmentDefaultTypeInternal;
extern LineSegmentDefaultTypeInternal _LineSegment_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class SpeedBump;
class SpeedBumpDefaultTypeInternal;
extern SpeedBumpDefaultTypeInternal _SpeedBump_default_instance_;
}  // namespace hdmap
}  // namespace jmc_auto

namespace jmc_auto {
namespace hdmap {

namespace protobuf_modules_2fmap_2fproto_2fmap_5fspeed_5fbump_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fspeed_5fbump_2eproto

// ===================================================================

class SpeedBump : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.hdmap.SpeedBump) */ {
 public:
  SpeedBump();
  virtual ~SpeedBump();

  SpeedBump(const SpeedBump& from);

  inline SpeedBump& operator=(const SpeedBump& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeedBump& default_instance();

  static inline const SpeedBump* internal_default_instance() {
    return reinterpret_cast<const SpeedBump*>(
               &_SpeedBump_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SpeedBump* other);

  // implements Message ----------------------------------------------

  inline SpeedBump* New() const PROTOBUF_FINAL { return New(NULL); }

  SpeedBump* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpeedBump& from);
  void MergeFrom(const SpeedBump& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpeedBump* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.hdmap.Id overlap_id = 2;
  int overlap_id_size() const;
  void clear_overlap_id();
  static const int kOverlapIdFieldNumber = 2;
  const ::jmc_auto::hdmap::Id& overlap_id(int index) const;
  ::jmc_auto::hdmap::Id* mutable_overlap_id(int index);
  ::jmc_auto::hdmap::Id* add_overlap_id();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
      mutable_overlap_id();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
      overlap_id() const;

  // repeated .jmc_auto.hdmap.Curve position = 3;
  int position_size() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  const ::jmc_auto::hdmap::Curve& position(int index) const;
  ::jmc_auto::hdmap::Curve* mutable_position(int index);
  ::jmc_auto::hdmap::Curve* add_position();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Curve >*
      mutable_position();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Curve >&
      position() const;

  // optional .jmc_auto.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::jmc_auto::hdmap::Id& id() const;
  ::jmc_auto::hdmap::Id* mutable_id();
  ::jmc_auto::hdmap::Id* release_id();
  void set_allocated_id(::jmc_auto::hdmap::Id* id);

  // @@protoc_insertion_point(class_scope:jmc_auto.hdmap.SpeedBump)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id > overlap_id_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Curve > position_;
  ::jmc_auto::hdmap::Id* id_;
  friend struct protobuf_modules_2fmap_2fproto_2fmap_5fspeed_5fbump_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeedBump

// optional .jmc_auto.hdmap.Id id = 1;
inline bool SpeedBump::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpeedBump::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpeedBump::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpeedBump::clear_id() {
  if (id_ != NULL) id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_id();
}
inline const ::jmc_auto::hdmap::Id& SpeedBump::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.SpeedBump.id)
  return id_ != NULL ? *id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
inline ::jmc_auto::hdmap::Id* SpeedBump::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.SpeedBump.id)
  return id_;
}
inline ::jmc_auto::hdmap::Id* SpeedBump::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.SpeedBump.id)
  clear_has_id();
  ::jmc_auto::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void SpeedBump::set_allocated_id(::jmc_auto::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.SpeedBump.id)
}

// repeated .jmc_auto.hdmap.Id overlap_id = 2;
inline int SpeedBump::overlap_id_size() const {
  return overlap_id_.size();
}
inline void SpeedBump::clear_overlap_id() {
  overlap_id_.Clear();
}
inline const ::jmc_auto::hdmap::Id& SpeedBump::overlap_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.SpeedBump.overlap_id)
  return overlap_id_.Get(index);
}
inline ::jmc_auto::hdmap::Id* SpeedBump::mutable_overlap_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.SpeedBump.overlap_id)
  return overlap_id_.Mutable(index);
}
inline ::jmc_auto::hdmap::Id* SpeedBump::add_overlap_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.SpeedBump.overlap_id)
  return overlap_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
SpeedBump::mutable_overlap_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.SpeedBump.overlap_id)
  return &overlap_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
SpeedBump::overlap_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.SpeedBump.overlap_id)
  return overlap_id_;
}

// repeated .jmc_auto.hdmap.Curve position = 3;
inline int SpeedBump::position_size() const {
  return position_.size();
}
inline void SpeedBump::clear_position() {
  position_.Clear();
}
inline const ::jmc_auto::hdmap::Curve& SpeedBump::position(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.SpeedBump.position)
  return position_.Get(index);
}
inline ::jmc_auto::hdmap::Curve* SpeedBump::mutable_position(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.SpeedBump.position)
  return position_.Mutable(index);
}
inline ::jmc_auto::hdmap::Curve* SpeedBump::add_position() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.SpeedBump.position)
  return position_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Curve >*
SpeedBump::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.SpeedBump.position)
  return &position_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Curve >&
SpeedBump::position() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.SpeedBump.position)
  return position_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace hdmap
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fmap_2fproto_2fmap_5fspeed_5fbump_2eproto__INCLUDED
