// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_road.proto

#ifndef PROTOBUF_modules_2fmap_2fproto_2fmap_5froad_2eproto__INCLUDED
#define PROTOBUF_modules_2fmap_2fproto_2fmap_5froad_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/map/proto/map_geometry.pb.h"
#include "modules/map/proto/map_id.pb.h"
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace hdmap {
class BoundaryEdge;
class BoundaryEdgeDefaultTypeInternal;
extern BoundaryEdgeDefaultTypeInternal _BoundaryEdge_default_instance_;
class BoundaryPolygon;
class BoundaryPolygonDefaultTypeInternal;
extern BoundaryPolygonDefaultTypeInternal _BoundaryPolygon_default_instance_;
class Curve;
class CurveDefaultTypeInternal;
extern CurveDefaultTypeInternal _Curve_default_instance_;
class CurveSegment;
class CurveSegmentDefaultTypeInternal;
extern CurveSegmentDefaultTypeInternal _CurveSegment_default_instance_;
class Id;
class IdDefaultTypeInternal;
extern IdDefaultTypeInternal _Id_default_instance_;
class LineSegment;
class LineSegmentDefaultTypeInternal;
extern LineSegmentDefaultTypeInternal _LineSegment_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Road;
class RoadDefaultTypeInternal;
extern RoadDefaultTypeInternal _Road_default_instance_;
class RoadBoundary;
class RoadBoundaryDefaultTypeInternal;
extern RoadBoundaryDefaultTypeInternal _RoadBoundary_default_instance_;
class RoadROIBoundary;
class RoadROIBoundaryDefaultTypeInternal;
extern RoadROIBoundaryDefaultTypeInternal _RoadROIBoundary_default_instance_;
class RoadSection;
class RoadSectionDefaultTypeInternal;
extern RoadSectionDefaultTypeInternal _RoadSection_default_instance_;
}  // namespace hdmap
}  // namespace jmc_auto

namespace jmc_auto {
namespace hdmap {

namespace protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto

enum BoundaryEdge_Type {
  BoundaryEdge_Type_UNKNOWN = 0,
  BoundaryEdge_Type_NORMAL = 1,
  BoundaryEdge_Type_LEFT_BOUNDARY = 2,
  BoundaryEdge_Type_RIGHT_BOUNDARY = 3
};
bool BoundaryEdge_Type_IsValid(int value);
const BoundaryEdge_Type BoundaryEdge_Type_Type_MIN = BoundaryEdge_Type_UNKNOWN;
const BoundaryEdge_Type BoundaryEdge_Type_Type_MAX = BoundaryEdge_Type_RIGHT_BOUNDARY;
const int BoundaryEdge_Type_Type_ARRAYSIZE = BoundaryEdge_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* BoundaryEdge_Type_descriptor();
inline const ::std::string& BoundaryEdge_Type_Name(BoundaryEdge_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    BoundaryEdge_Type_descriptor(), value);
}
inline bool BoundaryEdge_Type_Parse(
    const ::std::string& name, BoundaryEdge_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BoundaryEdge_Type>(
    BoundaryEdge_Type_descriptor(), name, value);
}
enum Road_Type {
  Road_Type_UNKNOWN = 0,
  Road_Type_HIGHWAY = 1,
  Road_Type_CITY_ROAD = 2,
  Road_Type_PARK = 3
};
bool Road_Type_IsValid(int value);
const Road_Type Road_Type_Type_MIN = Road_Type_UNKNOWN;
const Road_Type Road_Type_Type_MAX = Road_Type_PARK;
const int Road_Type_Type_ARRAYSIZE = Road_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Road_Type_descriptor();
inline const ::std::string& Road_Type_Name(Road_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Road_Type_descriptor(), value);
}
inline bool Road_Type_Parse(
    const ::std::string& name, Road_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Road_Type>(
    Road_Type_descriptor(), name, value);
}
// ===================================================================

class BoundaryEdge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.hdmap.BoundaryEdge) */ {
 public:
  BoundaryEdge();
  virtual ~BoundaryEdge();

  BoundaryEdge(const BoundaryEdge& from);

  inline BoundaryEdge& operator=(const BoundaryEdge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoundaryEdge& default_instance();

  static inline const BoundaryEdge* internal_default_instance() {
    return reinterpret_cast<const BoundaryEdge*>(
               &_BoundaryEdge_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BoundaryEdge* other);

  // implements Message ----------------------------------------------

  inline BoundaryEdge* New() const PROTOBUF_FINAL { return New(NULL); }

  BoundaryEdge* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BoundaryEdge& from);
  void MergeFrom(const BoundaryEdge& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BoundaryEdge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef BoundaryEdge_Type Type;
  static const Type UNKNOWN =
    BoundaryEdge_Type_UNKNOWN;
  static const Type NORMAL =
    BoundaryEdge_Type_NORMAL;
  static const Type LEFT_BOUNDARY =
    BoundaryEdge_Type_LEFT_BOUNDARY;
  static const Type RIGHT_BOUNDARY =
    BoundaryEdge_Type_RIGHT_BOUNDARY;
  static inline bool Type_IsValid(int value) {
    return BoundaryEdge_Type_IsValid(value);
  }
  static const Type Type_MIN =
    BoundaryEdge_Type_Type_MIN;
  static const Type Type_MAX =
    BoundaryEdge_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    BoundaryEdge_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return BoundaryEdge_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return BoundaryEdge_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return BoundaryEdge_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.hdmap.Curve curve = 1;
  bool has_curve() const;
  void clear_curve();
  static const int kCurveFieldNumber = 1;
  const ::jmc_auto::hdmap::Curve& curve() const;
  ::jmc_auto::hdmap::Curve* mutable_curve();
  ::jmc_auto::hdmap::Curve* release_curve();
  void set_allocated_curve(::jmc_auto::hdmap::Curve* curve);

  // optional .jmc_auto.hdmap.BoundaryEdge.Type type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::jmc_auto::hdmap::BoundaryEdge_Type type() const;
  void set_type(::jmc_auto::hdmap::BoundaryEdge_Type value);

  // @@protoc_insertion_point(class_scope:jmc_auto.hdmap.BoundaryEdge)
 private:
  void set_has_curve();
  void clear_has_curve();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::hdmap::Curve* curve_;
  int type_;
  friend struct protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BoundaryPolygon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.hdmap.BoundaryPolygon) */ {
 public:
  BoundaryPolygon();
  virtual ~BoundaryPolygon();

  BoundaryPolygon(const BoundaryPolygon& from);

  inline BoundaryPolygon& operator=(const BoundaryPolygon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoundaryPolygon& default_instance();

  static inline const BoundaryPolygon* internal_default_instance() {
    return reinterpret_cast<const BoundaryPolygon*>(
               &_BoundaryPolygon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BoundaryPolygon* other);

  // implements Message ----------------------------------------------

  inline BoundaryPolygon* New() const PROTOBUF_FINAL { return New(NULL); }

  BoundaryPolygon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BoundaryPolygon& from);
  void MergeFrom(const BoundaryPolygon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BoundaryPolygon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.hdmap.BoundaryEdge edge = 1;
  int edge_size() const;
  void clear_edge();
  static const int kEdgeFieldNumber = 1;
  const ::jmc_auto::hdmap::BoundaryEdge& edge(int index) const;
  ::jmc_auto::hdmap::BoundaryEdge* mutable_edge(int index);
  ::jmc_auto::hdmap::BoundaryEdge* add_edge();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::BoundaryEdge >*
      mutable_edge();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::BoundaryEdge >&
      edge() const;

  // @@protoc_insertion_point(class_scope:jmc_auto.hdmap.BoundaryPolygon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::BoundaryEdge > edge_;
  friend struct protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoadBoundary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.hdmap.RoadBoundary) */ {
 public:
  RoadBoundary();
  virtual ~RoadBoundary();

  RoadBoundary(const RoadBoundary& from);

  inline RoadBoundary& operator=(const RoadBoundary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoadBoundary& default_instance();

  static inline const RoadBoundary* internal_default_instance() {
    return reinterpret_cast<const RoadBoundary*>(
               &_RoadBoundary_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RoadBoundary* other);

  // implements Message ----------------------------------------------

  inline RoadBoundary* New() const PROTOBUF_FINAL { return New(NULL); }

  RoadBoundary* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoadBoundary& from);
  void MergeFrom(const RoadBoundary& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoadBoundary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.hdmap.BoundaryPolygon hole = 2;
  int hole_size() const;
  void clear_hole();
  static const int kHoleFieldNumber = 2;
  const ::jmc_auto::hdmap::BoundaryPolygon& hole(int index) const;
  ::jmc_auto::hdmap::BoundaryPolygon* mutable_hole(int index);
  ::jmc_auto::hdmap::BoundaryPolygon* add_hole();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::BoundaryPolygon >*
      mutable_hole();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::BoundaryPolygon >&
      hole() const;

  // optional .jmc_auto.hdmap.BoundaryPolygon outer_polygon = 1;
  bool has_outer_polygon() const;
  void clear_outer_polygon();
  static const int kOuterPolygonFieldNumber = 1;
  const ::jmc_auto::hdmap::BoundaryPolygon& outer_polygon() const;
  ::jmc_auto::hdmap::BoundaryPolygon* mutable_outer_polygon();
  ::jmc_auto::hdmap::BoundaryPolygon* release_outer_polygon();
  void set_allocated_outer_polygon(::jmc_auto::hdmap::BoundaryPolygon* outer_polygon);

  // @@protoc_insertion_point(class_scope:jmc_auto.hdmap.RoadBoundary)
 private:
  void set_has_outer_polygon();
  void clear_has_outer_polygon();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::BoundaryPolygon > hole_;
  ::jmc_auto::hdmap::BoundaryPolygon* outer_polygon_;
  friend struct protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoadROIBoundary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.hdmap.RoadROIBoundary) */ {
 public:
  RoadROIBoundary();
  virtual ~RoadROIBoundary();

  RoadROIBoundary(const RoadROIBoundary& from);

  inline RoadROIBoundary& operator=(const RoadROIBoundary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoadROIBoundary& default_instance();

  static inline const RoadROIBoundary* internal_default_instance() {
    return reinterpret_cast<const RoadROIBoundary*>(
               &_RoadROIBoundary_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RoadROIBoundary* other);

  // implements Message ----------------------------------------------

  inline RoadROIBoundary* New() const PROTOBUF_FINAL { return New(NULL); }

  RoadROIBoundary* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoadROIBoundary& from);
  void MergeFrom(const RoadROIBoundary& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoadROIBoundary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.hdmap.RoadBoundary road_boundaries = 2;
  int road_boundaries_size() const;
  void clear_road_boundaries();
  static const int kRoadBoundariesFieldNumber = 2;
  const ::jmc_auto::hdmap::RoadBoundary& road_boundaries(int index) const;
  ::jmc_auto::hdmap::RoadBoundary* mutable_road_boundaries(int index);
  ::jmc_auto::hdmap::RoadBoundary* add_road_boundaries();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::RoadBoundary >*
      mutable_road_boundaries();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::RoadBoundary >&
      road_boundaries() const;

  // optional .jmc_auto.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::jmc_auto::hdmap::Id& id() const;
  ::jmc_auto::hdmap::Id* mutable_id();
  ::jmc_auto::hdmap::Id* release_id();
  void set_allocated_id(::jmc_auto::hdmap::Id* id);

  // @@protoc_insertion_point(class_scope:jmc_auto.hdmap.RoadROIBoundary)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::RoadBoundary > road_boundaries_;
  ::jmc_auto::hdmap::Id* id_;
  friend struct protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoadSection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.hdmap.RoadSection) */ {
 public:
  RoadSection();
  virtual ~RoadSection();

  RoadSection(const RoadSection& from);

  inline RoadSection& operator=(const RoadSection& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoadSection& default_instance();

  static inline const RoadSection* internal_default_instance() {
    return reinterpret_cast<const RoadSection*>(
               &_RoadSection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RoadSection* other);

  // implements Message ----------------------------------------------

  inline RoadSection* New() const PROTOBUF_FINAL { return New(NULL); }

  RoadSection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RoadSection& from);
  void MergeFrom(const RoadSection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RoadSection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.hdmap.Id lane_id = 2;
  int lane_id_size() const;
  void clear_lane_id();
  static const int kLaneIdFieldNumber = 2;
  const ::jmc_auto::hdmap::Id& lane_id(int index) const;
  ::jmc_auto::hdmap::Id* mutable_lane_id(int index);
  ::jmc_auto::hdmap::Id* add_lane_id();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
      mutable_lane_id();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
      lane_id() const;

  // optional .jmc_auto.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::jmc_auto::hdmap::Id& id() const;
  ::jmc_auto::hdmap::Id* mutable_id();
  ::jmc_auto::hdmap::Id* release_id();
  void set_allocated_id(::jmc_auto::hdmap::Id* id);

  // optional .jmc_auto.hdmap.RoadBoundary boundary = 3;
  bool has_boundary() const;
  void clear_boundary();
  static const int kBoundaryFieldNumber = 3;
  const ::jmc_auto::hdmap::RoadBoundary& boundary() const;
  ::jmc_auto::hdmap::RoadBoundary* mutable_boundary();
  ::jmc_auto::hdmap::RoadBoundary* release_boundary();
  void set_allocated_boundary(::jmc_auto::hdmap::RoadBoundary* boundary);

  // @@protoc_insertion_point(class_scope:jmc_auto.hdmap.RoadSection)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_boundary();
  void clear_has_boundary();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id > lane_id_;
  ::jmc_auto::hdmap::Id* id_;
  ::jmc_auto::hdmap::RoadBoundary* boundary_;
  friend struct protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Road : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.hdmap.Road) */ {
 public:
  Road();
  virtual ~Road();

  Road(const Road& from);

  inline Road& operator=(const Road& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Road& default_instance();

  static inline const Road* internal_default_instance() {
    return reinterpret_cast<const Road*>(
               &_Road_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Road* other);

  // implements Message ----------------------------------------------

  inline Road* New() const PROTOBUF_FINAL { return New(NULL); }

  Road* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Road& from);
  void MergeFrom(const Road& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Road* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Road_Type Type;
  static const Type UNKNOWN =
    Road_Type_UNKNOWN;
  static const Type HIGHWAY =
    Road_Type_HIGHWAY;
  static const Type CITY_ROAD =
    Road_Type_CITY_ROAD;
  static const Type PARK =
    Road_Type_PARK;
  static inline bool Type_IsValid(int value) {
    return Road_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Road_Type_Type_MIN;
  static const Type Type_MAX =
    Road_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Road_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Road_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Road_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Road_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.hdmap.RoadSection section = 2;
  int section_size() const;
  void clear_section();
  static const int kSectionFieldNumber = 2;
  const ::jmc_auto::hdmap::RoadSection& section(int index) const;
  ::jmc_auto::hdmap::RoadSection* mutable_section(int index);
  ::jmc_auto::hdmap::RoadSection* add_section();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::RoadSection >*
      mutable_section();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::RoadSection >&
      section() const;

  // optional .jmc_auto.hdmap.Id id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::jmc_auto::hdmap::Id& id() const;
  ::jmc_auto::hdmap::Id* mutable_id();
  ::jmc_auto::hdmap::Id* release_id();
  void set_allocated_id(::jmc_auto::hdmap::Id* id);

  // optional .jmc_auto.hdmap.Id junction_id = 3;
  bool has_junction_id() const;
  void clear_junction_id();
  static const int kJunctionIdFieldNumber = 3;
  const ::jmc_auto::hdmap::Id& junction_id() const;
  ::jmc_auto::hdmap::Id* mutable_junction_id();
  ::jmc_auto::hdmap::Id* release_junction_id();
  void set_allocated_junction_id(::jmc_auto::hdmap::Id* junction_id);

  // optional .jmc_auto.hdmap.Road.Type type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::jmc_auto::hdmap::Road_Type type() const;
  void set_type(::jmc_auto::hdmap::Road_Type value);

  // @@protoc_insertion_point(class_scope:jmc_auto.hdmap.Road)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_junction_id();
  void clear_has_junction_id();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::RoadSection > section_;
  ::jmc_auto::hdmap::Id* id_;
  ::jmc_auto::hdmap::Id* junction_id_;
  int type_;
  friend struct protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BoundaryEdge

// optional .jmc_auto.hdmap.Curve curve = 1;
inline bool BoundaryEdge::has_curve() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoundaryEdge::set_has_curve() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoundaryEdge::clear_has_curve() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoundaryEdge::clear_curve() {
  if (curve_ != NULL) curve_->::jmc_auto::hdmap::Curve::Clear();
  clear_has_curve();
}
inline const ::jmc_auto::hdmap::Curve& BoundaryEdge::curve() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.BoundaryEdge.curve)
  return curve_ != NULL ? *curve_
                         : *::jmc_auto::hdmap::Curve::internal_default_instance();
}
inline ::jmc_auto::hdmap::Curve* BoundaryEdge::mutable_curve() {
  set_has_curve();
  if (curve_ == NULL) {
    curve_ = new ::jmc_auto::hdmap::Curve;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.BoundaryEdge.curve)
  return curve_;
}
inline ::jmc_auto::hdmap::Curve* BoundaryEdge::release_curve() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.BoundaryEdge.curve)
  clear_has_curve();
  ::jmc_auto::hdmap::Curve* temp = curve_;
  curve_ = NULL;
  return temp;
}
inline void BoundaryEdge::set_allocated_curve(::jmc_auto::hdmap::Curve* curve) {
  delete curve_;
  curve_ = curve;
  if (curve) {
    set_has_curve();
  } else {
    clear_has_curve();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.BoundaryEdge.curve)
}

// optional .jmc_auto.hdmap.BoundaryEdge.Type type = 2;
inline bool BoundaryEdge::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoundaryEdge::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoundaryEdge::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoundaryEdge::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::jmc_auto::hdmap::BoundaryEdge_Type BoundaryEdge::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.BoundaryEdge.type)
  return static_cast< ::jmc_auto::hdmap::BoundaryEdge_Type >(type_);
}
inline void BoundaryEdge::set_type(::jmc_auto::hdmap::BoundaryEdge_Type value) {
  assert(::jmc_auto::hdmap::BoundaryEdge_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.BoundaryEdge.type)
}

// -------------------------------------------------------------------

// BoundaryPolygon

// repeated .jmc_auto.hdmap.BoundaryEdge edge = 1;
inline int BoundaryPolygon::edge_size() const {
  return edge_.size();
}
inline void BoundaryPolygon::clear_edge() {
  edge_.Clear();
}
inline const ::jmc_auto::hdmap::BoundaryEdge& BoundaryPolygon::edge(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.BoundaryPolygon.edge)
  return edge_.Get(index);
}
inline ::jmc_auto::hdmap::BoundaryEdge* BoundaryPolygon::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.BoundaryPolygon.edge)
  return edge_.Mutable(index);
}
inline ::jmc_auto::hdmap::BoundaryEdge* BoundaryPolygon::add_edge() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.BoundaryPolygon.edge)
  return edge_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::BoundaryEdge >*
BoundaryPolygon::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.BoundaryPolygon.edge)
  return &edge_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::BoundaryEdge >&
BoundaryPolygon::edge() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.BoundaryPolygon.edge)
  return edge_;
}

// -------------------------------------------------------------------

// RoadBoundary

// optional .jmc_auto.hdmap.BoundaryPolygon outer_polygon = 1;
inline bool RoadBoundary::has_outer_polygon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoadBoundary::set_has_outer_polygon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoadBoundary::clear_has_outer_polygon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoadBoundary::clear_outer_polygon() {
  if (outer_polygon_ != NULL) outer_polygon_->::jmc_auto::hdmap::BoundaryPolygon::Clear();
  clear_has_outer_polygon();
}
inline const ::jmc_auto::hdmap::BoundaryPolygon& RoadBoundary::outer_polygon() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.RoadBoundary.outer_polygon)
  return outer_polygon_ != NULL ? *outer_polygon_
                         : *::jmc_auto::hdmap::BoundaryPolygon::internal_default_instance();
}
inline ::jmc_auto::hdmap::BoundaryPolygon* RoadBoundary::mutable_outer_polygon() {
  set_has_outer_polygon();
  if (outer_polygon_ == NULL) {
    outer_polygon_ = new ::jmc_auto::hdmap::BoundaryPolygon;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.RoadBoundary.outer_polygon)
  return outer_polygon_;
}
inline ::jmc_auto::hdmap::BoundaryPolygon* RoadBoundary::release_outer_polygon() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.RoadBoundary.outer_polygon)
  clear_has_outer_polygon();
  ::jmc_auto::hdmap::BoundaryPolygon* temp = outer_polygon_;
  outer_polygon_ = NULL;
  return temp;
}
inline void RoadBoundary::set_allocated_outer_polygon(::jmc_auto::hdmap::BoundaryPolygon* outer_polygon) {
  delete outer_polygon_;
  outer_polygon_ = outer_polygon;
  if (outer_polygon) {
    set_has_outer_polygon();
  } else {
    clear_has_outer_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.RoadBoundary.outer_polygon)
}

// repeated .jmc_auto.hdmap.BoundaryPolygon hole = 2;
inline int RoadBoundary::hole_size() const {
  return hole_.size();
}
inline void RoadBoundary::clear_hole() {
  hole_.Clear();
}
inline const ::jmc_auto::hdmap::BoundaryPolygon& RoadBoundary::hole(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.RoadBoundary.hole)
  return hole_.Get(index);
}
inline ::jmc_auto::hdmap::BoundaryPolygon* RoadBoundary::mutable_hole(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.RoadBoundary.hole)
  return hole_.Mutable(index);
}
inline ::jmc_auto::hdmap::BoundaryPolygon* RoadBoundary::add_hole() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.RoadBoundary.hole)
  return hole_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::BoundaryPolygon >*
RoadBoundary::mutable_hole() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.RoadBoundary.hole)
  return &hole_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::BoundaryPolygon >&
RoadBoundary::hole() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.RoadBoundary.hole)
  return hole_;
}

// -------------------------------------------------------------------

// RoadROIBoundary

// optional .jmc_auto.hdmap.Id id = 1;
inline bool RoadROIBoundary::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoadROIBoundary::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoadROIBoundary::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoadROIBoundary::clear_id() {
  if (id_ != NULL) id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_id();
}
inline const ::jmc_auto::hdmap::Id& RoadROIBoundary::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.RoadROIBoundary.id)
  return id_ != NULL ? *id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
inline ::jmc_auto::hdmap::Id* RoadROIBoundary::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.RoadROIBoundary.id)
  return id_;
}
inline ::jmc_auto::hdmap::Id* RoadROIBoundary::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.RoadROIBoundary.id)
  clear_has_id();
  ::jmc_auto::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void RoadROIBoundary::set_allocated_id(::jmc_auto::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.RoadROIBoundary.id)
}

// repeated .jmc_auto.hdmap.RoadBoundary road_boundaries = 2;
inline int RoadROIBoundary::road_boundaries_size() const {
  return road_boundaries_.size();
}
inline void RoadROIBoundary::clear_road_boundaries() {
  road_boundaries_.Clear();
}
inline const ::jmc_auto::hdmap::RoadBoundary& RoadROIBoundary::road_boundaries(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.RoadROIBoundary.road_boundaries)
  return road_boundaries_.Get(index);
}
inline ::jmc_auto::hdmap::RoadBoundary* RoadROIBoundary::mutable_road_boundaries(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.RoadROIBoundary.road_boundaries)
  return road_boundaries_.Mutable(index);
}
inline ::jmc_auto::hdmap::RoadBoundary* RoadROIBoundary::add_road_boundaries() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.RoadROIBoundary.road_boundaries)
  return road_boundaries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::RoadBoundary >*
RoadROIBoundary::mutable_road_boundaries() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.RoadROIBoundary.road_boundaries)
  return &road_boundaries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::RoadBoundary >&
RoadROIBoundary::road_boundaries() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.RoadROIBoundary.road_boundaries)
  return road_boundaries_;
}

// -------------------------------------------------------------------

// RoadSection

// optional .jmc_auto.hdmap.Id id = 1;
inline bool RoadSection::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoadSection::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoadSection::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoadSection::clear_id() {
  if (id_ != NULL) id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_id();
}
inline const ::jmc_auto::hdmap::Id& RoadSection::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.RoadSection.id)
  return id_ != NULL ? *id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
inline ::jmc_auto::hdmap::Id* RoadSection::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.RoadSection.id)
  return id_;
}
inline ::jmc_auto::hdmap::Id* RoadSection::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.RoadSection.id)
  clear_has_id();
  ::jmc_auto::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void RoadSection::set_allocated_id(::jmc_auto::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.RoadSection.id)
}

// repeated .jmc_auto.hdmap.Id lane_id = 2;
inline int RoadSection::lane_id_size() const {
  return lane_id_.size();
}
inline void RoadSection::clear_lane_id() {
  lane_id_.Clear();
}
inline const ::jmc_auto::hdmap::Id& RoadSection::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.RoadSection.lane_id)
  return lane_id_.Get(index);
}
inline ::jmc_auto::hdmap::Id* RoadSection::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.RoadSection.lane_id)
  return lane_id_.Mutable(index);
}
inline ::jmc_auto::hdmap::Id* RoadSection::add_lane_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.RoadSection.lane_id)
  return lane_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
RoadSection::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.RoadSection.lane_id)
  return &lane_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
RoadSection::lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.RoadSection.lane_id)
  return lane_id_;
}

// optional .jmc_auto.hdmap.RoadBoundary boundary = 3;
inline bool RoadSection::has_boundary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoadSection::set_has_boundary() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoadSection::clear_has_boundary() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoadSection::clear_boundary() {
  if (boundary_ != NULL) boundary_->::jmc_auto::hdmap::RoadBoundary::Clear();
  clear_has_boundary();
}
inline const ::jmc_auto::hdmap::RoadBoundary& RoadSection::boundary() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.RoadSection.boundary)
  return boundary_ != NULL ? *boundary_
                         : *::jmc_auto::hdmap::RoadBoundary::internal_default_instance();
}
inline ::jmc_auto::hdmap::RoadBoundary* RoadSection::mutable_boundary() {
  set_has_boundary();
  if (boundary_ == NULL) {
    boundary_ = new ::jmc_auto::hdmap::RoadBoundary;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.RoadSection.boundary)
  return boundary_;
}
inline ::jmc_auto::hdmap::RoadBoundary* RoadSection::release_boundary() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.RoadSection.boundary)
  clear_has_boundary();
  ::jmc_auto::hdmap::RoadBoundary* temp = boundary_;
  boundary_ = NULL;
  return temp;
}
inline void RoadSection::set_allocated_boundary(::jmc_auto::hdmap::RoadBoundary* boundary) {
  delete boundary_;
  boundary_ = boundary;
  if (boundary) {
    set_has_boundary();
  } else {
    clear_has_boundary();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.RoadSection.boundary)
}

// -------------------------------------------------------------------

// Road

// optional .jmc_auto.hdmap.Id id = 1;
inline bool Road::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Road::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Road::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Road::clear_id() {
  if (id_ != NULL) id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_id();
}
inline const ::jmc_auto::hdmap::Id& Road::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Road.id)
  return id_ != NULL ? *id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
inline ::jmc_auto::hdmap::Id* Road::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Road.id)
  return id_;
}
inline ::jmc_auto::hdmap::Id* Road::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Road.id)
  clear_has_id();
  ::jmc_auto::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
inline void Road::set_allocated_id(::jmc_auto::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Road.id)
}

// repeated .jmc_auto.hdmap.RoadSection section = 2;
inline int Road::section_size() const {
  return section_.size();
}
inline void Road::clear_section() {
  section_.Clear();
}
inline const ::jmc_auto::hdmap::RoadSection& Road::section(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Road.section)
  return section_.Get(index);
}
inline ::jmc_auto::hdmap::RoadSection* Road::mutable_section(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Road.section)
  return section_.Mutable(index);
}
inline ::jmc_auto::hdmap::RoadSection* Road::add_section() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Road.section)
  return section_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::RoadSection >*
Road::mutable_section() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Road.section)
  return &section_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::RoadSection >&
Road::section() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Road.section)
  return section_;
}

// optional .jmc_auto.hdmap.Id junction_id = 3;
inline bool Road::has_junction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Road::set_has_junction_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Road::clear_has_junction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Road::clear_junction_id() {
  if (junction_id_ != NULL) junction_id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_junction_id();
}
inline const ::jmc_auto::hdmap::Id& Road::junction_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Road.junction_id)
  return junction_id_ != NULL ? *junction_id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
inline ::jmc_auto::hdmap::Id* Road::mutable_junction_id() {
  set_has_junction_id();
  if (junction_id_ == NULL) {
    junction_id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Road.junction_id)
  return junction_id_;
}
inline ::jmc_auto::hdmap::Id* Road::release_junction_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Road.junction_id)
  clear_has_junction_id();
  ::jmc_auto::hdmap::Id* temp = junction_id_;
  junction_id_ = NULL;
  return temp;
}
inline void Road::set_allocated_junction_id(::jmc_auto::hdmap::Id* junction_id) {
  delete junction_id_;
  junction_id_ = junction_id;
  if (junction_id) {
    set_has_junction_id();
  } else {
    clear_has_junction_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Road.junction_id)
}

// optional .jmc_auto.hdmap.Road.Type type = 4;
inline bool Road::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Road::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Road::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Road::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::jmc_auto::hdmap::Road_Type Road::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Road.type)
  return static_cast< ::jmc_auto::hdmap::Road_Type >(type_);
}
inline void Road::set_type(::jmc_auto::hdmap::Road_Type value) {
  assert(::jmc_auto::hdmap::Road_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Road.type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace hdmap
}  // namespace jmc_auto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::jmc_auto::hdmap::BoundaryEdge_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::hdmap::BoundaryEdge_Type>() {
  return ::jmc_auto::hdmap::BoundaryEdge_Type_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::hdmap::Road_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::hdmap::Road_Type>() {
  return ::jmc_auto::hdmap::Road_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fmap_2fproto_2fmap_5froad_2eproto__INCLUDED
