// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_pnc_junction.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/map/proto/map_pnc_junction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace hdmap {
class PassageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Passage> {
} _Passage_default_instance_;
class PassageGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PassageGroup> {
} _PassageGroup_default_instance_;
class PNCJunctionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PNCJunction> {
} _PNCJunction_default_instance_;

namespace protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, signal_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, yield_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, stop_sign_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Passage, type_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageGroup, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassageGroup, passage_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNCJunction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNCJunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNCJunction, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNCJunction, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNCJunction, overlap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNCJunction, passage_group_),
  0,
  1,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(Passage)},
  { 17, 24, sizeof(PassageGroup)},
  { 26, 35, sizeof(PNCJunction)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Passage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PassageGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PNCJunction_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/map/proto/map_pnc_junction.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _Passage_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PassageGroup_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PNCJunction_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::InitDefaults();
  _Passage_default_instance_.DefaultConstruct();
  _PassageGroup_default_instance_.DefaultConstruct();
  _PNCJunction_default_instance_.DefaultConstruct();
  _Passage_default_instance_.get_mutable()->id_ = const_cast< ::jmc_auto::hdmap::Id*>(
      ::jmc_auto::hdmap::Id::internal_default_instance());
  _PassageGroup_default_instance_.get_mutable()->id_ = const_cast< ::jmc_auto::hdmap::Id*>(
      ::jmc_auto::hdmap::Id::internal_default_instance());
  _PNCJunction_default_instance_.get_mutable()->id_ = const_cast< ::jmc_auto::hdmap::Id*>(
      ::jmc_auto::hdmap::Id::internal_default_instance());
  _PNCJunction_default_instance_.get_mutable()->polygon_ = const_cast< ::jmc_auto::hdmap::Polygon*>(
      ::jmc_auto::hdmap::Polygon::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n(modules/map/proto/map_pnc_junction.pro"
      "to\022\016jmc_auto.hdmap\032\036modules/map/proto/ma"
      "p_id.proto\032$modules/map/proto/map_geomet"
      "ry.proto\"\236\002\n\007Passage\022\036\n\002id\030\001 \001(\0132\022.jmc_a"
      "uto.hdmap.Id\022%\n\tsignal_id\030\002 \003(\0132\022.jmc_au"
      "to.hdmap.Id\022$\n\010yield_id\030\003 \003(\0132\022.jmc_auto"
      ".hdmap.Id\022(\n\014stop_sign_id\030\004 \003(\0132\022.jmc_au"
      "to.hdmap.Id\022#\n\007lane_id\030\005 \003(\0132\022.jmc_auto."
      "hdmap.Id\022*\n\004type\030\006 \001(\0162\034.jmc_auto.hdmap."
      "Passage.Type\"+\n\004Type\022\013\n\007UNKNOWN\020\000\022\014\n\010ENT"
      "RANCE\020\001\022\010\n\004EXIT\020\002\"X\n\014PassageGroup\022\036\n\002id\030"
      "\001 \001(\0132\022.jmc_auto.hdmap.Id\022(\n\007passage\030\002 \003"
      "(\0132\027.jmc_auto.hdmap.Passage\"\264\001\n\013PNCJunct"
      "ion\022\036\n\002id\030\001 \001(\0132\022.jmc_auto.hdmap.Id\022(\n\007p"
      "olygon\030\002 \001(\0132\027.jmc_auto.hdmap.Polygon\022&\n"
      "\noverlap_id\030\003 \003(\0132\022.jmc_auto.hdmap.Id\0223\n"
      "\rpassage_group\030\004 \003(\0132\034.jmc_auto.hdmap.Pa"
      "ssageGroup"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 690);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/map/proto/map_pnc_junction.proto", &protobuf_RegisterTypes);
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto

const ::google::protobuf::EnumDescriptor* Passage_Type_descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::file_level_enum_descriptors[0];
}
bool Passage_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Passage_Type Passage::UNKNOWN;
const Passage_Type Passage::ENTRANCE;
const Passage_Type Passage::EXIT;
const Passage_Type Passage::Type_MIN;
const Passage_Type Passage::Type_MAX;
const int Passage::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Passage::kIdFieldNumber;
const int Passage::kSignalIdFieldNumber;
const int Passage::kYieldIdFieldNumber;
const int Passage::kStopSignIdFieldNumber;
const int Passage::kLaneIdFieldNumber;
const int Passage::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Passage::Passage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.hdmap.Passage)
}
Passage::Passage(const Passage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      signal_id_(from.signal_id_),
      yield_id_(from.yield_id_),
      stop_sign_id_(from.stop_sign_id_),
      lane_id_(from.lane_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::jmc_auto::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.hdmap.Passage)
}

void Passage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
}

Passage::~Passage() {
  // @@protoc_insertion_point(destructor:jmc_auto.hdmap.Passage)
  SharedDtor();
}

void Passage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
}

void Passage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Passage::descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Passage& Passage::default_instance() {
  protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::InitDefaults();
  return *internal_default_instance();
}

Passage* Passage::New(::google::protobuf::Arena* arena) const {
  Passage* n = new Passage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Passage::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.hdmap.Passage)
  signal_id_.Clear();
  yield_id_.Clear();
  stop_sign_id_.Clear();
  lane_id_.Clear();
  if (has_id()) {
    GOOGLE_DCHECK(id_ != NULL);
    id_->::jmc_auto::hdmap::Id::Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Passage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.hdmap.Passage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id signal_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signal_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id yield_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yield_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id stop_sign_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stop_sign_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id lane_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.Passage.Type type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::hdmap::Passage_Type_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::hdmap::Passage_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.hdmap.Passage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.hdmap.Passage)
  return false;
#undef DO_
}

void Passage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.hdmap.Passage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .jmc_auto.hdmap.Id signal_id = 2;
  for (unsigned int i = 0, n = this->signal_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->signal_id(i), output);
  }

  // repeated .jmc_auto.hdmap.Id yield_id = 3;
  for (unsigned int i = 0, n = this->yield_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->yield_id(i), output);
  }

  // repeated .jmc_auto.hdmap.Id stop_sign_id = 4;
  for (unsigned int i = 0, n = this->stop_sign_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stop_sign_id(i), output);
  }

  // repeated .jmc_auto.hdmap.Id lane_id = 5;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lane_id(i), output);
  }

  // optional .jmc_auto.hdmap.Passage.Type type = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.hdmap.Passage)
}

::google::protobuf::uint8* Passage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.hdmap.Passage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Id signal_id = 2;
  for (unsigned int i = 0, n = this->signal_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->signal_id(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Id yield_id = 3;
  for (unsigned int i = 0, n = this->yield_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->yield_id(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Id stop_sign_id = 4;
  for (unsigned int i = 0, n = this->stop_sign_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->stop_sign_id(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Id lane_id = 5;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->lane_id(i), deterministic, target);
  }

  // optional .jmc_auto.hdmap.Passage.Type type = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.hdmap.Passage)
  return target;
}

size_t Passage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.hdmap.Passage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.hdmap.Id signal_id = 2;
  {
    unsigned int count = this->signal_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id yield_id = 3;
  {
    unsigned int count = this->yield_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yield_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id stop_sign_id = 4;
  {
    unsigned int count = this->stop_sign_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop_sign_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id lane_id = 5;
  {
    unsigned int count = this->lane_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_id(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .jmc_auto.hdmap.Passage.Type type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Passage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.hdmap.Passage)
  GOOGLE_DCHECK_NE(&from, this);
  const Passage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Passage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.hdmap.Passage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.hdmap.Passage)
    MergeFrom(*source);
  }
}

void Passage::MergeFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.hdmap.Passage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signal_id_.MergeFrom(from.signal_id_);
  yield_id_.MergeFrom(from.yield_id_);
  stop_sign_id_.MergeFrom(from.stop_sign_id_);
  lane_id_.MergeFrom(from.lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::jmc_auto::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Passage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.hdmap.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Passage::CopyFrom(const Passage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.hdmap.Passage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Passage::IsInitialized() const {
  return true;
}

void Passage::Swap(Passage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Passage::InternalSwap(Passage* other) {
  signal_id_.InternalSwap(&other->signal_id_);
  yield_id_.InternalSwap(&other->yield_id_);
  stop_sign_id_.InternalSwap(&other->stop_sign_id_);
  lane_id_.InternalSwap(&other->lane_id_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Passage::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Passage

// optional .jmc_auto.hdmap.Id id = 1;
bool Passage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Passage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Passage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Passage::clear_id() {
  if (id_ != NULL) id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_id();
}
const ::jmc_auto::hdmap::Id& Passage::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Passage.id)
  return id_ != NULL ? *id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
::jmc_auto::hdmap::Id* Passage::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Passage.id)
  return id_;
}
::jmc_auto::hdmap::Id* Passage::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Passage.id)
  clear_has_id();
  ::jmc_auto::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Passage::set_allocated_id(::jmc_auto::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Passage.id)
}

// repeated .jmc_auto.hdmap.Id signal_id = 2;
int Passage::signal_id_size() const {
  return signal_id_.size();
}
void Passage::clear_signal_id() {
  signal_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Passage::signal_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Passage.signal_id)
  return signal_id_.Get(index);
}
::jmc_auto::hdmap::Id* Passage::mutable_signal_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Passage.signal_id)
  return signal_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Passage::add_signal_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Passage.signal_id)
  return signal_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Passage::mutable_signal_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Passage.signal_id)
  return &signal_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Passage::signal_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Passage.signal_id)
  return signal_id_;
}

// repeated .jmc_auto.hdmap.Id yield_id = 3;
int Passage::yield_id_size() const {
  return yield_id_.size();
}
void Passage::clear_yield_id() {
  yield_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Passage::yield_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Passage.yield_id)
  return yield_id_.Get(index);
}
::jmc_auto::hdmap::Id* Passage::mutable_yield_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Passage.yield_id)
  return yield_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Passage::add_yield_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Passage.yield_id)
  return yield_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Passage::mutable_yield_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Passage.yield_id)
  return &yield_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Passage::yield_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Passage.yield_id)
  return yield_id_;
}

// repeated .jmc_auto.hdmap.Id stop_sign_id = 4;
int Passage::stop_sign_id_size() const {
  return stop_sign_id_.size();
}
void Passage::clear_stop_sign_id() {
  stop_sign_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Passage::stop_sign_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Passage.stop_sign_id)
  return stop_sign_id_.Get(index);
}
::jmc_auto::hdmap::Id* Passage::mutable_stop_sign_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Passage.stop_sign_id)
  return stop_sign_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Passage::add_stop_sign_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Passage.stop_sign_id)
  return stop_sign_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Passage::mutable_stop_sign_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Passage.stop_sign_id)
  return &stop_sign_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Passage::stop_sign_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Passage.stop_sign_id)
  return stop_sign_id_;
}

// repeated .jmc_auto.hdmap.Id lane_id = 5;
int Passage::lane_id_size() const {
  return lane_id_.size();
}
void Passage::clear_lane_id() {
  lane_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Passage::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Passage.lane_id)
  return lane_id_.Get(index);
}
::jmc_auto::hdmap::Id* Passage::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Passage.lane_id)
  return lane_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Passage::add_lane_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Passage.lane_id)
  return lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Passage::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Passage.lane_id)
  return &lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Passage::lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Passage.lane_id)
  return lane_id_;
}

// optional .jmc_auto.hdmap.Passage.Type type = 6;
bool Passage::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Passage::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Passage::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Passage::clear_type() {
  type_ = 0;
  clear_has_type();
}
::jmc_auto::hdmap::Passage_Type Passage::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Passage.type)
  return static_cast< ::jmc_auto::hdmap::Passage_Type >(type_);
}
void Passage::set_type(::jmc_auto::hdmap::Passage_Type value) {
  assert(::jmc_auto::hdmap::Passage_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Passage.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PassageGroup::kIdFieldNumber;
const int PassageGroup::kPassageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PassageGroup::PassageGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.hdmap.PassageGroup)
}
PassageGroup::PassageGroup(const PassageGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      passage_(from.passage_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::jmc_auto::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.hdmap.PassageGroup)
}

void PassageGroup::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
}

PassageGroup::~PassageGroup() {
  // @@protoc_insertion_point(destructor:jmc_auto.hdmap.PassageGroup)
  SharedDtor();
}

void PassageGroup::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
}

void PassageGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassageGroup::descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PassageGroup& PassageGroup::default_instance() {
  protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::InitDefaults();
  return *internal_default_instance();
}

PassageGroup* PassageGroup::New(::google::protobuf::Arena* arena) const {
  PassageGroup* n = new PassageGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PassageGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.hdmap.PassageGroup)
  passage_.Clear();
  if (has_id()) {
    GOOGLE_DCHECK(id_ != NULL);
    id_->::jmc_auto::hdmap::Id::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PassageGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.hdmap.PassageGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Passage passage = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_passage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.hdmap.PassageGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.hdmap.PassageGroup)
  return false;
#undef DO_
}

void PassageGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.hdmap.PassageGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // repeated .jmc_auto.hdmap.Passage passage = 2;
  for (unsigned int i = 0, n = this->passage_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->passage(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.hdmap.PassageGroup)
}

::google::protobuf::uint8* PassageGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.hdmap.PassageGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Passage passage = 2;
  for (unsigned int i = 0, n = this->passage_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->passage(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.hdmap.PassageGroup)
  return target;
}

size_t PassageGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.hdmap.PassageGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.hdmap.Passage passage = 2;
  {
    unsigned int count = this->passage_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->passage(i));
    }
  }

  // optional .jmc_auto.hdmap.Id id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassageGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.hdmap.PassageGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const PassageGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PassageGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.hdmap.PassageGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.hdmap.PassageGroup)
    MergeFrom(*source);
  }
}

void PassageGroup::MergeFrom(const PassageGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.hdmap.PassageGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  passage_.MergeFrom(from.passage_);
  if (from.has_id()) {
    mutable_id()->::jmc_auto::hdmap::Id::MergeFrom(from.id());
  }
}

void PassageGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.hdmap.PassageGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassageGroup::CopyFrom(const PassageGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.hdmap.PassageGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassageGroup::IsInitialized() const {
  return true;
}

void PassageGroup::Swap(PassageGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PassageGroup::InternalSwap(PassageGroup* other) {
  passage_.InternalSwap(&other->passage_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PassageGroup::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PassageGroup

// optional .jmc_auto.hdmap.Id id = 1;
bool PassageGroup::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PassageGroup::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PassageGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PassageGroup::clear_id() {
  if (id_ != NULL) id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_id();
}
const ::jmc_auto::hdmap::Id& PassageGroup::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.PassageGroup.id)
  return id_ != NULL ? *id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
::jmc_auto::hdmap::Id* PassageGroup::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.PassageGroup.id)
  return id_;
}
::jmc_auto::hdmap::Id* PassageGroup::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.PassageGroup.id)
  clear_has_id();
  ::jmc_auto::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void PassageGroup::set_allocated_id(::jmc_auto::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.PassageGroup.id)
}

// repeated .jmc_auto.hdmap.Passage passage = 2;
int PassageGroup::passage_size() const {
  return passage_.size();
}
void PassageGroup::clear_passage() {
  passage_.Clear();
}
const ::jmc_auto::hdmap::Passage& PassageGroup::passage(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.PassageGroup.passage)
  return passage_.Get(index);
}
::jmc_auto::hdmap::Passage* PassageGroup::mutable_passage(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.PassageGroup.passage)
  return passage_.Mutable(index);
}
::jmc_auto::hdmap::Passage* PassageGroup::add_passage() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.PassageGroup.passage)
  return passage_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Passage >*
PassageGroup::mutable_passage() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.PassageGroup.passage)
  return &passage_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Passage >&
PassageGroup::passage() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.PassageGroup.passage)
  return passage_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PNCJunction::kIdFieldNumber;
const int PNCJunction::kPolygonFieldNumber;
const int PNCJunction::kOverlapIdFieldNumber;
const int PNCJunction::kPassageGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PNCJunction::PNCJunction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.hdmap.PNCJunction)
}
PNCJunction::PNCJunction(const PNCJunction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      overlap_id_(from.overlap_id_),
      passage_group_(from.passage_group_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::jmc_auto::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::jmc_auto::hdmap::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.hdmap.PNCJunction)
}

void PNCJunction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&polygon_) -
    reinterpret_cast<char*>(&id_) + sizeof(polygon_));
}

PNCJunction::~PNCJunction() {
  // @@protoc_insertion_point(destructor:jmc_auto.hdmap.PNCJunction)
  SharedDtor();
}

void PNCJunction::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete polygon_;
  }
}

void PNCJunction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PNCJunction::descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PNCJunction& PNCJunction::default_instance() {
  protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::InitDefaults();
  return *internal_default_instance();
}

PNCJunction* PNCJunction::New(::google::protobuf::Arena* arena) const {
  PNCJunction* n = new PNCJunction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PNCJunction::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.hdmap.PNCJunction)
  overlap_id_.Clear();
  passage_group_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::jmc_auto::hdmap::Id::Clear();
    }
    if (has_polygon()) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->::jmc_auto::hdmap::Polygon::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PNCJunction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.hdmap.PNCJunction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.Polygon polygon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id overlap_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_overlap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.PassageGroup passage_group = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_passage_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.hdmap.PNCJunction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.hdmap.PNCJunction)
  return false;
#undef DO_
}

void PNCJunction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.hdmap.PNCJunction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .jmc_auto.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->polygon_, output);
  }

  // repeated .jmc_auto.hdmap.Id overlap_id = 3;
  for (unsigned int i = 0, n = this->overlap_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->overlap_id(i), output);
  }

  // repeated .jmc_auto.hdmap.PassageGroup passage_group = 4;
  for (unsigned int i = 0, n = this->passage_group_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->passage_group(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.hdmap.PNCJunction)
}

::google::protobuf::uint8* PNCJunction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.hdmap.PNCJunction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // optional .jmc_auto.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->polygon_, deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Id overlap_id = 3;
  for (unsigned int i = 0, n = this->overlap_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->overlap_id(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.PassageGroup passage_group = 4;
  for (unsigned int i = 0, n = this->passage_group_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->passage_group(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.hdmap.PNCJunction)
  return target;
}

size_t PNCJunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.hdmap.PNCJunction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.hdmap.Id overlap_id = 3;
  {
    unsigned int count = this->overlap_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->overlap_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.PassageGroup passage_group = 4;
  {
    unsigned int count = this->passage_group_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->passage_group(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .jmc_auto.hdmap.Polygon polygon = 2;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->polygon_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PNCJunction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.hdmap.PNCJunction)
  GOOGLE_DCHECK_NE(&from, this);
  const PNCJunction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PNCJunction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.hdmap.PNCJunction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.hdmap.PNCJunction)
    MergeFrom(*source);
  }
}

void PNCJunction::MergeFrom(const PNCJunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.hdmap.PNCJunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overlap_id_.MergeFrom(from.overlap_id_);
  passage_group_.MergeFrom(from.passage_group_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::jmc_auto::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_polygon()->::jmc_auto::hdmap::Polygon::MergeFrom(from.polygon());
    }
  }
}

void PNCJunction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.hdmap.PNCJunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNCJunction::CopyFrom(const PNCJunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.hdmap.PNCJunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNCJunction::IsInitialized() const {
  return true;
}

void PNCJunction::Swap(PNCJunction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PNCJunction::InternalSwap(PNCJunction* other) {
  overlap_id_.InternalSwap(&other->overlap_id_);
  passage_group_.InternalSwap(&other->passage_group_);
  std::swap(id_, other->id_);
  std::swap(polygon_, other->polygon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PNCJunction::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5fpnc_5fjunction_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PNCJunction

// optional .jmc_auto.hdmap.Id id = 1;
bool PNCJunction::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PNCJunction::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PNCJunction::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PNCJunction::clear_id() {
  if (id_ != NULL) id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_id();
}
const ::jmc_auto::hdmap::Id& PNCJunction::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.PNCJunction.id)
  return id_ != NULL ? *id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
::jmc_auto::hdmap::Id* PNCJunction::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.PNCJunction.id)
  return id_;
}
::jmc_auto::hdmap::Id* PNCJunction::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.PNCJunction.id)
  clear_has_id();
  ::jmc_auto::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void PNCJunction::set_allocated_id(::jmc_auto::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.PNCJunction.id)
}

// optional .jmc_auto.hdmap.Polygon polygon = 2;
bool PNCJunction::has_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PNCJunction::set_has_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
void PNCJunction::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
void PNCJunction::clear_polygon() {
  if (polygon_ != NULL) polygon_->::jmc_auto::hdmap::Polygon::Clear();
  clear_has_polygon();
}
const ::jmc_auto::hdmap::Polygon& PNCJunction::polygon() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.PNCJunction.polygon)
  return polygon_ != NULL ? *polygon_
                         : *::jmc_auto::hdmap::Polygon::internal_default_instance();
}
::jmc_auto::hdmap::Polygon* PNCJunction::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    polygon_ = new ::jmc_auto::hdmap::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.PNCJunction.polygon)
  return polygon_;
}
::jmc_auto::hdmap::Polygon* PNCJunction::release_polygon() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.PNCJunction.polygon)
  clear_has_polygon();
  ::jmc_auto::hdmap::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
void PNCJunction::set_allocated_polygon(::jmc_auto::hdmap::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.PNCJunction.polygon)
}

// repeated .jmc_auto.hdmap.Id overlap_id = 3;
int PNCJunction::overlap_id_size() const {
  return overlap_id_.size();
}
void PNCJunction::clear_overlap_id() {
  overlap_id_.Clear();
}
const ::jmc_auto::hdmap::Id& PNCJunction::overlap_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.PNCJunction.overlap_id)
  return overlap_id_.Get(index);
}
::jmc_auto::hdmap::Id* PNCJunction::mutable_overlap_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.PNCJunction.overlap_id)
  return overlap_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* PNCJunction::add_overlap_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.PNCJunction.overlap_id)
  return overlap_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
PNCJunction::mutable_overlap_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.PNCJunction.overlap_id)
  return &overlap_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
PNCJunction::overlap_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.PNCJunction.overlap_id)
  return overlap_id_;
}

// repeated .jmc_auto.hdmap.PassageGroup passage_group = 4;
int PNCJunction::passage_group_size() const {
  return passage_group_.size();
}
void PNCJunction::clear_passage_group() {
  passage_group_.Clear();
}
const ::jmc_auto::hdmap::PassageGroup& PNCJunction::passage_group(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.PNCJunction.passage_group)
  return passage_group_.Get(index);
}
::jmc_auto::hdmap::PassageGroup* PNCJunction::mutable_passage_group(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.PNCJunction.passage_group)
  return passage_group_.Mutable(index);
}
::jmc_auto::hdmap::PassageGroup* PNCJunction::add_passage_group() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.PNCJunction.passage_group)
  return passage_group_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::PassageGroup >*
PNCJunction::mutable_passage_group() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.PNCJunction.passage_group)
  return &passage_group_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::PassageGroup >&
PNCJunction::passage_group() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.PNCJunction.passage_group)
  return passage_group_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
