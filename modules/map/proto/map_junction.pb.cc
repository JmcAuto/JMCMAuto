// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map_junction.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/map/proto/map_junction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace hdmap {
class JunctionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Junction> {
} _Junction_default_instance_;

namespace protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Junction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Junction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Junction, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Junction, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Junction, overlap_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Junction, crosswalk_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Junction, num_road_segments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Junction, lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Junction, type_),
  0,
  1,
  ~0u,
  ~0u,
  3,
  ~0u,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 12, sizeof(Junction)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Junction_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/map/proto/map_junction.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _Junction_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::InitDefaults();
  _Junction_default_instance_.DefaultConstruct();
  _Junction_default_instance_.get_mutable()->id_ = const_cast< ::jmc_auto::hdmap::Id*>(
      ::jmc_auto::hdmap::Id::internal_default_instance());
  _Junction_default_instance_.get_mutable()->polygon_ = const_cast< ::jmc_auto::hdmap::Polygon*>(
      ::jmc_auto::hdmap::Polygon::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n$modules/map/proto/map_junction.proto\022\016"
      "jmc_auto.hdmap\032\036modules/map/proto/map_id"
      ".proto\032$modules/map/proto/map_geometry.p"
      "roto\"\310\002\n\010Junction\022\036\n\002id\030\001 \001(\0132\022.jmc_auto"
      ".hdmap.Id\022(\n\007polygon\030\002 \001(\0132\027.jmc_auto.hd"
      "map.Polygon\022&\n\noverlap_id\030\003 \003(\0132\022.jmc_au"
      "to.hdmap.Id\022(\n\014crosswalk_id\030\004 \003(\0132\022.jmc_"
      "auto.hdmap.Id\022\034\n\021num_road_segments\030\005 \001(\005"
      ":\0014\022#\n\007lane_id\030\006 \003(\0132\022.jmc_auto.hdmap.Id"
      "\022+\n\004type\030\007 \001(\0162\035.jmc_auto.hdmap.Junction"
      ".Type\"0\n\004Type\022\013\n\007UNKNOWN\020\000\022\013\n\007IN_ROAD\020\001\022"
      "\016\n\nCROSS_ROAD\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 455);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/map/proto/map_junction.proto", &protobuf_RegisterTypes);
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fid_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto

const ::google::protobuf::EnumDescriptor* Junction_Type_descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto::file_level_enum_descriptors[0];
}
bool Junction_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Junction_Type Junction::UNKNOWN;
const Junction_Type Junction::IN_ROAD;
const Junction_Type Junction::CROSS_ROAD;
const Junction_Type Junction::Type_MIN;
const Junction_Type Junction::Type_MAX;
const int Junction::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Junction::kIdFieldNumber;
const int Junction::kPolygonFieldNumber;
const int Junction::kOverlapIdFieldNumber;
const int Junction::kCrosswalkIdFieldNumber;
const int Junction::kNumRoadSegmentsFieldNumber;
const int Junction::kLaneIdFieldNumber;
const int Junction::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Junction::Junction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.hdmap.Junction)
}
Junction::Junction(const Junction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      overlap_id_(from.overlap_id_),
      crosswalk_id_(from.crosswalk_id_),
      lane_id_(from.lane_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::jmc_auto::hdmap::Id(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::jmc_auto::hdmap::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&num_road_segments_) -
    reinterpret_cast<char*>(&type_) + sizeof(num_road_segments_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.hdmap.Junction)
}

void Junction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
  num_road_segments_ = 4;
}

Junction::~Junction() {
  // @@protoc_insertion_point(destructor:jmc_auto.hdmap.Junction)
  SharedDtor();
}

void Junction::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete polygon_;
  }
}

void Junction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Junction::descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Junction& Junction::default_instance() {
  protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto::InitDefaults();
  return *internal_default_instance();
}

Junction* Junction::New(::google::protobuf::Arena* arena) const {
  Junction* n = new Junction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Junction::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.hdmap.Junction)
  overlap_id_.Clear();
  crosswalk_id_.Clear();
  lane_id_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_id()) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->::jmc_auto::hdmap::Id::Clear();
    }
    if (has_polygon()) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->::jmc_auto::hdmap::Polygon::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    type_ = 0;
    num_road_segments_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Junction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.hdmap.Junction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.hdmap.Id id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.Polygon polygon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id overlap_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_overlap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id crosswalk_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crosswalk_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_road_segments = 5 [default = 4];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_num_road_segments();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_road_segments_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Id lane_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.Junction.Type type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::hdmap::Junction_Type_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::hdmap::Junction_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.hdmap.Junction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.hdmap.Junction)
  return false;
#undef DO_
}

void Junction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.hdmap.Junction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // optional .jmc_auto.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->polygon_, output);
  }

  // repeated .jmc_auto.hdmap.Id overlap_id = 3;
  for (unsigned int i = 0, n = this->overlap_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->overlap_id(i), output);
  }

  // repeated .jmc_auto.hdmap.Id crosswalk_id = 4;
  for (unsigned int i = 0, n = this->crosswalk_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->crosswalk_id(i), output);
  }

  // optional int32 num_road_segments = 5 [default = 4];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_road_segments(), output);
  }

  // repeated .jmc_auto.hdmap.Id lane_id = 6;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->lane_id(i), output);
  }

  // optional .jmc_auto.hdmap.Junction.Type type = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.hdmap.Junction)
}

::google::protobuf::uint8* Junction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.hdmap.Junction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Id id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // optional .jmc_auto.hdmap.Polygon polygon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->polygon_, deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Id overlap_id = 3;
  for (unsigned int i = 0, n = this->overlap_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->overlap_id(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Id crosswalk_id = 4;
  for (unsigned int i = 0, n = this->crosswalk_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->crosswalk_id(i), deterministic, target);
  }

  // optional int32 num_road_segments = 5 [default = 4];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_road_segments(), target);
  }

  // repeated .jmc_auto.hdmap.Id lane_id = 6;
  for (unsigned int i = 0, n = this->lane_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->lane_id(i), deterministic, target);
  }

  // optional .jmc_auto.hdmap.Junction.Type type = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.hdmap.Junction)
  return target;
}

size_t Junction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.hdmap.Junction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.hdmap.Id overlap_id = 3;
  {
    unsigned int count = this->overlap_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->overlap_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id crosswalk_id = 4;
  {
    unsigned int count = this->crosswalk_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crosswalk_id(i));
    }
  }

  // repeated .jmc_auto.hdmap.Id lane_id = 6;
  {
    unsigned int count = this->lane_id_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane_id(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .jmc_auto.hdmap.Id id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->id_);
    }

    // optional .jmc_auto.hdmap.Polygon polygon = 2;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->polygon_);
    }

    // optional .jmc_auto.hdmap.Junction.Type type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 num_road_segments = 5 [default = 4];
    if (has_num_road_segments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_road_segments());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Junction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.hdmap.Junction)
  GOOGLE_DCHECK_NE(&from, this);
  const Junction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Junction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.hdmap.Junction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.hdmap.Junction)
    MergeFrom(*source);
  }
}

void Junction::MergeFrom(const Junction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.hdmap.Junction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overlap_id_.MergeFrom(from.overlap_id_);
  crosswalk_id_.MergeFrom(from.crosswalk_id_);
  lane_id_.MergeFrom(from.lane_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::jmc_auto::hdmap::Id::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_polygon()->::jmc_auto::hdmap::Polygon::MergeFrom(from.polygon());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_road_segments_ = from.num_road_segments_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Junction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.hdmap.Junction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Junction::CopyFrom(const Junction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.hdmap.Junction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Junction::IsInitialized() const {
  return true;
}

void Junction::Swap(Junction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Junction::InternalSwap(Junction* other) {
  overlap_id_.InternalSwap(&other->overlap_id_);
  crosswalk_id_.InternalSwap(&other->crosswalk_id_);
  lane_id_.InternalSwap(&other->lane_id_);
  std::swap(id_, other->id_);
  std::swap(polygon_, other->polygon_);
  std::swap(type_, other->type_);
  std::swap(num_road_segments_, other->num_road_segments_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Junction::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Junction

// optional .jmc_auto.hdmap.Id id = 1;
bool Junction::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Junction::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Junction::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Junction::clear_id() {
  if (id_ != NULL) id_->::jmc_auto::hdmap::Id::Clear();
  clear_has_id();
}
const ::jmc_auto::hdmap::Id& Junction::id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Junction.id)
  return id_ != NULL ? *id_
                         : *::jmc_auto::hdmap::Id::internal_default_instance();
}
::jmc_auto::hdmap::Id* Junction::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::jmc_auto::hdmap::Id;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Junction.id)
  return id_;
}
::jmc_auto::hdmap::Id* Junction::release_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Junction.id)
  clear_has_id();
  ::jmc_auto::hdmap::Id* temp = id_;
  id_ = NULL;
  return temp;
}
void Junction::set_allocated_id(::jmc_auto::hdmap::Id* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Junction.id)
}

// optional .jmc_auto.hdmap.Polygon polygon = 2;
bool Junction::has_polygon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Junction::set_has_polygon() {
  _has_bits_[0] |= 0x00000002u;
}
void Junction::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000002u;
}
void Junction::clear_polygon() {
  if (polygon_ != NULL) polygon_->::jmc_auto::hdmap::Polygon::Clear();
  clear_has_polygon();
}
const ::jmc_auto::hdmap::Polygon& Junction::polygon() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Junction.polygon)
  return polygon_ != NULL ? *polygon_
                         : *::jmc_auto::hdmap::Polygon::internal_default_instance();
}
::jmc_auto::hdmap::Polygon* Junction::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    polygon_ = new ::jmc_auto::hdmap::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Junction.polygon)
  return polygon_;
}
::jmc_auto::hdmap::Polygon* Junction::release_polygon() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Junction.polygon)
  clear_has_polygon();
  ::jmc_auto::hdmap::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
void Junction::set_allocated_polygon(::jmc_auto::hdmap::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Junction.polygon)
}

// repeated .jmc_auto.hdmap.Id overlap_id = 3;
int Junction::overlap_id_size() const {
  return overlap_id_.size();
}
void Junction::clear_overlap_id() {
  overlap_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Junction::overlap_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Junction.overlap_id)
  return overlap_id_.Get(index);
}
::jmc_auto::hdmap::Id* Junction::mutable_overlap_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Junction.overlap_id)
  return overlap_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Junction::add_overlap_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Junction.overlap_id)
  return overlap_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Junction::mutable_overlap_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Junction.overlap_id)
  return &overlap_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Junction::overlap_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Junction.overlap_id)
  return overlap_id_;
}

// repeated .jmc_auto.hdmap.Id crosswalk_id = 4;
int Junction::crosswalk_id_size() const {
  return crosswalk_id_.size();
}
void Junction::clear_crosswalk_id() {
  crosswalk_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Junction::crosswalk_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Junction.crosswalk_id)
  return crosswalk_id_.Get(index);
}
::jmc_auto::hdmap::Id* Junction::mutable_crosswalk_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Junction.crosswalk_id)
  return crosswalk_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Junction::add_crosswalk_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Junction.crosswalk_id)
  return crosswalk_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Junction::mutable_crosswalk_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Junction.crosswalk_id)
  return &crosswalk_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Junction::crosswalk_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Junction.crosswalk_id)
  return crosswalk_id_;
}

// optional int32 num_road_segments = 5 [default = 4];
bool Junction::has_num_road_segments() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Junction::set_has_num_road_segments() {
  _has_bits_[0] |= 0x00000008u;
}
void Junction::clear_has_num_road_segments() {
  _has_bits_[0] &= ~0x00000008u;
}
void Junction::clear_num_road_segments() {
  num_road_segments_ = 4;
  clear_has_num_road_segments();
}
::google::protobuf::int32 Junction::num_road_segments() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Junction.num_road_segments)
  return num_road_segments_;
}
void Junction::set_num_road_segments(::google::protobuf::int32 value) {
  set_has_num_road_segments();
  num_road_segments_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Junction.num_road_segments)
}

// repeated .jmc_auto.hdmap.Id lane_id = 6;
int Junction::lane_id_size() const {
  return lane_id_.size();
}
void Junction::clear_lane_id() {
  lane_id_.Clear();
}
const ::jmc_auto::hdmap::Id& Junction::lane_id(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Junction.lane_id)
  return lane_id_.Get(index);
}
::jmc_auto::hdmap::Id* Junction::mutable_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Junction.lane_id)
  return lane_id_.Mutable(index);
}
::jmc_auto::hdmap::Id* Junction::add_lane_id() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Junction.lane_id)
  return lane_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >*
Junction::mutable_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Junction.lane_id)
  return &lane_id_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Id >&
Junction::lane_id() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Junction.lane_id)
  return lane_id_;
}

// optional .jmc_auto.hdmap.Junction.Type type = 7;
bool Junction::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Junction::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Junction::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Junction::clear_type() {
  type_ = 0;
  clear_has_type();
}
::jmc_auto::hdmap::Junction_Type Junction::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Junction.type)
  return static_cast< ::jmc_auto::hdmap::Junction_Type >(type_);
}
void Junction::set_type(::jmc_auto::hdmap::Junction_Type value) {
  assert(::jmc_auto::hdmap::Junction_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Junction.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
