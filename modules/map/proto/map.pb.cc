// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/proto/map.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/map/proto/map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace hdmap {
class ProjectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Projection> {
} _Projection_default_instance_;
class HeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Header> {
} _Header_default_instance_;
class MapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Map> {
} _Map_default_instance_;

namespace protobuf_modules_2fmap_2fproto_2fmap_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Projection, proj_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, projection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, district_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, generation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, rev_major_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, rev_minor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, bottom_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, vendor_),
  0,
  1,
  7,
  2,
  3,
  4,
  5,
  8,
  9,
  10,
  11,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, crosswalk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, junction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, stop_sign_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, signal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, yield_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, overlap_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, clear_area_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, speed_bump_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, road_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, parking_space_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(Projection)},
  { 7, 24, sizeof(Header)},
  { 36, 53, sizeof(Map)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Projection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Map_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/map/proto/map.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _Projection_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Header_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Map_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fclear_5farea_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fcrosswalk_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5foverlap_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fsignal_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fspeed_5fbump_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fyield_5fsign_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::InitDefaults();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto::InitDefaults();
  _Projection_default_instance_.DefaultConstruct();
  _Header_default_instance_.DefaultConstruct();
  _Map_default_instance_.DefaultConstruct();
  _Header_default_instance_.get_mutable()->projection_ = const_cast< ::jmc_auto::hdmap::Projection*>(
      ::jmc_auto::hdmap::Projection::internal_default_instance());
  _Map_default_instance_.get_mutable()->header_ = const_cast< ::jmc_auto::hdmap::Header*>(
      ::jmc_auto::hdmap::Header::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\033modules/map/proto/map.proto\022\016jmc_auto."
      "hdmap\032&modules/map/proto/map_clear_area."
      "proto\032%modules/map/proto/map_crosswalk.p"
      "roto\032$modules/map/proto/map_junction.pro"
      "to\032 modules/map/proto/map_lane.proto\032#mo"
      "dules/map/proto/map_overlap.proto\032\"modul"
      "es/map/proto/map_signal.proto\032&modules/m"
      "ap/proto/map_speed_bump.proto\032%modules/m"
      "ap/proto/map_stop_sign.proto\032&modules/ma"
      "p/proto/map_yield_sign.proto\032 modules/ma"
      "p/proto/map_road.proto\032)modules/map/prot"
      "o/map_parking_space.proto\"\032\n\nProjection\022"
      "\014\n\004proj\030\001 \001(\t\"\355\001\n\006Header\022\017\n\007version\030\001 \001("
      "\014\022\014\n\004date\030\002 \001(\014\022.\n\nprojection\030\003 \001(\0132\032.jm"
      "c_auto.hdmap.Projection\022\020\n\010district\030\004 \001("
      "\014\022\022\n\ngeneration\030\005 \001(\014\022\021\n\trev_major\030\006 \001(\014"
      "\022\021\n\trev_minor\030\007 \001(\014\022\014\n\004left\030\010 \001(\001\022\013\n\003top"
      "\030\t \001(\001\022\r\n\005right\030\n \001(\001\022\016\n\006bottom\030\013 \001(\001\022\016\n"
      "\006vendor\030\014 \001(\014\"\213\004\n\003Map\022&\n\006header\030\001 \001(\0132\026."
      "jmc_auto.hdmap.Header\022,\n\tcrosswalk\030\002 \003(\013"
      "2\031.jmc_auto.hdmap.Crosswalk\022*\n\010junction\030"
      "\003 \003(\0132\030.jmc_auto.hdmap.Junction\022\"\n\004lane\030"
      "\004 \003(\0132\024.jmc_auto.hdmap.Lane\022+\n\tstop_sign"
      "\030\005 \003(\0132\030.jmc_auto.hdmap.StopSign\022&\n\006sign"
      "al\030\006 \003(\0132\026.jmc_auto.hdmap.Signal\022(\n\005yiel"
      "d\030\007 \003(\0132\031.jmc_auto.hdmap.YieldSign\022(\n\007ov"
      "erlap\030\010 \003(\0132\027.jmc_auto.hdmap.Overlap\022-\n\n"
      "clear_area\030\t \003(\0132\031.jmc_auto.hdmap.ClearA"
      "rea\022-\n\nspeed_bump\030\n \003(\0132\031.jmc_auto.hdmap"
      ".SpeedBump\022\"\n\004road\030\013 \003(\0132\024.jmc_auto.hdma"
      "p.Road\0223\n\rparking_space\030\014 \003(\0132\034.jmc_auto"
      ".hdmap.ParkingSpace"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1259);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/map/proto/map.proto", &protobuf_RegisterTypes);
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fclear_5farea_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fcrosswalk_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fjunction_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5flane_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5foverlap_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fsignal_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fspeed_5fbump_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fstop_5fsign_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fyield_5fsign_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5froad_2eproto::AddDescriptors();
  ::jmc_auto::hdmap::protobuf_modules_2fmap_2fproto_2fmap_5fparking_5fspace_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fmap_2fproto_2fmap_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Projection::kProjFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Projection::Projection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2fproto_2fmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.hdmap.Projection)
}
Projection::Projection(const Projection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proj_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proj()) {
    proj_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proj_);
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.hdmap.Projection)
}

void Projection::SharedCtor() {
  _cached_size_ = 0;
  proj_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Projection::~Projection() {
  // @@protoc_insertion_point(destructor:jmc_auto.hdmap.Projection)
  SharedDtor();
}

void Projection::SharedDtor() {
  proj_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Projection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Projection::descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Projection& Projection::default_instance() {
  protobuf_modules_2fmap_2fproto_2fmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

Projection* Projection::New(::google::protobuf::Arena* arena) const {
  Projection* n = new Projection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Projection::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.hdmap.Projection)
  if (has_proj()) {
    GOOGLE_DCHECK(!proj_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*proj_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Projection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.hdmap.Projection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string proj = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proj()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proj().data(), this->proj().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.hdmap.Projection.proj");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.hdmap.Projection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.hdmap.Projection)
  return false;
#undef DO_
}

void Projection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.hdmap.Projection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string proj = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proj().data(), this->proj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.hdmap.Projection.proj");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->proj(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.hdmap.Projection)
}

::google::protobuf::uint8* Projection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.hdmap.Projection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string proj = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proj().data(), this->proj().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.hdmap.Projection.proj");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->proj(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.hdmap.Projection)
  return target;
}

size_t Projection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.hdmap.Projection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string proj = 1;
  if (has_proj()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proj());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Projection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.hdmap.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  const Projection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Projection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.hdmap.Projection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.hdmap.Projection)
    MergeFrom(*source);
  }
}

void Projection::MergeFrom(const Projection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.hdmap.Projection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_proj()) {
    set_has_proj();
    proj_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proj_);
  }
}

void Projection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.hdmap.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Projection::CopyFrom(const Projection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.hdmap.Projection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Projection::IsInitialized() const {
  return true;
}

void Projection::Swap(Projection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Projection::InternalSwap(Projection* other) {
  proj_.Swap(&other->proj_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Projection::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Projection

// optional string proj = 1;
bool Projection::has_proj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Projection::set_has_proj() {
  _has_bits_[0] |= 0x00000001u;
}
void Projection::clear_has_proj() {
  _has_bits_[0] &= ~0x00000001u;
}
void Projection::clear_proj() {
  proj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proj();
}
const ::std::string& Projection::proj() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Projection.proj)
  return proj_.GetNoArena();
}
void Projection::set_proj(const ::std::string& value) {
  set_has_proj();
  proj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Projection.proj)
}
#if LANG_CXX11
void Projection::set_proj(::std::string&& value) {
  set_has_proj();
  proj_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.hdmap.Projection.proj)
}
#endif
void Projection::set_proj(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proj();
  proj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.hdmap.Projection.proj)
}
void Projection::set_proj(const char* value, size_t size) {
  set_has_proj();
  proj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.hdmap.Projection.proj)
}
::std::string* Projection::mutable_proj() {
  set_has_proj();
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Projection.proj)
  return proj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Projection::release_proj() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Projection.proj)
  clear_has_proj();
  return proj_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Projection::set_allocated_proj(::std::string* proj) {
  if (proj != NULL) {
    set_has_proj();
  } else {
    clear_has_proj();
  }
  proj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proj);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Projection.proj)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kVersionFieldNumber;
const int Header::kDateFieldNumber;
const int Header::kProjectionFieldNumber;
const int Header::kDistrictFieldNumber;
const int Header::kGenerationFieldNumber;
const int Header::kRevMajorFieldNumber;
const int Header::kRevMinorFieldNumber;
const int Header::kLeftFieldNumber;
const int Header::kTopFieldNumber;
const int Header::kRightFieldNumber;
const int Header::kBottomFieldNumber;
const int Header::kVendorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2fproto_2fmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.hdmap.Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_date()) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  district_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_district()) {
    district_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.district_);
  }
  generation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_generation()) {
    generation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generation_);
  }
  rev_major_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rev_major()) {
    rev_major_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rev_major_);
  }
  rev_minor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rev_minor()) {
    rev_minor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rev_minor_);
  }
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vendor()) {
    vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
  }
  if (from.has_projection()) {
    projection_ = new ::jmc_auto::hdmap::Projection(*from.projection_);
  } else {
    projection_ = NULL;
  }
  ::memcpy(&left_, &from.left_,
    reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&left_) + sizeof(bottom_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.hdmap.Header)
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  district_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generation_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rev_major_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rev_minor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&projection_, 0, reinterpret_cast<char*>(&bottom_) -
    reinterpret_cast<char*>(&projection_) + sizeof(bottom_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:jmc_auto.hdmap.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  district_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generation_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rev_major_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rev_minor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete projection_;
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  protobuf_modules_2fmap_2fproto_2fmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.hdmap.Header)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_version()) {
      GOOGLE_DCHECK(!version_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*version_.UnsafeRawStringPointer())->clear();
    }
    if (has_date()) {
      GOOGLE_DCHECK(!date_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*date_.UnsafeRawStringPointer())->clear();
    }
    if (has_district()) {
      GOOGLE_DCHECK(!district_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*district_.UnsafeRawStringPointer())->clear();
    }
    if (has_generation()) {
      GOOGLE_DCHECK(!generation_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*generation_.UnsafeRawStringPointer())->clear();
    }
    if (has_rev_major()) {
      GOOGLE_DCHECK(!rev_major_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rev_major_.UnsafeRawStringPointer())->clear();
    }
    if (has_rev_minor()) {
      GOOGLE_DCHECK(!rev_minor_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rev_minor_.UnsafeRawStringPointer())->clear();
    }
    if (has_vendor()) {
      GOOGLE_DCHECK(!vendor_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vendor_.UnsafeRawStringPointer())->clear();
    }
    if (has_projection()) {
      GOOGLE_DCHECK(projection_ != NULL);
      projection_->::jmc_auto::hdmap::Projection::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&left_, 0, reinterpret_cast<char*>(&bottom_) -
      reinterpret_cast<char*>(&left_) + sizeof(bottom_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.hdmap.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes date = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.hdmap.Projection projection = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_projection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes district = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_district()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes generation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_generation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rev_major = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rev_major()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rev_minor = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rev_minor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double left = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double top = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_top();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double right = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double bottom = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_bottom();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes vendor = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vendor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.hdmap.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.hdmap.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.hdmap.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->version(), output);
  }

  // optional bytes date = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->date(), output);
  }

  // optional .jmc_auto.hdmap.Projection projection = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->projection_, output);
  }

  // optional bytes district = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->district(), output);
  }

  // optional bytes generation = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->generation(), output);
  }

  // optional bytes rev_major = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->rev_major(), output);
  }

  // optional bytes rev_minor = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->rev_minor(), output);
  }

  // optional double left = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->left(), output);
  }

  // optional double top = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->top(), output);
  }

  // optional double right = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->right(), output);
  }

  // optional double bottom = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->bottom(), output);
  }

  // optional bytes vendor = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->vendor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.hdmap.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.hdmap.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes version = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->version(), target);
  }

  // optional bytes date = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->date(), target);
  }

  // optional .jmc_auto.hdmap.Projection projection = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->projection_, deterministic, target);
  }

  // optional bytes district = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->district(), target);
  }

  // optional bytes generation = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->generation(), target);
  }

  // optional bytes rev_major = 6;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->rev_major(), target);
  }

  // optional bytes rev_minor = 7;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->rev_minor(), target);
  }

  // optional double left = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->left(), target);
  }

  // optional double top = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->top(), target);
  }

  // optional double right = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->right(), target);
  }

  // optional double bottom = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->bottom(), target);
  }

  // optional bytes vendor = 12;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->vendor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.hdmap.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.hdmap.Header)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }

    // optional bytes date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->date());
    }

    // optional bytes district = 4;
    if (has_district()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->district());
    }

    // optional bytes generation = 5;
    if (has_generation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->generation());
    }

    // optional bytes rev_major = 6;
    if (has_rev_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rev_major());
    }

    // optional bytes rev_minor = 7;
    if (has_rev_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rev_minor());
    }

    // optional bytes vendor = 12;
    if (has_vendor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vendor());
    }

    // optional .jmc_auto.hdmap.Projection projection = 3;
    if (has_projection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->projection_);
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double left = 8;
    if (has_left()) {
      total_size += 1 + 8;
    }

    // optional double top = 9;
    if (has_top()) {
      total_size += 1 + 8;
    }

    // optional double right = 10;
    if (has_right()) {
      total_size += 1 + 8;
    }

    // optional double bottom = 11;
    if (has_bottom()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.hdmap.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.hdmap.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.hdmap.Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.hdmap.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_version();
      version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_district();
      district_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.district_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_generation();
      generation_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generation_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_rev_major();
      rev_major_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rev_major_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_rev_minor();
      rev_minor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rev_minor_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_vendor();
      vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_projection()->::jmc_auto::hdmap::Projection::MergeFrom(from.projection());
    }
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000200u) {
      top_ = from.top_;
    }
    if (cached_has_bits & 0x00000400u) {
      right_ = from.right_;
    }
    if (cached_has_bits & 0x00000800u) {
      bottom_ = from.bottom_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.hdmap.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.hdmap.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  version_.Swap(&other->version_);
  date_.Swap(&other->date_);
  district_.Swap(&other->district_);
  generation_.Swap(&other->generation_);
  rev_major_.Swap(&other->rev_major_);
  rev_minor_.Swap(&other->rev_minor_);
  vendor_.Swap(&other->vendor_);
  std::swap(projection_, other->projection_);
  std::swap(left_, other->left_);
  std::swap(top_, other->top_);
  std::swap(right_, other->right_);
  std::swap(bottom_, other->bottom_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// optional bytes version = 1;
bool Header::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Header::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void Header::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void Header::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
const ::std::string& Header::version() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Header.version)
  return version_.GetNoArena();
}
void Header::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Header.version)
}
#if LANG_CXX11
void Header::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.hdmap.Header.version)
}
#endif
void Header::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.hdmap.Header.version)
}
void Header::set_version(const void* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.hdmap.Header.version)
}
::std::string* Header::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Header.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_version() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Header.version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Header.version)
}

// optional bytes date = 2;
bool Header::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Header::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
void Header::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void Header::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
const ::std::string& Header::date() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Header.date)
  return date_.GetNoArena();
}
void Header::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Header.date)
}
#if LANG_CXX11
void Header::set_date(::std::string&& value) {
  set_has_date();
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.hdmap.Header.date)
}
#endif
void Header::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.hdmap.Header.date)
}
void Header::set_date(const void* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.hdmap.Header.date)
}
::std::string* Header::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Header.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_date() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Header.date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Header.date)
}

// optional .jmc_auto.hdmap.Projection projection = 3;
bool Header::has_projection() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Header::set_has_projection() {
  _has_bits_[0] |= 0x00000080u;
}
void Header::clear_has_projection() {
  _has_bits_[0] &= ~0x00000080u;
}
void Header::clear_projection() {
  if (projection_ != NULL) projection_->::jmc_auto::hdmap::Projection::Clear();
  clear_has_projection();
}
const ::jmc_auto::hdmap::Projection& Header::projection() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Header.projection)
  return projection_ != NULL ? *projection_
                         : *::jmc_auto::hdmap::Projection::internal_default_instance();
}
::jmc_auto::hdmap::Projection* Header::mutable_projection() {
  set_has_projection();
  if (projection_ == NULL) {
    projection_ = new ::jmc_auto::hdmap::Projection;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Header.projection)
  return projection_;
}
::jmc_auto::hdmap::Projection* Header::release_projection() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Header.projection)
  clear_has_projection();
  ::jmc_auto::hdmap::Projection* temp = projection_;
  projection_ = NULL;
  return temp;
}
void Header::set_allocated_projection(::jmc_auto::hdmap::Projection* projection) {
  delete projection_;
  projection_ = projection;
  if (projection) {
    set_has_projection();
  } else {
    clear_has_projection();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Header.projection)
}

// optional bytes district = 4;
bool Header::has_district() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Header::set_has_district() {
  _has_bits_[0] |= 0x00000004u;
}
void Header::clear_has_district() {
  _has_bits_[0] &= ~0x00000004u;
}
void Header::clear_district() {
  district_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_district();
}
const ::std::string& Header::district() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Header.district)
  return district_.GetNoArena();
}
void Header::set_district(const ::std::string& value) {
  set_has_district();
  district_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Header.district)
}
#if LANG_CXX11
void Header::set_district(::std::string&& value) {
  set_has_district();
  district_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.hdmap.Header.district)
}
#endif
void Header::set_district(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_district();
  district_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.hdmap.Header.district)
}
void Header::set_district(const void* value, size_t size) {
  set_has_district();
  district_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.hdmap.Header.district)
}
::std::string* Header::mutable_district() {
  set_has_district();
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Header.district)
  return district_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_district() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Header.district)
  clear_has_district();
  return district_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_district(::std::string* district) {
  if (district != NULL) {
    set_has_district();
  } else {
    clear_has_district();
  }
  district_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), district);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Header.district)
}

// optional bytes generation = 5;
bool Header::has_generation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Header::set_has_generation() {
  _has_bits_[0] |= 0x00000008u;
}
void Header::clear_has_generation() {
  _has_bits_[0] &= ~0x00000008u;
}
void Header::clear_generation() {
  generation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_generation();
}
const ::std::string& Header::generation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Header.generation)
  return generation_.GetNoArena();
}
void Header::set_generation(const ::std::string& value) {
  set_has_generation();
  generation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Header.generation)
}
#if LANG_CXX11
void Header::set_generation(::std::string&& value) {
  set_has_generation();
  generation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.hdmap.Header.generation)
}
#endif
void Header::set_generation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_generation();
  generation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.hdmap.Header.generation)
}
void Header::set_generation(const void* value, size_t size) {
  set_has_generation();
  generation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.hdmap.Header.generation)
}
::std::string* Header::mutable_generation() {
  set_has_generation();
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Header.generation)
  return generation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_generation() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Header.generation)
  clear_has_generation();
  return generation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_generation(::std::string* generation) {
  if (generation != NULL) {
    set_has_generation();
  } else {
    clear_has_generation();
  }
  generation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), generation);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Header.generation)
}

// optional bytes rev_major = 6;
bool Header::has_rev_major() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Header::set_has_rev_major() {
  _has_bits_[0] |= 0x00000010u;
}
void Header::clear_has_rev_major() {
  _has_bits_[0] &= ~0x00000010u;
}
void Header::clear_rev_major() {
  rev_major_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rev_major();
}
const ::std::string& Header::rev_major() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Header.rev_major)
  return rev_major_.GetNoArena();
}
void Header::set_rev_major(const ::std::string& value) {
  set_has_rev_major();
  rev_major_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Header.rev_major)
}
#if LANG_CXX11
void Header::set_rev_major(::std::string&& value) {
  set_has_rev_major();
  rev_major_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.hdmap.Header.rev_major)
}
#endif
void Header::set_rev_major(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rev_major();
  rev_major_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.hdmap.Header.rev_major)
}
void Header::set_rev_major(const void* value, size_t size) {
  set_has_rev_major();
  rev_major_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.hdmap.Header.rev_major)
}
::std::string* Header::mutable_rev_major() {
  set_has_rev_major();
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Header.rev_major)
  return rev_major_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_rev_major() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Header.rev_major)
  clear_has_rev_major();
  return rev_major_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_rev_major(::std::string* rev_major) {
  if (rev_major != NULL) {
    set_has_rev_major();
  } else {
    clear_has_rev_major();
  }
  rev_major_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rev_major);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Header.rev_major)
}

// optional bytes rev_minor = 7;
bool Header::has_rev_minor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Header::set_has_rev_minor() {
  _has_bits_[0] |= 0x00000020u;
}
void Header::clear_has_rev_minor() {
  _has_bits_[0] &= ~0x00000020u;
}
void Header::clear_rev_minor() {
  rev_minor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rev_minor();
}
const ::std::string& Header::rev_minor() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Header.rev_minor)
  return rev_minor_.GetNoArena();
}
void Header::set_rev_minor(const ::std::string& value) {
  set_has_rev_minor();
  rev_minor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Header.rev_minor)
}
#if LANG_CXX11
void Header::set_rev_minor(::std::string&& value) {
  set_has_rev_minor();
  rev_minor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.hdmap.Header.rev_minor)
}
#endif
void Header::set_rev_minor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rev_minor();
  rev_minor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.hdmap.Header.rev_minor)
}
void Header::set_rev_minor(const void* value, size_t size) {
  set_has_rev_minor();
  rev_minor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.hdmap.Header.rev_minor)
}
::std::string* Header::mutable_rev_minor() {
  set_has_rev_minor();
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Header.rev_minor)
  return rev_minor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_rev_minor() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Header.rev_minor)
  clear_has_rev_minor();
  return rev_minor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_rev_minor(::std::string* rev_minor) {
  if (rev_minor != NULL) {
    set_has_rev_minor();
  } else {
    clear_has_rev_minor();
  }
  rev_minor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rev_minor);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Header.rev_minor)
}

// optional double left = 8;
bool Header::has_left() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Header::set_has_left() {
  _has_bits_[0] |= 0x00000100u;
}
void Header::clear_has_left() {
  _has_bits_[0] &= ~0x00000100u;
}
void Header::clear_left() {
  left_ = 0;
  clear_has_left();
}
double Header::left() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Header.left)
  return left_;
}
void Header::set_left(double value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Header.left)
}

// optional double top = 9;
bool Header::has_top() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Header::set_has_top() {
  _has_bits_[0] |= 0x00000200u;
}
void Header::clear_has_top() {
  _has_bits_[0] &= ~0x00000200u;
}
void Header::clear_top() {
  top_ = 0;
  clear_has_top();
}
double Header::top() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Header.top)
  return top_;
}
void Header::set_top(double value) {
  set_has_top();
  top_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Header.top)
}

// optional double right = 10;
bool Header::has_right() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Header::set_has_right() {
  _has_bits_[0] |= 0x00000400u;
}
void Header::clear_has_right() {
  _has_bits_[0] &= ~0x00000400u;
}
void Header::clear_right() {
  right_ = 0;
  clear_has_right();
}
double Header::right() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Header.right)
  return right_;
}
void Header::set_right(double value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Header.right)
}

// optional double bottom = 11;
bool Header::has_bottom() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Header::set_has_bottom() {
  _has_bits_[0] |= 0x00000800u;
}
void Header::clear_has_bottom() {
  _has_bits_[0] &= ~0x00000800u;
}
void Header::clear_bottom() {
  bottom_ = 0;
  clear_has_bottom();
}
double Header::bottom() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Header.bottom)
  return bottom_;
}
void Header::set_bottom(double value) {
  set_has_bottom();
  bottom_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Header.bottom)
}

// optional bytes vendor = 12;
bool Header::has_vendor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Header::set_has_vendor() {
  _has_bits_[0] |= 0x00000040u;
}
void Header::clear_has_vendor() {
  _has_bits_[0] &= ~0x00000040u;
}
void Header::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vendor();
}
const ::std::string& Header::vendor() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Header.vendor)
  return vendor_.GetNoArena();
}
void Header::set_vendor(const ::std::string& value) {
  set_has_vendor();
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.hdmap.Header.vendor)
}
#if LANG_CXX11
void Header::set_vendor(::std::string&& value) {
  set_has_vendor();
  vendor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.hdmap.Header.vendor)
}
#endif
void Header::set_vendor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vendor();
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.hdmap.Header.vendor)
}
void Header::set_vendor(const void* value, size_t size) {
  set_has_vendor();
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.hdmap.Header.vendor)
}
::std::string* Header::mutable_vendor() {
  set_has_vendor();
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Header.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Header::release_vendor() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Header.vendor)
  clear_has_vendor();
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Header::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    set_has_vendor();
  } else {
    clear_has_vendor();
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Header.vendor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Map::kHeaderFieldNumber;
const int Map::kCrosswalkFieldNumber;
const int Map::kJunctionFieldNumber;
const int Map::kLaneFieldNumber;
const int Map::kStopSignFieldNumber;
const int Map::kSignalFieldNumber;
const int Map::kYieldFieldNumber;
const int Map::kOverlapFieldNumber;
const int Map::kClearAreaFieldNumber;
const int Map::kSpeedBumpFieldNumber;
const int Map::kRoadFieldNumber;
const int Map::kParkingSpaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Map::Map()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fmap_2fproto_2fmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.hdmap.Map)
}
Map::Map(const Map& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      crosswalk_(from.crosswalk_),
      junction_(from.junction_),
      lane_(from.lane_),
      stop_sign_(from.stop_sign_),
      signal_(from.signal_),
      yield_(from.yield_),
      overlap_(from.overlap_),
      clear_area_(from.clear_area_),
      speed_bump_(from.speed_bump_),
      road_(from.road_),
      parking_space_(from.parking_space_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::jmc_auto::hdmap::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.hdmap.Map)
}

void Map::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:jmc_auto.hdmap.Map)
  SharedDtor();
}

void Map::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map::descriptor() {
  protobuf_modules_2fmap_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Map& Map::default_instance() {
  protobuf_modules_2fmap_2fproto_2fmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

Map* Map::New(::google::protobuf::Arena* arena) const {
  Map* n = new Map;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.hdmap.Map)
  crosswalk_.Clear();
  junction_.Clear();
  lane_.Clear();
  stop_sign_.Clear();
  signal_.Clear();
  yield_.Clear();
  overlap_.Clear();
  clear_area_.Clear();
  speed_bump_.Clear();
  road_.Clear();
  parking_space_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::jmc_auto::hdmap::Header::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.hdmap.Map)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.hdmap.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Crosswalk crosswalk = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crosswalk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Junction junction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_junction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Lane lane = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.StopSign stop_sign = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stop_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Signal signal = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.YieldSign yield = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yield()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Overlap overlap = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_overlap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.ClearArea clear_area = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clear_area()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.SpeedBump speed_bump = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_speed_bump()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.Road road = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_road()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.hdmap.ParkingSpace parking_space = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parking_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.hdmap.Map)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.hdmap.Map)
  return false;
#undef DO_
}

void Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.hdmap.Map)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .jmc_auto.hdmap.Crosswalk crosswalk = 2;
  for (unsigned int i = 0, n = this->crosswalk_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->crosswalk(i), output);
  }

  // repeated .jmc_auto.hdmap.Junction junction = 3;
  for (unsigned int i = 0, n = this->junction_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->junction(i), output);
  }

  // repeated .jmc_auto.hdmap.Lane lane = 4;
  for (unsigned int i = 0, n = this->lane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lane(i), output);
  }

  // repeated .jmc_auto.hdmap.StopSign stop_sign = 5;
  for (unsigned int i = 0, n = this->stop_sign_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stop_sign(i), output);
  }

  // repeated .jmc_auto.hdmap.Signal signal = 6;
  for (unsigned int i = 0, n = this->signal_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->signal(i), output);
  }

  // repeated .jmc_auto.hdmap.YieldSign yield = 7;
  for (unsigned int i = 0, n = this->yield_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->yield(i), output);
  }

  // repeated .jmc_auto.hdmap.Overlap overlap = 8;
  for (unsigned int i = 0, n = this->overlap_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->overlap(i), output);
  }

  // repeated .jmc_auto.hdmap.ClearArea clear_area = 9;
  for (unsigned int i = 0, n = this->clear_area_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->clear_area(i), output);
  }

  // repeated .jmc_auto.hdmap.SpeedBump speed_bump = 10;
  for (unsigned int i = 0, n = this->speed_bump_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->speed_bump(i), output);
  }

  // repeated .jmc_auto.hdmap.Road road = 11;
  for (unsigned int i = 0, n = this->road_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->road(i), output);
  }

  // repeated .jmc_auto.hdmap.ParkingSpace parking_space = 12;
  for (unsigned int i = 0, n = this->parking_space_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->parking_space(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.hdmap.Map)
}

::google::protobuf::uint8* Map::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.hdmap.Map)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.hdmap.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Crosswalk crosswalk = 2;
  for (unsigned int i = 0, n = this->crosswalk_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->crosswalk(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Junction junction = 3;
  for (unsigned int i = 0, n = this->junction_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->junction(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Lane lane = 4;
  for (unsigned int i = 0, n = this->lane_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->lane(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.StopSign stop_sign = 5;
  for (unsigned int i = 0, n = this->stop_sign_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->stop_sign(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Signal signal = 6;
  for (unsigned int i = 0, n = this->signal_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->signal(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.YieldSign yield = 7;
  for (unsigned int i = 0, n = this->yield_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->yield(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Overlap overlap = 8;
  for (unsigned int i = 0, n = this->overlap_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->overlap(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.ClearArea clear_area = 9;
  for (unsigned int i = 0, n = this->clear_area_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->clear_area(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.SpeedBump speed_bump = 10;
  for (unsigned int i = 0, n = this->speed_bump_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->speed_bump(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.Road road = 11;
  for (unsigned int i = 0, n = this->road_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->road(i), deterministic, target);
  }

  // repeated .jmc_auto.hdmap.ParkingSpace parking_space = 12;
  for (unsigned int i = 0, n = this->parking_space_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->parking_space(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.hdmap.Map)
  return target;
}

size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.hdmap.Map)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.hdmap.Crosswalk crosswalk = 2;
  {
    unsigned int count = this->crosswalk_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crosswalk(i));
    }
  }

  // repeated .jmc_auto.hdmap.Junction junction = 3;
  {
    unsigned int count = this->junction_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->junction(i));
    }
  }

  // repeated .jmc_auto.hdmap.Lane lane = 4;
  {
    unsigned int count = this->lane_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lane(i));
    }
  }

  // repeated .jmc_auto.hdmap.StopSign stop_sign = 5;
  {
    unsigned int count = this->stop_sign_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop_sign(i));
    }
  }

  // repeated .jmc_auto.hdmap.Signal signal = 6;
  {
    unsigned int count = this->signal_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal(i));
    }
  }

  // repeated .jmc_auto.hdmap.YieldSign yield = 7;
  {
    unsigned int count = this->yield_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yield(i));
    }
  }

  // repeated .jmc_auto.hdmap.Overlap overlap = 8;
  {
    unsigned int count = this->overlap_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->overlap(i));
    }
  }

  // repeated .jmc_auto.hdmap.ClearArea clear_area = 9;
  {
    unsigned int count = this->clear_area_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->clear_area(i));
    }
  }

  // repeated .jmc_auto.hdmap.SpeedBump speed_bump = 10;
  {
    unsigned int count = this->speed_bump_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speed_bump(i));
    }
  }

  // repeated .jmc_auto.hdmap.Road road = 11;
  {
    unsigned int count = this->road_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->road(i));
    }
  }

  // repeated .jmc_auto.hdmap.ParkingSpace parking_space = 12;
  {
    unsigned int count = this->parking_space_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parking_space(i));
    }
  }

  // optional .jmc_auto.hdmap.Header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.hdmap.Map)
  GOOGLE_DCHECK_NE(&from, this);
  const Map* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Map>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.hdmap.Map)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.hdmap.Map)
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.hdmap.Map)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  crosswalk_.MergeFrom(from.crosswalk_);
  junction_.MergeFrom(from.junction_);
  lane_.MergeFrom(from.lane_);
  stop_sign_.MergeFrom(from.stop_sign_);
  signal_.MergeFrom(from.signal_);
  yield_.MergeFrom(from.yield_);
  overlap_.MergeFrom(from.overlap_);
  clear_area_.MergeFrom(from.clear_area_);
  speed_bump_.MergeFrom(from.speed_bump_);
  road_.MergeFrom(from.road_);
  parking_space_.MergeFrom(from.parking_space_);
  if (from.has_header()) {
    mutable_header()->::jmc_auto::hdmap::Header::MergeFrom(from.header());
  }
}

void Map::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.hdmap.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.hdmap.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  return true;
}

void Map::Swap(Map* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Map::InternalSwap(Map* other) {
  crosswalk_.InternalSwap(&other->crosswalk_);
  junction_.InternalSwap(&other->junction_);
  lane_.InternalSwap(&other->lane_);
  stop_sign_.InternalSwap(&other->stop_sign_);
  signal_.InternalSwap(&other->signal_);
  yield_.InternalSwap(&other->yield_);
  overlap_.InternalSwap(&other->overlap_);
  clear_area_.InternalSwap(&other->clear_area_);
  speed_bump_.InternalSwap(&other->speed_bump_);
  road_.InternalSwap(&other->road_);
  parking_space_.InternalSwap(&other->parking_space_);
  std::swap(header_, other->header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Map::GetMetadata() const {
  protobuf_modules_2fmap_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fmap_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Map

// optional .jmc_auto.hdmap.Header header = 1;
bool Map::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Map::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Map::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Map::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::hdmap::Header::Clear();
  clear_has_header();
}
const ::jmc_auto::hdmap::Header& Map::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Map.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::hdmap::Header::internal_default_instance();
}
::jmc_auto::hdmap::Header* Map::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::hdmap::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Map.header)
  return header_;
}
::jmc_auto::hdmap::Header* Map::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.hdmap.Map.header)
  clear_has_header();
  ::jmc_auto::hdmap::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Map::set_allocated_header(::jmc_auto::hdmap::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.hdmap.Map.header)
}

// repeated .jmc_auto.hdmap.Crosswalk crosswalk = 2;
int Map::crosswalk_size() const {
  return crosswalk_.size();
}
void Map::clear_crosswalk() {
  crosswalk_.Clear();
}
const ::jmc_auto::hdmap::Crosswalk& Map::crosswalk(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Map.crosswalk)
  return crosswalk_.Get(index);
}
::jmc_auto::hdmap::Crosswalk* Map::mutable_crosswalk(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Map.crosswalk)
  return crosswalk_.Mutable(index);
}
::jmc_auto::hdmap::Crosswalk* Map::add_crosswalk() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Map.crosswalk)
  return crosswalk_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Crosswalk >*
Map::mutable_crosswalk() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Map.crosswalk)
  return &crosswalk_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Crosswalk >&
Map::crosswalk() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Map.crosswalk)
  return crosswalk_;
}

// repeated .jmc_auto.hdmap.Junction junction = 3;
int Map::junction_size() const {
  return junction_.size();
}
void Map::clear_junction() {
  junction_.Clear();
}
const ::jmc_auto::hdmap::Junction& Map::junction(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Map.junction)
  return junction_.Get(index);
}
::jmc_auto::hdmap::Junction* Map::mutable_junction(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Map.junction)
  return junction_.Mutable(index);
}
::jmc_auto::hdmap::Junction* Map::add_junction() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Map.junction)
  return junction_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Junction >*
Map::mutable_junction() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Map.junction)
  return &junction_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Junction >&
Map::junction() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Map.junction)
  return junction_;
}

// repeated .jmc_auto.hdmap.Lane lane = 4;
int Map::lane_size() const {
  return lane_.size();
}
void Map::clear_lane() {
  lane_.Clear();
}
const ::jmc_auto::hdmap::Lane& Map::lane(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Map.lane)
  return lane_.Get(index);
}
::jmc_auto::hdmap::Lane* Map::mutable_lane(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Map.lane)
  return lane_.Mutable(index);
}
::jmc_auto::hdmap::Lane* Map::add_lane() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Map.lane)
  return lane_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Lane >*
Map::mutable_lane() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Map.lane)
  return &lane_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Lane >&
Map::lane() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Map.lane)
  return lane_;
}

// repeated .jmc_auto.hdmap.StopSign stop_sign = 5;
int Map::stop_sign_size() const {
  return stop_sign_.size();
}
void Map::clear_stop_sign() {
  stop_sign_.Clear();
}
const ::jmc_auto::hdmap::StopSign& Map::stop_sign(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Map.stop_sign)
  return stop_sign_.Get(index);
}
::jmc_auto::hdmap::StopSign* Map::mutable_stop_sign(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Map.stop_sign)
  return stop_sign_.Mutable(index);
}
::jmc_auto::hdmap::StopSign* Map::add_stop_sign() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Map.stop_sign)
  return stop_sign_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::StopSign >*
Map::mutable_stop_sign() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Map.stop_sign)
  return &stop_sign_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::StopSign >&
Map::stop_sign() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Map.stop_sign)
  return stop_sign_;
}

// repeated .jmc_auto.hdmap.Signal signal = 6;
int Map::signal_size() const {
  return signal_.size();
}
void Map::clear_signal() {
  signal_.Clear();
}
const ::jmc_auto::hdmap::Signal& Map::signal(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Map.signal)
  return signal_.Get(index);
}
::jmc_auto::hdmap::Signal* Map::mutable_signal(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Map.signal)
  return signal_.Mutable(index);
}
::jmc_auto::hdmap::Signal* Map::add_signal() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Map.signal)
  return signal_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Signal >*
Map::mutable_signal() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Map.signal)
  return &signal_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Signal >&
Map::signal() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Map.signal)
  return signal_;
}

// repeated .jmc_auto.hdmap.YieldSign yield = 7;
int Map::yield_size() const {
  return yield_.size();
}
void Map::clear_yield() {
  yield_.Clear();
}
const ::jmc_auto::hdmap::YieldSign& Map::yield(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Map.yield)
  return yield_.Get(index);
}
::jmc_auto::hdmap::YieldSign* Map::mutable_yield(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Map.yield)
  return yield_.Mutable(index);
}
::jmc_auto::hdmap::YieldSign* Map::add_yield() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Map.yield)
  return yield_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::YieldSign >*
Map::mutable_yield() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Map.yield)
  return &yield_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::YieldSign >&
Map::yield() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Map.yield)
  return yield_;
}

// repeated .jmc_auto.hdmap.Overlap overlap = 8;
int Map::overlap_size() const {
  return overlap_.size();
}
void Map::clear_overlap() {
  overlap_.Clear();
}
const ::jmc_auto::hdmap::Overlap& Map::overlap(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Map.overlap)
  return overlap_.Get(index);
}
::jmc_auto::hdmap::Overlap* Map::mutable_overlap(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Map.overlap)
  return overlap_.Mutable(index);
}
::jmc_auto::hdmap::Overlap* Map::add_overlap() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Map.overlap)
  return overlap_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Overlap >*
Map::mutable_overlap() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Map.overlap)
  return &overlap_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Overlap >&
Map::overlap() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Map.overlap)
  return overlap_;
}

// repeated .jmc_auto.hdmap.ClearArea clear_area = 9;
int Map::clear_area_size() const {
  return clear_area_.size();
}
void Map::clear_clear_area() {
  clear_area_.Clear();
}
const ::jmc_auto::hdmap::ClearArea& Map::clear_area(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Map.clear_area)
  return clear_area_.Get(index);
}
::jmc_auto::hdmap::ClearArea* Map::mutable_clear_area(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Map.clear_area)
  return clear_area_.Mutable(index);
}
::jmc_auto::hdmap::ClearArea* Map::add_clear_area() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Map.clear_area)
  return clear_area_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::ClearArea >*
Map::mutable_clear_area() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Map.clear_area)
  return &clear_area_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::ClearArea >&
Map::clear_area() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Map.clear_area)
  return clear_area_;
}

// repeated .jmc_auto.hdmap.SpeedBump speed_bump = 10;
int Map::speed_bump_size() const {
  return speed_bump_.size();
}
void Map::clear_speed_bump() {
  speed_bump_.Clear();
}
const ::jmc_auto::hdmap::SpeedBump& Map::speed_bump(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Map.speed_bump)
  return speed_bump_.Get(index);
}
::jmc_auto::hdmap::SpeedBump* Map::mutable_speed_bump(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Map.speed_bump)
  return speed_bump_.Mutable(index);
}
::jmc_auto::hdmap::SpeedBump* Map::add_speed_bump() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Map.speed_bump)
  return speed_bump_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::SpeedBump >*
Map::mutable_speed_bump() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Map.speed_bump)
  return &speed_bump_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::SpeedBump >&
Map::speed_bump() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Map.speed_bump)
  return speed_bump_;
}

// repeated .jmc_auto.hdmap.Road road = 11;
int Map::road_size() const {
  return road_.size();
}
void Map::clear_road() {
  road_.Clear();
}
const ::jmc_auto::hdmap::Road& Map::road(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Map.road)
  return road_.Get(index);
}
::jmc_auto::hdmap::Road* Map::mutable_road(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Map.road)
  return road_.Mutable(index);
}
::jmc_auto::hdmap::Road* Map::add_road() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Map.road)
  return road_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Road >*
Map::mutable_road() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Map.road)
  return &road_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::Road >&
Map::road() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Map.road)
  return road_;
}

// repeated .jmc_auto.hdmap.ParkingSpace parking_space = 12;
int Map::parking_space_size() const {
  return parking_space_.size();
}
void Map::clear_parking_space() {
  parking_space_.Clear();
}
const ::jmc_auto::hdmap::ParkingSpace& Map::parking_space(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.hdmap.Map.parking_space)
  return parking_space_.Get(index);
}
::jmc_auto::hdmap::ParkingSpace* Map::mutable_parking_space(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.hdmap.Map.parking_space)
  return parking_space_.Mutable(index);
}
::jmc_auto::hdmap::ParkingSpace* Map::add_parking_space() {
  // @@protoc_insertion_point(field_add:jmc_auto.hdmap.Map.parking_space)
  return parking_space_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::ParkingSpace >*
Map::mutable_parking_space() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.hdmap.Map.parking_space)
  return &parking_space_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::hdmap::ParkingSpace >&
Map::parking_space() const {
  // @@protoc_insertion_point(field_list:jmc_auto.hdmap.Map.parking_space)
  return parking_space_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
