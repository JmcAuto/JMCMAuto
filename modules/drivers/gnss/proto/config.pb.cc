// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/drivers/gnss/proto/config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace drivers {
namespace gnss {
namespace config {
class Stream_SerialDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Stream_Serial> {
} _Stream_Serial_default_instance_;
class Stream_TcpDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Stream_Tcp> {
} _Stream_Tcp_default_instance_;
class Stream_UdpDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Stream_Udp> {
} _Stream_Udp_default_instance_;
class Stream_NtripDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Stream_Ntrip> {
} _Stream_Ntrip_default_instance_;
class StreamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Stream> {
  public:
  const ::jmc_auto::drivers::gnss::config::Stream_Serial* serial_;
  const ::jmc_auto::drivers::gnss::config::Stream_Tcp* tcp_;
  const ::jmc_auto::drivers::gnss::config::Stream_Udp* udp_;
  const ::jmc_auto::drivers::gnss::config::Stream_Ntrip* ntrip_;
} _Stream_default_instance_;
class NovatelConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NovatelConfig> {
} _NovatelConfig_default_instance_;
class NewtonM2ConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NewtonM2Config> {
} _NewtonM2Config_default_instance_;
class UbloxConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UbloxConfig> {
} _UbloxConfig_default_instance_;
class TFDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TF> {
} _TF_default_instance_;
class ConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Config> {
  public:
  const ::jmc_auto::drivers::gnss::config::NovatelConfig* novatel_config_;
  const ::jmc_auto::drivers::gnss::config::UbloxConfig* ublox_config_;
  const ::jmc_auto::drivers::gnss::config::NewtonM2Config* newtonm2_config_;
} _Config_default_instance_;

namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Serial, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Serial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Serial, device_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Serial, baud_rate_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Tcp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Tcp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Tcp, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Tcp, port_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Udp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Udp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Udp, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Udp, port_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Ntrip, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Ntrip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Ntrip, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Ntrip, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Ntrip, mount_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Ntrip, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Ntrip, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream_Ntrip, timeout_s_),
  0,
  4,
  1,
  2,
  3,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, format_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Stream_default_instance_), serial_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Stream_default_instance_), tcp_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Stream_default_instance_), udp_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Stream_default_instance_), ntrip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, push_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stream, type_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NovatelConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NovatelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NovatelConfig, imu_orientation_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewtonM2Config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewtonM2Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewtonM2Config, imu_orientation_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UbloxConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UbloxConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TF, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TF, frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TF, child_frame_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, rtk_from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, rtk_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, login_commands_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, logout_commands_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Config_default_instance_), novatel_config_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Config_default_instance_), ublox_config_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Config_default_instance_), newtonm2_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, rtk_solution_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, imu_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, proj4_text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, tf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, wheel_parameters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, device_config_),
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  7,
  8,
  0,
  6,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(Stream_Serial)},
  { 9, 16, sizeof(Stream_Tcp)},
  { 18, 25, sizeof(Stream_Udp)},
  { 27, 38, sizeof(Stream_Ntrip)},
  { 44, 56, sizeof(Stream)},
  { 62, 68, sizeof(NovatelConfig)},
  { 69, 75, sizeof(NewtonM2Config)},
  { 76, 81, sizeof(UbloxConfig)},
  { 81, 88, sizeof(TF)},
  { 90, 110, sizeof(Config)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Stream_Serial_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Stream_Tcp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Stream_Udp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Stream_Ntrip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Stream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NovatelConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NewtonM2Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UbloxConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TF_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Config_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/drivers/gnss/proto/config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _Stream_Serial_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Stream_Tcp_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Stream_Udp_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Stream_Ntrip_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Stream_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _NovatelConfig_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _NewtonM2Config_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _UbloxConfig_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _TF_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  TF::_default_frame_id_.Shutdown();
  TF::_default_child_frame_id_.Shutdown();
  _Config_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Stream_Serial_default_instance_.DefaultConstruct();
  _Stream_Tcp_default_instance_.DefaultConstruct();
  _Stream_Udp_default_instance_.DefaultConstruct();
  _Stream_Ntrip_default_instance_.DefaultConstruct();
  _Stream_default_instance_.DefaultConstruct();
  _NovatelConfig_default_instance_.DefaultConstruct();
  _NewtonM2Config_default_instance_.DefaultConstruct();
  _UbloxConfig_default_instance_.DefaultConstruct();
  TF::_default_frame_id_.DefaultConstruct();
  *TF::_default_frame_id_.get_mutable() = ::std::string("world", 5);
  TF::_default_child_frame_id_.DefaultConstruct();
  *TF::_default_child_frame_id_.get_mutable() = ::std::string("novatel", 7);
  _TF_default_instance_.DefaultConstruct();
  _Config_default_instance_.DefaultConstruct();
  _Stream_default_instance_.serial_ = const_cast< ::jmc_auto::drivers::gnss::config::Stream_Serial*>(
      ::jmc_auto::drivers::gnss::config::Stream_Serial::internal_default_instance());
  _Stream_default_instance_.tcp_ = const_cast< ::jmc_auto::drivers::gnss::config::Stream_Tcp*>(
      ::jmc_auto::drivers::gnss::config::Stream_Tcp::internal_default_instance());
  _Stream_default_instance_.udp_ = const_cast< ::jmc_auto::drivers::gnss::config::Stream_Udp*>(
      ::jmc_auto::drivers::gnss::config::Stream_Udp::internal_default_instance());
  _Stream_default_instance_.ntrip_ = const_cast< ::jmc_auto::drivers::gnss::config::Stream_Ntrip*>(
      ::jmc_auto::drivers::gnss::config::Stream_Ntrip::internal_default_instance());
  _Config_default_instance_.get_mutable()->data_ = const_cast< ::jmc_auto::drivers::gnss::config::Stream*>(
      ::jmc_auto::drivers::gnss::config::Stream::internal_default_instance());
  _Config_default_instance_.get_mutable()->command_ = const_cast< ::jmc_auto::drivers::gnss::config::Stream*>(
      ::jmc_auto::drivers::gnss::config::Stream::internal_default_instance());
  _Config_default_instance_.get_mutable()->rtk_from_ = const_cast< ::jmc_auto::drivers::gnss::config::Stream*>(
      ::jmc_auto::drivers::gnss::config::Stream::internal_default_instance());
  _Config_default_instance_.get_mutable()->rtk_to_ = const_cast< ::jmc_auto::drivers::gnss::config::Stream*>(
      ::jmc_auto::drivers::gnss::config::Stream::internal_default_instance());
  _Config_default_instance_.novatel_config_ = const_cast< ::jmc_auto::drivers::gnss::config::NovatelConfig*>(
      ::jmc_auto::drivers::gnss::config::NovatelConfig::internal_default_instance());
  _Config_default_instance_.ublox_config_ = const_cast< ::jmc_auto::drivers::gnss::config::UbloxConfig*>(
      ::jmc_auto::drivers::gnss::config::UbloxConfig::internal_default_instance());
  _Config_default_instance_.newtonm2_config_ = const_cast< ::jmc_auto::drivers::gnss::config::NewtonM2Config*>(
      ::jmc_auto::drivers::gnss::config::NewtonM2Config::internal_default_instance());
  _Config_default_instance_.get_mutable()->tf_ = const_cast< ::jmc_auto::drivers::gnss::config::TF*>(
      ::jmc_auto::drivers::gnss::config::TF::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\'modules/drivers/gnss/proto/config.prot"
      "o\022\034jmc_auto.drivers.gnss.config\"\203\006\n\006Stre"
      "am\022;\n\006format\030\001 \001(\0162+.jmc_auto.drivers.gn"
      "ss.config.Stream.Format\022=\n\006serial\030\002 \001(\0132"
      "+.jmc_auto.drivers.gnss.config.Stream.Se"
      "rialH\000\0227\n\003tcp\030\003 \001(\0132(.jmc_auto.drivers.g"
      "nss.config.Stream.TcpH\000\0227\n\003udp\030\004 \001(\0132(.j"
      "mc_auto.drivers.gnss.config.Stream.UdpH\000"
      "\022;\n\005ntrip\030\005 \001(\0132*.jmc_auto.drivers.gnss."
      "config.Stream.NtripH\000\022\025\n\rpush_location\030\006"
      " \001(\010\0321\n\006Serial\022\016\n\006device\030\001 \001(\014\022\027\n\tbaud_r"
      "ate\030\002 \001(\005:\0049600\032*\n\003Tcp\022\017\n\007address\030\001 \001(\014\022"
      "\022\n\004port\030\002 \001(\005:\0043001\032*\n\003Udp\022\017\n\007address\030\001 "
      "\001(\014\022\022\n\004port\030\002 \001(\005:\0043001\032x\n\005Ntrip\022\017\n\007addr"
      "ess\030\001 \001(\014\022\022\n\004port\030\002 \001(\005:\0042101\022\023\n\013mount_p"
      "oint\030\003 \001(\014\022\014\n\004user\030\004 \001(\014\022\020\n\010password\030\005 \001"
      "(\014\022\025\n\ttimeout_s\030\006 \001(\r:\00230\"\251\001\n\006Format\022\013\n\007"
      "UNKNOWN\020\000\022\010\n\004NMEA\020\001\022\013\n\007RTCM_V2\020\002\022\013\n\007RTCM"
      "_V3\020\003\022\020\n\014NOVATEL_TEXT\020\n\022\022\n\016NOVATEL_BINAR"
      "Y\020\013\022\016\n\nUBLOX_TEXT\020\024\022\020\n\014UBLOX_BINARY\020\025\022\021\n"
      "\rNEWTONM2_TEXT\020\036\022\023\n\017NEWTONM2_BINARY\020\037B\006\n"
      "\004type\"+\n\rNovatelConfig\022\032\n\017imu_orientatio"
      "n\030\001 \001(\005:\0015\",\n\016NewtonM2Config\022\032\n\017imu_orie"
      "ntation\030\001 \001(\005:\0015\"\r\n\013UbloxConfig\">\n\002TF\022\027\n"
      "\010frame_id\030\001 \001(\t:\005world\022\037\n\016child_frame_id"
      "\030\002 \001(\t:\007novatel\"\245\006\n\006Config\0222\n\004data\030\001 \001(\013"
      "2$.jmc_auto.drivers.gnss.config.Stream\0225"
      "\n\007command\030\002 \001(\0132$.jmc_auto.drivers.gnss."
      "config.Stream\0226\n\010rtk_from\030\003 \001(\0132$.jmc_au"
      "to.drivers.gnss.config.Stream\0224\n\006rtk_to\030"
      "\004 \001(\0132$.jmc_auto.drivers.gnss.config.Str"
      "eam\022\026\n\016login_commands\030\005 \003(\014\022\027\n\017logout_co"
      "mmands\030\006 \003(\014\022E\n\016novatel_config\030\007 \001(\0132+.j"
      "mc_auto.drivers.gnss.config.NovatelConfi"
      "gH\000\022A\n\014ublox_config\030\010 \001(\0132).jmc_auto.dri"
      "vers.gnss.config.UbloxConfigH\000\022G\n\017newton"
      "m2_config\030\017 \001(\0132,.jmc_auto.drivers.gnss."
      "config.NewtonM2ConfigH\000\022O\n\021rtk_solution_"
      "type\030\t \001(\01624.jmc_auto.drivers.gnss.confi"
      "g.Config.RtkSolutionType\0227\n\010imu_type\030\n \001"
      "(\0162%.jmc_auto.drivers.gnss.config.ImuTyp"
      "e\022\022\n\nproj4_text\030\013 \001(\t\022,\n\002tf\030\014 \001(\0132 .jmc_"
      "auto.drivers.gnss.config.TF\022\030\n\020wheel_par"
      "ameters\030\r \001(\t\"G\n\017RtkSolutionType\022\031\n\025RTK_"
      "RECEIVER_SOLUTION\020\001\022\031\n\025RTK_SOFTWARE_SOLU"
      "TION\020\002B\017\n\rdevice_config*\230\001\n\007ImuType\022\r\n\tI"
      "MAR_FSAS\020\r\022\013\n\007ISA100C\020\032\022\r\n\tADIS16488\020\037\022\013"
      "\n\007STIM300\020 \022\n\n\006ISA100\020\"\022\020\n\014ISA100_400HZ\020"
      "&\022\021\n\rISA100C_400HZ\020\'\022\t\n\005G320N\020(\022\016\n\nCPT_X"
      "W5651\020)\022\t\n\005UM442\020*"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1978);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/gnss/proto/config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto

const ::google::protobuf::EnumDescriptor* Stream_Format_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_enum_descriptors[0];
}
bool Stream_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 20:
    case 21:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Stream_Format Stream::UNKNOWN;
const Stream_Format Stream::NMEA;
const Stream_Format Stream::RTCM_V2;
const Stream_Format Stream::RTCM_V3;
const Stream_Format Stream::NOVATEL_TEXT;
const Stream_Format Stream::NOVATEL_BINARY;
const Stream_Format Stream::UBLOX_TEXT;
const Stream_Format Stream::UBLOX_BINARY;
const Stream_Format Stream::NEWTONM2_TEXT;
const Stream_Format Stream::NEWTONM2_BINARY;
const Stream_Format Stream::Format_MIN;
const Stream_Format Stream::Format_MAX;
const int Stream::Format_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Config_RtkSolutionType_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_enum_descriptors[1];
}
bool Config_RtkSolutionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Config_RtkSolutionType Config::RTK_RECEIVER_SOLUTION;
const Config_RtkSolutionType Config::RTK_SOFTWARE_SOLUTION;
const Config_RtkSolutionType Config::RtkSolutionType_MIN;
const Config_RtkSolutionType Config::RtkSolutionType_MAX;
const int Config::RtkSolutionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ImuType_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_enum_descriptors[2];
}
bool ImuType_IsValid(int value) {
  switch (value) {
    case 13:
    case 26:
    case 31:
    case 32:
    case 34:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stream_Serial::kDeviceFieldNumber;
const int Stream_Serial::kBaudRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stream_Serial::Stream_Serial()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.config.Stream.Serial)
}
Stream_Serial::Stream_Serial(const Stream_Serial& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device()) {
    device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  baud_rate_ = from.baud_rate_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.config.Stream.Serial)
}

void Stream_Serial::SharedCtor() {
  _cached_size_ = 0;
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  baud_rate_ = 9600;
}

Stream_Serial::~Stream_Serial() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.config.Stream.Serial)
  SharedDtor();
}

void Stream_Serial::SharedDtor() {
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Stream_Serial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stream_Serial::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stream_Serial& Stream_Serial::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Stream_Serial* Stream_Serial::New(::google::protobuf::Arena* arena) const {
  Stream_Serial* n = new Stream_Serial;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stream_Serial::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.config.Stream.Serial)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_device()) {
      GOOGLE_DCHECK(!device_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*device_.UnsafeRawStringPointer())->clear();
    }
    baud_rate_ = 9600;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stream_Serial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.config.Stream.Serial)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes device = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 baud_rate = 2 [default = 9600];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_baud_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baud_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.config.Stream.Serial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.config.Stream.Serial)
  return false;
#undef DO_
}

void Stream_Serial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.config.Stream.Serial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes device = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->device(), output);
  }

  // optional int32 baud_rate = 2 [default = 9600];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->baud_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.config.Stream.Serial)
}

::google::protobuf::uint8* Stream_Serial::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.config.Stream.Serial)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes device = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->device(), target);
  }

  // optional int32 baud_rate = 2 [default = 9600];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->baud_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.config.Stream.Serial)
  return target;
}

size_t Stream_Serial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.config.Stream.Serial)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->device());
    }

    // optional int32 baud_rate = 2 [default = 9600];
    if (has_baud_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baud_rate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stream_Serial::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.config.Stream.Serial)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream_Serial* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stream_Serial>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.config.Stream.Serial)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.config.Stream.Serial)
    MergeFrom(*source);
  }
}

void Stream_Serial::MergeFrom(const Stream_Serial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.config.Stream.Serial)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_device();
      device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
    }
    if (cached_has_bits & 0x00000002u) {
      baud_rate_ = from.baud_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stream_Serial::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.config.Stream.Serial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream_Serial::CopyFrom(const Stream_Serial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.config.Stream.Serial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Serial::IsInitialized() const {
  return true;
}

void Stream_Serial::Swap(Stream_Serial* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stream_Serial::InternalSwap(Stream_Serial* other) {
  device_.Swap(&other->device_);
  std::swap(baud_rate_, other->baud_rate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stream_Serial::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stream_Serial

// optional bytes device = 1;
bool Stream_Serial::has_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Stream_Serial::set_has_device() {
  _has_bits_[0] |= 0x00000001u;
}
void Stream_Serial::clear_has_device() {
  _has_bits_[0] &= ~0x00000001u;
}
void Stream_Serial::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device();
}
const ::std::string& Stream_Serial::device() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.Serial.device)
  return device_.GetNoArena();
}
void Stream_Serial::set_device(const ::std::string& value) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Stream.Serial.device)
}
#if LANG_CXX11
void Stream_Serial::set_device(::std::string&& value) {
  set_has_device();
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.gnss.config.Stream.Serial.device)
}
#endif
void Stream_Serial::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.gnss.config.Stream.Serial.device)
}
void Stream_Serial::set_device(const void* value, size_t size) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.gnss.config.Stream.Serial.device)
}
::std::string* Stream_Serial::mutable_device() {
  set_has_device();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Stream.Serial.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Stream_Serial::release_device() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Stream.Serial.device)
  clear_has_device();
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Stream_Serial::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    set_has_device();
  } else {
    clear_has_device();
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Stream.Serial.device)
}

// optional int32 baud_rate = 2 [default = 9600];
bool Stream_Serial::has_baud_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Stream_Serial::set_has_baud_rate() {
  _has_bits_[0] |= 0x00000002u;
}
void Stream_Serial::clear_has_baud_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
void Stream_Serial::clear_baud_rate() {
  baud_rate_ = 9600;
  clear_has_baud_rate();
}
::google::protobuf::int32 Stream_Serial::baud_rate() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.Serial.baud_rate)
  return baud_rate_;
}
void Stream_Serial::set_baud_rate(::google::protobuf::int32 value) {
  set_has_baud_rate();
  baud_rate_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Stream.Serial.baud_rate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stream_Tcp::kAddressFieldNumber;
const int Stream_Tcp::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stream_Tcp::Stream_Tcp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.config.Stream.Tcp)
}
Stream_Tcp::Stream_Tcp(const Stream_Tcp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.config.Stream.Tcp)
}

void Stream_Tcp::SharedCtor() {
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 3001;
}

Stream_Tcp::~Stream_Tcp() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.config.Stream.Tcp)
  SharedDtor();
}

void Stream_Tcp::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Stream_Tcp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stream_Tcp::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stream_Tcp& Stream_Tcp::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Stream_Tcp* Stream_Tcp::New(::google::protobuf::Arena* arena) const {
  Stream_Tcp* n = new Stream_Tcp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stream_Tcp::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.config.Stream.Tcp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_address()) {
      GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*address_.UnsafeRawStringPointer())->clear();
    }
    port_ = 3001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stream_Tcp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.config.Stream.Tcp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 port = 2 [default = 3001];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.config.Stream.Tcp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.config.Stream.Tcp)
  return false;
#undef DO_
}

void Stream_Tcp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.config.Stream.Tcp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // optional int32 port = 2 [default = 3001];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.config.Stream.Tcp)
}

::google::protobuf::uint8* Stream_Tcp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.config.Stream.Tcp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->address(), target);
  }

  // optional int32 port = 2 [default = 3001];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.config.Stream.Tcp)
  return target;
}

size_t Stream_Tcp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.config.Stream.Tcp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->address());
    }

    // optional int32 port = 2 [default = 3001];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stream_Tcp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.config.Stream.Tcp)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream_Tcp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stream_Tcp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.config.Stream.Tcp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.config.Stream.Tcp)
    MergeFrom(*source);
  }
}

void Stream_Tcp::MergeFrom(const Stream_Tcp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.config.Stream.Tcp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stream_Tcp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.config.Stream.Tcp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream_Tcp::CopyFrom(const Stream_Tcp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.config.Stream.Tcp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Tcp::IsInitialized() const {
  return true;
}

void Stream_Tcp::Swap(Stream_Tcp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stream_Tcp::InternalSwap(Stream_Tcp* other) {
  address_.Swap(&other->address_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stream_Tcp::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stream_Tcp

// optional bytes address = 1;
bool Stream_Tcp::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Stream_Tcp::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
void Stream_Tcp::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void Stream_Tcp::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& Stream_Tcp::address() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.Tcp.address)
  return address_.GetNoArena();
}
void Stream_Tcp::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Stream.Tcp.address)
}
#if LANG_CXX11
void Stream_Tcp::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.gnss.config.Stream.Tcp.address)
}
#endif
void Stream_Tcp::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.gnss.config.Stream.Tcp.address)
}
void Stream_Tcp::set_address(const void* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.gnss.config.Stream.Tcp.address)
}
::std::string* Stream_Tcp::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Stream.Tcp.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Stream_Tcp::release_address() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Stream.Tcp.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Stream_Tcp::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Stream.Tcp.address)
}

// optional int32 port = 2 [default = 3001];
bool Stream_Tcp::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Stream_Tcp::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void Stream_Tcp::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void Stream_Tcp::clear_port() {
  port_ = 3001;
  clear_has_port();
}
::google::protobuf::int32 Stream_Tcp::port() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.Tcp.port)
  return port_;
}
void Stream_Tcp::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Stream.Tcp.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stream_Udp::kAddressFieldNumber;
const int Stream_Udp::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stream_Udp::Stream_Udp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.config.Stream.Udp)
}
Stream_Udp::Stream_Udp(const Stream_Udp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.config.Stream.Udp)
}

void Stream_Udp::SharedCtor() {
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 3001;
}

Stream_Udp::~Stream_Udp() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.config.Stream.Udp)
  SharedDtor();
}

void Stream_Udp::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Stream_Udp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stream_Udp::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stream_Udp& Stream_Udp::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Stream_Udp* Stream_Udp::New(::google::protobuf::Arena* arena) const {
  Stream_Udp* n = new Stream_Udp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stream_Udp::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.config.Stream.Udp)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_address()) {
      GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*address_.UnsafeRawStringPointer())->clear();
    }
    port_ = 3001;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stream_Udp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.config.Stream.Udp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 port = 2 [default = 3001];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.config.Stream.Udp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.config.Stream.Udp)
  return false;
#undef DO_
}

void Stream_Udp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.config.Stream.Udp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // optional int32 port = 2 [default = 3001];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.config.Stream.Udp)
}

::google::protobuf::uint8* Stream_Udp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.config.Stream.Udp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->address(), target);
  }

  // optional int32 port = 2 [default = 3001];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.config.Stream.Udp)
  return target;
}

size_t Stream_Udp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.config.Stream.Udp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->address());
    }

    // optional int32 port = 2 [default = 3001];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stream_Udp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.config.Stream.Udp)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream_Udp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stream_Udp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.config.Stream.Udp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.config.Stream.Udp)
    MergeFrom(*source);
  }
}

void Stream_Udp::MergeFrom(const Stream_Udp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.config.Stream.Udp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stream_Udp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.config.Stream.Udp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream_Udp::CopyFrom(const Stream_Udp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.config.Stream.Udp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Udp::IsInitialized() const {
  return true;
}

void Stream_Udp::Swap(Stream_Udp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stream_Udp::InternalSwap(Stream_Udp* other) {
  address_.Swap(&other->address_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stream_Udp::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stream_Udp

// optional bytes address = 1;
bool Stream_Udp::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Stream_Udp::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
void Stream_Udp::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void Stream_Udp::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& Stream_Udp::address() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.Udp.address)
  return address_.GetNoArena();
}
void Stream_Udp::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Stream.Udp.address)
}
#if LANG_CXX11
void Stream_Udp::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.gnss.config.Stream.Udp.address)
}
#endif
void Stream_Udp::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.gnss.config.Stream.Udp.address)
}
void Stream_Udp::set_address(const void* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.gnss.config.Stream.Udp.address)
}
::std::string* Stream_Udp::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Stream.Udp.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Stream_Udp::release_address() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Stream.Udp.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Stream_Udp::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Stream.Udp.address)
}

// optional int32 port = 2 [default = 3001];
bool Stream_Udp::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Stream_Udp::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void Stream_Udp::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void Stream_Udp::clear_port() {
  port_ = 3001;
  clear_has_port();
}
::google::protobuf::int32 Stream_Udp::port() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.Udp.port)
  return port_;
}
void Stream_Udp::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Stream.Udp.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stream_Ntrip::kAddressFieldNumber;
const int Stream_Ntrip::kPortFieldNumber;
const int Stream_Ntrip::kMountPointFieldNumber;
const int Stream_Ntrip::kUserFieldNumber;
const int Stream_Ntrip::kPasswordFieldNumber;
const int Stream_Ntrip::kTimeoutSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stream_Ntrip::Stream_Ntrip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.config.Stream.Ntrip)
}
Stream_Ntrip::Stream_Ntrip(const Stream_Ntrip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  mount_point_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mount_point()) {
    mount_point_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mount_point_);
  }
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&port_, &from.port_,
    reinterpret_cast<char*>(&timeout_s_) -
    reinterpret_cast<char*>(&port_) + sizeof(timeout_s_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.config.Stream.Ntrip)
}

void Stream_Ntrip::SharedCtor() {
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mount_point_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 2101;
  timeout_s_ = 30u;
}

Stream_Ntrip::~Stream_Ntrip() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.config.Stream.Ntrip)
  SharedDtor();
}

void Stream_Ntrip::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mount_point_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Stream_Ntrip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stream_Ntrip::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stream_Ntrip& Stream_Ntrip::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Stream_Ntrip* Stream_Ntrip::New(::google::protobuf::Arena* arena) const {
  Stream_Ntrip* n = new Stream_Ntrip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stream_Ntrip::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.config.Stream.Ntrip)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_address()) {
      GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*address_.UnsafeRawStringPointer())->clear();
    }
    if (has_mount_point()) {
      GOOGLE_DCHECK(!mount_point_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mount_point_.UnsafeRawStringPointer())->clear();
    }
    if (has_user()) {
      GOOGLE_DCHECK(!user_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_.UnsafeRawStringPointer())->clear();
    }
    if (has_password()) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    port_ = 2101;
    timeout_s_ = 30u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stream_Ntrip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.config.Stream.Ntrip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 port = 2 [default = 2101];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes mount_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mount_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes user = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes password = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout_s = 6 [default = 30];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_timeout_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.config.Stream.Ntrip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.config.Stream.Ntrip)
  return false;
#undef DO_
}

void Stream_Ntrip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.config.Stream.Ntrip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // optional int32 port = 2 [default = 2101];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional bytes mount_point = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->mount_point(), output);
  }

  // optional bytes user = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->user(), output);
  }

  // optional bytes password = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->password(), output);
  }

  // optional uint32 timeout_s = 6 [default = 30];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->timeout_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.config.Stream.Ntrip)
}

::google::protobuf::uint8* Stream_Ntrip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.config.Stream.Ntrip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes address = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->address(), target);
  }

  // optional int32 port = 2 [default = 2101];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional bytes mount_point = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->mount_point(), target);
  }

  // optional bytes user = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->user(), target);
  }

  // optional bytes password = 5;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->password(), target);
  }

  // optional uint32 timeout_s = 6 [default = 30];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->timeout_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.config.Stream.Ntrip)
  return target;
}

size_t Stream_Ntrip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.config.Stream.Ntrip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->address());
    }

    // optional bytes mount_point = 3;
    if (has_mount_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mount_point());
    }

    // optional bytes user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user());
    }

    // optional bytes password = 5;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }

    // optional int32 port = 2 [default = 2101];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional uint32 timeout_s = 6 [default = 30];
    if (has_timeout_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeout_s());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stream_Ntrip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.config.Stream.Ntrip)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream_Ntrip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stream_Ntrip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.config.Stream.Ntrip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.config.Stream.Ntrip)
    MergeFrom(*source);
  }
}

void Stream_Ntrip::MergeFrom(const Stream_Ntrip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.config.Stream.Ntrip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mount_point();
      mount_point_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mount_point_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_user();
      user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000010u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000020u) {
      timeout_s_ = from.timeout_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stream_Ntrip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.config.Stream.Ntrip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream_Ntrip::CopyFrom(const Stream_Ntrip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.config.Stream.Ntrip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream_Ntrip::IsInitialized() const {
  return true;
}

void Stream_Ntrip::Swap(Stream_Ntrip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stream_Ntrip::InternalSwap(Stream_Ntrip* other) {
  address_.Swap(&other->address_);
  mount_point_.Swap(&other->mount_point_);
  user_.Swap(&other->user_);
  password_.Swap(&other->password_);
  std::swap(port_, other->port_);
  std::swap(timeout_s_, other->timeout_s_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stream_Ntrip::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stream_Ntrip

// optional bytes address = 1;
bool Stream_Ntrip::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Stream_Ntrip::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
void Stream_Ntrip::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void Stream_Ntrip::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& Stream_Ntrip::address() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.Ntrip.address)
  return address_.GetNoArena();
}
void Stream_Ntrip::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Stream.Ntrip.address)
}
#if LANG_CXX11
void Stream_Ntrip::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.gnss.config.Stream.Ntrip.address)
}
#endif
void Stream_Ntrip::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.gnss.config.Stream.Ntrip.address)
}
void Stream_Ntrip::set_address(const void* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.gnss.config.Stream.Ntrip.address)
}
::std::string* Stream_Ntrip::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Stream.Ntrip.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Stream_Ntrip::release_address() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Stream.Ntrip.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Stream_Ntrip::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Stream.Ntrip.address)
}

// optional int32 port = 2 [default = 2101];
bool Stream_Ntrip::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Stream_Ntrip::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
void Stream_Ntrip::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
void Stream_Ntrip::clear_port() {
  port_ = 2101;
  clear_has_port();
}
::google::protobuf::int32 Stream_Ntrip::port() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.Ntrip.port)
  return port_;
}
void Stream_Ntrip::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Stream.Ntrip.port)
}

// optional bytes mount_point = 3;
bool Stream_Ntrip::has_mount_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Stream_Ntrip::set_has_mount_point() {
  _has_bits_[0] |= 0x00000002u;
}
void Stream_Ntrip::clear_has_mount_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void Stream_Ntrip::clear_mount_point() {
  mount_point_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mount_point();
}
const ::std::string& Stream_Ntrip::mount_point() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.Ntrip.mount_point)
  return mount_point_.GetNoArena();
}
void Stream_Ntrip::set_mount_point(const ::std::string& value) {
  set_has_mount_point();
  mount_point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Stream.Ntrip.mount_point)
}
#if LANG_CXX11
void Stream_Ntrip::set_mount_point(::std::string&& value) {
  set_has_mount_point();
  mount_point_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.gnss.config.Stream.Ntrip.mount_point)
}
#endif
void Stream_Ntrip::set_mount_point(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mount_point();
  mount_point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.gnss.config.Stream.Ntrip.mount_point)
}
void Stream_Ntrip::set_mount_point(const void* value, size_t size) {
  set_has_mount_point();
  mount_point_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.gnss.config.Stream.Ntrip.mount_point)
}
::std::string* Stream_Ntrip::mutable_mount_point() {
  set_has_mount_point();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Stream.Ntrip.mount_point)
  return mount_point_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Stream_Ntrip::release_mount_point() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Stream.Ntrip.mount_point)
  clear_has_mount_point();
  return mount_point_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Stream_Ntrip::set_allocated_mount_point(::std::string* mount_point) {
  if (mount_point != NULL) {
    set_has_mount_point();
  } else {
    clear_has_mount_point();
  }
  mount_point_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mount_point);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Stream.Ntrip.mount_point)
}

// optional bytes user = 4;
bool Stream_Ntrip::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Stream_Ntrip::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
void Stream_Ntrip::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
void Stream_Ntrip::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user();
}
const ::std::string& Stream_Ntrip::user() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.Ntrip.user)
  return user_.GetNoArena();
}
void Stream_Ntrip::set_user(const ::std::string& value) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Stream.Ntrip.user)
}
#if LANG_CXX11
void Stream_Ntrip::set_user(::std::string&& value) {
  set_has_user();
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.gnss.config.Stream.Ntrip.user)
}
#endif
void Stream_Ntrip::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.gnss.config.Stream.Ntrip.user)
}
void Stream_Ntrip::set_user(const void* value, size_t size) {
  set_has_user();
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.gnss.config.Stream.Ntrip.user)
}
::std::string* Stream_Ntrip::mutable_user() {
  set_has_user();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Stream.Ntrip.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Stream_Ntrip::release_user() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Stream.Ntrip.user)
  clear_has_user();
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Stream_Ntrip::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    set_has_user();
  } else {
    clear_has_user();
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Stream.Ntrip.user)
}

// optional bytes password = 5;
bool Stream_Ntrip::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Stream_Ntrip::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
void Stream_Ntrip::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
void Stream_Ntrip::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& Stream_Ntrip::password() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.Ntrip.password)
  return password_.GetNoArena();
}
void Stream_Ntrip::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Stream.Ntrip.password)
}
#if LANG_CXX11
void Stream_Ntrip::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.gnss.config.Stream.Ntrip.password)
}
#endif
void Stream_Ntrip::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.gnss.config.Stream.Ntrip.password)
}
void Stream_Ntrip::set_password(const void* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.gnss.config.Stream.Ntrip.password)
}
::std::string* Stream_Ntrip::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Stream.Ntrip.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Stream_Ntrip::release_password() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Stream.Ntrip.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Stream_Ntrip::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Stream.Ntrip.password)
}

// optional uint32 timeout_s = 6 [default = 30];
bool Stream_Ntrip::has_timeout_s() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Stream_Ntrip::set_has_timeout_s() {
  _has_bits_[0] |= 0x00000020u;
}
void Stream_Ntrip::clear_has_timeout_s() {
  _has_bits_[0] &= ~0x00000020u;
}
void Stream_Ntrip::clear_timeout_s() {
  timeout_s_ = 30u;
  clear_has_timeout_s();
}
::google::protobuf::uint32 Stream_Ntrip::timeout_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.Ntrip.timeout_s)
  return timeout_s_;
}
void Stream_Ntrip::set_timeout_s(::google::protobuf::uint32 value) {
  set_has_timeout_s();
  timeout_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Stream.Ntrip.timeout_s)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stream::kFormatFieldNumber;
const int Stream::kSerialFieldNumber;
const int Stream::kTcpFieldNumber;
const int Stream::kUdpFieldNumber;
const int Stream::kNtripFieldNumber;
const int Stream::kPushLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stream::Stream()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.config.Stream)
}
Stream::Stream(const Stream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&format_, &from.format_,
    reinterpret_cast<char*>(&push_location_) -
    reinterpret_cast<char*>(&format_) + sizeof(push_location_));
  clear_has_type();
  switch (from.type_case()) {
    case kSerial: {
      mutable_serial()->::jmc_auto::drivers::gnss::config::Stream_Serial::MergeFrom(from.serial());
      break;
    }
    case kTcp: {
      mutable_tcp()->::jmc_auto::drivers::gnss::config::Stream_Tcp::MergeFrom(from.tcp());
      break;
    }
    case kUdp: {
      mutable_udp()->::jmc_auto::drivers::gnss::config::Stream_Udp::MergeFrom(from.udp());
      break;
    }
    case kNtrip: {
      mutable_ntrip()->::jmc_auto::drivers::gnss::config::Stream_Ntrip::MergeFrom(from.ntrip());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.config.Stream)
}

void Stream::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&format_, 0, reinterpret_cast<char*>(&push_location_) -
    reinterpret_cast<char*>(&format_) + sizeof(push_location_));
  clear_has_type();
}

Stream::~Stream() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.config.Stream)
  SharedDtor();
}

void Stream::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void Stream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stream::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stream& Stream::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Stream* Stream::New(::google::protobuf::Arena* arena) const {
  Stream* n = new Stream;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stream::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:jmc_auto.drivers.gnss.config.Stream)
  switch (type_case()) {
    case kSerial: {
      delete type_.serial_;
      break;
    }
    case kTcp: {
      delete type_.tcp_;
      break;
    }
    case kUdp: {
      delete type_.udp_;
      break;
    }
    case kNtrip: {
      delete type_.ntrip_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.config.Stream)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&format_, 0, reinterpret_cast<char*>(&push_location_) -
      reinterpret_cast<char*>(&format_) + sizeof(push_location_));
  }
  clear_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.config.Stream)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.drivers.gnss.config.Stream.Format format = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::drivers::gnss::config::Stream_Format_IsValid(value)) {
            set_format(static_cast< ::jmc_auto::drivers::gnss::config::Stream_Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.config.Stream.Serial serial = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.config.Stream.Tcp tcp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tcp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.config.Stream.Udp udp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_udp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.config.Stream.Ntrip ntrip = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ntrip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool push_location = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_push_location();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &push_location_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.config.Stream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.config.Stream)
  return false;
#undef DO_
}

void Stream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.config.Stream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.drivers.gnss.config.Stream.Format format = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->format(), output);
  }

  switch (type_case()) {
    case kSerial:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *type_.serial_, output);
      break;
    case kTcp:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *type_.tcp_, output);
      break;
    case kUdp:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *type_.udp_, output);
      break;
    case kNtrip:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *type_.ntrip_, output);
      break;
    default: ;
  }
  // optional bool push_location = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->push_location(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.config.Stream)
}

::google::protobuf::uint8* Stream::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.config.Stream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.drivers.gnss.config.Stream.Format format = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->format(), target);
  }

  switch (type_case()) {
    case kSerial:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *type_.serial_, deterministic, target);
      break;
    case kTcp:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *type_.tcp_, deterministic, target);
      break;
    case kUdp:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *type_.udp_, deterministic, target);
      break;
    case kNtrip:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *type_.ntrip_, deterministic, target);
      break;
    default: ;
  }
  // optional bool push_location = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->push_location(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.config.Stream)
  return target;
}

size_t Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.config.Stream)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .jmc_auto.drivers.gnss.config.Stream.Format format = 1;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

    // optional bool push_location = 6;
    if (has_push_location()) {
      total_size += 1 + 1;
    }

  }
  switch (type_case()) {
    // optional .jmc_auto.drivers.gnss.config.Stream.Serial serial = 2;
    case kSerial: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.serial_);
      break;
    }
    // optional .jmc_auto.drivers.gnss.config.Stream.Tcp tcp = 3;
    case kTcp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.tcp_);
      break;
    }
    // optional .jmc_auto.drivers.gnss.config.Stream.Udp udp = 4;
    case kUdp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.udp_);
      break;
    }
    // optional .jmc_auto.drivers.gnss.config.Stream.Ntrip ntrip = 5;
    case kNtrip: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.ntrip_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.config.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stream>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.config.Stream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.config.Stream)
    MergeFrom(*source);
  }
}

void Stream::MergeFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.config.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      format_ = from.format_;
    }
    if (cached_has_bits & 0x00000002u) {
      push_location_ = from.push_location_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.type_case()) {
    case kSerial: {
      mutable_serial()->::jmc_auto::drivers::gnss::config::Stream_Serial::MergeFrom(from.serial());
      break;
    }
    case kTcp: {
      mutable_tcp()->::jmc_auto::drivers::gnss::config::Stream_Tcp::MergeFrom(from.tcp());
      break;
    }
    case kUdp: {
      mutable_udp()->::jmc_auto::drivers::gnss::config::Stream_Udp::MergeFrom(from.udp());
      break;
    }
    case kNtrip: {
      mutable_ntrip()->::jmc_auto::drivers::gnss::config::Stream_Ntrip::MergeFrom(from.ntrip());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Stream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.config.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream::CopyFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.config.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {
  return true;
}

void Stream::Swap(Stream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stream::InternalSwap(Stream* other) {
  std::swap(format_, other->format_);
  std::swap(push_location_, other->push_location_);
  std::swap(type_, other->type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stream::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Stream

// optional .jmc_auto.drivers.gnss.config.Stream.Format format = 1;
bool Stream::has_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Stream::set_has_format() {
  _has_bits_[0] |= 0x00000001u;
}
void Stream::clear_has_format() {
  _has_bits_[0] &= ~0x00000001u;
}
void Stream::clear_format() {
  format_ = 0;
  clear_has_format();
}
::jmc_auto::drivers::gnss::config::Stream_Format Stream::format() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.format)
  return static_cast< ::jmc_auto::drivers::gnss::config::Stream_Format >(format_);
}
void Stream::set_format(::jmc_auto::drivers::gnss::config::Stream_Format value) {
  assert(::jmc_auto::drivers::gnss::config::Stream_Format_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Stream.format)
}

// optional .jmc_auto.drivers.gnss.config.Stream.Serial serial = 2;
bool Stream::has_serial() const {
  return type_case() == kSerial;
}
void Stream::set_has_serial() {
  _oneof_case_[0] = kSerial;
}
void Stream::clear_serial() {
  if (has_serial()) {
    delete type_.serial_;
    clear_has_type();
  }
}
 const ::jmc_auto::drivers::gnss::config::Stream_Serial& Stream::serial() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.serial)
  return has_serial()
      ? *type_.serial_
      : ::jmc_auto::drivers::gnss::config::Stream_Serial::default_instance();
}
::jmc_auto::drivers::gnss::config::Stream_Serial* Stream::mutable_serial() {
  if (!has_serial()) {
    clear_type();
    set_has_serial();
    type_.serial_ = new ::jmc_auto::drivers::gnss::config::Stream_Serial;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Stream.serial)
  return type_.serial_;
}
::jmc_auto::drivers::gnss::config::Stream_Serial* Stream::release_serial() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Stream.serial)
  if (has_serial()) {
    clear_has_type();
    ::jmc_auto::drivers::gnss::config::Stream_Serial* temp = type_.serial_;
    type_.serial_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Stream::set_allocated_serial(::jmc_auto::drivers::gnss::config::Stream_Serial* serial) {
  clear_type();
  if (serial) {
    set_has_serial();
    type_.serial_ = serial;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Stream.serial)
}

// optional .jmc_auto.drivers.gnss.config.Stream.Tcp tcp = 3;
bool Stream::has_tcp() const {
  return type_case() == kTcp;
}
void Stream::set_has_tcp() {
  _oneof_case_[0] = kTcp;
}
void Stream::clear_tcp() {
  if (has_tcp()) {
    delete type_.tcp_;
    clear_has_type();
  }
}
 const ::jmc_auto::drivers::gnss::config::Stream_Tcp& Stream::tcp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.tcp)
  return has_tcp()
      ? *type_.tcp_
      : ::jmc_auto::drivers::gnss::config::Stream_Tcp::default_instance();
}
::jmc_auto::drivers::gnss::config::Stream_Tcp* Stream::mutable_tcp() {
  if (!has_tcp()) {
    clear_type();
    set_has_tcp();
    type_.tcp_ = new ::jmc_auto::drivers::gnss::config::Stream_Tcp;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Stream.tcp)
  return type_.tcp_;
}
::jmc_auto::drivers::gnss::config::Stream_Tcp* Stream::release_tcp() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Stream.tcp)
  if (has_tcp()) {
    clear_has_type();
    ::jmc_auto::drivers::gnss::config::Stream_Tcp* temp = type_.tcp_;
    type_.tcp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Stream::set_allocated_tcp(::jmc_auto::drivers::gnss::config::Stream_Tcp* tcp) {
  clear_type();
  if (tcp) {
    set_has_tcp();
    type_.tcp_ = tcp;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Stream.tcp)
}

// optional .jmc_auto.drivers.gnss.config.Stream.Udp udp = 4;
bool Stream::has_udp() const {
  return type_case() == kUdp;
}
void Stream::set_has_udp() {
  _oneof_case_[0] = kUdp;
}
void Stream::clear_udp() {
  if (has_udp()) {
    delete type_.udp_;
    clear_has_type();
  }
}
 const ::jmc_auto::drivers::gnss::config::Stream_Udp& Stream::udp() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.udp)
  return has_udp()
      ? *type_.udp_
      : ::jmc_auto::drivers::gnss::config::Stream_Udp::default_instance();
}
::jmc_auto::drivers::gnss::config::Stream_Udp* Stream::mutable_udp() {
  if (!has_udp()) {
    clear_type();
    set_has_udp();
    type_.udp_ = new ::jmc_auto::drivers::gnss::config::Stream_Udp;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Stream.udp)
  return type_.udp_;
}
::jmc_auto::drivers::gnss::config::Stream_Udp* Stream::release_udp() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Stream.udp)
  if (has_udp()) {
    clear_has_type();
    ::jmc_auto::drivers::gnss::config::Stream_Udp* temp = type_.udp_;
    type_.udp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Stream::set_allocated_udp(::jmc_auto::drivers::gnss::config::Stream_Udp* udp) {
  clear_type();
  if (udp) {
    set_has_udp();
    type_.udp_ = udp;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Stream.udp)
}

// optional .jmc_auto.drivers.gnss.config.Stream.Ntrip ntrip = 5;
bool Stream::has_ntrip() const {
  return type_case() == kNtrip;
}
void Stream::set_has_ntrip() {
  _oneof_case_[0] = kNtrip;
}
void Stream::clear_ntrip() {
  if (has_ntrip()) {
    delete type_.ntrip_;
    clear_has_type();
  }
}
 const ::jmc_auto::drivers::gnss::config::Stream_Ntrip& Stream::ntrip() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.ntrip)
  return has_ntrip()
      ? *type_.ntrip_
      : ::jmc_auto::drivers::gnss::config::Stream_Ntrip::default_instance();
}
::jmc_auto::drivers::gnss::config::Stream_Ntrip* Stream::mutable_ntrip() {
  if (!has_ntrip()) {
    clear_type();
    set_has_ntrip();
    type_.ntrip_ = new ::jmc_auto::drivers::gnss::config::Stream_Ntrip;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Stream.ntrip)
  return type_.ntrip_;
}
::jmc_auto::drivers::gnss::config::Stream_Ntrip* Stream::release_ntrip() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Stream.ntrip)
  if (has_ntrip()) {
    clear_has_type();
    ::jmc_auto::drivers::gnss::config::Stream_Ntrip* temp = type_.ntrip_;
    type_.ntrip_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Stream::set_allocated_ntrip(::jmc_auto::drivers::gnss::config::Stream_Ntrip* ntrip) {
  clear_type();
  if (ntrip) {
    set_has_ntrip();
    type_.ntrip_ = ntrip;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Stream.ntrip)
}

// optional bool push_location = 6;
bool Stream::has_push_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Stream::set_has_push_location() {
  _has_bits_[0] |= 0x00000002u;
}
void Stream::clear_has_push_location() {
  _has_bits_[0] &= ~0x00000002u;
}
void Stream::clear_push_location() {
  push_location_ = false;
  clear_has_push_location();
}
bool Stream::push_location() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Stream.push_location)
  return push_location_;
}
void Stream::set_push_location(bool value) {
  set_has_push_location();
  push_location_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Stream.push_location)
}

bool Stream::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void Stream::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
Stream::TypeCase Stream::type_case() const {
  return Stream::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NovatelConfig::kImuOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NovatelConfig::NovatelConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.config.NovatelConfig)
}
NovatelConfig::NovatelConfig(const NovatelConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imu_orientation_ = from.imu_orientation_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.config.NovatelConfig)
}

void NovatelConfig::SharedCtor() {
  _cached_size_ = 0;
  imu_orientation_ = 5;
}

NovatelConfig::~NovatelConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.config.NovatelConfig)
  SharedDtor();
}

void NovatelConfig::SharedDtor() {
}

void NovatelConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NovatelConfig::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NovatelConfig& NovatelConfig::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

NovatelConfig* NovatelConfig::New(::google::protobuf::Arena* arena) const {
  NovatelConfig* n = new NovatelConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NovatelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.config.NovatelConfig)
  imu_orientation_ = 5;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NovatelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.config.NovatelConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 imu_orientation = 1 [default = 5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_imu_orientation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imu_orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.config.NovatelConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.config.NovatelConfig)
  return false;
#undef DO_
}

void NovatelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.config.NovatelConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 imu_orientation = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->imu_orientation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.config.NovatelConfig)
}

::google::protobuf::uint8* NovatelConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.config.NovatelConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 imu_orientation = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->imu_orientation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.config.NovatelConfig)
  return target;
}

size_t NovatelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.config.NovatelConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 imu_orientation = 1 [default = 5];
  if (has_imu_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->imu_orientation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NovatelConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.config.NovatelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NovatelConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NovatelConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.config.NovatelConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.config.NovatelConfig)
    MergeFrom(*source);
  }
}

void NovatelConfig::MergeFrom(const NovatelConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.config.NovatelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imu_orientation()) {
    set_imu_orientation(from.imu_orientation());
  }
}

void NovatelConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.config.NovatelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NovatelConfig::CopyFrom(const NovatelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.config.NovatelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NovatelConfig::IsInitialized() const {
  return true;
}

void NovatelConfig::Swap(NovatelConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NovatelConfig::InternalSwap(NovatelConfig* other) {
  std::swap(imu_orientation_, other->imu_orientation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NovatelConfig::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NovatelConfig

// optional int32 imu_orientation = 1 [default = 5];
bool NovatelConfig::has_imu_orientation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NovatelConfig::set_has_imu_orientation() {
  _has_bits_[0] |= 0x00000001u;
}
void NovatelConfig::clear_has_imu_orientation() {
  _has_bits_[0] &= ~0x00000001u;
}
void NovatelConfig::clear_imu_orientation() {
  imu_orientation_ = 5;
  clear_has_imu_orientation();
}
::google::protobuf::int32 NovatelConfig::imu_orientation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.NovatelConfig.imu_orientation)
  return imu_orientation_;
}
void NovatelConfig::set_imu_orientation(::google::protobuf::int32 value) {
  set_has_imu_orientation();
  imu_orientation_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.NovatelConfig.imu_orientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewtonM2Config::kImuOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewtonM2Config::NewtonM2Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.config.NewtonM2Config)
}
NewtonM2Config::NewtonM2Config(const NewtonM2Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imu_orientation_ = from.imu_orientation_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.config.NewtonM2Config)
}

void NewtonM2Config::SharedCtor() {
  _cached_size_ = 0;
  imu_orientation_ = 5;
}

NewtonM2Config::~NewtonM2Config() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.config.NewtonM2Config)
  SharedDtor();
}

void NewtonM2Config::SharedDtor() {
}

void NewtonM2Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewtonM2Config::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewtonM2Config& NewtonM2Config::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

NewtonM2Config* NewtonM2Config::New(::google::protobuf::Arena* arena) const {
  NewtonM2Config* n = new NewtonM2Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewtonM2Config::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.config.NewtonM2Config)
  imu_orientation_ = 5;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NewtonM2Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.config.NewtonM2Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 imu_orientation = 1 [default = 5];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_imu_orientation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imu_orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.config.NewtonM2Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.config.NewtonM2Config)
  return false;
#undef DO_
}

void NewtonM2Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.config.NewtonM2Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 imu_orientation = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->imu_orientation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.config.NewtonM2Config)
}

::google::protobuf::uint8* NewtonM2Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.config.NewtonM2Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 imu_orientation = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->imu_orientation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.config.NewtonM2Config)
  return target;
}

size_t NewtonM2Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.config.NewtonM2Config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 imu_orientation = 1 [default = 5];
  if (has_imu_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->imu_orientation());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewtonM2Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.config.NewtonM2Config)
  GOOGLE_DCHECK_NE(&from, this);
  const NewtonM2Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewtonM2Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.config.NewtonM2Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.config.NewtonM2Config)
    MergeFrom(*source);
  }
}

void NewtonM2Config::MergeFrom(const NewtonM2Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.config.NewtonM2Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_imu_orientation()) {
    set_imu_orientation(from.imu_orientation());
  }
}

void NewtonM2Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.config.NewtonM2Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewtonM2Config::CopyFrom(const NewtonM2Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.config.NewtonM2Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewtonM2Config::IsInitialized() const {
  return true;
}

void NewtonM2Config::Swap(NewtonM2Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewtonM2Config::InternalSwap(NewtonM2Config* other) {
  std::swap(imu_orientation_, other->imu_orientation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewtonM2Config::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NewtonM2Config

// optional int32 imu_orientation = 1 [default = 5];
bool NewtonM2Config::has_imu_orientation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NewtonM2Config::set_has_imu_orientation() {
  _has_bits_[0] |= 0x00000001u;
}
void NewtonM2Config::clear_has_imu_orientation() {
  _has_bits_[0] &= ~0x00000001u;
}
void NewtonM2Config::clear_imu_orientation() {
  imu_orientation_ = 5;
  clear_has_imu_orientation();
}
::google::protobuf::int32 NewtonM2Config::imu_orientation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.NewtonM2Config.imu_orientation)
  return imu_orientation_;
}
void NewtonM2Config::set_imu_orientation(::google::protobuf::int32 value) {
  set_has_imu_orientation();
  imu_orientation_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.NewtonM2Config.imu_orientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UbloxConfig::UbloxConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.config.UbloxConfig)
}
UbloxConfig::UbloxConfig(const UbloxConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.config.UbloxConfig)
}

void UbloxConfig::SharedCtor() {
  _cached_size_ = 0;
}

UbloxConfig::~UbloxConfig() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.config.UbloxConfig)
  SharedDtor();
}

void UbloxConfig::SharedDtor() {
}

void UbloxConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UbloxConfig::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UbloxConfig& UbloxConfig::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

UbloxConfig* UbloxConfig::New(::google::protobuf::Arena* arena) const {
  UbloxConfig* n = new UbloxConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UbloxConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.config.UbloxConfig)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UbloxConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.config.UbloxConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.config.UbloxConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.config.UbloxConfig)
  return false;
#undef DO_
}

void UbloxConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.config.UbloxConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.config.UbloxConfig)
}

::google::protobuf::uint8* UbloxConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.config.UbloxConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.config.UbloxConfig)
  return target;
}

size_t UbloxConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.config.UbloxConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UbloxConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.config.UbloxConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const UbloxConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UbloxConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.config.UbloxConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.config.UbloxConfig)
    MergeFrom(*source);
  }
}

void UbloxConfig::MergeFrom(const UbloxConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.config.UbloxConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UbloxConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.config.UbloxConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UbloxConfig::CopyFrom(const UbloxConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.config.UbloxConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UbloxConfig::IsInitialized() const {
  return true;
}

void UbloxConfig::Swap(UbloxConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UbloxConfig::InternalSwap(UbloxConfig* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UbloxConfig::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UbloxConfig

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> TF::_default_frame_id_;
::google::protobuf::internal::ExplicitlyConstructed< ::std::string> TF::_default_child_frame_id_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TF::kFrameIdFieldNumber;
const int TF::kChildFrameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TF::TF()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.config.TF)
}
TF::TF(const TF& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_id_.UnsafeSetDefault(&TF::_default_frame_id_.get());
  if (from.has_frame_id()) {
    frame_id_.AssignWithDefault(&TF::_default_frame_id_.get(), from.frame_id_);
  }
  child_frame_id_.UnsafeSetDefault(&TF::_default_child_frame_id_.get());
  if (from.has_child_frame_id()) {
    child_frame_id_.AssignWithDefault(&TF::_default_child_frame_id_.get(), from.child_frame_id_);
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.config.TF)
}

void TF::SharedCtor() {
  _cached_size_ = 0;
  frame_id_.UnsafeSetDefault(&TF::_default_frame_id_.get());
  child_frame_id_.UnsafeSetDefault(&TF::_default_child_frame_id_.get());
}

TF::~TF() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.config.TF)
  SharedDtor();
}

void TF::SharedDtor() {
  frame_id_.DestroyNoArena(&TF::_default_frame_id_.get());
  child_frame_id_.DestroyNoArena(&TF::_default_child_frame_id_.get());
}

void TF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TF::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TF& TF::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

TF* TF::New(::google::protobuf::Arena* arena) const {
  TF* n = new TF;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TF::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.config.TF)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_frame_id()) {
      GOOGLE_DCHECK(!frame_id_.IsDefault(&TF::_default_frame_id_.get()));
      (*frame_id_.UnsafeRawStringPointer())->assign(*&TF::_default_frame_id_.get());
    }
    if (has_child_frame_id()) {
      GOOGLE_DCHECK(!child_frame_id_.IsDefault(&TF::_default_child_frame_id_.get()));
      (*child_frame_id_.UnsafeRawStringPointer())->assign(*&TF::_default_child_frame_id_.get());
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.config.TF)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string frame_id = 1 [default = "world"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frame_id().data(), this->frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.drivers.gnss.config.TF.frame_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string child_frame_id = 2 [default = "novatel"];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_child_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->child_frame_id().data(), this->child_frame_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.drivers.gnss.config.TF.child_frame_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.config.TF)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.config.TF)
  return false;
#undef DO_
}

void TF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.config.TF)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string frame_id = 1 [default = "world"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.gnss.config.TF.frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->frame_id(), output);
  }

  // optional string child_frame_id = 2 [default = "novatel"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child_frame_id().data(), this->child_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.gnss.config.TF.child_frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->child_frame_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.config.TF)
}

::google::protobuf::uint8* TF::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.config.TF)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string frame_id = 1 [default = "world"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frame_id().data(), this->frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.gnss.config.TF.frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->frame_id(), target);
  }

  // optional string child_frame_id = 2 [default = "novatel"];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child_frame_id().data(), this->child_frame_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.gnss.config.TF.child_frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->child_frame_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.config.TF)
  return target;
}

size_t TF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.config.TF)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string frame_id = 1 [default = "world"];
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frame_id());
    }

    // optional string child_frame_id = 2 [default = "novatel"];
    if (has_child_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->child_frame_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TF::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.config.TF)
  GOOGLE_DCHECK_NE(&from, this);
  const TF* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TF>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.config.TF)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.config.TF)
    MergeFrom(*source);
  }
}

void TF::MergeFrom(const TF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.config.TF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_frame_id();
      frame_id_.AssignWithDefault(&TF::_default_frame_id_.get(), from.frame_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_child_frame_id();
      child_frame_id_.AssignWithDefault(&TF::_default_child_frame_id_.get(), from.child_frame_id_);
    }
  }
}

void TF::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.config.TF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TF::CopyFrom(const TF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.config.TF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TF::IsInitialized() const {
  return true;
}

void TF::Swap(TF* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TF::InternalSwap(TF* other) {
  frame_id_.Swap(&other->frame_id_);
  child_frame_id_.Swap(&other->child_frame_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TF::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TF

// optional string frame_id = 1 [default = "world"];
bool TF::has_frame_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TF::set_has_frame_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TF::clear_has_frame_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TF::clear_frame_id() {
  frame_id_.ClearToDefaultNoArena(&TF::_default_frame_id_.get());
  clear_has_frame_id();
}
const ::std::string& TF::frame_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.TF.frame_id)
  return frame_id_.GetNoArena();
}
void TF::set_frame_id(const ::std::string& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(&TF::_default_frame_id_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.TF.frame_id)
}
#if LANG_CXX11
void TF::set_frame_id(::std::string&& value) {
  set_has_frame_id();
  frame_id_.SetNoArena(
    &TF::_default_frame_id_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.gnss.config.TF.frame_id)
}
#endif
void TF::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_frame_id();
  frame_id_.SetNoArena(&TF::_default_frame_id_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.gnss.config.TF.frame_id)
}
void TF::set_frame_id(const char* value, size_t size) {
  set_has_frame_id();
  frame_id_.SetNoArena(&TF::_default_frame_id_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.gnss.config.TF.frame_id)
}
::std::string* TF::mutable_frame_id() {
  set_has_frame_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.TF.frame_id)
  return frame_id_.MutableNoArena(&TF::_default_frame_id_.get());
}
::std::string* TF::release_frame_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.TF.frame_id)
  clear_has_frame_id();
  return frame_id_.ReleaseNoArena(&TF::_default_frame_id_.get());
}
void TF::set_allocated_frame_id(::std::string* frame_id) {
  if (frame_id != NULL) {
    set_has_frame_id();
  } else {
    clear_has_frame_id();
  }
  frame_id_.SetAllocatedNoArena(&TF::_default_frame_id_.get(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.TF.frame_id)
}

// optional string child_frame_id = 2 [default = "novatel"];
bool TF::has_child_frame_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TF::set_has_child_frame_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TF::clear_has_child_frame_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TF::clear_child_frame_id() {
  child_frame_id_.ClearToDefaultNoArena(&TF::_default_child_frame_id_.get());
  clear_has_child_frame_id();
}
const ::std::string& TF::child_frame_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.TF.child_frame_id)
  return child_frame_id_.GetNoArena();
}
void TF::set_child_frame_id(const ::std::string& value) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&TF::_default_child_frame_id_.get(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.TF.child_frame_id)
}
#if LANG_CXX11
void TF::set_child_frame_id(::std::string&& value) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(
    &TF::_default_child_frame_id_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.gnss.config.TF.child_frame_id)
}
#endif
void TF::set_child_frame_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&TF::_default_child_frame_id_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.gnss.config.TF.child_frame_id)
}
void TF::set_child_frame_id(const char* value, size_t size) {
  set_has_child_frame_id();
  child_frame_id_.SetNoArena(&TF::_default_child_frame_id_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.gnss.config.TF.child_frame_id)
}
::std::string* TF::mutable_child_frame_id() {
  set_has_child_frame_id();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.TF.child_frame_id)
  return child_frame_id_.MutableNoArena(&TF::_default_child_frame_id_.get());
}
::std::string* TF::release_child_frame_id() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.TF.child_frame_id)
  clear_has_child_frame_id();
  return child_frame_id_.ReleaseNoArena(&TF::_default_child_frame_id_.get());
}
void TF::set_allocated_child_frame_id(::std::string* child_frame_id) {
  if (child_frame_id != NULL) {
    set_has_child_frame_id();
  } else {
    clear_has_child_frame_id();
  }
  child_frame_id_.SetAllocatedNoArena(&TF::_default_child_frame_id_.get(), child_frame_id);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.TF.child_frame_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config::kDataFieldNumber;
const int Config::kCommandFieldNumber;
const int Config::kRtkFromFieldNumber;
const int Config::kRtkToFieldNumber;
const int Config::kLoginCommandsFieldNumber;
const int Config::kLogoutCommandsFieldNumber;
const int Config::kNovatelConfigFieldNumber;
const int Config::kUbloxConfigFieldNumber;
const int Config::kNewtonm2ConfigFieldNumber;
const int Config::kRtkSolutionTypeFieldNumber;
const int Config::kImuTypeFieldNumber;
const int Config::kProj4TextFieldNumber;
const int Config::kTfFieldNumber;
const int Config::kWheelParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config::Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.config.Config)
}
Config::Config(const Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      login_commands_(from.login_commands_),
      logout_commands_(from.logout_commands_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proj4_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proj4_text()) {
    proj4_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proj4_text_);
  }
  wheel_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_wheel_parameters()) {
    wheel_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wheel_parameters_);
  }
  if (from.has_data()) {
    data_ = new ::jmc_auto::drivers::gnss::config::Stream(*from.data_);
  } else {
    data_ = NULL;
  }
  if (from.has_command()) {
    command_ = new ::jmc_auto::drivers::gnss::config::Stream(*from.command_);
  } else {
    command_ = NULL;
  }
  if (from.has_rtk_from()) {
    rtk_from_ = new ::jmc_auto::drivers::gnss::config::Stream(*from.rtk_from_);
  } else {
    rtk_from_ = NULL;
  }
  if (from.has_rtk_to()) {
    rtk_to_ = new ::jmc_auto::drivers::gnss::config::Stream(*from.rtk_to_);
  } else {
    rtk_to_ = NULL;
  }
  if (from.has_tf()) {
    tf_ = new ::jmc_auto::drivers::gnss::config::TF(*from.tf_);
  } else {
    tf_ = NULL;
  }
  ::memcpy(&rtk_solution_type_, &from.rtk_solution_type_,
    reinterpret_cast<char*>(&imu_type_) -
    reinterpret_cast<char*>(&rtk_solution_type_) + sizeof(imu_type_));
  clear_has_device_config();
  switch (from.device_config_case()) {
    case kNovatelConfig: {
      mutable_novatel_config()->::jmc_auto::drivers::gnss::config::NovatelConfig::MergeFrom(from.novatel_config());
      break;
    }
    case kUbloxConfig: {
      mutable_ublox_config()->::jmc_auto::drivers::gnss::config::UbloxConfig::MergeFrom(from.ublox_config());
      break;
    }
    case kNewtonm2Config: {
      mutable_newtonm2_config()->::jmc_auto::drivers::gnss::config::NewtonM2Config::MergeFrom(from.newtonm2_config());
      break;
    }
    case DEVICE_CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.config.Config)
}

void Config::SharedCtor() {
  _cached_size_ = 0;
  proj4_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wheel_parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, reinterpret_cast<char*>(&tf_) -
    reinterpret_cast<char*>(&data_) + sizeof(tf_));
  rtk_solution_type_ = 1;
  imu_type_ = 13;
  clear_has_device_config();
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.config.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  proj4_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wheel_parameters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete data_;
  }
  if (this != internal_default_instance()) {
    delete command_;
  }
  if (this != internal_default_instance()) {
    delete rtk_from_;
  }
  if (this != internal_default_instance()) {
    delete rtk_to_;
  }
  if (this != internal_default_instance()) {
    delete tf_;
  }
  if (has_device_config()) {
    clear_device_config();
  }
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Config& Config::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Config* Config::New(::google::protobuf::Arena* arena) const {
  Config* n = new Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Config::clear_device_config() {
// @@protoc_insertion_point(one_of_clear_start:jmc_auto.drivers.gnss.config.Config)
  switch (device_config_case()) {
    case kNovatelConfig: {
      delete device_config_.novatel_config_;
      break;
    }
    case kUbloxConfig: {
      delete device_config_.ublox_config_;
      break;
    }
    case kNewtonm2Config: {
      delete device_config_.newtonm2_config_;
      break;
    }
    case DEVICE_CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEVICE_CONFIG_NOT_SET;
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.config.Config)
  login_commands_.Clear();
  logout_commands_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_proj4_text()) {
      GOOGLE_DCHECK(!proj4_text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*proj4_text_.UnsafeRawStringPointer())->clear();
    }
    if (has_wheel_parameters()) {
      GOOGLE_DCHECK(!wheel_parameters_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*wheel_parameters_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(data_ != NULL);
      data_->::jmc_auto::drivers::gnss::config::Stream::Clear();
    }
    if (has_command()) {
      GOOGLE_DCHECK(command_ != NULL);
      command_->::jmc_auto::drivers::gnss::config::Stream::Clear();
    }
    if (has_rtk_from()) {
      GOOGLE_DCHECK(rtk_from_ != NULL);
      rtk_from_->::jmc_auto::drivers::gnss::config::Stream::Clear();
    }
    if (has_rtk_to()) {
      GOOGLE_DCHECK(rtk_to_ != NULL);
      rtk_to_->::jmc_auto::drivers::gnss::config::Stream::Clear();
    }
    if (has_tf()) {
      GOOGLE_DCHECK(tf_ != NULL);
      tf_->::jmc_auto::drivers::gnss::config::TF::Clear();
    }
    rtk_solution_type_ = 1;
  }
  imu_type_ = 13;
  clear_device_config();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.config.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.drivers.gnss.config.Stream data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.config.Stream command = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.config.Stream rtk_from = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rtk_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.config.Stream rtk_to = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rtk_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes login_commands = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_login_commands()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes logout_commands = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_logout_commands()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.config.NovatelConfig novatel_config = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_novatel_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.config.UbloxConfig ublox_config = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ublox_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.config.Config.RtkSolutionType rtk_solution_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::drivers::gnss::config::Config_RtkSolutionType_IsValid(value)) {
            set_rtk_solution_type(static_cast< ::jmc_auto::drivers::gnss::config::Config_RtkSolutionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.config.ImuType imu_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::drivers::gnss::config::ImuType_IsValid(value)) {
            set_imu_type(static_cast< ::jmc_auto::drivers::gnss::config::ImuType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string proj4_text = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proj4_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proj4_text().data(), this->proj4_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.drivers.gnss.config.Config.proj4_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.config.TF tf = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string wheel_parameters = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wheel_parameters()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wheel_parameters().data(), this->wheel_parameters().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jmc_auto.drivers.gnss.config.Config.wheel_parameters");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.config.NewtonM2Config newtonm2_config = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newtonm2_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.config.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.config.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.config.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.drivers.gnss.config.Stream data = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->data_, output);
  }

  // optional .jmc_auto.drivers.gnss.config.Stream command = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->command_, output);
  }

  // optional .jmc_auto.drivers.gnss.config.Stream rtk_from = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->rtk_from_, output);
  }

  // optional .jmc_auto.drivers.gnss.config.Stream rtk_to = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->rtk_to_, output);
  }

  // repeated bytes login_commands = 5;
  for (int i = 0, n = this->login_commands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->login_commands(i), output);
  }

  // repeated bytes logout_commands = 6;
  for (int i = 0, n = this->logout_commands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->logout_commands(i), output);
  }

  switch (device_config_case()) {
    case kNovatelConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *device_config_.novatel_config_, output);
      break;
    case kUbloxConfig:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *device_config_.ublox_config_, output);
      break;
    default: ;
  }
  // optional .jmc_auto.drivers.gnss.config.Config.RtkSolutionType rtk_solution_type = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->rtk_solution_type(), output);
  }

  // optional .jmc_auto.drivers.gnss.config.ImuType imu_type = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->imu_type(), output);
  }

  // optional string proj4_text = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proj4_text().data(), this->proj4_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.gnss.config.Config.proj4_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->proj4_text(), output);
  }

  // optional .jmc_auto.drivers.gnss.config.TF tf = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->tf_, output);
  }

  // optional string wheel_parameters = 13;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wheel_parameters().data(), this->wheel_parameters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.gnss.config.Config.wheel_parameters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->wheel_parameters(), output);
  }

  // optional .jmc_auto.drivers.gnss.config.NewtonM2Config newtonm2_config = 15;
  if (has_newtonm2_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *device_config_.newtonm2_config_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.config.Config)
}

::google::protobuf::uint8* Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.config.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.drivers.gnss.config.Stream data = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->data_, deterministic, target);
  }

  // optional .jmc_auto.drivers.gnss.config.Stream command = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->command_, deterministic, target);
  }

  // optional .jmc_auto.drivers.gnss.config.Stream rtk_from = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->rtk_from_, deterministic, target);
  }

  // optional .jmc_auto.drivers.gnss.config.Stream rtk_to = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->rtk_to_, deterministic, target);
  }

  // repeated bytes login_commands = 5;
  for (int i = 0, n = this->login_commands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->login_commands(i), target);
  }

  // repeated bytes logout_commands = 6;
  for (int i = 0, n = this->logout_commands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->logout_commands(i), target);
  }

  switch (device_config_case()) {
    case kNovatelConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *device_config_.novatel_config_, deterministic, target);
      break;
    case kUbloxConfig:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *device_config_.ublox_config_, deterministic, target);
      break;
    default: ;
  }
  // optional .jmc_auto.drivers.gnss.config.Config.RtkSolutionType rtk_solution_type = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->rtk_solution_type(), target);
  }

  // optional .jmc_auto.drivers.gnss.config.ImuType imu_type = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->imu_type(), target);
  }

  // optional string proj4_text = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proj4_text().data(), this->proj4_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.gnss.config.Config.proj4_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->proj4_text(), target);
  }

  // optional .jmc_auto.drivers.gnss.config.TF tf = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->tf_, deterministic, target);
  }

  // optional string wheel_parameters = 13;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wheel_parameters().data(), this->wheel_parameters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jmc_auto.drivers.gnss.config.Config.wheel_parameters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->wheel_parameters(), target);
  }

  // optional .jmc_auto.drivers.gnss.config.NewtonM2Config newtonm2_config = 15;
  if (has_newtonm2_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *device_config_.newtonm2_config_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.config.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.config.Config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated bytes login_commands = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->login_commands_size());
  for (int i = 0, n = this->login_commands_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->login_commands(i));
  }

  // repeated bytes logout_commands = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->logout_commands_size());
  for (int i = 0, n = this->logout_commands_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->logout_commands(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string proj4_text = 11;
    if (has_proj4_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proj4_text());
    }

    // optional string wheel_parameters = 13;
    if (has_wheel_parameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wheel_parameters());
    }

    // optional .jmc_auto.drivers.gnss.config.Stream data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->data_);
    }

    // optional .jmc_auto.drivers.gnss.config.Stream command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->command_);
    }

    // optional .jmc_auto.drivers.gnss.config.Stream rtk_from = 3;
    if (has_rtk_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rtk_from_);
    }

    // optional .jmc_auto.drivers.gnss.config.Stream rtk_to = 4;
    if (has_rtk_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rtk_to_);
    }

    // optional .jmc_auto.drivers.gnss.config.TF tf = 12;
    if (has_tf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tf_);
    }

    // optional .jmc_auto.drivers.gnss.config.Config.RtkSolutionType rtk_solution_type = 9;
    if (has_rtk_solution_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rtk_solution_type());
    }

  }
  // optional .jmc_auto.drivers.gnss.config.ImuType imu_type = 10;
  if (has_imu_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->imu_type());
  }

  switch (device_config_case()) {
    // optional .jmc_auto.drivers.gnss.config.NovatelConfig novatel_config = 7;
    case kNovatelConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *device_config_.novatel_config_);
      break;
    }
    // optional .jmc_auto.drivers.gnss.config.UbloxConfig ublox_config = 8;
    case kUbloxConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *device_config_.ublox_config_);
      break;
    }
    // optional .jmc_auto.drivers.gnss.config.NewtonM2Config newtonm2_config = 15;
    case kNewtonm2Config: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *device_config_.newtonm2_config_);
      break;
    }
    case DEVICE_CONFIG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.config.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.config.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.config.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  login_commands_.MergeFrom(from.login_commands_);
  logout_commands_.MergeFrom(from.logout_commands_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_proj4_text();
      proj4_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proj4_text_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_wheel_parameters();
      wheel_parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wheel_parameters_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_data()->::jmc_auto::drivers::gnss::config::Stream::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_command()->::jmc_auto::drivers::gnss::config::Stream::MergeFrom(from.command());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_rtk_from()->::jmc_auto::drivers::gnss::config::Stream::MergeFrom(from.rtk_from());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_rtk_to()->::jmc_auto::drivers::gnss::config::Stream::MergeFrom(from.rtk_to());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_tf()->::jmc_auto::drivers::gnss::config::TF::MergeFrom(from.tf());
    }
    if (cached_has_bits & 0x00000080u) {
      rtk_solution_type_ = from.rtk_solution_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_imu_type(from.imu_type());
  }
  switch (from.device_config_case()) {
    case kNovatelConfig: {
      mutable_novatel_config()->::jmc_auto::drivers::gnss::config::NovatelConfig::MergeFrom(from.novatel_config());
      break;
    }
    case kUbloxConfig: {
      mutable_ublox_config()->::jmc_auto::drivers::gnss::config::UbloxConfig::MergeFrom(from.ublox_config());
      break;
    }
    case kNewtonm2Config: {
      mutable_newtonm2_config()->::jmc_auto::drivers::gnss::config::NewtonM2Config::MergeFrom(from.newtonm2_config());
      break;
    }
    case DEVICE_CONFIG_NOT_SET: {
      break;
    }
  }
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.config.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::Swap(Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config::InternalSwap(Config* other) {
  login_commands_.InternalSwap(&other->login_commands_);
  logout_commands_.InternalSwap(&other->logout_commands_);
  proj4_text_.Swap(&other->proj4_text_);
  wheel_parameters_.Swap(&other->wheel_parameters_);
  std::swap(data_, other->data_);
  std::swap(command_, other->command_);
  std::swap(rtk_from_, other->rtk_from_);
  std::swap(rtk_to_, other->rtk_to_);
  std::swap(tf_, other->tf_);
  std::swap(rtk_solution_type_, other->rtk_solution_type_);
  std::swap(imu_type_, other->imu_type_);
  std::swap(device_config_, other->device_config_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Config

// optional .jmc_auto.drivers.gnss.config.Stream data = 1;
bool Config::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Config::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
void Config::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void Config::clear_data() {
  if (data_ != NULL) data_->::jmc_auto::drivers::gnss::config::Stream::Clear();
  clear_has_data();
}
const ::jmc_auto::drivers::gnss::config::Stream& Config::data() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Config.data)
  return data_ != NULL ? *data_
                         : *::jmc_auto::drivers::gnss::config::Stream::internal_default_instance();
}
::jmc_auto::drivers::gnss::config::Stream* Config::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::jmc_auto::drivers::gnss::config::Stream;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Config.data)
  return data_;
}
::jmc_auto::drivers::gnss::config::Stream* Config::release_data() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Config.data)
  clear_has_data();
  ::jmc_auto::drivers::gnss::config::Stream* temp = data_;
  data_ = NULL;
  return temp;
}
void Config::set_allocated_data(::jmc_auto::drivers::gnss::config::Stream* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Config.data)
}

// optional .jmc_auto.drivers.gnss.config.Stream command = 2;
bool Config::has_command() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Config::set_has_command() {
  _has_bits_[0] |= 0x00000008u;
}
void Config::clear_has_command() {
  _has_bits_[0] &= ~0x00000008u;
}
void Config::clear_command() {
  if (command_ != NULL) command_->::jmc_auto::drivers::gnss::config::Stream::Clear();
  clear_has_command();
}
const ::jmc_auto::drivers::gnss::config::Stream& Config::command() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Config.command)
  return command_ != NULL ? *command_
                         : *::jmc_auto::drivers::gnss::config::Stream::internal_default_instance();
}
::jmc_auto::drivers::gnss::config::Stream* Config::mutable_command() {
  set_has_command();
  if (command_ == NULL) {
    command_ = new ::jmc_auto::drivers::gnss::config::Stream;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Config.command)
  return command_;
}
::jmc_auto::drivers::gnss::config::Stream* Config::release_command() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Config.command)
  clear_has_command();
  ::jmc_auto::drivers::gnss::config::Stream* temp = command_;
  command_ = NULL;
  return temp;
}
void Config::set_allocated_command(::jmc_auto::drivers::gnss::config::Stream* command) {
  delete command_;
  command_ = command;
  if (command) {
    set_has_command();
  } else {
    clear_has_command();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Config.command)
}

// optional .jmc_auto.drivers.gnss.config.Stream rtk_from = 3;
bool Config::has_rtk_from() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Config::set_has_rtk_from() {
  _has_bits_[0] |= 0x00000010u;
}
void Config::clear_has_rtk_from() {
  _has_bits_[0] &= ~0x00000010u;
}
void Config::clear_rtk_from() {
  if (rtk_from_ != NULL) rtk_from_->::jmc_auto::drivers::gnss::config::Stream::Clear();
  clear_has_rtk_from();
}
const ::jmc_auto::drivers::gnss::config::Stream& Config::rtk_from() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Config.rtk_from)
  return rtk_from_ != NULL ? *rtk_from_
                         : *::jmc_auto::drivers::gnss::config::Stream::internal_default_instance();
}
::jmc_auto::drivers::gnss::config::Stream* Config::mutable_rtk_from() {
  set_has_rtk_from();
  if (rtk_from_ == NULL) {
    rtk_from_ = new ::jmc_auto::drivers::gnss::config::Stream;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Config.rtk_from)
  return rtk_from_;
}
::jmc_auto::drivers::gnss::config::Stream* Config::release_rtk_from() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Config.rtk_from)
  clear_has_rtk_from();
  ::jmc_auto::drivers::gnss::config::Stream* temp = rtk_from_;
  rtk_from_ = NULL;
  return temp;
}
void Config::set_allocated_rtk_from(::jmc_auto::drivers::gnss::config::Stream* rtk_from) {
  delete rtk_from_;
  rtk_from_ = rtk_from;
  if (rtk_from) {
    set_has_rtk_from();
  } else {
    clear_has_rtk_from();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Config.rtk_from)
}

// optional .jmc_auto.drivers.gnss.config.Stream rtk_to = 4;
bool Config::has_rtk_to() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Config::set_has_rtk_to() {
  _has_bits_[0] |= 0x00000020u;
}
void Config::clear_has_rtk_to() {
  _has_bits_[0] &= ~0x00000020u;
}
void Config::clear_rtk_to() {
  if (rtk_to_ != NULL) rtk_to_->::jmc_auto::drivers::gnss::config::Stream::Clear();
  clear_has_rtk_to();
}
const ::jmc_auto::drivers::gnss::config::Stream& Config::rtk_to() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Config.rtk_to)
  return rtk_to_ != NULL ? *rtk_to_
                         : *::jmc_auto::drivers::gnss::config::Stream::internal_default_instance();
}
::jmc_auto::drivers::gnss::config::Stream* Config::mutable_rtk_to() {
  set_has_rtk_to();
  if (rtk_to_ == NULL) {
    rtk_to_ = new ::jmc_auto::drivers::gnss::config::Stream;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Config.rtk_to)
  return rtk_to_;
}
::jmc_auto::drivers::gnss::config::Stream* Config::release_rtk_to() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Config.rtk_to)
  clear_has_rtk_to();
  ::jmc_auto::drivers::gnss::config::Stream* temp = rtk_to_;
  rtk_to_ = NULL;
  return temp;
}
void Config::set_allocated_rtk_to(::jmc_auto::drivers::gnss::config::Stream* rtk_to) {
  delete rtk_to_;
  rtk_to_ = rtk_to;
  if (rtk_to) {
    set_has_rtk_to();
  } else {
    clear_has_rtk_to();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Config.rtk_to)
}

// repeated bytes login_commands = 5;
int Config::login_commands_size() const {
  return login_commands_.size();
}
void Config::clear_login_commands() {
  login_commands_.Clear();
}
const ::std::string& Config::login_commands(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Config.login_commands)
  return login_commands_.Get(index);
}
::std::string* Config::mutable_login_commands(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Config.login_commands)
  return login_commands_.Mutable(index);
}
void Config::set_login_commands(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Config.login_commands)
  login_commands_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Config::set_login_commands(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Config.login_commands)
  login_commands_.Mutable(index)->assign(std::move(value));
}
#endif
void Config::set_login_commands(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  login_commands_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.gnss.config.Config.login_commands)
}
void Config::set_login_commands(int index, const void* value, size_t size) {
  login_commands_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.gnss.config.Config.login_commands)
}
::std::string* Config::add_login_commands() {
  // @@protoc_insertion_point(field_add_mutable:jmc_auto.drivers.gnss.config.Config.login_commands)
  return login_commands_.Add();
}
void Config::add_login_commands(const ::std::string& value) {
  login_commands_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jmc_auto.drivers.gnss.config.Config.login_commands)
}
#if LANG_CXX11
void Config::add_login_commands(::std::string&& value) {
  login_commands_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jmc_auto.drivers.gnss.config.Config.login_commands)
}
#endif
void Config::add_login_commands(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  login_commands_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jmc_auto.drivers.gnss.config.Config.login_commands)
}
void Config::add_login_commands(const void* value, size_t size) {
  login_commands_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jmc_auto.drivers.gnss.config.Config.login_commands)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Config::login_commands() const {
  // @@protoc_insertion_point(field_list:jmc_auto.drivers.gnss.config.Config.login_commands)
  return login_commands_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Config::mutable_login_commands() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.drivers.gnss.config.Config.login_commands)
  return &login_commands_;
}

// repeated bytes logout_commands = 6;
int Config::logout_commands_size() const {
  return logout_commands_.size();
}
void Config::clear_logout_commands() {
  logout_commands_.Clear();
}
const ::std::string& Config::logout_commands(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Config.logout_commands)
  return logout_commands_.Get(index);
}
::std::string* Config::mutable_logout_commands(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Config.logout_commands)
  return logout_commands_.Mutable(index);
}
void Config::set_logout_commands(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Config.logout_commands)
  logout_commands_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Config::set_logout_commands(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Config.logout_commands)
  logout_commands_.Mutable(index)->assign(std::move(value));
}
#endif
void Config::set_logout_commands(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  logout_commands_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.gnss.config.Config.logout_commands)
}
void Config::set_logout_commands(int index, const void* value, size_t size) {
  logout_commands_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.gnss.config.Config.logout_commands)
}
::std::string* Config::add_logout_commands() {
  // @@protoc_insertion_point(field_add_mutable:jmc_auto.drivers.gnss.config.Config.logout_commands)
  return logout_commands_.Add();
}
void Config::add_logout_commands(const ::std::string& value) {
  logout_commands_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:jmc_auto.drivers.gnss.config.Config.logout_commands)
}
#if LANG_CXX11
void Config::add_logout_commands(::std::string&& value) {
  logout_commands_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:jmc_auto.drivers.gnss.config.Config.logout_commands)
}
#endif
void Config::add_logout_commands(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  logout_commands_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:jmc_auto.drivers.gnss.config.Config.logout_commands)
}
void Config::add_logout_commands(const void* value, size_t size) {
  logout_commands_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:jmc_auto.drivers.gnss.config.Config.logout_commands)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Config::logout_commands() const {
  // @@protoc_insertion_point(field_list:jmc_auto.drivers.gnss.config.Config.logout_commands)
  return logout_commands_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Config::mutable_logout_commands() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.drivers.gnss.config.Config.logout_commands)
  return &logout_commands_;
}

// optional .jmc_auto.drivers.gnss.config.NovatelConfig novatel_config = 7;
bool Config::has_novatel_config() const {
  return device_config_case() == kNovatelConfig;
}
void Config::set_has_novatel_config() {
  _oneof_case_[0] = kNovatelConfig;
}
void Config::clear_novatel_config() {
  if (has_novatel_config()) {
    delete device_config_.novatel_config_;
    clear_has_device_config();
  }
}
 const ::jmc_auto::drivers::gnss::config::NovatelConfig& Config::novatel_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Config.novatel_config)
  return has_novatel_config()
      ? *device_config_.novatel_config_
      : ::jmc_auto::drivers::gnss::config::NovatelConfig::default_instance();
}
::jmc_auto::drivers::gnss::config::NovatelConfig* Config::mutable_novatel_config() {
  if (!has_novatel_config()) {
    clear_device_config();
    set_has_novatel_config();
    device_config_.novatel_config_ = new ::jmc_auto::drivers::gnss::config::NovatelConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Config.novatel_config)
  return device_config_.novatel_config_;
}
::jmc_auto::drivers::gnss::config::NovatelConfig* Config::release_novatel_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Config.novatel_config)
  if (has_novatel_config()) {
    clear_has_device_config();
    ::jmc_auto::drivers::gnss::config::NovatelConfig* temp = device_config_.novatel_config_;
    device_config_.novatel_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Config::set_allocated_novatel_config(::jmc_auto::drivers::gnss::config::NovatelConfig* novatel_config) {
  clear_device_config();
  if (novatel_config) {
    set_has_novatel_config();
    device_config_.novatel_config_ = novatel_config;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Config.novatel_config)
}

// optional .jmc_auto.drivers.gnss.config.UbloxConfig ublox_config = 8;
bool Config::has_ublox_config() const {
  return device_config_case() == kUbloxConfig;
}
void Config::set_has_ublox_config() {
  _oneof_case_[0] = kUbloxConfig;
}
void Config::clear_ublox_config() {
  if (has_ublox_config()) {
    delete device_config_.ublox_config_;
    clear_has_device_config();
  }
}
 const ::jmc_auto::drivers::gnss::config::UbloxConfig& Config::ublox_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Config.ublox_config)
  return has_ublox_config()
      ? *device_config_.ublox_config_
      : ::jmc_auto::drivers::gnss::config::UbloxConfig::default_instance();
}
::jmc_auto::drivers::gnss::config::UbloxConfig* Config::mutable_ublox_config() {
  if (!has_ublox_config()) {
    clear_device_config();
    set_has_ublox_config();
    device_config_.ublox_config_ = new ::jmc_auto::drivers::gnss::config::UbloxConfig;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Config.ublox_config)
  return device_config_.ublox_config_;
}
::jmc_auto::drivers::gnss::config::UbloxConfig* Config::release_ublox_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Config.ublox_config)
  if (has_ublox_config()) {
    clear_has_device_config();
    ::jmc_auto::drivers::gnss::config::UbloxConfig* temp = device_config_.ublox_config_;
    device_config_.ublox_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Config::set_allocated_ublox_config(::jmc_auto::drivers::gnss::config::UbloxConfig* ublox_config) {
  clear_device_config();
  if (ublox_config) {
    set_has_ublox_config();
    device_config_.ublox_config_ = ublox_config;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Config.ublox_config)
}

// optional .jmc_auto.drivers.gnss.config.NewtonM2Config newtonm2_config = 15;
bool Config::has_newtonm2_config() const {
  return device_config_case() == kNewtonm2Config;
}
void Config::set_has_newtonm2_config() {
  _oneof_case_[0] = kNewtonm2Config;
}
void Config::clear_newtonm2_config() {
  if (has_newtonm2_config()) {
    delete device_config_.newtonm2_config_;
    clear_has_device_config();
  }
}
 const ::jmc_auto::drivers::gnss::config::NewtonM2Config& Config::newtonm2_config() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Config.newtonm2_config)
  return has_newtonm2_config()
      ? *device_config_.newtonm2_config_
      : ::jmc_auto::drivers::gnss::config::NewtonM2Config::default_instance();
}
::jmc_auto::drivers::gnss::config::NewtonM2Config* Config::mutable_newtonm2_config() {
  if (!has_newtonm2_config()) {
    clear_device_config();
    set_has_newtonm2_config();
    device_config_.newtonm2_config_ = new ::jmc_auto::drivers::gnss::config::NewtonM2Config;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Config.newtonm2_config)
  return device_config_.newtonm2_config_;
}
::jmc_auto::drivers::gnss::config::NewtonM2Config* Config::release_newtonm2_config() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Config.newtonm2_config)
  if (has_newtonm2_config()) {
    clear_has_device_config();
    ::jmc_auto::drivers::gnss::config::NewtonM2Config* temp = device_config_.newtonm2_config_;
    device_config_.newtonm2_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Config::set_allocated_newtonm2_config(::jmc_auto::drivers::gnss::config::NewtonM2Config* newtonm2_config) {
  clear_device_config();
  if (newtonm2_config) {
    set_has_newtonm2_config();
    device_config_.newtonm2_config_ = newtonm2_config;
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Config.newtonm2_config)
}

// optional .jmc_auto.drivers.gnss.config.Config.RtkSolutionType rtk_solution_type = 9;
bool Config::has_rtk_solution_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Config::set_has_rtk_solution_type() {
  _has_bits_[0] |= 0x00000080u;
}
void Config::clear_has_rtk_solution_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void Config::clear_rtk_solution_type() {
  rtk_solution_type_ = 1;
  clear_has_rtk_solution_type();
}
::jmc_auto::drivers::gnss::config::Config_RtkSolutionType Config::rtk_solution_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Config.rtk_solution_type)
  return static_cast< ::jmc_auto::drivers::gnss::config::Config_RtkSolutionType >(rtk_solution_type_);
}
void Config::set_rtk_solution_type(::jmc_auto::drivers::gnss::config::Config_RtkSolutionType value) {
  assert(::jmc_auto::drivers::gnss::config::Config_RtkSolutionType_IsValid(value));
  set_has_rtk_solution_type();
  rtk_solution_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Config.rtk_solution_type)
}

// optional .jmc_auto.drivers.gnss.config.ImuType imu_type = 10;
bool Config::has_imu_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Config::set_has_imu_type() {
  _has_bits_[0] |= 0x00000100u;
}
void Config::clear_has_imu_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void Config::clear_imu_type() {
  imu_type_ = 13;
  clear_has_imu_type();
}
::jmc_auto::drivers::gnss::config::ImuType Config::imu_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Config.imu_type)
  return static_cast< ::jmc_auto::drivers::gnss::config::ImuType >(imu_type_);
}
void Config::set_imu_type(::jmc_auto::drivers::gnss::config::ImuType value) {
  assert(::jmc_auto::drivers::gnss::config::ImuType_IsValid(value));
  set_has_imu_type();
  imu_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Config.imu_type)
}

// optional string proj4_text = 11;
bool Config::has_proj4_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Config::set_has_proj4_text() {
  _has_bits_[0] |= 0x00000001u;
}
void Config::clear_has_proj4_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void Config::clear_proj4_text() {
  proj4_text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proj4_text();
}
const ::std::string& Config::proj4_text() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Config.proj4_text)
  return proj4_text_.GetNoArena();
}
void Config::set_proj4_text(const ::std::string& value) {
  set_has_proj4_text();
  proj4_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Config.proj4_text)
}
#if LANG_CXX11
void Config::set_proj4_text(::std::string&& value) {
  set_has_proj4_text();
  proj4_text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.gnss.config.Config.proj4_text)
}
#endif
void Config::set_proj4_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proj4_text();
  proj4_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.gnss.config.Config.proj4_text)
}
void Config::set_proj4_text(const char* value, size_t size) {
  set_has_proj4_text();
  proj4_text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.gnss.config.Config.proj4_text)
}
::std::string* Config::mutable_proj4_text() {
  set_has_proj4_text();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Config.proj4_text)
  return proj4_text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Config::release_proj4_text() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Config.proj4_text)
  clear_has_proj4_text();
  return proj4_text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Config::set_allocated_proj4_text(::std::string* proj4_text) {
  if (proj4_text != NULL) {
    set_has_proj4_text();
  } else {
    clear_has_proj4_text();
  }
  proj4_text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proj4_text);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Config.proj4_text)
}

// optional .jmc_auto.drivers.gnss.config.TF tf = 12;
bool Config::has_tf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Config::set_has_tf() {
  _has_bits_[0] |= 0x00000040u;
}
void Config::clear_has_tf() {
  _has_bits_[0] &= ~0x00000040u;
}
void Config::clear_tf() {
  if (tf_ != NULL) tf_->::jmc_auto::drivers::gnss::config::TF::Clear();
  clear_has_tf();
}
const ::jmc_auto::drivers::gnss::config::TF& Config::tf() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Config.tf)
  return tf_ != NULL ? *tf_
                         : *::jmc_auto::drivers::gnss::config::TF::internal_default_instance();
}
::jmc_auto::drivers::gnss::config::TF* Config::mutable_tf() {
  set_has_tf();
  if (tf_ == NULL) {
    tf_ = new ::jmc_auto::drivers::gnss::config::TF;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Config.tf)
  return tf_;
}
::jmc_auto::drivers::gnss::config::TF* Config::release_tf() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Config.tf)
  clear_has_tf();
  ::jmc_auto::drivers::gnss::config::TF* temp = tf_;
  tf_ = NULL;
  return temp;
}
void Config::set_allocated_tf(::jmc_auto::drivers::gnss::config::TF* tf) {
  delete tf_;
  tf_ = tf;
  if (tf) {
    set_has_tf();
  } else {
    clear_has_tf();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Config.tf)
}

// optional string wheel_parameters = 13;
bool Config::has_wheel_parameters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Config::set_has_wheel_parameters() {
  _has_bits_[0] |= 0x00000002u;
}
void Config::clear_has_wheel_parameters() {
  _has_bits_[0] &= ~0x00000002u;
}
void Config::clear_wheel_parameters() {
  wheel_parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_wheel_parameters();
}
const ::std::string& Config::wheel_parameters() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.config.Config.wheel_parameters)
  return wheel_parameters_.GetNoArena();
}
void Config::set_wheel_parameters(const ::std::string& value) {
  set_has_wheel_parameters();
  wheel_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.config.Config.wheel_parameters)
}
#if LANG_CXX11
void Config::set_wheel_parameters(::std::string&& value) {
  set_has_wheel_parameters();
  wheel_parameters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:jmc_auto.drivers.gnss.config.Config.wheel_parameters)
}
#endif
void Config::set_wheel_parameters(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_wheel_parameters();
  wheel_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:jmc_auto.drivers.gnss.config.Config.wheel_parameters)
}
void Config::set_wheel_parameters(const char* value, size_t size) {
  set_has_wheel_parameters();
  wheel_parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:jmc_auto.drivers.gnss.config.Config.wheel_parameters)
}
::std::string* Config::mutable_wheel_parameters() {
  set_has_wheel_parameters();
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.config.Config.wheel_parameters)
  return wheel_parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Config::release_wheel_parameters() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.config.Config.wheel_parameters)
  clear_has_wheel_parameters();
  return wheel_parameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Config::set_allocated_wheel_parameters(::std::string* wheel_parameters) {
  if (wheel_parameters != NULL) {
    set_has_wheel_parameters();
  } else {
    clear_has_wheel_parameters();
  }
  wheel_parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wheel_parameters);
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.config.Config.wheel_parameters)
}

bool Config::has_device_config() const {
  return device_config_case() != DEVICE_CONFIG_NOT_SET;
}
void Config::clear_has_device_config() {
  _oneof_case_[0] = DEVICE_CONFIG_NOT_SET;
}
Config::DeviceConfigCase Config::device_config_case() const {
  return Config::DeviceConfigCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace gnss
}  // namespace drivers
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
