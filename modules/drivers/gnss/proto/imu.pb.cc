// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/imu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/drivers/gnss/proto/imu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace drivers {
namespace gnss {
class ImuDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Imu> {
} _Imu_default_instance_;

namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fimu_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, measurement_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, measurement_span_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, linear_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imu, angular_velocity_),
  0,
  3,
  4,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 10, sizeof(Imu)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Imu_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/drivers/gnss/proto/imu.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _Imu_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::InitDefaults();
  _Imu_default_instance_.DefaultConstruct();
  _Imu_default_instance_.get_mutable()->header_ = const_cast< ::jmc_auto::common::Header*>(
      ::jmc_auto::common::Header::internal_default_instance());
  _Imu_default_instance_.get_mutable()->linear_acceleration_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _Imu_default_instance_.get_mutable()->angular_velocity_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n$modules/drivers/gnss/proto/imu.proto\022\025"
      "jmc_auto.drivers.gnss\032!modules/common/pr"
      "oto/header.proto\032#modules/common/proto/g"
      "eometry.proto\"\320\001\n\003Imu\022\'\n\006header\030\001 \001(\0132\027."
      "jmc_auto.common.Header\022\030\n\020measurement_ti"
      "me\030\002 \001(\001\022\033\n\020measurement_span\030\003 \001(\002:\0010\0225\n"
      "\023linear_acceleration\030\004 \001(\0132\030.jmc_auto.co"
      "mmon.Point3D\0222\n\020angular_velocity\030\005 \001(\0132\030"
      ".jmc_auto.common.Point3D"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 344);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/gnss/proto/imu.proto", &protobuf_RegisterTypes);
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fimu_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Imu::kHeaderFieldNumber;
const int Imu::kMeasurementTimeFieldNumber;
const int Imu::kMeasurementSpanFieldNumber;
const int Imu::kLinearAccelerationFieldNumber;
const int Imu::kAngularVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Imu::Imu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fimu_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.Imu)
}
Imu::Imu(const Imu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::jmc_auto::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_linear_acceleration()) {
    linear_acceleration_ = new ::jmc_auto::common::Point3D(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::jmc_auto::common::Point3D(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  ::memcpy(&measurement_time_, &from.measurement_time_,
    reinterpret_cast<char*>(&measurement_span_) -
    reinterpret_cast<char*>(&measurement_time_) + sizeof(measurement_span_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.Imu)
}

void Imu::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&measurement_span_) -
    reinterpret_cast<char*>(&header_) + sizeof(measurement_span_));
}

Imu::~Imu() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.Imu)
  SharedDtor();
}

void Imu::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete linear_acceleration_;
  }
  if (this != internal_default_instance()) {
    delete angular_velocity_;
  }
}

void Imu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Imu::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fimu_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fimu_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Imu& Imu::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fimu_2eproto::InitDefaults();
  return *internal_default_instance();
}

Imu* Imu::New(::google::protobuf::Arena* arena) const {
  Imu* n = new Imu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Imu::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.Imu)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::jmc_auto::common::Header::Clear();
    }
    if (has_linear_acceleration()) {
      GOOGLE_DCHECK(linear_acceleration_ != NULL);
      linear_acceleration_->::jmc_auto::common::Point3D::Clear();
    }
    if (has_angular_velocity()) {
      GOOGLE_DCHECK(angular_velocity_ != NULL);
      angular_velocity_->::jmc_auto::common::Point3D::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&measurement_time_, 0, reinterpret_cast<char*>(&measurement_span_) -
      reinterpret_cast<char*>(&measurement_time_) + sizeof(measurement_span_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Imu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.Imu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double measurement_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_measurement_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float measurement_span = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_measurement_span();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &measurement_span_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D linear_acceleration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D angular_velocity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.Imu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.Imu)
  return false;
#undef DO_
}

void Imu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.Imu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->measurement_time(), output);
  }

  // optional float measurement_span = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->measurement_span(), output);
  }

  // optional .jmc_auto.common.Point3D linear_acceleration = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->linear_acceleration_, output);
  }

  // optional .jmc_auto.common.Point3D angular_velocity = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->angular_velocity_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.Imu)
}

::google::protobuf::uint8* Imu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.Imu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->measurement_time(), target);
  }

  // optional float measurement_span = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->measurement_span(), target);
  }

  // optional .jmc_auto.common.Point3D linear_acceleration = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->linear_acceleration_, deterministic, target);
  }

  // optional .jmc_auto.common.Point3D angular_velocity = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->angular_velocity_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.Imu)
  return target;
}

size_t Imu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.Imu)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .jmc_auto.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .jmc_auto.common.Point3D linear_acceleration = 4;
    if (has_linear_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linear_acceleration_);
    }

    // optional .jmc_auto.common.Point3D angular_velocity = 5;
    if (has_angular_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angular_velocity_);
    }

    // optional double measurement_time = 2;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

    // optional float measurement_span = 3 [default = 0];
    if (has_measurement_span()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Imu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  const Imu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Imu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.Imu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.Imu)
    MergeFrom(*source);
  }
}

void Imu::MergeFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::jmc_auto::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_linear_acceleration()->::jmc_auto::common::Point3D::MergeFrom(from.linear_acceleration());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_angular_velocity()->::jmc_auto::common::Point3D::MergeFrom(from.angular_velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      measurement_time_ = from.measurement_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      measurement_span_ = from.measurement_span_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Imu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imu::CopyFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imu::IsInitialized() const {
  return true;
}

void Imu::Swap(Imu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Imu::InternalSwap(Imu* other) {
  std::swap(header_, other->header_);
  std::swap(linear_acceleration_, other->linear_acceleration_);
  std::swap(angular_velocity_, other->angular_velocity_);
  std::swap(measurement_time_, other->measurement_time_);
  std::swap(measurement_span_, other->measurement_span_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Imu::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fimu_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fimu_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Imu

// optional .jmc_auto.common.Header header = 1;
bool Imu::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Imu::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Imu::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Imu::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
const ::jmc_auto::common::Header& Imu::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Imu.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
::jmc_auto::common::Header* Imu::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.Imu.header)
  return header_;
}
::jmc_auto::common::Header* Imu::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.Imu.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Imu::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.Imu.header)
}

// optional double measurement_time = 2;
bool Imu::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Imu::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000008u;
}
void Imu::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void Imu::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
double Imu::measurement_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Imu.measurement_time)
  return measurement_time_;
}
void Imu::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.Imu.measurement_time)
}

// optional float measurement_span = 3 [default = 0];
bool Imu::has_measurement_span() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Imu::set_has_measurement_span() {
  _has_bits_[0] |= 0x00000010u;
}
void Imu::clear_has_measurement_span() {
  _has_bits_[0] &= ~0x00000010u;
}
void Imu::clear_measurement_span() {
  measurement_span_ = 0;
  clear_has_measurement_span();
}
float Imu::measurement_span() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Imu.measurement_span)
  return measurement_span_;
}
void Imu::set_measurement_span(float value) {
  set_has_measurement_span();
  measurement_span_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.Imu.measurement_span)
}

// optional .jmc_auto.common.Point3D linear_acceleration = 4;
bool Imu::has_linear_acceleration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Imu::set_has_linear_acceleration() {
  _has_bits_[0] |= 0x00000002u;
}
void Imu::clear_has_linear_acceleration() {
  _has_bits_[0] &= ~0x00000002u;
}
void Imu::clear_linear_acceleration() {
  if (linear_acceleration_ != NULL) linear_acceleration_->::jmc_auto::common::Point3D::Clear();
  clear_has_linear_acceleration();
}
const ::jmc_auto::common::Point3D& Imu::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Imu.linear_acceleration)
  return linear_acceleration_ != NULL ? *linear_acceleration_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* Imu::mutable_linear_acceleration() {
  set_has_linear_acceleration();
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.Imu.linear_acceleration)
  return linear_acceleration_;
}
::jmc_auto::common::Point3D* Imu::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.Imu.linear_acceleration)
  clear_has_linear_acceleration();
  ::jmc_auto::common::Point3D* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
void Imu::set_allocated_linear_acceleration(::jmc_auto::common::Point3D* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    set_has_linear_acceleration();
  } else {
    clear_has_linear_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.Imu.linear_acceleration)
}

// optional .jmc_auto.common.Point3D angular_velocity = 5;
bool Imu::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Imu::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
void Imu::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
void Imu::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->::jmc_auto::common::Point3D::Clear();
  clear_has_angular_velocity();
}
const ::jmc_auto::common::Point3D& Imu::angular_velocity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Imu.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* Imu::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.Imu.angular_velocity)
  return angular_velocity_;
}
::jmc_auto::common::Point3D* Imu::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.Imu.angular_velocity)
  clear_has_angular_velocity();
  ::jmc_auto::common::Point3D* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
void Imu::set_allocated_angular_velocity(::jmc_auto::common::Point3D* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.Imu.angular_velocity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace drivers
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
