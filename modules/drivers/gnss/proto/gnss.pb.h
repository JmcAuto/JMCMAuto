// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss.proto

#ifndef PROTOBUF_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto__INCLUDED
#define PROTOBUF_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)
namespace jmc_auto {
namespace common {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Point3D;
class Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class PointENU;
class PointENUDefaultTypeInternal;
extern PointENUDefaultTypeInternal _PointENU_default_instance_;
class PointLLH;
class PointLLHDefaultTypeInternal;
extern PointLLHDefaultTypeInternal _PointLLH_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
}  // namespace common
namespace drivers {
namespace gnss {
class Gnss;
class GnssDefaultTypeInternal;
extern GnssDefaultTypeInternal _Gnss_default_instance_;
class GnssRange;
class GnssRangeDefaultTypeInternal;
extern GnssRangeDefaultTypeInternal _GnssRange_default_instance_;
class RangeInfo;
class RangeInfoDefaultTypeInternal;
extern RangeInfoDefaultTypeInternal _RangeInfo_default_instance_;
}  // namespace gnss
}  // namespace drivers
}  // namespace jmc_auto

namespace jmc_auto {
namespace drivers {
namespace gnss {

namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto

enum Gnss_Type {
  Gnss_Type_INVALID = 0,
  Gnss_Type_PROPAGATED = 1,
  Gnss_Type_SINGLE = 2,
  Gnss_Type_PSRDIFF = 3,
  Gnss_Type_PPP = 4,
  Gnss_Type_RTK_FLOAT = 5,
  Gnss_Type_RTK_INTEGER = 6
};
bool Gnss_Type_IsValid(int value);
const Gnss_Type Gnss_Type_Type_MIN = Gnss_Type_INVALID;
const Gnss_Type Gnss_Type_Type_MAX = Gnss_Type_RTK_INTEGER;
const int Gnss_Type_Type_ARRAYSIZE = Gnss_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Gnss_Type_descriptor();
inline const ::std::string& Gnss_Type_Name(Gnss_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Gnss_Type_descriptor(), value);
}
inline bool Gnss_Type_Parse(
    const ::std::string& name, Gnss_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gnss_Type>(
    Gnss_Type_descriptor(), name, value);
}
enum RangeInfo_Constellation {
  RangeInfo_Constellation_GPS = 0,
  RangeInfo_Constellation_GLONASS = 1,
  RangeInfo_Constellation_SBAS = 2,
  RangeInfo_Constellation_GALILEO = 3,
  RangeInfo_Constellation_BEIDOU = 4,
  RangeInfo_Constellation_QZSS = 5
};
bool RangeInfo_Constellation_IsValid(int value);
const RangeInfo_Constellation RangeInfo_Constellation_Constellation_MIN = RangeInfo_Constellation_GPS;
const RangeInfo_Constellation RangeInfo_Constellation_Constellation_MAX = RangeInfo_Constellation_QZSS;
const int RangeInfo_Constellation_Constellation_ARRAYSIZE = RangeInfo_Constellation_Constellation_MAX + 1;

const ::google::protobuf::EnumDescriptor* RangeInfo_Constellation_descriptor();
inline const ::std::string& RangeInfo_Constellation_Name(RangeInfo_Constellation value) {
  return ::google::protobuf::internal::NameOfEnum(
    RangeInfo_Constellation_descriptor(), value);
}
inline bool RangeInfo_Constellation_Parse(
    const ::std::string& name, RangeInfo_Constellation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RangeInfo_Constellation>(
    RangeInfo_Constellation_descriptor(), name, value);
}
// ===================================================================

class Gnss : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.drivers.gnss.Gnss) */ {
 public:
  Gnss();
  virtual ~Gnss();

  Gnss(const Gnss& from);

  inline Gnss& operator=(const Gnss& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gnss& default_instance();

  static inline const Gnss* internal_default_instance() {
    return reinterpret_cast<const Gnss*>(
               &_Gnss_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Gnss* other);

  // implements Message ----------------------------------------------

  inline Gnss* New() const PROTOBUF_FINAL { return New(NULL); }

  Gnss* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Gnss& from);
  void MergeFrom(const Gnss& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Gnss* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Gnss_Type Type;
  static const Type INVALID =
    Gnss_Type_INVALID;
  static const Type PROPAGATED =
    Gnss_Type_PROPAGATED;
  static const Type SINGLE =
    Gnss_Type_SINGLE;
  static const Type PSRDIFF =
    Gnss_Type_PSRDIFF;
  static const Type PPP =
    Gnss_Type_PPP;
  static const Type RTK_FLOAT =
    Gnss_Type_RTK_FLOAT;
  static const Type RTK_INTEGER =
    Gnss_Type_RTK_INTEGER;
  static inline bool Type_IsValid(int value) {
    return Gnss_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Gnss_Type_Type_MIN;
  static const Type Type_MAX =
    Gnss_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Gnss_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Gnss_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Gnss_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Gnss_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::jmc_auto::common::Header& header() const;
  ::jmc_auto::common::Header* mutable_header();
  ::jmc_auto::common::Header* release_header();
  void set_allocated_header(::jmc_auto::common::Header* header);

  // optional .jmc_auto.common.PointLLH position = 4;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  const ::jmc_auto::common::PointLLH& position() const;
  ::jmc_auto::common::PointLLH* mutable_position();
  ::jmc_auto::common::PointLLH* release_position();
  void set_allocated_position(::jmc_auto::common::PointLLH* position);

  // optional .jmc_auto.common.Point3D position_std_dev = 5;
  bool has_position_std_dev() const;
  void clear_position_std_dev();
  static const int kPositionStdDevFieldNumber = 5;
  const ::jmc_auto::common::Point3D& position_std_dev() const;
  ::jmc_auto::common::Point3D* mutable_position_std_dev();
  ::jmc_auto::common::Point3D* release_position_std_dev();
  void set_allocated_position_std_dev(::jmc_auto::common::Point3D* position_std_dev);

  // optional .jmc_auto.common.Point3D linear_velocity = 6;
  bool has_linear_velocity() const;
  void clear_linear_velocity();
  static const int kLinearVelocityFieldNumber = 6;
  const ::jmc_auto::common::Point3D& linear_velocity() const;
  ::jmc_auto::common::Point3D* mutable_linear_velocity();
  ::jmc_auto::common::Point3D* release_linear_velocity();
  void set_allocated_linear_velocity(::jmc_auto::common::Point3D* linear_velocity);

  // optional .jmc_auto.common.Point3D linear_velocity_std_dev = 7;
  bool has_linear_velocity_std_dev() const;
  void clear_linear_velocity_std_dev();
  static const int kLinearVelocityStdDevFieldNumber = 7;
  const ::jmc_auto::common::Point3D& linear_velocity_std_dev() const;
  ::jmc_auto::common::Point3D* mutable_linear_velocity_std_dev();
  ::jmc_auto::common::Point3D* release_linear_velocity_std_dev();
  void set_allocated_linear_velocity_std_dev(::jmc_auto::common::Point3D* linear_velocity_std_dev);

  // optional double measurement_time = 2;
  bool has_measurement_time() const;
  void clear_measurement_time();
  static const int kMeasurementTimeFieldNumber = 2;
  double measurement_time() const;
  void set_measurement_time(double value);

  // optional float velocity_latency = 3 [default = 0];
  bool has_velocity_latency() const;
  void clear_velocity_latency();
  static const int kVelocityLatencyFieldNumber = 3;
  float velocity_latency() const;
  void set_velocity_latency(float value);

  // optional int32 num_sats = 8;
  bool has_num_sats() const;
  void clear_num_sats();
  static const int kNumSatsFieldNumber = 8;
  ::google::protobuf::int32 num_sats() const;
  void set_num_sats(::google::protobuf::int32 value);

  // optional .jmc_auto.drivers.gnss.Gnss.Type type = 9;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  ::jmc_auto::drivers::gnss::Gnss_Type type() const;
  void set_type(::jmc_auto::drivers::gnss::Gnss_Type value);

  // optional uint32 solution_status = 10;
  bool has_solution_status() const;
  void clear_solution_status();
  static const int kSolutionStatusFieldNumber = 10;
  ::google::protobuf::uint32 solution_status() const;
  void set_solution_status(::google::protobuf::uint32 value);

  // optional uint32 position_type = 11;
  bool has_position_type() const;
  void clear_position_type();
  static const int kPositionTypeFieldNumber = 11;
  ::google::protobuf::uint32 position_type() const;
  void set_position_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.drivers.gnss.Gnss)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_measurement_time();
  void clear_has_measurement_time();
  void set_has_velocity_latency();
  void clear_has_velocity_latency();
  void set_has_position();
  void clear_has_position();
  void set_has_position_std_dev();
  void clear_has_position_std_dev();
  void set_has_linear_velocity();
  void clear_has_linear_velocity();
  void set_has_linear_velocity_std_dev();
  void clear_has_linear_velocity_std_dev();
  void set_has_num_sats();
  void clear_has_num_sats();
  void set_has_type();
  void clear_has_type();
  void set_has_solution_status();
  void clear_has_solution_status();
  void set_has_position_type();
  void clear_has_position_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::jmc_auto::common::Header* header_;
  ::jmc_auto::common::PointLLH* position_;
  ::jmc_auto::common::Point3D* position_std_dev_;
  ::jmc_auto::common::Point3D* linear_velocity_;
  ::jmc_auto::common::Point3D* linear_velocity_std_dev_;
  double measurement_time_;
  float velocity_latency_;
  ::google::protobuf::int32 num_sats_;
  int type_;
  ::google::protobuf::uint32 solution_status_;
  ::google::protobuf::uint32 position_type_;
  friend struct protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RangeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.drivers.gnss.RangeInfo) */ {
 public:
  RangeInfo();
  virtual ~RangeInfo();

  RangeInfo(const RangeInfo& from);

  inline RangeInfo& operator=(const RangeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RangeInfo& default_instance();

  static inline const RangeInfo* internal_default_instance() {
    return reinterpret_cast<const RangeInfo*>(
               &_RangeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RangeInfo* other);

  // implements Message ----------------------------------------------

  inline RangeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RangeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RangeInfo& from);
  void MergeFrom(const RangeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RangeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RangeInfo_Constellation Constellation;
  static const Constellation GPS =
    RangeInfo_Constellation_GPS;
  static const Constellation GLONASS =
    RangeInfo_Constellation_GLONASS;
  static const Constellation SBAS =
    RangeInfo_Constellation_SBAS;
  static const Constellation GALILEO =
    RangeInfo_Constellation_GALILEO;
  static const Constellation BEIDOU =
    RangeInfo_Constellation_BEIDOU;
  static const Constellation QZSS =
    RangeInfo_Constellation_QZSS;
  static inline bool Constellation_IsValid(int value) {
    return RangeInfo_Constellation_IsValid(value);
  }
  static const Constellation Constellation_MIN =
    RangeInfo_Constellation_Constellation_MIN;
  static const Constellation Constellation_MAX =
    RangeInfo_Constellation_Constellation_MAX;
  static const int Constellation_ARRAYSIZE =
    RangeInfo_Constellation_Constellation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Constellation_descriptor() {
    return RangeInfo_Constellation_descriptor();
  }
  static inline const ::std::string& Constellation_Name(Constellation value) {
    return RangeInfo_Constellation_Name(value);
  }
  static inline bool Constellation_Parse(const ::std::string& name,
      Constellation* value) {
    return RangeInfo_Constellation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .jmc_auto.drivers.gnss.RangeInfo.Constellation constellation = 1 [default = GPS];
  bool has_constellation() const;
  void clear_constellation();
  static const int kConstellationFieldNumber = 1;
  ::jmc_auto::drivers::gnss::RangeInfo_Constellation constellation() const;
  void set_constellation(::jmc_auto::drivers::gnss::RangeInfo_Constellation value);

  // optional int32 prn = 2;
  bool has_prn() const;
  void clear_prn();
  static const int kPrnFieldNumber = 2;
  ::google::protobuf::int32 prn() const;
  void set_prn(::google::protobuf::int32 value);

  // optional fixed32 carrier_frequency = 3;
  bool has_carrier_frequency() const;
  void clear_carrier_frequency();
  static const int kCarrierFrequencyFieldNumber = 3;
  ::google::protobuf::uint32 carrier_frequency() const;
  void set_carrier_frequency(::google::protobuf::uint32 value);

  // optional double pseudorange = 4 [default = nan];
  bool has_pseudorange() const;
  void clear_pseudorange();
  static const int kPseudorangeFieldNumber = 4;
  double pseudorange() const;
  void set_pseudorange(double value);

  // optional double carrier_phase = 6 [default = nan];
  bool has_carrier_phase() const;
  void clear_carrier_phase();
  static const int kCarrierPhaseFieldNumber = 6;
  double carrier_phase() const;
  void set_carrier_phase(double value);

  // optional float pseudorange_std_dev = 5 [default = nan];
  bool has_pseudorange_std_dev() const;
  void clear_pseudorange_std_dev();
  static const int kPseudorangeStdDevFieldNumber = 5;
  float pseudorange_std_dev() const;
  void set_pseudorange_std_dev(float value);

  // optional float carrier_phase_std_dev = 7 [default = nan];
  bool has_carrier_phase_std_dev() const;
  void clear_carrier_phase_std_dev();
  static const int kCarrierPhaseStdDevFieldNumber = 7;
  float carrier_phase_std_dev() const;
  void set_carrier_phase_std_dev(float value);

  // optional float doppler = 8 [default = nan];
  bool has_doppler() const;
  void clear_doppler();
  static const int kDopplerFieldNumber = 8;
  float doppler() const;
  void set_doppler(float value);

  // optional float doppler_std_dev = 9 [default = nan];
  bool has_doppler_std_dev() const;
  void clear_doppler_std_dev();
  static const int kDopplerStdDevFieldNumber = 9;
  float doppler_std_dev() const;
  void set_doppler_std_dev(float value);

  // optional int32 cno = 10 [default = -1];
  bool has_cno() const;
  void clear_cno();
  static const int kCnoFieldNumber = 10;
  ::google::protobuf::int32 cno() const;
  void set_cno(::google::protobuf::int32 value);

  // optional int32 lock_time = 11 [default = -1];
  bool has_lock_time() const;
  void clear_lock_time();
  static const int kLockTimeFieldNumber = 11;
  ::google::protobuf::int32 lock_time() const;
  void set_lock_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:jmc_auto.drivers.gnss.RangeInfo)
 private:
  void set_has_constellation();
  void clear_has_constellation();
  void set_has_prn();
  void clear_has_prn();
  void set_has_carrier_frequency();
  void clear_has_carrier_frequency();
  void set_has_pseudorange();
  void clear_has_pseudorange();
  void set_has_pseudorange_std_dev();
  void clear_has_pseudorange_std_dev();
  void set_has_carrier_phase();
  void clear_has_carrier_phase();
  void set_has_carrier_phase_std_dev();
  void clear_has_carrier_phase_std_dev();
  void set_has_doppler();
  void clear_has_doppler();
  void set_has_doppler_std_dev();
  void clear_has_doppler_std_dev();
  void set_has_cno();
  void clear_has_cno();
  void set_has_lock_time();
  void clear_has_lock_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int constellation_;
  ::google::protobuf::int32 prn_;
  ::google::protobuf::uint32 carrier_frequency_;
  double pseudorange_;
  double carrier_phase_;
  float pseudorange_std_dev_;
  float carrier_phase_std_dev_;
  float doppler_;
  float doppler_std_dev_;
  ::google::protobuf::int32 cno_;
  ::google::protobuf::int32 lock_time_;
  friend struct protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GnssRange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:jmc_auto.drivers.gnss.GnssRange) */ {
 public:
  GnssRange();
  virtual ~GnssRange();

  GnssRange(const GnssRange& from);

  inline GnssRange& operator=(const GnssRange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GnssRange& default_instance();

  static inline const GnssRange* internal_default_instance() {
    return reinterpret_cast<const GnssRange*>(
               &_GnssRange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GnssRange* other);

  // implements Message ----------------------------------------------

  inline GnssRange* New() const PROTOBUF_FINAL { return New(NULL); }

  GnssRange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GnssRange& from);
  void MergeFrom(const GnssRange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GnssRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .jmc_auto.drivers.gnss.RangeInfo ranges = 3;
  int ranges_size() const;
  void clear_ranges();
  static const int kRangesFieldNumber = 3;
  const ::jmc_auto::drivers::gnss::RangeInfo& ranges(int index) const;
  ::jmc_auto::drivers::gnss::RangeInfo* mutable_ranges(int index);
  ::jmc_auto::drivers::gnss::RangeInfo* add_ranges();
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::drivers::gnss::RangeInfo >*
      mutable_ranges();
  const ::google::protobuf::RepeatedPtrField< ::jmc_auto::drivers::gnss::RangeInfo >&
      ranges() const;

  // optional .jmc_auto.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::jmc_auto::common::Header& header() const;
  ::jmc_auto::common::Header* mutable_header();
  ::jmc_auto::common::Header* release_header();
  void set_allocated_header(::jmc_auto::common::Header* header);

  // optional double measurement_time = 2;
  bool has_measurement_time() const;
  void clear_measurement_time();
  static const int kMeasurementTimeFieldNumber = 2;
  double measurement_time() const;
  void set_measurement_time(double value);

  // @@protoc_insertion_point(class_scope:jmc_auto.drivers.gnss.GnssRange)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_measurement_time();
  void clear_has_measurement_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::jmc_auto::drivers::gnss::RangeInfo > ranges_;
  ::jmc_auto::common::Header* header_;
  double measurement_time_;
  friend struct protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Gnss

// optional .jmc_auto.common.Header header = 1;
inline bool Gnss::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gnss::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gnss::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gnss::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
inline const ::jmc_auto::common::Header& Gnss::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Gnss.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
inline ::jmc_auto::common::Header* Gnss::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.Gnss.header)
  return header_;
}
inline ::jmc_auto::common::Header* Gnss::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.Gnss.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Gnss::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.Gnss.header)
}

// optional double measurement_time = 2;
inline bool Gnss::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Gnss::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Gnss::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Gnss::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
inline double Gnss::measurement_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Gnss.measurement_time)
  return measurement_time_;
}
inline void Gnss::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.Gnss.measurement_time)
}

// optional float velocity_latency = 3 [default = 0];
inline bool Gnss::has_velocity_latency() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Gnss::set_has_velocity_latency() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Gnss::clear_has_velocity_latency() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Gnss::clear_velocity_latency() {
  velocity_latency_ = 0;
  clear_has_velocity_latency();
}
inline float Gnss::velocity_latency() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Gnss.velocity_latency)
  return velocity_latency_;
}
inline void Gnss::set_velocity_latency(float value) {
  set_has_velocity_latency();
  velocity_latency_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.Gnss.velocity_latency)
}

// optional .jmc_auto.common.PointLLH position = 4;
inline bool Gnss::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gnss::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gnss::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gnss::clear_position() {
  if (position_ != NULL) position_->::jmc_auto::common::PointLLH::Clear();
  clear_has_position();
}
inline const ::jmc_auto::common::PointLLH& Gnss::position() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Gnss.position)
  return position_ != NULL ? *position_
                         : *::jmc_auto::common::PointLLH::internal_default_instance();
}
inline ::jmc_auto::common::PointLLH* Gnss::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::jmc_auto::common::PointLLH;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.Gnss.position)
  return position_;
}
inline ::jmc_auto::common::PointLLH* Gnss::release_position() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.Gnss.position)
  clear_has_position();
  ::jmc_auto::common::PointLLH* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Gnss::set_allocated_position(::jmc_auto::common::PointLLH* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.Gnss.position)
}

// optional .jmc_auto.common.Point3D position_std_dev = 5;
inline bool Gnss::has_position_std_dev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Gnss::set_has_position_std_dev() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Gnss::clear_has_position_std_dev() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Gnss::clear_position_std_dev() {
  if (position_std_dev_ != NULL) position_std_dev_->::jmc_auto::common::Point3D::Clear();
  clear_has_position_std_dev();
}
inline const ::jmc_auto::common::Point3D& Gnss::position_std_dev() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Gnss.position_std_dev)
  return position_std_dev_ != NULL ? *position_std_dev_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
inline ::jmc_auto::common::Point3D* Gnss::mutable_position_std_dev() {
  set_has_position_std_dev();
  if (position_std_dev_ == NULL) {
    position_std_dev_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.Gnss.position_std_dev)
  return position_std_dev_;
}
inline ::jmc_auto::common::Point3D* Gnss::release_position_std_dev() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.Gnss.position_std_dev)
  clear_has_position_std_dev();
  ::jmc_auto::common::Point3D* temp = position_std_dev_;
  position_std_dev_ = NULL;
  return temp;
}
inline void Gnss::set_allocated_position_std_dev(::jmc_auto::common::Point3D* position_std_dev) {
  delete position_std_dev_;
  position_std_dev_ = position_std_dev;
  if (position_std_dev) {
    set_has_position_std_dev();
  } else {
    clear_has_position_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.Gnss.position_std_dev)
}

// optional .jmc_auto.common.Point3D linear_velocity = 6;
inline bool Gnss::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Gnss::set_has_linear_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Gnss::clear_has_linear_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Gnss::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->::jmc_auto::common::Point3D::Clear();
  clear_has_linear_velocity();
}
inline const ::jmc_auto::common::Point3D& Gnss::linear_velocity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Gnss.linear_velocity)
  return linear_velocity_ != NULL ? *linear_velocity_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
inline ::jmc_auto::common::Point3D* Gnss::mutable_linear_velocity() {
  set_has_linear_velocity();
  if (linear_velocity_ == NULL) {
    linear_velocity_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.Gnss.linear_velocity)
  return linear_velocity_;
}
inline ::jmc_auto::common::Point3D* Gnss::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.Gnss.linear_velocity)
  clear_has_linear_velocity();
  ::jmc_auto::common::Point3D* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
inline void Gnss::set_allocated_linear_velocity(::jmc_auto::common::Point3D* linear_velocity) {
  delete linear_velocity_;
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    set_has_linear_velocity();
  } else {
    clear_has_linear_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.Gnss.linear_velocity)
}

// optional .jmc_auto.common.Point3D linear_velocity_std_dev = 7;
inline bool Gnss::has_linear_velocity_std_dev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Gnss::set_has_linear_velocity_std_dev() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Gnss::clear_has_linear_velocity_std_dev() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Gnss::clear_linear_velocity_std_dev() {
  if (linear_velocity_std_dev_ != NULL) linear_velocity_std_dev_->::jmc_auto::common::Point3D::Clear();
  clear_has_linear_velocity_std_dev();
}
inline const ::jmc_auto::common::Point3D& Gnss::linear_velocity_std_dev() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Gnss.linear_velocity_std_dev)
  return linear_velocity_std_dev_ != NULL ? *linear_velocity_std_dev_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
inline ::jmc_auto::common::Point3D* Gnss::mutable_linear_velocity_std_dev() {
  set_has_linear_velocity_std_dev();
  if (linear_velocity_std_dev_ == NULL) {
    linear_velocity_std_dev_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.Gnss.linear_velocity_std_dev)
  return linear_velocity_std_dev_;
}
inline ::jmc_auto::common::Point3D* Gnss::release_linear_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.Gnss.linear_velocity_std_dev)
  clear_has_linear_velocity_std_dev();
  ::jmc_auto::common::Point3D* temp = linear_velocity_std_dev_;
  linear_velocity_std_dev_ = NULL;
  return temp;
}
inline void Gnss::set_allocated_linear_velocity_std_dev(::jmc_auto::common::Point3D* linear_velocity_std_dev) {
  delete linear_velocity_std_dev_;
  linear_velocity_std_dev_ = linear_velocity_std_dev;
  if (linear_velocity_std_dev) {
    set_has_linear_velocity_std_dev();
  } else {
    clear_has_linear_velocity_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.Gnss.linear_velocity_std_dev)
}

// optional int32 num_sats = 8;
inline bool Gnss::has_num_sats() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Gnss::set_has_num_sats() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Gnss::clear_has_num_sats() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Gnss::clear_num_sats() {
  num_sats_ = 0;
  clear_has_num_sats();
}
inline ::google::protobuf::int32 Gnss::num_sats() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Gnss.num_sats)
  return num_sats_;
}
inline void Gnss::set_num_sats(::google::protobuf::int32 value) {
  set_has_num_sats();
  num_sats_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.Gnss.num_sats)
}

// optional .jmc_auto.drivers.gnss.Gnss.Type type = 9;
inline bool Gnss::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Gnss::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Gnss::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Gnss::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::jmc_auto::drivers::gnss::Gnss_Type Gnss::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Gnss.type)
  return static_cast< ::jmc_auto::drivers::gnss::Gnss_Type >(type_);
}
inline void Gnss::set_type(::jmc_auto::drivers::gnss::Gnss_Type value) {
  assert(::jmc_auto::drivers::gnss::Gnss_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.Gnss.type)
}

// optional uint32 solution_status = 10;
inline bool Gnss::has_solution_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Gnss::set_has_solution_status() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Gnss::clear_has_solution_status() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Gnss::clear_solution_status() {
  solution_status_ = 0u;
  clear_has_solution_status();
}
inline ::google::protobuf::uint32 Gnss::solution_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Gnss.solution_status)
  return solution_status_;
}
inline void Gnss::set_solution_status(::google::protobuf::uint32 value) {
  set_has_solution_status();
  solution_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.Gnss.solution_status)
}

// optional uint32 position_type = 11;
inline bool Gnss::has_position_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Gnss::set_has_position_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Gnss::clear_has_position_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Gnss::clear_position_type() {
  position_type_ = 0u;
  clear_has_position_type();
}
inline ::google::protobuf::uint32 Gnss::position_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Gnss.position_type)
  return position_type_;
}
inline void Gnss::set_position_type(::google::protobuf::uint32 value) {
  set_has_position_type();
  position_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.Gnss.position_type)
}

// -------------------------------------------------------------------

// RangeInfo

// optional .jmc_auto.drivers.gnss.RangeInfo.Constellation constellation = 1 [default = GPS];
inline bool RangeInfo::has_constellation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RangeInfo::set_has_constellation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RangeInfo::clear_has_constellation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RangeInfo::clear_constellation() {
  constellation_ = 0;
  clear_has_constellation();
}
inline ::jmc_auto::drivers::gnss::RangeInfo_Constellation RangeInfo::constellation() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.RangeInfo.constellation)
  return static_cast< ::jmc_auto::drivers::gnss::RangeInfo_Constellation >(constellation_);
}
inline void RangeInfo::set_constellation(::jmc_auto::drivers::gnss::RangeInfo_Constellation value) {
  assert(::jmc_auto::drivers::gnss::RangeInfo_Constellation_IsValid(value));
  set_has_constellation();
  constellation_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.RangeInfo.constellation)
}

// optional int32 prn = 2;
inline bool RangeInfo::has_prn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RangeInfo::set_has_prn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RangeInfo::clear_has_prn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RangeInfo::clear_prn() {
  prn_ = 0;
  clear_has_prn();
}
inline ::google::protobuf::int32 RangeInfo::prn() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.RangeInfo.prn)
  return prn_;
}
inline void RangeInfo::set_prn(::google::protobuf::int32 value) {
  set_has_prn();
  prn_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.RangeInfo.prn)
}

// optional fixed32 carrier_frequency = 3;
inline bool RangeInfo::has_carrier_frequency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RangeInfo::set_has_carrier_frequency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RangeInfo::clear_has_carrier_frequency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RangeInfo::clear_carrier_frequency() {
  carrier_frequency_ = 0u;
  clear_has_carrier_frequency();
}
inline ::google::protobuf::uint32 RangeInfo::carrier_frequency() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.RangeInfo.carrier_frequency)
  return carrier_frequency_;
}
inline void RangeInfo::set_carrier_frequency(::google::protobuf::uint32 value) {
  set_has_carrier_frequency();
  carrier_frequency_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.RangeInfo.carrier_frequency)
}

// optional double pseudorange = 4 [default = nan];
inline bool RangeInfo::has_pseudorange() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RangeInfo::set_has_pseudorange() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RangeInfo::clear_has_pseudorange() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RangeInfo::clear_pseudorange() {
  pseudorange_ = ::google::protobuf::internal::NaN();
  clear_has_pseudorange();
}
inline double RangeInfo::pseudorange() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.RangeInfo.pseudorange)
  return pseudorange_;
}
inline void RangeInfo::set_pseudorange(double value) {
  set_has_pseudorange();
  pseudorange_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.RangeInfo.pseudorange)
}

// optional float pseudorange_std_dev = 5 [default = nan];
inline bool RangeInfo::has_pseudorange_std_dev() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RangeInfo::set_has_pseudorange_std_dev() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RangeInfo::clear_has_pseudorange_std_dev() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RangeInfo::clear_pseudorange_std_dev() {
  pseudorange_std_dev_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_pseudorange_std_dev();
}
inline float RangeInfo::pseudorange_std_dev() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.RangeInfo.pseudorange_std_dev)
  return pseudorange_std_dev_;
}
inline void RangeInfo::set_pseudorange_std_dev(float value) {
  set_has_pseudorange_std_dev();
  pseudorange_std_dev_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.RangeInfo.pseudorange_std_dev)
}

// optional double carrier_phase = 6 [default = nan];
inline bool RangeInfo::has_carrier_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RangeInfo::set_has_carrier_phase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RangeInfo::clear_has_carrier_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RangeInfo::clear_carrier_phase() {
  carrier_phase_ = ::google::protobuf::internal::NaN();
  clear_has_carrier_phase();
}
inline double RangeInfo::carrier_phase() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.RangeInfo.carrier_phase)
  return carrier_phase_;
}
inline void RangeInfo::set_carrier_phase(double value) {
  set_has_carrier_phase();
  carrier_phase_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.RangeInfo.carrier_phase)
}

// optional float carrier_phase_std_dev = 7 [default = nan];
inline bool RangeInfo::has_carrier_phase_std_dev() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RangeInfo::set_has_carrier_phase_std_dev() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RangeInfo::clear_has_carrier_phase_std_dev() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RangeInfo::clear_carrier_phase_std_dev() {
  carrier_phase_std_dev_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_carrier_phase_std_dev();
}
inline float RangeInfo::carrier_phase_std_dev() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.RangeInfo.carrier_phase_std_dev)
  return carrier_phase_std_dev_;
}
inline void RangeInfo::set_carrier_phase_std_dev(float value) {
  set_has_carrier_phase_std_dev();
  carrier_phase_std_dev_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.RangeInfo.carrier_phase_std_dev)
}

// optional float doppler = 8 [default = nan];
inline bool RangeInfo::has_doppler() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RangeInfo::set_has_doppler() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RangeInfo::clear_has_doppler() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RangeInfo::clear_doppler() {
  doppler_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_doppler();
}
inline float RangeInfo::doppler() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.RangeInfo.doppler)
  return doppler_;
}
inline void RangeInfo::set_doppler(float value) {
  set_has_doppler();
  doppler_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.RangeInfo.doppler)
}

// optional float doppler_std_dev = 9 [default = nan];
inline bool RangeInfo::has_doppler_std_dev() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RangeInfo::set_has_doppler_std_dev() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RangeInfo::clear_has_doppler_std_dev() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RangeInfo::clear_doppler_std_dev() {
  doppler_std_dev_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_doppler_std_dev();
}
inline float RangeInfo::doppler_std_dev() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.RangeInfo.doppler_std_dev)
  return doppler_std_dev_;
}
inline void RangeInfo::set_doppler_std_dev(float value) {
  set_has_doppler_std_dev();
  doppler_std_dev_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.RangeInfo.doppler_std_dev)
}

// optional int32 cno = 10 [default = -1];
inline bool RangeInfo::has_cno() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RangeInfo::set_has_cno() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RangeInfo::clear_has_cno() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RangeInfo::clear_cno() {
  cno_ = -1;
  clear_has_cno();
}
inline ::google::protobuf::int32 RangeInfo::cno() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.RangeInfo.cno)
  return cno_;
}
inline void RangeInfo::set_cno(::google::protobuf::int32 value) {
  set_has_cno();
  cno_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.RangeInfo.cno)
}

// optional int32 lock_time = 11 [default = -1];
inline bool RangeInfo::has_lock_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RangeInfo::set_has_lock_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RangeInfo::clear_has_lock_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RangeInfo::clear_lock_time() {
  lock_time_ = -1;
  clear_has_lock_time();
}
inline ::google::protobuf::int32 RangeInfo::lock_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.RangeInfo.lock_time)
  return lock_time_;
}
inline void RangeInfo::set_lock_time(::google::protobuf::int32 value) {
  set_has_lock_time();
  lock_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.RangeInfo.lock_time)
}

// -------------------------------------------------------------------

// GnssRange

// optional .jmc_auto.common.Header header = 1;
inline bool GnssRange::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GnssRange::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GnssRange::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GnssRange::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
inline const ::jmc_auto::common::Header& GnssRange::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GnssRange.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
inline ::jmc_auto::common::Header* GnssRange::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.GnssRange.header)
  return header_;
}
inline ::jmc_auto::common::Header* GnssRange::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.GnssRange.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GnssRange::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.GnssRange.header)
}

// optional double measurement_time = 2;
inline bool GnssRange::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GnssRange::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GnssRange::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GnssRange::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
inline double GnssRange::measurement_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GnssRange.measurement_time)
  return measurement_time_;
}
inline void GnssRange::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GnssRange.measurement_time)
}

// repeated .jmc_auto.drivers.gnss.RangeInfo ranges = 3;
inline int GnssRange::ranges_size() const {
  return ranges_.size();
}
inline void GnssRange::clear_ranges() {
  ranges_.Clear();
}
inline const ::jmc_auto::drivers::gnss::RangeInfo& GnssRange::ranges(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GnssRange.ranges)
  return ranges_.Get(index);
}
inline ::jmc_auto::drivers::gnss::RangeInfo* GnssRange::mutable_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.GnssRange.ranges)
  return ranges_.Mutable(index);
}
inline ::jmc_auto::drivers::gnss::RangeInfo* GnssRange::add_ranges() {
  // @@protoc_insertion_point(field_add:jmc_auto.drivers.gnss.GnssRange.ranges)
  return ranges_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::jmc_auto::drivers::gnss::RangeInfo >*
GnssRange::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.drivers.gnss.GnssRange.ranges)
  return &ranges_;
}
inline const ::google::protobuf::RepeatedPtrField< ::jmc_auto::drivers::gnss::RangeInfo >&
GnssRange::ranges() const {
  // @@protoc_insertion_point(field_list:jmc_auto.drivers.gnss.GnssRange.ranges)
  return ranges_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace gnss
}  // namespace drivers
}  // namespace jmc_auto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::jmc_auto::drivers::gnss::Gnss_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::drivers::gnss::Gnss_Type>() {
  return ::jmc_auto::drivers::gnss::Gnss_Type_descriptor();
}
template <> struct is_proto_enum< ::jmc_auto::drivers::gnss::RangeInfo_Constellation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::jmc_auto::drivers::gnss::RangeInfo_Constellation>() {
  return ::jmc_auto::drivers::gnss::RangeInfo_Constellation_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fdrivers_2fgnss_2fproto_2fgnss_2eproto__INCLUDED
