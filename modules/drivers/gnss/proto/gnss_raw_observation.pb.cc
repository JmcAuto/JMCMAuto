// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/gnss_raw_observation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/drivers/gnss/proto/gnss_raw_observation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace drivers {
namespace gnss {
class BandObservationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BandObservation> {
} _BandObservation_default_instance_;
class SatelliteObservationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SatelliteObservation> {
} _SatelliteObservation_default_instance_;
class EpochObservationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EpochObservation> {
} _EpochObservation_default_instance_;
class KepplerOrbitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KepplerOrbit> {
} _KepplerOrbit_default_instance_;
class GlonassOrbitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GlonassOrbit> {
} _GlonassOrbit_default_instance_;
class GnssEphemerisDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GnssEphemeris> {
} _GnssEphemeris_default_instance_;

namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, band_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, frequency_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, pseudo_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, pseudo_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, carrier_phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, loss_lock_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, doppler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BandObservation, snr_),
  1,
  0,
  2,
  3,
  4,
  6,
  5,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, sat_prn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, sat_sys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, band_obs_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SatelliteObservation, band_obs_),
  0,
  2,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, receiver_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, gnss_time_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, gnss_week_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, gnss_second_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, position_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, position_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, position_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, health_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, sat_obs_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EpochObservation, sat_obs_),
  0,
  8,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, gnss_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, sat_prn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, gnss_time_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, second_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, week_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, reserved_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, af0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, af1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, af2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, iode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, deltan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, m0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, e_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, roota_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, toe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, toc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, cic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, cis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, crs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, cuc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, cus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, omega0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, omega_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, i0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, omegadot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, idot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, codesonl2channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, l2pdataflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, accuracy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, tgd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KepplerOrbit, iodc_),
  36,
  0,
  37,
  1,
  2,
  3,
  4,
  5,
  6,
  19,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  20,
  32,
  33,
  34,
  35,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, gnss_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, slot_prn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, gnss_time_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, toe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, year_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, month_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, hour_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, second_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, frequency_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, week_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, week_second_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, tk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, clock_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, clock_drift_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, position_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, position_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, position_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, velocity_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, velocity_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, velocity_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, accelerate_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, accelerate_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, accelerate_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlonassOrbit, infor_age_),
  25,
  0,
  26,
  2,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  24,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssEphemeris, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssEphemeris, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssEphemeris, gnss_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssEphemeris, keppler_orbit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GnssEphemeris, glonass_orbit_),
  2,
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 13, sizeof(BandObservation)},
  { 21, 30, sizeof(SatelliteObservation)},
  { 34, 49, sizeof(EpochObservation)},
  { 59, 102, sizeof(KepplerOrbit)},
  { 140, 172, sizeof(GlonassOrbit)},
  { 199, 207, sizeof(GnssEphemeris)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BandObservation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SatelliteObservation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EpochObservation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KepplerOrbit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GlonassOrbit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GnssEphemeris_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/drivers/gnss/proto/gnss_raw_observation.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _BandObservation_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SatelliteObservation_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _EpochObservation_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _KepplerOrbit_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _GlonassOrbit_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _GnssEphemeris_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _BandObservation_default_instance_.DefaultConstruct();
  _SatelliteObservation_default_instance_.DefaultConstruct();
  _EpochObservation_default_instance_.DefaultConstruct();
  _KepplerOrbit_default_instance_.DefaultConstruct();
  _GlonassOrbit_default_instance_.DefaultConstruct();
  _GnssEphemeris_default_instance_.DefaultConstruct();
  _GnssEphemeris_default_instance_.get_mutable()->keppler_orbit_ = const_cast< ::jmc_auto::drivers::gnss::KepplerOrbit*>(
      ::jmc_auto::drivers::gnss::KepplerOrbit::internal_default_instance());
  _GnssEphemeris_default_instance_.get_mutable()->glonass_orbit_ = const_cast< ::jmc_auto::drivers::gnss::GlonassOrbit*>(
      ::jmc_auto::drivers::gnss::GlonassOrbit::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n5modules/drivers/gnss/proto/gnss_raw_ob"
      "servation.proto\022\025jmc_auto.drivers.gnss\"\226"
      "\002\n\017BandObservation\022@\n\007band_id\030\001 \001(\0162!.jm"
      "c_auto.drivers.gnss.GnssBandID:\014BAND_UNK"
      "NOWN\022\027\n\017frequency_value\030\002 \001(\001\022D\n\013pseudo_"
      "type\030\003 \001(\0162!.jmc_auto.drivers.gnss.Pseud"
      "oType:\014CODE_UNKNOWN\022\024\n\014pseudo_range\030\004 \001("
      "\001\022\025\n\rcarrier_phase\030\005 \001(\001\022\027\n\017loss_lock_in"
      "dex\030\006 \001(\r\022\017\n\007doppler\030\007 \001(\001\022\013\n\003snr\030\010 \001(\002\""
      "\262\001\n\024SatelliteObservation\022\017\n\007sat_prn\030\001 \001("
      "\r\0229\n\007sat_sys\030\002 \001(\0162\037.jmc_auto.drivers.gn"
      "ss.GnssType:\007GPS_SYS\022\024\n\014band_obs_num\030\003 \001"
      "(\r\0228\n\010band_obs\030\004 \003(\0132&.jmc_auto.drivers."
      "gnss.BandObservation\"\277\002\n\020EpochObservatio"
      "n\022\023\n\013receiver_id\030\001 \001(\r\022E\n\016gnss_time_type"
      "\030\002 \001(\0162#.jmc_auto.drivers.gnss.GnssTimeT"
      "ype:\010GPS_TIME\022\021\n\tgnss_week\030\003 \001(\r\022\025\n\rgnss"
      "_second_s\030\004 \001(\001\022\022\n\nposition_x\030\005 \001(\001\022\022\n\np"
      "osition_y\030\006 \001(\001\022\022\n\nposition_z\030\007 \001(\001\022\026\n\013h"
      "ealth_flag\030\010 \001(\r:\0010\022\023\n\013sat_obs_num\030\t \001(\r"
      "\022<\n\007sat_obs\030\n \003(\0132+.jmc_auto.drivers.gns"
      "s.SatelliteObservation\"\253\005\n\014KepplerOrbit\022"
      ";\n\tgnss_type\030\001 \001(\0162\037.jmc_auto.drivers.gn"
      "ss.GnssType:\007GPS_SYS\022\017\n\007sat_prn\030\002 \001(\r\022E\n"
      "\016gnss_time_type\030\003 \001(\0162#.jmc_auto.drivers"
      ".gnss.GnssTimeType:\010GPS_TIME\022\014\n\004year\030\004 \001"
      "(\r\022\r\n\005month\030\005 \001(\r\022\013\n\003day\030\006 \001(\r\022\014\n\004hour\030\007"
      " \001(\r\022\016\n\006minute\030\010 \001(\r\022\020\n\010second_s\030\t \001(\001\022\020"
      "\n\010week_num\030\n \001(\r\022\020\n\010reserved\030\013 \001(\001\022\013\n\003af"
      "0\030\014 \001(\001\022\013\n\003af1\030\r \001(\001\022\013\n\003af2\030\016 \001(\001\022\014\n\004iod"
      "e\030\017 \001(\001\022\016\n\006deltan\030\020 \001(\001\022\n\n\002m0\030\021 \001(\001\022\t\n\001e"
      "\030\022 \001(\001\022\r\n\005roota\030\023 \001(\001\022\013\n\003toe\030\024 \001(\001\022\013\n\003to"
      "c\030\025 \001(\001\022\013\n\003cic\030\026 \001(\001\022\013\n\003crc\030\027 \001(\001\022\013\n\003cis"
      "\030\030 \001(\001\022\013\n\003crs\030\031 \001(\001\022\013\n\003cuc\030\032 \001(\001\022\013\n\003cus\030"
      "\033 \001(\001\022\016\n\006omega0\030\034 \001(\001\022\r\n\005omega\030\035 \001(\001\022\n\n\002"
      "i0\030\036 \001(\001\022\020\n\010omegadot\030\037 \001(\001\022\014\n\004idot\030  \001(\001"
      "\022\030\n\020codesonL2channel\030! \001(\001\022\023\n\013L2Pdatafla"
      "g\030\" \001(\r\022\020\n\010accuracy\030# \001(\r\022\016\n\006health\030$ \001("
      "\r\022\013\n\003tgd\030% \001(\001\022\014\n\004iodc\030& \001(\001\"\336\004\n\014Glonass"
      "Orbit\022;\n\tgnss_type\030\001 \001(\0162\037.jmc_auto.driv"
      "ers.gnss.GnssType:\007GLO_SYS\022\020\n\010slot_prn\030\002"
      " \001(\r\022E\n\016gnss_time_type\030\003 \001(\0162#.jmc_auto."
      "drivers.gnss.GnssTimeType:\010GLO_TIME\022\013\n\003t"
      "oe\030\004 \001(\001\022\014\n\004year\030\005 \001(\r\022\r\n\005month\030\006 \001(\r\022\013\n"
      "\003day\030\007 \001(\r\022\014\n\004hour\030\010 \001(\r\022\016\n\006minute\030\t \001(\r"
      "\022\020\n\010second_s\030\n \001(\001\022\024\n\014frequency_no\030\013 \001(\005"
      "\022\020\n\010week_num\030\014 \001(\r\022\025\n\rweek_second_s\030\r \001("
      "\001\022\n\n\002tk\030\016 \001(\001\022\024\n\014clock_offset\030\017 \001(\001\022\023\n\013c"
      "lock_drift\030\020 \001(\001\022\016\n\006health\030\021 \001(\r\022\022\n\nposi"
      "tion_x\030\022 \001(\001\022\022\n\nposition_y\030\023 \001(\001\022\022\n\nposi"
      "tion_z\030\024 \001(\001\022\022\n\nvelocity_x\030\025 \001(\001\022\022\n\nvelo"
      "city_y\030\026 \001(\001\022\022\n\nvelocity_z\030\027 \001(\001\022\024\n\014acce"
      "lerate_x\030\030 \001(\001\022\024\n\014accelerate_y\030\031 \001(\001\022\024\n\014"
      "accelerate_z\030\032 \001(\001\022\021\n\tinfor_age\030\033 \001(\001\"\304\001"
      "\n\rGnssEphemeris\022;\n\tgnss_type\030\001 \001(\0162\037.jmc"
      "_auto.drivers.gnss.GnssType:\007GLO_SYS\022:\n\r"
      "keppler_orbit\030\002 \001(\0132#.jmc_auto.drivers.g"
      "nss.KepplerOrbit\022:\n\rglonass_orbit\030\003 \001(\0132"
      "#.jmc_auto.drivers.gnss.GlonassOrbit*\212\001\n"
      "\nGnssBandID\022\020\n\014BAND_UNKNOWN\020\000\022\n\n\006GPS_L1\020"
      "\001\022\n\n\006GPS_L2\020\002\022\n\n\006GPS_L5\020\003\022\n\n\006BDS_B1\020\004\022\n\n"
      "\006BDS_B2\020\005\022\n\n\006BDS_B3\020\006\022\n\n\006GLO_G1\020\007\022\n\n\006GLO"
      "_G2\020\010\022\n\n\006GLO_G3\020\t*X\n\014GnssTimeType\022\020\n\014TIM"
      "E_UNKNOWN\020\000\022\014\n\010GPS_TIME\020\001\022\014\n\010BDS_TIME\020\002\022"
      "\014\n\010GLO_TIME\020\003\022\014\n\010GAL_TIME\020\004*O\n\010GnssType\022"
      "\017\n\013SYS_UNKNOWN\020\000\022\013\n\007GPS_SYS\020\001\022\013\n\007BDS_SYS"
      "\020\002\022\013\n\007GLO_SYS\020\003\022\013\n\007GAL_SYS\020\004*B\n\nPseudoTy"
      "pe\022\020\n\014CODE_UNKNOWN\020\000\022\016\n\nCORSE_CODE\020\001\022\022\n\016"
      "PRECISION_CODE\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2736);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/gnss/proto/gnss_raw_observation.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto

const ::google::protobuf::EnumDescriptor* GnssBandID_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_enum_descriptors[0];
}
bool GnssBandID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GnssTimeType_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_enum_descriptors[1];
}
bool GnssTimeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GnssType_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_enum_descriptors[2];
}
bool GnssType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PseudoType_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_enum_descriptors[3];
}
bool PseudoType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BandObservation::kBandIdFieldNumber;
const int BandObservation::kFrequencyValueFieldNumber;
const int BandObservation::kPseudoTypeFieldNumber;
const int BandObservation::kPseudoRangeFieldNumber;
const int BandObservation::kCarrierPhaseFieldNumber;
const int BandObservation::kLossLockIndexFieldNumber;
const int BandObservation::kDopplerFieldNumber;
const int BandObservation::kSnrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BandObservation::BandObservation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.BandObservation)
}
BandObservation::BandObservation(const BandObservation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frequency_value_, &from.frequency_value_,
    reinterpret_cast<char*>(&snr_) -
    reinterpret_cast<char*>(&frequency_value_) + sizeof(snr_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.BandObservation)
}

void BandObservation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&frequency_value_, 0, reinterpret_cast<char*>(&snr_) -
    reinterpret_cast<char*>(&frequency_value_) + sizeof(snr_));
}

BandObservation::~BandObservation() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.BandObservation)
  SharedDtor();
}

void BandObservation::SharedDtor() {
}

void BandObservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BandObservation::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BandObservation& BandObservation::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::InitDefaults();
  return *internal_default_instance();
}

BandObservation* BandObservation::New(::google::protobuf::Arena* arena) const {
  BandObservation* n = new BandObservation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BandObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.BandObservation)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&frequency_value_, 0, reinterpret_cast<char*>(&snr_) -
      reinterpret_cast<char*>(&frequency_value_) + sizeof(snr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BandObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.BandObservation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::drivers::gnss::GnssBandID_IsValid(value)) {
            set_band_id(static_cast< ::jmc_auto::drivers::gnss::GnssBandID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double frequency_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_frequency_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::drivers::gnss::PseudoType_IsValid(value)) {
            set_pseudo_type(static_cast< ::jmc_auto::drivers::gnss::PseudoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pseudo_range = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_pseudo_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pseudo_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double carrier_phase = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_carrier_phase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &carrier_phase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 loss_lock_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_loss_lock_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loss_lock_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double doppler = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_doppler();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doppler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float snr = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_snr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &snr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.BandObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.BandObservation)
  return false;
#undef DO_
}

void BandObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.BandObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->band_id(), output);
  }

  // optional double frequency_value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->frequency_value(), output);
  }

  // optional .jmc_auto.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->pseudo_type(), output);
  }

  // optional double pseudo_range = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pseudo_range(), output);
  }

  // optional double carrier_phase = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->carrier_phase(), output);
  }

  // optional uint32 loss_lock_index = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->loss_lock_index(), output);
  }

  // optional double doppler = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->doppler(), output);
  }

  // optional float snr = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->snr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.BandObservation)
}

::google::protobuf::uint8* BandObservation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.BandObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->band_id(), target);
  }

  // optional double frequency_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->frequency_value(), target);
  }

  // optional .jmc_auto.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->pseudo_type(), target);
  }

  // optional double pseudo_range = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pseudo_range(), target);
  }

  // optional double carrier_phase = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->carrier_phase(), target);
  }

  // optional uint32 loss_lock_index = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->loss_lock_index(), target);
  }

  // optional double doppler = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->doppler(), target);
  }

  // optional float snr = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->snr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.BandObservation)
  return target;
}

size_t BandObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.BandObservation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double frequency_value = 2;
    if (has_frequency_value()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
    if (has_band_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->band_id());
    }

    // optional .jmc_auto.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
    if (has_pseudo_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pseudo_type());
    }

    // optional double pseudo_range = 4;
    if (has_pseudo_range()) {
      total_size += 1 + 8;
    }

    // optional double carrier_phase = 5;
    if (has_carrier_phase()) {
      total_size += 1 + 8;
    }

    // optional double doppler = 7;
    if (has_doppler()) {
      total_size += 1 + 8;
    }

    // optional uint32 loss_lock_index = 6;
    if (has_loss_lock_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loss_lock_index());
    }

    // optional float snr = 8;
    if (has_snr()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BandObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.BandObservation)
  GOOGLE_DCHECK_NE(&from, this);
  const BandObservation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BandObservation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.BandObservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.BandObservation)
    MergeFrom(*source);
  }
}

void BandObservation::MergeFrom(const BandObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.BandObservation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      frequency_value_ = from.frequency_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      band_id_ = from.band_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      pseudo_type_ = from.pseudo_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      pseudo_range_ = from.pseudo_range_;
    }
    if (cached_has_bits & 0x00000010u) {
      carrier_phase_ = from.carrier_phase_;
    }
    if (cached_has_bits & 0x00000020u) {
      doppler_ = from.doppler_;
    }
    if (cached_has_bits & 0x00000040u) {
      loss_lock_index_ = from.loss_lock_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      snr_ = from.snr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BandObservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.BandObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BandObservation::CopyFrom(const BandObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.BandObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BandObservation::IsInitialized() const {
  return true;
}

void BandObservation::Swap(BandObservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BandObservation::InternalSwap(BandObservation* other) {
  std::swap(frequency_value_, other->frequency_value_);
  std::swap(band_id_, other->band_id_);
  std::swap(pseudo_type_, other->pseudo_type_);
  std::swap(pseudo_range_, other->pseudo_range_);
  std::swap(carrier_phase_, other->carrier_phase_);
  std::swap(doppler_, other->doppler_);
  std::swap(loss_lock_index_, other->loss_lock_index_);
  std::swap(snr_, other->snr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BandObservation::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BandObservation

// optional .jmc_auto.drivers.gnss.GnssBandID band_id = 1 [default = BAND_UNKNOWN];
bool BandObservation::has_band_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BandObservation::set_has_band_id() {
  _has_bits_[0] |= 0x00000002u;
}
void BandObservation::clear_has_band_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void BandObservation::clear_band_id() {
  band_id_ = 0;
  clear_has_band_id();
}
::jmc_auto::drivers::gnss::GnssBandID BandObservation::band_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.BandObservation.band_id)
  return static_cast< ::jmc_auto::drivers::gnss::GnssBandID >(band_id_);
}
void BandObservation::set_band_id(::jmc_auto::drivers::gnss::GnssBandID value) {
  assert(::jmc_auto::drivers::gnss::GnssBandID_IsValid(value));
  set_has_band_id();
  band_id_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.BandObservation.band_id)
}

// optional double frequency_value = 2;
bool BandObservation::has_frequency_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BandObservation::set_has_frequency_value() {
  _has_bits_[0] |= 0x00000001u;
}
void BandObservation::clear_has_frequency_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void BandObservation::clear_frequency_value() {
  frequency_value_ = 0;
  clear_has_frequency_value();
}
double BandObservation::frequency_value() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.BandObservation.frequency_value)
  return frequency_value_;
}
void BandObservation::set_frequency_value(double value) {
  set_has_frequency_value();
  frequency_value_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.BandObservation.frequency_value)
}

// optional .jmc_auto.drivers.gnss.PseudoType pseudo_type = 3 [default = CODE_UNKNOWN];
bool BandObservation::has_pseudo_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BandObservation::set_has_pseudo_type() {
  _has_bits_[0] |= 0x00000004u;
}
void BandObservation::clear_has_pseudo_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void BandObservation::clear_pseudo_type() {
  pseudo_type_ = 0;
  clear_has_pseudo_type();
}
::jmc_auto::drivers::gnss::PseudoType BandObservation::pseudo_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.BandObservation.pseudo_type)
  return static_cast< ::jmc_auto::drivers::gnss::PseudoType >(pseudo_type_);
}
void BandObservation::set_pseudo_type(::jmc_auto::drivers::gnss::PseudoType value) {
  assert(::jmc_auto::drivers::gnss::PseudoType_IsValid(value));
  set_has_pseudo_type();
  pseudo_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.BandObservation.pseudo_type)
}

// optional double pseudo_range = 4;
bool BandObservation::has_pseudo_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BandObservation::set_has_pseudo_range() {
  _has_bits_[0] |= 0x00000008u;
}
void BandObservation::clear_has_pseudo_range() {
  _has_bits_[0] &= ~0x00000008u;
}
void BandObservation::clear_pseudo_range() {
  pseudo_range_ = 0;
  clear_has_pseudo_range();
}
double BandObservation::pseudo_range() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.BandObservation.pseudo_range)
  return pseudo_range_;
}
void BandObservation::set_pseudo_range(double value) {
  set_has_pseudo_range();
  pseudo_range_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.BandObservation.pseudo_range)
}

// optional double carrier_phase = 5;
bool BandObservation::has_carrier_phase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BandObservation::set_has_carrier_phase() {
  _has_bits_[0] |= 0x00000010u;
}
void BandObservation::clear_has_carrier_phase() {
  _has_bits_[0] &= ~0x00000010u;
}
void BandObservation::clear_carrier_phase() {
  carrier_phase_ = 0;
  clear_has_carrier_phase();
}
double BandObservation::carrier_phase() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.BandObservation.carrier_phase)
  return carrier_phase_;
}
void BandObservation::set_carrier_phase(double value) {
  set_has_carrier_phase();
  carrier_phase_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.BandObservation.carrier_phase)
}

// optional uint32 loss_lock_index = 6;
bool BandObservation::has_loss_lock_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void BandObservation::set_has_loss_lock_index() {
  _has_bits_[0] |= 0x00000040u;
}
void BandObservation::clear_has_loss_lock_index() {
  _has_bits_[0] &= ~0x00000040u;
}
void BandObservation::clear_loss_lock_index() {
  loss_lock_index_ = 0u;
  clear_has_loss_lock_index();
}
::google::protobuf::uint32 BandObservation::loss_lock_index() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.BandObservation.loss_lock_index)
  return loss_lock_index_;
}
void BandObservation::set_loss_lock_index(::google::protobuf::uint32 value) {
  set_has_loss_lock_index();
  loss_lock_index_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.BandObservation.loss_lock_index)
}

// optional double doppler = 7;
bool BandObservation::has_doppler() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BandObservation::set_has_doppler() {
  _has_bits_[0] |= 0x00000020u;
}
void BandObservation::clear_has_doppler() {
  _has_bits_[0] &= ~0x00000020u;
}
void BandObservation::clear_doppler() {
  doppler_ = 0;
  clear_has_doppler();
}
double BandObservation::doppler() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.BandObservation.doppler)
  return doppler_;
}
void BandObservation::set_doppler(double value) {
  set_has_doppler();
  doppler_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.BandObservation.doppler)
}

// optional float snr = 8;
bool BandObservation::has_snr() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void BandObservation::set_has_snr() {
  _has_bits_[0] |= 0x00000080u;
}
void BandObservation::clear_has_snr() {
  _has_bits_[0] &= ~0x00000080u;
}
void BandObservation::clear_snr() {
  snr_ = 0;
  clear_has_snr();
}
float BandObservation::snr() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.BandObservation.snr)
  return snr_;
}
void BandObservation::set_snr(float value) {
  set_has_snr();
  snr_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.BandObservation.snr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SatelliteObservation::kSatPrnFieldNumber;
const int SatelliteObservation::kSatSysFieldNumber;
const int SatelliteObservation::kBandObsNumFieldNumber;
const int SatelliteObservation::kBandObsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SatelliteObservation::SatelliteObservation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.SatelliteObservation)
}
SatelliteObservation::SatelliteObservation(const SatelliteObservation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      band_obs_(from.band_obs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sat_prn_, &from.sat_prn_,
    reinterpret_cast<char*>(&sat_sys_) -
    reinterpret_cast<char*>(&sat_prn_) + sizeof(sat_sys_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.SatelliteObservation)
}

void SatelliteObservation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sat_prn_, 0, reinterpret_cast<char*>(&band_obs_num_) -
    reinterpret_cast<char*>(&sat_prn_) + sizeof(band_obs_num_));
  sat_sys_ = 1;
}

SatelliteObservation::~SatelliteObservation() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.SatelliteObservation)
  SharedDtor();
}

void SatelliteObservation::SharedDtor() {
}

void SatelliteObservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SatelliteObservation::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SatelliteObservation& SatelliteObservation::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::InitDefaults();
  return *internal_default_instance();
}

SatelliteObservation* SatelliteObservation::New(::google::protobuf::Arena* arena) const {
  SatelliteObservation* n = new SatelliteObservation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SatelliteObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.SatelliteObservation)
  band_obs_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&sat_prn_, 0, reinterpret_cast<char*>(&band_obs_num_) -
      reinterpret_cast<char*>(&sat_prn_) + sizeof(band_obs_num_));
    sat_sys_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SatelliteObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.SatelliteObservation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sat_prn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sat_prn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sat_prn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::drivers::gnss::GnssType_IsValid(value)) {
            set_sat_sys(static_cast< ::jmc_auto::drivers::gnss::GnssType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 band_obs_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_band_obs_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &band_obs_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.drivers.gnss.BandObservation band_obs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_band_obs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.SatelliteObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.SatelliteObservation)
  return false;
#undef DO_
}

void SatelliteObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.SatelliteObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sat_prn = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sat_prn(), output);
  }

  // optional .jmc_auto.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sat_sys(), output);
  }

  // optional uint32 band_obs_num = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->band_obs_num(), output);
  }

  // repeated .jmc_auto.drivers.gnss.BandObservation band_obs = 4;
  for (unsigned int i = 0, n = this->band_obs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->band_obs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.SatelliteObservation)
}

::google::protobuf::uint8* SatelliteObservation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.SatelliteObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sat_prn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sat_prn(), target);
  }

  // optional .jmc_auto.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sat_sys(), target);
  }

  // optional uint32 band_obs_num = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->band_obs_num(), target);
  }

  // repeated .jmc_auto.drivers.gnss.BandObservation band_obs = 4;
  for (unsigned int i = 0, n = this->band_obs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->band_obs(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.SatelliteObservation)
  return target;
}

size_t SatelliteObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.SatelliteObservation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.drivers.gnss.BandObservation band_obs = 4;
  {
    unsigned int count = this->band_obs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->band_obs(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 sat_prn = 1;
    if (has_sat_prn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sat_prn());
    }

    // optional uint32 band_obs_num = 3;
    if (has_band_obs_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->band_obs_num());
    }

    // optional .jmc_auto.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
    if (has_sat_sys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sat_sys());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SatelliteObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.SatelliteObservation)
  GOOGLE_DCHECK_NE(&from, this);
  const SatelliteObservation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SatelliteObservation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.SatelliteObservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.SatelliteObservation)
    MergeFrom(*source);
  }
}

void SatelliteObservation::MergeFrom(const SatelliteObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.SatelliteObservation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  band_obs_.MergeFrom(from.band_obs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      sat_prn_ = from.sat_prn_;
    }
    if (cached_has_bits & 0x00000002u) {
      band_obs_num_ = from.band_obs_num_;
    }
    if (cached_has_bits & 0x00000004u) {
      sat_sys_ = from.sat_sys_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SatelliteObservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.SatelliteObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SatelliteObservation::CopyFrom(const SatelliteObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.SatelliteObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SatelliteObservation::IsInitialized() const {
  return true;
}

void SatelliteObservation::Swap(SatelliteObservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SatelliteObservation::InternalSwap(SatelliteObservation* other) {
  band_obs_.InternalSwap(&other->band_obs_);
  std::swap(sat_prn_, other->sat_prn_);
  std::swap(band_obs_num_, other->band_obs_num_);
  std::swap(sat_sys_, other->sat_sys_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SatelliteObservation::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SatelliteObservation

// optional uint32 sat_prn = 1;
bool SatelliteObservation::has_sat_prn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SatelliteObservation::set_has_sat_prn() {
  _has_bits_[0] |= 0x00000001u;
}
void SatelliteObservation::clear_has_sat_prn() {
  _has_bits_[0] &= ~0x00000001u;
}
void SatelliteObservation::clear_sat_prn() {
  sat_prn_ = 0u;
  clear_has_sat_prn();
}
::google::protobuf::uint32 SatelliteObservation::sat_prn() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.SatelliteObservation.sat_prn)
  return sat_prn_;
}
void SatelliteObservation::set_sat_prn(::google::protobuf::uint32 value) {
  set_has_sat_prn();
  sat_prn_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.SatelliteObservation.sat_prn)
}

// optional .jmc_auto.drivers.gnss.GnssType sat_sys = 2 [default = GPS_SYS];
bool SatelliteObservation::has_sat_sys() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SatelliteObservation::set_has_sat_sys() {
  _has_bits_[0] |= 0x00000004u;
}
void SatelliteObservation::clear_has_sat_sys() {
  _has_bits_[0] &= ~0x00000004u;
}
void SatelliteObservation::clear_sat_sys() {
  sat_sys_ = 1;
  clear_has_sat_sys();
}
::jmc_auto::drivers::gnss::GnssType SatelliteObservation::sat_sys() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.SatelliteObservation.sat_sys)
  return static_cast< ::jmc_auto::drivers::gnss::GnssType >(sat_sys_);
}
void SatelliteObservation::set_sat_sys(::jmc_auto::drivers::gnss::GnssType value) {
  assert(::jmc_auto::drivers::gnss::GnssType_IsValid(value));
  set_has_sat_sys();
  sat_sys_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.SatelliteObservation.sat_sys)
}

// optional uint32 band_obs_num = 3;
bool SatelliteObservation::has_band_obs_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SatelliteObservation::set_has_band_obs_num() {
  _has_bits_[0] |= 0x00000002u;
}
void SatelliteObservation::clear_has_band_obs_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void SatelliteObservation::clear_band_obs_num() {
  band_obs_num_ = 0u;
  clear_has_band_obs_num();
}
::google::protobuf::uint32 SatelliteObservation::band_obs_num() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.SatelliteObservation.band_obs_num)
  return band_obs_num_;
}
void SatelliteObservation::set_band_obs_num(::google::protobuf::uint32 value) {
  set_has_band_obs_num();
  band_obs_num_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.SatelliteObservation.band_obs_num)
}

// repeated .jmc_auto.drivers.gnss.BandObservation band_obs = 4;
int SatelliteObservation::band_obs_size() const {
  return band_obs_.size();
}
void SatelliteObservation::clear_band_obs() {
  band_obs_.Clear();
}
const ::jmc_auto::drivers::gnss::BandObservation& SatelliteObservation::band_obs(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.SatelliteObservation.band_obs)
  return band_obs_.Get(index);
}
::jmc_auto::drivers::gnss::BandObservation* SatelliteObservation::mutable_band_obs(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.SatelliteObservation.band_obs)
  return band_obs_.Mutable(index);
}
::jmc_auto::drivers::gnss::BandObservation* SatelliteObservation::add_band_obs() {
  // @@protoc_insertion_point(field_add:jmc_auto.drivers.gnss.SatelliteObservation.band_obs)
  return band_obs_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::drivers::gnss::BandObservation >*
SatelliteObservation::mutable_band_obs() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.drivers.gnss.SatelliteObservation.band_obs)
  return &band_obs_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::drivers::gnss::BandObservation >&
SatelliteObservation::band_obs() const {
  // @@protoc_insertion_point(field_list:jmc_auto.drivers.gnss.SatelliteObservation.band_obs)
  return band_obs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EpochObservation::kReceiverIdFieldNumber;
const int EpochObservation::kGnssTimeTypeFieldNumber;
const int EpochObservation::kGnssWeekFieldNumber;
const int EpochObservation::kGnssSecondSFieldNumber;
const int EpochObservation::kPositionXFieldNumber;
const int EpochObservation::kPositionYFieldNumber;
const int EpochObservation::kPositionZFieldNumber;
const int EpochObservation::kHealthFlagFieldNumber;
const int EpochObservation::kSatObsNumFieldNumber;
const int EpochObservation::kSatObsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EpochObservation::EpochObservation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.EpochObservation)
}
EpochObservation::EpochObservation(const EpochObservation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sat_obs_(from.sat_obs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&receiver_id_, &from.receiver_id_,
    reinterpret_cast<char*>(&gnss_time_type_) -
    reinterpret_cast<char*>(&receiver_id_) + sizeof(gnss_time_type_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.EpochObservation)
}

void EpochObservation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&receiver_id_, 0, reinterpret_cast<char*>(&sat_obs_num_) -
    reinterpret_cast<char*>(&receiver_id_) + sizeof(sat_obs_num_));
  gnss_time_type_ = 1;
}

EpochObservation::~EpochObservation() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.EpochObservation)
  SharedDtor();
}

void EpochObservation::SharedDtor() {
}

void EpochObservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EpochObservation::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EpochObservation& EpochObservation::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::InitDefaults();
  return *internal_default_instance();
}

EpochObservation* EpochObservation::New(::google::protobuf::Arena* arena) const {
  EpochObservation* n = new EpochObservation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EpochObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.EpochObservation)
  sat_obs_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&receiver_id_, 0, reinterpret_cast<char*>(&sat_obs_num_) -
      reinterpret_cast<char*>(&receiver_id_) + sizeof(sat_obs_num_));
  }
  gnss_time_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EpochObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.EpochObservation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 receiver_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_receiver_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receiver_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::drivers::gnss::GnssTimeType_IsValid(value)) {
            set_gnss_time_type(static_cast< ::jmc_auto::drivers::gnss::GnssTimeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gnss_week = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_gnss_week();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gnss_week_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gnss_second_s = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_gnss_second_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gnss_second_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_position_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_position_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_z = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_position_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 health_flag = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_health_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sat_obs_num = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_sat_obs_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sat_obs_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .jmc_auto.drivers.gnss.SatelliteObservation sat_obs = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sat_obs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.EpochObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.EpochObservation)
  return false;
#undef DO_
}

void EpochObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.EpochObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 receiver_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->receiver_id(), output);
  }

  // optional .jmc_auto.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->gnss_time_type(), output);
  }

  // optional uint32 gnss_week = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gnss_week(), output);
  }

  // optional double gnss_second_s = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gnss_second_s(), output);
  }

  // optional double position_x = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->position_x(), output);
  }

  // optional double position_y = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->position_y(), output);
  }

  // optional double position_z = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->position_z(), output);
  }

  // optional uint32 health_flag = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->health_flag(), output);
  }

  // optional uint32 sat_obs_num = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sat_obs_num(), output);
  }

  // repeated .jmc_auto.drivers.gnss.SatelliteObservation sat_obs = 10;
  for (unsigned int i = 0, n = this->sat_obs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->sat_obs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.EpochObservation)
}

::google::protobuf::uint8* EpochObservation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.EpochObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 receiver_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->receiver_id(), target);
  }

  // optional .jmc_auto.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->gnss_time_type(), target);
  }

  // optional uint32 gnss_week = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gnss_week(), target);
  }

  // optional double gnss_second_s = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gnss_second_s(), target);
  }

  // optional double position_x = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->position_x(), target);
  }

  // optional double position_y = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->position_y(), target);
  }

  // optional double position_z = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->position_z(), target);
  }

  // optional uint32 health_flag = 8 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->health_flag(), target);
  }

  // optional uint32 sat_obs_num = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sat_obs_num(), target);
  }

  // repeated .jmc_auto.drivers.gnss.SatelliteObservation sat_obs = 10;
  for (unsigned int i = 0, n = this->sat_obs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->sat_obs(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.EpochObservation)
  return target;
}

size_t EpochObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.EpochObservation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .jmc_auto.drivers.gnss.SatelliteObservation sat_obs = 10;
  {
    unsigned int count = this->sat_obs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sat_obs(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 receiver_id = 1;
    if (has_receiver_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receiver_id());
    }

    // optional uint32 gnss_week = 3;
    if (has_gnss_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gnss_week());
    }

    // optional double gnss_second_s = 4;
    if (has_gnss_second_s()) {
      total_size += 1 + 8;
    }

    // optional double position_x = 5;
    if (has_position_x()) {
      total_size += 1 + 8;
    }

    // optional double position_y = 6;
    if (has_position_y()) {
      total_size += 1 + 8;
    }

    // optional double position_z = 7;
    if (has_position_z()) {
      total_size += 1 + 8;
    }

    // optional uint32 health_flag = 8 [default = 0];
    if (has_health_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health_flag());
    }

    // optional uint32 sat_obs_num = 9;
    if (has_sat_obs_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sat_obs_num());
    }

  }
  // optional .jmc_auto.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
  if (has_gnss_time_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_time_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EpochObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.EpochObservation)
  GOOGLE_DCHECK_NE(&from, this);
  const EpochObservation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EpochObservation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.EpochObservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.EpochObservation)
    MergeFrom(*source);
  }
}

void EpochObservation::MergeFrom(const EpochObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.EpochObservation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sat_obs_.MergeFrom(from.sat_obs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      receiver_id_ = from.receiver_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      gnss_week_ = from.gnss_week_;
    }
    if (cached_has_bits & 0x00000004u) {
      gnss_second_s_ = from.gnss_second_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      position_x_ = from.position_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      position_y_ = from.position_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      position_z_ = from.position_z_;
    }
    if (cached_has_bits & 0x00000040u) {
      health_flag_ = from.health_flag_;
    }
    if (cached_has_bits & 0x00000080u) {
      sat_obs_num_ = from.sat_obs_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_gnss_time_type(from.gnss_time_type());
  }
}

void EpochObservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.EpochObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EpochObservation::CopyFrom(const EpochObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.EpochObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EpochObservation::IsInitialized() const {
  return true;
}

void EpochObservation::Swap(EpochObservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EpochObservation::InternalSwap(EpochObservation* other) {
  sat_obs_.InternalSwap(&other->sat_obs_);
  std::swap(receiver_id_, other->receiver_id_);
  std::swap(gnss_week_, other->gnss_week_);
  std::swap(gnss_second_s_, other->gnss_second_s_);
  std::swap(position_x_, other->position_x_);
  std::swap(position_y_, other->position_y_);
  std::swap(position_z_, other->position_z_);
  std::swap(health_flag_, other->health_flag_);
  std::swap(sat_obs_num_, other->sat_obs_num_);
  std::swap(gnss_time_type_, other->gnss_time_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EpochObservation::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EpochObservation

// optional uint32 receiver_id = 1;
bool EpochObservation::has_receiver_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EpochObservation::set_has_receiver_id() {
  _has_bits_[0] |= 0x00000001u;
}
void EpochObservation::clear_has_receiver_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void EpochObservation::clear_receiver_id() {
  receiver_id_ = 0u;
  clear_has_receiver_id();
}
::google::protobuf::uint32 EpochObservation::receiver_id() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.EpochObservation.receiver_id)
  return receiver_id_;
}
void EpochObservation::set_receiver_id(::google::protobuf::uint32 value) {
  set_has_receiver_id();
  receiver_id_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.EpochObservation.receiver_id)
}

// optional .jmc_auto.drivers.gnss.GnssTimeType gnss_time_type = 2 [default = GPS_TIME];
bool EpochObservation::has_gnss_time_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void EpochObservation::set_has_gnss_time_type() {
  _has_bits_[0] |= 0x00000100u;
}
void EpochObservation::clear_has_gnss_time_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void EpochObservation::clear_gnss_time_type() {
  gnss_time_type_ = 1;
  clear_has_gnss_time_type();
}
::jmc_auto::drivers::gnss::GnssTimeType EpochObservation::gnss_time_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.EpochObservation.gnss_time_type)
  return static_cast< ::jmc_auto::drivers::gnss::GnssTimeType >(gnss_time_type_);
}
void EpochObservation::set_gnss_time_type(::jmc_auto::drivers::gnss::GnssTimeType value) {
  assert(::jmc_auto::drivers::gnss::GnssTimeType_IsValid(value));
  set_has_gnss_time_type();
  gnss_time_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.EpochObservation.gnss_time_type)
}

// optional uint32 gnss_week = 3;
bool EpochObservation::has_gnss_week() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EpochObservation::set_has_gnss_week() {
  _has_bits_[0] |= 0x00000002u;
}
void EpochObservation::clear_has_gnss_week() {
  _has_bits_[0] &= ~0x00000002u;
}
void EpochObservation::clear_gnss_week() {
  gnss_week_ = 0u;
  clear_has_gnss_week();
}
::google::protobuf::uint32 EpochObservation::gnss_week() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.EpochObservation.gnss_week)
  return gnss_week_;
}
void EpochObservation::set_gnss_week(::google::protobuf::uint32 value) {
  set_has_gnss_week();
  gnss_week_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.EpochObservation.gnss_week)
}

// optional double gnss_second_s = 4;
bool EpochObservation::has_gnss_second_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EpochObservation::set_has_gnss_second_s() {
  _has_bits_[0] |= 0x00000004u;
}
void EpochObservation::clear_has_gnss_second_s() {
  _has_bits_[0] &= ~0x00000004u;
}
void EpochObservation::clear_gnss_second_s() {
  gnss_second_s_ = 0;
  clear_has_gnss_second_s();
}
double EpochObservation::gnss_second_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.EpochObservation.gnss_second_s)
  return gnss_second_s_;
}
void EpochObservation::set_gnss_second_s(double value) {
  set_has_gnss_second_s();
  gnss_second_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.EpochObservation.gnss_second_s)
}

// optional double position_x = 5;
bool EpochObservation::has_position_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EpochObservation::set_has_position_x() {
  _has_bits_[0] |= 0x00000008u;
}
void EpochObservation::clear_has_position_x() {
  _has_bits_[0] &= ~0x00000008u;
}
void EpochObservation::clear_position_x() {
  position_x_ = 0;
  clear_has_position_x();
}
double EpochObservation::position_x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.EpochObservation.position_x)
  return position_x_;
}
void EpochObservation::set_position_x(double value) {
  set_has_position_x();
  position_x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.EpochObservation.position_x)
}

// optional double position_y = 6;
bool EpochObservation::has_position_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EpochObservation::set_has_position_y() {
  _has_bits_[0] |= 0x00000010u;
}
void EpochObservation::clear_has_position_y() {
  _has_bits_[0] &= ~0x00000010u;
}
void EpochObservation::clear_position_y() {
  position_y_ = 0;
  clear_has_position_y();
}
double EpochObservation::position_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.EpochObservation.position_y)
  return position_y_;
}
void EpochObservation::set_position_y(double value) {
  set_has_position_y();
  position_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.EpochObservation.position_y)
}

// optional double position_z = 7;
bool EpochObservation::has_position_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EpochObservation::set_has_position_z() {
  _has_bits_[0] |= 0x00000020u;
}
void EpochObservation::clear_has_position_z() {
  _has_bits_[0] &= ~0x00000020u;
}
void EpochObservation::clear_position_z() {
  position_z_ = 0;
  clear_has_position_z();
}
double EpochObservation::position_z() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.EpochObservation.position_z)
  return position_z_;
}
void EpochObservation::set_position_z(double value) {
  set_has_position_z();
  position_z_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.EpochObservation.position_z)
}

// optional uint32 health_flag = 8 [default = 0];
bool EpochObservation::has_health_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EpochObservation::set_has_health_flag() {
  _has_bits_[0] |= 0x00000040u;
}
void EpochObservation::clear_has_health_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
void EpochObservation::clear_health_flag() {
  health_flag_ = 0u;
  clear_has_health_flag();
}
::google::protobuf::uint32 EpochObservation::health_flag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.EpochObservation.health_flag)
  return health_flag_;
}
void EpochObservation::set_health_flag(::google::protobuf::uint32 value) {
  set_has_health_flag();
  health_flag_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.EpochObservation.health_flag)
}

// optional uint32 sat_obs_num = 9;
bool EpochObservation::has_sat_obs_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void EpochObservation::set_has_sat_obs_num() {
  _has_bits_[0] |= 0x00000080u;
}
void EpochObservation::clear_has_sat_obs_num() {
  _has_bits_[0] &= ~0x00000080u;
}
void EpochObservation::clear_sat_obs_num() {
  sat_obs_num_ = 0u;
  clear_has_sat_obs_num();
}
::google::protobuf::uint32 EpochObservation::sat_obs_num() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.EpochObservation.sat_obs_num)
  return sat_obs_num_;
}
void EpochObservation::set_sat_obs_num(::google::protobuf::uint32 value) {
  set_has_sat_obs_num();
  sat_obs_num_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.EpochObservation.sat_obs_num)
}

// repeated .jmc_auto.drivers.gnss.SatelliteObservation sat_obs = 10;
int EpochObservation::sat_obs_size() const {
  return sat_obs_.size();
}
void EpochObservation::clear_sat_obs() {
  sat_obs_.Clear();
}
const ::jmc_auto::drivers::gnss::SatelliteObservation& EpochObservation::sat_obs(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.EpochObservation.sat_obs)
  return sat_obs_.Get(index);
}
::jmc_auto::drivers::gnss::SatelliteObservation* EpochObservation::mutable_sat_obs(int index) {
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.EpochObservation.sat_obs)
  return sat_obs_.Mutable(index);
}
::jmc_auto::drivers::gnss::SatelliteObservation* EpochObservation::add_sat_obs() {
  // @@protoc_insertion_point(field_add:jmc_auto.drivers.gnss.EpochObservation.sat_obs)
  return sat_obs_.Add();
}
::google::protobuf::RepeatedPtrField< ::jmc_auto::drivers::gnss::SatelliteObservation >*
EpochObservation::mutable_sat_obs() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.drivers.gnss.EpochObservation.sat_obs)
  return &sat_obs_;
}
const ::google::protobuf::RepeatedPtrField< ::jmc_auto::drivers::gnss::SatelliteObservation >&
EpochObservation::sat_obs() const {
  // @@protoc_insertion_point(field_list:jmc_auto.drivers.gnss.EpochObservation.sat_obs)
  return sat_obs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KepplerOrbit::kGnssTypeFieldNumber;
const int KepplerOrbit::kSatPrnFieldNumber;
const int KepplerOrbit::kGnssTimeTypeFieldNumber;
const int KepplerOrbit::kYearFieldNumber;
const int KepplerOrbit::kMonthFieldNumber;
const int KepplerOrbit::kDayFieldNumber;
const int KepplerOrbit::kHourFieldNumber;
const int KepplerOrbit::kMinuteFieldNumber;
const int KepplerOrbit::kSecondSFieldNumber;
const int KepplerOrbit::kWeekNumFieldNumber;
const int KepplerOrbit::kReservedFieldNumber;
const int KepplerOrbit::kAf0FieldNumber;
const int KepplerOrbit::kAf1FieldNumber;
const int KepplerOrbit::kAf2FieldNumber;
const int KepplerOrbit::kIodeFieldNumber;
const int KepplerOrbit::kDeltanFieldNumber;
const int KepplerOrbit::kM0FieldNumber;
const int KepplerOrbit::kEFieldNumber;
const int KepplerOrbit::kRootaFieldNumber;
const int KepplerOrbit::kToeFieldNumber;
const int KepplerOrbit::kTocFieldNumber;
const int KepplerOrbit::kCicFieldNumber;
const int KepplerOrbit::kCrcFieldNumber;
const int KepplerOrbit::kCisFieldNumber;
const int KepplerOrbit::kCrsFieldNumber;
const int KepplerOrbit::kCucFieldNumber;
const int KepplerOrbit::kCusFieldNumber;
const int KepplerOrbit::kOmega0FieldNumber;
const int KepplerOrbit::kOmegaFieldNumber;
const int KepplerOrbit::kI0FieldNumber;
const int KepplerOrbit::kOmegadotFieldNumber;
const int KepplerOrbit::kIdotFieldNumber;
const int KepplerOrbit::kCodesonL2ChannelFieldNumber;
const int KepplerOrbit::kL2PdataflagFieldNumber;
const int KepplerOrbit::kAccuracyFieldNumber;
const int KepplerOrbit::kHealthFieldNumber;
const int KepplerOrbit::kTgdFieldNumber;
const int KepplerOrbit::kIodcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KepplerOrbit::KepplerOrbit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.KepplerOrbit)
}
KepplerOrbit::KepplerOrbit(const KepplerOrbit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sat_prn_, &from.sat_prn_,
    reinterpret_cast<char*>(&gnss_time_type_) -
    reinterpret_cast<char*>(&sat_prn_) + sizeof(gnss_time_type_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.KepplerOrbit)
}

void KepplerOrbit::SharedCtor() {
  ::memset(&sat_prn_, 0, reinterpret_cast<char*>(&iodc_) -
    reinterpret_cast<char*>(&sat_prn_) + sizeof(iodc_));
  gnss_type_ = 1;
  gnss_time_type_ = 1;
  _cached_size_ = 0;
}

KepplerOrbit::~KepplerOrbit() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.KepplerOrbit)
  SharedDtor();
}

void KepplerOrbit::SharedDtor() {
}

void KepplerOrbit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KepplerOrbit::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KepplerOrbit& KepplerOrbit::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::InitDefaults();
  return *internal_default_instance();
}

KepplerOrbit* KepplerOrbit::New(::google::protobuf::Arena* arena) const {
  KepplerOrbit* n = new KepplerOrbit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KepplerOrbit::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.KepplerOrbit)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&sat_prn_, 0, reinterpret_cast<char*>(&reserved_) -
      reinterpret_cast<char*>(&sat_prn_) + sizeof(reserved_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&af0_, 0, reinterpret_cast<char*>(&roota_) -
      reinterpret_cast<char*>(&af0_) + sizeof(roota_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&toe_, 0, reinterpret_cast<char*>(&crs_) -
      reinterpret_cast<char*>(&toe_) + sizeof(crs_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&cuc_, 0, reinterpret_cast<char*>(&codesonl2channel_) -
      reinterpret_cast<char*>(&cuc_) + sizeof(codesonl2channel_));
  }
  if (_has_bits_[32 / 32] & 63u) {
    ::memset(&accuracy_, 0, reinterpret_cast<char*>(&iodc_) -
      reinterpret_cast<char*>(&accuracy_) + sizeof(iodc_));
    gnss_type_ = 1;
    gnss_time_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KepplerOrbit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.KepplerOrbit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::drivers::gnss::GnssType_IsValid(value)) {
            set_gnss_type(static_cast< ::jmc_auto::drivers::gnss::GnssType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sat_prn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sat_prn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sat_prn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::drivers::gnss::GnssTimeType_IsValid(value)) {
            set_gnss_time_type(static_cast< ::jmc_auto::drivers::gnss::GnssTimeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 year = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 month = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 day = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hour = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_hour();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 minute = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_minute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double second_s = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_second_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &second_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 week_num = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_week_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double reserved = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_reserved();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reserved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double af0 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_af0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &af0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double af1 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_af1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &af1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double af2 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_af2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &af2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double iode = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_iode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &iode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double deltan = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_deltan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deltan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double m0 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_m0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &m0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double e = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u)) {
          set_has_e();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &e_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double roota = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u)) {
          set_has_roota();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double toe = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u)) {
          set_has_toe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &toe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double toc = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u)) {
          set_has_toc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &toc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cic = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u)) {
          set_has_cic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double crc = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u)) {
          set_has_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cis = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u)) {
          set_has_cis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double crs = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u)) {
          set_has_crs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &crs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cuc = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u)) {
          set_has_cuc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cuc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cus = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u)) {
          set_has_cus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double omega0 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u)) {
          set_has_omega0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &omega0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double omega = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u)) {
          set_has_omega();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &omega_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double i0 = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u)) {
          set_has_i0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &i0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double omegadot = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u)) {
          set_has_omegadot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &omegadot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double idot = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(257u)) {
          set_has_idot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &idot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double codesonL2channel = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(265u)) {
          set_has_codesonl2channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &codesonl2channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 L2Pdataflag = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          set_has_l2pdataflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &l2pdataflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 accuracy = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_accuracy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accuracy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 health = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(288u)) {
          set_has_health();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tgd = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(297u)) {
          set_has_tgd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tgd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double iodc = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(305u)) {
          set_has_iodc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &iodc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.KepplerOrbit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.KepplerOrbit)
  return false;
#undef DO_
}

void KepplerOrbit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.KepplerOrbit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional .jmc_auto.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gnss_type(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 sat_prn = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sat_prn(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .jmc_auto.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gnss_time_type(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 year = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->year(), output);
  }

  // optional uint32 month = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->month(), output);
  }

  // optional uint32 day = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->day(), output);
  }

  // optional uint32 hour = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hour(), output);
  }

  // optional uint32 minute = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->minute(), output);
  }

  // optional double second_s = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->second_s(), output);
  }

  // optional uint32 week_num = 10;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->week_num(), output);
  }

  // optional double reserved = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->reserved(), output);
  }

  // optional double af0 = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->af0(), output);
  }

  // optional double af1 = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->af1(), output);
  }

  // optional double af2 = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->af2(), output);
  }

  // optional double iode = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->iode(), output);
  }

  // optional double deltan = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->deltan(), output);
  }

  // optional double m0 = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->m0(), output);
  }

  // optional double e = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->e(), output);
  }

  // optional double roota = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->roota(), output);
  }

  // optional double toe = 20;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->toe(), output);
  }

  // optional double toc = 21;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->toc(), output);
  }

  // optional double cic = 22;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->cic(), output);
  }

  // optional double crc = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->crc(), output);
  }

  // optional double cis = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->cis(), output);
  }

  // optional double crs = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->crs(), output);
  }

  // optional double cuc = 26;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->cuc(), output);
  }

  // optional double cus = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->cus(), output);
  }

  // optional double omega0 = 28;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->omega0(), output);
  }

  // optional double omega = 29;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->omega(), output);
  }

  // optional double i0 = 30;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->i0(), output);
  }

  // optional double omegadot = 31;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->omegadot(), output);
  }

  // optional double idot = 32;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->idot(), output);
  }

  // optional double codesonL2channel = 33;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->codesonl2channel(), output);
  }

  // optional uint32 L2Pdataflag = 34;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->l2pdataflag(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 accuracy = 35;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->accuracy(), output);
  }

  // optional uint32 health = 36;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->health(), output);
  }

  // optional double tgd = 37;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->tgd(), output);
  }

  // optional double iodc = 38;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->iodc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.KepplerOrbit)
}

::google::protobuf::uint8* KepplerOrbit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.KepplerOrbit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional .jmc_auto.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gnss_type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 sat_prn = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sat_prn(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .jmc_auto.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gnss_time_type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 year = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->year(), target);
  }

  // optional uint32 month = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->month(), target);
  }

  // optional uint32 day = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->day(), target);
  }

  // optional uint32 hour = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hour(), target);
  }

  // optional uint32 minute = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->minute(), target);
  }

  // optional double second_s = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->second_s(), target);
  }

  // optional uint32 week_num = 10;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->week_num(), target);
  }

  // optional double reserved = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->reserved(), target);
  }

  // optional double af0 = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->af0(), target);
  }

  // optional double af1 = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->af1(), target);
  }

  // optional double af2 = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->af2(), target);
  }

  // optional double iode = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->iode(), target);
  }

  // optional double deltan = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->deltan(), target);
  }

  // optional double m0 = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->m0(), target);
  }

  // optional double e = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->e(), target);
  }

  // optional double roota = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->roota(), target);
  }

  // optional double toe = 20;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->toe(), target);
  }

  // optional double toc = 21;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->toc(), target);
  }

  // optional double cic = 22;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->cic(), target);
  }

  // optional double crc = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->crc(), target);
  }

  // optional double cis = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->cis(), target);
  }

  // optional double crs = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->crs(), target);
  }

  // optional double cuc = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->cuc(), target);
  }

  // optional double cus = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->cus(), target);
  }

  // optional double omega0 = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->omega0(), target);
  }

  // optional double omega = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->omega(), target);
  }

  // optional double i0 = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->i0(), target);
  }

  // optional double omegadot = 31;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->omegadot(), target);
  }

  // optional double idot = 32;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->idot(), target);
  }

  // optional double codesonL2channel = 33;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->codesonl2channel(), target);
  }

  // optional uint32 L2Pdataflag = 34;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->l2pdataflag(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 accuracy = 35;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->accuracy(), target);
  }

  // optional uint32 health = 36;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->health(), target);
  }

  // optional double tgd = 37;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->tgd(), target);
  }

  // optional double iodc = 38;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->iodc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.KepplerOrbit)
  return target;
}

size_t KepplerOrbit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.KepplerOrbit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 sat_prn = 2;
    if (has_sat_prn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sat_prn());
    }

    // optional uint32 year = 4;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // optional uint32 month = 5;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // optional uint32 day = 6;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional uint32 hour = 7;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hour());
    }

    // optional uint32 minute = 8;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minute());
    }

    // optional double second_s = 9;
    if (has_second_s()) {
      total_size += 1 + 8;
    }

    // optional double reserved = 11;
    if (has_reserved()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double af0 = 12;
    if (has_af0()) {
      total_size += 1 + 8;
    }

    // optional double af1 = 13;
    if (has_af1()) {
      total_size += 1 + 8;
    }

    // optional double af2 = 14;
    if (has_af2()) {
      total_size += 1 + 8;
    }

    // optional double iode = 15;
    if (has_iode()) {
      total_size += 1 + 8;
    }

    // optional double deltan = 16;
    if (has_deltan()) {
      total_size += 2 + 8;
    }

    // optional double m0 = 17;
    if (has_m0()) {
      total_size += 2 + 8;
    }

    // optional double e = 18;
    if (has_e()) {
      total_size += 2 + 8;
    }

    // optional double roota = 19;
    if (has_roota()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double toe = 20;
    if (has_toe()) {
      total_size += 2 + 8;
    }

    // optional double toc = 21;
    if (has_toc()) {
      total_size += 2 + 8;
    }

    // optional double cic = 22;
    if (has_cic()) {
      total_size += 2 + 8;
    }

    // optional uint32 week_num = 10;
    if (has_week_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_num());
    }

    // optional uint32 L2Pdataflag = 34;
    if (has_l2pdataflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->l2pdataflag());
    }

    // optional double crc = 23;
    if (has_crc()) {
      total_size += 2 + 8;
    }

    // optional double cis = 24;
    if (has_cis()) {
      total_size += 2 + 8;
    }

    // optional double crs = 25;
    if (has_crs()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional double cuc = 26;
    if (has_cuc()) {
      total_size += 2 + 8;
    }

    // optional double cus = 27;
    if (has_cus()) {
      total_size += 2 + 8;
    }

    // optional double omega0 = 28;
    if (has_omega0()) {
      total_size += 2 + 8;
    }

    // optional double omega = 29;
    if (has_omega()) {
      total_size += 2 + 8;
    }

    // optional double i0 = 30;
    if (has_i0()) {
      total_size += 2 + 8;
    }

    // optional double omegadot = 31;
    if (has_omegadot()) {
      total_size += 2 + 8;
    }

    // optional double idot = 32;
    if (has_idot()) {
      total_size += 2 + 8;
    }

    // optional double codesonL2channel = 33;
    if (has_codesonl2channel()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & 63u) {
    // optional uint32 accuracy = 35;
    if (has_accuracy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accuracy());
    }

    // optional uint32 health = 36;
    if (has_health()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health());
    }

    // optional double tgd = 37;
    if (has_tgd()) {
      total_size += 2 + 8;
    }

    // optional double iodc = 38;
    if (has_iodc()) {
      total_size += 2 + 8;
    }

    // optional .jmc_auto.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
    if (has_gnss_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_type());
    }

    // optional .jmc_auto.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
    if (has_gnss_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_time_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KepplerOrbit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.KepplerOrbit)
  GOOGLE_DCHECK_NE(&from, this);
  const KepplerOrbit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KepplerOrbit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.KepplerOrbit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.KepplerOrbit)
    MergeFrom(*source);
  }
}

void KepplerOrbit::MergeFrom(const KepplerOrbit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.KepplerOrbit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      sat_prn_ = from.sat_prn_;
    }
    if (cached_has_bits & 0x00000002u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000004u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000008u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000010u) {
      hour_ = from.hour_;
    }
    if (cached_has_bits & 0x00000020u) {
      minute_ = from.minute_;
    }
    if (cached_has_bits & 0x00000040u) {
      second_s_ = from.second_s_;
    }
    if (cached_has_bits & 0x00000080u) {
      reserved_ = from.reserved_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      af0_ = from.af0_;
    }
    if (cached_has_bits & 0x00000200u) {
      af1_ = from.af1_;
    }
    if (cached_has_bits & 0x00000400u) {
      af2_ = from.af2_;
    }
    if (cached_has_bits & 0x00000800u) {
      iode_ = from.iode_;
    }
    if (cached_has_bits & 0x00001000u) {
      deltan_ = from.deltan_;
    }
    if (cached_has_bits & 0x00002000u) {
      m0_ = from.m0_;
    }
    if (cached_has_bits & 0x00004000u) {
      e_ = from.e_;
    }
    if (cached_has_bits & 0x00008000u) {
      roota_ = from.roota_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      toe_ = from.toe_;
    }
    if (cached_has_bits & 0x00020000u) {
      toc_ = from.toc_;
    }
    if (cached_has_bits & 0x00040000u) {
      cic_ = from.cic_;
    }
    if (cached_has_bits & 0x00080000u) {
      week_num_ = from.week_num_;
    }
    if (cached_has_bits & 0x00100000u) {
      l2pdataflag_ = from.l2pdataflag_;
    }
    if (cached_has_bits & 0x00200000u) {
      crc_ = from.crc_;
    }
    if (cached_has_bits & 0x00400000u) {
      cis_ = from.cis_;
    }
    if (cached_has_bits & 0x00800000u) {
      crs_ = from.crs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      cuc_ = from.cuc_;
    }
    if (cached_has_bits & 0x02000000u) {
      cus_ = from.cus_;
    }
    if (cached_has_bits & 0x04000000u) {
      omega0_ = from.omega0_;
    }
    if (cached_has_bits & 0x08000000u) {
      omega_ = from.omega_;
    }
    if (cached_has_bits & 0x10000000u) {
      i0_ = from.i0_;
    }
    if (cached_has_bits & 0x20000000u) {
      omegadot_ = from.omegadot_;
    }
    if (cached_has_bits & 0x40000000u) {
      idot_ = from.idot_;
    }
    if (cached_has_bits & 0x80000000u) {
      codesonl2channel_ = from.codesonl2channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      accuracy_ = from.accuracy_;
    }
    if (cached_has_bits & 0x00000002u) {
      health_ = from.health_;
    }
    if (cached_has_bits & 0x00000004u) {
      tgd_ = from.tgd_;
    }
    if (cached_has_bits & 0x00000008u) {
      iodc_ = from.iodc_;
    }
    if (cached_has_bits & 0x00000010u) {
      gnss_type_ = from.gnss_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      gnss_time_type_ = from.gnss_time_type_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void KepplerOrbit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.KepplerOrbit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KepplerOrbit::CopyFrom(const KepplerOrbit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.KepplerOrbit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KepplerOrbit::IsInitialized() const {
  return true;
}

void KepplerOrbit::Swap(KepplerOrbit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KepplerOrbit::InternalSwap(KepplerOrbit* other) {
  std::swap(sat_prn_, other->sat_prn_);
  std::swap(year_, other->year_);
  std::swap(month_, other->month_);
  std::swap(day_, other->day_);
  std::swap(hour_, other->hour_);
  std::swap(minute_, other->minute_);
  std::swap(second_s_, other->second_s_);
  std::swap(reserved_, other->reserved_);
  std::swap(af0_, other->af0_);
  std::swap(af1_, other->af1_);
  std::swap(af2_, other->af2_);
  std::swap(iode_, other->iode_);
  std::swap(deltan_, other->deltan_);
  std::swap(m0_, other->m0_);
  std::swap(e_, other->e_);
  std::swap(roota_, other->roota_);
  std::swap(toe_, other->toe_);
  std::swap(toc_, other->toc_);
  std::swap(cic_, other->cic_);
  std::swap(week_num_, other->week_num_);
  std::swap(l2pdataflag_, other->l2pdataflag_);
  std::swap(crc_, other->crc_);
  std::swap(cis_, other->cis_);
  std::swap(crs_, other->crs_);
  std::swap(cuc_, other->cuc_);
  std::swap(cus_, other->cus_);
  std::swap(omega0_, other->omega0_);
  std::swap(omega_, other->omega_);
  std::swap(i0_, other->i0_);
  std::swap(omegadot_, other->omegadot_);
  std::swap(idot_, other->idot_);
  std::swap(codesonl2channel_, other->codesonl2channel_);
  std::swap(accuracy_, other->accuracy_);
  std::swap(health_, other->health_);
  std::swap(tgd_, other->tgd_);
  std::swap(iodc_, other->iodc_);
  std::swap(gnss_type_, other->gnss_type_);
  std::swap(gnss_time_type_, other->gnss_time_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KepplerOrbit::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KepplerOrbit

// optional .jmc_auto.drivers.gnss.GnssType gnss_type = 1 [default = GPS_SYS];
bool KepplerOrbit::has_gnss_type() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void KepplerOrbit::set_has_gnss_type() {
  _has_bits_[1] |= 0x00000010u;
}
void KepplerOrbit::clear_has_gnss_type() {
  _has_bits_[1] &= ~0x00000010u;
}
void KepplerOrbit::clear_gnss_type() {
  gnss_type_ = 1;
  clear_has_gnss_type();
}
::jmc_auto::drivers::gnss::GnssType KepplerOrbit::gnss_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.gnss_type)
  return static_cast< ::jmc_auto::drivers::gnss::GnssType >(gnss_type_);
}
void KepplerOrbit::set_gnss_type(::jmc_auto::drivers::gnss::GnssType value) {
  assert(::jmc_auto::drivers::gnss::GnssType_IsValid(value));
  set_has_gnss_type();
  gnss_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.gnss_type)
}

// optional uint32 sat_prn = 2;
bool KepplerOrbit::has_sat_prn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KepplerOrbit::set_has_sat_prn() {
  _has_bits_[0] |= 0x00000001u;
}
void KepplerOrbit::clear_has_sat_prn() {
  _has_bits_[0] &= ~0x00000001u;
}
void KepplerOrbit::clear_sat_prn() {
  sat_prn_ = 0u;
  clear_has_sat_prn();
}
::google::protobuf::uint32 KepplerOrbit::sat_prn() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.sat_prn)
  return sat_prn_;
}
void KepplerOrbit::set_sat_prn(::google::protobuf::uint32 value) {
  set_has_sat_prn();
  sat_prn_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.sat_prn)
}

// optional .jmc_auto.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GPS_TIME];
bool KepplerOrbit::has_gnss_time_type() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void KepplerOrbit::set_has_gnss_time_type() {
  _has_bits_[1] |= 0x00000020u;
}
void KepplerOrbit::clear_has_gnss_time_type() {
  _has_bits_[1] &= ~0x00000020u;
}
void KepplerOrbit::clear_gnss_time_type() {
  gnss_time_type_ = 1;
  clear_has_gnss_time_type();
}
::jmc_auto::drivers::gnss::GnssTimeType KepplerOrbit::gnss_time_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.gnss_time_type)
  return static_cast< ::jmc_auto::drivers::gnss::GnssTimeType >(gnss_time_type_);
}
void KepplerOrbit::set_gnss_time_type(::jmc_auto::drivers::gnss::GnssTimeType value) {
  assert(::jmc_auto::drivers::gnss::GnssTimeType_IsValid(value));
  set_has_gnss_time_type();
  gnss_time_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.gnss_time_type)
}

// optional uint32 year = 4;
bool KepplerOrbit::has_year() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KepplerOrbit::set_has_year() {
  _has_bits_[0] |= 0x00000002u;
}
void KepplerOrbit::clear_has_year() {
  _has_bits_[0] &= ~0x00000002u;
}
void KepplerOrbit::clear_year() {
  year_ = 0u;
  clear_has_year();
}
::google::protobuf::uint32 KepplerOrbit::year() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.year)
  return year_;
}
void KepplerOrbit::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.year)
}

// optional uint32 month = 5;
bool KepplerOrbit::has_month() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KepplerOrbit::set_has_month() {
  _has_bits_[0] |= 0x00000004u;
}
void KepplerOrbit::clear_has_month() {
  _has_bits_[0] &= ~0x00000004u;
}
void KepplerOrbit::clear_month() {
  month_ = 0u;
  clear_has_month();
}
::google::protobuf::uint32 KepplerOrbit::month() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.month)
  return month_;
}
void KepplerOrbit::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.month)
}

// optional uint32 day = 6;
bool KepplerOrbit::has_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KepplerOrbit::set_has_day() {
  _has_bits_[0] |= 0x00000008u;
}
void KepplerOrbit::clear_has_day() {
  _has_bits_[0] &= ~0x00000008u;
}
void KepplerOrbit::clear_day() {
  day_ = 0u;
  clear_has_day();
}
::google::protobuf::uint32 KepplerOrbit::day() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.day)
  return day_;
}
void KepplerOrbit::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.day)
}

// optional uint32 hour = 7;
bool KepplerOrbit::has_hour() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void KepplerOrbit::set_has_hour() {
  _has_bits_[0] |= 0x00000010u;
}
void KepplerOrbit::clear_has_hour() {
  _has_bits_[0] &= ~0x00000010u;
}
void KepplerOrbit::clear_hour() {
  hour_ = 0u;
  clear_has_hour();
}
::google::protobuf::uint32 KepplerOrbit::hour() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.hour)
  return hour_;
}
void KepplerOrbit::set_hour(::google::protobuf::uint32 value) {
  set_has_hour();
  hour_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.hour)
}

// optional uint32 minute = 8;
bool KepplerOrbit::has_minute() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void KepplerOrbit::set_has_minute() {
  _has_bits_[0] |= 0x00000020u;
}
void KepplerOrbit::clear_has_minute() {
  _has_bits_[0] &= ~0x00000020u;
}
void KepplerOrbit::clear_minute() {
  minute_ = 0u;
  clear_has_minute();
}
::google::protobuf::uint32 KepplerOrbit::minute() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.minute)
  return minute_;
}
void KepplerOrbit::set_minute(::google::protobuf::uint32 value) {
  set_has_minute();
  minute_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.minute)
}

// optional double second_s = 9;
bool KepplerOrbit::has_second_s() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void KepplerOrbit::set_has_second_s() {
  _has_bits_[0] |= 0x00000040u;
}
void KepplerOrbit::clear_has_second_s() {
  _has_bits_[0] &= ~0x00000040u;
}
void KepplerOrbit::clear_second_s() {
  second_s_ = 0;
  clear_has_second_s();
}
double KepplerOrbit::second_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.second_s)
  return second_s_;
}
void KepplerOrbit::set_second_s(double value) {
  set_has_second_s();
  second_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.second_s)
}

// optional uint32 week_num = 10;
bool KepplerOrbit::has_week_num() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void KepplerOrbit::set_has_week_num() {
  _has_bits_[0] |= 0x00080000u;
}
void KepplerOrbit::clear_has_week_num() {
  _has_bits_[0] &= ~0x00080000u;
}
void KepplerOrbit::clear_week_num() {
  week_num_ = 0u;
  clear_has_week_num();
}
::google::protobuf::uint32 KepplerOrbit::week_num() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.week_num)
  return week_num_;
}
void KepplerOrbit::set_week_num(::google::protobuf::uint32 value) {
  set_has_week_num();
  week_num_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.week_num)
}

// optional double reserved = 11;
bool KepplerOrbit::has_reserved() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void KepplerOrbit::set_has_reserved() {
  _has_bits_[0] |= 0x00000080u;
}
void KepplerOrbit::clear_has_reserved() {
  _has_bits_[0] &= ~0x00000080u;
}
void KepplerOrbit::clear_reserved() {
  reserved_ = 0;
  clear_has_reserved();
}
double KepplerOrbit::reserved() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.reserved)
  return reserved_;
}
void KepplerOrbit::set_reserved(double value) {
  set_has_reserved();
  reserved_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.reserved)
}

// optional double af0 = 12;
bool KepplerOrbit::has_af0() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void KepplerOrbit::set_has_af0() {
  _has_bits_[0] |= 0x00000100u;
}
void KepplerOrbit::clear_has_af0() {
  _has_bits_[0] &= ~0x00000100u;
}
void KepplerOrbit::clear_af0() {
  af0_ = 0;
  clear_has_af0();
}
double KepplerOrbit::af0() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.af0)
  return af0_;
}
void KepplerOrbit::set_af0(double value) {
  set_has_af0();
  af0_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.af0)
}

// optional double af1 = 13;
bool KepplerOrbit::has_af1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void KepplerOrbit::set_has_af1() {
  _has_bits_[0] |= 0x00000200u;
}
void KepplerOrbit::clear_has_af1() {
  _has_bits_[0] &= ~0x00000200u;
}
void KepplerOrbit::clear_af1() {
  af1_ = 0;
  clear_has_af1();
}
double KepplerOrbit::af1() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.af1)
  return af1_;
}
void KepplerOrbit::set_af1(double value) {
  set_has_af1();
  af1_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.af1)
}

// optional double af2 = 14;
bool KepplerOrbit::has_af2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void KepplerOrbit::set_has_af2() {
  _has_bits_[0] |= 0x00000400u;
}
void KepplerOrbit::clear_has_af2() {
  _has_bits_[0] &= ~0x00000400u;
}
void KepplerOrbit::clear_af2() {
  af2_ = 0;
  clear_has_af2();
}
double KepplerOrbit::af2() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.af2)
  return af2_;
}
void KepplerOrbit::set_af2(double value) {
  set_has_af2();
  af2_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.af2)
}

// optional double iode = 15;
bool KepplerOrbit::has_iode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void KepplerOrbit::set_has_iode() {
  _has_bits_[0] |= 0x00000800u;
}
void KepplerOrbit::clear_has_iode() {
  _has_bits_[0] &= ~0x00000800u;
}
void KepplerOrbit::clear_iode() {
  iode_ = 0;
  clear_has_iode();
}
double KepplerOrbit::iode() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.iode)
  return iode_;
}
void KepplerOrbit::set_iode(double value) {
  set_has_iode();
  iode_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.iode)
}

// optional double deltan = 16;
bool KepplerOrbit::has_deltan() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void KepplerOrbit::set_has_deltan() {
  _has_bits_[0] |= 0x00001000u;
}
void KepplerOrbit::clear_has_deltan() {
  _has_bits_[0] &= ~0x00001000u;
}
void KepplerOrbit::clear_deltan() {
  deltan_ = 0;
  clear_has_deltan();
}
double KepplerOrbit::deltan() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.deltan)
  return deltan_;
}
void KepplerOrbit::set_deltan(double value) {
  set_has_deltan();
  deltan_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.deltan)
}

// optional double m0 = 17;
bool KepplerOrbit::has_m0() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void KepplerOrbit::set_has_m0() {
  _has_bits_[0] |= 0x00002000u;
}
void KepplerOrbit::clear_has_m0() {
  _has_bits_[0] &= ~0x00002000u;
}
void KepplerOrbit::clear_m0() {
  m0_ = 0;
  clear_has_m0();
}
double KepplerOrbit::m0() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.m0)
  return m0_;
}
void KepplerOrbit::set_m0(double value) {
  set_has_m0();
  m0_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.m0)
}

// optional double e = 18;
bool KepplerOrbit::has_e() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void KepplerOrbit::set_has_e() {
  _has_bits_[0] |= 0x00004000u;
}
void KepplerOrbit::clear_has_e() {
  _has_bits_[0] &= ~0x00004000u;
}
void KepplerOrbit::clear_e() {
  e_ = 0;
  clear_has_e();
}
double KepplerOrbit::e() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.e)
  return e_;
}
void KepplerOrbit::set_e(double value) {
  set_has_e();
  e_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.e)
}

// optional double roota = 19;
bool KepplerOrbit::has_roota() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void KepplerOrbit::set_has_roota() {
  _has_bits_[0] |= 0x00008000u;
}
void KepplerOrbit::clear_has_roota() {
  _has_bits_[0] &= ~0x00008000u;
}
void KepplerOrbit::clear_roota() {
  roota_ = 0;
  clear_has_roota();
}
double KepplerOrbit::roota() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.roota)
  return roota_;
}
void KepplerOrbit::set_roota(double value) {
  set_has_roota();
  roota_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.roota)
}

// optional double toe = 20;
bool KepplerOrbit::has_toe() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void KepplerOrbit::set_has_toe() {
  _has_bits_[0] |= 0x00010000u;
}
void KepplerOrbit::clear_has_toe() {
  _has_bits_[0] &= ~0x00010000u;
}
void KepplerOrbit::clear_toe() {
  toe_ = 0;
  clear_has_toe();
}
double KepplerOrbit::toe() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.toe)
  return toe_;
}
void KepplerOrbit::set_toe(double value) {
  set_has_toe();
  toe_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.toe)
}

// optional double toc = 21;
bool KepplerOrbit::has_toc() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void KepplerOrbit::set_has_toc() {
  _has_bits_[0] |= 0x00020000u;
}
void KepplerOrbit::clear_has_toc() {
  _has_bits_[0] &= ~0x00020000u;
}
void KepplerOrbit::clear_toc() {
  toc_ = 0;
  clear_has_toc();
}
double KepplerOrbit::toc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.toc)
  return toc_;
}
void KepplerOrbit::set_toc(double value) {
  set_has_toc();
  toc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.toc)
}

// optional double cic = 22;
bool KepplerOrbit::has_cic() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void KepplerOrbit::set_has_cic() {
  _has_bits_[0] |= 0x00040000u;
}
void KepplerOrbit::clear_has_cic() {
  _has_bits_[0] &= ~0x00040000u;
}
void KepplerOrbit::clear_cic() {
  cic_ = 0;
  clear_has_cic();
}
double KepplerOrbit::cic() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.cic)
  return cic_;
}
void KepplerOrbit::set_cic(double value) {
  set_has_cic();
  cic_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.cic)
}

// optional double crc = 23;
bool KepplerOrbit::has_crc() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void KepplerOrbit::set_has_crc() {
  _has_bits_[0] |= 0x00200000u;
}
void KepplerOrbit::clear_has_crc() {
  _has_bits_[0] &= ~0x00200000u;
}
void KepplerOrbit::clear_crc() {
  crc_ = 0;
  clear_has_crc();
}
double KepplerOrbit::crc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.crc)
  return crc_;
}
void KepplerOrbit::set_crc(double value) {
  set_has_crc();
  crc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.crc)
}

// optional double cis = 24;
bool KepplerOrbit::has_cis() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void KepplerOrbit::set_has_cis() {
  _has_bits_[0] |= 0x00400000u;
}
void KepplerOrbit::clear_has_cis() {
  _has_bits_[0] &= ~0x00400000u;
}
void KepplerOrbit::clear_cis() {
  cis_ = 0;
  clear_has_cis();
}
double KepplerOrbit::cis() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.cis)
  return cis_;
}
void KepplerOrbit::set_cis(double value) {
  set_has_cis();
  cis_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.cis)
}

// optional double crs = 25;
bool KepplerOrbit::has_crs() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void KepplerOrbit::set_has_crs() {
  _has_bits_[0] |= 0x00800000u;
}
void KepplerOrbit::clear_has_crs() {
  _has_bits_[0] &= ~0x00800000u;
}
void KepplerOrbit::clear_crs() {
  crs_ = 0;
  clear_has_crs();
}
double KepplerOrbit::crs() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.crs)
  return crs_;
}
void KepplerOrbit::set_crs(double value) {
  set_has_crs();
  crs_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.crs)
}

// optional double cuc = 26;
bool KepplerOrbit::has_cuc() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void KepplerOrbit::set_has_cuc() {
  _has_bits_[0] |= 0x01000000u;
}
void KepplerOrbit::clear_has_cuc() {
  _has_bits_[0] &= ~0x01000000u;
}
void KepplerOrbit::clear_cuc() {
  cuc_ = 0;
  clear_has_cuc();
}
double KepplerOrbit::cuc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.cuc)
  return cuc_;
}
void KepplerOrbit::set_cuc(double value) {
  set_has_cuc();
  cuc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.cuc)
}

// optional double cus = 27;
bool KepplerOrbit::has_cus() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void KepplerOrbit::set_has_cus() {
  _has_bits_[0] |= 0x02000000u;
}
void KepplerOrbit::clear_has_cus() {
  _has_bits_[0] &= ~0x02000000u;
}
void KepplerOrbit::clear_cus() {
  cus_ = 0;
  clear_has_cus();
}
double KepplerOrbit::cus() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.cus)
  return cus_;
}
void KepplerOrbit::set_cus(double value) {
  set_has_cus();
  cus_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.cus)
}

// optional double omega0 = 28;
bool KepplerOrbit::has_omega0() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void KepplerOrbit::set_has_omega0() {
  _has_bits_[0] |= 0x04000000u;
}
void KepplerOrbit::clear_has_omega0() {
  _has_bits_[0] &= ~0x04000000u;
}
void KepplerOrbit::clear_omega0() {
  omega0_ = 0;
  clear_has_omega0();
}
double KepplerOrbit::omega0() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.omega0)
  return omega0_;
}
void KepplerOrbit::set_omega0(double value) {
  set_has_omega0();
  omega0_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.omega0)
}

// optional double omega = 29;
bool KepplerOrbit::has_omega() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void KepplerOrbit::set_has_omega() {
  _has_bits_[0] |= 0x08000000u;
}
void KepplerOrbit::clear_has_omega() {
  _has_bits_[0] &= ~0x08000000u;
}
void KepplerOrbit::clear_omega() {
  omega_ = 0;
  clear_has_omega();
}
double KepplerOrbit::omega() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.omega)
  return omega_;
}
void KepplerOrbit::set_omega(double value) {
  set_has_omega();
  omega_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.omega)
}

// optional double i0 = 30;
bool KepplerOrbit::has_i0() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void KepplerOrbit::set_has_i0() {
  _has_bits_[0] |= 0x10000000u;
}
void KepplerOrbit::clear_has_i0() {
  _has_bits_[0] &= ~0x10000000u;
}
void KepplerOrbit::clear_i0() {
  i0_ = 0;
  clear_has_i0();
}
double KepplerOrbit::i0() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.i0)
  return i0_;
}
void KepplerOrbit::set_i0(double value) {
  set_has_i0();
  i0_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.i0)
}

// optional double omegadot = 31;
bool KepplerOrbit::has_omegadot() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void KepplerOrbit::set_has_omegadot() {
  _has_bits_[0] |= 0x20000000u;
}
void KepplerOrbit::clear_has_omegadot() {
  _has_bits_[0] &= ~0x20000000u;
}
void KepplerOrbit::clear_omegadot() {
  omegadot_ = 0;
  clear_has_omegadot();
}
double KepplerOrbit::omegadot() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.omegadot)
  return omegadot_;
}
void KepplerOrbit::set_omegadot(double value) {
  set_has_omegadot();
  omegadot_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.omegadot)
}

// optional double idot = 32;
bool KepplerOrbit::has_idot() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void KepplerOrbit::set_has_idot() {
  _has_bits_[0] |= 0x40000000u;
}
void KepplerOrbit::clear_has_idot() {
  _has_bits_[0] &= ~0x40000000u;
}
void KepplerOrbit::clear_idot() {
  idot_ = 0;
  clear_has_idot();
}
double KepplerOrbit::idot() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.idot)
  return idot_;
}
void KepplerOrbit::set_idot(double value) {
  set_has_idot();
  idot_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.idot)
}

// optional double codesonL2channel = 33;
bool KepplerOrbit::has_codesonl2channel() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void KepplerOrbit::set_has_codesonl2channel() {
  _has_bits_[0] |= 0x80000000u;
}
void KepplerOrbit::clear_has_codesonl2channel() {
  _has_bits_[0] &= ~0x80000000u;
}
void KepplerOrbit::clear_codesonl2channel() {
  codesonl2channel_ = 0;
  clear_has_codesonl2channel();
}
double KepplerOrbit::codesonl2channel() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.codesonL2channel)
  return codesonl2channel_;
}
void KepplerOrbit::set_codesonl2channel(double value) {
  set_has_codesonl2channel();
  codesonl2channel_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.codesonL2channel)
}

// optional uint32 L2Pdataflag = 34;
bool KepplerOrbit::has_l2pdataflag() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void KepplerOrbit::set_has_l2pdataflag() {
  _has_bits_[0] |= 0x00100000u;
}
void KepplerOrbit::clear_has_l2pdataflag() {
  _has_bits_[0] &= ~0x00100000u;
}
void KepplerOrbit::clear_l2pdataflag() {
  l2pdataflag_ = 0u;
  clear_has_l2pdataflag();
}
::google::protobuf::uint32 KepplerOrbit::l2pdataflag() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.L2Pdataflag)
  return l2pdataflag_;
}
void KepplerOrbit::set_l2pdataflag(::google::protobuf::uint32 value) {
  set_has_l2pdataflag();
  l2pdataflag_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.L2Pdataflag)
}

// optional uint32 accuracy = 35;
bool KepplerOrbit::has_accuracy() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void KepplerOrbit::set_has_accuracy() {
  _has_bits_[1] |= 0x00000001u;
}
void KepplerOrbit::clear_has_accuracy() {
  _has_bits_[1] &= ~0x00000001u;
}
void KepplerOrbit::clear_accuracy() {
  accuracy_ = 0u;
  clear_has_accuracy();
}
::google::protobuf::uint32 KepplerOrbit::accuracy() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.accuracy)
  return accuracy_;
}
void KepplerOrbit::set_accuracy(::google::protobuf::uint32 value) {
  set_has_accuracy();
  accuracy_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.accuracy)
}

// optional uint32 health = 36;
bool KepplerOrbit::has_health() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void KepplerOrbit::set_has_health() {
  _has_bits_[1] |= 0x00000002u;
}
void KepplerOrbit::clear_has_health() {
  _has_bits_[1] &= ~0x00000002u;
}
void KepplerOrbit::clear_health() {
  health_ = 0u;
  clear_has_health();
}
::google::protobuf::uint32 KepplerOrbit::health() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.health)
  return health_;
}
void KepplerOrbit::set_health(::google::protobuf::uint32 value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.health)
}

// optional double tgd = 37;
bool KepplerOrbit::has_tgd() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void KepplerOrbit::set_has_tgd() {
  _has_bits_[1] |= 0x00000004u;
}
void KepplerOrbit::clear_has_tgd() {
  _has_bits_[1] &= ~0x00000004u;
}
void KepplerOrbit::clear_tgd() {
  tgd_ = 0;
  clear_has_tgd();
}
double KepplerOrbit::tgd() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.tgd)
  return tgd_;
}
void KepplerOrbit::set_tgd(double value) {
  set_has_tgd();
  tgd_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.tgd)
}

// optional double iodc = 38;
bool KepplerOrbit::has_iodc() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void KepplerOrbit::set_has_iodc() {
  _has_bits_[1] |= 0x00000008u;
}
void KepplerOrbit::clear_has_iodc() {
  _has_bits_[1] &= ~0x00000008u;
}
void KepplerOrbit::clear_iodc() {
  iodc_ = 0;
  clear_has_iodc();
}
double KepplerOrbit::iodc() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.KepplerOrbit.iodc)
  return iodc_;
}
void KepplerOrbit::set_iodc(double value) {
  set_has_iodc();
  iodc_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.KepplerOrbit.iodc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GlonassOrbit::kGnssTypeFieldNumber;
const int GlonassOrbit::kSlotPrnFieldNumber;
const int GlonassOrbit::kGnssTimeTypeFieldNumber;
const int GlonassOrbit::kToeFieldNumber;
const int GlonassOrbit::kYearFieldNumber;
const int GlonassOrbit::kMonthFieldNumber;
const int GlonassOrbit::kDayFieldNumber;
const int GlonassOrbit::kHourFieldNumber;
const int GlonassOrbit::kMinuteFieldNumber;
const int GlonassOrbit::kSecondSFieldNumber;
const int GlonassOrbit::kFrequencyNoFieldNumber;
const int GlonassOrbit::kWeekNumFieldNumber;
const int GlonassOrbit::kWeekSecondSFieldNumber;
const int GlonassOrbit::kTkFieldNumber;
const int GlonassOrbit::kClockOffsetFieldNumber;
const int GlonassOrbit::kClockDriftFieldNumber;
const int GlonassOrbit::kHealthFieldNumber;
const int GlonassOrbit::kPositionXFieldNumber;
const int GlonassOrbit::kPositionYFieldNumber;
const int GlonassOrbit::kPositionZFieldNumber;
const int GlonassOrbit::kVelocityXFieldNumber;
const int GlonassOrbit::kVelocityYFieldNumber;
const int GlonassOrbit::kVelocityZFieldNumber;
const int GlonassOrbit::kAccelerateXFieldNumber;
const int GlonassOrbit::kAccelerateYFieldNumber;
const int GlonassOrbit::kAccelerateZFieldNumber;
const int GlonassOrbit::kInforAgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GlonassOrbit::GlonassOrbit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.GlonassOrbit)
}
GlonassOrbit::GlonassOrbit(const GlonassOrbit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&slot_prn_, &from.slot_prn_,
    reinterpret_cast<char*>(&gnss_time_type_) -
    reinterpret_cast<char*>(&slot_prn_) + sizeof(gnss_time_type_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.GlonassOrbit)
}

void GlonassOrbit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&slot_prn_, 0, reinterpret_cast<char*>(&health_) -
    reinterpret_cast<char*>(&slot_prn_) + sizeof(health_));
  gnss_type_ = 3;
  gnss_time_type_ = 3;
}

GlonassOrbit::~GlonassOrbit() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.GlonassOrbit)
  SharedDtor();
}

void GlonassOrbit::SharedDtor() {
}

void GlonassOrbit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlonassOrbit::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GlonassOrbit& GlonassOrbit::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::InitDefaults();
  return *internal_default_instance();
}

GlonassOrbit* GlonassOrbit::New(::google::protobuf::Arena* arena) const {
  GlonassOrbit* n = new GlonassOrbit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GlonassOrbit::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.GlonassOrbit)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&slot_prn_, 0, reinterpret_cast<char*>(&second_s_) -
      reinterpret_cast<char*>(&slot_prn_) + sizeof(second_s_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&frequency_no_, 0, reinterpret_cast<char*>(&position_y_) -
      reinterpret_cast<char*>(&frequency_no_) + sizeof(position_y_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&position_z_, 0, reinterpret_cast<char*>(&infor_age_) -
      reinterpret_cast<char*>(&position_z_) + sizeof(infor_age_));
  }
  if (_has_bits_[24 / 32] & 117440512u) {
    health_ = 0u;
    gnss_type_ = 3;
    gnss_time_type_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GlonassOrbit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.GlonassOrbit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::drivers::gnss::GnssType_IsValid(value)) {
            set_gnss_type(static_cast< ::jmc_auto::drivers::gnss::GnssType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_prn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_slot_prn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_prn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::drivers::gnss::GnssTimeType_IsValid(value)) {
            set_gnss_time_type(static_cast< ::jmc_auto::drivers::gnss::GnssTimeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double toe = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_toe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &toe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 year = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 month = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 day = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hour = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_hour();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 minute = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_minute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double second_s = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_second_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &second_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 frequency_no = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_frequency_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frequency_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 week_num = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_week_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double week_second_s = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_week_second_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &week_second_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tk = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_tk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double clock_offset = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_clock_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clock_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double clock_drift = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_clock_drift();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &clock_drift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 health = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_health();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_x = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u)) {
          set_has_position_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_y = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u)) {
          set_has_position_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double position_z = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u)) {
          set_has_position_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &position_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double velocity_x = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u)) {
          set_has_velocity_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double velocity_y = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u)) {
          set_has_velocity_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double velocity_z = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u)) {
          set_has_velocity_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accelerate_x = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u)) {
          set_has_accelerate_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerate_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accelerate_y = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u)) {
          set_has_accelerate_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerate_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double accelerate_z = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u)) {
          set_has_accelerate_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerate_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double infor_age = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u)) {
          set_has_infor_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &infor_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.GlonassOrbit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.GlonassOrbit)
  return false;
#undef DO_
}

void GlonassOrbit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.GlonassOrbit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gnss_type(), output);
  }

  // optional uint32 slot_prn = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_prn(), output);
  }

  // optional .jmc_auto.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->gnss_time_type(), output);
  }

  // optional double toe = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->toe(), output);
  }

  // optional uint32 year = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->year(), output);
  }

  // optional uint32 month = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->month(), output);
  }

  // optional uint32 day = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->day(), output);
  }

  // optional uint32 hour = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->hour(), output);
  }

  // optional uint32 minute = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->minute(), output);
  }

  // optional double second_s = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->second_s(), output);
  }

  // optional int32 frequency_no = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->frequency_no(), output);
  }

  // optional uint32 week_num = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->week_num(), output);
  }

  // optional double week_second_s = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->week_second_s(), output);
  }

  // optional double tk = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->tk(), output);
  }

  // optional double clock_offset = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->clock_offset(), output);
  }

  // optional double clock_drift = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->clock_drift(), output);
  }

  // optional uint32 health = 17;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->health(), output);
  }

  // optional double position_x = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->position_x(), output);
  }

  // optional double position_y = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->position_y(), output);
  }

  // optional double position_z = 20;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->position_z(), output);
  }

  // optional double velocity_x = 21;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->velocity_x(), output);
  }

  // optional double velocity_y = 22;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->velocity_y(), output);
  }

  // optional double velocity_z = 23;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->velocity_z(), output);
  }

  // optional double accelerate_x = 24;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->accelerate_x(), output);
  }

  // optional double accelerate_y = 25;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->accelerate_y(), output);
  }

  // optional double accelerate_z = 26;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->accelerate_z(), output);
  }

  // optional double infor_age = 27;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->infor_age(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.GlonassOrbit)
}

::google::protobuf::uint8* GlonassOrbit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.GlonassOrbit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gnss_type(), target);
  }

  // optional uint32 slot_prn = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_prn(), target);
  }

  // optional .jmc_auto.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->gnss_time_type(), target);
  }

  // optional double toe = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->toe(), target);
  }

  // optional uint32 year = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->year(), target);
  }

  // optional uint32 month = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->month(), target);
  }

  // optional uint32 day = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->day(), target);
  }

  // optional uint32 hour = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->hour(), target);
  }

  // optional uint32 minute = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->minute(), target);
  }

  // optional double second_s = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->second_s(), target);
  }

  // optional int32 frequency_no = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->frequency_no(), target);
  }

  // optional uint32 week_num = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->week_num(), target);
  }

  // optional double week_second_s = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->week_second_s(), target);
  }

  // optional double tk = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->tk(), target);
  }

  // optional double clock_offset = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->clock_offset(), target);
  }

  // optional double clock_drift = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->clock_drift(), target);
  }

  // optional uint32 health = 17;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->health(), target);
  }

  // optional double position_x = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->position_x(), target);
  }

  // optional double position_y = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->position_y(), target);
  }

  // optional double position_z = 20;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->position_z(), target);
  }

  // optional double velocity_x = 21;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->velocity_x(), target);
  }

  // optional double velocity_y = 22;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->velocity_y(), target);
  }

  // optional double velocity_z = 23;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->velocity_z(), target);
  }

  // optional double accelerate_x = 24;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->accelerate_x(), target);
  }

  // optional double accelerate_y = 25;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->accelerate_y(), target);
  }

  // optional double accelerate_z = 26;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->accelerate_z(), target);
  }

  // optional double infor_age = 27;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->infor_age(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.GlonassOrbit)
  return target;
}

size_t GlonassOrbit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.GlonassOrbit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 slot_prn = 2;
    if (has_slot_prn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_prn());
    }

    // optional uint32 year = 5;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }

    // optional double toe = 4;
    if (has_toe()) {
      total_size += 1 + 8;
    }

    // optional uint32 month = 6;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // optional uint32 day = 7;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional uint32 hour = 8;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hour());
    }

    // optional uint32 minute = 9;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minute());
    }

    // optional double second_s = 10;
    if (has_second_s()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 frequency_no = 11;
    if (has_frequency_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frequency_no());
    }

    // optional uint32 week_num = 12;
    if (has_week_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_num());
    }

    // optional double week_second_s = 13;
    if (has_week_second_s()) {
      total_size += 1 + 8;
    }

    // optional double tk = 14;
    if (has_tk()) {
      total_size += 1 + 8;
    }

    // optional double clock_offset = 15;
    if (has_clock_offset()) {
      total_size += 1 + 8;
    }

    // optional double clock_drift = 16;
    if (has_clock_drift()) {
      total_size += 2 + 8;
    }

    // optional double position_x = 18;
    if (has_position_x()) {
      total_size += 2 + 8;
    }

    // optional double position_y = 19;
    if (has_position_y()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double position_z = 20;
    if (has_position_z()) {
      total_size += 2 + 8;
    }

    // optional double velocity_x = 21;
    if (has_velocity_x()) {
      total_size += 2 + 8;
    }

    // optional double velocity_y = 22;
    if (has_velocity_y()) {
      total_size += 2 + 8;
    }

    // optional double velocity_z = 23;
    if (has_velocity_z()) {
      total_size += 2 + 8;
    }

    // optional double accelerate_x = 24;
    if (has_accelerate_x()) {
      total_size += 2 + 8;
    }

    // optional double accelerate_y = 25;
    if (has_accelerate_y()) {
      total_size += 2 + 8;
    }

    // optional double accelerate_z = 26;
    if (has_accelerate_z()) {
      total_size += 2 + 8;
    }

    // optional double infor_age = 27;
    if (has_infor_age()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 117440512u) {
    // optional uint32 health = 17;
    if (has_health()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health());
    }

    // optional .jmc_auto.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
    if (has_gnss_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_type());
    }

    // optional .jmc_auto.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
    if (has_gnss_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_time_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlonassOrbit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.GlonassOrbit)
  GOOGLE_DCHECK_NE(&from, this);
  const GlonassOrbit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GlonassOrbit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.GlonassOrbit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.GlonassOrbit)
    MergeFrom(*source);
  }
}

void GlonassOrbit::MergeFrom(const GlonassOrbit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.GlonassOrbit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      slot_prn_ = from.slot_prn_;
    }
    if (cached_has_bits & 0x00000002u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000004u) {
      toe_ = from.toe_;
    }
    if (cached_has_bits & 0x00000008u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000010u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000020u) {
      hour_ = from.hour_;
    }
    if (cached_has_bits & 0x00000040u) {
      minute_ = from.minute_;
    }
    if (cached_has_bits & 0x00000080u) {
      second_s_ = from.second_s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      frequency_no_ = from.frequency_no_;
    }
    if (cached_has_bits & 0x00000200u) {
      week_num_ = from.week_num_;
    }
    if (cached_has_bits & 0x00000400u) {
      week_second_s_ = from.week_second_s_;
    }
    if (cached_has_bits & 0x00000800u) {
      tk_ = from.tk_;
    }
    if (cached_has_bits & 0x00001000u) {
      clock_offset_ = from.clock_offset_;
    }
    if (cached_has_bits & 0x00002000u) {
      clock_drift_ = from.clock_drift_;
    }
    if (cached_has_bits & 0x00004000u) {
      position_x_ = from.position_x_;
    }
    if (cached_has_bits & 0x00008000u) {
      position_y_ = from.position_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      position_z_ = from.position_z_;
    }
    if (cached_has_bits & 0x00020000u) {
      velocity_x_ = from.velocity_x_;
    }
    if (cached_has_bits & 0x00040000u) {
      velocity_y_ = from.velocity_y_;
    }
    if (cached_has_bits & 0x00080000u) {
      velocity_z_ = from.velocity_z_;
    }
    if (cached_has_bits & 0x00100000u) {
      accelerate_x_ = from.accelerate_x_;
    }
    if (cached_has_bits & 0x00200000u) {
      accelerate_y_ = from.accelerate_y_;
    }
    if (cached_has_bits & 0x00400000u) {
      accelerate_z_ = from.accelerate_z_;
    }
    if (cached_has_bits & 0x00800000u) {
      infor_age_ = from.infor_age_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 117440512u) {
    if (cached_has_bits & 0x01000000u) {
      health_ = from.health_;
    }
    if (cached_has_bits & 0x02000000u) {
      gnss_type_ = from.gnss_type_;
    }
    if (cached_has_bits & 0x04000000u) {
      gnss_time_type_ = from.gnss_time_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GlonassOrbit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.GlonassOrbit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlonassOrbit::CopyFrom(const GlonassOrbit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.GlonassOrbit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlonassOrbit::IsInitialized() const {
  return true;
}

void GlonassOrbit::Swap(GlonassOrbit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GlonassOrbit::InternalSwap(GlonassOrbit* other) {
  std::swap(slot_prn_, other->slot_prn_);
  std::swap(year_, other->year_);
  std::swap(toe_, other->toe_);
  std::swap(month_, other->month_);
  std::swap(day_, other->day_);
  std::swap(hour_, other->hour_);
  std::swap(minute_, other->minute_);
  std::swap(second_s_, other->second_s_);
  std::swap(frequency_no_, other->frequency_no_);
  std::swap(week_num_, other->week_num_);
  std::swap(week_second_s_, other->week_second_s_);
  std::swap(tk_, other->tk_);
  std::swap(clock_offset_, other->clock_offset_);
  std::swap(clock_drift_, other->clock_drift_);
  std::swap(position_x_, other->position_x_);
  std::swap(position_y_, other->position_y_);
  std::swap(position_z_, other->position_z_);
  std::swap(velocity_x_, other->velocity_x_);
  std::swap(velocity_y_, other->velocity_y_);
  std::swap(velocity_z_, other->velocity_z_);
  std::swap(accelerate_x_, other->accelerate_x_);
  std::swap(accelerate_y_, other->accelerate_y_);
  std::swap(accelerate_z_, other->accelerate_z_);
  std::swap(infor_age_, other->infor_age_);
  std::swap(health_, other->health_);
  std::swap(gnss_type_, other->gnss_type_);
  std::swap(gnss_time_type_, other->gnss_time_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GlonassOrbit::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GlonassOrbit

// optional .jmc_auto.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
bool GlonassOrbit::has_gnss_type() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void GlonassOrbit::set_has_gnss_type() {
  _has_bits_[0] |= 0x02000000u;
}
void GlonassOrbit::clear_has_gnss_type() {
  _has_bits_[0] &= ~0x02000000u;
}
void GlonassOrbit::clear_gnss_type() {
  gnss_type_ = 3;
  clear_has_gnss_type();
}
::jmc_auto::drivers::gnss::GnssType GlonassOrbit::gnss_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.gnss_type)
  return static_cast< ::jmc_auto::drivers::gnss::GnssType >(gnss_type_);
}
void GlonassOrbit::set_gnss_type(::jmc_auto::drivers::gnss::GnssType value) {
  assert(::jmc_auto::drivers::gnss::GnssType_IsValid(value));
  set_has_gnss_type();
  gnss_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.gnss_type)
}

// optional uint32 slot_prn = 2;
bool GlonassOrbit::has_slot_prn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GlonassOrbit::set_has_slot_prn() {
  _has_bits_[0] |= 0x00000001u;
}
void GlonassOrbit::clear_has_slot_prn() {
  _has_bits_[0] &= ~0x00000001u;
}
void GlonassOrbit::clear_slot_prn() {
  slot_prn_ = 0u;
  clear_has_slot_prn();
}
::google::protobuf::uint32 GlonassOrbit::slot_prn() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.slot_prn)
  return slot_prn_;
}
void GlonassOrbit::set_slot_prn(::google::protobuf::uint32 value) {
  set_has_slot_prn();
  slot_prn_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.slot_prn)
}

// optional .jmc_auto.drivers.gnss.GnssTimeType gnss_time_type = 3 [default = GLO_TIME];
bool GlonassOrbit::has_gnss_time_type() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void GlonassOrbit::set_has_gnss_time_type() {
  _has_bits_[0] |= 0x04000000u;
}
void GlonassOrbit::clear_has_gnss_time_type() {
  _has_bits_[0] &= ~0x04000000u;
}
void GlonassOrbit::clear_gnss_time_type() {
  gnss_time_type_ = 3;
  clear_has_gnss_time_type();
}
::jmc_auto::drivers::gnss::GnssTimeType GlonassOrbit::gnss_time_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.gnss_time_type)
  return static_cast< ::jmc_auto::drivers::gnss::GnssTimeType >(gnss_time_type_);
}
void GlonassOrbit::set_gnss_time_type(::jmc_auto::drivers::gnss::GnssTimeType value) {
  assert(::jmc_auto::drivers::gnss::GnssTimeType_IsValid(value));
  set_has_gnss_time_type();
  gnss_time_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.gnss_time_type)
}

// optional double toe = 4;
bool GlonassOrbit::has_toe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GlonassOrbit::set_has_toe() {
  _has_bits_[0] |= 0x00000004u;
}
void GlonassOrbit::clear_has_toe() {
  _has_bits_[0] &= ~0x00000004u;
}
void GlonassOrbit::clear_toe() {
  toe_ = 0;
  clear_has_toe();
}
double GlonassOrbit::toe() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.toe)
  return toe_;
}
void GlonassOrbit::set_toe(double value) {
  set_has_toe();
  toe_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.toe)
}

// optional uint32 year = 5;
bool GlonassOrbit::has_year() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GlonassOrbit::set_has_year() {
  _has_bits_[0] |= 0x00000002u;
}
void GlonassOrbit::clear_has_year() {
  _has_bits_[0] &= ~0x00000002u;
}
void GlonassOrbit::clear_year() {
  year_ = 0u;
  clear_has_year();
}
::google::protobuf::uint32 GlonassOrbit::year() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.year)
  return year_;
}
void GlonassOrbit::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.year)
}

// optional uint32 month = 6;
bool GlonassOrbit::has_month() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GlonassOrbit::set_has_month() {
  _has_bits_[0] |= 0x00000008u;
}
void GlonassOrbit::clear_has_month() {
  _has_bits_[0] &= ~0x00000008u;
}
void GlonassOrbit::clear_month() {
  month_ = 0u;
  clear_has_month();
}
::google::protobuf::uint32 GlonassOrbit::month() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.month)
  return month_;
}
void GlonassOrbit::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.month)
}

// optional uint32 day = 7;
bool GlonassOrbit::has_day() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GlonassOrbit::set_has_day() {
  _has_bits_[0] |= 0x00000010u;
}
void GlonassOrbit::clear_has_day() {
  _has_bits_[0] &= ~0x00000010u;
}
void GlonassOrbit::clear_day() {
  day_ = 0u;
  clear_has_day();
}
::google::protobuf::uint32 GlonassOrbit::day() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.day)
  return day_;
}
void GlonassOrbit::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.day)
}

// optional uint32 hour = 8;
bool GlonassOrbit::has_hour() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GlonassOrbit::set_has_hour() {
  _has_bits_[0] |= 0x00000020u;
}
void GlonassOrbit::clear_has_hour() {
  _has_bits_[0] &= ~0x00000020u;
}
void GlonassOrbit::clear_hour() {
  hour_ = 0u;
  clear_has_hour();
}
::google::protobuf::uint32 GlonassOrbit::hour() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.hour)
  return hour_;
}
void GlonassOrbit::set_hour(::google::protobuf::uint32 value) {
  set_has_hour();
  hour_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.hour)
}

// optional uint32 minute = 9;
bool GlonassOrbit::has_minute() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void GlonassOrbit::set_has_minute() {
  _has_bits_[0] |= 0x00000040u;
}
void GlonassOrbit::clear_has_minute() {
  _has_bits_[0] &= ~0x00000040u;
}
void GlonassOrbit::clear_minute() {
  minute_ = 0u;
  clear_has_minute();
}
::google::protobuf::uint32 GlonassOrbit::minute() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.minute)
  return minute_;
}
void GlonassOrbit::set_minute(::google::protobuf::uint32 value) {
  set_has_minute();
  minute_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.minute)
}

// optional double second_s = 10;
bool GlonassOrbit::has_second_s() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void GlonassOrbit::set_has_second_s() {
  _has_bits_[0] |= 0x00000080u;
}
void GlonassOrbit::clear_has_second_s() {
  _has_bits_[0] &= ~0x00000080u;
}
void GlonassOrbit::clear_second_s() {
  second_s_ = 0;
  clear_has_second_s();
}
double GlonassOrbit::second_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.second_s)
  return second_s_;
}
void GlonassOrbit::set_second_s(double value) {
  set_has_second_s();
  second_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.second_s)
}

// optional int32 frequency_no = 11;
bool GlonassOrbit::has_frequency_no() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void GlonassOrbit::set_has_frequency_no() {
  _has_bits_[0] |= 0x00000100u;
}
void GlonassOrbit::clear_has_frequency_no() {
  _has_bits_[0] &= ~0x00000100u;
}
void GlonassOrbit::clear_frequency_no() {
  frequency_no_ = 0;
  clear_has_frequency_no();
}
::google::protobuf::int32 GlonassOrbit::frequency_no() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.frequency_no)
  return frequency_no_;
}
void GlonassOrbit::set_frequency_no(::google::protobuf::int32 value) {
  set_has_frequency_no();
  frequency_no_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.frequency_no)
}

// optional uint32 week_num = 12;
bool GlonassOrbit::has_week_num() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void GlonassOrbit::set_has_week_num() {
  _has_bits_[0] |= 0x00000200u;
}
void GlonassOrbit::clear_has_week_num() {
  _has_bits_[0] &= ~0x00000200u;
}
void GlonassOrbit::clear_week_num() {
  week_num_ = 0u;
  clear_has_week_num();
}
::google::protobuf::uint32 GlonassOrbit::week_num() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.week_num)
  return week_num_;
}
void GlonassOrbit::set_week_num(::google::protobuf::uint32 value) {
  set_has_week_num();
  week_num_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.week_num)
}

// optional double week_second_s = 13;
bool GlonassOrbit::has_week_second_s() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void GlonassOrbit::set_has_week_second_s() {
  _has_bits_[0] |= 0x00000400u;
}
void GlonassOrbit::clear_has_week_second_s() {
  _has_bits_[0] &= ~0x00000400u;
}
void GlonassOrbit::clear_week_second_s() {
  week_second_s_ = 0;
  clear_has_week_second_s();
}
double GlonassOrbit::week_second_s() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.week_second_s)
  return week_second_s_;
}
void GlonassOrbit::set_week_second_s(double value) {
  set_has_week_second_s();
  week_second_s_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.week_second_s)
}

// optional double tk = 14;
bool GlonassOrbit::has_tk() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void GlonassOrbit::set_has_tk() {
  _has_bits_[0] |= 0x00000800u;
}
void GlonassOrbit::clear_has_tk() {
  _has_bits_[0] &= ~0x00000800u;
}
void GlonassOrbit::clear_tk() {
  tk_ = 0;
  clear_has_tk();
}
double GlonassOrbit::tk() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.tk)
  return tk_;
}
void GlonassOrbit::set_tk(double value) {
  set_has_tk();
  tk_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.tk)
}

// optional double clock_offset = 15;
bool GlonassOrbit::has_clock_offset() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void GlonassOrbit::set_has_clock_offset() {
  _has_bits_[0] |= 0x00001000u;
}
void GlonassOrbit::clear_has_clock_offset() {
  _has_bits_[0] &= ~0x00001000u;
}
void GlonassOrbit::clear_clock_offset() {
  clock_offset_ = 0;
  clear_has_clock_offset();
}
double GlonassOrbit::clock_offset() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.clock_offset)
  return clock_offset_;
}
void GlonassOrbit::set_clock_offset(double value) {
  set_has_clock_offset();
  clock_offset_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.clock_offset)
}

// optional double clock_drift = 16;
bool GlonassOrbit::has_clock_drift() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void GlonassOrbit::set_has_clock_drift() {
  _has_bits_[0] |= 0x00002000u;
}
void GlonassOrbit::clear_has_clock_drift() {
  _has_bits_[0] &= ~0x00002000u;
}
void GlonassOrbit::clear_clock_drift() {
  clock_drift_ = 0;
  clear_has_clock_drift();
}
double GlonassOrbit::clock_drift() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.clock_drift)
  return clock_drift_;
}
void GlonassOrbit::set_clock_drift(double value) {
  set_has_clock_drift();
  clock_drift_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.clock_drift)
}

// optional uint32 health = 17;
bool GlonassOrbit::has_health() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void GlonassOrbit::set_has_health() {
  _has_bits_[0] |= 0x01000000u;
}
void GlonassOrbit::clear_has_health() {
  _has_bits_[0] &= ~0x01000000u;
}
void GlonassOrbit::clear_health() {
  health_ = 0u;
  clear_has_health();
}
::google::protobuf::uint32 GlonassOrbit::health() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.health)
  return health_;
}
void GlonassOrbit::set_health(::google::protobuf::uint32 value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.health)
}

// optional double position_x = 18;
bool GlonassOrbit::has_position_x() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void GlonassOrbit::set_has_position_x() {
  _has_bits_[0] |= 0x00004000u;
}
void GlonassOrbit::clear_has_position_x() {
  _has_bits_[0] &= ~0x00004000u;
}
void GlonassOrbit::clear_position_x() {
  position_x_ = 0;
  clear_has_position_x();
}
double GlonassOrbit::position_x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.position_x)
  return position_x_;
}
void GlonassOrbit::set_position_x(double value) {
  set_has_position_x();
  position_x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.position_x)
}

// optional double position_y = 19;
bool GlonassOrbit::has_position_y() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void GlonassOrbit::set_has_position_y() {
  _has_bits_[0] |= 0x00008000u;
}
void GlonassOrbit::clear_has_position_y() {
  _has_bits_[0] &= ~0x00008000u;
}
void GlonassOrbit::clear_position_y() {
  position_y_ = 0;
  clear_has_position_y();
}
double GlonassOrbit::position_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.position_y)
  return position_y_;
}
void GlonassOrbit::set_position_y(double value) {
  set_has_position_y();
  position_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.position_y)
}

// optional double position_z = 20;
bool GlonassOrbit::has_position_z() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void GlonassOrbit::set_has_position_z() {
  _has_bits_[0] |= 0x00010000u;
}
void GlonassOrbit::clear_has_position_z() {
  _has_bits_[0] &= ~0x00010000u;
}
void GlonassOrbit::clear_position_z() {
  position_z_ = 0;
  clear_has_position_z();
}
double GlonassOrbit::position_z() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.position_z)
  return position_z_;
}
void GlonassOrbit::set_position_z(double value) {
  set_has_position_z();
  position_z_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.position_z)
}

// optional double velocity_x = 21;
bool GlonassOrbit::has_velocity_x() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void GlonassOrbit::set_has_velocity_x() {
  _has_bits_[0] |= 0x00020000u;
}
void GlonassOrbit::clear_has_velocity_x() {
  _has_bits_[0] &= ~0x00020000u;
}
void GlonassOrbit::clear_velocity_x() {
  velocity_x_ = 0;
  clear_has_velocity_x();
}
double GlonassOrbit::velocity_x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.velocity_x)
  return velocity_x_;
}
void GlonassOrbit::set_velocity_x(double value) {
  set_has_velocity_x();
  velocity_x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.velocity_x)
}

// optional double velocity_y = 22;
bool GlonassOrbit::has_velocity_y() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void GlonassOrbit::set_has_velocity_y() {
  _has_bits_[0] |= 0x00040000u;
}
void GlonassOrbit::clear_has_velocity_y() {
  _has_bits_[0] &= ~0x00040000u;
}
void GlonassOrbit::clear_velocity_y() {
  velocity_y_ = 0;
  clear_has_velocity_y();
}
double GlonassOrbit::velocity_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.velocity_y)
  return velocity_y_;
}
void GlonassOrbit::set_velocity_y(double value) {
  set_has_velocity_y();
  velocity_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.velocity_y)
}

// optional double velocity_z = 23;
bool GlonassOrbit::has_velocity_z() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void GlonassOrbit::set_has_velocity_z() {
  _has_bits_[0] |= 0x00080000u;
}
void GlonassOrbit::clear_has_velocity_z() {
  _has_bits_[0] &= ~0x00080000u;
}
void GlonassOrbit::clear_velocity_z() {
  velocity_z_ = 0;
  clear_has_velocity_z();
}
double GlonassOrbit::velocity_z() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.velocity_z)
  return velocity_z_;
}
void GlonassOrbit::set_velocity_z(double value) {
  set_has_velocity_z();
  velocity_z_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.velocity_z)
}

// optional double accelerate_x = 24;
bool GlonassOrbit::has_accelerate_x() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void GlonassOrbit::set_has_accelerate_x() {
  _has_bits_[0] |= 0x00100000u;
}
void GlonassOrbit::clear_has_accelerate_x() {
  _has_bits_[0] &= ~0x00100000u;
}
void GlonassOrbit::clear_accelerate_x() {
  accelerate_x_ = 0;
  clear_has_accelerate_x();
}
double GlonassOrbit::accelerate_x() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.accelerate_x)
  return accelerate_x_;
}
void GlonassOrbit::set_accelerate_x(double value) {
  set_has_accelerate_x();
  accelerate_x_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.accelerate_x)
}

// optional double accelerate_y = 25;
bool GlonassOrbit::has_accelerate_y() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void GlonassOrbit::set_has_accelerate_y() {
  _has_bits_[0] |= 0x00200000u;
}
void GlonassOrbit::clear_has_accelerate_y() {
  _has_bits_[0] &= ~0x00200000u;
}
void GlonassOrbit::clear_accelerate_y() {
  accelerate_y_ = 0;
  clear_has_accelerate_y();
}
double GlonassOrbit::accelerate_y() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.accelerate_y)
  return accelerate_y_;
}
void GlonassOrbit::set_accelerate_y(double value) {
  set_has_accelerate_y();
  accelerate_y_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.accelerate_y)
}

// optional double accelerate_z = 26;
bool GlonassOrbit::has_accelerate_z() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void GlonassOrbit::set_has_accelerate_z() {
  _has_bits_[0] |= 0x00400000u;
}
void GlonassOrbit::clear_has_accelerate_z() {
  _has_bits_[0] &= ~0x00400000u;
}
void GlonassOrbit::clear_accelerate_z() {
  accelerate_z_ = 0;
  clear_has_accelerate_z();
}
double GlonassOrbit::accelerate_z() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.accelerate_z)
  return accelerate_z_;
}
void GlonassOrbit::set_accelerate_z(double value) {
  set_has_accelerate_z();
  accelerate_z_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.accelerate_z)
}

// optional double infor_age = 27;
bool GlonassOrbit::has_infor_age() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void GlonassOrbit::set_has_infor_age() {
  _has_bits_[0] |= 0x00800000u;
}
void GlonassOrbit::clear_has_infor_age() {
  _has_bits_[0] &= ~0x00800000u;
}
void GlonassOrbit::clear_infor_age() {
  infor_age_ = 0;
  clear_has_infor_age();
}
double GlonassOrbit::infor_age() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GlonassOrbit.infor_age)
  return infor_age_;
}
void GlonassOrbit::set_infor_age(double value) {
  set_has_infor_age();
  infor_age_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GlonassOrbit.infor_age)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GnssEphemeris::kGnssTypeFieldNumber;
const int GnssEphemeris::kKepplerOrbitFieldNumber;
const int GnssEphemeris::kGlonassOrbitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GnssEphemeris::GnssEphemeris()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.GnssEphemeris)
}
GnssEphemeris::GnssEphemeris(const GnssEphemeris& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_keppler_orbit()) {
    keppler_orbit_ = new ::jmc_auto::drivers::gnss::KepplerOrbit(*from.keppler_orbit_);
  } else {
    keppler_orbit_ = NULL;
  }
  if (from.has_glonass_orbit()) {
    glonass_orbit_ = new ::jmc_auto::drivers::gnss::GlonassOrbit(*from.glonass_orbit_);
  } else {
    glonass_orbit_ = NULL;
  }
  gnss_type_ = from.gnss_type_;
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.GnssEphemeris)
}

void GnssEphemeris::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&keppler_orbit_, 0, reinterpret_cast<char*>(&glonass_orbit_) -
    reinterpret_cast<char*>(&keppler_orbit_) + sizeof(glonass_orbit_));
  gnss_type_ = 3;
}

GnssEphemeris::~GnssEphemeris() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.GnssEphemeris)
  SharedDtor();
}

void GnssEphemeris::SharedDtor() {
  if (this != internal_default_instance()) {
    delete keppler_orbit_;
  }
  if (this != internal_default_instance()) {
    delete glonass_orbit_;
  }
}

void GnssEphemeris::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GnssEphemeris::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GnssEphemeris& GnssEphemeris::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::InitDefaults();
  return *internal_default_instance();
}

GnssEphemeris* GnssEphemeris::New(::google::protobuf::Arena* arena) const {
  GnssEphemeris* n = new GnssEphemeris;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GnssEphemeris::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.GnssEphemeris)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_keppler_orbit()) {
      GOOGLE_DCHECK(keppler_orbit_ != NULL);
      keppler_orbit_->::jmc_auto::drivers::gnss::KepplerOrbit::Clear();
    }
    if (has_glonass_orbit()) {
      GOOGLE_DCHECK(glonass_orbit_ != NULL);
      glonass_orbit_->::jmc_auto::drivers::gnss::GlonassOrbit::Clear();
    }
    gnss_type_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GnssEphemeris::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.GnssEphemeris)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::drivers::gnss::GnssType_IsValid(value)) {
            set_gnss_type(static_cast< ::jmc_auto::drivers::gnss::GnssType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.KepplerOrbit keppler_orbit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keppler_orbit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.GlonassOrbit glonass_orbit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_glonass_orbit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.GnssEphemeris)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.GnssEphemeris)
  return false;
#undef DO_
}

void GnssEphemeris::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.GnssEphemeris)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->gnss_type(), output);
  }

  // optional .jmc_auto.drivers.gnss.KepplerOrbit keppler_orbit = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->keppler_orbit_, output);
  }

  // optional .jmc_auto.drivers.gnss.GlonassOrbit glonass_orbit = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->glonass_orbit_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.GnssEphemeris)
}

::google::protobuf::uint8* GnssEphemeris::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.GnssEphemeris)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->gnss_type(), target);
  }

  // optional .jmc_auto.drivers.gnss.KepplerOrbit keppler_orbit = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->keppler_orbit_, deterministic, target);
  }

  // optional .jmc_auto.drivers.gnss.GlonassOrbit glonass_orbit = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->glonass_orbit_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.GnssEphemeris)
  return target;
}

size_t GnssEphemeris::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.GnssEphemeris)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .jmc_auto.drivers.gnss.KepplerOrbit keppler_orbit = 2;
    if (has_keppler_orbit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->keppler_orbit_);
    }

    // optional .jmc_auto.drivers.gnss.GlonassOrbit glonass_orbit = 3;
    if (has_glonass_orbit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->glonass_orbit_);
    }

    // optional .jmc_auto.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
    if (has_gnss_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gnss_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GnssEphemeris::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.GnssEphemeris)
  GOOGLE_DCHECK_NE(&from, this);
  const GnssEphemeris* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GnssEphemeris>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.GnssEphemeris)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.GnssEphemeris)
    MergeFrom(*source);
  }
}

void GnssEphemeris::MergeFrom(const GnssEphemeris& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.GnssEphemeris)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_keppler_orbit()->::jmc_auto::drivers::gnss::KepplerOrbit::MergeFrom(from.keppler_orbit());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_glonass_orbit()->::jmc_auto::drivers::gnss::GlonassOrbit::MergeFrom(from.glonass_orbit());
    }
    if (cached_has_bits & 0x00000004u) {
      gnss_type_ = from.gnss_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GnssEphemeris::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.GnssEphemeris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GnssEphemeris::CopyFrom(const GnssEphemeris& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.GnssEphemeris)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GnssEphemeris::IsInitialized() const {
  return true;
}

void GnssEphemeris::Swap(GnssEphemeris* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GnssEphemeris::InternalSwap(GnssEphemeris* other) {
  std::swap(keppler_orbit_, other->keppler_orbit_);
  std::swap(glonass_orbit_, other->glonass_orbit_);
  std::swap(gnss_type_, other->gnss_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GnssEphemeris::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fgnss_5fraw_5fobservation_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GnssEphemeris

// optional .jmc_auto.drivers.gnss.GnssType gnss_type = 1 [default = GLO_SYS];
bool GnssEphemeris::has_gnss_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GnssEphemeris::set_has_gnss_type() {
  _has_bits_[0] |= 0x00000004u;
}
void GnssEphemeris::clear_has_gnss_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void GnssEphemeris::clear_gnss_type() {
  gnss_type_ = 3;
  clear_has_gnss_type();
}
::jmc_auto::drivers::gnss::GnssType GnssEphemeris::gnss_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GnssEphemeris.gnss_type)
  return static_cast< ::jmc_auto::drivers::gnss::GnssType >(gnss_type_);
}
void GnssEphemeris::set_gnss_type(::jmc_auto::drivers::gnss::GnssType value) {
  assert(::jmc_auto::drivers::gnss::GnssType_IsValid(value));
  set_has_gnss_type();
  gnss_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.GnssEphemeris.gnss_type)
}

// optional .jmc_auto.drivers.gnss.KepplerOrbit keppler_orbit = 2;
bool GnssEphemeris::has_keppler_orbit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GnssEphemeris::set_has_keppler_orbit() {
  _has_bits_[0] |= 0x00000001u;
}
void GnssEphemeris::clear_has_keppler_orbit() {
  _has_bits_[0] &= ~0x00000001u;
}
void GnssEphemeris::clear_keppler_orbit() {
  if (keppler_orbit_ != NULL) keppler_orbit_->::jmc_auto::drivers::gnss::KepplerOrbit::Clear();
  clear_has_keppler_orbit();
}
const ::jmc_auto::drivers::gnss::KepplerOrbit& GnssEphemeris::keppler_orbit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GnssEphemeris.keppler_orbit)
  return keppler_orbit_ != NULL ? *keppler_orbit_
                         : *::jmc_auto::drivers::gnss::KepplerOrbit::internal_default_instance();
}
::jmc_auto::drivers::gnss::KepplerOrbit* GnssEphemeris::mutable_keppler_orbit() {
  set_has_keppler_orbit();
  if (keppler_orbit_ == NULL) {
    keppler_orbit_ = new ::jmc_auto::drivers::gnss::KepplerOrbit;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.GnssEphemeris.keppler_orbit)
  return keppler_orbit_;
}
::jmc_auto::drivers::gnss::KepplerOrbit* GnssEphemeris::release_keppler_orbit() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.GnssEphemeris.keppler_orbit)
  clear_has_keppler_orbit();
  ::jmc_auto::drivers::gnss::KepplerOrbit* temp = keppler_orbit_;
  keppler_orbit_ = NULL;
  return temp;
}
void GnssEphemeris::set_allocated_keppler_orbit(::jmc_auto::drivers::gnss::KepplerOrbit* keppler_orbit) {
  delete keppler_orbit_;
  keppler_orbit_ = keppler_orbit;
  if (keppler_orbit) {
    set_has_keppler_orbit();
  } else {
    clear_has_keppler_orbit();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.GnssEphemeris.keppler_orbit)
}

// optional .jmc_auto.drivers.gnss.GlonassOrbit glonass_orbit = 3;
bool GnssEphemeris::has_glonass_orbit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GnssEphemeris::set_has_glonass_orbit() {
  _has_bits_[0] |= 0x00000002u;
}
void GnssEphemeris::clear_has_glonass_orbit() {
  _has_bits_[0] &= ~0x00000002u;
}
void GnssEphemeris::clear_glonass_orbit() {
  if (glonass_orbit_ != NULL) glonass_orbit_->::jmc_auto::drivers::gnss::GlonassOrbit::Clear();
  clear_has_glonass_orbit();
}
const ::jmc_auto::drivers::gnss::GlonassOrbit& GnssEphemeris::glonass_orbit() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.GnssEphemeris.glonass_orbit)
  return glonass_orbit_ != NULL ? *glonass_orbit_
                         : *::jmc_auto::drivers::gnss::GlonassOrbit::internal_default_instance();
}
::jmc_auto::drivers::gnss::GlonassOrbit* GnssEphemeris::mutable_glonass_orbit() {
  set_has_glonass_orbit();
  if (glonass_orbit_ == NULL) {
    glonass_orbit_ = new ::jmc_auto::drivers::gnss::GlonassOrbit;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.GnssEphemeris.glonass_orbit)
  return glonass_orbit_;
}
::jmc_auto::drivers::gnss::GlonassOrbit* GnssEphemeris::release_glonass_orbit() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.GnssEphemeris.glonass_orbit)
  clear_has_glonass_orbit();
  ::jmc_auto::drivers::gnss::GlonassOrbit* temp = glonass_orbit_;
  glonass_orbit_ = NULL;
  return temp;
}
void GnssEphemeris::set_allocated_glonass_orbit(::jmc_auto::drivers::gnss::GlonassOrbit* glonass_orbit) {
  delete glonass_orbit_;
  glonass_orbit_ = glonass_orbit;
  if (glonass_orbit) {
    set_has_glonass_orbit();
  } else {
    clear_has_glonass_orbit();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.GnssEphemeris.glonass_orbit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace drivers
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
