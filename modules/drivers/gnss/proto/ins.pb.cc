// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/drivers/gnss/proto/ins.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/drivers/gnss/proto/ins.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace jmc_auto {
namespace drivers {
namespace gnss {
class InsStatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InsStat> {
} _InsStat_default_instance_;
class InsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ins> {
} _Ins_default_instance_;

namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStat, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStat, ins_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsStat, pos_type_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, measurement_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, euler_angles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, linear_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, linear_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, position_covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, euler_angles_covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, linear_velocity_covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, angular_velocity_covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ins, linear_acceleration_covariance_),
  0,
  6,
  7,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(InsStat)},
  { 11, 29, sizeof(Ins)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_InsStat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ins_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/drivers/gnss/proto/ins.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _InsStat_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Ins_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::InitDefaults();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::InitDefaults();
  _InsStat_default_instance_.DefaultConstruct();
  _Ins_default_instance_.DefaultConstruct();
  _InsStat_default_instance_.get_mutable()->header_ = const_cast< ::jmc_auto::common::Header*>(
      ::jmc_auto::common::Header::internal_default_instance());
  _Ins_default_instance_.get_mutable()->header_ = const_cast< ::jmc_auto::common::Header*>(
      ::jmc_auto::common::Header::internal_default_instance());
  _Ins_default_instance_.get_mutable()->position_ = const_cast< ::jmc_auto::common::PointLLH*>(
      ::jmc_auto::common::PointLLH::internal_default_instance());
  _Ins_default_instance_.get_mutable()->euler_angles_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _Ins_default_instance_.get_mutable()->linear_velocity_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _Ins_default_instance_.get_mutable()->angular_velocity_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
  _Ins_default_instance_.get_mutable()->linear_acceleration_ = const_cast< ::jmc_auto::common::Point3D*>(
      ::jmc_auto::common::Point3D::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n$modules/drivers/gnss/proto/ins.proto\022\025"
      "jmc_auto.drivers.gnss\032!modules/common/pr"
      "oto/header.proto\032#modules/common/proto/g"
      "eometry.proto\"X\n\007InsStat\022\'\n\006header\030\001 \001(\013"
      "2\027.jmc_auto.common.Header\022\022\n\nins_status\030"
      "\002 \001(\r\022\020\n\010pos_type\030\003 \001(\r\"\344\004\n\003Ins\022\'\n\006heade"
      "r\030\001 \001(\0132\027.jmc_auto.common.Header\022\030\n\020meas"
      "urement_time\030\002 \001(\001\022-\n\004type\030\003 \001(\0162\037.jmc_a"
      "uto.drivers.gnss.Ins.Type\022+\n\010position\030\004 "
      "\001(\0132\031.jmc_auto.common.PointLLH\022.\n\014euler_"
      "angles\030\005 \001(\0132\030.jmc_auto.common.Point3D\0221"
      "\n\017linear_velocity\030\006 \001(\0132\030.jmc_auto.commo"
      "n.Point3D\0222\n\020angular_velocity\030\007 \001(\0132\030.jm"
      "c_auto.common.Point3D\0225\n\023linear_accelera"
      "tion\030\010 \001(\0132\030.jmc_auto.common.Point3D\022\037\n\023"
      "position_covariance\030\t \003(\002B\002\020\001\022#\n\027euler_a"
      "ngles_covariance\030\n \003(\002B\002\020\001\022&\n\032linear_vel"
      "ocity_covariance\030\013 \003(\002B\002\020\001\022\'\n\033angular_ve"
      "locity_covariance\030\014 \003(\002B\002\020\001\022*\n\036linear_ac"
      "celeration_covariance\030\r \003(\002B\002\020\001\"-\n\004Type\022"
      "\013\n\007INVALID\020\000\022\016\n\nCONVERGING\020\001\022\010\n\004GOOD\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 838);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/drivers/gnss/proto/ins.proto", &protobuf_RegisterTypes);
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fheader_2eproto::AddDescriptors();
  ::jmc_auto::common::protobuf_modules_2fcommon_2fproto_2fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto

const ::google::protobuf::EnumDescriptor* Ins_Type_descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::file_level_enum_descriptors[0];
}
bool Ins_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ins_Type Ins::INVALID;
const Ins_Type Ins::CONVERGING;
const Ins_Type Ins::GOOD;
const Ins_Type Ins::Type_MIN;
const Ins_Type Ins::Type_MAX;
const int Ins::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InsStat::kHeaderFieldNumber;
const int InsStat::kInsStatusFieldNumber;
const int InsStat::kPosTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InsStat::InsStat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.InsStat)
}
InsStat::InsStat(const InsStat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::jmc_auto::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&ins_status_, &from.ins_status_,
    reinterpret_cast<char*>(&pos_type_) -
    reinterpret_cast<char*>(&ins_status_) + sizeof(pos_type_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.InsStat)
}

void InsStat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&pos_type_) -
    reinterpret_cast<char*>(&header_) + sizeof(pos_type_));
}

InsStat::~InsStat() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.InsStat)
  SharedDtor();
}

void InsStat::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void InsStat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsStat::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InsStat& InsStat::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::InitDefaults();
  return *internal_default_instance();
}

InsStat* InsStat::New(::google::protobuf::Arena* arena) const {
  InsStat* n = new InsStat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InsStat::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.InsStat)
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::jmc_auto::common::Header::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&ins_status_, 0, reinterpret_cast<char*>(&pos_type_) -
      reinterpret_cast<char*>(&ins_status_) + sizeof(pos_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InsStat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.InsStat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ins_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ins_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ins_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pos_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_pos_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.InsStat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.InsStat)
  return false;
#undef DO_
}

void InsStat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.InsStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional uint32 ins_status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ins_status(), output);
  }

  // optional uint32 pos_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.InsStat)
}

::google::protobuf::uint8* InsStat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.InsStat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional uint32 ins_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ins_status(), target);
  }

  // optional uint32 pos_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.InsStat)
  return target;
}

size_t InsStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.InsStat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .jmc_auto.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional uint32 ins_status = 2;
    if (has_ins_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ins_status());
    }

    // optional uint32 pos_type = 3;
    if (has_pos_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsStat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.InsStat)
  GOOGLE_DCHECK_NE(&from, this);
  const InsStat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InsStat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.InsStat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.InsStat)
    MergeFrom(*source);
  }
}

void InsStat::MergeFrom(const InsStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.InsStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::jmc_auto::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      ins_status_ = from.ins_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      pos_type_ = from.pos_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InsStat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.InsStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsStat::CopyFrom(const InsStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.InsStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsStat::IsInitialized() const {
  return true;
}

void InsStat::Swap(InsStat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InsStat::InternalSwap(InsStat* other) {
  std::swap(header_, other->header_);
  std::swap(ins_status_, other->ins_status_);
  std::swap(pos_type_, other->pos_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InsStat::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InsStat

// optional .jmc_auto.common.Header header = 1;
bool InsStat::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InsStat::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void InsStat::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void InsStat::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
const ::jmc_auto::common::Header& InsStat::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.InsStat.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
::jmc_auto::common::Header* InsStat::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.InsStat.header)
  return header_;
}
::jmc_auto::common::Header* InsStat::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.InsStat.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void InsStat::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.InsStat.header)
}

// optional uint32 ins_status = 2;
bool InsStat::has_ins_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InsStat::set_has_ins_status() {
  _has_bits_[0] |= 0x00000002u;
}
void InsStat::clear_has_ins_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void InsStat::clear_ins_status() {
  ins_status_ = 0u;
  clear_has_ins_status();
}
::google::protobuf::uint32 InsStat::ins_status() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.InsStat.ins_status)
  return ins_status_;
}
void InsStat::set_ins_status(::google::protobuf::uint32 value) {
  set_has_ins_status();
  ins_status_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.InsStat.ins_status)
}

// optional uint32 pos_type = 3;
bool InsStat::has_pos_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InsStat::set_has_pos_type() {
  _has_bits_[0] |= 0x00000004u;
}
void InsStat::clear_has_pos_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void InsStat::clear_pos_type() {
  pos_type_ = 0u;
  clear_has_pos_type();
}
::google::protobuf::uint32 InsStat::pos_type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.InsStat.pos_type)
  return pos_type_;
}
void InsStat::set_pos_type(::google::protobuf::uint32 value) {
  set_has_pos_type();
  pos_type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.InsStat.pos_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ins::kHeaderFieldNumber;
const int Ins::kMeasurementTimeFieldNumber;
const int Ins::kTypeFieldNumber;
const int Ins::kPositionFieldNumber;
const int Ins::kEulerAnglesFieldNumber;
const int Ins::kLinearVelocityFieldNumber;
const int Ins::kAngularVelocityFieldNumber;
const int Ins::kLinearAccelerationFieldNumber;
const int Ins::kPositionCovarianceFieldNumber;
const int Ins::kEulerAnglesCovarianceFieldNumber;
const int Ins::kLinearVelocityCovarianceFieldNumber;
const int Ins::kAngularVelocityCovarianceFieldNumber;
const int Ins::kLinearAccelerationCovarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ins::Ins()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:jmc_auto.drivers.gnss.Ins)
}
Ins::Ins(const Ins& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      position_covariance_(from.position_covariance_),
      euler_angles_covariance_(from.euler_angles_covariance_),
      linear_velocity_covariance_(from.linear_velocity_covariance_),
      angular_velocity_covariance_(from.angular_velocity_covariance_),
      linear_acceleration_covariance_(from.linear_acceleration_covariance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::jmc_auto::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_position()) {
    position_ = new ::jmc_auto::common::PointLLH(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_euler_angles()) {
    euler_angles_ = new ::jmc_auto::common::Point3D(*from.euler_angles_);
  } else {
    euler_angles_ = NULL;
  }
  if (from.has_linear_velocity()) {
    linear_velocity_ = new ::jmc_auto::common::Point3D(*from.linear_velocity_);
  } else {
    linear_velocity_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::jmc_auto::common::Point3D(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  if (from.has_linear_acceleration()) {
    linear_acceleration_ = new ::jmc_auto::common::Point3D(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = NULL;
  }
  ::memcpy(&measurement_time_, &from.measurement_time_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&measurement_time_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:jmc_auto.drivers.gnss.Ins)
}

void Ins::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&header_) + sizeof(type_));
}

Ins::~Ins() {
  // @@protoc_insertion_point(destructor:jmc_auto.drivers.gnss.Ins)
  SharedDtor();
}

void Ins::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete position_;
  }
  if (this != internal_default_instance()) {
    delete euler_angles_;
  }
  if (this != internal_default_instance()) {
    delete linear_velocity_;
  }
  if (this != internal_default_instance()) {
    delete angular_velocity_;
  }
  if (this != internal_default_instance()) {
    delete linear_acceleration_;
  }
}

void Ins::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ins::descriptor() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ins& Ins::default_instance() {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ins* Ins::New(::google::protobuf::Arena* arena) const {
  Ins* n = new Ins;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ins::Clear() {
// @@protoc_insertion_point(message_clear_start:jmc_auto.drivers.gnss.Ins)
  position_covariance_.Clear();
  euler_angles_covariance_.Clear();
  linear_velocity_covariance_.Clear();
  angular_velocity_covariance_.Clear();
  linear_acceleration_covariance_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::jmc_auto::common::Header::Clear();
    }
    if (has_position()) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::jmc_auto::common::PointLLH::Clear();
    }
    if (has_euler_angles()) {
      GOOGLE_DCHECK(euler_angles_ != NULL);
      euler_angles_->::jmc_auto::common::Point3D::Clear();
    }
    if (has_linear_velocity()) {
      GOOGLE_DCHECK(linear_velocity_ != NULL);
      linear_velocity_->::jmc_auto::common::Point3D::Clear();
    }
    if (has_angular_velocity()) {
      GOOGLE_DCHECK(angular_velocity_ != NULL);
      angular_velocity_->::jmc_auto::common::Point3D::Clear();
    }
    if (has_linear_acceleration()) {
      GOOGLE_DCHECK(linear_acceleration_ != NULL);
      linear_acceleration_->::jmc_auto::common::Point3D::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&measurement_time_, 0, reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&measurement_time_) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ins::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:jmc_auto.drivers.gnss.Ins)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .jmc_auto.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double measurement_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_measurement_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &measurement_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.drivers.gnss.Ins.Type type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::jmc_auto::drivers::gnss::Ins_Type_IsValid(value)) {
            set_type(static_cast< ::jmc_auto::drivers::gnss::Ins_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.PointLLH position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D euler_angles = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_euler_angles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D linear_velocity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D angular_velocity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .jmc_auto.common.Point3D linear_acceleration = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float position_covariance = 9 [packed = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_position_covariance())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(77u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 74u, input, this->mutable_position_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float euler_angles_covariance = 10 [packed = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_euler_angles_covariance())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(85u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 82u, input, this->mutable_euler_angles_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float linear_velocity_covariance = 11 [packed = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_linear_velocity_covariance())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(93u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90u, input, this->mutable_linear_velocity_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float angular_velocity_covariance = 12 [packed = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_angular_velocity_covariance())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(101u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 98u, input, this->mutable_angular_velocity_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float linear_acceleration_covariance = 13 [packed = true];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_linear_acceleration_covariance())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(109u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 106u, input, this->mutable_linear_acceleration_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:jmc_auto.drivers.gnss.Ins)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:jmc_auto.drivers.gnss.Ins)
  return false;
#undef DO_
}

void Ins::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:jmc_auto.drivers.gnss.Ins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->measurement_time(), output);
  }

  // optional .jmc_auto.drivers.gnss.Ins.Type type = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .jmc_auto.common.PointLLH position = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->position_, output);
  }

  // optional .jmc_auto.common.Point3D euler_angles = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->euler_angles_, output);
  }

  // optional .jmc_auto.common.Point3D linear_velocity = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->linear_velocity_, output);
  }

  // optional .jmc_auto.common.Point3D angular_velocity = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->angular_velocity_, output);
  }

  // optional .jmc_auto.common.Point3D linear_acceleration = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->linear_acceleration_, output);
  }

  // repeated float position_covariance = 9 [packed = true];
  if (this->position_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_position_covariance_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->position_covariance().data(), this->position_covariance_size(), output);
  }

  // repeated float euler_angles_covariance = 10 [packed = true];
  if (this->euler_angles_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_euler_angles_covariance_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->euler_angles_covariance().data(), this->euler_angles_covariance_size(), output);
  }

  // repeated float linear_velocity_covariance = 11 [packed = true];
  if (this->linear_velocity_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_linear_velocity_covariance_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->linear_velocity_covariance().data(), this->linear_velocity_covariance_size(), output);
  }

  // repeated float angular_velocity_covariance = 12 [packed = true];
  if (this->angular_velocity_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_angular_velocity_covariance_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->angular_velocity_covariance().data(), this->angular_velocity_covariance_size(), output);
  }

  // repeated float linear_acceleration_covariance = 13 [packed = true];
  if (this->linear_acceleration_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_linear_acceleration_covariance_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->linear_acceleration_covariance().data(), this->linear_acceleration_covariance_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:jmc_auto.drivers.gnss.Ins)
}

::google::protobuf::uint8* Ins::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:jmc_auto.drivers.gnss.Ins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .jmc_auto.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // optional double measurement_time = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->measurement_time(), target);
  }

  // optional .jmc_auto.drivers.gnss.Ins.Type type = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .jmc_auto.common.PointLLH position = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->position_, deterministic, target);
  }

  // optional .jmc_auto.common.Point3D euler_angles = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->euler_angles_, deterministic, target);
  }

  // optional .jmc_auto.common.Point3D linear_velocity = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->linear_velocity_, deterministic, target);
  }

  // optional .jmc_auto.common.Point3D angular_velocity = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->angular_velocity_, deterministic, target);
  }

  // optional .jmc_auto.common.Point3D linear_acceleration = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->linear_acceleration_, deterministic, target);
  }

  // repeated float position_covariance = 9 [packed = true];
  if (this->position_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _position_covariance_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->position_covariance_, target);
  }

  // repeated float euler_angles_covariance = 10 [packed = true];
  if (this->euler_angles_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _euler_angles_covariance_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->euler_angles_covariance_, target);
  }

  // repeated float linear_velocity_covariance = 11 [packed = true];
  if (this->linear_velocity_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _linear_velocity_covariance_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->linear_velocity_covariance_, target);
  }

  // repeated float angular_velocity_covariance = 12 [packed = true];
  if (this->angular_velocity_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _angular_velocity_covariance_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->angular_velocity_covariance_, target);
  }

  // repeated float linear_acceleration_covariance = 13 [packed = true];
  if (this->linear_acceleration_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _linear_acceleration_covariance_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->linear_acceleration_covariance_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:jmc_auto.drivers.gnss.Ins)
  return target;
}

size_t Ins::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:jmc_auto.drivers.gnss.Ins)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated float position_covariance = 9 [packed = true];
  {
    unsigned int count = this->position_covariance_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float euler_angles_covariance = 10 [packed = true];
  {
    unsigned int count = this->euler_angles_covariance_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _euler_angles_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float linear_velocity_covariance = 11 [packed = true];
  {
    unsigned int count = this->linear_velocity_covariance_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _linear_velocity_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float angular_velocity_covariance = 12 [packed = true];
  {
    unsigned int count = this->angular_velocity_covariance_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _angular_velocity_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float linear_acceleration_covariance = 13 [packed = true];
  {
    unsigned int count = this->linear_acceleration_covariance_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _linear_acceleration_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .jmc_auto.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .jmc_auto.common.PointLLH position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .jmc_auto.common.Point3D euler_angles = 5;
    if (has_euler_angles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->euler_angles_);
    }

    // optional .jmc_auto.common.Point3D linear_velocity = 6;
    if (has_linear_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linear_velocity_);
    }

    // optional .jmc_auto.common.Point3D angular_velocity = 7;
    if (has_angular_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angular_velocity_);
    }

    // optional .jmc_auto.common.Point3D linear_acceleration = 8;
    if (has_linear_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linear_acceleration_);
    }

    // optional double measurement_time = 2;
    if (has_measurement_time()) {
      total_size += 1 + 8;
    }

    // optional .jmc_auto.drivers.gnss.Ins.Type type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ins::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:jmc_auto.drivers.gnss.Ins)
  GOOGLE_DCHECK_NE(&from, this);
  const Ins* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ins>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:jmc_auto.drivers.gnss.Ins)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:jmc_auto.drivers.gnss.Ins)
    MergeFrom(*source);
  }
}

void Ins::MergeFrom(const Ins& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:jmc_auto.drivers.gnss.Ins)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_covariance_.MergeFrom(from.position_covariance_);
  euler_angles_covariance_.MergeFrom(from.euler_angles_covariance_);
  linear_velocity_covariance_.MergeFrom(from.linear_velocity_covariance_);
  angular_velocity_covariance_.MergeFrom(from.angular_velocity_covariance_);
  linear_acceleration_covariance_.MergeFrom(from.linear_acceleration_covariance_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::jmc_auto::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_position()->::jmc_auto::common::PointLLH::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_euler_angles()->::jmc_auto::common::Point3D::MergeFrom(from.euler_angles());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_linear_velocity()->::jmc_auto::common::Point3D::MergeFrom(from.linear_velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_angular_velocity()->::jmc_auto::common::Point3D::MergeFrom(from.angular_velocity());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_linear_acceleration()->::jmc_auto::common::Point3D::MergeFrom(from.linear_acceleration());
    }
    if (cached_has_bits & 0x00000040u) {
      measurement_time_ = from.measurement_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ins::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:jmc_auto.drivers.gnss.Ins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ins::CopyFrom(const Ins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jmc_auto.drivers.gnss.Ins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ins::IsInitialized() const {
  return true;
}

void Ins::Swap(Ins* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ins::InternalSwap(Ins* other) {
  position_covariance_.InternalSwap(&other->position_covariance_);
  euler_angles_covariance_.InternalSwap(&other->euler_angles_covariance_);
  linear_velocity_covariance_.InternalSwap(&other->linear_velocity_covariance_);
  angular_velocity_covariance_.InternalSwap(&other->angular_velocity_covariance_);
  linear_acceleration_covariance_.InternalSwap(&other->linear_acceleration_covariance_);
  std::swap(header_, other->header_);
  std::swap(position_, other->position_);
  std::swap(euler_angles_, other->euler_angles_);
  std::swap(linear_velocity_, other->linear_velocity_);
  std::swap(angular_velocity_, other->angular_velocity_);
  std::swap(linear_acceleration_, other->linear_acceleration_);
  std::swap(measurement_time_, other->measurement_time_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ins::GetMetadata() const {
  protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fdrivers_2fgnss_2fproto_2fins_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ins

// optional .jmc_auto.common.Header header = 1;
bool Ins::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ins::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Ins::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ins::clear_header() {
  if (header_ != NULL) header_->::jmc_auto::common::Header::Clear();
  clear_has_header();
}
const ::jmc_auto::common::Header& Ins::header() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Ins.header)
  return header_ != NULL ? *header_
                         : *::jmc_auto::common::Header::internal_default_instance();
}
::jmc_auto::common::Header* Ins::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::jmc_auto::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.Ins.header)
  return header_;
}
::jmc_auto::common::Header* Ins::release_header() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.Ins.header)
  clear_has_header();
  ::jmc_auto::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Ins::set_allocated_header(::jmc_auto::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.Ins.header)
}

// optional double measurement_time = 2;
bool Ins::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Ins::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000040u;
}
void Ins::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void Ins::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
double Ins::measurement_time() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Ins.measurement_time)
  return measurement_time_;
}
void Ins::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.Ins.measurement_time)
}

// optional .jmc_auto.drivers.gnss.Ins.Type type = 3;
bool Ins::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Ins::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
void Ins::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void Ins::clear_type() {
  type_ = 0;
  clear_has_type();
}
::jmc_auto::drivers::gnss::Ins_Type Ins::type() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Ins.type)
  return static_cast< ::jmc_auto::drivers::gnss::Ins_Type >(type_);
}
void Ins::set_type(::jmc_auto::drivers::gnss::Ins_Type value) {
  assert(::jmc_auto::drivers::gnss::Ins_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.Ins.type)
}

// optional .jmc_auto.common.PointLLH position = 4;
bool Ins::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ins::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void Ins::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ins::clear_position() {
  if (position_ != NULL) position_->::jmc_auto::common::PointLLH::Clear();
  clear_has_position();
}
const ::jmc_auto::common::PointLLH& Ins::position() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Ins.position)
  return position_ != NULL ? *position_
                         : *::jmc_auto::common::PointLLH::internal_default_instance();
}
::jmc_auto::common::PointLLH* Ins::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::jmc_auto::common::PointLLH;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.Ins.position)
  return position_;
}
::jmc_auto::common::PointLLH* Ins::release_position() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.Ins.position)
  clear_has_position();
  ::jmc_auto::common::PointLLH* temp = position_;
  position_ = NULL;
  return temp;
}
void Ins::set_allocated_position(::jmc_auto::common::PointLLH* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.Ins.position)
}

// optional .jmc_auto.common.Point3D euler_angles = 5;
bool Ins::has_euler_angles() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ins::set_has_euler_angles() {
  _has_bits_[0] |= 0x00000004u;
}
void Ins::clear_has_euler_angles() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ins::clear_euler_angles() {
  if (euler_angles_ != NULL) euler_angles_->::jmc_auto::common::Point3D::Clear();
  clear_has_euler_angles();
}
const ::jmc_auto::common::Point3D& Ins::euler_angles() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Ins.euler_angles)
  return euler_angles_ != NULL ? *euler_angles_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* Ins::mutable_euler_angles() {
  set_has_euler_angles();
  if (euler_angles_ == NULL) {
    euler_angles_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.Ins.euler_angles)
  return euler_angles_;
}
::jmc_auto::common::Point3D* Ins::release_euler_angles() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.Ins.euler_angles)
  clear_has_euler_angles();
  ::jmc_auto::common::Point3D* temp = euler_angles_;
  euler_angles_ = NULL;
  return temp;
}
void Ins::set_allocated_euler_angles(::jmc_auto::common::Point3D* euler_angles) {
  delete euler_angles_;
  euler_angles_ = euler_angles;
  if (euler_angles) {
    set_has_euler_angles();
  } else {
    clear_has_euler_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.Ins.euler_angles)
}

// optional .jmc_auto.common.Point3D linear_velocity = 6;
bool Ins::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Ins::set_has_linear_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
void Ins::clear_has_linear_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
void Ins::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->::jmc_auto::common::Point3D::Clear();
  clear_has_linear_velocity();
}
const ::jmc_auto::common::Point3D& Ins::linear_velocity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Ins.linear_velocity)
  return linear_velocity_ != NULL ? *linear_velocity_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* Ins::mutable_linear_velocity() {
  set_has_linear_velocity();
  if (linear_velocity_ == NULL) {
    linear_velocity_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.Ins.linear_velocity)
  return linear_velocity_;
}
::jmc_auto::common::Point3D* Ins::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.Ins.linear_velocity)
  clear_has_linear_velocity();
  ::jmc_auto::common::Point3D* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
void Ins::set_allocated_linear_velocity(::jmc_auto::common::Point3D* linear_velocity) {
  delete linear_velocity_;
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    set_has_linear_velocity();
  } else {
    clear_has_linear_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.Ins.linear_velocity)
}

// optional .jmc_auto.common.Point3D angular_velocity = 7;
bool Ins::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Ins::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000010u;
}
void Ins::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000010u;
}
void Ins::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->::jmc_auto::common::Point3D::Clear();
  clear_has_angular_velocity();
}
const ::jmc_auto::common::Point3D& Ins::angular_velocity() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Ins.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* Ins::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.Ins.angular_velocity)
  return angular_velocity_;
}
::jmc_auto::common::Point3D* Ins::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.Ins.angular_velocity)
  clear_has_angular_velocity();
  ::jmc_auto::common::Point3D* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
void Ins::set_allocated_angular_velocity(::jmc_auto::common::Point3D* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.Ins.angular_velocity)
}

// optional .jmc_auto.common.Point3D linear_acceleration = 8;
bool Ins::has_linear_acceleration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Ins::set_has_linear_acceleration() {
  _has_bits_[0] |= 0x00000020u;
}
void Ins::clear_has_linear_acceleration() {
  _has_bits_[0] &= ~0x00000020u;
}
void Ins::clear_linear_acceleration() {
  if (linear_acceleration_ != NULL) linear_acceleration_->::jmc_auto::common::Point3D::Clear();
  clear_has_linear_acceleration();
}
const ::jmc_auto::common::Point3D& Ins::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Ins.linear_acceleration)
  return linear_acceleration_ != NULL ? *linear_acceleration_
                         : *::jmc_auto::common::Point3D::internal_default_instance();
}
::jmc_auto::common::Point3D* Ins::mutable_linear_acceleration() {
  set_has_linear_acceleration();
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::jmc_auto::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:jmc_auto.drivers.gnss.Ins.linear_acceleration)
  return linear_acceleration_;
}
::jmc_auto::common::Point3D* Ins::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:jmc_auto.drivers.gnss.Ins.linear_acceleration)
  clear_has_linear_acceleration();
  ::jmc_auto::common::Point3D* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
void Ins::set_allocated_linear_acceleration(::jmc_auto::common::Point3D* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    set_has_linear_acceleration();
  } else {
    clear_has_linear_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:jmc_auto.drivers.gnss.Ins.linear_acceleration)
}

// repeated float position_covariance = 9 [packed = true];
int Ins::position_covariance_size() const {
  return position_covariance_.size();
}
void Ins::clear_position_covariance() {
  position_covariance_.Clear();
}
float Ins::position_covariance(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Ins.position_covariance)
  return position_covariance_.Get(index);
}
void Ins::set_position_covariance(int index, float value) {
  position_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.Ins.position_covariance)
}
void Ins::add_position_covariance(float value) {
  position_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.drivers.gnss.Ins.position_covariance)
}
const ::google::protobuf::RepeatedField< float >&
Ins::position_covariance() const {
  // @@protoc_insertion_point(field_list:jmc_auto.drivers.gnss.Ins.position_covariance)
  return position_covariance_;
}
::google::protobuf::RepeatedField< float >*
Ins::mutable_position_covariance() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.drivers.gnss.Ins.position_covariance)
  return &position_covariance_;
}

// repeated float euler_angles_covariance = 10 [packed = true];
int Ins::euler_angles_covariance_size() const {
  return euler_angles_covariance_.size();
}
void Ins::clear_euler_angles_covariance() {
  euler_angles_covariance_.Clear();
}
float Ins::euler_angles_covariance(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Ins.euler_angles_covariance)
  return euler_angles_covariance_.Get(index);
}
void Ins::set_euler_angles_covariance(int index, float value) {
  euler_angles_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.Ins.euler_angles_covariance)
}
void Ins::add_euler_angles_covariance(float value) {
  euler_angles_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.drivers.gnss.Ins.euler_angles_covariance)
}
const ::google::protobuf::RepeatedField< float >&
Ins::euler_angles_covariance() const {
  // @@protoc_insertion_point(field_list:jmc_auto.drivers.gnss.Ins.euler_angles_covariance)
  return euler_angles_covariance_;
}
::google::protobuf::RepeatedField< float >*
Ins::mutable_euler_angles_covariance() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.drivers.gnss.Ins.euler_angles_covariance)
  return &euler_angles_covariance_;
}

// repeated float linear_velocity_covariance = 11 [packed = true];
int Ins::linear_velocity_covariance_size() const {
  return linear_velocity_covariance_.size();
}
void Ins::clear_linear_velocity_covariance() {
  linear_velocity_covariance_.Clear();
}
float Ins::linear_velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Ins.linear_velocity_covariance)
  return linear_velocity_covariance_.Get(index);
}
void Ins::set_linear_velocity_covariance(int index, float value) {
  linear_velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.Ins.linear_velocity_covariance)
}
void Ins::add_linear_velocity_covariance(float value) {
  linear_velocity_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.drivers.gnss.Ins.linear_velocity_covariance)
}
const ::google::protobuf::RepeatedField< float >&
Ins::linear_velocity_covariance() const {
  // @@protoc_insertion_point(field_list:jmc_auto.drivers.gnss.Ins.linear_velocity_covariance)
  return linear_velocity_covariance_;
}
::google::protobuf::RepeatedField< float >*
Ins::mutable_linear_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.drivers.gnss.Ins.linear_velocity_covariance)
  return &linear_velocity_covariance_;
}

// repeated float angular_velocity_covariance = 12 [packed = true];
int Ins::angular_velocity_covariance_size() const {
  return angular_velocity_covariance_.size();
}
void Ins::clear_angular_velocity_covariance() {
  angular_velocity_covariance_.Clear();
}
float Ins::angular_velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Ins.angular_velocity_covariance)
  return angular_velocity_covariance_.Get(index);
}
void Ins::set_angular_velocity_covariance(int index, float value) {
  angular_velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.Ins.angular_velocity_covariance)
}
void Ins::add_angular_velocity_covariance(float value) {
  angular_velocity_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.drivers.gnss.Ins.angular_velocity_covariance)
}
const ::google::protobuf::RepeatedField< float >&
Ins::angular_velocity_covariance() const {
  // @@protoc_insertion_point(field_list:jmc_auto.drivers.gnss.Ins.angular_velocity_covariance)
  return angular_velocity_covariance_;
}
::google::protobuf::RepeatedField< float >*
Ins::mutable_angular_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.drivers.gnss.Ins.angular_velocity_covariance)
  return &angular_velocity_covariance_;
}

// repeated float linear_acceleration_covariance = 13 [packed = true];
int Ins::linear_acceleration_covariance_size() const {
  return linear_acceleration_covariance_.size();
}
void Ins::clear_linear_acceleration_covariance() {
  linear_acceleration_covariance_.Clear();
}
float Ins::linear_acceleration_covariance(int index) const {
  // @@protoc_insertion_point(field_get:jmc_auto.drivers.gnss.Ins.linear_acceleration_covariance)
  return linear_acceleration_covariance_.Get(index);
}
void Ins::set_linear_acceleration_covariance(int index, float value) {
  linear_acceleration_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:jmc_auto.drivers.gnss.Ins.linear_acceleration_covariance)
}
void Ins::add_linear_acceleration_covariance(float value) {
  linear_acceleration_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:jmc_auto.drivers.gnss.Ins.linear_acceleration_covariance)
}
const ::google::protobuf::RepeatedField< float >&
Ins::linear_acceleration_covariance() const {
  // @@protoc_insertion_point(field_list:jmc_auto.drivers.gnss.Ins.linear_acceleration_covariance)
  return linear_acceleration_covariance_;
}
::google::protobuf::RepeatedField< float >*
Ins::mutable_linear_acceleration_covariance() {
  // @@protoc_insertion_point(field_mutable_list:jmc_auto.drivers.gnss.Ins.linear_acceleration_covariance)
  return &linear_acceleration_covariance_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gnss
}  // namespace drivers
}  // namespace jmc_auto

// @@protoc_insertion_point(global_scope)
